# SNMP MIB module (POWERNET-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/POWERNET-MIB
# Produced by pysmi-1.5.4 at Mon Oct 14 22:39:28 2024
# On host MacBook-Pro.local platform Darwin version 24.0.0 by user lextm
# Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 NotificationType,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "NotificationType",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DisplayString,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions



class Rpdu2OutletPhaseLayoutType(Integer32):
    """Custom type Rpdu2OutletPhaseLayoutType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("seqPhase1ToNeutral", 1),
          ("seqPhase1ToPhase2", 4),
          ("seqPhase2ToNeutral", 2),
          ("seqPhase2ToPhase3", 5),
          ("seqPhase3ToNeutral", 3),
          ("seqPhase3ToPhase1", 6))
    )





class AirIRSCConfigType(Integer32):
    """Custom type AirIRSCConfigType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("in-row", 3),
          ("racs", 1),
          ("spot", 2))
    )





class AirIRSCCapacityControlType(Integer32):
    """Custom type AirIRSCCapacityControlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("discrete", 1),
          ("proportional", 2))
    )





class AirIRSCFanSpeedPreference(Integer32):
    """Custom type AirIRSCFanSpeedPreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("high", 5),
          ("low", 1),
          ("med", 3),
          ("med-high", 4),
          ("med-low", 2))
    )





class AirIRSCFanSpeedControl(Integer32):
    """Custom type AirIRSCFanSpeedControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("manual", 2))
    )





class AirIRG2RDType2IOState(Integer32):
    """Custom type AirIRG2RDType2IOState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )





class AirIRmAlarmState(Integer32):
    """Custom type AirIRmAlarmState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("ok", 1))
    )





class AirIRmControlState(Integer32):
    """Custom type AirIRmControlState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )





class AirIRmStopState(Integer32):
    """Custom type AirIRmStopState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("maybeOn", 1),
          ("unitOff", 2))
    )





class AirIRmActivityState(Integer32):
    """Custom type AirIRmActivityState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("inactive", 1))
    )




# TEXTUAL-CONVENTIONS



# MIB Managed Objects in the order of their OIDs

_Apc_ObjectIdentity = ObjectIdentity
apc = _Apc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318)
)
_Products_ObjectIdentity = ObjectIdentity
products = _Products_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1)
)
_Hardware_ObjectIdentity = ObjectIdentity
hardware = _Hardware_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1)
)
_Ups_ObjectIdentity = ObjectIdentity
ups = _Ups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1)
)
_UpsIdent_ObjectIdentity = ObjectIdentity
upsIdent = _UpsIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1)
)
_UpsBasicIdent_ObjectIdentity = ObjectIdentity
upsBasicIdent = _UpsBasicIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1)
)
_UpsBasicIdentModel_Type = DisplayString
_UpsBasicIdentModel_Object = MibScalar
upsBasicIdentModel = _UpsBasicIdentModel_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1, 1),
    _UpsBasicIdentModel_Type()
)
upsBasicIdentModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsBasicIdentModel.setStatus("mandatory")
_UpsBasicIdentName_Type = DisplayString
_UpsBasicIdentName_Object = MibScalar
upsBasicIdentName = _UpsBasicIdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 1, 2),
    _UpsBasicIdentName_Type()
)
upsBasicIdentName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsBasicIdentName.setStatus("mandatory")
_UpsAdvIdent_ObjectIdentity = ObjectIdentity
upsAdvIdent = _UpsAdvIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2)
)
_UpsAdvIdentFirmwareRevision_Type = DisplayString
_UpsAdvIdentFirmwareRevision_Object = MibScalar
upsAdvIdentFirmwareRevision = _UpsAdvIdentFirmwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 1),
    _UpsAdvIdentFirmwareRevision_Type()
)
upsAdvIdentFirmwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvIdentFirmwareRevision.setStatus("mandatory")
_UpsAdvIdentDateOfManufacture_Type = DisplayString
_UpsAdvIdentDateOfManufacture_Object = MibScalar
upsAdvIdentDateOfManufacture = _UpsAdvIdentDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 2),
    _UpsAdvIdentDateOfManufacture_Type()
)
upsAdvIdentDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvIdentDateOfManufacture.setStatus("mandatory")
_UpsAdvIdentSerialNumber_Type = DisplayString
_UpsAdvIdentSerialNumber_Object = MibScalar
upsAdvIdentSerialNumber = _UpsAdvIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 3),
    _UpsAdvIdentSerialNumber_Type()
)
upsAdvIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvIdentSerialNumber.setStatus("mandatory")
_UpsAdvIdentFirmwareRevision2_Type = DisplayString
_UpsAdvIdentFirmwareRevision2_Object = MibScalar
upsAdvIdentFirmwareRevision2 = _UpsAdvIdentFirmwareRevision2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 4),
    _UpsAdvIdentFirmwareRevision2_Type()
)
upsAdvIdentFirmwareRevision2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvIdentFirmwareRevision2.setStatus("mandatory")
_UpsAdvIdentSkuNumber_Type = DisplayString
_UpsAdvIdentSkuNumber_Object = MibScalar
upsAdvIdentSkuNumber = _UpsAdvIdentSkuNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 1, 2, 5),
    _UpsAdvIdentSkuNumber_Type()
)
upsAdvIdentSkuNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvIdentSkuNumber.setStatus("mandatory")
_UpsBattery_ObjectIdentity = ObjectIdentity
upsBattery = _UpsBattery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2)
)
_UpsBasicBattery_ObjectIdentity = ObjectIdentity
upsBasicBattery = _UpsBasicBattery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1)
)


class _UpsBasicBatteryStatus_Type(Integer32):
    """Custom type upsBasicBatteryStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("batteryLow", 3),
          ("batteryNormal", 2),
          ("unknown", 1))
    )


_UpsBasicBatteryStatus_Type.__name__ = "Integer32"
_UpsBasicBatteryStatus_Object = MibScalar
upsBasicBatteryStatus = _UpsBasicBatteryStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 1),
    _UpsBasicBatteryStatus_Type()
)
upsBasicBatteryStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsBasicBatteryStatus.setStatus("mandatory")
_UpsBasicBatteryTimeOnBattery_Type = TimeTicks
_UpsBasicBatteryTimeOnBattery_Object = MibScalar
upsBasicBatteryTimeOnBattery = _UpsBasicBatteryTimeOnBattery_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 2),
    _UpsBasicBatteryTimeOnBattery_Type()
)
upsBasicBatteryTimeOnBattery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsBasicBatteryTimeOnBattery.setStatus("mandatory")
_UpsBasicBatteryLastReplaceDate_Type = DisplayString
_UpsBasicBatteryLastReplaceDate_Object = MibScalar
upsBasicBatteryLastReplaceDate = _UpsBasicBatteryLastReplaceDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 1, 3),
    _UpsBasicBatteryLastReplaceDate_Type()
)
upsBasicBatteryLastReplaceDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsBasicBatteryLastReplaceDate.setStatus("mandatory")
_UpsAdvBattery_ObjectIdentity = ObjectIdentity
upsAdvBattery = _UpsAdvBattery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2)
)
_UpsAdvBatteryCapacity_Type = Gauge32
_UpsAdvBatteryCapacity_Object = MibScalar
upsAdvBatteryCapacity = _UpsAdvBatteryCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 1),
    _UpsAdvBatteryCapacity_Type()
)
upsAdvBatteryCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryCapacity.setStatus("mandatory")
_UpsAdvBatteryTemperature_Type = Gauge32
_UpsAdvBatteryTemperature_Object = MibScalar
upsAdvBatteryTemperature = _UpsAdvBatteryTemperature_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 2),
    _UpsAdvBatteryTemperature_Type()
)
upsAdvBatteryTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryTemperature.setStatus("mandatory")
_UpsAdvBatteryRunTimeRemaining_Type = TimeTicks
_UpsAdvBatteryRunTimeRemaining_Object = MibScalar
upsAdvBatteryRunTimeRemaining = _UpsAdvBatteryRunTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 3),
    _UpsAdvBatteryRunTimeRemaining_Type()
)
upsAdvBatteryRunTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryRunTimeRemaining.setStatus("mandatory")


class _UpsAdvBatteryReplaceIndicator_Type(Integer32):
    """Custom type upsAdvBatteryReplaceIndicator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("batteryNeedsReplacing", 2),
          ("noBatteryNeedsReplacing", 1))
    )


_UpsAdvBatteryReplaceIndicator_Type.__name__ = "Integer32"
_UpsAdvBatteryReplaceIndicator_Object = MibScalar
upsAdvBatteryReplaceIndicator = _UpsAdvBatteryReplaceIndicator_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 4),
    _UpsAdvBatteryReplaceIndicator_Type()
)
upsAdvBatteryReplaceIndicator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryReplaceIndicator.setStatus("mandatory")
_UpsAdvBatteryNumOfBattPacks_Type = Integer32
_UpsAdvBatteryNumOfBattPacks_Object = MibScalar
upsAdvBatteryNumOfBattPacks = _UpsAdvBatteryNumOfBattPacks_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 5),
    _UpsAdvBatteryNumOfBattPacks_Type()
)
upsAdvBatteryNumOfBattPacks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryNumOfBattPacks.setStatus("mandatory")
_UpsAdvBatteryNumOfBadBattPacks_Type = Integer32
_UpsAdvBatteryNumOfBadBattPacks_Object = MibScalar
upsAdvBatteryNumOfBadBattPacks = _UpsAdvBatteryNumOfBadBattPacks_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 6),
    _UpsAdvBatteryNumOfBadBattPacks_Type()
)
upsAdvBatteryNumOfBadBattPacks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryNumOfBadBattPacks.setStatus("mandatory")
_UpsAdvBatteryNominalVoltage_Type = Integer32
_UpsAdvBatteryNominalVoltage_Object = MibScalar
upsAdvBatteryNominalVoltage = _UpsAdvBatteryNominalVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 7),
    _UpsAdvBatteryNominalVoltage_Type()
)
upsAdvBatteryNominalVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryNominalVoltage.setStatus("mandatory")
_UpsAdvBatteryActualVoltage_Type = Integer32
_UpsAdvBatteryActualVoltage_Object = MibScalar
upsAdvBatteryActualVoltage = _UpsAdvBatteryActualVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 8),
    _UpsAdvBatteryActualVoltage_Type()
)
upsAdvBatteryActualVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryActualVoltage.setStatus("mandatory")
_UpsAdvBatteryCurrent_Type = Integer32
_UpsAdvBatteryCurrent_Object = MibScalar
upsAdvBatteryCurrent = _UpsAdvBatteryCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 9),
    _UpsAdvBatteryCurrent_Type()
)
upsAdvBatteryCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryCurrent.setStatus("mandatory")
_UpsAdvTotalDCCurrent_Type = Integer32
_UpsAdvTotalDCCurrent_Object = MibScalar
upsAdvTotalDCCurrent = _UpsAdvTotalDCCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 10),
    _UpsAdvTotalDCCurrent_Type()
)
upsAdvTotalDCCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvTotalDCCurrent.setStatus("mandatory")
_UpsAdvBatteryFullCapacity_Type = Integer32
_UpsAdvBatteryFullCapacity_Object = MibScalar
upsAdvBatteryFullCapacity = _UpsAdvBatteryFullCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 11),
    _UpsAdvBatteryFullCapacity_Type()
)
upsAdvBatteryFullCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryFullCapacity.setStatus("mandatory")
_UpsAdvBatteryActualVoltageTable_Object = MibTable
upsAdvBatteryActualVoltageTable = _UpsAdvBatteryActualVoltageTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12)
)
if mibBuilder.loadTexts:
    upsAdvBatteryActualVoltageTable.setStatus("mandatory")
_UpsAdvBatteryActualVoltageEntry_Object = MibTableRow
upsAdvBatteryActualVoltageEntry = _UpsAdvBatteryActualVoltageEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1)
)
upsAdvBatteryActualVoltageEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsAdvBatteryActualVoltageTableIndex"),
)
if mibBuilder.loadTexts:
    upsAdvBatteryActualVoltageEntry.setStatus("mandatory")
_UpsAdvBatteryActualVoltageTableIndex_Type = Integer32
_UpsAdvBatteryActualVoltageTableIndex_Object = MibTableColumn
upsAdvBatteryActualVoltageTableIndex = _UpsAdvBatteryActualVoltageTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1, 1),
    _UpsAdvBatteryActualVoltageTableIndex_Type()
)
upsAdvBatteryActualVoltageTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryActualVoltageTableIndex.setStatus("mandatory")


class _UpsAdvBatteryActualVoltagePolarity_Type(Integer32):
    """Custom type upsAdvBatteryActualVoltagePolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("negative", 1),
          ("positive", 0))
    )


_UpsAdvBatteryActualVoltagePolarity_Type.__name__ = "Integer32"
_UpsAdvBatteryActualVoltagePolarity_Object = MibTableColumn
upsAdvBatteryActualVoltagePolarity = _UpsAdvBatteryActualVoltagePolarity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1, 2),
    _UpsAdvBatteryActualVoltagePolarity_Type()
)
upsAdvBatteryActualVoltagePolarity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryActualVoltagePolarity.setStatus("mandatory")
_UpsAdvBatteryFrameActualVoltage_Type = Integer32
_UpsAdvBatteryFrameActualVoltage_Object = MibTableColumn
upsAdvBatteryFrameActualVoltage = _UpsAdvBatteryFrameActualVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 12, 1, 3),
    _UpsAdvBatteryFrameActualVoltage_Type()
)
upsAdvBatteryFrameActualVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryFrameActualVoltage.setStatus("mandatory")
_UpsAdvTotalDCCurrentTable_Object = MibTable
upsAdvTotalDCCurrentTable = _UpsAdvTotalDCCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13)
)
if mibBuilder.loadTexts:
    upsAdvTotalDCCurrentTable.setStatus("mandatory")
_UpsAdvTotalDCCurrentEntry_Object = MibTableRow
upsAdvTotalDCCurrentEntry = _UpsAdvTotalDCCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1)
)
upsAdvTotalDCCurrentEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsAdvTotalDCCurrentTableIndex"),
)
if mibBuilder.loadTexts:
    upsAdvTotalDCCurrentEntry.setStatus("mandatory")
_UpsAdvTotalDCCurrentTableIndex_Type = Integer32
_UpsAdvTotalDCCurrentTableIndex_Object = MibTableColumn
upsAdvTotalDCCurrentTableIndex = _UpsAdvTotalDCCurrentTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1, 1),
    _UpsAdvTotalDCCurrentTableIndex_Type()
)
upsAdvTotalDCCurrentTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvTotalDCCurrentTableIndex.setStatus("mandatory")


class _UpsAdvTotalDCCurrentPolarity_Type(Integer32):
    """Custom type upsAdvTotalDCCurrentPolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("negative", 1),
          ("positive", 0))
    )


_UpsAdvTotalDCCurrentPolarity_Type.__name__ = "Integer32"
_UpsAdvTotalDCCurrentPolarity_Object = MibTableColumn
upsAdvTotalDCCurrentPolarity = _UpsAdvTotalDCCurrentPolarity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1, 2),
    _UpsAdvTotalDCCurrentPolarity_Type()
)
upsAdvTotalDCCurrentPolarity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvTotalDCCurrentPolarity.setStatus("mandatory")
_UpsAdvTotalFrameDCCurrent_Type = Integer32
_UpsAdvTotalFrameDCCurrent_Object = MibTableColumn
upsAdvTotalFrameDCCurrent = _UpsAdvTotalFrameDCCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 13, 1, 3),
    _UpsAdvTotalFrameDCCurrent_Type()
)
upsAdvTotalFrameDCCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvTotalFrameDCCurrent.setStatus("mandatory")
_UpsAdvBatteryCurrentTable_Object = MibTable
upsAdvBatteryCurrentTable = _UpsAdvBatteryCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14)
)
if mibBuilder.loadTexts:
    upsAdvBatteryCurrentTable.setStatus("mandatory")
_UpsAdvBatteryCurrentEntry_Object = MibTableRow
upsAdvBatteryCurrentEntry = _UpsAdvBatteryCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1)
)
upsAdvBatteryCurrentEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsAdvBatteryCurrentTableIndex"),
    (0, "POWERNET-MIB", "upsAdvBatteryCurrentIndex"),
)
if mibBuilder.loadTexts:
    upsAdvBatteryCurrentEntry.setStatus("mandatory")
_UpsAdvBatteryCurrentTableIndex_Type = Integer32
_UpsAdvBatteryCurrentTableIndex_Object = MibTableColumn
upsAdvBatteryCurrentTableIndex = _UpsAdvBatteryCurrentTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 1),
    _UpsAdvBatteryCurrentTableIndex_Type()
)
upsAdvBatteryCurrentTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryCurrentTableIndex.setStatus("mandatory")
_UpsAdvBatteryCurrentIndex_Type = Integer32
_UpsAdvBatteryCurrentIndex_Object = MibTableColumn
upsAdvBatteryCurrentIndex = _UpsAdvBatteryCurrentIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 2),
    _UpsAdvBatteryCurrentIndex_Type()
)
upsAdvBatteryCurrentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryCurrentIndex.setStatus("mandatory")


class _UpsAdvBatteryCurrentPolarity_Type(Integer32):
    """Custom type upsAdvBatteryCurrentPolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("negative", 1),
          ("positive", 0))
    )


_UpsAdvBatteryCurrentPolarity_Type.__name__ = "Integer32"
_UpsAdvBatteryCurrentPolarity_Object = MibTableColumn
upsAdvBatteryCurrentPolarity = _UpsAdvBatteryCurrentPolarity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 3),
    _UpsAdvBatteryCurrentPolarity_Type()
)
upsAdvBatteryCurrentPolarity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryCurrentPolarity.setStatus("mandatory")
_UpsAdvBatteryFrameCurrent_Type = Integer32
_UpsAdvBatteryFrameCurrent_Object = MibTableColumn
upsAdvBatteryFrameCurrent = _UpsAdvBatteryFrameCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 2, 14, 1, 4),
    _UpsAdvBatteryFrameCurrent_Type()
)
upsAdvBatteryFrameCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvBatteryFrameCurrent.setStatus("mandatory")
_UpsHighPrecBattery_ObjectIdentity = ObjectIdentity
upsHighPrecBattery = _UpsHighPrecBattery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3)
)
_UpsHighPrecBatteryCapacity_Type = Gauge32
_UpsHighPrecBatteryCapacity_Object = MibScalar
upsHighPrecBatteryCapacity = _UpsHighPrecBatteryCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 1),
    _UpsHighPrecBatteryCapacity_Type()
)
upsHighPrecBatteryCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecBatteryCapacity.setStatus("mandatory")
_UpsHighPrecBatteryTemperature_Type = Gauge32
_UpsHighPrecBatteryTemperature_Object = MibScalar
upsHighPrecBatteryTemperature = _UpsHighPrecBatteryTemperature_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 2),
    _UpsHighPrecBatteryTemperature_Type()
)
upsHighPrecBatteryTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecBatteryTemperature.setStatus("mandatory")
_UpsHighPrecBatteryNominalVoltage_Type = Integer32
_UpsHighPrecBatteryNominalVoltage_Object = MibScalar
upsHighPrecBatteryNominalVoltage = _UpsHighPrecBatteryNominalVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 3),
    _UpsHighPrecBatteryNominalVoltage_Type()
)
upsHighPrecBatteryNominalVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecBatteryNominalVoltage.setStatus("mandatory")
_UpsHighPrecBatteryActualVoltage_Type = Integer32
_UpsHighPrecBatteryActualVoltage_Object = MibScalar
upsHighPrecBatteryActualVoltage = _UpsHighPrecBatteryActualVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 4),
    _UpsHighPrecBatteryActualVoltage_Type()
)
upsHighPrecBatteryActualVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecBatteryActualVoltage.setStatus("mandatory")
_UpsHighPrecBatteryCurrent_Type = Integer32
_UpsHighPrecBatteryCurrent_Object = MibScalar
upsHighPrecBatteryCurrent = _UpsHighPrecBatteryCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 5),
    _UpsHighPrecBatteryCurrent_Type()
)
upsHighPrecBatteryCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecBatteryCurrent.setStatus("mandatory")
_UpsHighPrecTotalDCCurrent_Type = Integer32
_UpsHighPrecTotalDCCurrent_Object = MibScalar
upsHighPrecTotalDCCurrent = _UpsHighPrecTotalDCCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 6),
    _UpsHighPrecTotalDCCurrent_Type()
)
upsHighPrecTotalDCCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecTotalDCCurrent.setStatus("mandatory")
_UpsHighPrecBatteryActualVoltageTable_Object = MibTable
upsHighPrecBatteryActualVoltageTable = _UpsHighPrecBatteryActualVoltageTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7)
)
if mibBuilder.loadTexts:
    upsHighPrecBatteryActualVoltageTable.setStatus("mandatory")
_UpsHighPrecBatteryActualVoltageEntry_Object = MibTableRow
upsHighPrecBatteryActualVoltageEntry = _UpsHighPrecBatteryActualVoltageEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1)
)
upsHighPrecBatteryActualVoltageEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsHighPrecBatteryActualVoltageTableIndex"),
)
if mibBuilder.loadTexts:
    upsHighPrecBatteryActualVoltageEntry.setStatus("mandatory")
_UpsHighPrecBatteryActualVoltageTableIndex_Type = Integer32
_UpsHighPrecBatteryActualVoltageTableIndex_Object = MibTableColumn
upsHighPrecBatteryActualVoltageTableIndex = _UpsHighPrecBatteryActualVoltageTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1, 1),
    _UpsHighPrecBatteryActualVoltageTableIndex_Type()
)
upsHighPrecBatteryActualVoltageTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecBatteryActualVoltageTableIndex.setStatus("mandatory")


class _UpsHighPrecBatteryActualVoltagePolarity_Type(Integer32):
    """Custom type upsHighPrecBatteryActualVoltagePolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("negative", 1),
          ("positive", 0))
    )


_UpsHighPrecBatteryActualVoltagePolarity_Type.__name__ = "Integer32"
_UpsHighPrecBatteryActualVoltagePolarity_Object = MibTableColumn
upsHighPrecBatteryActualVoltagePolarity = _UpsHighPrecBatteryActualVoltagePolarity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1, 2),
    _UpsHighPrecBatteryActualVoltagePolarity_Type()
)
upsHighPrecBatteryActualVoltagePolarity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecBatteryActualVoltagePolarity.setStatus("mandatory")
_UpsHighPrecBatteryVoltage_Type = Integer32
_UpsHighPrecBatteryVoltage_Object = MibTableColumn
upsHighPrecBatteryVoltage = _UpsHighPrecBatteryVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 7, 1, 3),
    _UpsHighPrecBatteryVoltage_Type()
)
upsHighPrecBatteryVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecBatteryVoltage.setStatus("mandatory")
_UpsHighPrecTotalDCCurrentTable_Object = MibTable
upsHighPrecTotalDCCurrentTable = _UpsHighPrecTotalDCCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8)
)
if mibBuilder.loadTexts:
    upsHighPrecTotalDCCurrentTable.setStatus("mandatory")
_UpsHighPrecTotalDCCurrentEntry_Object = MibTableRow
upsHighPrecTotalDCCurrentEntry = _UpsHighPrecTotalDCCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1)
)
upsHighPrecTotalDCCurrentEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsHighPrecTotalDCCurrentTableIndex"),
)
if mibBuilder.loadTexts:
    upsHighPrecTotalDCCurrentEntry.setStatus("mandatory")
_UpsHighPrecTotalDCCurrentTableIndex_Type = Integer32
_UpsHighPrecTotalDCCurrentTableIndex_Object = MibTableColumn
upsHighPrecTotalDCCurrentTableIndex = _UpsHighPrecTotalDCCurrentTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1, 1),
    _UpsHighPrecTotalDCCurrentTableIndex_Type()
)
upsHighPrecTotalDCCurrentTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecTotalDCCurrentTableIndex.setStatus("mandatory")


class _UpsHighPrecTotalDCCurrentPolarity_Type(Integer32):
    """Custom type upsHighPrecTotalDCCurrentPolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("negative", 1),
          ("positive", 0))
    )


_UpsHighPrecTotalDCCurrentPolarity_Type.__name__ = "Integer32"
_UpsHighPrecTotalDCCurrentPolarity_Object = MibTableColumn
upsHighPrecTotalDCCurrentPolarity = _UpsHighPrecTotalDCCurrentPolarity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1, 2),
    _UpsHighPrecTotalDCCurrentPolarity_Type()
)
upsHighPrecTotalDCCurrentPolarity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecTotalDCCurrentPolarity.setStatus("mandatory")
_UpsHighPrecTotalDCFrameCurrent_Type = Integer32
_UpsHighPrecTotalDCFrameCurrent_Object = MibTableColumn
upsHighPrecTotalDCFrameCurrent = _UpsHighPrecTotalDCFrameCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 8, 1, 3),
    _UpsHighPrecTotalDCFrameCurrent_Type()
)
upsHighPrecTotalDCFrameCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecTotalDCFrameCurrent.setStatus("mandatory")
_UpsHighPrecBatteryCurrentTable_Object = MibTable
upsHighPrecBatteryCurrentTable = _UpsHighPrecBatteryCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9)
)
if mibBuilder.loadTexts:
    upsHighPrecBatteryCurrentTable.setStatus("mandatory")
_UpsHighPrecBatteryCurrentEntry_Object = MibTableRow
upsHighPrecBatteryCurrentEntry = _UpsHighPrecBatteryCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1)
)
upsHighPrecBatteryCurrentEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsHighPrecBatteryCurrentTableIndex"),
    (0, "POWERNET-MIB", "upsHighPrecBatteryCurrentIndex"),
)
if mibBuilder.loadTexts:
    upsHighPrecBatteryCurrentEntry.setStatus("mandatory")
_UpsHighPrecBatteryCurrentTableIndex_Type = Integer32
_UpsHighPrecBatteryCurrentTableIndex_Object = MibTableColumn
upsHighPrecBatteryCurrentTableIndex = _UpsHighPrecBatteryCurrentTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 1),
    _UpsHighPrecBatteryCurrentTableIndex_Type()
)
upsHighPrecBatteryCurrentTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecBatteryCurrentTableIndex.setStatus("mandatory")
_UpsHighPrecBatteryCurrentIndex_Type = Integer32
_UpsHighPrecBatteryCurrentIndex_Object = MibTableColumn
upsHighPrecBatteryCurrentIndex = _UpsHighPrecBatteryCurrentIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 2),
    _UpsHighPrecBatteryCurrentIndex_Type()
)
upsHighPrecBatteryCurrentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecBatteryCurrentIndex.setStatus("mandatory")


class _UpsHighPrecBatteryCurrentPolarity_Type(Integer32):
    """Custom type upsHighPrecBatteryCurrentPolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("negative", 1),
          ("positive", 0))
    )


_UpsHighPrecBatteryCurrentPolarity_Type.__name__ = "Integer32"
_UpsHighPrecBatteryCurrentPolarity_Object = MibTableColumn
upsHighPrecBatteryCurrentPolarity = _UpsHighPrecBatteryCurrentPolarity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 3),
    _UpsHighPrecBatteryCurrentPolarity_Type()
)
upsHighPrecBatteryCurrentPolarity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecBatteryCurrentPolarity.setStatus("mandatory")
_UpsHighPrecBatteryFrameCurrent_Type = Integer32
_UpsHighPrecBatteryFrameCurrent_Object = MibTableColumn
upsHighPrecBatteryFrameCurrent = _UpsHighPrecBatteryFrameCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 2, 3, 9, 1, 4),
    _UpsHighPrecBatteryFrameCurrent_Type()
)
upsHighPrecBatteryFrameCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecBatteryFrameCurrent.setStatus("mandatory")
_UpsInput_ObjectIdentity = ObjectIdentity
upsInput = _UpsInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3)
)
_UpsBasicInput_ObjectIdentity = ObjectIdentity
upsBasicInput = _UpsBasicInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 1)
)
_UpsBasicInputPhase_Type = Integer32
_UpsBasicInputPhase_Object = MibScalar
upsBasicInputPhase = _UpsBasicInputPhase_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 1, 1),
    _UpsBasicInputPhase_Type()
)
upsBasicInputPhase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsBasicInputPhase.setStatus("mandatory")
_UpsAdvInput_ObjectIdentity = ObjectIdentity
upsAdvInput = _UpsAdvInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2)
)
_UpsAdvInputLineVoltage_Type = Gauge32
_UpsAdvInputLineVoltage_Object = MibScalar
upsAdvInputLineVoltage = _UpsAdvInputLineVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 1),
    _UpsAdvInputLineVoltage_Type()
)
upsAdvInputLineVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputLineVoltage.setStatus("mandatory")
_UpsAdvInputMaxLineVoltage_Type = Gauge32
_UpsAdvInputMaxLineVoltage_Object = MibScalar
upsAdvInputMaxLineVoltage = _UpsAdvInputMaxLineVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 2),
    _UpsAdvInputMaxLineVoltage_Type()
)
upsAdvInputMaxLineVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputMaxLineVoltage.setStatus("mandatory")
_UpsAdvInputMinLineVoltage_Type = Gauge32
_UpsAdvInputMinLineVoltage_Object = MibScalar
upsAdvInputMinLineVoltage = _UpsAdvInputMinLineVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 3),
    _UpsAdvInputMinLineVoltage_Type()
)
upsAdvInputMinLineVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputMinLineVoltage.setStatus("mandatory")
_UpsAdvInputFrequency_Type = Gauge32
_UpsAdvInputFrequency_Object = MibScalar
upsAdvInputFrequency = _UpsAdvInputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 4),
    _UpsAdvInputFrequency_Type()
)
upsAdvInputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputFrequency.setStatus("mandatory")


class _UpsAdvInputLineFailCause_Type(Integer32):
    """Custom type upsAdvInputLineFailCause based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("blackout", 4),
          ("brownout", 3),
          ("deepMomentarySag", 6),
          ("highLineVoltage", 2),
          ("largeMomentarySpike", 8),
          ("noTransfer", 1),
          ("rateOfVoltageChange", 10),
          ("selfTest", 9),
          ("smallMomentarySag", 5),
          ("smallMomentarySpike", 7))
    )


_UpsAdvInputLineFailCause_Type.__name__ = "Integer32"
_UpsAdvInputLineFailCause_Object = MibScalar
upsAdvInputLineFailCause = _UpsAdvInputLineFailCause_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 5),
    _UpsAdvInputLineFailCause_Type()
)
upsAdvInputLineFailCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputLineFailCause.setStatus("mandatory")
_UpsAdvInputNominalFrequency_Type = Integer32
_UpsAdvInputNominalFrequency_Object = MibScalar
upsAdvInputNominalFrequency = _UpsAdvInputNominalFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 6),
    _UpsAdvInputNominalFrequency_Type()
)
upsAdvInputNominalFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputNominalFrequency.setStatus("mandatory")
_UpsAdvInputNominalVoltage_Type = Integer32
_UpsAdvInputNominalVoltage_Object = MibScalar
upsAdvInputNominalVoltage = _UpsAdvInputNominalVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 7),
    _UpsAdvInputNominalVoltage_Type()
)
upsAdvInputNominalVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputNominalVoltage.setStatus("mandatory")
_UpsAdvInputBypassNominalFrequency_Type = Integer32
_UpsAdvInputBypassNominalFrequency_Object = MibScalar
upsAdvInputBypassNominalFrequency = _UpsAdvInputBypassNominalFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 8),
    _UpsAdvInputBypassNominalFrequency_Type()
)
upsAdvInputBypassNominalFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputBypassNominalFrequency.setStatus("mandatory")
_UpsAdvInputBypassNominalVoltage_Type = Integer32
_UpsAdvInputBypassNominalVoltage_Object = MibScalar
upsAdvInputBypassNominalVoltage = _UpsAdvInputBypassNominalVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 9),
    _UpsAdvInputBypassNominalVoltage_Type()
)
upsAdvInputBypassNominalVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputBypassNominalVoltage.setStatus("mandatory")
_UpsAdvInputStatisticsTable_Object = MibTable
upsAdvInputStatisticsTable = _UpsAdvInputStatisticsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10)
)
if mibBuilder.loadTexts:
    upsAdvInputStatisticsTable.setStatus("mandatory")
_UpsAdvInputStatisticsEntry_Object = MibTableRow
upsAdvInputStatisticsEntry = _UpsAdvInputStatisticsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1)
)
upsAdvInputStatisticsEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsAdvInputStatisticsIndex"),
)
if mibBuilder.loadTexts:
    upsAdvInputStatisticsEntry.setStatus("mandatory")
_UpsAdvInputStatisticsIndex_Type = Integer32
_UpsAdvInputStatisticsIndex_Object = MibTableColumn
upsAdvInputStatisticsIndex = _UpsAdvInputStatisticsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 1),
    _UpsAdvInputStatisticsIndex_Type()
)
upsAdvInputStatisticsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputStatisticsIndex.setStatus("mandatory")
_UpsAdvInputApparentPower_Type = Integer32
_UpsAdvInputApparentPower_Object = MibTableColumn
upsAdvInputApparentPower = _UpsAdvInputApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 2),
    _UpsAdvInputApparentPower_Type()
)
upsAdvInputApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputApparentPower.setStatus("mandatory")
_UpsAdvInputVoltageTHD_Type = Integer32
_UpsAdvInputVoltageTHD_Object = MibTableColumn
upsAdvInputVoltageTHD = _UpsAdvInputVoltageTHD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 3),
    _UpsAdvInputVoltageTHD_Type()
)
upsAdvInputVoltageTHD.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputVoltageTHD.setStatus("mandatory")
_UpsAdvInputBypassVoltageTHD_Type = Integer32
_UpsAdvInputBypassVoltageTHD_Object = MibTableColumn
upsAdvInputBypassVoltageTHD = _UpsAdvInputBypassVoltageTHD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 4),
    _UpsAdvInputBypassVoltageTHD_Type()
)
upsAdvInputBypassVoltageTHD.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputBypassVoltageTHD.setStatus("mandatory")
_UpsAdvInputPeakCurrent_Type = Integer32
_UpsAdvInputPeakCurrent_Object = MibTableColumn
upsAdvInputPeakCurrent = _UpsAdvInputPeakCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 5),
    _UpsAdvInputPeakCurrent_Type()
)
upsAdvInputPeakCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputPeakCurrent.setStatus("mandatory")
_UpsAdvInputBypassPeakCurrent_Type = Integer32
_UpsAdvInputBypassPeakCurrent_Object = MibTableColumn
upsAdvInputBypassPeakCurrent = _UpsAdvInputBypassPeakCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 2, 10, 1, 6),
    _UpsAdvInputBypassPeakCurrent_Type()
)
upsAdvInputBypassPeakCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvInputBypassPeakCurrent.setStatus("mandatory")
_UpsHighPrecInput_ObjectIdentity = ObjectIdentity
upsHighPrecInput = _UpsHighPrecInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3)
)
_UpsHighPrecInputLineVoltage_Type = Gauge32
_UpsHighPrecInputLineVoltage_Object = MibScalar
upsHighPrecInputLineVoltage = _UpsHighPrecInputLineVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 1),
    _UpsHighPrecInputLineVoltage_Type()
)
upsHighPrecInputLineVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecInputLineVoltage.setStatus("mandatory")
_UpsHighPrecInputMaxLineVoltage_Type = Gauge32
_UpsHighPrecInputMaxLineVoltage_Object = MibScalar
upsHighPrecInputMaxLineVoltage = _UpsHighPrecInputMaxLineVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 2),
    _UpsHighPrecInputMaxLineVoltage_Type()
)
upsHighPrecInputMaxLineVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecInputMaxLineVoltage.setStatus("mandatory")
_UpsHighPrecInputMinLineVoltage_Type = Gauge32
_UpsHighPrecInputMinLineVoltage_Object = MibScalar
upsHighPrecInputMinLineVoltage = _UpsHighPrecInputMinLineVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 3),
    _UpsHighPrecInputMinLineVoltage_Type()
)
upsHighPrecInputMinLineVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecInputMinLineVoltage.setStatus("mandatory")
_UpsHighPrecInputFrequency_Type = Gauge32
_UpsHighPrecInputFrequency_Object = MibScalar
upsHighPrecInputFrequency = _UpsHighPrecInputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 3, 3, 4),
    _UpsHighPrecInputFrequency_Type()
)
upsHighPrecInputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecInputFrequency.setStatus("mandatory")
_UpsOutput_ObjectIdentity = ObjectIdentity
upsOutput = _UpsOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4)
)
_UpsBasicOutput_ObjectIdentity = ObjectIdentity
upsBasicOutput = _UpsBasicOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1)
)


class _UpsBasicOutputStatus_Type(Integer32):
    """Custom type upsBasicOutputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("hardwareFailureBypass", 10),
          ("off", 7),
          ("onBattery", 3),
          ("onLine", 2),
          ("onSmartBoost", 4),
          ("onSmartTrim", 12),
          ("rebooting", 8),
          ("sleepingUntilPowerReturn", 11),
          ("softwareBypass", 6),
          ("switchedBypass", 9),
          ("timedSleeping", 5),
          ("unknown", 1))
    )


_UpsBasicOutputStatus_Type.__name__ = "Integer32"
_UpsBasicOutputStatus_Object = MibScalar
upsBasicOutputStatus = _UpsBasicOutputStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 1),
    _UpsBasicOutputStatus_Type()
)
upsBasicOutputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsBasicOutputStatus.setStatus("mandatory")
_UpsBasicOutputPhase_Type = Integer32
_UpsBasicOutputPhase_Object = MibScalar
upsBasicOutputPhase = _UpsBasicOutputPhase_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 2),
    _UpsBasicOutputPhase_Type()
)
upsBasicOutputPhase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsBasicOutputPhase.setStatus("mandatory")


class _UpsBasicSystemStatus_Type(Integer32):
    """Custom type upsBasicSystemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("hardwareFailureBypass", 10),
          ("off", 7),
          ("onBattery", 3),
          ("onLine", 2),
          ("onSmartBoost", 4),
          ("onSmartTrim", 12),
          ("rebooting", 8),
          ("sleepingUntilPowerReturn", 11),
          ("softwareBypass", 6),
          ("switchedBypass", 9),
          ("timedSleeping", 5),
          ("unknown", 1))
    )


_UpsBasicSystemStatus_Type.__name__ = "Integer32"
_UpsBasicSystemStatus_Object = MibScalar
upsBasicSystemStatus = _UpsBasicSystemStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 3),
    _UpsBasicSystemStatus_Type()
)
upsBasicSystemStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsBasicSystemStatus.setStatus("mandatory")
_UpsBasicSystemInternalTemperature_Type = Integer32
_UpsBasicSystemInternalTemperature_Object = MibScalar
upsBasicSystemInternalTemperature = _UpsBasicSystemInternalTemperature_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 1, 4),
    _UpsBasicSystemInternalTemperature_Type()
)
upsBasicSystemInternalTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsBasicSystemInternalTemperature.setStatus("mandatory")
_UpsAdvOutput_ObjectIdentity = ObjectIdentity
upsAdvOutput = _UpsAdvOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2)
)
_UpsAdvOutputVoltage_Type = Gauge32
_UpsAdvOutputVoltage_Object = MibScalar
upsAdvOutputVoltage = _UpsAdvOutputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 1),
    _UpsAdvOutputVoltage_Type()
)
upsAdvOutputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputVoltage.setStatus("mandatory")
_UpsAdvOutputFrequency_Type = Gauge32
_UpsAdvOutputFrequency_Object = MibScalar
upsAdvOutputFrequency = _UpsAdvOutputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 2),
    _UpsAdvOutputFrequency_Type()
)
upsAdvOutputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputFrequency.setStatus("mandatory")
_UpsAdvOutputLoad_Type = Gauge32
_UpsAdvOutputLoad_Object = MibScalar
upsAdvOutputLoad = _UpsAdvOutputLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 3),
    _UpsAdvOutputLoad_Type()
)
upsAdvOutputLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputLoad.setStatus("mandatory")
_UpsAdvOutputCurrent_Type = Gauge32
_UpsAdvOutputCurrent_Object = MibScalar
upsAdvOutputCurrent = _UpsAdvOutputCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 4),
    _UpsAdvOutputCurrent_Type()
)
upsAdvOutputCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputCurrent.setStatus("mandatory")
_UpsAdvOutputRedundancy_Type = Gauge32
_UpsAdvOutputRedundancy_Object = MibScalar
upsAdvOutputRedundancy = _UpsAdvOutputRedundancy_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 5),
    _UpsAdvOutputRedundancy_Type()
)
upsAdvOutputRedundancy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputRedundancy.setStatus("mandatory")
_UpsAdvOutputKVACapacity_Type = Integer32
_UpsAdvOutputKVACapacity_Object = MibScalar
upsAdvOutputKVACapacity = _UpsAdvOutputKVACapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 6),
    _UpsAdvOutputKVACapacity_Type()
)
upsAdvOutputKVACapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputKVACapacity.setStatus("mandatory")
_UpsAdvOutputNominalFrequency_Type = Integer32
_UpsAdvOutputNominalFrequency_Object = MibScalar
upsAdvOutputNominalFrequency = _UpsAdvOutputNominalFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 7),
    _UpsAdvOutputNominalFrequency_Type()
)
upsAdvOutputNominalFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputNominalFrequency.setStatus("mandatory")
_UpsAdvOutputActivePower_Type = Integer32
_UpsAdvOutputActivePower_Object = MibScalar
upsAdvOutputActivePower = _UpsAdvOutputActivePower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 8),
    _UpsAdvOutputActivePower_Type()
)
upsAdvOutputActivePower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputActivePower.setStatus("mandatory")
_UpsAdvOutputApparentPower_Type = Integer32
_UpsAdvOutputApparentPower_Object = MibScalar
upsAdvOutputApparentPower = _UpsAdvOutputApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 9),
    _UpsAdvOutputApparentPower_Type()
)
upsAdvOutputApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputApparentPower.setStatus("mandatory")
_UpsAdvOutputStatisticsTable_Object = MibTable
upsAdvOutputStatisticsTable = _UpsAdvOutputStatisticsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10)
)
if mibBuilder.loadTexts:
    upsAdvOutputStatisticsTable.setStatus("mandatory")
_UpsAdvOutputStatisticsEntry_Object = MibTableRow
upsAdvOutputStatisticsEntry = _UpsAdvOutputStatisticsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1)
)
upsAdvOutputStatisticsEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsAdvOutputStatisticsIndex"),
)
if mibBuilder.loadTexts:
    upsAdvOutputStatisticsEntry.setStatus("mandatory")
_UpsAdvOutputStatisticsIndex_Type = Integer32
_UpsAdvOutputStatisticsIndex_Object = MibTableColumn
upsAdvOutputStatisticsIndex = _UpsAdvOutputStatisticsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 1),
    _UpsAdvOutputStatisticsIndex_Type()
)
upsAdvOutputStatisticsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputStatisticsIndex.setStatus("mandatory")
_UpsAdvOutputPeakCurrent_Type = Integer32
_UpsAdvOutputPeakCurrent_Object = MibTableColumn
upsAdvOutputPeakCurrent = _UpsAdvOutputPeakCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 2),
    _UpsAdvOutputPeakCurrent_Type()
)
upsAdvOutputPeakCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputPeakCurrent.setStatus("mandatory")
_UpsAdvOutputCurrentTHD_Type = Integer32
_UpsAdvOutputCurrentTHD_Object = MibTableColumn
upsAdvOutputCurrentTHD = _UpsAdvOutputCurrentTHD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 3),
    _UpsAdvOutputCurrentTHD_Type()
)
upsAdvOutputCurrentTHD.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputCurrentTHD.setStatus("mandatory")
_UpsAdvOutputCrestFactor_Type = Integer32
_UpsAdvOutputCrestFactor_Object = MibTableColumn
upsAdvOutputCrestFactor = _UpsAdvOutputCrestFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 2, 10, 1, 4),
    _UpsAdvOutputCrestFactor_Type()
)
upsAdvOutputCrestFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvOutputCrestFactor.setStatus("mandatory")
_UpsHighPrecOutput_ObjectIdentity = ObjectIdentity
upsHighPrecOutput = _UpsHighPrecOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3)
)
_UpsHighPrecOutputVoltage_Type = Gauge32
_UpsHighPrecOutputVoltage_Object = MibScalar
upsHighPrecOutputVoltage = _UpsHighPrecOutputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 1),
    _UpsHighPrecOutputVoltage_Type()
)
upsHighPrecOutputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecOutputVoltage.setStatus("mandatory")
_UpsHighPrecOutputFrequency_Type = Gauge32
_UpsHighPrecOutputFrequency_Object = MibScalar
upsHighPrecOutputFrequency = _UpsHighPrecOutputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 2),
    _UpsHighPrecOutputFrequency_Type()
)
upsHighPrecOutputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecOutputFrequency.setStatus("mandatory")
_UpsHighPrecOutputLoad_Type = Gauge32
_UpsHighPrecOutputLoad_Object = MibScalar
upsHighPrecOutputLoad = _UpsHighPrecOutputLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 3),
    _UpsHighPrecOutputLoad_Type()
)
upsHighPrecOutputLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecOutputLoad.setStatus("mandatory")
_UpsHighPrecOutputCurrent_Type = Gauge32
_UpsHighPrecOutputCurrent_Object = MibScalar
upsHighPrecOutputCurrent = _UpsHighPrecOutputCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 4),
    _UpsHighPrecOutputCurrent_Type()
)
upsHighPrecOutputCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecOutputCurrent.setStatus("mandatory")
_UpsHighPrecOutputEfficiency_Type = Integer32
_UpsHighPrecOutputEfficiency_Object = MibScalar
upsHighPrecOutputEfficiency = _UpsHighPrecOutputEfficiency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 5),
    _UpsHighPrecOutputEfficiency_Type()
)
upsHighPrecOutputEfficiency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecOutputEfficiency.setStatus("mandatory")
_UpsHighPrecOutputEnergyUsage_Type = Unsigned32
_UpsHighPrecOutputEnergyUsage_Object = MibScalar
upsHighPrecOutputEnergyUsage = _UpsHighPrecOutputEnergyUsage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 4, 3, 6),
    _UpsHighPrecOutputEnergyUsage_Type()
)
upsHighPrecOutputEnergyUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsHighPrecOutputEnergyUsage.setStatus("mandatory")
_UpsConfig_ObjectIdentity = ObjectIdentity
upsConfig = _UpsConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5)
)
_UpsBasicConfig_ObjectIdentity = ObjectIdentity
upsBasicConfig = _UpsBasicConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1)
)
_UpsBasicConfigNumDevices_Type = Integer32
_UpsBasicConfigNumDevices_Object = MibScalar
upsBasicConfigNumDevices = _UpsBasicConfigNumDevices_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 1),
    _UpsBasicConfigNumDevices_Type()
)
upsBasicConfigNumDevices.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsBasicConfigNumDevices.setStatus("mandatory")
_UpsBasicConfigDeviceTable_Object = MibTable
upsBasicConfigDeviceTable = _UpsBasicConfigDeviceTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2)
)
if mibBuilder.loadTexts:
    upsBasicConfigDeviceTable.setStatus("mandatory")
_UpsBasicConfigDeviceEntry_Object = MibTableRow
upsBasicConfigDeviceEntry = _UpsBasicConfigDeviceEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1)
)
upsBasicConfigDeviceEntry.setIndexNames(
    (0, "POWERNET-MIB", "deviceIndex"),
)
if mibBuilder.loadTexts:
    upsBasicConfigDeviceEntry.setStatus("mandatory")
_DeviceIndex_Type = Integer32
_DeviceIndex_Object = MibTableColumn
deviceIndex = _DeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 1),
    _DeviceIndex_Type()
)
deviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    deviceIndex.setStatus("mandatory")
_DeviceName_Type = DisplayString
_DeviceName_Object = MibTableColumn
deviceName = _DeviceName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 2),
    _DeviceName_Type()
)
deviceName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    deviceName.setStatus("mandatory")
_VaRating_Type = Integer32
_VaRating_Object = MibTableColumn
vaRating = _VaRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 3),
    _VaRating_Type()
)
vaRating.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vaRating.setStatus("mandatory")


class _AcceptThisDevice_Type(Integer32):
    """Custom type acceptThisDevice based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_AcceptThisDevice_Type.__name__ = "Integer32"
_AcceptThisDevice_Object = MibTableColumn
acceptThisDevice = _AcceptThisDevice_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 1, 2, 1, 4),
    _AcceptThisDevice_Type()
)
acceptThisDevice.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acceptThisDevice.setStatus("mandatory")
_UpsAdvConfig_ObjectIdentity = ObjectIdentity
upsAdvConfig = _UpsAdvConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2)
)
_UpsAdvConfigRatedOutputVoltage_Type = Integer32
_UpsAdvConfigRatedOutputVoltage_Object = MibScalar
upsAdvConfigRatedOutputVoltage = _UpsAdvConfigRatedOutputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 1),
    _UpsAdvConfigRatedOutputVoltage_Type()
)
upsAdvConfigRatedOutputVoltage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigRatedOutputVoltage.setStatus("mandatory")
_UpsAdvConfigHighTransferVolt_Type = Integer32
_UpsAdvConfigHighTransferVolt_Object = MibScalar
upsAdvConfigHighTransferVolt = _UpsAdvConfigHighTransferVolt_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 2),
    _UpsAdvConfigHighTransferVolt_Type()
)
upsAdvConfigHighTransferVolt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigHighTransferVolt.setStatus("mandatory")
_UpsAdvConfigLowTransferVolt_Type = Integer32
_UpsAdvConfigLowTransferVolt_Object = MibScalar
upsAdvConfigLowTransferVolt = _UpsAdvConfigLowTransferVolt_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 3),
    _UpsAdvConfigLowTransferVolt_Type()
)
upsAdvConfigLowTransferVolt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigLowTransferVolt.setStatus("mandatory")


class _UpsAdvConfigAlarm_Type(Integer32):
    """Custom type upsAdvConfigAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("atLowBattery", 2),
          ("mute", 4),
          ("never", 3),
          ("timed", 1))
    )


_UpsAdvConfigAlarm_Type.__name__ = "Integer32"
_UpsAdvConfigAlarm_Object = MibScalar
upsAdvConfigAlarm = _UpsAdvConfigAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 4),
    _UpsAdvConfigAlarm_Type()
)
upsAdvConfigAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigAlarm.setStatus("mandatory")
_UpsAdvConfigAlarmTimer_Type = TimeTicks
_UpsAdvConfigAlarmTimer_Object = MibScalar
upsAdvConfigAlarmTimer = _UpsAdvConfigAlarmTimer_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 5),
    _UpsAdvConfigAlarmTimer_Type()
)
upsAdvConfigAlarmTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigAlarmTimer.setStatus("mandatory")
_UpsAdvConfigMinReturnCapacity_Type = Integer32
_UpsAdvConfigMinReturnCapacity_Object = MibScalar
upsAdvConfigMinReturnCapacity = _UpsAdvConfigMinReturnCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 6),
    _UpsAdvConfigMinReturnCapacity_Type()
)
upsAdvConfigMinReturnCapacity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigMinReturnCapacity.setStatus("mandatory")


class _UpsAdvConfigSensitivity_Type(Integer32):
    """Custom type upsAdvConfigSensitivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("high", 4),
          ("low", 2),
          ("medium", 3))
    )


_UpsAdvConfigSensitivity_Type.__name__ = "Integer32"
_UpsAdvConfigSensitivity_Object = MibScalar
upsAdvConfigSensitivity = _UpsAdvConfigSensitivity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 7),
    _UpsAdvConfigSensitivity_Type()
)
upsAdvConfigSensitivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigSensitivity.setStatus("mandatory")
_UpsAdvConfigLowBatteryRunTime_Type = TimeTicks
_UpsAdvConfigLowBatteryRunTime_Object = MibScalar
upsAdvConfigLowBatteryRunTime = _UpsAdvConfigLowBatteryRunTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 8),
    _UpsAdvConfigLowBatteryRunTime_Type()
)
upsAdvConfigLowBatteryRunTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigLowBatteryRunTime.setStatus("mandatory")
_UpsAdvConfigReturnDelay_Type = TimeTicks
_UpsAdvConfigReturnDelay_Object = MibScalar
upsAdvConfigReturnDelay = _UpsAdvConfigReturnDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 9),
    _UpsAdvConfigReturnDelay_Type()
)
upsAdvConfigReturnDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigReturnDelay.setStatus("mandatory")
_UpsAdvConfigShutoffDelay_Type = TimeTicks
_UpsAdvConfigShutoffDelay_Object = MibScalar
upsAdvConfigShutoffDelay = _UpsAdvConfigShutoffDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 10),
    _UpsAdvConfigShutoffDelay_Type()
)
upsAdvConfigShutoffDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigShutoffDelay.setStatus("mandatory")
_UpsAdvConfigUpsSleepTime_Type = TimeTicks
_UpsAdvConfigUpsSleepTime_Object = MibScalar
upsAdvConfigUpsSleepTime = _UpsAdvConfigUpsSleepTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 11),
    _UpsAdvConfigUpsSleepTime_Type()
)
upsAdvConfigUpsSleepTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigUpsSleepTime.setStatus("mandatory")


class _UpsAdvConfigSetEEPROMDefaults_Type(Integer32):
    """Custom type upsAdvConfigSetEEPROMDefaults based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noSetEEPROMDefaults", 1),
          ("setEEPROMDefaults", 2))
    )


_UpsAdvConfigSetEEPROMDefaults_Type.__name__ = "Integer32"
_UpsAdvConfigSetEEPROMDefaults_Object = MibScalar
upsAdvConfigSetEEPROMDefaults = _UpsAdvConfigSetEEPROMDefaults_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 12),
    _UpsAdvConfigSetEEPROMDefaults_Type()
)
upsAdvConfigSetEEPROMDefaults.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigSetEEPROMDefaults.setStatus("mandatory")
_UpsAdvConfigDipSwitchTable_Object = MibTable
upsAdvConfigDipSwitchTable = _UpsAdvConfigDipSwitchTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13)
)
if mibBuilder.loadTexts:
    upsAdvConfigDipSwitchTable.setStatus("mandatory")
_UpsAdvConfigDipSwitchEntry_Object = MibTableRow
upsAdvConfigDipSwitchEntry = _UpsAdvConfigDipSwitchEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1)
)
upsAdvConfigDipSwitchEntry.setIndexNames(
    (0, "POWERNET-MIB", "dipSwitchIndex"),
)
if mibBuilder.loadTexts:
    upsAdvConfigDipSwitchEntry.setStatus("mandatory")
_DipSwitchIndex_Type = Integer32
_DipSwitchIndex_Object = MibTableColumn
dipSwitchIndex = _DipSwitchIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1, 1),
    _DipSwitchIndex_Type()
)
dipSwitchIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dipSwitchIndex.setStatus("mandatory")


class _DipSwitchStatus_Type(Integer32):
    """Custom type dipSwitchStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_DipSwitchStatus_Type.__name__ = "Integer32"
_DipSwitchStatus_Object = MibTableColumn
dipSwitchStatus = _DipSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 13, 1, 2),
    _DipSwitchStatus_Type()
)
dipSwitchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dipSwitchStatus.setStatus("mandatory")
_UpsAdvConfigBattExhaustThresh_Type = TimeTicks
_UpsAdvConfigBattExhaustThresh_Object = MibScalar
upsAdvConfigBattExhaustThresh = _UpsAdvConfigBattExhaustThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 14),
    _UpsAdvConfigBattExhaustThresh_Type()
)
upsAdvConfigBattExhaustThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigBattExhaustThresh.setStatus("mandatory")
_UpsAdvConfigPassword_Type = DisplayString
_UpsAdvConfigPassword_Object = MibScalar
upsAdvConfigPassword = _UpsAdvConfigPassword_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 15),
    _UpsAdvConfigPassword_Type()
)
upsAdvConfigPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigPassword.setStatus("mandatory")
_UpsAdvConfigAllowedSetTable_Object = MibTable
upsAdvConfigAllowedSetTable = _UpsAdvConfigAllowedSetTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16)
)
if mibBuilder.loadTexts:
    upsAdvConfigAllowedSetTable.setStatus("mandatory")
_UpsAdvConfigAllowedSetEntry_Object = MibTableRow
upsAdvConfigAllowedSetEntry = _UpsAdvConfigAllowedSetEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1)
)
upsAdvConfigAllowedSetEntry.setIndexNames(
    (0, "POWERNET-MIB", "apcUpsConfigFieldIndex"),
)
if mibBuilder.loadTexts:
    upsAdvConfigAllowedSetEntry.setStatus("mandatory")
_ApcUpsConfigFieldIndex_Type = Integer32
_ApcUpsConfigFieldIndex_Object = MibTableColumn
apcUpsConfigFieldIndex = _ApcUpsConfigFieldIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 1),
    _ApcUpsConfigFieldIndex_Type()
)
apcUpsConfigFieldIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apcUpsConfigFieldIndex.setStatus("mandatory")
_ApcUpsConfigFieldOID_Type = ObjectIdentifier
_ApcUpsConfigFieldOID_Object = MibTableColumn
apcUpsConfigFieldOID = _ApcUpsConfigFieldOID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 2),
    _ApcUpsConfigFieldOID_Type()
)
apcUpsConfigFieldOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apcUpsConfigFieldOID.setStatus("mandatory")
_ApcUpsConfigFieldValueRange_Type = DisplayString
_ApcUpsConfigFieldValueRange_Object = MibTableColumn
apcUpsConfigFieldValueRange = _ApcUpsConfigFieldValueRange_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 16, 1, 3),
    _ApcUpsConfigFieldValueRange_Type()
)
apcUpsConfigFieldValueRange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apcUpsConfigFieldValueRange.setStatus("mandatory")
_UpsAdvConfigBattCabAmpHour_Type = Integer32
_UpsAdvConfigBattCabAmpHour_Object = MibScalar
upsAdvConfigBattCabAmpHour = _UpsAdvConfigBattCabAmpHour_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 17),
    _UpsAdvConfigBattCabAmpHour_Type()
)
upsAdvConfigBattCabAmpHour.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigBattCabAmpHour.setStatus("mandatory")


class _UpsAdvConfigPositionSelector_Type(Integer32):
    """Custom type upsAdvConfigPositionSelector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("rack", 2),
          ("tower", 3),
          ("unknown", 1))
    )


_UpsAdvConfigPositionSelector_Type.__name__ = "Integer32"
_UpsAdvConfigPositionSelector_Object = MibScalar
upsAdvConfigPositionSelector = _UpsAdvConfigPositionSelector_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 18),
    _UpsAdvConfigPositionSelector_Type()
)
upsAdvConfigPositionSelector.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigPositionSelector.setStatus("mandatory")


class _UpsAdvConfigOutputFreqRange_Type(Integer32):
    """Custom type upsAdvConfigOutputFreqRange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22)
        )
    )
    namedValues = NamedValues(
        *(("freqRange50Pct0dot5", 11),
          ("freqRange50Pct1", 12),
          ("freqRange50Pct2", 13),
          ("freqRange50Pct4", 14),
          ("freqRange50Pct6", 15),
          ("freqRange50Pct8", 16),
          ("freqRange50Var1", 5),
          ("freqRange50Var10", 8),
          ("freqRange50Var1dot0", 10),
          ("freqRange50Var3", 6),
          ("freqRange60Pct0dot5", 17),
          ("freqRange60Pct1", 18),
          ("freqRange60Pct2", 19),
          ("freqRange60Pct4", 20),
          ("freqRange60Pct6", 21),
          ("freqRange60Pct8", 22),
          ("freqRange60Var1", 3),
          ("freqRange60Var10", 7),
          ("freqRange60Var1dot0", 9),
          ("freqRange60Var3", 4),
          ("freqRangeAUTO", 2),
          ("unknown", 1))
    )


_UpsAdvConfigOutputFreqRange_Type.__name__ = "Integer32"
_UpsAdvConfigOutputFreqRange_Object = MibScalar
upsAdvConfigOutputFreqRange = _UpsAdvConfigOutputFreqRange_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 19),
    _UpsAdvConfigOutputFreqRange_Type()
)
upsAdvConfigOutputFreqRange.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigOutputFreqRange.setStatus("mandatory")


class _UpsAdvConfigUPSFail_Type(Integer32):
    """Custom type upsAdvConfigUPSFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dropLoad", 3),
          ("gotoBypass", 2),
          ("unknown", 1))
    )


_UpsAdvConfigUPSFail_Type.__name__ = "Integer32"
_UpsAdvConfigUPSFail_Object = MibScalar
upsAdvConfigUPSFail = _UpsAdvConfigUPSFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 20),
    _UpsAdvConfigUPSFail_Type()
)
upsAdvConfigUPSFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigUPSFail.setStatus("mandatory")
_UpsAdvConfigAlarmRedundancy_Type = Integer32
_UpsAdvConfigAlarmRedundancy_Object = MibScalar
upsAdvConfigAlarmRedundancy = _UpsAdvConfigAlarmRedundancy_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 21),
    _UpsAdvConfigAlarmRedundancy_Type()
)
upsAdvConfigAlarmRedundancy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigAlarmRedundancy.setStatus("mandatory")
_UpsAdvConfigAlarmLoadOver_Type = Integer32
_UpsAdvConfigAlarmLoadOver_Object = MibScalar
upsAdvConfigAlarmLoadOver = _UpsAdvConfigAlarmLoadOver_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 22),
    _UpsAdvConfigAlarmLoadOver_Type()
)
upsAdvConfigAlarmLoadOver.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigAlarmLoadOver.setStatus("mandatory")
_UpsAdvConfigAlarmRuntimeUnder_Type = Integer32
_UpsAdvConfigAlarmRuntimeUnder_Object = MibScalar
upsAdvConfigAlarmRuntimeUnder = _UpsAdvConfigAlarmRuntimeUnder_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 23),
    _UpsAdvConfigAlarmRuntimeUnder_Type()
)
upsAdvConfigAlarmRuntimeUnder.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigAlarmRuntimeUnder.setStatus("mandatory")


class _UpsAdvConfigVoutReporting_Type(Integer32):
    """Custom type upsAdvConfigVoutReporting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("unknown", 1),
          ("vout208", 3),
          ("vout240", 4),
          ("voutAUTO", 2))
    )


_UpsAdvConfigVoutReporting_Type.__name__ = "Integer32"
_UpsAdvConfigVoutReporting_Object = MibScalar
upsAdvConfigVoutReporting = _UpsAdvConfigVoutReporting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 24),
    _UpsAdvConfigVoutReporting_Type()
)
upsAdvConfigVoutReporting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigVoutReporting.setStatus("mandatory")
_UpsAdvConfigNumExternalBatteries_Type = Integer32
_UpsAdvConfigNumExternalBatteries_Object = MibScalar
upsAdvConfigNumExternalBatteries = _UpsAdvConfigNumExternalBatteries_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 25),
    _UpsAdvConfigNumExternalBatteries_Type()
)
upsAdvConfigNumExternalBatteries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigNumExternalBatteries.setStatus("mandatory")


class _UpsAdvConfigSimpleSignalShutdowns_Type(Integer32):
    """Custom type upsAdvConfigSimpleSignalShutdowns based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("unknown", 1))
    )


_UpsAdvConfigSimpleSignalShutdowns_Type.__name__ = "Integer32"
_UpsAdvConfigSimpleSignalShutdowns_Object = MibScalar
upsAdvConfigSimpleSignalShutdowns = _UpsAdvConfigSimpleSignalShutdowns_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 26),
    _UpsAdvConfigSimpleSignalShutdowns_Type()
)
upsAdvConfigSimpleSignalShutdowns.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigSimpleSignalShutdowns.setStatus("mandatory")
_UpsAdvConfigMaxShutdownTime_Type = Integer32
_UpsAdvConfigMaxShutdownTime_Object = MibScalar
upsAdvConfigMaxShutdownTime = _UpsAdvConfigMaxShutdownTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 27),
    _UpsAdvConfigMaxShutdownTime_Type()
)
upsAdvConfigMaxShutdownTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigMaxShutdownTime.setStatus("mandatory")


class _UpsAsiUpsControlServerRequestShutdown_Type(Integer32):
    """Custom type upsAsiUpsControlServerRequestShutdown based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("serverShutdownOff", 1),
          ("serverShutdownReboot", 2))
    )


_UpsAsiUpsControlServerRequestShutdown_Type.__name__ = "Integer32"
_UpsAsiUpsControlServerRequestShutdown_Object = MibScalar
upsAsiUpsControlServerRequestShutdown = _UpsAsiUpsControlServerRequestShutdown_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 28),
    _UpsAsiUpsControlServerRequestShutdown_Type()
)
upsAsiUpsControlServerRequestShutdown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAsiUpsControlServerRequestShutdown.setStatus("mandatory")
_UpsAdvConfigMinReturnRuntime_Type = TimeTicks
_UpsAdvConfigMinReturnRuntime_Object = MibScalar
upsAdvConfigMinReturnRuntime = _UpsAdvConfigMinReturnRuntime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 29),
    _UpsAdvConfigMinReturnRuntime_Type()
)
upsAdvConfigMinReturnRuntime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigMinReturnRuntime.setStatus("mandatory")
_UpsAdvConfigBasicSignalLowBatteryDuration_Type = TimeTicks
_UpsAdvConfigBasicSignalLowBatteryDuration_Object = MibScalar
upsAdvConfigBasicSignalLowBatteryDuration = _UpsAdvConfigBasicSignalLowBatteryDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 30),
    _UpsAdvConfigBasicSignalLowBatteryDuration_Type()
)
upsAdvConfigBasicSignalLowBatteryDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigBasicSignalLowBatteryDuration.setStatus("mandatory")


class _UpsAdvConfigBypassPhaseLockRequired_Type(Integer32):
    """Custom type upsAdvConfigBypassPhaseLockRequired based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("unknown", 1))
    )


_UpsAdvConfigBypassPhaseLockRequired_Type.__name__ = "Integer32"
_UpsAdvConfigBypassPhaseLockRequired_Object = MibScalar
upsAdvConfigBypassPhaseLockRequired = _UpsAdvConfigBypassPhaseLockRequired_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 31),
    _UpsAdvConfigBypassPhaseLockRequired_Type()
)
upsAdvConfigBypassPhaseLockRequired.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigBypassPhaseLockRequired.setStatus("mandatory")


class _UpsAdvConfigOutputFreqSlewRate_Type(Integer32):
    """Custom type upsAdvConfigOutputFreqSlewRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("slewRate1HzPerSec", 4),
          ("slewRate2HzPerSec", 5),
          ("slewRate4HzPerSec", 6),
          ("slewRate6HzPerSec", 7),
          ("slewRateHalfHzPerSec", 3),
          ("slewRateQuarterHzPerSec", 2),
          ("unknown", 1))
    )


_UpsAdvConfigOutputFreqSlewRate_Type.__name__ = "Integer32"
_UpsAdvConfigOutputFreqSlewRate_Object = MibScalar
upsAdvConfigOutputFreqSlewRate = _UpsAdvConfigOutputFreqSlewRate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 32),
    _UpsAdvConfigOutputFreqSlewRate_Type()
)
upsAdvConfigOutputFreqSlewRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigOutputFreqSlewRate.setStatus("mandatory")


class _UpsAdvConfigChargerLevel_Type(Integer32):
    """Custom type upsAdvConfigChargerLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 2),
          ("unknown", 1))
    )


_UpsAdvConfigChargerLevel_Type.__name__ = "Integer32"
_UpsAdvConfigChargerLevel_Object = MibScalar
upsAdvConfigChargerLevel = _UpsAdvConfigChargerLevel_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 33),
    _UpsAdvConfigChargerLevel_Type()
)
upsAdvConfigChargerLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigChargerLevel.setStatus("mandatory")


class _UpsAdvConfigBypassToleranceSetting_Type(Integer32):
    """Custom type upsAdvConfigBypassToleranceSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("custom", 5),
          ("medium", 3),
          ("narrow", 4),
          ("unknown", 1),
          ("wide", 2))
    )


_UpsAdvConfigBypassToleranceSetting_Type.__name__ = "Integer32"
_UpsAdvConfigBypassToleranceSetting_Object = MibScalar
upsAdvConfigBypassToleranceSetting = _UpsAdvConfigBypassToleranceSetting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 34),
    _UpsAdvConfigBypassToleranceSetting_Type()
)
upsAdvConfigBypassToleranceSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigBypassToleranceSetting.setStatus("mandatory")


class _UpsAdvConfigMainsSetting_Type(Integer32):
    """Custom type upsAdvConfigMainsSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dualInput", 2),
          ("singleInput", 1))
    )


_UpsAdvConfigMainsSetting_Type.__name__ = "Integer32"
_UpsAdvConfigMainsSetting_Object = MibScalar
upsAdvConfigMainsSetting = _UpsAdvConfigMainsSetting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 35),
    _UpsAdvConfigMainsSetting_Type()
)
upsAdvConfigMainsSetting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvConfigMainsSetting.setStatus("mandatory")


class _UpsAdvConfigACWiringSetting_Type(Integer32):
    """Custom type upsAdvConfigACWiringSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fourWire", 2),
          ("threeWire", 1))
    )


_UpsAdvConfigACWiringSetting_Type.__name__ = "Integer32"
_UpsAdvConfigACWiringSetting_Object = MibScalar
upsAdvConfigACWiringSetting = _UpsAdvConfigACWiringSetting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 36),
    _UpsAdvConfigACWiringSetting_Type()
)
upsAdvConfigACWiringSetting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvConfigACWiringSetting.setStatus("mandatory")


class _UpsAdvConfigUpperOutputVoltTolerance_Type(Integer32):
    """Custom type upsAdvConfigUpperOutputVoltTolerance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_UpsAdvConfigUpperOutputVoltTolerance_Type.__name__ = "Integer32"
_UpsAdvConfigUpperOutputVoltTolerance_Object = MibScalar
upsAdvConfigUpperOutputVoltTolerance = _UpsAdvConfigUpperOutputVoltTolerance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 37),
    _UpsAdvConfigUpperOutputVoltTolerance_Type()
)
upsAdvConfigUpperOutputVoltTolerance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigUpperOutputVoltTolerance.setStatus("mandatory")


class _UpsAdvConfigLowerOutputVoltTolerance_Type(Integer32):
    """Custom type upsAdvConfigLowerOutputVoltTolerance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_UpsAdvConfigLowerOutputVoltTolerance_Type.__name__ = "Integer32"
_UpsAdvConfigLowerOutputVoltTolerance_Object = MibScalar
upsAdvConfigLowerOutputVoltTolerance = _UpsAdvConfigLowerOutputVoltTolerance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 38),
    _UpsAdvConfigLowerOutputVoltTolerance_Type()
)
upsAdvConfigLowerOutputVoltTolerance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigLowerOutputVoltTolerance.setStatus("mandatory")


class _UpsAdvConfigUpperBypassVoltTolerance_Type(Integer32):
    """Custom type upsAdvConfigUpperBypassVoltTolerance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_UpsAdvConfigUpperBypassVoltTolerance_Type.__name__ = "Integer32"
_UpsAdvConfigUpperBypassVoltTolerance_Object = MibScalar
upsAdvConfigUpperBypassVoltTolerance = _UpsAdvConfigUpperBypassVoltTolerance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 39),
    _UpsAdvConfigUpperBypassVoltTolerance_Type()
)
upsAdvConfigUpperBypassVoltTolerance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigUpperBypassVoltTolerance.setStatus("mandatory")


class _UpsAdvConfigLowerBypassVoltTolerance_Type(Integer32):
    """Custom type upsAdvConfigLowerBypassVoltTolerance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_UpsAdvConfigLowerBypassVoltTolerance_Type.__name__ = "Integer32"
_UpsAdvConfigLowerBypassVoltTolerance_Object = MibScalar
upsAdvConfigLowerBypassVoltTolerance = _UpsAdvConfigLowerBypassVoltTolerance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 40),
    _UpsAdvConfigLowerBypassVoltTolerance_Type()
)
upsAdvConfigLowerBypassVoltTolerance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigLowerBypassVoltTolerance.setStatus("mandatory")
_UpsAdvConfigOutofSyncBypassTransferDelay_Type = Integer32
_UpsAdvConfigOutofSyncBypassTransferDelay_Object = MibScalar
upsAdvConfigOutofSyncBypassTransferDelay = _UpsAdvConfigOutofSyncBypassTransferDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 5, 2, 41),
    _UpsAdvConfigOutofSyncBypassTransferDelay_Type()
)
upsAdvConfigOutofSyncBypassTransferDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvConfigOutofSyncBypassTransferDelay.setStatus("mandatory")
_UpsControl_ObjectIdentity = ObjectIdentity
upsControl = _UpsControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6)
)
_UpsBasicControl_ObjectIdentity = ObjectIdentity
upsBasicControl = _UpsBasicControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 1)
)


class _UpsBasicControlConserveBattery_Type(Integer32):
    """Custom type upsBasicControlConserveBattery based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noTurnOffUps", 1),
          ("turnOffUpsToConserveBattery", 2))
    )


_UpsBasicControlConserveBattery_Type.__name__ = "Integer32"
_UpsBasicControlConserveBattery_Object = MibScalar
upsBasicControlConserveBattery = _UpsBasicControlConserveBattery_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 1, 1),
    _UpsBasicControlConserveBattery_Type()
)
upsBasicControlConserveBattery.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsBasicControlConserveBattery.setStatus("mandatory")
_UpsAdvControl_ObjectIdentity = ObjectIdentity
upsAdvControl = _UpsAdvControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2)
)


class _UpsAdvControlUpsOff_Type(Integer32):
    """Custom type upsAdvControlUpsOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("noTurnUpsOff", 1),
          ("turnUpsOff", 2),
          ("turnUpsOffGracefully", 3),
          ("turnUpsSyncGroupOff", 4),
          ("turnUpsSyncGroupOffAfterDelay", 5),
          ("turnUpsSyncGroupOffGracefully", 6))
    )


_UpsAdvControlUpsOff_Type.__name__ = "Integer32"
_UpsAdvControlUpsOff_Object = MibScalar
upsAdvControlUpsOff = _UpsAdvControlUpsOff_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 1),
    _UpsAdvControlUpsOff_Type()
)
upsAdvControlUpsOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvControlUpsOff.setStatus("mandatory")


class _UpsAdvControlRebootShutdownUps_Type(Integer32):
    """Custom type upsAdvControlRebootShutdownUps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("noRebootShutdownUps", 1),
          ("rebootShutdownSyncGroupUps", 4),
          ("rebootShutdownSyncGroupUpsGracefully", 5),
          ("rebootShutdownUps", 2),
          ("rebootShutdownUpsGracefully", 3))
    )


_UpsAdvControlRebootShutdownUps_Type.__name__ = "Integer32"
_UpsAdvControlRebootShutdownUps_Object = MibScalar
upsAdvControlRebootShutdownUps = _UpsAdvControlRebootShutdownUps_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 2),
    _UpsAdvControlRebootShutdownUps_Type()
)
upsAdvControlRebootShutdownUps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvControlRebootShutdownUps.setStatus("mandatory")


class _UpsAdvControlUpsSleep_Type(Integer32):
    """Custom type upsAdvControlUpsSleep based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("noPutUpsToSleep", 1),
          ("putUpsSyncGroupToSleep", 4),
          ("putUpsSyncGroupToSleepGracefully", 5),
          ("putUpsToSleep", 2),
          ("putUpsToSleepGracefully", 3))
    )


_UpsAdvControlUpsSleep_Type.__name__ = "Integer32"
_UpsAdvControlUpsSleep_Object = MibScalar
upsAdvControlUpsSleep = _UpsAdvControlUpsSleep_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 3),
    _UpsAdvControlUpsSleep_Type()
)
upsAdvControlUpsSleep.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvControlUpsSleep.setStatus("mandatory")


class _UpsAdvControlSimulatePowerFail_Type(Integer32):
    """Custom type upsAdvControlSimulatePowerFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noSimulatePowerFailure", 1),
          ("simulatePowerFailure", 2))
    )


_UpsAdvControlSimulatePowerFail_Type.__name__ = "Integer32"
_UpsAdvControlSimulatePowerFail_Object = MibScalar
upsAdvControlSimulatePowerFail = _UpsAdvControlSimulatePowerFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 4),
    _UpsAdvControlSimulatePowerFail_Type()
)
upsAdvControlSimulatePowerFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvControlSimulatePowerFail.setStatus("mandatory")


class _UpsAdvControlFlashAndBeep_Type(Integer32):
    """Custom type upsAdvControlFlashAndBeep based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("flashAndBeep", 2),
          ("flashAndBeepCancel", 5),
          ("flashAndBeepCont", 4),
          ("flashAndBeepSyncGroup", 3),
          ("noFlashAndBeep", 1))
    )


_UpsAdvControlFlashAndBeep_Type.__name__ = "Integer32"
_UpsAdvControlFlashAndBeep_Object = MibScalar
upsAdvControlFlashAndBeep = _UpsAdvControlFlashAndBeep_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 5),
    _UpsAdvControlFlashAndBeep_Type()
)
upsAdvControlFlashAndBeep.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvControlFlashAndBeep.setStatus("mandatory")


class _UpsAdvControlTurnOnUPS_Type(Integer32):
    """Custom type upsAdvControlTurnOnUPS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noTurnOnUPS", 1),
          ("turnOnUPS", 2),
          ("turnOnUPSSyncGroup", 3))
    )


_UpsAdvControlTurnOnUPS_Type.__name__ = "Integer32"
_UpsAdvControlTurnOnUPS_Object = MibScalar
upsAdvControlTurnOnUPS = _UpsAdvControlTurnOnUPS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 6),
    _UpsAdvControlTurnOnUPS_Type()
)
upsAdvControlTurnOnUPS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvControlTurnOnUPS.setStatus("mandatory")


class _UpsAdvControlBypassSwitch_Type(Integer32):
    """Custom type upsAdvControlBypassSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noBypassSwitch", 1),
          ("switchOutOfBypass", 3),
          ("switchToBypass", 2))
    )


_UpsAdvControlBypassSwitch_Type.__name__ = "Integer32"
_UpsAdvControlBypassSwitch_Object = MibScalar
upsAdvControlBypassSwitch = _UpsAdvControlBypassSwitch_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 7),
    _UpsAdvControlBypassSwitch_Type()
)
upsAdvControlBypassSwitch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvControlBypassSwitch.setStatus("mandatory")


class _UpsAdvControlRebootUpsWithOrWithoutAC_Type(Integer32):
    """Custom type upsAdvControlRebootUpsWithOrWithoutAC based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noRebootUpsWithOrWithoutAC", 1),
          ("rebootUpsDelayedWithOrWithoutAC", 3),
          ("rebootUpsImmediatelyWithOrWithoutAC", 2))
    )


_UpsAdvControlRebootUpsWithOrWithoutAC_Type.__name__ = "Integer32"
_UpsAdvControlRebootUpsWithOrWithoutAC_Object = MibScalar
upsAdvControlRebootUpsWithOrWithoutAC = _UpsAdvControlRebootUpsWithOrWithoutAC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 8),
    _UpsAdvControlRebootUpsWithOrWithoutAC_Type()
)
upsAdvControlRebootUpsWithOrWithoutAC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvControlRebootUpsWithOrWithoutAC.setStatus("mandatory")


class _UpsAdvControlFirmwareUpdate_Type(Integer32):
    """Custom type upsAdvControlFirmwareUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("firmwareUpdate", 2),
          ("noFirmwareUpdate", 1),
          ("updateFailed", 5),
          ("updateInProcess", 3),
          ("updateSuccessful", 4))
    )


_UpsAdvControlFirmwareUpdate_Type.__name__ = "Integer32"
_UpsAdvControlFirmwareUpdate_Object = MibScalar
upsAdvControlFirmwareUpdate = _UpsAdvControlFirmwareUpdate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 6, 2, 9),
    _UpsAdvControlFirmwareUpdate_Type()
)
upsAdvControlFirmwareUpdate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvControlFirmwareUpdate.setStatus("mandatory")
_UpsTest_ObjectIdentity = ObjectIdentity
upsTest = _UpsTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7)
)
_UpsBasicTest_ObjectIdentity = ObjectIdentity
upsBasicTest = _UpsBasicTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 1)
)
_UpsAdvTest_ObjectIdentity = ObjectIdentity
upsAdvTest = _UpsAdvTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2)
)


class _UpsAdvTestDiagnosticSchedule_Type(Integer32):
    """Custom type upsAdvTestDiagnosticSchedule based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("atTurnOn", 4),
          ("biweekly", 2),
          ("biweeklySinceLastTest", 8),
          ("fourWeeks", 6),
          ("never", 5),
          ("twelveWeeks", 7),
          ("unknown", 1),
          ("weekly", 3),
          ("weeklySinceLastTest", 9))
    )


_UpsAdvTestDiagnosticSchedule_Type.__name__ = "Integer32"
_UpsAdvTestDiagnosticSchedule_Object = MibScalar
upsAdvTestDiagnosticSchedule = _UpsAdvTestDiagnosticSchedule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 1),
    _UpsAdvTestDiagnosticSchedule_Type()
)
upsAdvTestDiagnosticSchedule.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvTestDiagnosticSchedule.setStatus("mandatory")


class _UpsAdvTestDiagnostics_Type(Integer32):
    """Custom type upsAdvTestDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noTestDiagnostics", 1),
          ("testDiagnostics", 2))
    )


_UpsAdvTestDiagnostics_Type.__name__ = "Integer32"
_UpsAdvTestDiagnostics_Object = MibScalar
upsAdvTestDiagnostics = _UpsAdvTestDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 2),
    _UpsAdvTestDiagnostics_Type()
)
upsAdvTestDiagnostics.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvTestDiagnostics.setStatus("mandatory")


class _UpsAdvTestDiagnosticsResults_Type(Integer32):
    """Custom type upsAdvTestDiagnosticsResults based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("invalidTest", 3),
          ("ok", 1),
          ("testInProgress", 4))
    )


_UpsAdvTestDiagnosticsResults_Type.__name__ = "Integer32"
_UpsAdvTestDiagnosticsResults_Object = MibScalar
upsAdvTestDiagnosticsResults = _UpsAdvTestDiagnosticsResults_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 3),
    _UpsAdvTestDiagnosticsResults_Type()
)
upsAdvTestDiagnosticsResults.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvTestDiagnosticsResults.setStatus("mandatory")
_UpsAdvTestLastDiagnosticsDate_Type = DisplayString
_UpsAdvTestLastDiagnosticsDate_Object = MibScalar
upsAdvTestLastDiagnosticsDate = _UpsAdvTestLastDiagnosticsDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 4),
    _UpsAdvTestLastDiagnosticsDate_Type()
)
upsAdvTestLastDiagnosticsDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvTestLastDiagnosticsDate.setStatus("mandatory")


class _UpsAdvTestRuntimeCalibration_Type(Integer32):
    """Custom type upsAdvTestRuntimeCalibration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("cancelCurrentCalibration", 3),
          ("noPerformCalibration", 1),
          ("performCalibration", 2))
    )


_UpsAdvTestRuntimeCalibration_Type.__name__ = "Integer32"
_UpsAdvTestRuntimeCalibration_Object = MibScalar
upsAdvTestRuntimeCalibration = _UpsAdvTestRuntimeCalibration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 5),
    _UpsAdvTestRuntimeCalibration_Type()
)
upsAdvTestRuntimeCalibration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvTestRuntimeCalibration.setStatus("mandatory")


class _UpsAdvTestCalibrationResults_Type(Integer32):
    """Custom type upsAdvTestCalibrationResults based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("calibrationInProgress", 3),
          ("invalidCalibration", 2),
          ("ok", 1))
    )


_UpsAdvTestCalibrationResults_Type.__name__ = "Integer32"
_UpsAdvTestCalibrationResults_Object = MibScalar
upsAdvTestCalibrationResults = _UpsAdvTestCalibrationResults_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 6),
    _UpsAdvTestCalibrationResults_Type()
)
upsAdvTestCalibrationResults.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvTestCalibrationResults.setStatus("mandatory")
_UpsAdvTestCalibrationDate_Type = DisplayString
_UpsAdvTestCalibrationDate_Object = MibScalar
upsAdvTestCalibrationDate = _UpsAdvTestCalibrationDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 7),
    _UpsAdvTestCalibrationDate_Type()
)
upsAdvTestCalibrationDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvTestCalibrationDate.setStatus("mandatory")
_UpsAdvTestDiagnosticTime_Type = DisplayString
_UpsAdvTestDiagnosticTime_Object = MibScalar
upsAdvTestDiagnosticTime = _UpsAdvTestDiagnosticTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 8),
    _UpsAdvTestDiagnosticTime_Type()
)
upsAdvTestDiagnosticTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvTestDiagnosticTime.setStatus("mandatory")


class _UpsAdvTestDiagnosticDay_Type(Integer32):
    """Custom type upsAdvTestDiagnosticDay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("friday", 5),
          ("monday", 1),
          ("saturday", 6),
          ("sunday", 7),
          ("thursday", 4),
          ("tuesday", 2),
          ("wednesday", 3))
    )


_UpsAdvTestDiagnosticDay_Type.__name__ = "Integer32"
_UpsAdvTestDiagnosticDay_Object = MibScalar
upsAdvTestDiagnosticDay = _UpsAdvTestDiagnosticDay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 7, 2, 9),
    _UpsAdvTestDiagnosticDay_Type()
)
upsAdvTestDiagnosticDay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsAdvTestDiagnosticDay.setStatus("mandatory")
_UpsComm_ObjectIdentity = ObjectIdentity
upsComm = _UpsComm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 8)
)


class _UpsCommStatus_Type(Integer32):
    """Custom type upsCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noComm", 2),
          ("ok", 1))
    )


_UpsCommStatus_Type.__name__ = "Integer32"
_UpsCommStatus_Object = MibScalar
upsCommStatus = _UpsCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 8, 1),
    _UpsCommStatus_Type()
)
upsCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsCommStatus.setStatus("mandatory")
_UpsPhase_ObjectIdentity = ObjectIdentity
upsPhase = _UpsPhase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9)
)
_UpsPhaseResetValues_ObjectIdentity = ObjectIdentity
upsPhaseResetValues = _UpsPhaseResetValues_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 1)
)


class _UpsPhaseResetMaxMinValues_Type(Integer32):
    """Custom type upsPhaseResetMaxMinValues based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("reset", 2))
    )


_UpsPhaseResetMaxMinValues_Type.__name__ = "Integer32"
_UpsPhaseResetMaxMinValues_Object = MibScalar
upsPhaseResetMaxMinValues = _UpsPhaseResetMaxMinValues_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 1, 1),
    _UpsPhaseResetMaxMinValues_Type()
)
upsPhaseResetMaxMinValues.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsPhaseResetMaxMinValues.setStatus("mandatory")
_UpsPhaseInput_ObjectIdentity = ObjectIdentity
upsPhaseInput = _UpsPhaseInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2)
)
_UpsPhaseNumInputs_Type = Integer32
_UpsPhaseNumInputs_Object = MibScalar
upsPhaseNumInputs = _UpsPhaseNumInputs_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 1),
    _UpsPhaseNumInputs_Type()
)
upsPhaseNumInputs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseNumInputs.setStatus("mandatory")
_UpsPhaseInputTable_Object = MibTable
upsPhaseInputTable = _UpsPhaseInputTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2)
)
if mibBuilder.loadTexts:
    upsPhaseInputTable.setStatus("mandatory")
_UpsPhaseInputEntry_Object = MibTableRow
upsPhaseInputEntry = _UpsPhaseInputEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1)
)
upsPhaseInputEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsPhaseInputTableIndex"),
)
if mibBuilder.loadTexts:
    upsPhaseInputEntry.setStatus("mandatory")
_UpsPhaseInputTableIndex_Type = Integer32
_UpsPhaseInputTableIndex_Object = MibTableColumn
upsPhaseInputTableIndex = _UpsPhaseInputTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 1),
    _UpsPhaseInputTableIndex_Type()
)
upsPhaseInputTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputTableIndex.setStatus("mandatory")
_UpsPhaseNumInputPhases_Type = Integer32
_UpsPhaseNumInputPhases_Object = MibTableColumn
upsPhaseNumInputPhases = _UpsPhaseNumInputPhases_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 2),
    _UpsPhaseNumInputPhases_Type()
)
upsPhaseNumInputPhases.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseNumInputPhases.setStatus("mandatory")


class _UpsPhaseInputVoltageOrientation_Type(Integer32):
    """Custom type upsPhaseInputVoltageOrientation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("singlePhase", 2),
          ("splitPhase", 3),
          ("threePhasePhaseToNeutral", 4),
          ("threePhasePhaseToPhase", 5),
          ("unknown", 1))
    )


_UpsPhaseInputVoltageOrientation_Type.__name__ = "Integer32"
_UpsPhaseInputVoltageOrientation_Object = MibTableColumn
upsPhaseInputVoltageOrientation = _UpsPhaseInputVoltageOrientation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 3),
    _UpsPhaseInputVoltageOrientation_Type()
)
upsPhaseInputVoltageOrientation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputVoltageOrientation.setStatus("mandatory")
_UpsPhaseInputFrequency_Type = Integer32
_UpsPhaseInputFrequency_Object = MibTableColumn
upsPhaseInputFrequency = _UpsPhaseInputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 4),
    _UpsPhaseInputFrequency_Type()
)
upsPhaseInputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputFrequency.setStatus("mandatory")


class _UpsPhaseInputType_Type(Integer32):
    """Custom type upsPhaseInputType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bypass", 3),
          ("main", 2),
          ("unknown", 1))
    )


_UpsPhaseInputType_Type.__name__ = "Integer32"
_UpsPhaseInputType_Object = MibTableColumn
upsPhaseInputType = _UpsPhaseInputType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 5),
    _UpsPhaseInputType_Type()
)
upsPhaseInputType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputType.setStatus("mandatory")
_UpsPhaseInputName_Type = DisplayString
_UpsPhaseInputName_Object = MibTableColumn
upsPhaseInputName = _UpsPhaseInputName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 2, 1, 6),
    _UpsPhaseInputName_Type()
)
upsPhaseInputName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsPhaseInputName.setStatus("mandatory")
_UpsPhaseInputPhaseTable_Object = MibTable
upsPhaseInputPhaseTable = _UpsPhaseInputPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3)
)
if mibBuilder.loadTexts:
    upsPhaseInputPhaseTable.setStatus("mandatory")
_UpsPhaseInputPhaseEntry_Object = MibTableRow
upsPhaseInputPhaseEntry = _UpsPhaseInputPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1)
)
upsPhaseInputPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsPhaseInputPhaseTableIndex"),
    (0, "POWERNET-MIB", "upsPhaseInputPhaseIndex"),
)
if mibBuilder.loadTexts:
    upsPhaseInputPhaseEntry.setStatus("mandatory")
_UpsPhaseInputPhaseTableIndex_Type = Integer32
_UpsPhaseInputPhaseTableIndex_Object = MibTableColumn
upsPhaseInputPhaseTableIndex = _UpsPhaseInputPhaseTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 1),
    _UpsPhaseInputPhaseTableIndex_Type()
)
upsPhaseInputPhaseTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputPhaseTableIndex.setStatus("mandatory")
_UpsPhaseInputPhaseIndex_Type = Integer32
_UpsPhaseInputPhaseIndex_Object = MibTableColumn
upsPhaseInputPhaseIndex = _UpsPhaseInputPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 2),
    _UpsPhaseInputPhaseIndex_Type()
)
upsPhaseInputPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputPhaseIndex.setStatus("mandatory")
_UpsPhaseInputVoltage_Type = Integer32
_UpsPhaseInputVoltage_Object = MibTableColumn
upsPhaseInputVoltage = _UpsPhaseInputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 3),
    _UpsPhaseInputVoltage_Type()
)
upsPhaseInputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputVoltage.setStatus("mandatory")
_UpsPhaseInputMaxVoltage_Type = Integer32
_UpsPhaseInputMaxVoltage_Object = MibTableColumn
upsPhaseInputMaxVoltage = _UpsPhaseInputMaxVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 4),
    _UpsPhaseInputMaxVoltage_Type()
)
upsPhaseInputMaxVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputMaxVoltage.setStatus("mandatory")
_UpsPhaseInputMinVoltage_Type = Integer32
_UpsPhaseInputMinVoltage_Object = MibTableColumn
upsPhaseInputMinVoltage = _UpsPhaseInputMinVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 5),
    _UpsPhaseInputMinVoltage_Type()
)
upsPhaseInputMinVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputMinVoltage.setStatus("mandatory")
_UpsPhaseInputCurrent_Type = Integer32
_UpsPhaseInputCurrent_Object = MibTableColumn
upsPhaseInputCurrent = _UpsPhaseInputCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 6),
    _UpsPhaseInputCurrent_Type()
)
upsPhaseInputCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputCurrent.setStatus("mandatory")
_UpsPhaseInputMaxCurrent_Type = Integer32
_UpsPhaseInputMaxCurrent_Object = MibTableColumn
upsPhaseInputMaxCurrent = _UpsPhaseInputMaxCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 7),
    _UpsPhaseInputMaxCurrent_Type()
)
upsPhaseInputMaxCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputMaxCurrent.setStatus("mandatory")
_UpsPhaseInputMinCurrent_Type = Integer32
_UpsPhaseInputMinCurrent_Object = MibTableColumn
upsPhaseInputMinCurrent = _UpsPhaseInputMinCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 8),
    _UpsPhaseInputMinCurrent_Type()
)
upsPhaseInputMinCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputMinCurrent.setStatus("mandatory")
_UpsPhaseInputPower_Type = Integer32
_UpsPhaseInputPower_Object = MibTableColumn
upsPhaseInputPower = _UpsPhaseInputPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 9),
    _UpsPhaseInputPower_Type()
)
upsPhaseInputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputPower.setStatus("mandatory")
_UpsPhaseInputMaxPower_Type = Integer32
_UpsPhaseInputMaxPower_Object = MibTableColumn
upsPhaseInputMaxPower = _UpsPhaseInputMaxPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 10),
    _UpsPhaseInputMaxPower_Type()
)
upsPhaseInputMaxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputMaxPower.setStatus("mandatory")
_UpsPhaseInputMinPower_Type = Integer32
_UpsPhaseInputMinPower_Object = MibTableColumn
upsPhaseInputMinPower = _UpsPhaseInputMinPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 2, 3, 1, 11),
    _UpsPhaseInputMinPower_Type()
)
upsPhaseInputMinPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseInputMinPower.setStatus("mandatory")
_UpsPhaseOutput_ObjectIdentity = ObjectIdentity
upsPhaseOutput = _UpsPhaseOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3)
)
_UpsPhaseNumOutputs_Type = Integer32
_UpsPhaseNumOutputs_Object = MibScalar
upsPhaseNumOutputs = _UpsPhaseNumOutputs_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 1),
    _UpsPhaseNumOutputs_Type()
)
upsPhaseNumOutputs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseNumOutputs.setStatus("mandatory")
_UpsPhaseOutputTable_Object = MibTable
upsPhaseOutputTable = _UpsPhaseOutputTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2)
)
if mibBuilder.loadTexts:
    upsPhaseOutputTable.setStatus("mandatory")
_UpsPhaseOutputEntry_Object = MibTableRow
upsPhaseOutputEntry = _UpsPhaseOutputEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1)
)
upsPhaseOutputEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsPhaseOutputTableIndex"),
)
if mibBuilder.loadTexts:
    upsPhaseOutputEntry.setStatus("mandatory")
_UpsPhaseOutputTableIndex_Type = Integer32
_UpsPhaseOutputTableIndex_Object = MibTableColumn
upsPhaseOutputTableIndex = _UpsPhaseOutputTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 1),
    _UpsPhaseOutputTableIndex_Type()
)
upsPhaseOutputTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputTableIndex.setStatus("mandatory")
_UpsPhaseNumOutputPhases_Type = Integer32
_UpsPhaseNumOutputPhases_Object = MibTableColumn
upsPhaseNumOutputPhases = _UpsPhaseNumOutputPhases_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 2),
    _UpsPhaseNumOutputPhases_Type()
)
upsPhaseNumOutputPhases.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseNumOutputPhases.setStatus("mandatory")


class _UpsPhaseOutputVoltageOrientation_Type(Integer32):
    """Custom type upsPhaseOutputVoltageOrientation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("singlePhase", 2),
          ("splitPhase", 3),
          ("threePhasePhaseToNeutral", 4),
          ("threePhasePhaseToPhase", 5),
          ("unknown", 1))
    )


_UpsPhaseOutputVoltageOrientation_Type.__name__ = "Integer32"
_UpsPhaseOutputVoltageOrientation_Object = MibTableColumn
upsPhaseOutputVoltageOrientation = _UpsPhaseOutputVoltageOrientation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 3),
    _UpsPhaseOutputVoltageOrientation_Type()
)
upsPhaseOutputVoltageOrientation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputVoltageOrientation.setStatus("mandatory")
_UpsPhaseOutputFrequency_Type = Integer32
_UpsPhaseOutputFrequency_Object = MibTableColumn
upsPhaseOutputFrequency = _UpsPhaseOutputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 2, 1, 4),
    _UpsPhaseOutputFrequency_Type()
)
upsPhaseOutputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputFrequency.setStatus("mandatory")
_UpsPhaseOutputPhaseTable_Object = MibTable
upsPhaseOutputPhaseTable = _UpsPhaseOutputPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3)
)
if mibBuilder.loadTexts:
    upsPhaseOutputPhaseTable.setStatus("mandatory")
_UpsPhaseOutputPhaseEntry_Object = MibTableRow
upsPhaseOutputPhaseEntry = _UpsPhaseOutputPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1)
)
upsPhaseOutputPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsPhaseOutputPhaseTableIndex"),
    (0, "POWERNET-MIB", "upsPhaseOutputPhaseIndex"),
)
if mibBuilder.loadTexts:
    upsPhaseOutputPhaseEntry.setStatus("mandatory")
_UpsPhaseOutputPhaseTableIndex_Type = Integer32
_UpsPhaseOutputPhaseTableIndex_Object = MibTableColumn
upsPhaseOutputPhaseTableIndex = _UpsPhaseOutputPhaseTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 1),
    _UpsPhaseOutputPhaseTableIndex_Type()
)
upsPhaseOutputPhaseTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputPhaseTableIndex.setStatus("mandatory")
_UpsPhaseOutputPhaseIndex_Type = Integer32
_UpsPhaseOutputPhaseIndex_Object = MibTableColumn
upsPhaseOutputPhaseIndex = _UpsPhaseOutputPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 2),
    _UpsPhaseOutputPhaseIndex_Type()
)
upsPhaseOutputPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputPhaseIndex.setStatus("mandatory")
_UpsPhaseOutputVoltage_Type = Integer32
_UpsPhaseOutputVoltage_Object = MibTableColumn
upsPhaseOutputVoltage = _UpsPhaseOutputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 3),
    _UpsPhaseOutputVoltage_Type()
)
upsPhaseOutputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputVoltage.setStatus("mandatory")
_UpsPhaseOutputCurrent_Type = Integer32
_UpsPhaseOutputCurrent_Object = MibTableColumn
upsPhaseOutputCurrent = _UpsPhaseOutputCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 4),
    _UpsPhaseOutputCurrent_Type()
)
upsPhaseOutputCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputCurrent.setStatus("mandatory")
_UpsPhaseOutputMaxCurrent_Type = Integer32
_UpsPhaseOutputMaxCurrent_Object = MibTableColumn
upsPhaseOutputMaxCurrent = _UpsPhaseOutputMaxCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 5),
    _UpsPhaseOutputMaxCurrent_Type()
)
upsPhaseOutputMaxCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputMaxCurrent.setStatus("mandatory")
_UpsPhaseOutputMinCurrent_Type = Integer32
_UpsPhaseOutputMinCurrent_Object = MibTableColumn
upsPhaseOutputMinCurrent = _UpsPhaseOutputMinCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 6),
    _UpsPhaseOutputMinCurrent_Type()
)
upsPhaseOutputMinCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputMinCurrent.setStatus("mandatory")
_UpsPhaseOutputLoad_Type = Integer32
_UpsPhaseOutputLoad_Object = MibTableColumn
upsPhaseOutputLoad = _UpsPhaseOutputLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 7),
    _UpsPhaseOutputLoad_Type()
)
upsPhaseOutputLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputLoad.setStatus("mandatory")
_UpsPhaseOutputMaxLoad_Type = Integer32
_UpsPhaseOutputMaxLoad_Object = MibTableColumn
upsPhaseOutputMaxLoad = _UpsPhaseOutputMaxLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 8),
    _UpsPhaseOutputMaxLoad_Type()
)
upsPhaseOutputMaxLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputMaxLoad.setStatus("mandatory")
_UpsPhaseOutputMinLoad_Type = Integer32
_UpsPhaseOutputMinLoad_Object = MibTableColumn
upsPhaseOutputMinLoad = _UpsPhaseOutputMinLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 9),
    _UpsPhaseOutputMinLoad_Type()
)
upsPhaseOutputMinLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputMinLoad.setStatus("mandatory")
_UpsPhaseOutputPercentLoad_Type = Integer32
_UpsPhaseOutputPercentLoad_Object = MibTableColumn
upsPhaseOutputPercentLoad = _UpsPhaseOutputPercentLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 10),
    _UpsPhaseOutputPercentLoad_Type()
)
upsPhaseOutputPercentLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputPercentLoad.setStatus("mandatory")
_UpsPhaseOutputMaxPercentLoad_Type = Integer32
_UpsPhaseOutputMaxPercentLoad_Object = MibTableColumn
upsPhaseOutputMaxPercentLoad = _UpsPhaseOutputMaxPercentLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 11),
    _UpsPhaseOutputMaxPercentLoad_Type()
)
upsPhaseOutputMaxPercentLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputMaxPercentLoad.setStatus("mandatory")
_UpsPhaseOutputMinPercentLoad_Type = Integer32
_UpsPhaseOutputMinPercentLoad_Object = MibTableColumn
upsPhaseOutputMinPercentLoad = _UpsPhaseOutputMinPercentLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 12),
    _UpsPhaseOutputMinPercentLoad_Type()
)
upsPhaseOutputMinPercentLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputMinPercentLoad.setStatus("mandatory")
_UpsPhaseOutputPower_Type = Integer32
_UpsPhaseOutputPower_Object = MibTableColumn
upsPhaseOutputPower = _UpsPhaseOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 13),
    _UpsPhaseOutputPower_Type()
)
upsPhaseOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputPower.setStatus("mandatory")
_UpsPhaseOutputMaxPower_Type = Integer32
_UpsPhaseOutputMaxPower_Object = MibTableColumn
upsPhaseOutputMaxPower = _UpsPhaseOutputMaxPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 14),
    _UpsPhaseOutputMaxPower_Type()
)
upsPhaseOutputMaxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputMaxPower.setStatus("mandatory")
_UpsPhaseOutputMinPower_Type = Integer32
_UpsPhaseOutputMinPower_Object = MibTableColumn
upsPhaseOutputMinPower = _UpsPhaseOutputMinPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 15),
    _UpsPhaseOutputMinPower_Type()
)
upsPhaseOutputMinPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputMinPower.setStatus("mandatory")
_UpsPhaseOutputPercentPower_Type = Integer32
_UpsPhaseOutputPercentPower_Object = MibTableColumn
upsPhaseOutputPercentPower = _UpsPhaseOutputPercentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 16),
    _UpsPhaseOutputPercentPower_Type()
)
upsPhaseOutputPercentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputPercentPower.setStatus("mandatory")
_UpsPhaseOutputMaxPercentPower_Type = Integer32
_UpsPhaseOutputMaxPercentPower_Object = MibTableColumn
upsPhaseOutputMaxPercentPower = _UpsPhaseOutputMaxPercentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 17),
    _UpsPhaseOutputMaxPercentPower_Type()
)
upsPhaseOutputMaxPercentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputMaxPercentPower.setStatus("mandatory")
_UpsPhaseOutputMinPercentPower_Type = Integer32
_UpsPhaseOutputMinPercentPower_Object = MibTableColumn
upsPhaseOutputMinPercentPower = _UpsPhaseOutputMinPercentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 18),
    _UpsPhaseOutputMinPercentPower_Type()
)
upsPhaseOutputMinPercentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputMinPercentPower.setStatus("mandatory")
_UpsPhaseOutputPowerFactor_Type = Integer32
_UpsPhaseOutputPowerFactor_Object = MibTableColumn
upsPhaseOutputPowerFactor = _UpsPhaseOutputPowerFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 9, 3, 3, 1, 19),
    _UpsPhaseOutputPowerFactor_Type()
)
upsPhaseOutputPowerFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPhaseOutputPowerFactor.setStatus("mandatory")
_UpsSyncCtrlGroup_ObjectIdentity = ObjectIdentity
upsSyncCtrlGroup = _UpsSyncCtrlGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10)
)
_UpsSyncCtrlGroupConfig_ObjectIdentity = ObjectIdentity
upsSyncCtrlGroupConfig = _UpsSyncCtrlGroupConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1)
)
_UpsSCGMembershipGroupNumber_Type = Integer32
_UpsSCGMembershipGroupNumber_Object = MibScalar
upsSCGMembershipGroupNumber = _UpsSCGMembershipGroupNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 1),
    _UpsSCGMembershipGroupNumber_Type()
)
upsSCGMembershipGroupNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsSCGMembershipGroupNumber.setStatus("mandatory")


class _UpsSCGActiveMembershipStatus_Type(Integer32):
    """Custom type upsSCGActiveMembershipStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabledSCG", 2),
          ("enabledSCG", 1))
    )


_UpsSCGActiveMembershipStatus_Type.__name__ = "Integer32"
_UpsSCGActiveMembershipStatus_Object = MibScalar
upsSCGActiveMembershipStatus = _UpsSCGActiveMembershipStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 2),
    _UpsSCGActiveMembershipStatus_Type()
)
upsSCGActiveMembershipStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsSCGActiveMembershipStatus.setStatus("mandatory")
_UpsSCGPowerSynchronizationDelayTime_Type = Integer32
_UpsSCGPowerSynchronizationDelayTime_Object = MibScalar
upsSCGPowerSynchronizationDelayTime = _UpsSCGPowerSynchronizationDelayTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 3),
    _UpsSCGPowerSynchronizationDelayTime_Type()
)
upsSCGPowerSynchronizationDelayTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsSCGPowerSynchronizationDelayTime.setStatus("mandatory")
_UpsSCGReturnBatteryCapacityOffset_Type = Integer32
_UpsSCGReturnBatteryCapacityOffset_Object = MibScalar
upsSCGReturnBatteryCapacityOffset = _UpsSCGReturnBatteryCapacityOffset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 4),
    _UpsSCGReturnBatteryCapacityOffset_Type()
)
upsSCGReturnBatteryCapacityOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsSCGReturnBatteryCapacityOffset.setStatus("mandatory")
_UpsSCGMultiCastIP_Type = IpAddress
_UpsSCGMultiCastIP_Object = MibScalar
upsSCGMultiCastIP = _UpsSCGMultiCastIP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 1, 5),
    _UpsSCGMultiCastIP_Type()
)
upsSCGMultiCastIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsSCGMultiCastIP.setStatus("mandatory")
_UpsSyncCtrlGroupStatus_ObjectIdentity = ObjectIdentity
upsSyncCtrlGroupStatus = _UpsSyncCtrlGroupStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2)
)
_UpsSCGNumOfGroupMembers_Type = Integer32
_UpsSCGNumOfGroupMembers_Object = MibScalar
upsSCGNumOfGroupMembers = _UpsSCGNumOfGroupMembers_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 1),
    _UpsSCGNumOfGroupMembers_Type()
)
upsSCGNumOfGroupMembers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsSCGNumOfGroupMembers.setStatus("mandatory")
_UpsSCGStatusTable_Object = MibTable
upsSCGStatusTable = _UpsSCGStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2)
)
if mibBuilder.loadTexts:
    upsSCGStatusTable.setStatus("mandatory")
_UpsSCGStatusEntry_Object = MibTableRow
upsSCGStatusEntry = _UpsSCGStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1)
)
upsSCGStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsSCGStatusTableIndex"),
)
if mibBuilder.loadTexts:
    upsSCGStatusEntry.setStatus("mandatory")
_UpsSCGStatusTableIndex_Type = Integer32
_UpsSCGStatusTableIndex_Object = MibTableColumn
upsSCGStatusTableIndex = _UpsSCGStatusTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 1),
    _UpsSCGStatusTableIndex_Type()
)
upsSCGStatusTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsSCGStatusTableIndex.setStatus("mandatory")
_UpsSCGMemberIP_Type = IpAddress
_UpsSCGMemberIP_Object = MibTableColumn
upsSCGMemberIP = _UpsSCGMemberIP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 2),
    _UpsSCGMemberIP_Type()
)
upsSCGMemberIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsSCGMemberIP.setStatus("mandatory")


class _UpsSCGACInputStatus_Type(Integer32):
    """Custom type upsSCGACInputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("acInBad", 2),
          ("acInGood", 1))
    )


_UpsSCGACInputStatus_Type.__name__ = "Integer32"
_UpsSCGACInputStatus_Object = MibTableColumn
upsSCGACInputStatus = _UpsSCGACInputStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 3),
    _UpsSCGACInputStatus_Type()
)
upsSCGACInputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsSCGACInputStatus.setStatus("mandatory")


class _UpsSCGACOutputStatus_Type(Integer32):
    """Custom type upsSCGACOutputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("acOutOff", 2),
          ("acOutOn", 1))
    )


_UpsSCGACOutputStatus_Type.__name__ = "Integer32"
_UpsSCGACOutputStatus_Object = MibTableColumn
upsSCGACOutputStatus = _UpsSCGACOutputStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 10, 2, 2, 1, 4),
    _UpsSCGACOutputStatus_Type()
)
upsSCGACOutputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsSCGACOutputStatus.setStatus("mandatory")
_UpsState_ObjectIdentity = ObjectIdentity
upsState = _UpsState_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11)
)
_UpsBasicState_ObjectIdentity = ObjectIdentity
upsBasicState = _UpsBasicState_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 1)
)
_UpsBasicStateOutputState_Type = DisplayString
_UpsBasicStateOutputState_Object = MibScalar
upsBasicStateOutputState = _UpsBasicStateOutputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 1, 1),
    _UpsBasicStateOutputState_Type()
)
upsBasicStateOutputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsBasicStateOutputState.setStatus("mandatory")
_UpsAdvState_ObjectIdentity = ObjectIdentity
upsAdvState = _UpsAdvState_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2)
)
_UpsAdvStateAbnormalConditions_Type = DisplayString
_UpsAdvStateAbnormalConditions_Object = MibScalar
upsAdvStateAbnormalConditions = _UpsAdvStateAbnormalConditions_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 1),
    _UpsAdvStateAbnormalConditions_Type()
)
upsAdvStateAbnormalConditions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateAbnormalConditions.setStatus("mandatory")
_UpsAdvStateSymmetra3PhaseSpecificFaults_Type = DisplayString
_UpsAdvStateSymmetra3PhaseSpecificFaults_Object = MibScalar
upsAdvStateSymmetra3PhaseSpecificFaults = _UpsAdvStateSymmetra3PhaseSpecificFaults_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 2),
    _UpsAdvStateSymmetra3PhaseSpecificFaults_Type()
)
upsAdvStateSymmetra3PhaseSpecificFaults.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateSymmetra3PhaseSpecificFaults.setStatus("mandatory")
_UpsAdvStateDP300ESpecificFaults_Type = DisplayString
_UpsAdvStateDP300ESpecificFaults_Object = MibScalar
upsAdvStateDP300ESpecificFaults = _UpsAdvStateDP300ESpecificFaults_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 3),
    _UpsAdvStateDP300ESpecificFaults_Type()
)
upsAdvStateDP300ESpecificFaults.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateDP300ESpecificFaults.setStatus("mandatory")
_UpsAdvStateSymmetraSpecificFaults_Type = DisplayString
_UpsAdvStateSymmetraSpecificFaults_Object = MibScalar
upsAdvStateSymmetraSpecificFaults = _UpsAdvStateSymmetraSpecificFaults_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 4),
    _UpsAdvStateSymmetraSpecificFaults_Type()
)
upsAdvStateSymmetraSpecificFaults.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateSymmetraSpecificFaults.setStatus("mandatory")
_UpsAdvStateSmartUPSSpecificFaults_Type = DisplayString
_UpsAdvStateSmartUPSSpecificFaults_Object = MibScalar
upsAdvStateSmartUPSSpecificFaults = _UpsAdvStateSmartUPSSpecificFaults_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 5),
    _UpsAdvStateSmartUPSSpecificFaults_Type()
)
upsAdvStateSmartUPSSpecificFaults.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateSmartUPSSpecificFaults.setStatus("mandatory")
_UpsAdvStateSystemMessages_Type = DisplayString
_UpsAdvStateSystemMessages_Object = MibScalar
upsAdvStateSystemMessages = _UpsAdvStateSystemMessages_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 6),
    _UpsAdvStateSystemMessages_Type()
)
upsAdvStateSystemMessages.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateSystemMessages.setStatus("mandatory")
_UpsAdvStateTotaltimeonbattery_Type = DisplayString
_UpsAdvStateTotaltimeonbattery_Object = MibScalar
upsAdvStateTotaltimeonbattery = _UpsAdvStateTotaltimeonbattery_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 7),
    _UpsAdvStateTotaltimeonbattery_Type()
)
upsAdvStateTotaltimeonbattery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateTotaltimeonbattery.setStatus("mandatory")
_UpsAdvStateTotaltimeonbypass_Type = DisplayString
_UpsAdvStateTotaltimeonbypass_Object = MibScalar
upsAdvStateTotaltimeonbypass = _UpsAdvStateTotaltimeonbypass_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 8),
    _UpsAdvStateTotaltimeonbypass_Type()
)
upsAdvStateTotaltimeonbypass.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateTotaltimeonbypass.setStatus("mandatory")
_UpsAdvStateTotaltimeonNormal_Type = DisplayString
_UpsAdvStateTotaltimeonNormal_Object = MibScalar
upsAdvStateTotaltimeonNormal = _UpsAdvStateTotaltimeonNormal_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 9),
    _UpsAdvStateTotaltimeonNormal_Type()
)
upsAdvStateTotaltimeonNormal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateTotaltimeonNormal.setStatus("mandatory")
_UpsAdvStateNumberoftimesonbattery_Type = Integer32
_UpsAdvStateNumberoftimesonbattery_Object = MibScalar
upsAdvStateNumberoftimesonbattery = _UpsAdvStateNumberoftimesonbattery_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 10),
    _UpsAdvStateNumberoftimesonbattery_Type()
)
upsAdvStateNumberoftimesonbattery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateNumberoftimesonbattery.setStatus("mandatory")
_UpsAdvStateNumberoftimesbypass_Type = Integer32
_UpsAdvStateNumberoftimesbypass_Object = MibScalar
upsAdvStateNumberoftimesbypass = _UpsAdvStateNumberoftimesbypass_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 11),
    _UpsAdvStateNumberoftimesbypass_Type()
)
upsAdvStateNumberoftimesbypass.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateNumberoftimesbypass.setStatus("mandatory")
_UpsAdvStateNumberoftimesNormal_Type = Integer32
_UpsAdvStateNumberoftimesNormal_Object = MibScalar
upsAdvStateNumberoftimesNormal = _UpsAdvStateNumberoftimesNormal_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 12),
    _UpsAdvStateNumberoftimesNormal_Type()
)
upsAdvStateNumberoftimesNormal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateNumberoftimesNormal.setStatus("mandatory")


class _UpsAdvStateEcomode_Type(Integer32):
    """Custom type upsAdvStateEcomode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upsNotOnEcoMode", 2),
          ("upsOnEcoMode", 1))
    )


_UpsAdvStateEcomode_Type.__name__ = "Integer32"
_UpsAdvStateEcomode_Object = MibScalar
upsAdvStateEcomode = _UpsAdvStateEcomode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 11, 2, 13),
    _UpsAdvStateEcomode_Type()
)
upsAdvStateEcomode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsAdvStateEcomode.setStatus("mandatory")
_UpsOutletGroups_ObjectIdentity = ObjectIdentity
upsOutletGroups = _UpsOutletGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12)
)
_UpsOutletGroupStatus_ObjectIdentity = ObjectIdentity
upsOutletGroupStatus = _UpsOutletGroupStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1)
)
_UpsOutletGroupStatusTableSize_Type = Integer32
_UpsOutletGroupStatusTableSize_Object = MibScalar
upsOutletGroupStatusTableSize = _UpsOutletGroupStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 1),
    _UpsOutletGroupStatusTableSize_Type()
)
upsOutletGroupStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupStatusTableSize.setStatus("mandatory")
_UpsOutletGroupStatusTable_Object = MibTable
upsOutletGroupStatusTable = _UpsOutletGroupStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2)
)
if mibBuilder.loadTexts:
    upsOutletGroupStatusTable.setStatus("mandatory")
_UpsOutletGroupStatusEntry_Object = MibTableRow
upsOutletGroupStatusEntry = _UpsOutletGroupStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1)
)
upsOutletGroupStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsOutletGroupStatusIndex"),
)
if mibBuilder.loadTexts:
    upsOutletGroupStatusEntry.setStatus("mandatory")
_UpsOutletGroupStatusIndex_Type = Integer32
_UpsOutletGroupStatusIndex_Object = MibTableColumn
upsOutletGroupStatusIndex = _UpsOutletGroupStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 1),
    _UpsOutletGroupStatusIndex_Type()
)
upsOutletGroupStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupStatusIndex.setStatus("mandatory")
_UpsOutletGroupStatusName_Type = DisplayString
_UpsOutletGroupStatusName_Object = MibTableColumn
upsOutletGroupStatusName = _UpsOutletGroupStatusName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 2),
    _UpsOutletGroupStatusName_Type()
)
upsOutletGroupStatusName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupStatusName.setStatus("mandatory")


class _UpsOutletGroupStatusGroupState_Type(Integer32):
    """Custom type upsOutletGroupStatusGroupState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("upsOutletGroupStatusOff", 2),
          ("upsOutletGroupStatusOn", 1),
          ("upsOutletGroupStatusUnknown", 3))
    )


_UpsOutletGroupStatusGroupState_Type.__name__ = "Integer32"
_UpsOutletGroupStatusGroupState_Object = MibTableColumn
upsOutletGroupStatusGroupState = _UpsOutletGroupStatusGroupState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 3),
    _UpsOutletGroupStatusGroupState_Type()
)
upsOutletGroupStatusGroupState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupStatusGroupState.setStatus("mandatory")


class _UpsOutletGroupStatusCommandPending_Type(Integer32):
    """Custom type upsOutletGroupStatusCommandPending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upsOutletGroupCommandPending", 1),
          ("upsOutletGroupNoCommandPending", 2))
    )


_UpsOutletGroupStatusCommandPending_Type.__name__ = "Integer32"
_UpsOutletGroupStatusCommandPending_Object = MibTableColumn
upsOutletGroupStatusCommandPending = _UpsOutletGroupStatusCommandPending_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 4),
    _UpsOutletGroupStatusCommandPending_Type()
)
upsOutletGroupStatusCommandPending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupStatusCommandPending.setStatus("mandatory")


class _UpsOutletGroupStatusOutletType_Type(Integer32):
    """Custom type upsOutletGroupStatusOutletType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upsMainOutletGroup", 2),
          ("upsSwitchedOutletGroup", 1))
    )


_UpsOutletGroupStatusOutletType_Type.__name__ = "Integer32"
_UpsOutletGroupStatusOutletType_Object = MibTableColumn
upsOutletGroupStatusOutletType = _UpsOutletGroupStatusOutletType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 1, 2, 1, 5),
    _UpsOutletGroupStatusOutletType_Type()
)
upsOutletGroupStatusOutletType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupStatusOutletType.setStatus("mandatory")
_UpsOutletGroupConfig_ObjectIdentity = ObjectIdentity
upsOutletGroupConfig = _UpsOutletGroupConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2)
)
_UpsOutletGroupConfigTableSize_Type = Integer32
_UpsOutletGroupConfigTableSize_Object = MibScalar
upsOutletGroupConfigTableSize = _UpsOutletGroupConfigTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 1),
    _UpsOutletGroupConfigTableSize_Type()
)
upsOutletGroupConfigTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupConfigTableSize.setStatus("mandatory")
_UpsOutletGroupConfigTable_Object = MibTable
upsOutletGroupConfigTable = _UpsOutletGroupConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2)
)
if mibBuilder.loadTexts:
    upsOutletGroupConfigTable.setStatus("mandatory")
_UpsOutletGroupConfigEntry_Object = MibTableRow
upsOutletGroupConfigEntry = _UpsOutletGroupConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1)
)
upsOutletGroupConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsOutletGroupConfigIndex"),
)
if mibBuilder.loadTexts:
    upsOutletGroupConfigEntry.setStatus("mandatory")
_UpsOutletGroupConfigIndex_Type = Integer32
_UpsOutletGroupConfigIndex_Object = MibTableColumn
upsOutletGroupConfigIndex = _UpsOutletGroupConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 1),
    _UpsOutletGroupConfigIndex_Type()
)
upsOutletGroupConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupConfigIndex.setStatus("mandatory")
_UpsOutletGroupConfigName_Type = DisplayString
_UpsOutletGroupConfigName_Object = MibTableColumn
upsOutletGroupConfigName = _UpsOutletGroupConfigName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 2),
    _UpsOutletGroupConfigName_Type()
)
upsOutletGroupConfigName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupConfigName.setStatus("mandatory")
_UpsOutletGroupConfigPowerOnDelay_Type = Integer32
_UpsOutletGroupConfigPowerOnDelay_Object = MibTableColumn
upsOutletGroupConfigPowerOnDelay = _UpsOutletGroupConfigPowerOnDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 3),
    _UpsOutletGroupConfigPowerOnDelay_Type()
)
upsOutletGroupConfigPowerOnDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupConfigPowerOnDelay.setStatus("mandatory")
_UpsOutletGroupConfigPowerOffDelay_Type = Integer32
_UpsOutletGroupConfigPowerOffDelay_Object = MibTableColumn
upsOutletGroupConfigPowerOffDelay = _UpsOutletGroupConfigPowerOffDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 4),
    _UpsOutletGroupConfigPowerOffDelay_Type()
)
upsOutletGroupConfigPowerOffDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupConfigPowerOffDelay.setStatus("mandatory")
_UpsOutletGroupConfigRebootDuration_Type = Integer32
_UpsOutletGroupConfigRebootDuration_Object = MibTableColumn
upsOutletGroupConfigRebootDuration = _UpsOutletGroupConfigRebootDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 5),
    _UpsOutletGroupConfigRebootDuration_Type()
)
upsOutletGroupConfigRebootDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupConfigRebootDuration.setStatus("mandatory")
_UpsOutletGroupConfigMinReturnRuntime_Type = Integer32
_UpsOutletGroupConfigMinReturnRuntime_Object = MibTableColumn
upsOutletGroupConfigMinReturnRuntime = _UpsOutletGroupConfigMinReturnRuntime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 6),
    _UpsOutletGroupConfigMinReturnRuntime_Type()
)
upsOutletGroupConfigMinReturnRuntime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupConfigMinReturnRuntime.setStatus("mandatory")


class _UpsOutletGroupConfigOutletType_Type(Integer32):
    """Custom type upsOutletGroupConfigOutletType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upsMainOutletGroup", 2),
          ("upsSwitchedOutletGroup", 1))
    )


_UpsOutletGroupConfigOutletType_Type.__name__ = "Integer32"
_UpsOutletGroupConfigOutletType_Object = MibTableColumn
upsOutletGroupConfigOutletType = _UpsOutletGroupConfigOutletType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 7),
    _UpsOutletGroupConfigOutletType_Type()
)
upsOutletGroupConfigOutletType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupConfigOutletType.setStatus("mandatory")


class _UpsOutletGroupConfigLoadShedControlSkipOffDelay_Type(Integer32):
    """Custom type upsOutletGroupConfigLoadShedControlSkipOffDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upsOutletGroupConfigSkipOffDelay", 1),
          ("upsOutletGroupConfigUseOffDelay", 2))
    )


_UpsOutletGroupConfigLoadShedControlSkipOffDelay_Type.__name__ = "Integer32"
_UpsOutletGroupConfigLoadShedControlSkipOffDelay_Object = MibTableColumn
upsOutletGroupConfigLoadShedControlSkipOffDelay = _UpsOutletGroupConfigLoadShedControlSkipOffDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 8),
    _UpsOutletGroupConfigLoadShedControlSkipOffDelay_Type()
)
upsOutletGroupConfigLoadShedControlSkipOffDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupConfigLoadShedControlSkipOffDelay.setStatus("mandatory")


class _UpsOutletGroupConfigLoadShedControlAutoRestart_Type(Integer32):
    """Custom type upsOutletGroupConfigLoadShedControlAutoRestart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upsOutletGroupConfigAutoRestart", 1),
          ("upsOutletGroupConfigManualRestart", 2))
    )


_UpsOutletGroupConfigLoadShedControlAutoRestart_Type.__name__ = "Integer32"
_UpsOutletGroupConfigLoadShedControlAutoRestart_Object = MibTableColumn
upsOutletGroupConfigLoadShedControlAutoRestart = _UpsOutletGroupConfigLoadShedControlAutoRestart_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 9),
    _UpsOutletGroupConfigLoadShedControlAutoRestart_Type()
)
upsOutletGroupConfigLoadShedControlAutoRestart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupConfigLoadShedControlAutoRestart.setStatus("mandatory")


class _UpsOutletGroupConfigLoadShedControlTimeOnBattery_Type(Integer32):
    """Custom type upsOutletGroupConfigLoadShedControlTimeOnBattery based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upsOutletGroupConfigDisableTimeOnBatteryLoadShed", 1),
          ("upsOutletGroupConfigEnableTimeOnBatteryLoadShed", 2))
    )


_UpsOutletGroupConfigLoadShedControlTimeOnBattery_Type.__name__ = "Integer32"
_UpsOutletGroupConfigLoadShedControlTimeOnBattery_Object = MibTableColumn
upsOutletGroupConfigLoadShedControlTimeOnBattery = _UpsOutletGroupConfigLoadShedControlTimeOnBattery_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 10),
    _UpsOutletGroupConfigLoadShedControlTimeOnBattery_Type()
)
upsOutletGroupConfigLoadShedControlTimeOnBattery.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupConfigLoadShedControlTimeOnBattery.setStatus("mandatory")


class _UpsOutletGroupConfigLoadShedControlRuntimeRemaining_Type(Integer32):
    """Custom type upsOutletGroupConfigLoadShedControlRuntimeRemaining based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upsOutletGroupConfigDisableRuntimeRemainingLoadShed", 1),
          ("upsOutletGroupConfigEnableRuntimeRemainingLoadShed", 2))
    )


_UpsOutletGroupConfigLoadShedControlRuntimeRemaining_Type.__name__ = "Integer32"
_UpsOutletGroupConfigLoadShedControlRuntimeRemaining_Object = MibTableColumn
upsOutletGroupConfigLoadShedControlRuntimeRemaining = _UpsOutletGroupConfigLoadShedControlRuntimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 11),
    _UpsOutletGroupConfigLoadShedControlRuntimeRemaining_Type()
)
upsOutletGroupConfigLoadShedControlRuntimeRemaining.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupConfigLoadShedControlRuntimeRemaining.setStatus("mandatory")


class _UpsOutletGroupConfigLoadShedControlInOverload_Type(Integer32):
    """Custom type upsOutletGroupConfigLoadShedControlInOverload based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upsOutletGroupConfigDisableInOverloadLoadShed", 1),
          ("upsOutletGroupConfigEnableInOverloadLoadShed", 2))
    )


_UpsOutletGroupConfigLoadShedControlInOverload_Type.__name__ = "Integer32"
_UpsOutletGroupConfigLoadShedControlInOverload_Object = MibTableColumn
upsOutletGroupConfigLoadShedControlInOverload = _UpsOutletGroupConfigLoadShedControlInOverload_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 12),
    _UpsOutletGroupConfigLoadShedControlInOverload_Type()
)
upsOutletGroupConfigLoadShedControlInOverload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupConfigLoadShedControlInOverload.setStatus("mandatory")
_UpsOutletGroupConfigLoadShedTimeOnBattery_Type = Integer32
_UpsOutletGroupConfigLoadShedTimeOnBattery_Object = MibTableColumn
upsOutletGroupConfigLoadShedTimeOnBattery = _UpsOutletGroupConfigLoadShedTimeOnBattery_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 13),
    _UpsOutletGroupConfigLoadShedTimeOnBattery_Type()
)
upsOutletGroupConfigLoadShedTimeOnBattery.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupConfigLoadShedTimeOnBattery.setStatus("mandatory")
_UpsOutletGroupConfigLoadShedRuntimeRemaining_Type = Integer32
_UpsOutletGroupConfigLoadShedRuntimeRemaining_Object = MibTableColumn
upsOutletGroupConfigLoadShedRuntimeRemaining = _UpsOutletGroupConfigLoadShedRuntimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 2, 2, 1, 14),
    _UpsOutletGroupConfigLoadShedRuntimeRemaining_Type()
)
upsOutletGroupConfigLoadShedRuntimeRemaining.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupConfigLoadShedRuntimeRemaining.setStatus("mandatory")
_UpsOutletGroupControl_ObjectIdentity = ObjectIdentity
upsOutletGroupControl = _UpsOutletGroupControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3)
)
_UpsOutletGroupControlTableSize_Type = Integer32
_UpsOutletGroupControlTableSize_Object = MibScalar
upsOutletGroupControlTableSize = _UpsOutletGroupControlTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 1),
    _UpsOutletGroupControlTableSize_Type()
)
upsOutletGroupControlTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupControlTableSize.setStatus("mandatory")
_UpsOutletGroupControlTable_Object = MibTable
upsOutletGroupControlTable = _UpsOutletGroupControlTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2)
)
if mibBuilder.loadTexts:
    upsOutletGroupControlTable.setStatus("mandatory")
_UpsOutletGroupControlEntry_Object = MibTableRow
upsOutletGroupControlEntry = _UpsOutletGroupControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1)
)
upsOutletGroupControlEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsOutletGroupControlIndex"),
)
if mibBuilder.loadTexts:
    upsOutletGroupControlEntry.setStatus("mandatory")
_UpsOutletGroupControlIndex_Type = Integer32
_UpsOutletGroupControlIndex_Object = MibTableColumn
upsOutletGroupControlIndex = _UpsOutletGroupControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 1),
    _UpsOutletGroupControlIndex_Type()
)
upsOutletGroupControlIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupControlIndex.setStatus("mandatory")
_UpsOutletGroupControlName_Type = DisplayString
_UpsOutletGroupControlName_Object = MibTableColumn
upsOutletGroupControlName = _UpsOutletGroupControlName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 2),
    _UpsOutletGroupControlName_Type()
)
upsOutletGroupControlName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupControlName.setStatus("mandatory")


class _UpsOutletGroupControlCommand_Type(Integer32):
    """Custom type upsOutletGroupControlCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("upsOutletGroupCancelPendingCommand", 7),
          ("upsOutletGroupControlUnknown", 8),
          ("upsOutletGroupDelayedOff", 5),
          ("upsOutletGroupDelayedOn", 4),
          ("upsOutletGroupDelayedRebootShutdown", 10),
          ("upsOutletGroupDelayedRebootWithOrWithoutAC", 6),
          ("upsOutletGroupImmediateOff", 2),
          ("upsOutletGroupImmediateOn", 1),
          ("upsOutletGroupImmediateRebootShutdown", 9),
          ("upsOutletGroupImmediateRebootWithOrWithoutAC", 3))
    )


_UpsOutletGroupControlCommand_Type.__name__ = "Integer32"
_UpsOutletGroupControlCommand_Object = MibTableColumn
upsOutletGroupControlCommand = _UpsOutletGroupControlCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 3),
    _UpsOutletGroupControlCommand_Type()
)
upsOutletGroupControlCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsOutletGroupControlCommand.setStatus("mandatory")


class _UpsOutletGroupControlOutletType_Type(Integer32):
    """Custom type upsOutletGroupControlOutletType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("upsMainOutletGroup", 2),
          ("upsSwitchedOutletGroup", 1))
    )


_UpsOutletGroupControlOutletType_Type.__name__ = "Integer32"
_UpsOutletGroupControlOutletType_Object = MibTableColumn
upsOutletGroupControlOutletType = _UpsOutletGroupControlOutletType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 12, 3, 2, 1, 4),
    _UpsOutletGroupControlOutletType_Type()
)
upsOutletGroupControlOutletType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsOutletGroupControlOutletType.setStatus("mandatory")
_UpsDiagnostics_ObjectIdentity = ObjectIdentity
upsDiagnostics = _UpsDiagnostics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13)
)
_UpsDiagnosticIM_ObjectIdentity = ObjectIdentity
upsDiagnosticIM = _UpsDiagnosticIM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1)
)
_UpsDiagIMTableSize_Type = Integer32
_UpsDiagIMTableSize_Object = MibScalar
upsDiagIMTableSize = _UpsDiagIMTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 1),
    _UpsDiagIMTableSize_Type()
)
upsDiagIMTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagIMTableSize.setStatus("mandatory")
_UpsDiagIMTable_Object = MibTable
upsDiagIMTable = _UpsDiagIMTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2)
)
if mibBuilder.loadTexts:
    upsDiagIMTable.setStatus("mandatory")
_UpsDiagIMEntry_Object = MibTableRow
upsDiagIMEntry = _UpsDiagIMEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1)
)
upsDiagIMEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagIMIndex"),
)
if mibBuilder.loadTexts:
    upsDiagIMEntry.setStatus("mandatory")
_UpsDiagIMIndex_Type = Integer32
_UpsDiagIMIndex_Object = MibTableColumn
upsDiagIMIndex = _UpsDiagIMIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 1),
    _UpsDiagIMIndex_Type()
)
upsDiagIMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagIMIndex.setStatus("mandatory")


class _UpsDiagIMType_Type(Integer32):
    """Custom type upsDiagIMType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("imMIM", 2),
          ("imRIM", 3),
          ("imUnknown", 1))
    )


_UpsDiagIMType_Type.__name__ = "Integer32"
_UpsDiagIMType_Object = MibTableColumn
upsDiagIMType = _UpsDiagIMType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 2),
    _UpsDiagIMType_Type()
)
upsDiagIMType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagIMType.setStatus("mandatory")


class _UpsDiagIMStatus_Type(Integer32):
    """Custom type upsDiagIMStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 7),
          ("notInstalled", 2),
          ("offFail", 5),
          ("offOk", 3),
          ("onFail", 6),
          ("onOk", 4),
          ("unknown", 1))
    )


_UpsDiagIMStatus_Type.__name__ = "Integer32"
_UpsDiagIMStatus_Object = MibTableColumn
upsDiagIMStatus = _UpsDiagIMStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 3),
    _UpsDiagIMStatus_Type()
)
upsDiagIMStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagIMStatus.setStatus("mandatory")
_UpsDiagIMFirmwareRev_Type = DisplayString
_UpsDiagIMFirmwareRev_Object = MibTableColumn
upsDiagIMFirmwareRev = _UpsDiagIMFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 4),
    _UpsDiagIMFirmwareRev_Type()
)
upsDiagIMFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagIMFirmwareRev.setStatus("mandatory")
_UpsDiagIMSlaveFirmwareRev_Type = DisplayString
_UpsDiagIMSlaveFirmwareRev_Object = MibTableColumn
upsDiagIMSlaveFirmwareRev = _UpsDiagIMSlaveFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 5),
    _UpsDiagIMSlaveFirmwareRev_Type()
)
upsDiagIMSlaveFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagIMSlaveFirmwareRev.setStatus("mandatory")
_UpsDiagIMHardwareRev_Type = DisplayString
_UpsDiagIMHardwareRev_Object = MibTableColumn
upsDiagIMHardwareRev = _UpsDiagIMHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 6),
    _UpsDiagIMHardwareRev_Type()
)
upsDiagIMHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagIMHardwareRev.setStatus("mandatory")
_UpsDiagIMSerialNum_Type = DisplayString
_UpsDiagIMSerialNum_Object = MibTableColumn
upsDiagIMSerialNum = _UpsDiagIMSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 7),
    _UpsDiagIMSerialNum_Type()
)
upsDiagIMSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagIMSerialNum.setStatus("mandatory")
_UpsDiagIMManufactureDate_Type = DisplayString
_UpsDiagIMManufactureDate_Object = MibTableColumn
upsDiagIMManufactureDate = _UpsDiagIMManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 1, 2, 1, 8),
    _UpsDiagIMManufactureDate_Type()
)
upsDiagIMManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagIMManufactureDate.setStatus("mandatory")
_UpsDiagnosticPowerModules_ObjectIdentity = ObjectIdentity
upsDiagnosticPowerModules = _UpsDiagnosticPowerModules_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2)
)
_UpsDiagPMTableSize_Type = Integer32
_UpsDiagPMTableSize_Object = MibScalar
upsDiagPMTableSize = _UpsDiagPMTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 1),
    _UpsDiagPMTableSize_Type()
)
upsDiagPMTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagPMTableSize.setStatus("mandatory")
_UpsDiagPMTable_Object = MibTable
upsDiagPMTable = _UpsDiagPMTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2)
)
if mibBuilder.loadTexts:
    upsDiagPMTable.setStatus("mandatory")
_UpsDiagPMEntry_Object = MibTableRow
upsDiagPMEntry = _UpsDiagPMEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1)
)
upsDiagPMEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagPMIndex"),
)
if mibBuilder.loadTexts:
    upsDiagPMEntry.setStatus("mandatory")
_UpsDiagPMIndex_Type = Integer32
_UpsDiagPMIndex_Object = MibTableColumn
upsDiagPMIndex = _UpsDiagPMIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 1),
    _UpsDiagPMIndex_Type()
)
upsDiagPMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagPMIndex.setStatus("mandatory")


class _UpsDiagPMStatus_Type(Integer32):
    """Custom type upsDiagPMStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 7),
          ("notInstalled", 2),
          ("offFail", 5),
          ("offOk", 3),
          ("onFail", 6),
          ("onOk", 4),
          ("unknown", 1))
    )


_UpsDiagPMStatus_Type.__name__ = "Integer32"
_UpsDiagPMStatus_Object = MibTableColumn
upsDiagPMStatus = _UpsDiagPMStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 2),
    _UpsDiagPMStatus_Type()
)
upsDiagPMStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagPMStatus.setStatus("mandatory")
_UpsDiagPMFirmwareRev_Type = DisplayString
_UpsDiagPMFirmwareRev_Object = MibTableColumn
upsDiagPMFirmwareRev = _UpsDiagPMFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 3),
    _UpsDiagPMFirmwareRev_Type()
)
upsDiagPMFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagPMFirmwareRev.setStatus("mandatory")
_UpsDiagPMHardwareRev_Type = DisplayString
_UpsDiagPMHardwareRev_Object = MibTableColumn
upsDiagPMHardwareRev = _UpsDiagPMHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 4),
    _UpsDiagPMHardwareRev_Type()
)
upsDiagPMHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagPMHardwareRev.setStatus("mandatory")
_UpsDiagPMSerialNum_Type = DisplayString
_UpsDiagPMSerialNum_Object = MibTableColumn
upsDiagPMSerialNum = _UpsDiagPMSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 5),
    _UpsDiagPMSerialNum_Type()
)
upsDiagPMSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagPMSerialNum.setStatus("mandatory")
_UpsDiagPMManufactureDate_Type = DisplayString
_UpsDiagPMManufactureDate_Object = MibTableColumn
upsDiagPMManufactureDate = _UpsDiagPMManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 2, 2, 1, 6),
    _UpsDiagPMManufactureDate_Type()
)
upsDiagPMManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagPMManufactureDate.setStatus("mandatory")
_UpsDiagnosticBatteries_ObjectIdentity = ObjectIdentity
upsDiagnosticBatteries = _UpsDiagnosticBatteries_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3)
)
_UpsDiagBatteryTableSize_Type = Integer32
_UpsDiagBatteryTableSize_Object = MibScalar
upsDiagBatteryTableSize = _UpsDiagBatteryTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 1),
    _UpsDiagBatteryTableSize_Type()
)
upsDiagBatteryTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagBatteryTableSize.setStatus("mandatory")
_UpsDiagBatteryTable_Object = MibTable
upsDiagBatteryTable = _UpsDiagBatteryTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2)
)
if mibBuilder.loadTexts:
    upsDiagBatteryTable.setStatus("mandatory")
_UpsDiagBatteryEntry_Object = MibTableRow
upsDiagBatteryEntry = _UpsDiagBatteryEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1)
)
upsDiagBatteryEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagBatteryIndex"),
)
if mibBuilder.loadTexts:
    upsDiagBatteryEntry.setStatus("mandatory")
_UpsDiagBatteryFrameIndex_Type = Integer32
_UpsDiagBatteryFrameIndex_Object = MibTableColumn
upsDiagBatteryFrameIndex = _UpsDiagBatteryFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 1),
    _UpsDiagBatteryFrameIndex_Type()
)
upsDiagBatteryFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagBatteryFrameIndex.setStatus("mandatory")
_UpsDiagBatteryIndex_Type = Integer32
_UpsDiagBatteryIndex_Object = MibTableColumn
upsDiagBatteryIndex = _UpsDiagBatteryIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 2),
    _UpsDiagBatteryIndex_Type()
)
upsDiagBatteryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagBatteryIndex.setStatus("mandatory")


class _UpsDiagBatteryStatus_Type(Integer32):
    """Custom type upsDiagBatteryStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("failed", 4),
          ("highTemperature", 5),
          ("lowCapacity", 7),
          ("notInstalled", 2),
          ("ok", 3),
          ("replaceImmediately", 6),
          ("unknown", 1))
    )


_UpsDiagBatteryStatus_Type.__name__ = "Integer32"
_UpsDiagBatteryStatus_Object = MibTableColumn
upsDiagBatteryStatus = _UpsDiagBatteryStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 3),
    _UpsDiagBatteryStatus_Type()
)
upsDiagBatteryStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagBatteryStatus.setStatus("mandatory")
_UpsDiagBatterySerialNumber_Type = DisplayString
_UpsDiagBatterySerialNumber_Object = MibTableColumn
upsDiagBatterySerialNumber = _UpsDiagBatterySerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 4),
    _UpsDiagBatterySerialNumber_Type()
)
upsDiagBatterySerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagBatterySerialNumber.setStatus("mandatory")
_UpsDiagBatteryFirmwareRev_Type = DisplayString
_UpsDiagBatteryFirmwareRev_Object = MibTableColumn
upsDiagBatteryFirmwareRev = _UpsDiagBatteryFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 5),
    _UpsDiagBatteryFirmwareRev_Type()
)
upsDiagBatteryFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagBatteryFirmwareRev.setStatus("mandatory")
_UpsDiagBatteryManufactureDate_Type = DisplayString
_UpsDiagBatteryManufactureDate_Object = MibTableColumn
upsDiagBatteryManufactureDate = _UpsDiagBatteryManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 6),
    _UpsDiagBatteryManufactureDate_Type()
)
upsDiagBatteryManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagBatteryManufactureDate.setStatus("mandatory")
_UpsDiagBatteryType_Type = DisplayString
_UpsDiagBatteryType_Object = MibTableColumn
upsDiagBatteryType = _UpsDiagBatteryType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 3, 2, 1, 7),
    _UpsDiagBatteryType_Type()
)
upsDiagBatteryType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagBatteryType.setStatus("mandatory")
_UpsDiagnosticSubsystem_ObjectIdentity = ObjectIdentity
upsDiagnosticSubsystem = _UpsDiagnosticSubsystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4)
)
_UpsDiagSubSysFrameTableSize_Type = Integer32
_UpsDiagSubSysFrameTableSize_Object = MibScalar
upsDiagSubSysFrameTableSize = _UpsDiagSubSysFrameTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 1),
    _UpsDiagSubSysFrameTableSize_Type()
)
upsDiagSubSysFrameTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysFrameTableSize.setStatus("mandatory")
_UpsDiagSubSysFrameTable_Object = MibTable
upsDiagSubSysFrameTable = _UpsDiagSubSysFrameTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2)
)
if mibBuilder.loadTexts:
    upsDiagSubSysFrameTable.setStatus("mandatory")
_UpsDiagSubSysFrameEntry_Object = MibTableRow
upsDiagSubSysFrameEntry = _UpsDiagSubSysFrameEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1)
)
upsDiagSubSysFrameEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysFrameIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysFrameEntry.setStatus("mandatory")
_UpsDiagSubSysFrameIndex_Type = Integer32
_UpsDiagSubSysFrameIndex_Object = MibTableColumn
upsDiagSubSysFrameIndex = _UpsDiagSubSysFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 1),
    _UpsDiagSubSysFrameIndex_Type()
)
upsDiagSubSysFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysFrameIndex.setStatus("mandatory")


class _UpsDiagSubSysFrameType_Type(Integer32):
    """Custom type upsDiagSubSysFrameType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("frameTypeLXR", 5),
          ("frameTypeMain", 3),
          ("frameTypeXR", 4),
          ("notInstalled", 2),
          ("unknown", 1))
    )


_UpsDiagSubSysFrameType_Type.__name__ = "Integer32"
_UpsDiagSubSysFrameType_Object = MibTableColumn
upsDiagSubSysFrameType = _UpsDiagSubSysFrameType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 2),
    _UpsDiagSubSysFrameType_Type()
)
upsDiagSubSysFrameType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysFrameType.setStatus("mandatory")
_UpsDiagSubSysFrameFirmwareRev_Type = DisplayString
_UpsDiagSubSysFrameFirmwareRev_Object = MibTableColumn
upsDiagSubSysFrameFirmwareRev = _UpsDiagSubSysFrameFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 3),
    _UpsDiagSubSysFrameFirmwareRev_Type()
)
upsDiagSubSysFrameFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysFrameFirmwareRev.setStatus("mandatory")
_UpsDiagSubSysFrameHardwareRev_Type = DisplayString
_UpsDiagSubSysFrameHardwareRev_Object = MibTableColumn
upsDiagSubSysFrameHardwareRev = _UpsDiagSubSysFrameHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 4),
    _UpsDiagSubSysFrameHardwareRev_Type()
)
upsDiagSubSysFrameHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysFrameHardwareRev.setStatus("mandatory")
_UpsDiagSubSysFrameSerialNum_Type = DisplayString
_UpsDiagSubSysFrameSerialNum_Object = MibTableColumn
upsDiagSubSysFrameSerialNum = _UpsDiagSubSysFrameSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 5),
    _UpsDiagSubSysFrameSerialNum_Type()
)
upsDiagSubSysFrameSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysFrameSerialNum.setStatus("mandatory")
_UpsDiagSubSysFrameManufactureDate_Type = DisplayString
_UpsDiagSubSysFrameManufactureDate_Object = MibTableColumn
upsDiagSubSysFrameManufactureDate = _UpsDiagSubSysFrameManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 2, 1, 6),
    _UpsDiagSubSysFrameManufactureDate_Type()
)
upsDiagSubSysFrameManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysFrameManufactureDate.setStatus("mandatory")
_UpsDiagSubSysIntBypSwitchTableSize_Type = Integer32
_UpsDiagSubSysIntBypSwitchTableSize_Object = MibScalar
upsDiagSubSysIntBypSwitchTableSize = _UpsDiagSubSysIntBypSwitchTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 3),
    _UpsDiagSubSysIntBypSwitchTableSize_Type()
)
upsDiagSubSysIntBypSwitchTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysIntBypSwitchTableSize.setStatus("mandatory")
_UpsDiagSubSysIntBypSwitchTable_Object = MibTable
upsDiagSubSysIntBypSwitchTable = _UpsDiagSubSysIntBypSwitchTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4)
)
if mibBuilder.loadTexts:
    upsDiagSubSysIntBypSwitchTable.setStatus("mandatory")
_UpsDiagSubSysIntBypSwitchEntry_Object = MibTableRow
upsDiagSubSysIntBypSwitchEntry = _UpsDiagSubSysIntBypSwitchEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1)
)
upsDiagSubSysIntBypSwitchEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysIntBypSwitchIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysIntBypSwitchEntry.setStatus("mandatory")
_UpsDiagSubSysIntBypSwitchFrameIndex_Type = Integer32
_UpsDiagSubSysIntBypSwitchFrameIndex_Object = MibTableColumn
upsDiagSubSysIntBypSwitchFrameIndex = _UpsDiagSubSysIntBypSwitchFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 1),
    _UpsDiagSubSysIntBypSwitchFrameIndex_Type()
)
upsDiagSubSysIntBypSwitchFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysIntBypSwitchFrameIndex.setStatus("mandatory")
_UpsDiagSubSysIntBypSwitchIndex_Type = Integer32
_UpsDiagSubSysIntBypSwitchIndex_Object = MibTableColumn
upsDiagSubSysIntBypSwitchIndex = _UpsDiagSubSysIntBypSwitchIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 2),
    _UpsDiagSubSysIntBypSwitchIndex_Type()
)
upsDiagSubSysIntBypSwitchIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysIntBypSwitchIndex.setStatus("mandatory")


class _UpsDiagSubSysIntBypSwitchStatus_Type(Integer32):
    """Custom type upsDiagSubSysIntBypSwitchStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 7),
          ("notInstalled", 2),
          ("offFail", 5),
          ("offOk", 3),
          ("onFail", 6),
          ("onOk", 4),
          ("unknown", 1))
    )


_UpsDiagSubSysIntBypSwitchStatus_Type.__name__ = "Integer32"
_UpsDiagSubSysIntBypSwitchStatus_Object = MibTableColumn
upsDiagSubSysIntBypSwitchStatus = _UpsDiagSubSysIntBypSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 3),
    _UpsDiagSubSysIntBypSwitchStatus_Type()
)
upsDiagSubSysIntBypSwitchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysIntBypSwitchStatus.setStatus("mandatory")
_UpsDiagSubSysIntBypSwitchFirmwareRev_Type = DisplayString
_UpsDiagSubSysIntBypSwitchFirmwareRev_Object = MibTableColumn
upsDiagSubSysIntBypSwitchFirmwareRev = _UpsDiagSubSysIntBypSwitchFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 4),
    _UpsDiagSubSysIntBypSwitchFirmwareRev_Type()
)
upsDiagSubSysIntBypSwitchFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysIntBypSwitchFirmwareRev.setStatus("mandatory")
_UpsDiagSubSysIntBypSwitchHardwareRev_Type = DisplayString
_UpsDiagSubSysIntBypSwitchHardwareRev_Object = MibTableColumn
upsDiagSubSysIntBypSwitchHardwareRev = _UpsDiagSubSysIntBypSwitchHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 5),
    _UpsDiagSubSysIntBypSwitchHardwareRev_Type()
)
upsDiagSubSysIntBypSwitchHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysIntBypSwitchHardwareRev.setStatus("mandatory")
_UpsDiagSubSysIntBypSwitchSerialNum_Type = DisplayString
_UpsDiagSubSysIntBypSwitchSerialNum_Object = MibTableColumn
upsDiagSubSysIntBypSwitchSerialNum = _UpsDiagSubSysIntBypSwitchSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 6),
    _UpsDiagSubSysIntBypSwitchSerialNum_Type()
)
upsDiagSubSysIntBypSwitchSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysIntBypSwitchSerialNum.setStatus("mandatory")
_UpsDiagSubSysIntBypSwitchManufactureDate_Type = DisplayString
_UpsDiagSubSysIntBypSwitchManufactureDate_Object = MibTableColumn
upsDiagSubSysIntBypSwitchManufactureDate = _UpsDiagSubSysIntBypSwitchManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 4, 1, 7),
    _UpsDiagSubSysIntBypSwitchManufactureDate_Type()
)
upsDiagSubSysIntBypSwitchManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysIntBypSwitchManufactureDate.setStatus("mandatory")
_UpsDiagSubSysBattMonitorTableSize_Type = Integer32
_UpsDiagSubSysBattMonitorTableSize_Object = MibScalar
upsDiagSubSysBattMonitorTableSize = _UpsDiagSubSysBattMonitorTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 5),
    _UpsDiagSubSysBattMonitorTableSize_Type()
)
upsDiagSubSysBattMonitorTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysBattMonitorTableSize.setStatus("mandatory")
_UpsDiagSubSysBattMonitorTable_Object = MibTable
upsDiagSubSysBattMonitorTable = _UpsDiagSubSysBattMonitorTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6)
)
if mibBuilder.loadTexts:
    upsDiagSubSysBattMonitorTable.setStatus("mandatory")
_UpsDiagSubSysBattMonitorEntry_Object = MibTableRow
upsDiagSubSysBattMonitorEntry = _UpsDiagSubSysBattMonitorEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1)
)
upsDiagSubSysBattMonitorEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysBattMonitorIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysBattMonitorEntry.setStatus("mandatory")
_UpsDiagSubSysBattMonitorFrameIndex_Type = Integer32
_UpsDiagSubSysBattMonitorFrameIndex_Object = MibTableColumn
upsDiagSubSysBattMonitorFrameIndex = _UpsDiagSubSysBattMonitorFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 1),
    _UpsDiagSubSysBattMonitorFrameIndex_Type()
)
upsDiagSubSysBattMonitorFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysBattMonitorFrameIndex.setStatus("mandatory")
_UpsDiagSubSysBattMonitorIndex_Type = Integer32
_UpsDiagSubSysBattMonitorIndex_Object = MibTableColumn
upsDiagSubSysBattMonitorIndex = _UpsDiagSubSysBattMonitorIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 2),
    _UpsDiagSubSysBattMonitorIndex_Type()
)
upsDiagSubSysBattMonitorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysBattMonitorIndex.setStatus("mandatory")


class _UpsDiagSubSysBattMonitorStatus_Type(Integer32):
    """Custom type upsDiagSubSysBattMonitorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 7),
          ("notInstalled", 2),
          ("offFail", 5),
          ("offOk", 3),
          ("onFail", 6),
          ("onOk", 4),
          ("unknown", 1))
    )


_UpsDiagSubSysBattMonitorStatus_Type.__name__ = "Integer32"
_UpsDiagSubSysBattMonitorStatus_Object = MibTableColumn
upsDiagSubSysBattMonitorStatus = _UpsDiagSubSysBattMonitorStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 3),
    _UpsDiagSubSysBattMonitorStatus_Type()
)
upsDiagSubSysBattMonitorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysBattMonitorStatus.setStatus("mandatory")
_UpsDiagSubSysBattMonitorFirmwareRev_Type = DisplayString
_UpsDiagSubSysBattMonitorFirmwareRev_Object = MibTableColumn
upsDiagSubSysBattMonitorFirmwareRev = _UpsDiagSubSysBattMonitorFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 4),
    _UpsDiagSubSysBattMonitorFirmwareRev_Type()
)
upsDiagSubSysBattMonitorFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysBattMonitorFirmwareRev.setStatus("mandatory")
_UpsDiagSubSysBattMonitorHardwareRev_Type = DisplayString
_UpsDiagSubSysBattMonitorHardwareRev_Object = MibTableColumn
upsDiagSubSysBattMonitorHardwareRev = _UpsDiagSubSysBattMonitorHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 5),
    _UpsDiagSubSysBattMonitorHardwareRev_Type()
)
upsDiagSubSysBattMonitorHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysBattMonitorHardwareRev.setStatus("mandatory")
_UpsDiagSubSysBattMonitorSerialNum_Type = DisplayString
_UpsDiagSubSysBattMonitorSerialNum_Object = MibTableColumn
upsDiagSubSysBattMonitorSerialNum = _UpsDiagSubSysBattMonitorSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 6),
    _UpsDiagSubSysBattMonitorSerialNum_Type()
)
upsDiagSubSysBattMonitorSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysBattMonitorSerialNum.setStatus("mandatory")
_UpsDiagSubSysBattMonitorManufactureDate_Type = DisplayString
_UpsDiagSubSysBattMonitorManufactureDate_Object = MibTableColumn
upsDiagSubSysBattMonitorManufactureDate = _UpsDiagSubSysBattMonitorManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 6, 1, 7),
    _UpsDiagSubSysBattMonitorManufactureDate_Type()
)
upsDiagSubSysBattMonitorManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysBattMonitorManufactureDate.setStatus("mandatory")
_UpsDiagSubSysExternalSwitchGearTableSize_Type = Integer32
_UpsDiagSubSysExternalSwitchGearTableSize_Object = MibScalar
upsDiagSubSysExternalSwitchGearTableSize = _UpsDiagSubSysExternalSwitchGearTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 7),
    _UpsDiagSubSysExternalSwitchGearTableSize_Type()
)
upsDiagSubSysExternalSwitchGearTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysExternalSwitchGearTableSize.setStatus("mandatory")
_UpsDiagSubSysExternalSwitchGearTable_Object = MibTable
upsDiagSubSysExternalSwitchGearTable = _UpsDiagSubSysExternalSwitchGearTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8)
)
if mibBuilder.loadTexts:
    upsDiagSubSysExternalSwitchGearTable.setStatus("mandatory")
_UpsDiagSubSysExternalSwitchGearEntry_Object = MibTableRow
upsDiagSubSysExternalSwitchGearEntry = _UpsDiagSubSysExternalSwitchGearEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1)
)
upsDiagSubSysExternalSwitchGearEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysExternalSwitchGearIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysExternalSwitchGearEntry.setStatus("mandatory")
_UpsDiagSubSysExternalSwitchGearFrameIndex_Type = Integer32
_UpsDiagSubSysExternalSwitchGearFrameIndex_Object = MibTableColumn
upsDiagSubSysExternalSwitchGearFrameIndex = _UpsDiagSubSysExternalSwitchGearFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 1),
    _UpsDiagSubSysExternalSwitchGearFrameIndex_Type()
)
upsDiagSubSysExternalSwitchGearFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysExternalSwitchGearFrameIndex.setStatus("mandatory")
_UpsDiagSubSysExternalSwitchGearIndex_Type = Integer32
_UpsDiagSubSysExternalSwitchGearIndex_Object = MibTableColumn
upsDiagSubSysExternalSwitchGearIndex = _UpsDiagSubSysExternalSwitchGearIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 2),
    _UpsDiagSubSysExternalSwitchGearIndex_Type()
)
upsDiagSubSysExternalSwitchGearIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysExternalSwitchGearIndex.setStatus("mandatory")


class _UpsDiagSubSysExternalSwitchGearStatus_Type(Integer32):
    """Custom type upsDiagSubSysExternalSwitchGearStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 7),
          ("notInstalled", 2),
          ("offFail", 5),
          ("offOk", 3),
          ("onFail", 6),
          ("onOk", 4),
          ("unknown", 1))
    )


_UpsDiagSubSysExternalSwitchGearStatus_Type.__name__ = "Integer32"
_UpsDiagSubSysExternalSwitchGearStatus_Object = MibTableColumn
upsDiagSubSysExternalSwitchGearStatus = _UpsDiagSubSysExternalSwitchGearStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 3),
    _UpsDiagSubSysExternalSwitchGearStatus_Type()
)
upsDiagSubSysExternalSwitchGearStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysExternalSwitchGearStatus.setStatus("mandatory")
_UpsDiagSubSysExternalSwitchGearFirmwareRev_Type = DisplayString
_UpsDiagSubSysExternalSwitchGearFirmwareRev_Object = MibTableColumn
upsDiagSubSysExternalSwitchGearFirmwareRev = _UpsDiagSubSysExternalSwitchGearFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 4),
    _UpsDiagSubSysExternalSwitchGearFirmwareRev_Type()
)
upsDiagSubSysExternalSwitchGearFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysExternalSwitchGearFirmwareRev.setStatus("mandatory")
_UpsDiagSubSysExternalSwitchGearHardwareRev_Type = DisplayString
_UpsDiagSubSysExternalSwitchGearHardwareRev_Object = MibTableColumn
upsDiagSubSysExternalSwitchGearHardwareRev = _UpsDiagSubSysExternalSwitchGearHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 5),
    _UpsDiagSubSysExternalSwitchGearHardwareRev_Type()
)
upsDiagSubSysExternalSwitchGearHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysExternalSwitchGearHardwareRev.setStatus("mandatory")
_UpsDiagSubSysExternalSwitchGearSerialNum_Type = DisplayString
_UpsDiagSubSysExternalSwitchGearSerialNum_Object = MibTableColumn
upsDiagSubSysExternalSwitchGearSerialNum = _UpsDiagSubSysExternalSwitchGearSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 6),
    _UpsDiagSubSysExternalSwitchGearSerialNum_Type()
)
upsDiagSubSysExternalSwitchGearSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysExternalSwitchGearSerialNum.setStatus("mandatory")
_UpsDiagSubSysExternalSwitchGearManufactureDate_Type = DisplayString
_UpsDiagSubSysExternalSwitchGearManufactureDate_Object = MibTableColumn
upsDiagSubSysExternalSwitchGearManufactureDate = _UpsDiagSubSysExternalSwitchGearManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 8, 1, 7),
    _UpsDiagSubSysExternalSwitchGearManufactureDate_Type()
)
upsDiagSubSysExternalSwitchGearManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysExternalSwitchGearManufactureDate.setStatus("mandatory")
_UpsDiagSubSysDisplayInterfaceCardTableSize_Type = Integer32
_UpsDiagSubSysDisplayInterfaceCardTableSize_Object = MibScalar
upsDiagSubSysDisplayInterfaceCardTableSize = _UpsDiagSubSysDisplayInterfaceCardTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 9),
    _UpsDiagSubSysDisplayInterfaceCardTableSize_Type()
)
upsDiagSubSysDisplayInterfaceCardTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysDisplayInterfaceCardTableSize.setStatus("mandatory")
_UpsDiagSubSysDisplayInterfaceCardTable_Object = MibTable
upsDiagSubSysDisplayInterfaceCardTable = _UpsDiagSubSysDisplayInterfaceCardTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10)
)
if mibBuilder.loadTexts:
    upsDiagSubSysDisplayInterfaceCardTable.setStatus("mandatory")
_UpsDiagSubSysDisplayInterfaceCardEntry_Object = MibTableRow
upsDiagSubSysDisplayInterfaceCardEntry = _UpsDiagSubSysDisplayInterfaceCardEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1)
)
upsDiagSubSysDisplayInterfaceCardEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysDisplayInterfaceCardIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysDisplayInterfaceCardEntry.setStatus("mandatory")
_UpsDiagSubSysDisplayInterfaceCardFrameIndex_Type = Integer32
_UpsDiagSubSysDisplayInterfaceCardFrameIndex_Object = MibTableColumn
upsDiagSubSysDisplayInterfaceCardFrameIndex = _UpsDiagSubSysDisplayInterfaceCardFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 1),
    _UpsDiagSubSysDisplayInterfaceCardFrameIndex_Type()
)
upsDiagSubSysDisplayInterfaceCardFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysDisplayInterfaceCardFrameIndex.setStatus("mandatory")
_UpsDiagSubSysDisplayInterfaceCardIndex_Type = Integer32
_UpsDiagSubSysDisplayInterfaceCardIndex_Object = MibTableColumn
upsDiagSubSysDisplayInterfaceCardIndex = _UpsDiagSubSysDisplayInterfaceCardIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 2),
    _UpsDiagSubSysDisplayInterfaceCardIndex_Type()
)
upsDiagSubSysDisplayInterfaceCardIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysDisplayInterfaceCardIndex.setStatus("mandatory")


class _UpsDiagSubSysDisplayInterfaceCardStatus_Type(Integer32):
    """Custom type upsDiagSubSysDisplayInterfaceCardStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 7),
          ("notInstalled", 2),
          ("offFail", 5),
          ("offOk", 3),
          ("onFail", 6),
          ("onOk", 4),
          ("unknown", 1))
    )


_UpsDiagSubSysDisplayInterfaceCardStatus_Type.__name__ = "Integer32"
_UpsDiagSubSysDisplayInterfaceCardStatus_Object = MibTableColumn
upsDiagSubSysDisplayInterfaceCardStatus = _UpsDiagSubSysDisplayInterfaceCardStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 10, 1, 3),
    _UpsDiagSubSysDisplayInterfaceCardStatus_Type()
)
upsDiagSubSysDisplayInterfaceCardStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysDisplayInterfaceCardStatus.setStatus("mandatory")
_UpsDiagSubSysDCCircuitBreakerTableSize_Type = Integer32
_UpsDiagSubSysDCCircuitBreakerTableSize_Object = MibScalar
upsDiagSubSysDCCircuitBreakerTableSize = _UpsDiagSubSysDCCircuitBreakerTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 11),
    _UpsDiagSubSysDCCircuitBreakerTableSize_Type()
)
upsDiagSubSysDCCircuitBreakerTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysDCCircuitBreakerTableSize.setStatus("mandatory")
_UpsDiagSubSysDCCircuitBreakerTable_Object = MibTable
upsDiagSubSysDCCircuitBreakerTable = _UpsDiagSubSysDCCircuitBreakerTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12)
)
if mibBuilder.loadTexts:
    upsDiagSubSysDCCircuitBreakerTable.setStatus("mandatory")
_UpsDiagSubSysDCCircuitBreakerEntry_Object = MibTableRow
upsDiagSubSysDCCircuitBreakerEntry = _UpsDiagSubSysDCCircuitBreakerEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1)
)
upsDiagSubSysDCCircuitBreakerEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysDCCircuitBreakerIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysDCCircuitBreakerEntry.setStatus("mandatory")
_UpsDiagSubSysDCCircuitBreakerFrameIndex_Type = Integer32
_UpsDiagSubSysDCCircuitBreakerFrameIndex_Object = MibTableColumn
upsDiagSubSysDCCircuitBreakerFrameIndex = _UpsDiagSubSysDCCircuitBreakerFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 1),
    _UpsDiagSubSysDCCircuitBreakerFrameIndex_Type()
)
upsDiagSubSysDCCircuitBreakerFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysDCCircuitBreakerFrameIndex.setStatus("mandatory")
_UpsDiagSubSysDCCircuitBreakerIndex_Type = Integer32
_UpsDiagSubSysDCCircuitBreakerIndex_Object = MibTableColumn
upsDiagSubSysDCCircuitBreakerIndex = _UpsDiagSubSysDCCircuitBreakerIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 2),
    _UpsDiagSubSysDCCircuitBreakerIndex_Type()
)
upsDiagSubSysDCCircuitBreakerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysDCCircuitBreakerIndex.setStatus("mandatory")


class _UpsDiagSubSysDCCircuitBreakerStatus_Type(Integer32):
    """Custom type upsDiagSubSysDCCircuitBreakerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 4),
          ("notInstalled", 2),
          ("opened", 3),
          ("unknown", 1))
    )


_UpsDiagSubSysDCCircuitBreakerStatus_Type.__name__ = "Integer32"
_UpsDiagSubSysDCCircuitBreakerStatus_Object = MibTableColumn
upsDiagSubSysDCCircuitBreakerStatus = _UpsDiagSubSysDCCircuitBreakerStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 12, 1, 3),
    _UpsDiagSubSysDCCircuitBreakerStatus_Type()
)
upsDiagSubSysDCCircuitBreakerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysDCCircuitBreakerStatus.setStatus("mandatory")
_UpsDiagSubSysSystemPowerSupplyTableSize_Type = Integer32
_UpsDiagSubSysSystemPowerSupplyTableSize_Object = MibScalar
upsDiagSubSysSystemPowerSupplyTableSize = _UpsDiagSubSysSystemPowerSupplyTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 13),
    _UpsDiagSubSysSystemPowerSupplyTableSize_Type()
)
upsDiagSubSysSystemPowerSupplyTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysSystemPowerSupplyTableSize.setStatus("mandatory")
_UpsDiagSubSysSystemPowerSupplyTable_Object = MibTable
upsDiagSubSysSystemPowerSupplyTable = _UpsDiagSubSysSystemPowerSupplyTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14)
)
if mibBuilder.loadTexts:
    upsDiagSubSysSystemPowerSupplyTable.setStatus("mandatory")
_UpsDiagSubSysSystemPowerSupplyEntry_Object = MibTableRow
upsDiagSubSysSystemPowerSupplyEntry = _UpsDiagSubSysSystemPowerSupplyEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1)
)
upsDiagSubSysSystemPowerSupplyEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysSystemPowerSupplyIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysSystemPowerSupplyEntry.setStatus("mandatory")
_UpsDiagSubSysSystemPowerSupplyFrameIndex_Type = Integer32
_UpsDiagSubSysSystemPowerSupplyFrameIndex_Object = MibTableColumn
upsDiagSubSysSystemPowerSupplyFrameIndex = _UpsDiagSubSysSystemPowerSupplyFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 1),
    _UpsDiagSubSysSystemPowerSupplyFrameIndex_Type()
)
upsDiagSubSysSystemPowerSupplyFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysSystemPowerSupplyFrameIndex.setStatus("mandatory")
_UpsDiagSubSysSystemPowerSupplyIndex_Type = Integer32
_UpsDiagSubSysSystemPowerSupplyIndex_Object = MibTableColumn
upsDiagSubSysSystemPowerSupplyIndex = _UpsDiagSubSysSystemPowerSupplyIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 2),
    _UpsDiagSubSysSystemPowerSupplyIndex_Type()
)
upsDiagSubSysSystemPowerSupplyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysSystemPowerSupplyIndex.setStatus("mandatory")


class _UpsDiagSubSysSystemPowerSupplyStatus_Type(Integer32):
    """Custom type upsDiagSubSysSystemPowerSupplyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 7),
          ("notInstalled", 2),
          ("offFail", 5),
          ("offOk", 3),
          ("onFail", 6),
          ("onOk", 4),
          ("unknown", 1))
    )


_UpsDiagSubSysSystemPowerSupplyStatus_Type.__name__ = "Integer32"
_UpsDiagSubSysSystemPowerSupplyStatus_Object = MibTableColumn
upsDiagSubSysSystemPowerSupplyStatus = _UpsDiagSubSysSystemPowerSupplyStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 3),
    _UpsDiagSubSysSystemPowerSupplyStatus_Type()
)
upsDiagSubSysSystemPowerSupplyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysSystemPowerSupplyStatus.setStatus("mandatory")
_UpsDiagSubSysSystemPowerSupplyFirmwareRev_Type = DisplayString
_UpsDiagSubSysSystemPowerSupplyFirmwareRev_Object = MibTableColumn
upsDiagSubSysSystemPowerSupplyFirmwareRev = _UpsDiagSubSysSystemPowerSupplyFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 4),
    _UpsDiagSubSysSystemPowerSupplyFirmwareRev_Type()
)
upsDiagSubSysSystemPowerSupplyFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysSystemPowerSupplyFirmwareRev.setStatus("mandatory")
_UpsDiagSubSysSystemPowerSupplyHardwareRev_Type = DisplayString
_UpsDiagSubSysSystemPowerSupplyHardwareRev_Object = MibTableColumn
upsDiagSubSysSystemPowerSupplyHardwareRev = _UpsDiagSubSysSystemPowerSupplyHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 5),
    _UpsDiagSubSysSystemPowerSupplyHardwareRev_Type()
)
upsDiagSubSysSystemPowerSupplyHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysSystemPowerSupplyHardwareRev.setStatus("mandatory")
_UpsDiagSubSysSystemPowerSupplySerialNum_Type = DisplayString
_UpsDiagSubSysSystemPowerSupplySerialNum_Object = MibTableColumn
upsDiagSubSysSystemPowerSupplySerialNum = _UpsDiagSubSysSystemPowerSupplySerialNum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 6),
    _UpsDiagSubSysSystemPowerSupplySerialNum_Type()
)
upsDiagSubSysSystemPowerSupplySerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysSystemPowerSupplySerialNum.setStatus("mandatory")
_UpsDiagSubSysSystemPowerSupplyManufactureDate_Type = DisplayString
_UpsDiagSubSysSystemPowerSupplyManufactureDate_Object = MibTableColumn
upsDiagSubSysSystemPowerSupplyManufactureDate = _UpsDiagSubSysSystemPowerSupplyManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 14, 1, 7),
    _UpsDiagSubSysSystemPowerSupplyManufactureDate_Type()
)
upsDiagSubSysSystemPowerSupplyManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysSystemPowerSupplyManufactureDate.setStatus("mandatory")
_UpsDiagSubSysXRCommunicationCardTableSize_Type = Integer32
_UpsDiagSubSysXRCommunicationCardTableSize_Object = MibScalar
upsDiagSubSysXRCommunicationCardTableSize = _UpsDiagSubSysXRCommunicationCardTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 15),
    _UpsDiagSubSysXRCommunicationCardTableSize_Type()
)
upsDiagSubSysXRCommunicationCardTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysXRCommunicationCardTableSize.setStatus("mandatory")
_UpsDiagSubSysXRCommunicationCardTable_Object = MibTable
upsDiagSubSysXRCommunicationCardTable = _UpsDiagSubSysXRCommunicationCardTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16)
)
if mibBuilder.loadTexts:
    upsDiagSubSysXRCommunicationCardTable.setStatus("mandatory")
_UpsDiagSubSysXRCommunicationCardEntry_Object = MibTableRow
upsDiagSubSysXRCommunicationCardEntry = _UpsDiagSubSysXRCommunicationCardEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1)
)
upsDiagSubSysXRCommunicationCardEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysXRCommunicationCardIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysXRCommunicationCardEntry.setStatus("mandatory")
_UpsDiagSubSysXRCommunicationCardFrameIndex_Type = Integer32
_UpsDiagSubSysXRCommunicationCardFrameIndex_Object = MibTableColumn
upsDiagSubSysXRCommunicationCardFrameIndex = _UpsDiagSubSysXRCommunicationCardFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 1),
    _UpsDiagSubSysXRCommunicationCardFrameIndex_Type()
)
upsDiagSubSysXRCommunicationCardFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysXRCommunicationCardFrameIndex.setStatus("mandatory")
_UpsDiagSubSysXRCommunicationCardIndex_Type = Integer32
_UpsDiagSubSysXRCommunicationCardIndex_Object = MibTableColumn
upsDiagSubSysXRCommunicationCardIndex = _UpsDiagSubSysXRCommunicationCardIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 2),
    _UpsDiagSubSysXRCommunicationCardIndex_Type()
)
upsDiagSubSysXRCommunicationCardIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysXRCommunicationCardIndex.setStatus("mandatory")


class _UpsDiagSubSysXRCommunicationCardStatus_Type(Integer32):
    """Custom type upsDiagSubSysXRCommunicationCardStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 7),
          ("notInstalled", 2),
          ("offFail", 5),
          ("offOk", 3),
          ("onFail", 6),
          ("onOk", 4),
          ("unknown", 1))
    )


_UpsDiagSubSysXRCommunicationCardStatus_Type.__name__ = "Integer32"
_UpsDiagSubSysXRCommunicationCardStatus_Object = MibTableColumn
upsDiagSubSysXRCommunicationCardStatus = _UpsDiagSubSysXRCommunicationCardStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 3),
    _UpsDiagSubSysXRCommunicationCardStatus_Type()
)
upsDiagSubSysXRCommunicationCardStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysXRCommunicationCardStatus.setStatus("mandatory")
_UpsDiagSubSysXRCommunicationCardFirmwareRev_Type = DisplayString
_UpsDiagSubSysXRCommunicationCardFirmwareRev_Object = MibTableColumn
upsDiagSubSysXRCommunicationCardFirmwareRev = _UpsDiagSubSysXRCommunicationCardFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 4),
    _UpsDiagSubSysXRCommunicationCardFirmwareRev_Type()
)
upsDiagSubSysXRCommunicationCardFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysXRCommunicationCardFirmwareRev.setStatus("mandatory")
_UpsDiagSubSysXRCommunicationCardSerialNum_Type = DisplayString
_UpsDiagSubSysXRCommunicationCardSerialNum_Object = MibTableColumn
upsDiagSubSysXRCommunicationCardSerialNum = _UpsDiagSubSysXRCommunicationCardSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 16, 1, 5),
    _UpsDiagSubSysXRCommunicationCardSerialNum_Type()
)
upsDiagSubSysXRCommunicationCardSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysXRCommunicationCardSerialNum.setStatus("mandatory")
_UpsDiagSubSysExternalPowerFrameBoardTableSize_Type = Integer32
_UpsDiagSubSysExternalPowerFrameBoardTableSize_Object = MibScalar
upsDiagSubSysExternalPowerFrameBoardTableSize = _UpsDiagSubSysExternalPowerFrameBoardTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 17),
    _UpsDiagSubSysExternalPowerFrameBoardTableSize_Type()
)
upsDiagSubSysExternalPowerFrameBoardTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysExternalPowerFrameBoardTableSize.setStatus("mandatory")
_UpsDiagSubSysExternalPowerFrameBoardTable_Object = MibTable
upsDiagSubSysExternalPowerFrameBoardTable = _UpsDiagSubSysExternalPowerFrameBoardTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18)
)
if mibBuilder.loadTexts:
    upsDiagSubSysExternalPowerFrameBoardTable.setStatus("mandatory")
_UpsDiagSubSysExternalPowerFrameBoardEntry_Object = MibTableRow
upsDiagSubSysExternalPowerFrameBoardEntry = _UpsDiagSubSysExternalPowerFrameBoardEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1)
)
upsDiagSubSysExternalPowerFrameBoardEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysExternalPowerFrameBoardIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysExternalPowerFrameBoardEntry.setStatus("mandatory")
_UpsDiagSubSysExternalPowerFrameBoardFrameIndex_Type = Integer32
_UpsDiagSubSysExternalPowerFrameBoardFrameIndex_Object = MibTableColumn
upsDiagSubSysExternalPowerFrameBoardFrameIndex = _UpsDiagSubSysExternalPowerFrameBoardFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 1),
    _UpsDiagSubSysExternalPowerFrameBoardFrameIndex_Type()
)
upsDiagSubSysExternalPowerFrameBoardFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysExternalPowerFrameBoardFrameIndex.setStatus("mandatory")
_UpsDiagSubSysExternalPowerFrameBoardIndex_Type = Integer32
_UpsDiagSubSysExternalPowerFrameBoardIndex_Object = MibTableColumn
upsDiagSubSysExternalPowerFrameBoardIndex = _UpsDiagSubSysExternalPowerFrameBoardIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 2),
    _UpsDiagSubSysExternalPowerFrameBoardIndex_Type()
)
upsDiagSubSysExternalPowerFrameBoardIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysExternalPowerFrameBoardIndex.setStatus("mandatory")


class _UpsDiagSubSysExternalPowerFrameBoardStatus_Type(Integer32):
    """Custom type upsDiagSubSysExternalPowerFrameBoardStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 7),
          ("notInstalled", 2),
          ("offFail", 5),
          ("offOk", 3),
          ("onFail", 6),
          ("onOk", 4),
          ("unknown", 1))
    )


_UpsDiagSubSysExternalPowerFrameBoardStatus_Type.__name__ = "Integer32"
_UpsDiagSubSysExternalPowerFrameBoardStatus_Object = MibTableColumn
upsDiagSubSysExternalPowerFrameBoardStatus = _UpsDiagSubSysExternalPowerFrameBoardStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 18, 1, 3),
    _UpsDiagSubSysExternalPowerFrameBoardStatus_Type()
)
upsDiagSubSysExternalPowerFrameBoardStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysExternalPowerFrameBoardStatus.setStatus("mandatory")
_UpsDiagSubSysChargerTableSize_Type = Integer32
_UpsDiagSubSysChargerTableSize_Object = MibScalar
upsDiagSubSysChargerTableSize = _UpsDiagSubSysChargerTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 19),
    _UpsDiagSubSysChargerTableSize_Type()
)
upsDiagSubSysChargerTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysChargerTableSize.setStatus("mandatory")
_UpsDiagSubSysChargerTable_Object = MibTable
upsDiagSubSysChargerTable = _UpsDiagSubSysChargerTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20)
)
if mibBuilder.loadTexts:
    upsDiagSubSysChargerTable.setStatus("mandatory")
_UpsDiagSubSysChargerEntry_Object = MibTableRow
upsDiagSubSysChargerEntry = _UpsDiagSubSysChargerEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1)
)
upsDiagSubSysChargerEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysChargerIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysChargerEntry.setStatus("mandatory")
_UpsDiagSubSysChargerFrameIndex_Type = Integer32
_UpsDiagSubSysChargerFrameIndex_Object = MibTableColumn
upsDiagSubSysChargerFrameIndex = _UpsDiagSubSysChargerFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 1),
    _UpsDiagSubSysChargerFrameIndex_Type()
)
upsDiagSubSysChargerFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysChargerFrameIndex.setStatus("mandatory")
_UpsDiagSubSysChargerIndex_Type = Integer32
_UpsDiagSubSysChargerIndex_Object = MibTableColumn
upsDiagSubSysChargerIndex = _UpsDiagSubSysChargerIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 2),
    _UpsDiagSubSysChargerIndex_Type()
)
upsDiagSubSysChargerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysChargerIndex.setStatus("mandatory")


class _UpsDiagSubSysChargerStatus_Type(Integer32):
    """Custom type upsDiagSubSysChargerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 7),
          ("notInstalled", 2),
          ("offFail", 5),
          ("offOk", 3),
          ("onFail", 6),
          ("onOk", 4),
          ("unknown", 1))
    )


_UpsDiagSubSysChargerStatus_Type.__name__ = "Integer32"
_UpsDiagSubSysChargerStatus_Object = MibTableColumn
upsDiagSubSysChargerStatus = _UpsDiagSubSysChargerStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 20, 1, 3),
    _UpsDiagSubSysChargerStatus_Type()
)
upsDiagSubSysChargerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysChargerStatus.setStatus("mandatory")
_UpsDiagSubSysInverterTableSize_Type = Integer32
_UpsDiagSubSysInverterTableSize_Object = MibScalar
upsDiagSubSysInverterTableSize = _UpsDiagSubSysInverterTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 21),
    _UpsDiagSubSysInverterTableSize_Type()
)
upsDiagSubSysInverterTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysInverterTableSize.setStatus("mandatory")
_UpsDiagSubSysInverterTable_Object = MibTable
upsDiagSubSysInverterTable = _UpsDiagSubSysInverterTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22)
)
if mibBuilder.loadTexts:
    upsDiagSubSysInverterTable.setStatus("mandatory")
_UpsDiagSubSysInverterEntry_Object = MibTableRow
upsDiagSubSysInverterEntry = _UpsDiagSubSysInverterEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1)
)
upsDiagSubSysInverterEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysInverterIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysInverterEntry.setStatus("mandatory")
_UpsDiagSubSysInverterFrameIndex_Type = Integer32
_UpsDiagSubSysInverterFrameIndex_Object = MibTableColumn
upsDiagSubSysInverterFrameIndex = _UpsDiagSubSysInverterFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 1),
    _UpsDiagSubSysInverterFrameIndex_Type()
)
upsDiagSubSysInverterFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysInverterFrameIndex.setStatus("mandatory")
_UpsDiagSubSysInverterIndex_Type = Integer32
_UpsDiagSubSysInverterIndex_Object = MibTableColumn
upsDiagSubSysInverterIndex = _UpsDiagSubSysInverterIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 2),
    _UpsDiagSubSysInverterIndex_Type()
)
upsDiagSubSysInverterIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysInverterIndex.setStatus("mandatory")


class _UpsDiagSubSysInverterStatus_Type(Integer32):
    """Custom type upsDiagSubSysInverterStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 7),
          ("notInstalled", 2),
          ("offFail", 5),
          ("offOk", 3),
          ("onFail", 6),
          ("onOk", 4),
          ("unknown", 1))
    )


_UpsDiagSubSysInverterStatus_Type.__name__ = "Integer32"
_UpsDiagSubSysInverterStatus_Object = MibTableColumn
upsDiagSubSysInverterStatus = _UpsDiagSubSysInverterStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 3),
    _UpsDiagSubSysInverterStatus_Type()
)
upsDiagSubSysInverterStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysInverterStatus.setStatus("mandatory")
_UpsDiagSubSysInverterFirmwareRev_Type = DisplayString
_UpsDiagSubSysInverterFirmwareRev_Object = MibTableColumn
upsDiagSubSysInverterFirmwareRev = _UpsDiagSubSysInverterFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 4),
    _UpsDiagSubSysInverterFirmwareRev_Type()
)
upsDiagSubSysInverterFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysInverterFirmwareRev.setStatus("mandatory")
_UpsDiagSubSysInverterHardwareRev_Type = DisplayString
_UpsDiagSubSysInverterHardwareRev_Object = MibTableColumn
upsDiagSubSysInverterHardwareRev = _UpsDiagSubSysInverterHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 5),
    _UpsDiagSubSysInverterHardwareRev_Type()
)
upsDiagSubSysInverterHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysInverterHardwareRev.setStatus("mandatory")
_UpsDiagSubSysInverterSerialNum_Type = DisplayString
_UpsDiagSubSysInverterSerialNum_Object = MibTableColumn
upsDiagSubSysInverterSerialNum = _UpsDiagSubSysInverterSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 6),
    _UpsDiagSubSysInverterSerialNum_Type()
)
upsDiagSubSysInverterSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysInverterSerialNum.setStatus("mandatory")
_UpsDiagSubSysInverterManufactureDate_Type = DisplayString
_UpsDiagSubSysInverterManufactureDate_Object = MibTableColumn
upsDiagSubSysInverterManufactureDate = _UpsDiagSubSysInverterManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 22, 1, 7),
    _UpsDiagSubSysInverterManufactureDate_Type()
)
upsDiagSubSysInverterManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysInverterManufactureDate.setStatus("mandatory")
_UpsDiagSubSysPowerFactorCorrectionTableSize_Type = Integer32
_UpsDiagSubSysPowerFactorCorrectionTableSize_Object = MibScalar
upsDiagSubSysPowerFactorCorrectionTableSize = _UpsDiagSubSysPowerFactorCorrectionTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 23),
    _UpsDiagSubSysPowerFactorCorrectionTableSize_Type()
)
upsDiagSubSysPowerFactorCorrectionTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysPowerFactorCorrectionTableSize.setStatus("mandatory")
_UpsDiagSubSysPowerFactorCorrectionTable_Object = MibTable
upsDiagSubSysPowerFactorCorrectionTable = _UpsDiagSubSysPowerFactorCorrectionTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24)
)
if mibBuilder.loadTexts:
    upsDiagSubSysPowerFactorCorrectionTable.setStatus("mandatory")
_UpsDiagSubSysPowerFactorCorrectionEntry_Object = MibTableRow
upsDiagSubSysPowerFactorCorrectionEntry = _UpsDiagSubSysPowerFactorCorrectionEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1)
)
upsDiagSubSysPowerFactorCorrectionEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysPowerFactorCorrectionIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysPowerFactorCorrectionEntry.setStatus("mandatory")
_UpsDiagSubSysPowerFactorCorrectionFrameIndex_Type = Integer32
_UpsDiagSubSysPowerFactorCorrectionFrameIndex_Object = MibTableColumn
upsDiagSubSysPowerFactorCorrectionFrameIndex = _UpsDiagSubSysPowerFactorCorrectionFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 1),
    _UpsDiagSubSysPowerFactorCorrectionFrameIndex_Type()
)
upsDiagSubSysPowerFactorCorrectionFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysPowerFactorCorrectionFrameIndex.setStatus("mandatory")
_UpsDiagSubSysPowerFactorCorrectionIndex_Type = Integer32
_UpsDiagSubSysPowerFactorCorrectionIndex_Object = MibTableColumn
upsDiagSubSysPowerFactorCorrectionIndex = _UpsDiagSubSysPowerFactorCorrectionIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 2),
    _UpsDiagSubSysPowerFactorCorrectionIndex_Type()
)
upsDiagSubSysPowerFactorCorrectionIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysPowerFactorCorrectionIndex.setStatus("mandatory")


class _UpsDiagSubSysPowerFactorCorrectionStatus_Type(Integer32):
    """Custom type upsDiagSubSysPowerFactorCorrectionStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 7),
          ("notInstalled", 2),
          ("offFail", 5),
          ("offOk", 3),
          ("onFail", 6),
          ("onOk", 4),
          ("unknown", 1))
    )


_UpsDiagSubSysPowerFactorCorrectionStatus_Type.__name__ = "Integer32"
_UpsDiagSubSysPowerFactorCorrectionStatus_Object = MibTableColumn
upsDiagSubSysPowerFactorCorrectionStatus = _UpsDiagSubSysPowerFactorCorrectionStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 3),
    _UpsDiagSubSysPowerFactorCorrectionStatus_Type()
)
upsDiagSubSysPowerFactorCorrectionStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysPowerFactorCorrectionStatus.setStatus("mandatory")
_UpsDiagSubSysPowerFactorCorrectionFirmwareRev_Type = DisplayString
_UpsDiagSubSysPowerFactorCorrectionFirmwareRev_Object = MibTableColumn
upsDiagSubSysPowerFactorCorrectionFirmwareRev = _UpsDiagSubSysPowerFactorCorrectionFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 4),
    _UpsDiagSubSysPowerFactorCorrectionFirmwareRev_Type()
)
upsDiagSubSysPowerFactorCorrectionFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysPowerFactorCorrectionFirmwareRev.setStatus("mandatory")
_UpsDiagSubSysPowerFactorCorrectionHardwareRev_Type = DisplayString
_UpsDiagSubSysPowerFactorCorrectionHardwareRev_Object = MibTableColumn
upsDiagSubSysPowerFactorCorrectionHardwareRev = _UpsDiagSubSysPowerFactorCorrectionHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 5),
    _UpsDiagSubSysPowerFactorCorrectionHardwareRev_Type()
)
upsDiagSubSysPowerFactorCorrectionHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysPowerFactorCorrectionHardwareRev.setStatus("mandatory")
_UpsDiagSubSysPowerFactorCorrectionSerialNum_Type = DisplayString
_UpsDiagSubSysPowerFactorCorrectionSerialNum_Object = MibTableColumn
upsDiagSubSysPowerFactorCorrectionSerialNum = _UpsDiagSubSysPowerFactorCorrectionSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 6),
    _UpsDiagSubSysPowerFactorCorrectionSerialNum_Type()
)
upsDiagSubSysPowerFactorCorrectionSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysPowerFactorCorrectionSerialNum.setStatus("mandatory")
_UpsDiagSubSysPowerFactorCorrectionManufactureDate_Type = DisplayString
_UpsDiagSubSysPowerFactorCorrectionManufactureDate_Object = MibTableColumn
upsDiagSubSysPowerFactorCorrectionManufactureDate = _UpsDiagSubSysPowerFactorCorrectionManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 24, 1, 7),
    _UpsDiagSubSysPowerFactorCorrectionManufactureDate_Type()
)
upsDiagSubSysPowerFactorCorrectionManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysPowerFactorCorrectionManufactureDate.setStatus("mandatory")
_UpsDiagSubSysNetworkComCardTableSize_Type = Integer32
_UpsDiagSubSysNetworkComCardTableSize_Object = MibScalar
upsDiagSubSysNetworkComCardTableSize = _UpsDiagSubSysNetworkComCardTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 25),
    _UpsDiagSubSysNetworkComCardTableSize_Type()
)
upsDiagSubSysNetworkComCardTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysNetworkComCardTableSize.setStatus("mandatory")
_UpsDiagSubSysNetworkComCardTable_Object = MibTable
upsDiagSubSysNetworkComCardTable = _UpsDiagSubSysNetworkComCardTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26)
)
if mibBuilder.loadTexts:
    upsDiagSubSysNetworkComCardTable.setStatus("mandatory")
_UpsDiagSubSysNetworkComCardEntry_Object = MibTableRow
upsDiagSubSysNetworkComCardEntry = _UpsDiagSubSysNetworkComCardEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1)
)
upsDiagSubSysNetworkComCardEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsDiagSubSysNetworkComCardIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubSysNetworkComCardEntry.setStatus("mandatory")
_UpsDiagSubSysNetworkComCardIndex_Type = Integer32
_UpsDiagSubSysNetworkComCardIndex_Object = MibTableColumn
upsDiagSubSysNetworkComCardIndex = _UpsDiagSubSysNetworkComCardIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 1),
    _UpsDiagSubSysNetworkComCardIndex_Type()
)
upsDiagSubSysNetworkComCardIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysNetworkComCardIndex.setStatus("mandatory")
_UpsDiagSubSysNetworkComCardModelNumber_Type = DisplayString
_UpsDiagSubSysNetworkComCardModelNumber_Object = MibTableColumn
upsDiagSubSysNetworkComCardModelNumber = _UpsDiagSubSysNetworkComCardModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 2),
    _UpsDiagSubSysNetworkComCardModelNumber_Type()
)
upsDiagSubSysNetworkComCardModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysNetworkComCardModelNumber.setStatus("mandatory")
_UpsDiagSubSysNetworkComCardSerialNumber_Type = DisplayString
_UpsDiagSubSysNetworkComCardSerialNumber_Object = MibTableColumn
upsDiagSubSysNetworkComCardSerialNumber = _UpsDiagSubSysNetworkComCardSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 3),
    _UpsDiagSubSysNetworkComCardSerialNumber_Type()
)
upsDiagSubSysNetworkComCardSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysNetworkComCardSerialNumber.setStatus("mandatory")
_UpsDiagSubSysNetworkComCardDateOfManufacture_Type = DisplayString
_UpsDiagSubSysNetworkComCardDateOfManufacture_Object = MibTableColumn
upsDiagSubSysNetworkComCardDateOfManufacture = _UpsDiagSubSysNetworkComCardDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 4),
    _UpsDiagSubSysNetworkComCardDateOfManufacture_Type()
)
upsDiagSubSysNetworkComCardDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysNetworkComCardDateOfManufacture.setStatus("mandatory")
_UpsDiagSubSysNetworkComCardHardwareRev_Type = DisplayString
_UpsDiagSubSysNetworkComCardHardwareRev_Object = MibTableColumn
upsDiagSubSysNetworkComCardHardwareRev = _UpsDiagSubSysNetworkComCardHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 5),
    _UpsDiagSubSysNetworkComCardHardwareRev_Type()
)
upsDiagSubSysNetworkComCardHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysNetworkComCardHardwareRev.setStatus("mandatory")
_UpsDiagSubSysNetworkComCardFirmwareAppRev_Type = DisplayString
_UpsDiagSubSysNetworkComCardFirmwareAppRev_Object = MibTableColumn
upsDiagSubSysNetworkComCardFirmwareAppRev = _UpsDiagSubSysNetworkComCardFirmwareAppRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 6),
    _UpsDiagSubSysNetworkComCardFirmwareAppRev_Type()
)
upsDiagSubSysNetworkComCardFirmwareAppRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysNetworkComCardFirmwareAppRev.setStatus("mandatory")
_UpsDiagSubSysNetworkComCardFirmwareAppOSRev_Type = DisplayString
_UpsDiagSubSysNetworkComCardFirmwareAppOSRev_Object = MibTableColumn
upsDiagSubSysNetworkComCardFirmwareAppOSRev = _UpsDiagSubSysNetworkComCardFirmwareAppOSRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 4, 26, 1, 7),
    _UpsDiagSubSysNetworkComCardFirmwareAppOSRev_Type()
)
upsDiagSubSysNetworkComCardFirmwareAppOSRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubSysNetworkComCardFirmwareAppOSRev.setStatus("mandatory")
_UpsDiagnosticExternalDevices_ObjectIdentity = ObjectIdentity
upsDiagnosticExternalDevices = _UpsDiagnosticExternalDevices_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5)
)
_UpsDiagSwitchGear_ObjectIdentity = ObjectIdentity
upsDiagSwitchGear = _UpsDiagSwitchGear_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1)
)


class _UpsDiagSwitchGearStatus_Type(Integer32):
    """Custom type upsDiagSwitchGearStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fail", 4),
          ("lostComm", 5),
          ("notInstalled", 2),
          ("ok", 3),
          ("overtemp", 6),
          ("unknown", 1))
    )


_UpsDiagSwitchGearStatus_Type.__name__ = "Integer32"
_UpsDiagSwitchGearStatus_Object = MibScalar
upsDiagSwitchGearStatus = _UpsDiagSwitchGearStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 1),
    _UpsDiagSwitchGearStatus_Type()
)
upsDiagSwitchGearStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSwitchGearStatus.setStatus("mandatory")


class _UpsDiagSwitchGearInputSwitchStatus_Type(Integer32):
    """Custom type upsDiagSwitchGearInputSwitchStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 4),
          ("notInstalled", 2),
          ("opened", 3),
          ("unknown", 1))
    )


_UpsDiagSwitchGearInputSwitchStatus_Type.__name__ = "Integer32"
_UpsDiagSwitchGearInputSwitchStatus_Object = MibScalar
upsDiagSwitchGearInputSwitchStatus = _UpsDiagSwitchGearInputSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 2),
    _UpsDiagSwitchGearInputSwitchStatus_Type()
)
upsDiagSwitchGearInputSwitchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSwitchGearInputSwitchStatus.setStatus("mandatory")


class _UpsDiagSwitchGearOutputSwitchStatus_Type(Integer32):
    """Custom type upsDiagSwitchGearOutputSwitchStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 4),
          ("notInstalled", 2),
          ("opened", 3),
          ("unknown", 1))
    )


_UpsDiagSwitchGearOutputSwitchStatus_Type.__name__ = "Integer32"
_UpsDiagSwitchGearOutputSwitchStatus_Object = MibScalar
upsDiagSwitchGearOutputSwitchStatus = _UpsDiagSwitchGearOutputSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 3),
    _UpsDiagSwitchGearOutputSwitchStatus_Type()
)
upsDiagSwitchGearOutputSwitchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSwitchGearOutputSwitchStatus.setStatus("mandatory")


class _UpsDiagSwitchGearBypassSwitchStatus_Type(Integer32):
    """Custom type upsDiagSwitchGearBypassSwitchStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 4),
          ("notInstalled", 2),
          ("opened", 3),
          ("unknown", 1))
    )


_UpsDiagSwitchGearBypassSwitchStatus_Type.__name__ = "Integer32"
_UpsDiagSwitchGearBypassSwitchStatus_Object = MibScalar
upsDiagSwitchGearBypassSwitchStatus = _UpsDiagSwitchGearBypassSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 4),
    _UpsDiagSwitchGearBypassSwitchStatus_Type()
)
upsDiagSwitchGearBypassSwitchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSwitchGearBypassSwitchStatus.setStatus("mandatory")


class _UpsDiagSwitchGearBypassInputSwitchStatus_Type(Integer32):
    """Custom type upsDiagSwitchGearBypassInputSwitchStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 4),
          ("notInstalled", 2),
          ("opened", 3),
          ("unknown", 1))
    )


_UpsDiagSwitchGearBypassInputSwitchStatus_Type.__name__ = "Integer32"
_UpsDiagSwitchGearBypassInputSwitchStatus_Object = MibScalar
upsDiagSwitchGearBypassInputSwitchStatus = _UpsDiagSwitchGearBypassInputSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 5),
    _UpsDiagSwitchGearBypassInputSwitchStatus_Type()
)
upsDiagSwitchGearBypassInputSwitchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSwitchGearBypassInputSwitchStatus.setStatus("mandatory")
_UpsDiagSwitchGearBreakerTableSize_Type = Integer32
_UpsDiagSwitchGearBreakerTableSize_Object = MibScalar
upsDiagSwitchGearBreakerTableSize = _UpsDiagSwitchGearBreakerTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 6),
    _UpsDiagSwitchGearBreakerTableSize_Type()
)
upsDiagSwitchGearBreakerTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSwitchGearBreakerTableSize.setStatus("mandatory")
_UpsDiagSwitchGearBreakerTable_Object = MibTable
upsDiagSwitchGearBreakerTable = _UpsDiagSwitchGearBreakerTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7)
)
if mibBuilder.loadTexts:
    upsDiagSwitchGearBreakerTable.setStatus("mandatory")
_UpsDiagSwitchGearBreakerEntry_Object = MibTableRow
upsDiagSwitchGearBreakerEntry = _UpsDiagSwitchGearBreakerEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1)
)
upsDiagSwitchGearBreakerEntry.setIndexNames(
    (0, "POWERNET-MIB", "switchgearBreakerIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSwitchGearBreakerEntry.setStatus("mandatory")
_SwitchgearBreakerIndex_Type = Integer32
_SwitchgearBreakerIndex_Object = MibTableColumn
switchgearBreakerIndex = _SwitchgearBreakerIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 1),
    _SwitchgearBreakerIndex_Type()
)
switchgearBreakerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchgearBreakerIndex.setStatus("mandatory")


class _SwitchgearBreakerPresent_Type(Integer32):
    """Custom type switchgearBreakerPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_SwitchgearBreakerPresent_Type.__name__ = "Integer32"
_SwitchgearBreakerPresent_Object = MibTableColumn
switchgearBreakerPresent = _SwitchgearBreakerPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 2),
    _SwitchgearBreakerPresent_Type()
)
switchgearBreakerPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    switchgearBreakerPresent.setStatus("mandatory")
_SwitchgearBreakerName_Type = DisplayString
_SwitchgearBreakerName_Object = MibTableColumn
switchgearBreakerName = _SwitchgearBreakerName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 7, 1, 3),
    _SwitchgearBreakerName_Type()
)
switchgearBreakerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchgearBreakerName.setStatus("mandatory")
_UpsDiagSubFeedBreakerTableSize_Type = Integer32
_UpsDiagSubFeedBreakerTableSize_Object = MibScalar
upsDiagSubFeedBreakerTableSize = _UpsDiagSubFeedBreakerTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 8),
    _UpsDiagSubFeedBreakerTableSize_Type()
)
upsDiagSubFeedBreakerTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagSubFeedBreakerTableSize.setStatus("mandatory")
_UpsDiagSubFeedBreakerTable_Object = MibTable
upsDiagSubFeedBreakerTable = _UpsDiagSubFeedBreakerTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9)
)
if mibBuilder.loadTexts:
    upsDiagSubFeedBreakerTable.setStatus("mandatory")
_UpsDiagSubFeedBreakerEntry_Object = MibTableRow
upsDiagSubFeedBreakerEntry = _UpsDiagSubFeedBreakerEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1)
)
upsDiagSubFeedBreakerEntry.setIndexNames(
    (0, "POWERNET-MIB", "subfeedBreakerIndex"),
)
if mibBuilder.loadTexts:
    upsDiagSubFeedBreakerEntry.setStatus("mandatory")
_SubfeedBreakerIndex_Type = Integer32
_SubfeedBreakerIndex_Object = MibTableColumn
subfeedBreakerIndex = _SubfeedBreakerIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 1),
    _SubfeedBreakerIndex_Type()
)
subfeedBreakerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    subfeedBreakerIndex.setStatus("mandatory")


class _SubfeedBreakerPresent_Type(Integer32):
    """Custom type subfeedBreakerPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_SubfeedBreakerPresent_Type.__name__ = "Integer32"
_SubfeedBreakerPresent_Object = MibTableColumn
subfeedBreakerPresent = _SubfeedBreakerPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 2),
    _SubfeedBreakerPresent_Type()
)
subfeedBreakerPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    subfeedBreakerPresent.setStatus("mandatory")
_SubfeedBreakerRating_Type = Integer32
_SubfeedBreakerRating_Object = MibTableColumn
subfeedBreakerRating = _SubfeedBreakerRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 3),
    _SubfeedBreakerRating_Type()
)
subfeedBreakerRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    subfeedBreakerRating.setStatus("mandatory")


class _SubfeedBreakerUpperAcceptPowerWarning_Type(Integer32):
    """Custom type subfeedBreakerUpperAcceptPowerWarning based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_SubfeedBreakerUpperAcceptPowerWarning_Type.__name__ = "Integer32"
_SubfeedBreakerUpperAcceptPowerWarning_Object = MibTableColumn
subfeedBreakerUpperAcceptPowerWarning = _SubfeedBreakerUpperAcceptPowerWarning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 4),
    _SubfeedBreakerUpperAcceptPowerWarning_Type()
)
subfeedBreakerUpperAcceptPowerWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    subfeedBreakerUpperAcceptPowerWarning.setStatus("mandatory")


class _SubfeedBreakerUpperAcceptPowerCritical_Type(Integer32):
    """Custom type subfeedBreakerUpperAcceptPowerCritical based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 125),
    )


_SubfeedBreakerUpperAcceptPowerCritical_Type.__name__ = "Integer32"
_SubfeedBreakerUpperAcceptPowerCritical_Object = MibTableColumn
subfeedBreakerUpperAcceptPowerCritical = _SubfeedBreakerUpperAcceptPowerCritical_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 1, 9, 1, 5),
    _SubfeedBreakerUpperAcceptPowerCritical_Type()
)
subfeedBreakerUpperAcceptPowerCritical.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    subfeedBreakerUpperAcceptPowerCritical.setStatus("mandatory")
_UpsDiagMCCBBox_ObjectIdentity = ObjectIdentity
upsDiagMCCBBox = _UpsDiagMCCBBox_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 2)
)


class _UpsDiagMCCBBoxStatus_Type(Integer32):
    """Custom type upsDiagMCCBBoxStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 4),
          ("notInstalled", 2),
          ("opened", 3),
          ("unknown", 1))
    )


_UpsDiagMCCBBoxStatus_Type.__name__ = "Integer32"
_UpsDiagMCCBBoxStatus_Object = MibScalar
upsDiagMCCBBoxStatus = _UpsDiagMCCBBoxStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 2, 1),
    _UpsDiagMCCBBoxStatus_Type()
)
upsDiagMCCBBoxStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagMCCBBoxStatus.setStatus("mandatory")
_UpsDiagTransformer_ObjectIdentity = ObjectIdentity
upsDiagTransformer = _UpsDiagTransformer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 3)
)


class _UpsDiagTransformerStatus_Type(Integer32):
    """Custom type upsDiagTransformerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("closed", 8),
          ("fail", 4),
          ("lostComm", 5),
          ("notInstalled", 2),
          ("ok", 3),
          ("opened", 7),
          ("overtemp", 6),
          ("unknown", 1))
    )


_UpsDiagTransformerStatus_Type.__name__ = "Integer32"
_UpsDiagTransformerStatus_Object = MibScalar
upsDiagTransformerStatus = _UpsDiagTransformerStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 5, 3, 1),
    _UpsDiagTransformerStatus_Type()
)
upsDiagTransformerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagTransformerStatus.setStatus("mandatory")
_UpsDiagnosticComBus_ObjectIdentity = ObjectIdentity
upsDiagnosticComBus = _UpsDiagnosticComBus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6)
)


class _UpsDiagComBusInternalMIMStatus_Type(Integer32):
    """Custom type upsDiagComBusInternalMIMStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 4),
          ("notInstalled", 2),
          ("ok", 3),
          ("rxFailure", 5),
          ("txFailure", 6),
          ("unknown", 1))
    )


_UpsDiagComBusInternalMIMStatus_Type.__name__ = "Integer32"
_UpsDiagComBusInternalMIMStatus_Object = MibScalar
upsDiagComBusInternalMIMStatus = _UpsDiagComBusInternalMIMStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 1),
    _UpsDiagComBusInternalMIMStatus_Type()
)
upsDiagComBusInternalMIMStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagComBusInternalMIMStatus.setStatus("mandatory")


class _UpsDiagComBusInternalRIMStatus_Type(Integer32):
    """Custom type upsDiagComBusInternalRIMStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 4),
          ("notInstalled", 2),
          ("ok", 3),
          ("rxFailure", 5),
          ("txFailure", 6),
          ("unknown", 1))
    )


_UpsDiagComBusInternalRIMStatus_Type.__name__ = "Integer32"
_UpsDiagComBusInternalRIMStatus_Object = MibScalar
upsDiagComBusInternalRIMStatus = _UpsDiagComBusInternalRIMStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 2),
    _UpsDiagComBusInternalRIMStatus_Type()
)
upsDiagComBusInternalRIMStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagComBusInternalRIMStatus.setStatus("mandatory")


class _UpsDiagComBusMIMtoRIMStatus_Type(Integer32):
    """Custom type upsDiagComBusMIMtoRIMStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 4),
          ("notInstalled", 2),
          ("ok", 3),
          ("rxFailure", 5),
          ("txFailure", 6),
          ("unknown", 1))
    )


_UpsDiagComBusMIMtoRIMStatus_Type.__name__ = "Integer32"
_UpsDiagComBusMIMtoRIMStatus_Object = MibScalar
upsDiagComBusMIMtoRIMStatus = _UpsDiagComBusMIMtoRIMStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 3),
    _UpsDiagComBusMIMtoRIMStatus_Type()
)
upsDiagComBusMIMtoRIMStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagComBusMIMtoRIMStatus.setStatus("mandatory")


class _UpsDiagComBusExternalMIMStatus_Type(Integer32):
    """Custom type upsDiagComBusExternalMIMStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 4),
          ("notInstalled", 2),
          ("ok", 3),
          ("rxFailure", 5),
          ("txFailure", 6),
          ("unknown", 1))
    )


_UpsDiagComBusExternalMIMStatus_Type.__name__ = "Integer32"
_UpsDiagComBusExternalMIMStatus_Object = MibScalar
upsDiagComBusExternalMIMStatus = _UpsDiagComBusExternalMIMStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 4),
    _UpsDiagComBusExternalMIMStatus_Type()
)
upsDiagComBusExternalMIMStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagComBusExternalMIMStatus.setStatus("mandatory")


class _UpsDiagComBusExternalRIMStatus_Type(Integer32):
    """Custom type upsDiagComBusExternalRIMStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("lostComm", 4),
          ("notInstalled", 2),
          ("ok", 3),
          ("rxFailure", 5),
          ("txFailure", 6),
          ("unknown", 1))
    )


_UpsDiagComBusExternalRIMStatus_Type.__name__ = "Integer32"
_UpsDiagComBusExternalRIMStatus_Object = MibScalar
upsDiagComBusExternalRIMStatus = _UpsDiagComBusExternalRIMStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 13, 6, 5),
    _UpsDiagComBusExternalRIMStatus_Type()
)
upsDiagComBusExternalRIMStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsDiagComBusExternalRIMStatus.setStatus("mandatory")
_UpsParallelSystem_ObjectIdentity = ObjectIdentity
upsParallelSystem = _UpsParallelSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14)
)
_UpsParallelSysLocalAddress_Type = Integer32
_UpsParallelSysLocalAddress_Object = MibScalar
upsParallelSysLocalAddress = _UpsParallelSysLocalAddress_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 1),
    _UpsParallelSysLocalAddress_Type()
)
upsParallelSysLocalAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsParallelSysLocalAddress.setStatus("mandatory")
_UpsParallelSysRemoteAddress_Type = Integer32
_UpsParallelSysRemoteAddress_Object = MibScalar
upsParallelSysRemoteAddress = _UpsParallelSysRemoteAddress_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 2),
    _UpsParallelSysRemoteAddress_Type()
)
upsParallelSysRemoteAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsParallelSysRemoteAddress.setStatus("mandatory")


class _UpsParallelSysRedundancy_Type(Integer32):
    """Custom type upsParallelSysRedundancy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("nplus0", 1),
          ("nplus1", 2),
          ("nplus2", 3),
          ("nplus3", 4),
          ("nplus4", 5),
          ("nplus5", 6))
    )


_UpsParallelSysRedundancy_Type.__name__ = "Integer32"
_UpsParallelSysRedundancy_Object = MibScalar
upsParallelSysRedundancy = _UpsParallelSysRedundancy_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 3),
    _UpsParallelSysRedundancy_Type()
)
upsParallelSysRedundancy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsParallelSysRedundancy.setStatus("mandatory")
_UpsParallelInputMaximumCurrent_Type = Integer32
_UpsParallelInputMaximumCurrent_Object = MibScalar
upsParallelInputMaximumCurrent = _UpsParallelInputMaximumCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 4),
    _UpsParallelInputMaximumCurrent_Type()
)
upsParallelInputMaximumCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelInputMaximumCurrent.setStatus("mandatory")
_UpsParallelTotalOutputPower_Type = Integer32
_UpsParallelTotalOutputPower_Object = MibScalar
upsParallelTotalOutputPower = _UpsParallelTotalOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 5),
    _UpsParallelTotalOutputPower_Type()
)
upsParallelTotalOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelTotalOutputPower.setStatus("mandatory")
_UpsParallelTotalOutputApparentPower_Type = Integer32
_UpsParallelTotalOutputApparentPower_Object = MibScalar
upsParallelTotalOutputApparentPower = _UpsParallelTotalOutputApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 6),
    _UpsParallelTotalOutputApparentPower_Type()
)
upsParallelTotalOutputApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelTotalOutputApparentPower.setStatus("mandatory")
_UpsParallelInputPhaseTable_Object = MibTable
upsParallelInputPhaseTable = _UpsParallelInputPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7)
)
if mibBuilder.loadTexts:
    upsParallelInputPhaseTable.setStatus("mandatory")
_UpsParallelInputPhaseEntry_Object = MibTableRow
upsParallelInputPhaseEntry = _UpsParallelInputPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1)
)
upsParallelInputPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsParallelInputPhaseTableIndex"),
    (0, "POWERNET-MIB", "upsParallelInputPhaseIndex"),
)
if mibBuilder.loadTexts:
    upsParallelInputPhaseEntry.setStatus("mandatory")
_UpsParallelInputPhaseTableIndex_Type = Integer32
_UpsParallelInputPhaseTableIndex_Object = MibTableColumn
upsParallelInputPhaseTableIndex = _UpsParallelInputPhaseTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 1),
    _UpsParallelInputPhaseTableIndex_Type()
)
upsParallelInputPhaseTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelInputPhaseTableIndex.setStatus("mandatory")
_UpsParallelInputPhaseIndex_Type = Integer32
_UpsParallelInputPhaseIndex_Object = MibTableColumn
upsParallelInputPhaseIndex = _UpsParallelInputPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 2),
    _UpsParallelInputPhaseIndex_Type()
)
upsParallelInputPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelInputPhaseIndex.setStatus("mandatory")
_UpsParallelInputCurrent_Type = Integer32
_UpsParallelInputCurrent_Object = MibTableColumn
upsParallelInputCurrent = _UpsParallelInputCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 3),
    _UpsParallelInputCurrent_Type()
)
upsParallelInputCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelInputCurrent.setStatus("mandatory")
_UpsParallelInputActivePower_Type = Integer32
_UpsParallelInputActivePower_Object = MibTableColumn
upsParallelInputActivePower = _UpsParallelInputActivePower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 4),
    _UpsParallelInputActivePower_Type()
)
upsParallelInputActivePower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelInputActivePower.setStatus("mandatory")
_UpsParallelInputApparentPower_Type = Integer32
_UpsParallelInputApparentPower_Object = MibTableColumn
upsParallelInputApparentPower = _UpsParallelInputApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 5),
    _UpsParallelInputApparentPower_Type()
)
upsParallelInputApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelInputApparentPower.setStatus("mandatory")
_UpsParallelInputVoltage_Type = Integer32
_UpsParallelInputVoltage_Object = MibTableColumn
upsParallelInputVoltage = _UpsParallelInputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 6),
    _UpsParallelInputVoltage_Type()
)
upsParallelInputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelInputVoltage.setStatus("mandatory")
_UpsParallelInputMaxVoltage_Type = Integer32
_UpsParallelInputMaxVoltage_Object = MibTableColumn
upsParallelInputMaxVoltage = _UpsParallelInputMaxVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 7),
    _UpsParallelInputMaxVoltage_Type()
)
upsParallelInputMaxVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelInputMaxVoltage.setStatus("mandatory")
_UpsParallelInputMaxCurrent_Type = Integer32
_UpsParallelInputMaxCurrent_Object = MibTableColumn
upsParallelInputMaxCurrent = _UpsParallelInputMaxCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 8),
    _UpsParallelInputMaxCurrent_Type()
)
upsParallelInputMaxCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelInputMaxCurrent.setStatus("mandatory")
_UpsParallelInputTotalActivePower_Type = Integer32
_UpsParallelInputTotalActivePower_Object = MibTableColumn
upsParallelInputTotalActivePower = _UpsParallelInputTotalActivePower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 9),
    _UpsParallelInputTotalActivePower_Type()
)
upsParallelInputTotalActivePower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelInputTotalActivePower.setStatus("mandatory")
_UpsParallelInputTotalApparentPower_Type = Integer32
_UpsParallelInputTotalApparentPower_Object = MibTableColumn
upsParallelInputTotalApparentPower = _UpsParallelInputTotalApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 7, 1, 10),
    _UpsParallelInputTotalApparentPower_Type()
)
upsParallelInputTotalApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelInputTotalApparentPower.setStatus("mandatory")
_UpsParallelOutputPhaseTable_Object = MibTable
upsParallelOutputPhaseTable = _UpsParallelOutputPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8)
)
if mibBuilder.loadTexts:
    upsParallelOutputPhaseTable.setStatus("mandatory")
_UpsParallelOutputPhaseEntry_Object = MibTableRow
upsParallelOutputPhaseEntry = _UpsParallelOutputPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1)
)
upsParallelOutputPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsParallelOutputPhaseTableIndex"),
    (0, "POWERNET-MIB", "upsParallelOutputPhaseIndex"),
)
if mibBuilder.loadTexts:
    upsParallelOutputPhaseEntry.setStatus("mandatory")
_UpsParallelOutputPhaseTableIndex_Type = Integer32
_UpsParallelOutputPhaseTableIndex_Object = MibTableColumn
upsParallelOutputPhaseTableIndex = _UpsParallelOutputPhaseTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 1),
    _UpsParallelOutputPhaseTableIndex_Type()
)
upsParallelOutputPhaseTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelOutputPhaseTableIndex.setStatus("mandatory")
_UpsParallelOutputPhaseIndex_Type = Integer32
_UpsParallelOutputPhaseIndex_Object = MibTableColumn
upsParallelOutputPhaseIndex = _UpsParallelOutputPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 2),
    _UpsParallelOutputPhaseIndex_Type()
)
upsParallelOutputPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelOutputPhaseIndex.setStatus("mandatory")
_UpsParallelOutputCurrent_Type = Integer32
_UpsParallelOutputCurrent_Object = MibTableColumn
upsParallelOutputCurrent = _UpsParallelOutputCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 3),
    _UpsParallelOutputCurrent_Type()
)
upsParallelOutputCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelOutputCurrent.setStatus("mandatory")
_UpsParallelOutputLoad_Type = Integer32
_UpsParallelOutputLoad_Object = MibTableColumn
upsParallelOutputLoad = _UpsParallelOutputLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 4),
    _UpsParallelOutputLoad_Type()
)
upsParallelOutputLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelOutputLoad.setStatus("mandatory")
_UpsParallelOutputPercentLoad_Type = Integer32
_UpsParallelOutputPercentLoad_Object = MibTableColumn
upsParallelOutputPercentLoad = _UpsParallelOutputPercentLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 5),
    _UpsParallelOutputPercentLoad_Type()
)
upsParallelOutputPercentLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelOutputPercentLoad.setStatus("mandatory")
_UpsParallelOutputPower_Type = Integer32
_UpsParallelOutputPower_Object = MibTableColumn
upsParallelOutputPower = _UpsParallelOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 8, 1, 6),
    _UpsParallelOutputPower_Type()
)
upsParallelOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelOutputPower.setStatus("mandatory")
_UpsParallelOutputApparentPowerTable_Object = MibTable
upsParallelOutputApparentPowerTable = _UpsParallelOutputApparentPowerTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9)
)
if mibBuilder.loadTexts:
    upsParallelOutputApparentPowerTable.setStatus("mandatory")
_UpsParallelOutputApparentPowerEntry_Object = MibTableRow
upsParallelOutputApparentPowerEntry = _UpsParallelOutputApparentPowerEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9, 1)
)
upsParallelOutputApparentPowerEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsParallelOutputApparentPowerTableIndex"),
)
if mibBuilder.loadTexts:
    upsParallelOutputApparentPowerEntry.setStatus("mandatory")
_UpsParallelOutputApparentPowerTableIndex_Type = Integer32
_UpsParallelOutputApparentPowerTableIndex_Object = MibTableColumn
upsParallelOutputApparentPowerTableIndex = _UpsParallelOutputApparentPowerTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9, 1, 1),
    _UpsParallelOutputApparentPowerTableIndex_Type()
)
upsParallelOutputApparentPowerTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelOutputApparentPowerTableIndex.setStatus("mandatory")
_UpsParallelOutputApparentPower_Type = Integer32
_UpsParallelOutputApparentPower_Object = MibTableColumn
upsParallelOutputApparentPower = _UpsParallelOutputApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 9, 1, 2),
    _UpsParallelOutputApparentPower_Type()
)
upsParallelOutputApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelOutputApparentPower.setStatus("mandatory")
_UpsParallelDiagSubSysBreakerTable_Object = MibTable
upsParallelDiagSubSysBreakerTable = _UpsParallelDiagSubSysBreakerTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10)
)
if mibBuilder.loadTexts:
    upsParallelDiagSubSysBreakerTable.setStatus("mandatory")
_UpsParallelDiagSubSysBreakerEntry_Object = MibTableRow
upsParallelDiagSubSysBreakerEntry = _UpsParallelDiagSubSysBreakerEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1)
)
upsParallelDiagSubSysBreakerEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsParallelDiagSubSysBreakerFrameIndex"),
    (0, "POWERNET-MIB", "upsParallelDiagSubSysBreakerIndex"),
)
if mibBuilder.loadTexts:
    upsParallelDiagSubSysBreakerEntry.setStatus("mandatory")
_UpsParallelDiagSubSysBreakerFrameIndex_Type = Integer32
_UpsParallelDiagSubSysBreakerFrameIndex_Object = MibTableColumn
upsParallelDiagSubSysBreakerFrameIndex = _UpsParallelDiagSubSysBreakerFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 1),
    _UpsParallelDiagSubSysBreakerFrameIndex_Type()
)
upsParallelDiagSubSysBreakerFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelDiagSubSysBreakerFrameIndex.setStatus("mandatory")
_UpsParallelDiagSubSysBreakerIndex_Type = Integer32
_UpsParallelDiagSubSysBreakerIndex_Object = MibTableColumn
upsParallelDiagSubSysBreakerIndex = _UpsParallelDiagSubSysBreakerIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 2),
    _UpsParallelDiagSubSysBreakerIndex_Type()
)
upsParallelDiagSubSysBreakerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelDiagSubSysBreakerIndex.setStatus("mandatory")


class _UpsParallelDiagSubSysBreakerStatus_Type(Integer32):
    """Custom type upsParallelDiagSubSysBreakerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 4),
          ("notInstalled", 2),
          ("opened", 3),
          ("unknown", 1))
    )


_UpsParallelDiagSubSysBreakerStatus_Type.__name__ = "Integer32"
_UpsParallelDiagSubSysBreakerStatus_Object = MibTableColumn
upsParallelDiagSubSysBreakerStatus = _UpsParallelDiagSubSysBreakerStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 3),
    _UpsParallelDiagSubSysBreakerStatus_Type()
)
upsParallelDiagSubSysBreakerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelDiagSubSysBreakerStatus.setStatus("mandatory")
_UpsParallelDiagSubSysBreakerName_Type = DisplayString
_UpsParallelDiagSubSysBreakerName_Object = MibTableColumn
upsParallelDiagSubSysBreakerName = _UpsParallelDiagSubSysBreakerName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 10, 1, 4),
    _UpsParallelDiagSubSysBreakerName_Type()
)
upsParallelDiagSubSysBreakerName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelDiagSubSysBreakerName.setStatus("mandatory")
_UpsParallelOutputTotalPercentLoad_Type = Integer32
_UpsParallelOutputTotalPercentLoad_Object = MibScalar
upsParallelOutputTotalPercentLoad = _UpsParallelOutputTotalPercentLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 14, 11),
    _UpsParallelOutputTotalPercentLoad_Type()
)
upsParallelOutputTotalPercentLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsParallelOutputTotalPercentLoad.setStatus("mandatory")
_UpsPhysicalLayout_ObjectIdentity = ObjectIdentity
upsPhysicalLayout = _UpsPhysicalLayout_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15)
)
_UpsIOFrameLayoutPositionID_Type = Integer32
_UpsIOFrameLayoutPositionID_Object = MibScalar
upsIOFrameLayoutPositionID = _UpsIOFrameLayoutPositionID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 1),
    _UpsIOFrameLayoutPositionID_Type()
)
upsIOFrameLayoutPositionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsIOFrameLayoutPositionID.setStatus("mandatory")
_UpsBottomFeedFrameLayoutPositionID_Type = Integer32
_UpsBottomFeedFrameLayoutPositionID_Object = MibScalar
upsBottomFeedFrameLayoutPositionID = _UpsBottomFeedFrameLayoutPositionID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 2),
    _UpsBottomFeedFrameLayoutPositionID_Type()
)
upsBottomFeedFrameLayoutPositionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsBottomFeedFrameLayoutPositionID.setStatus("mandatory")
_UpsSwitchGearLayoutPositionID_Type = Integer32
_UpsSwitchGearLayoutPositionID_Object = MibScalar
upsSwitchGearLayoutPositionID = _UpsSwitchGearLayoutPositionID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 3),
    _UpsSwitchGearLayoutPositionID_Type()
)
upsSwitchGearLayoutPositionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsSwitchGearLayoutPositionID.setStatus("mandatory")
_UpsBatteryFrameLayoutTableSize_Type = Integer32
_UpsBatteryFrameLayoutTableSize_Object = MibScalar
upsBatteryFrameLayoutTableSize = _UpsBatteryFrameLayoutTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 4),
    _UpsBatteryFrameLayoutTableSize_Type()
)
upsBatteryFrameLayoutTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsBatteryFrameLayoutTableSize.setStatus("mandatory")
_UpsBatteryFrameLayoutTable_Object = MibTable
upsBatteryFrameLayoutTable = _UpsBatteryFrameLayoutTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5)
)
if mibBuilder.loadTexts:
    upsBatteryFrameLayoutTable.setStatus("mandatory")
_UpsBatteryFrameLayoutEntry_Object = MibTableRow
upsBatteryFrameLayoutEntry = _UpsBatteryFrameLayoutEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5, 1)
)
upsBatteryFrameLayoutEntry.setIndexNames(
    (0, "POWERNET-MIB", "batteryFrameIndex"),
)
if mibBuilder.loadTexts:
    upsBatteryFrameLayoutEntry.setStatus("mandatory")
_BatteryFrameIndex_Type = Integer32
_BatteryFrameIndex_Object = MibTableColumn
batteryFrameIndex = _BatteryFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5, 1, 1),
    _BatteryFrameIndex_Type()
)
batteryFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    batteryFrameIndex.setStatus("mandatory")
_BatteryFramePositionID_Type = Integer32
_BatteryFramePositionID_Object = MibTableColumn
batteryFramePositionID = _BatteryFramePositionID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 5, 1, 2),
    _BatteryFramePositionID_Type()
)
batteryFramePositionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    batteryFramePositionID.setStatus("mandatory")
_UpsSideCarFrameLayoutTableSize_Type = Integer32
_UpsSideCarFrameLayoutTableSize_Object = MibScalar
upsSideCarFrameLayoutTableSize = _UpsSideCarFrameLayoutTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 6),
    _UpsSideCarFrameLayoutTableSize_Type()
)
upsSideCarFrameLayoutTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsSideCarFrameLayoutTableSize.setStatus("mandatory")
_UpsSideCarFrameLayoutTable_Object = MibTable
upsSideCarFrameLayoutTable = _UpsSideCarFrameLayoutTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7)
)
if mibBuilder.loadTexts:
    upsSideCarFrameLayoutTable.setStatus("mandatory")
_UpsSideCarFrameLayoutEntry_Object = MibTableRow
upsSideCarFrameLayoutEntry = _UpsSideCarFrameLayoutEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7, 1)
)
upsSideCarFrameLayoutEntry.setIndexNames(
    (0, "POWERNET-MIB", "sideCarFrameIndex"),
)
if mibBuilder.loadTexts:
    upsSideCarFrameLayoutEntry.setStatus("mandatory")
_SideCarFrameIndex_Type = Integer32
_SideCarFrameIndex_Object = MibTableColumn
sideCarFrameIndex = _SideCarFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7, 1, 1),
    _SideCarFrameIndex_Type()
)
sideCarFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sideCarFrameIndex.setStatus("mandatory")
_SideCarFramePositionID_Type = Integer32
_SideCarFramePositionID_Object = MibTableColumn
sideCarFramePositionID = _SideCarFramePositionID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 7, 1, 2),
    _SideCarFramePositionID_Type()
)
sideCarFramePositionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sideCarFramePositionID.setStatus("mandatory")
_UpsPowerFrameLayoutTableSize_Type = Integer32
_UpsPowerFrameLayoutTableSize_Object = MibScalar
upsPowerFrameLayoutTableSize = _UpsPowerFrameLayoutTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 8),
    _UpsPowerFrameLayoutTableSize_Type()
)
upsPowerFrameLayoutTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsPowerFrameLayoutTableSize.setStatus("mandatory")
_UpsPowerFrameLayoutTable_Object = MibTable
upsPowerFrameLayoutTable = _UpsPowerFrameLayoutTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9)
)
if mibBuilder.loadTexts:
    upsPowerFrameLayoutTable.setStatus("mandatory")
_UpsPowerFrameLayoutEntry_Object = MibTableRow
upsPowerFrameLayoutEntry = _UpsPowerFrameLayoutEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9, 1)
)
upsPowerFrameLayoutEntry.setIndexNames(
    (0, "POWERNET-MIB", "powerFrameIndex"),
)
if mibBuilder.loadTexts:
    upsPowerFrameLayoutEntry.setStatus("mandatory")
_PowerFrameIndex_Type = Integer32
_PowerFrameIndex_Object = MibTableColumn
powerFrameIndex = _PowerFrameIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9, 1, 1),
    _PowerFrameIndex_Type()
)
powerFrameIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerFrameIndex.setStatus("mandatory")
_PowerFramePositionID_Type = Integer32
_PowerFramePositionID_Object = MibTableColumn
powerFramePositionID = _PowerFramePositionID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 15, 9, 1, 2),
    _PowerFramePositionID_Type()
)
powerFramePositionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerFramePositionID.setStatus("mandatory")
_UpsIntegratedATS_ObjectIdentity = ObjectIdentity
upsIntegratedATS = _UpsIntegratedATS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16)
)


class _UpsIntegratedATSSelectedSource_Type(Integer32):
    """Custom type upsIntegratedATSSelectedSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noSourceSelected", 1),
          ("sourceA", 3),
          ("sourceB", 4),
          ("unknown", 2))
    )


_UpsIntegratedATSSelectedSource_Type.__name__ = "Integer32"
_UpsIntegratedATSSelectedSource_Object = MibScalar
upsIntegratedATSSelectedSource = _UpsIntegratedATSSelectedSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 1),
    _UpsIntegratedATSSelectedSource_Type()
)
upsIntegratedATSSelectedSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsIntegratedATSSelectedSource.setStatus("mandatory")


class _UpsIntegratedATSPreferredSource_Type(Integer32):
    """Custom type upsIntegratedATSPreferredSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("upsIntegratedATSNoSourcePreference", 1),
          ("upsIntegratedATSPreferSourceA", 2),
          ("upsIntegratedATSPreferSourceB", 3))
    )


_UpsIntegratedATSPreferredSource_Type.__name__ = "Integer32"
_UpsIntegratedATSPreferredSource_Object = MibScalar
upsIntegratedATSPreferredSource = _UpsIntegratedATSPreferredSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 2),
    _UpsIntegratedATSPreferredSource_Type()
)
upsIntegratedATSPreferredSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsIntegratedATSPreferredSource.setStatus("mandatory")
_UpsIntegratedATSUpsReturnStaggering_Type = Integer32
_UpsIntegratedATSUpsReturnStaggering_Object = MibScalar
upsIntegratedATSUpsReturnStaggering = _UpsIntegratedATSUpsReturnStaggering_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 3),
    _UpsIntegratedATSUpsReturnStaggering_Type()
)
upsIntegratedATSUpsReturnStaggering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsIntegratedATSUpsReturnStaggering.setStatus("mandatory")
_UpsIntegratedATSSourceTableSize_Type = Integer32
_UpsIntegratedATSSourceTableSize_Object = MibScalar
upsIntegratedATSSourceTableSize = _UpsIntegratedATSSourceTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 4),
    _UpsIntegratedATSSourceTableSize_Type()
)
upsIntegratedATSSourceTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsIntegratedATSSourceTableSize.setStatus("mandatory")
_UpsIntegratedATSSourceTable_Object = MibTable
upsIntegratedATSSourceTable = _UpsIntegratedATSSourceTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5)
)
if mibBuilder.loadTexts:
    upsIntegratedATSSourceTable.setStatus("mandatory")
_UpsIntegratedATSSourceEntry_Object = MibTableRow
upsIntegratedATSSourceEntry = _UpsIntegratedATSSourceEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1)
)
upsIntegratedATSSourceEntry.setIndexNames(
    (0, "POWERNET-MIB", "upsIntegratedATSSourceIndex"),
)
if mibBuilder.loadTexts:
    upsIntegratedATSSourceEntry.setStatus("mandatory")
_UpsIntegratedATSSourceIndex_Type = Integer32
_UpsIntegratedATSSourceIndex_Object = MibTableColumn
upsIntegratedATSSourceIndex = _UpsIntegratedATSSourceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 1),
    _UpsIntegratedATSSourceIndex_Type()
)
upsIntegratedATSSourceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsIntegratedATSSourceIndex.setStatus("mandatory")
_UpsIntegratedATSSourceName_Type = DisplayString
_UpsIntegratedATSSourceName_Object = MibTableColumn
upsIntegratedATSSourceName = _UpsIntegratedATSSourceName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 2),
    _UpsIntegratedATSSourceName_Type()
)
upsIntegratedATSSourceName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsIntegratedATSSourceName.setStatus("mandatory")


class _UpsIntegratedATSSourceStatus_Type(Integer32):
    """Custom type upsIntegratedATSSourceStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("upsIntegratedATSSourceBad", 2),
          ("upsIntegratedATSSourceGood", 1),
          ("upsIntegratedATSSourceUnknown", 3))
    )


_UpsIntegratedATSSourceStatus_Type.__name__ = "Integer32"
_UpsIntegratedATSSourceStatus_Object = MibTableColumn
upsIntegratedATSSourceStatus = _UpsIntegratedATSSourceStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 3),
    _UpsIntegratedATSSourceStatus_Type()
)
upsIntegratedATSSourceStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsIntegratedATSSourceStatus.setStatus("mandatory")
_UpsIntegratedATSLineFailDelay_Type = Integer32
_UpsIntegratedATSLineFailDelay_Object = MibTableColumn
upsIntegratedATSLineFailDelay = _UpsIntegratedATSLineFailDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 4),
    _UpsIntegratedATSLineFailDelay_Type()
)
upsIntegratedATSLineFailDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsIntegratedATSLineFailDelay.setStatus("mandatory")
_UpsIntegratedATSLineStabilityDelay_Type = Integer32
_UpsIntegratedATSLineStabilityDelay_Object = MibTableColumn
upsIntegratedATSLineStabilityDelay = _UpsIntegratedATSLineStabilityDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 1, 16, 5, 1, 5),
    _UpsIntegratedATSLineStabilityDelay_Type()
)
upsIntegratedATSLineStabilityDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsIntegratedATSLineStabilityDelay.setStatus("mandatory")
_MeasureUps_ObjectIdentity = ObjectIdentity
measureUps = _MeasureUps_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2)
)
_MUpsEnviron_ObjectIdentity = ObjectIdentity
mUpsEnviron = _MUpsEnviron_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1)
)
_MUpsEnvironAmbientTemperature_Type = Gauge32
_MUpsEnvironAmbientTemperature_Object = MibScalar
mUpsEnvironAmbientTemperature = _MUpsEnvironAmbientTemperature_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 1),
    _MUpsEnvironAmbientTemperature_Type()
)
mUpsEnvironAmbientTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mUpsEnvironAmbientTemperature.setStatus("mandatory")
_MUpsEnvironRelativeHumidity_Type = Gauge32
_MUpsEnvironRelativeHumidity_Object = MibScalar
mUpsEnvironRelativeHumidity = _MUpsEnvironRelativeHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 2),
    _MUpsEnvironRelativeHumidity_Type()
)
mUpsEnvironRelativeHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mUpsEnvironRelativeHumidity.setStatus("mandatory")
_MUpsEnvironAmbientTemperature2_Type = Gauge32
_MUpsEnvironAmbientTemperature2_Object = MibScalar
mUpsEnvironAmbientTemperature2 = _MUpsEnvironAmbientTemperature2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 3),
    _MUpsEnvironAmbientTemperature2_Type()
)
mUpsEnvironAmbientTemperature2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mUpsEnvironAmbientTemperature2.setStatus("mandatory")
_MUpsEnvironRelativeHumidity2_Type = Gauge32
_MUpsEnvironRelativeHumidity2_Object = MibScalar
mUpsEnvironRelativeHumidity2 = _MUpsEnvironRelativeHumidity2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 1, 4),
    _MUpsEnvironRelativeHumidity2_Type()
)
mUpsEnvironRelativeHumidity2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mUpsEnvironRelativeHumidity2.setStatus("mandatory")
_MUpsContact_ObjectIdentity = ObjectIdentity
mUpsContact = _MUpsContact_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2)
)
_MUpsContactNumContacts_Type = Integer32
_MUpsContactNumContacts_Object = MibScalar
mUpsContactNumContacts = _MUpsContactNumContacts_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 1),
    _MUpsContactNumContacts_Type()
)
mUpsContactNumContacts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mUpsContactNumContacts.setStatus("mandatory")
_MUpsContactTable_Object = MibTable
mUpsContactTable = _MUpsContactTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2)
)
if mibBuilder.loadTexts:
    mUpsContactTable.setStatus("mandatory")
_MUpsContactEntry_Object = MibTableRow
mUpsContactEntry = _MUpsContactEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1)
)
mUpsContactEntry.setIndexNames(
    (0, "POWERNET-MIB", "contactNumber"),
)
if mibBuilder.loadTexts:
    mUpsContactEntry.setStatus("mandatory")
_ContactNumber_Type = Integer32
_ContactNumber_Object = MibTableColumn
contactNumber = _ContactNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 1),
    _ContactNumber_Type()
)
contactNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    contactNumber.setStatus("mandatory")


class _NormalState_Type(Integer32):
    """Custom type normalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("closed", 3),
          ("open", 2),
          ("unknown", 1))
    )


_NormalState_Type.__name__ = "Integer32"
_NormalState_Object = MibTableColumn
normalState = _NormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 2),
    _NormalState_Type()
)
normalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    normalState.setStatus("mandatory")
_Description_Type = DisplayString
_Description_Object = MibTableColumn
description = _Description_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 3),
    _Description_Type()
)
description.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    description.setStatus("mandatory")


class _MonitoringStatus_Type(Integer32):
    """Custom type monitoringStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("enabled", 2),
          ("unknown", 1))
    )


_MonitoringStatus_Type.__name__ = "Integer32"
_MonitoringStatus_Object = MibTableColumn
monitoringStatus = _MonitoringStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 4),
    _MonitoringStatus_Type()
)
monitoringStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    monitoringStatus.setStatus("mandatory")


class _CurrentStatus_Type(Integer32):
    """Custom type currentStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fault", 3),
          ("noFault", 2),
          ("unknown", 1))
    )


_CurrentStatus_Type.__name__ = "Integer32"
_CurrentStatus_Object = MibTableColumn
currentStatus = _CurrentStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 2, 2, 2, 1, 5),
    _CurrentStatus_Type()
)
currentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    currentStatus.setStatus("mandatory")
_MiniSNMPadapter_ObjectIdentity = ObjectIdentity
miniSNMPadapter = _MiniSNMPadapter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 3)
)
_SerialPort_ObjectIdentity = ObjectIdentity
serialPort = _SerialPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1)
)
_SerialPort1_ObjectIdentity = ObjectIdentity
serialPort1 = _SerialPort1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 1)
)
_SerialPort2_ObjectIdentity = ObjectIdentity
serialPort2 = _SerialPort2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2)
)
_SerialPort2Config_ObjectIdentity = ObjectIdentity
serialPort2Config = _SerialPort2Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 1)
)


class _SerialPort2Mode_Type(Integer32):
    """Custom type serialPort2Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("localConsole", 1),
          ("passthrough", 2))
    )


_SerialPort2Mode_Type.__name__ = "Integer32"
_SerialPort2Mode_Object = MibScalar
serialPort2Mode = _SerialPort2Mode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 1, 1),
    _SerialPort2Mode_Type()
)
serialPort2Mode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serialPort2Mode.setStatus("obsolete")
_SerialPort2Control_ObjectIdentity = ObjectIdentity
serialPort2Control = _SerialPort2Control_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 2)
)


class _SetPulseOnTXD_Type(Integer32):
    """Custom type setPulseOnTXD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noSetPulseOnTXD", 1),
          ("setPulseOnTXD", 2),
          ("setTXDHigh", 4),
          ("setTXDLow", 3))
    )


_SetPulseOnTXD_Type.__name__ = "Integer32"
_SetPulseOnTXD_Object = MibScalar
setPulseOnTXD = _SetPulseOnTXD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 3, 1, 2, 2, 1),
    _SetPulseOnTXD_Type()
)
setPulseOnTXD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    setPulseOnTXD.setStatus("obsolete")
_Masterswitch_ObjectIdentity = ObjectIdentity
masterswitch = _Masterswitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4)
)
_SPDUIdent_ObjectIdentity = ObjectIdentity
sPDUIdent = _SPDUIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1)
)
_SPDUIdentHardwareRev_Type = DisplayString
_SPDUIdentHardwareRev_Object = MibScalar
sPDUIdentHardwareRev = _SPDUIdentHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 1),
    _SPDUIdentHardwareRev_Type()
)
sPDUIdentHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentHardwareRev.setStatus("mandatory")
_SPDUIdentFirmwareRev_Type = DisplayString
_SPDUIdentFirmwareRev_Object = MibScalar
sPDUIdentFirmwareRev = _SPDUIdentFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 2),
    _SPDUIdentFirmwareRev_Type()
)
sPDUIdentFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentFirmwareRev.setStatus("mandatory")
_SPDUIdentDateOfManufacture_Type = DisplayString
_SPDUIdentDateOfManufacture_Object = MibScalar
sPDUIdentDateOfManufacture = _SPDUIdentDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 3),
    _SPDUIdentDateOfManufacture_Type()
)
sPDUIdentDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentDateOfManufacture.setStatus("mandatory")
_SPDUIdentModelNumber_Type = DisplayString
_SPDUIdentModelNumber_Object = MibScalar
sPDUIdentModelNumber = _SPDUIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 4),
    _SPDUIdentModelNumber_Type()
)
sPDUIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentModelNumber.setStatus("mandatory")
_SPDUIdentSerialNumber_Type = DisplayString
_SPDUIdentSerialNumber_Object = MibScalar
sPDUIdentSerialNumber = _SPDUIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 1, 5),
    _SPDUIdentSerialNumber_Type()
)
sPDUIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentSerialNumber.setStatus("mandatory")
_SPDUMasterControl_ObjectIdentity = ObjectIdentity
sPDUMasterControl = _SPDUMasterControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2)
)


class _SPDUMasterControlSwitch_Type(Integer32):
    """Custom type sPDUMasterControlSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("noCommand", 6),
          ("rebootAllNow", 4),
          ("rebootAllSequence", 5),
          ("turnAllOffNow", 3),
          ("turnAllOffSequence", 7),
          ("turnAllOnNow", 1),
          ("turnAllOnSequence", 2))
    )


_SPDUMasterControlSwitch_Type.__name__ = "Integer32"
_SPDUMasterControlSwitch_Object = MibScalar
sPDUMasterControlSwitch = _SPDUMasterControlSwitch_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 1),
    _SPDUMasterControlSwitch_Type()
)
sPDUMasterControlSwitch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterControlSwitch.setStatus("mandatory")
_SPDUMasterState_Type = DisplayString
_SPDUMasterState_Object = MibScalar
sPDUMasterState = _SPDUMasterState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 2),
    _SPDUMasterState_Type()
)
sPDUMasterState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterState.setStatus("mandatory")
_SPDUMasterPending_Type = DisplayString
_SPDUMasterPending_Object = MibScalar
sPDUMasterPending = _SPDUMasterPending_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 2, 3),
    _SPDUMasterPending_Type()
)
sPDUMasterPending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterPending.setStatus("mandatory")
_SPDUMasterConfig_ObjectIdentity = ObjectIdentity
sPDUMasterConfig = _SPDUMasterConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3)
)
_SPDUMasterConfigPowerOn_Type = Integer32
_SPDUMasterConfigPowerOn_Object = MibScalar
sPDUMasterConfigPowerOn = _SPDUMasterConfigPowerOn_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 1),
    _SPDUMasterConfigPowerOn_Type()
)
sPDUMasterConfigPowerOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterConfigPowerOn.setStatus("mandatory")
_SPDUMasterConfigReboot_Type = Integer32
_SPDUMasterConfigReboot_Object = MibScalar
sPDUMasterConfigReboot = _SPDUMasterConfigReboot_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 2),
    _SPDUMasterConfigReboot_Type()
)
sPDUMasterConfigReboot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterConfigReboot.setStatus("mandatory")
_SPDUMasterConfigPDUName_Type = DisplayString
_SPDUMasterConfigPDUName_Object = MibScalar
sPDUMasterConfigPDUName = _SPDUMasterConfigPDUName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 3, 3),
    _SPDUMasterConfigPDUName_Type()
)
sPDUMasterConfigPDUName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterConfigPDUName.setStatus("mandatory")
_SPDUOutletControl_ObjectIdentity = ObjectIdentity
sPDUOutletControl = _SPDUOutletControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4)
)
_SPDUOutletControlTableSize_Type = Integer32
_SPDUOutletControlTableSize_Object = MibScalar
sPDUOutletControlTableSize = _SPDUOutletControlTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 1),
    _SPDUOutletControlTableSize_Type()
)
sPDUOutletControlTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletControlTableSize.setStatus("mandatory")
_SPDUOutletControlTable_Object = MibTable
sPDUOutletControlTable = _SPDUOutletControlTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2)
)
if mibBuilder.loadTexts:
    sPDUOutletControlTable.setStatus("mandatory")
_SPDUOutletControlEntry_Object = MibTableRow
sPDUOutletControlEntry = _SPDUOutletControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1)
)
sPDUOutletControlEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUOutletControlIndex"),
)
if mibBuilder.loadTexts:
    sPDUOutletControlEntry.setStatus("mandatory")
_SPDUOutletControlIndex_Type = Integer32
_SPDUOutletControlIndex_Object = MibTableColumn
sPDUOutletControlIndex = _SPDUOutletControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 1),
    _SPDUOutletControlIndex_Type()
)
sPDUOutletControlIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletControlIndex.setStatus("mandatory")


class _SPDUOutletPending_Type(Integer32):
    """Custom type sPDUOutletPending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("commandPending", 1),
          ("commandPendingUnknown", 3),
          ("noCommandPending", 2))
    )


_SPDUOutletPending_Type.__name__ = "Integer32"
_SPDUOutletPending_Object = MibTableColumn
sPDUOutletPending = _SPDUOutletPending_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 2),
    _SPDUOutletPending_Type()
)
sPDUOutletPending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletPending.setStatus("mandatory")


class _SPDUOutletCtl_Type(Integer32):
    """Custom type sPDUOutletCtl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("outletOff", 2),
          ("outletOffWithDelay", 6),
          ("outletOn", 1),
          ("outletOnWithDelay", 5),
          ("outletReboot", 3),
          ("outletRebootWithDelay", 7),
          ("outletUnknown", 4))
    )


_SPDUOutletCtl_Type.__name__ = "Integer32"
_SPDUOutletCtl_Object = MibTableColumn
sPDUOutletCtl = _SPDUOutletCtl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 3),
    _SPDUOutletCtl_Type()
)
sPDUOutletCtl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletCtl.setStatus("mandatory")
_SPDUOutletCtlName_Type = DisplayString
_SPDUOutletCtlName_Object = MibTableColumn
sPDUOutletCtlName = _SPDUOutletCtlName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 4, 2, 1, 4),
    _SPDUOutletCtlName_Type()
)
sPDUOutletCtlName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletCtlName.setStatus("mandatory")
_SPDUOutletConfig_ObjectIdentity = ObjectIdentity
sPDUOutletConfig = _SPDUOutletConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5)
)
_SPDUOutletConfigTableSize_Type = Integer32
_SPDUOutletConfigTableSize_Object = MibScalar
sPDUOutletConfigTableSize = _SPDUOutletConfigTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 1),
    _SPDUOutletConfigTableSize_Type()
)
sPDUOutletConfigTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigTableSize.setStatus("mandatory")
_SPDUOutletConfigTable_Object = MibTable
sPDUOutletConfigTable = _SPDUOutletConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2)
)
if mibBuilder.loadTexts:
    sPDUOutletConfigTable.setStatus("mandatory")
_SPDUOutletConfigEntry_Object = MibTableRow
sPDUOutletConfigEntry = _SPDUOutletConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1)
)
sPDUOutletConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUOutletConfigIndex"),
)
if mibBuilder.loadTexts:
    sPDUOutletConfigEntry.setStatus("mandatory")
_SPDUOutletConfigIndex_Type = Integer32
_SPDUOutletConfigIndex_Object = MibTableColumn
sPDUOutletConfigIndex = _SPDUOutletConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 1),
    _SPDUOutletConfigIndex_Type()
)
sPDUOutletConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigIndex.setStatus("mandatory")
_SPDUOutletPowerOnTime_Type = Integer32
_SPDUOutletPowerOnTime_Object = MibTableColumn
sPDUOutletPowerOnTime = _SPDUOutletPowerOnTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 2),
    _SPDUOutletPowerOnTime_Type()
)
sPDUOutletPowerOnTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletPowerOnTime.setStatus("mandatory")
_SPDUOutletName_Type = DisplayString
_SPDUOutletName_Object = MibTableColumn
sPDUOutletName = _SPDUOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 3),
    _SPDUOutletName_Type()
)
sPDUOutletName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletName.setStatus("mandatory")
_SPDUOutletPowerOffTime_Type = Integer32
_SPDUOutletPowerOffTime_Object = MibTableColumn
sPDUOutletPowerOffTime = _SPDUOutletPowerOffTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 4),
    _SPDUOutletPowerOffTime_Type()
)
sPDUOutletPowerOffTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletPowerOffTime.setStatus("mandatory")
_SPDUOutletRebootDuration_Type = Integer32
_SPDUOutletRebootDuration_Object = MibTableColumn
sPDUOutletRebootDuration = _SPDUOutletRebootDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 4, 5, 2, 1, 5),
    _SPDUOutletRebootDuration_Type()
)
sPDUOutletRebootDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletRebootDuration.setStatus("mandatory")
_MasterswitchVM_ObjectIdentity = ObjectIdentity
masterswitchVM = _MasterswitchVM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5)
)
_SPDUIdentVM_ObjectIdentity = ObjectIdentity
sPDUIdentVM = _SPDUIdentVM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1)
)
_SPDUIdentVMTableSize_Type = Integer32
_SPDUIdentVMTableSize_Object = MibScalar
sPDUIdentVMTableSize = _SPDUIdentVMTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 1),
    _SPDUIdentVMTableSize_Type()
)
sPDUIdentVMTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentVMTableSize.setStatus("mandatory")
_SPDUIdentVMTable_Object = MibTable
sPDUIdentVMTable = _SPDUIdentVMTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2)
)
if mibBuilder.loadTexts:
    sPDUIdentVMTable.setStatus("mandatory")
_SPDUIdentVMEntry_Object = MibTableRow
sPDUIdentVMEntry = _SPDUIdentVMEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1)
)
sPDUIdentVMEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUIdentVMIndex"),
)
if mibBuilder.loadTexts:
    sPDUIdentVMEntry.setStatus("mandatory")
_SPDUIdentVMIndex_Type = Integer32
_SPDUIdentVMIndex_Object = MibTableColumn
sPDUIdentVMIndex = _SPDUIdentVMIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 1),
    _SPDUIdentVMIndex_Type()
)
sPDUIdentVMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentVMIndex.setStatus("mandatory")
_SPDUIdentNameVM_Type = DisplayString
_SPDUIdentNameVM_Object = MibTableColumn
sPDUIdentNameVM = _SPDUIdentNameVM_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 2),
    _SPDUIdentNameVM_Type()
)
sPDUIdentNameVM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentNameVM.setStatus("mandatory")
_SPDUIdentHardwareRevVM_Type = DisplayString
_SPDUIdentHardwareRevVM_Object = MibTableColumn
sPDUIdentHardwareRevVM = _SPDUIdentHardwareRevVM_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 3),
    _SPDUIdentHardwareRevVM_Type()
)
sPDUIdentHardwareRevVM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentHardwareRevVM.setStatus("mandatory")
_SPDUIdentFirmwareRevVM_Type = DisplayString
_SPDUIdentFirmwareRevVM_Object = MibTableColumn
sPDUIdentFirmwareRevVM = _SPDUIdentFirmwareRevVM_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 4),
    _SPDUIdentFirmwareRevVM_Type()
)
sPDUIdentFirmwareRevVM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentFirmwareRevVM.setStatus("mandatory")
_SPDUIdentDateOfManufactureVM_Type = DisplayString
_SPDUIdentDateOfManufactureVM_Object = MibTableColumn
sPDUIdentDateOfManufactureVM = _SPDUIdentDateOfManufactureVM_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 5),
    _SPDUIdentDateOfManufactureVM_Type()
)
sPDUIdentDateOfManufactureVM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentDateOfManufactureVM.setStatus("mandatory")
_SPDUIdentModelNumberVM_Type = DisplayString
_SPDUIdentModelNumberVM_Object = MibTableColumn
sPDUIdentModelNumberVM = _SPDUIdentModelNumberVM_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 6),
    _SPDUIdentModelNumberVM_Type()
)
sPDUIdentModelNumberVM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentModelNumberVM.setStatus("mandatory")
_SPDUIdentSerialNumberVM_Type = DisplayString
_SPDUIdentSerialNumberVM_Object = MibTableColumn
sPDUIdentSerialNumberVM = _SPDUIdentSerialNumberVM_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 1, 2, 1, 7),
    _SPDUIdentSerialNumberVM_Type()
)
sPDUIdentSerialNumberVM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentSerialNumberVM.setStatus("mandatory")
_SPDUMasterControlVM_ObjectIdentity = ObjectIdentity
sPDUMasterControlVM = _SPDUMasterControlVM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2)
)
_SPDUMasterControlVMTableSize_Type = Integer32
_SPDUMasterControlVMTableSize_Object = MibScalar
sPDUMasterControlVMTableSize = _SPDUMasterControlVMTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 1),
    _SPDUMasterControlVMTableSize_Type()
)
sPDUMasterControlVMTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterControlVMTableSize.setStatus("mandatory")
_SPDUMasterControlVMTable_Object = MibTable
sPDUMasterControlVMTable = _SPDUMasterControlVMTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2)
)
if mibBuilder.loadTexts:
    sPDUMasterControlVMTable.setStatus("mandatory")
_SPDUMasterControlVMEntry_Object = MibTableRow
sPDUMasterControlVMEntry = _SPDUMasterControlVMEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1)
)
sPDUMasterControlVMEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUMasterControlVMIndex"),
)
if mibBuilder.loadTexts:
    sPDUMasterControlVMEntry.setStatus("mandatory")
_SPDUMasterControlVMIndex_Type = Integer32
_SPDUMasterControlVMIndex_Object = MibTableColumn
sPDUMasterControlVMIndex = _SPDUMasterControlVMIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 1),
    _SPDUMasterControlVMIndex_Type()
)
sPDUMasterControlVMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterControlVMIndex.setStatus("mandatory")
_SPDUMasterControlVMName_Type = DisplayString
_SPDUMasterControlVMName_Object = MibTableColumn
sPDUMasterControlVMName = _SPDUMasterControlVMName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 2),
    _SPDUMasterControlVMName_Type()
)
sPDUMasterControlVMName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterControlVMName.setStatus("mandatory")


class _SPDUMasterControlVMCommand_Type(Integer32):
    """Custom type sPDUMasterControlVMCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("audioAlarmMute", 11),
          ("cancelAllPendingCommandsVM", 10),
          ("delayedAllOffVM", 6),
          ("delayedAllOnVM", 5),
          ("delayedAllRebootVM", 8),
          ("delayedSequenceAllRebootVM", 9),
          ("immediateAllOffVM", 3),
          ("immediateAllOnVM", 2),
          ("immediateAllRebootVM", 4),
          ("noCommandAllVM", 1),
          ("sequencedAllRebootVM", 7))
    )


_SPDUMasterControlVMCommand_Type.__name__ = "Integer32"
_SPDUMasterControlVMCommand_Object = MibTableColumn
sPDUMasterControlVMCommand = _SPDUMasterControlVMCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 2, 2, 1, 3),
    _SPDUMasterControlVMCommand_Type()
)
sPDUMasterControlVMCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterControlVMCommand.setStatus("mandatory")
_SPDUMasterConfigVM_ObjectIdentity = ObjectIdentity
sPDUMasterConfigVM = _SPDUMasterConfigVM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3)
)
_SPDUMasterConfigVMTableSize_Type = Integer32
_SPDUMasterConfigVMTableSize_Object = MibScalar
sPDUMasterConfigVMTableSize = _SPDUMasterConfigVMTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 1),
    _SPDUMasterConfigVMTableSize_Type()
)
sPDUMasterConfigVMTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterConfigVMTableSize.setStatus("mandatory")
_SPDUMasterConfigVMTable_Object = MibTable
sPDUMasterConfigVMTable = _SPDUMasterConfigVMTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2)
)
if mibBuilder.loadTexts:
    sPDUMasterConfigVMTable.setStatus("mandatory")
_SPDUMasterConfigVMEntry_Object = MibTableRow
sPDUMasterConfigVMEntry = _SPDUMasterConfigVMEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1)
)
sPDUMasterConfigVMEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUMasterConfigVMIndex"),
)
if mibBuilder.loadTexts:
    sPDUMasterConfigVMEntry.setStatus("mandatory")
_SPDUMasterConfigVMIndex_Type = Integer32
_SPDUMasterConfigVMIndex_Object = MibTableColumn
sPDUMasterConfigVMIndex = _SPDUMasterConfigVMIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 1),
    _SPDUMasterConfigVMIndex_Type()
)
sPDUMasterConfigVMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterConfigVMIndex.setStatus("mandatory")
_SPDUMasterConfigVMName_Type = DisplayString
_SPDUMasterConfigVMName_Object = MibTableColumn
sPDUMasterConfigVMName = _SPDUMasterConfigVMName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 2),
    _SPDUMasterConfigVMName_Type()
)
sPDUMasterConfigVMName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterConfigVMName.setStatus("mandatory")
_SPDUMasterConfigVMColdstartDelay_Type = Integer32
_SPDUMasterConfigVMColdstartDelay_Object = MibTableColumn
sPDUMasterConfigVMColdstartDelay = _SPDUMasterConfigVMColdstartDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 3),
    _SPDUMasterConfigVMColdstartDelay_Type()
)
sPDUMasterConfigVMColdstartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterConfigVMColdstartDelay.setStatus("mandatory")


class _SPDUMasterConfigVMAudioAlarmActivated_Type(Integer32):
    """Custom type sPDUMasterConfigVMAudioAlarmActivated based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("audioAlarmActiveNever", 1),
          ("audioAlarmActiveOnOverload", 2),
          ("audioAlarmActiveOnOverloadImminent", 3))
    )


_SPDUMasterConfigVMAudioAlarmActivated_Type.__name__ = "Integer32"
_SPDUMasterConfigVMAudioAlarmActivated_Object = MibTableColumn
sPDUMasterConfigVMAudioAlarmActivated = _SPDUMasterConfigVMAudioAlarmActivated_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 4),
    _SPDUMasterConfigVMAudioAlarmActivated_Type()
)
sPDUMasterConfigVMAudioAlarmActivated.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterConfigVMAudioAlarmActivated.setStatus("mandatory")


class _SPDUMasterConfigVMHighLoadWarningThreshold_Type(Integer32):
    """Custom type sPDUMasterConfigVMHighLoadWarningThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_SPDUMasterConfigVMHighLoadWarningThreshold_Type.__name__ = "Integer32"
_SPDUMasterConfigVMHighLoadWarningThreshold_Object = MibTableColumn
sPDUMasterConfigVMHighLoadWarningThreshold = _SPDUMasterConfigVMHighLoadWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 5),
    _SPDUMasterConfigVMHighLoadWarningThreshold_Type()
)
sPDUMasterConfigVMHighLoadWarningThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterConfigVMHighLoadWarningThreshold.setStatus("mandatory")


class _SPDUMasterConfigVMLowLoadWarningThreshold_Type(Integer32):
    """Custom type sPDUMasterConfigVMLowLoadWarningThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_SPDUMasterConfigVMLowLoadWarningThreshold_Type.__name__ = "Integer32"
_SPDUMasterConfigVMLowLoadWarningThreshold_Object = MibTableColumn
sPDUMasterConfigVMLowLoadWarningThreshold = _SPDUMasterConfigVMLowLoadWarningThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 6),
    _SPDUMasterConfigVMLowLoadWarningThreshold_Type()
)
sPDUMasterConfigVMLowLoadWarningThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterConfigVMLowLoadWarningThreshold.setStatus("mandatory")


class _SPDUMasterConfigVMOverloadRestriction_Type(Integer32):
    """Custom type sPDUMasterConfigVMOverloadRestriction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("alwaysAllowTurnON", 1),
          ("restrictOnOverload", 3),
          ("restrictOnWarning", 2))
    )


_SPDUMasterConfigVMOverloadRestriction_Type.__name__ = "Integer32"
_SPDUMasterConfigVMOverloadRestriction_Object = MibTableColumn
sPDUMasterConfigVMOverloadRestriction = _SPDUMasterConfigVMOverloadRestriction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 3, 2, 1, 7),
    _SPDUMasterConfigVMOverloadRestriction_Type()
)
sPDUMasterConfigVMOverloadRestriction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterConfigVMOverloadRestriction.setStatus("mandatory")
_SPDUMasterStatusVM_ObjectIdentity = ObjectIdentity
sPDUMasterStatusVM = _SPDUMasterStatusVM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4)
)
_SPDUMasterStatusVMTableSize_Type = Integer32
_SPDUMasterStatusVMTableSize_Object = MibScalar
sPDUMasterStatusVMTableSize = _SPDUMasterStatusVMTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 1),
    _SPDUMasterStatusVMTableSize_Type()
)
sPDUMasterStatusVMTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusVMTableSize.setStatus("mandatory")
_SPDUMasterStatusVMTable_Object = MibTable
sPDUMasterStatusVMTable = _SPDUMasterStatusVMTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2)
)
if mibBuilder.loadTexts:
    sPDUMasterStatusVMTable.setStatus("mandatory")
_SPDUMasterStatusVMEntry_Object = MibTableRow
sPDUMasterStatusVMEntry = _SPDUMasterStatusVMEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1)
)
sPDUMasterStatusVMEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUMasterStatusVMIndex"),
)
if mibBuilder.loadTexts:
    sPDUMasterStatusVMEntry.setStatus("mandatory")
_SPDUMasterStatusVMIndex_Type = Integer32
_SPDUMasterStatusVMIndex_Object = MibTableColumn
sPDUMasterStatusVMIndex = _SPDUMasterStatusVMIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 1),
    _SPDUMasterStatusVMIndex_Type()
)
sPDUMasterStatusVMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusVMIndex.setStatus("mandatory")
_SPDUMasterStatusVMName_Type = DisplayString
_SPDUMasterStatusVMName_Object = MibTableColumn
sPDUMasterStatusVMName = _SPDUMasterStatusVMName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 2),
    _SPDUMasterStatusVMName_Type()
)
sPDUMasterStatusVMName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusVMName.setStatus("mandatory")


class _SPDUMasterStatusVMCommandPending_Type(Integer32):
    """Custom type sPDUMasterStatusVMCommandPending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("commandPendingMasterFalseVM", 2),
          ("commandPendingMasterTrueVM", 1))
    )


_SPDUMasterStatusVMCommandPending_Type.__name__ = "Integer32"
_SPDUMasterStatusVMCommandPending_Object = MibTableColumn
sPDUMasterStatusVMCommandPending = _SPDUMasterStatusVMCommandPending_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 3),
    _SPDUMasterStatusVMCommandPending_Type()
)
sPDUMasterStatusVMCommandPending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusVMCommandPending.setStatus("mandatory")


class _SPDUMasterStatusVMOverloadCondition_Type(Integer32):
    """Custom type sPDUMasterStatusVMOverloadCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("overloadConditionFalseVM", 2),
          ("overloadConditionTrueVM", 1))
    )


_SPDUMasterStatusVMOverloadCondition_Type.__name__ = "Integer32"
_SPDUMasterStatusVMOverloadCondition_Object = MibTableColumn
sPDUMasterStatusVMOverloadCondition = _SPDUMasterStatusVMOverloadCondition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 4),
    _SPDUMasterStatusVMOverloadCondition_Type()
)
sPDUMasterStatusVMOverloadCondition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusVMOverloadCondition.setStatus("mandatory")


class _SPDUMasterStatusVMLowLoadCondition_Type(Integer32):
    """Custom type sPDUMasterStatusVMLowLoadCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("lowLoadConditionFalseVM", 2),
          ("lowLoadConditionTrueVM", 1))
    )


_SPDUMasterStatusVMLowLoadCondition_Type.__name__ = "Integer32"
_SPDUMasterStatusVMLowLoadCondition_Object = MibTableColumn
sPDUMasterStatusVMLowLoadCondition = _SPDUMasterStatusVMLowLoadCondition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 5),
    _SPDUMasterStatusVMLowLoadCondition_Type()
)
sPDUMasterStatusVMLowLoadCondition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusVMLowLoadCondition.setStatus("mandatory")
_SPDUMasterStatusVMCurrentLoad_Type = Integer32
_SPDUMasterStatusVMCurrentLoad_Object = MibTableColumn
sPDUMasterStatusVMCurrentLoad = _SPDUMasterStatusVMCurrentLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 6),
    _SPDUMasterStatusVMCurrentLoad_Type()
)
sPDUMasterStatusVMCurrentLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusVMCurrentLoad.setStatus("mandatory")
_SPDUMasterStatusVMMaxLoad_Type = Integer32
_SPDUMasterStatusVMMaxLoad_Object = MibTableColumn
sPDUMasterStatusVMMaxLoad = _SPDUMasterStatusVMMaxLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 7),
    _SPDUMasterStatusVMMaxLoad_Type()
)
sPDUMasterStatusVMMaxLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusVMMaxLoad.setStatus("mandatory")
_SPDUMasterStatusVMOutletCount_Type = Integer32
_SPDUMasterStatusVMOutletCount_Object = MibTableColumn
sPDUMasterStatusVMOutletCount = _SPDUMasterStatusVMOutletCount_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 8),
    _SPDUMasterStatusVMOutletCount_Type()
)
sPDUMasterStatusVMOutletCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusVMOutletCount.setStatus("mandatory")
_SPDUMasterStatusVMRebootDuration_Type = Integer32
_SPDUMasterStatusVMRebootDuration_Object = MibTableColumn
sPDUMasterStatusVMRebootDuration = _SPDUMasterStatusVMRebootDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 4, 2, 1, 9),
    _SPDUMasterStatusVMRebootDuration_Type()
)
sPDUMasterStatusVMRebootDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusVMRebootDuration.setStatus("mandatory")
_SPDUOutletControlVM_ObjectIdentity = ObjectIdentity
sPDUOutletControlVM = _SPDUOutletControlVM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5)
)
_SPDUOutletControlVMTable_Object = MibTable
sPDUOutletControlVMTable = _SPDUOutletControlVMTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1)
)
if mibBuilder.loadTexts:
    sPDUOutletControlVMTable.setStatus("mandatory")
_SPDUOutletControlVMEntry_Object = MibTableRow
sPDUOutletControlVMEntry = _SPDUOutletControlVMEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1)
)
sPDUOutletControlVMEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUOutletControlVMIndex"),
    (0, "POWERNET-MIB", "sPDUOutletControlVMOutletIndex"),
)
if mibBuilder.loadTexts:
    sPDUOutletControlVMEntry.setStatus("mandatory")
_SPDUOutletControlVMIndex_Type = Integer32
_SPDUOutletControlVMIndex_Object = MibTableColumn
sPDUOutletControlVMIndex = _SPDUOutletControlVMIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 1),
    _SPDUOutletControlVMIndex_Type()
)
sPDUOutletControlVMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletControlVMIndex.setStatus("mandatory")
_SPDUOutletControlVMName_Type = DisplayString
_SPDUOutletControlVMName_Object = MibTableColumn
sPDUOutletControlVMName = _SPDUOutletControlVMName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 2),
    _SPDUOutletControlVMName_Type()
)
sPDUOutletControlVMName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletControlVMName.setStatus("mandatory")
_SPDUOutletControlVMOutletIndex_Type = Integer32
_SPDUOutletControlVMOutletIndex_Object = MibTableColumn
sPDUOutletControlVMOutletIndex = _SPDUOutletControlVMOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 3),
    _SPDUOutletControlVMOutletIndex_Type()
)
sPDUOutletControlVMOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletControlVMOutletIndex.setStatus("mandatory")
_SPDUOutletControlVMOutletName_Type = DisplayString
_SPDUOutletControlVMOutletName_Object = MibTableColumn
sPDUOutletControlVMOutletName = _SPDUOutletControlVMOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 4),
    _SPDUOutletControlVMOutletName_Type()
)
sPDUOutletControlVMOutletName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletControlVMOutletName.setStatus("mandatory")


class _SPDUOutletControlVMOutletCommand_Type(Integer32):
    """Custom type sPDUOutletControlVMOutletCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("cancelPendingCommandVM", 7),
          ("delayedOffVM", 5),
          ("delayedOnVM", 4),
          ("delayedRebootVM", 6),
          ("immediateOffVM", 2),
          ("immediateOnVM", 1),
          ("immediateRebootVM", 3))
    )


_SPDUOutletControlVMOutletCommand_Type.__name__ = "Integer32"
_SPDUOutletControlVMOutletCommand_Object = MibTableColumn
sPDUOutletControlVMOutletCommand = _SPDUOutletControlVMOutletCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 5, 1, 1, 5),
    _SPDUOutletControlVMOutletCommand_Type()
)
sPDUOutletControlVMOutletCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletControlVMOutletCommand.setStatus("mandatory")
_SPDUOutletConfigVM_ObjectIdentity = ObjectIdentity
sPDUOutletConfigVM = _SPDUOutletConfigVM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6)
)
_SPDUOutletConfigVMTable_Object = MibTable
sPDUOutletConfigVMTable = _SPDUOutletConfigVMTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1)
)
if mibBuilder.loadTexts:
    sPDUOutletConfigVMTable.setStatus("mandatory")
_SPDUOutletConfigVMEntry_Object = MibTableRow
sPDUOutletConfigVMEntry = _SPDUOutletConfigVMEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1)
)
sPDUOutletConfigVMEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUOutletConfigVMIndex"),
    (0, "POWERNET-MIB", "sPDUOutletConfigVMOutletIndex"),
)
if mibBuilder.loadTexts:
    sPDUOutletConfigVMEntry.setStatus("mandatory")
_SPDUOutletConfigVMIndex_Type = Integer32
_SPDUOutletConfigVMIndex_Object = MibTableColumn
sPDUOutletConfigVMIndex = _SPDUOutletConfigVMIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 1),
    _SPDUOutletConfigVMIndex_Type()
)
sPDUOutletConfigVMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigVMIndex.setStatus("mandatory")
_SPDUOutletConfigVMName_Type = DisplayString
_SPDUOutletConfigVMName_Object = MibTableColumn
sPDUOutletConfigVMName = _SPDUOutletConfigVMName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 2),
    _SPDUOutletConfigVMName_Type()
)
sPDUOutletConfigVMName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigVMName.setStatus("mandatory")
_SPDUOutletConfigVMOutletIndex_Type = Integer32
_SPDUOutletConfigVMOutletIndex_Object = MibTableColumn
sPDUOutletConfigVMOutletIndex = _SPDUOutletConfigVMOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 3),
    _SPDUOutletConfigVMOutletIndex_Type()
)
sPDUOutletConfigVMOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigVMOutletIndex.setStatus("mandatory")
_SPDUOutletConfigVMOutletName_Type = DisplayString
_SPDUOutletConfigVMOutletName_Object = MibTableColumn
sPDUOutletConfigVMOutletName = _SPDUOutletConfigVMOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 4),
    _SPDUOutletConfigVMOutletName_Type()
)
sPDUOutletConfigVMOutletName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigVMOutletName.setStatus("mandatory")
_SPDUOutletConfigVMPowerOnTime_Type = Integer32
_SPDUOutletConfigVMPowerOnTime_Object = MibTableColumn
sPDUOutletConfigVMPowerOnTime = _SPDUOutletConfigVMPowerOnTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 5),
    _SPDUOutletConfigVMPowerOnTime_Type()
)
sPDUOutletConfigVMPowerOnTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigVMPowerOnTime.setStatus("mandatory")
_SPDUOutletConfigVMPowerOffTime_Type = Integer32
_SPDUOutletConfigVMPowerOffTime_Object = MibTableColumn
sPDUOutletConfigVMPowerOffTime = _SPDUOutletConfigVMPowerOffTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 6),
    _SPDUOutletConfigVMPowerOffTime_Type()
)
sPDUOutletConfigVMPowerOffTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigVMPowerOffTime.setStatus("mandatory")
_SPDUOutletConfigVMRebootDuration_Type = Integer32
_SPDUOutletConfigVMRebootDuration_Object = MibTableColumn
sPDUOutletConfigVMRebootDuration = _SPDUOutletConfigVMRebootDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 6, 1, 1, 7),
    _SPDUOutletConfigVMRebootDuration_Type()
)
sPDUOutletConfigVMRebootDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigVMRebootDuration.setStatus("mandatory")
_SPDUOutletStatusVM_ObjectIdentity = ObjectIdentity
sPDUOutletStatusVM = _SPDUOutletStatusVM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7)
)
_SPDUOutletStatusVMTable_Object = MibTable
sPDUOutletStatusVMTable = _SPDUOutletStatusVMTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1)
)
if mibBuilder.loadTexts:
    sPDUOutletStatusVMTable.setStatus("mandatory")
_SPDUOutletStatusVMEntry_Object = MibTableRow
sPDUOutletStatusVMEntry = _SPDUOutletStatusVMEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1)
)
sPDUOutletStatusVMEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUOutletStatusVMIndex"),
    (0, "POWERNET-MIB", "sPDUOutletStatusVMOutletIndex"),
)
if mibBuilder.loadTexts:
    sPDUOutletStatusVMEntry.setStatus("mandatory")
_SPDUOutletStatusVMIndex_Type = Integer32
_SPDUOutletStatusVMIndex_Object = MibTableColumn
sPDUOutletStatusVMIndex = _SPDUOutletStatusVMIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 1),
    _SPDUOutletStatusVMIndex_Type()
)
sPDUOutletStatusVMIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusVMIndex.setStatus("mandatory")
_SPDUOutletStatusVMName_Type = DisplayString
_SPDUOutletStatusVMName_Object = MibTableColumn
sPDUOutletStatusVMName = _SPDUOutletStatusVMName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 2),
    _SPDUOutletStatusVMName_Type()
)
sPDUOutletStatusVMName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusVMName.setStatus("mandatory")
_SPDUOutletStatusVMOutletIndex_Type = Integer32
_SPDUOutletStatusVMOutletIndex_Object = MibTableColumn
sPDUOutletStatusVMOutletIndex = _SPDUOutletStatusVMOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 3),
    _SPDUOutletStatusVMOutletIndex_Type()
)
sPDUOutletStatusVMOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusVMOutletIndex.setStatus("mandatory")
_SPDUOutletStatusVMOutletName_Type = DisplayString
_SPDUOutletStatusVMOutletName_Object = MibTableColumn
sPDUOutletStatusVMOutletName = _SPDUOutletStatusVMOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 4),
    _SPDUOutletStatusVMOutletName_Type()
)
sPDUOutletStatusVMOutletName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusVMOutletName.setStatus("mandatory")


class _SPDUOutletStatusVMOutletState_Type(Integer32):
    """Custom type sPDUOutletStatusVMOutletState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("outletStatusVMOff", 2),
          ("outletStatusVMOn", 1))
    )


_SPDUOutletStatusVMOutletState_Type.__name__ = "Integer32"
_SPDUOutletStatusVMOutletState_Object = MibTableColumn
sPDUOutletStatusVMOutletState = _SPDUOutletStatusVMOutletState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 5),
    _SPDUOutletStatusVMOutletState_Type()
)
sPDUOutletStatusVMOutletState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusVMOutletState.setStatus("mandatory")


class _SPDUOutletStatusVMCommandPending_Type(Integer32):
    """Custom type sPDUOutletStatusVMCommandPending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("outletStatusVMCommandPending", 1),
          ("outletStatusVMNoCommandPending", 2))
    )


_SPDUOutletStatusVMCommandPending_Type.__name__ = "Integer32"
_SPDUOutletStatusVMCommandPending_Object = MibTableColumn
sPDUOutletStatusVMCommandPending = _SPDUOutletStatusVMCommandPending_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 5, 7, 1, 1, 6),
    _SPDUOutletStatusVMCommandPending_Type()
)
sPDUOutletStatusVMCommandPending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusVMCommandPending.setStatus("mandatory")
_MasterswitchMSP_ObjectIdentity = ObjectIdentity
masterswitchMSP = _MasterswitchMSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6)
)
_SPDUIdentMSP_ObjectIdentity = ObjectIdentity
sPDUIdentMSP = _SPDUIdentMSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1)
)
_SPDUIdentMSPTableSize_Type = Integer32
_SPDUIdentMSPTableSize_Object = MibScalar
sPDUIdentMSPTableSize = _SPDUIdentMSPTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 1),
    _SPDUIdentMSPTableSize_Type()
)
sPDUIdentMSPTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentMSPTableSize.setStatus("mandatory")
_SPDUIdentMSPTable_Object = MibTable
sPDUIdentMSPTable = _SPDUIdentMSPTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2)
)
if mibBuilder.loadTexts:
    sPDUIdentMSPTable.setStatus("mandatory")
_SPDUIdentMSPEntry_Object = MibTableRow
sPDUIdentMSPEntry = _SPDUIdentMSPEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1)
)
sPDUIdentMSPEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUIdentMSPIndex"),
)
if mibBuilder.loadTexts:
    sPDUIdentMSPEntry.setStatus("mandatory")
_SPDUIdentMSPIndex_Type = Integer32
_SPDUIdentMSPIndex_Object = MibTableColumn
sPDUIdentMSPIndex = _SPDUIdentMSPIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 1),
    _SPDUIdentMSPIndex_Type()
)
sPDUIdentMSPIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentMSPIndex.setStatus("mandatory")
_SPDUIdentNameMSP_Type = DisplayString
_SPDUIdentNameMSP_Object = MibTableColumn
sPDUIdentNameMSP = _SPDUIdentNameMSP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 2),
    _SPDUIdentNameMSP_Type()
)
sPDUIdentNameMSP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentNameMSP.setStatus("mandatory")
_SPDUIdentHardwareRevMSP_Type = DisplayString
_SPDUIdentHardwareRevMSP_Object = MibTableColumn
sPDUIdentHardwareRevMSP = _SPDUIdentHardwareRevMSP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 3),
    _SPDUIdentHardwareRevMSP_Type()
)
sPDUIdentHardwareRevMSP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentHardwareRevMSP.setStatus("mandatory")
_SPDUIdentFirmwareRevMSP_Type = DisplayString
_SPDUIdentFirmwareRevMSP_Object = MibTableColumn
sPDUIdentFirmwareRevMSP = _SPDUIdentFirmwareRevMSP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 4),
    _SPDUIdentFirmwareRevMSP_Type()
)
sPDUIdentFirmwareRevMSP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentFirmwareRevMSP.setStatus("mandatory")
_SPDUIdentDateOfManufactureMSP_Type = DisplayString
_SPDUIdentDateOfManufactureMSP_Object = MibTableColumn
sPDUIdentDateOfManufactureMSP = _SPDUIdentDateOfManufactureMSP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 5),
    _SPDUIdentDateOfManufactureMSP_Type()
)
sPDUIdentDateOfManufactureMSP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentDateOfManufactureMSP.setStatus("mandatory")
_SPDUIdentModelNumberMSP_Type = DisplayString
_SPDUIdentModelNumberMSP_Object = MibTableColumn
sPDUIdentModelNumberMSP = _SPDUIdentModelNumberMSP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 6),
    _SPDUIdentModelNumberMSP_Type()
)
sPDUIdentModelNumberMSP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentModelNumberMSP.setStatus("mandatory")
_SPDUIdentSerialNumberMSP_Type = DisplayString
_SPDUIdentSerialNumberMSP_Object = MibTableColumn
sPDUIdentSerialNumberMSP = _SPDUIdentSerialNumberMSP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 1, 2, 1, 7),
    _SPDUIdentSerialNumberMSP_Type()
)
sPDUIdentSerialNumberMSP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUIdentSerialNumberMSP.setStatus("mandatory")
_SPDUMasterControlMSP_ObjectIdentity = ObjectIdentity
sPDUMasterControlMSP = _SPDUMasterControlMSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2)
)
_SPDUMasterControlMSPTableSize_Type = Integer32
_SPDUMasterControlMSPTableSize_Object = MibScalar
sPDUMasterControlMSPTableSize = _SPDUMasterControlMSPTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 1),
    _SPDUMasterControlMSPTableSize_Type()
)
sPDUMasterControlMSPTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterControlMSPTableSize.setStatus("mandatory")
_SPDUMasterControlMSPTable_Object = MibTable
sPDUMasterControlMSPTable = _SPDUMasterControlMSPTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2)
)
if mibBuilder.loadTexts:
    sPDUMasterControlMSPTable.setStatus("mandatory")
_SPDUMasterControlMSPEntry_Object = MibTableRow
sPDUMasterControlMSPEntry = _SPDUMasterControlMSPEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1)
)
sPDUMasterControlMSPEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUMasterControlMSPIndex"),
)
if mibBuilder.loadTexts:
    sPDUMasterControlMSPEntry.setStatus("mandatory")
_SPDUMasterControlMSPIndex_Type = Integer32
_SPDUMasterControlMSPIndex_Object = MibTableColumn
sPDUMasterControlMSPIndex = _SPDUMasterControlMSPIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 1),
    _SPDUMasterControlMSPIndex_Type()
)
sPDUMasterControlMSPIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterControlMSPIndex.setStatus("mandatory")
_SPDUMasterControlMSPName_Type = DisplayString
_SPDUMasterControlMSPName_Object = MibTableColumn
sPDUMasterControlMSPName = _SPDUMasterControlMSPName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 2),
    _SPDUMasterControlMSPName_Type()
)
sPDUMasterControlMSPName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterControlMSPName.setStatus("mandatory")


class _SPDUMasterControlMSPCommand_Type(Integer32):
    """Custom type sPDUMasterControlMSPCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("cancelAllPendingCommandsMSP", 9),
          ("gracefulAllRebootMSP", 5),
          ("gracefulAllShutdownMSP", 7),
          ("immediateAllOffMSP", 4),
          ("immediateAllOnMSP", 2),
          ("immediateAllRebootMSP", 6),
          ("noCommandAllMSP", 1),
          ("overrideAllBatCapThreshMSP", 8),
          ("restoreFactoryDefaultsMSP", 10),
          ("sequencedAllOnMSP", 3))
    )


_SPDUMasterControlMSPCommand_Type.__name__ = "Integer32"
_SPDUMasterControlMSPCommand_Object = MibTableColumn
sPDUMasterControlMSPCommand = _SPDUMasterControlMSPCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 2, 2, 1, 3),
    _SPDUMasterControlMSPCommand_Type()
)
sPDUMasterControlMSPCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterControlMSPCommand.setStatus("mandatory")
_SPDUMasterConfigMSP_ObjectIdentity = ObjectIdentity
sPDUMasterConfigMSP = _SPDUMasterConfigMSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3)
)
_SPDUMasterConfigMSPTableSize_Type = Integer32
_SPDUMasterConfigMSPTableSize_Object = MibScalar
sPDUMasterConfigMSPTableSize = _SPDUMasterConfigMSPTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 1),
    _SPDUMasterConfigMSPTableSize_Type()
)
sPDUMasterConfigMSPTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterConfigMSPTableSize.setStatus("mandatory")
_SPDUMasterConfigMSPTable_Object = MibTable
sPDUMasterConfigMSPTable = _SPDUMasterConfigMSPTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2)
)
if mibBuilder.loadTexts:
    sPDUMasterConfigMSPTable.setStatus("mandatory")
_SPDUMasterConfigMSPEntry_Object = MibTableRow
sPDUMasterConfigMSPEntry = _SPDUMasterConfigMSPEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1)
)
sPDUMasterConfigMSPEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUMasterConfigMSPIndex"),
)
if mibBuilder.loadTexts:
    sPDUMasterConfigMSPEntry.setStatus("mandatory")
_SPDUMasterConfigMSPIndex_Type = Integer32
_SPDUMasterConfigMSPIndex_Object = MibTableColumn
sPDUMasterConfigMSPIndex = _SPDUMasterConfigMSPIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 1),
    _SPDUMasterConfigMSPIndex_Type()
)
sPDUMasterConfigMSPIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterConfigMSPIndex.setStatus("mandatory")
_SPDUMasterConfigMSPName_Type = DisplayString
_SPDUMasterConfigMSPName_Object = MibTableColumn
sPDUMasterConfigMSPName = _SPDUMasterConfigMSPName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 2),
    _SPDUMasterConfigMSPName_Type()
)
sPDUMasterConfigMSPName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterConfigMSPName.setStatus("mandatory")


class _SPDUMasterConfigMSPPowerOnTimeDelay_Type(Integer32):
    """Custom type sPDUMasterConfigMSPPowerOnTimeDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_SPDUMasterConfigMSPPowerOnTimeDelay_Type.__name__ = "Integer32"
_SPDUMasterConfigMSPPowerOnTimeDelay_Object = MibTableColumn
sPDUMasterConfigMSPPowerOnTimeDelay = _SPDUMasterConfigMSPPowerOnTimeDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 3),
    _SPDUMasterConfigMSPPowerOnTimeDelay_Type()
)
sPDUMasterConfigMSPPowerOnTimeDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterConfigMSPPowerOnTimeDelay.setStatus("mandatory")


class _SPDUMasterConfigMSPManualButton_Type(Integer32):
    """Custom type sPDUMasterConfigMSPManualButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("manualButtonDisabled", 1),
          ("manualButtonEnabled", 2))
    )


_SPDUMasterConfigMSPManualButton_Type.__name__ = "Integer32"
_SPDUMasterConfigMSPManualButton_Object = MibTableColumn
sPDUMasterConfigMSPManualButton = _SPDUMasterConfigMSPManualButton_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 3, 2, 1, 4),
    _SPDUMasterConfigMSPManualButton_Type()
)
sPDUMasterConfigMSPManualButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUMasterConfigMSPManualButton.setStatus("mandatory")
_SPDUMasterStatusMSP_ObjectIdentity = ObjectIdentity
sPDUMasterStatusMSP = _SPDUMasterStatusMSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4)
)
_SPDUMasterStatusMSPTableSize_Type = Integer32
_SPDUMasterStatusMSPTableSize_Object = MibScalar
sPDUMasterStatusMSPTableSize = _SPDUMasterStatusMSPTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 1),
    _SPDUMasterStatusMSPTableSize_Type()
)
sPDUMasterStatusMSPTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusMSPTableSize.setStatus("mandatory")
_SPDUMasterStatusMSPTable_Object = MibTable
sPDUMasterStatusMSPTable = _SPDUMasterStatusMSPTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2)
)
if mibBuilder.loadTexts:
    sPDUMasterStatusMSPTable.setStatus("mandatory")
_SPDUMasterStatusMSPEntry_Object = MibTableRow
sPDUMasterStatusMSPEntry = _SPDUMasterStatusMSPEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1)
)
sPDUMasterStatusMSPEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUMasterStatusMSPIndex"),
)
if mibBuilder.loadTexts:
    sPDUMasterStatusMSPEntry.setStatus("mandatory")
_SPDUMasterStatusMSPIndex_Type = Integer32
_SPDUMasterStatusMSPIndex_Object = MibTableColumn
sPDUMasterStatusMSPIndex = _SPDUMasterStatusMSPIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 1),
    _SPDUMasterStatusMSPIndex_Type()
)
sPDUMasterStatusMSPIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusMSPIndex.setStatus("mandatory")
_SPDUMasterStatusMSPName_Type = DisplayString
_SPDUMasterStatusMSPName_Object = MibTableColumn
sPDUMasterStatusMSPName = _SPDUMasterStatusMSPName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 2),
    _SPDUMasterStatusMSPName_Type()
)
sPDUMasterStatusMSPName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusMSPName.setStatus("mandatory")
_SPDUMasterStatusMSPOutletCount_Type = Integer32
_SPDUMasterStatusMSPOutletCount_Object = MibTableColumn
sPDUMasterStatusMSPOutletCount = _SPDUMasterStatusMSPOutletCount_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 4, 2, 1, 3),
    _SPDUMasterStatusMSPOutletCount_Type()
)
sPDUMasterStatusMSPOutletCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUMasterStatusMSPOutletCount.setStatus("mandatory")
_SPDUOutletControlMSP_ObjectIdentity = ObjectIdentity
sPDUOutletControlMSP = _SPDUOutletControlMSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5)
)
_SPDUOutletControlMSPTable_Object = MibTable
sPDUOutletControlMSPTable = _SPDUOutletControlMSPTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1)
)
if mibBuilder.loadTexts:
    sPDUOutletControlMSPTable.setStatus("mandatory")
_SPDUOutletControlMSPEntry_Object = MibTableRow
sPDUOutletControlMSPEntry = _SPDUOutletControlMSPEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1)
)
sPDUOutletControlMSPEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUOutletControlMSPIndex"),
    (0, "POWERNET-MIB", "sPDUOutletControlMSPOutletIndex"),
)
if mibBuilder.loadTexts:
    sPDUOutletControlMSPEntry.setStatus("mandatory")
_SPDUOutletControlMSPIndex_Type = Integer32
_SPDUOutletControlMSPIndex_Object = MibTableColumn
sPDUOutletControlMSPIndex = _SPDUOutletControlMSPIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 1),
    _SPDUOutletControlMSPIndex_Type()
)
sPDUOutletControlMSPIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletControlMSPIndex.setStatus("mandatory")
_SPDUOutletControlMSPName_Type = DisplayString
_SPDUOutletControlMSPName_Object = MibTableColumn
sPDUOutletControlMSPName = _SPDUOutletControlMSPName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 2),
    _SPDUOutletControlMSPName_Type()
)
sPDUOutletControlMSPName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletControlMSPName.setStatus("mandatory")
_SPDUOutletControlMSPOutletIndex_Type = Integer32
_SPDUOutletControlMSPOutletIndex_Object = MibTableColumn
sPDUOutletControlMSPOutletIndex = _SPDUOutletControlMSPOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 3),
    _SPDUOutletControlMSPOutletIndex_Type()
)
sPDUOutletControlMSPOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletControlMSPOutletIndex.setStatus("mandatory")
_SPDUOutletControlMSPOutletName_Type = DisplayString
_SPDUOutletControlMSPOutletName_Object = MibTableColumn
sPDUOutletControlMSPOutletName = _SPDUOutletControlMSPOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 4),
    _SPDUOutletControlMSPOutletName_Type()
)
sPDUOutletControlMSPOutletName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletControlMSPOutletName.setStatus("mandatory")


class _SPDUOutletControlMSPOutletCommand_Type(Integer32):
    """Custom type sPDUOutletControlMSPOutletCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("cancelPendingCommandMSP", 8),
          ("delayedOnMSP", 2),
          ("gracefulRebootMSP", 4),
          ("gracefulshutdownMSP", 6),
          ("immediateOffMSP", 3),
          ("immediateOnMSP", 1),
          ("immediateRebootMSP", 5),
          ("overrideBatCapThreshMSP", 7))
    )


_SPDUOutletControlMSPOutletCommand_Type.__name__ = "Integer32"
_SPDUOutletControlMSPOutletCommand_Object = MibTableColumn
sPDUOutletControlMSPOutletCommand = _SPDUOutletControlMSPOutletCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 5, 1, 1, 5),
    _SPDUOutletControlMSPOutletCommand_Type()
)
sPDUOutletControlMSPOutletCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletControlMSPOutletCommand.setStatus("mandatory")
_SPDUOutletConfigMSP_ObjectIdentity = ObjectIdentity
sPDUOutletConfigMSP = _SPDUOutletConfigMSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6)
)
_SPDUOutletConfigMSPall_ObjectIdentity = ObjectIdentity
sPDUOutletConfigMSPall = _SPDUOutletConfigMSPall_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1)
)
_SPDUOutletConfigMSPallTable_Object = MibTable
sPDUOutletConfigMSPallTable = _SPDUOutletConfigMSPallTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1)
)
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPallTable.setStatus("mandatory")
_SPDUOutletConfigMSPallEntry_Object = MibTableRow
sPDUOutletConfigMSPallEntry = _SPDUOutletConfigMSPallEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1)
)
sPDUOutletConfigMSPallEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUOutletConfigMSPallIndex"),
    (0, "POWERNET-MIB", "sPDUOutletConfigMSPallOutletIndex"),
)
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPallEntry.setStatus("mandatory")
_SPDUOutletConfigMSPallIndex_Type = Integer32
_SPDUOutletConfigMSPallIndex_Object = MibTableColumn
sPDUOutletConfigMSPallIndex = _SPDUOutletConfigMSPallIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 1),
    _SPDUOutletConfigMSPallIndex_Type()
)
sPDUOutletConfigMSPallIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPallIndex.setStatus("mandatory")
_SPDUOutletConfigMSPallName_Type = DisplayString
_SPDUOutletConfigMSPallName_Object = MibTableColumn
sPDUOutletConfigMSPallName = _SPDUOutletConfigMSPallName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 2),
    _SPDUOutletConfigMSPallName_Type()
)
sPDUOutletConfigMSPallName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPallName.setStatus("mandatory")
_SPDUOutletConfigMSPallOutletIndex_Type = Integer32
_SPDUOutletConfigMSPallOutletIndex_Object = MibTableColumn
sPDUOutletConfigMSPallOutletIndex = _SPDUOutletConfigMSPallOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 3),
    _SPDUOutletConfigMSPallOutletIndex_Type()
)
sPDUOutletConfigMSPallOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPallOutletIndex.setStatus("mandatory")
_SPDUOutletConfigMSPallOutletName_Type = DisplayString
_SPDUOutletConfigMSPallOutletName_Object = MibTableColumn
sPDUOutletConfigMSPallOutletName = _SPDUOutletConfigMSPallOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 4),
    _SPDUOutletConfigMSPallOutletName_Type()
)
sPDUOutletConfigMSPallOutletName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPallOutletName.setStatus("mandatory")


class _SPDUOutletConfigMSPallOutletCtrlMode_Type(Integer32):
    """Custom type sPDUOutletConfigMSPallOutletCtrlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("modeAnnunciator", 2),
          ("modeGracefulShutdown", 1))
    )


_SPDUOutletConfigMSPallOutletCtrlMode_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPallOutletCtrlMode_Object = MibTableColumn
sPDUOutletConfigMSPallOutletCtrlMode = _SPDUOutletConfigMSPallOutletCtrlMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 1, 1, 1, 5),
    _SPDUOutletConfigMSPallOutletCtrlMode_Type()
)
sPDUOutletConfigMSPallOutletCtrlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPallOutletCtrlMode.setStatus("mandatory")
_SPDUOutletConfigMSPgs_ObjectIdentity = ObjectIdentity
sPDUOutletConfigMSPgs = _SPDUOutletConfigMSPgs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2)
)
_SPDUOutletConfigMSPgsTable_Object = MibTable
sPDUOutletConfigMSPgsTable = _SPDUOutletConfigMSPgsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1)
)
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsTable.setStatus("mandatory")
_SPDUOutletConfigMSPgsEntry_Object = MibTableRow
sPDUOutletConfigMSPgsEntry = _SPDUOutletConfigMSPgsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1)
)
sPDUOutletConfigMSPgsEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUOutletConfigMSPgsIndex"),
    (0, "POWERNET-MIB", "sPDUOutletConfigMSPgsOutletIndex"),
)
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsEntry.setStatus("mandatory")
_SPDUOutletConfigMSPgsIndex_Type = Integer32
_SPDUOutletConfigMSPgsIndex_Object = MibTableColumn
sPDUOutletConfigMSPgsIndex = _SPDUOutletConfigMSPgsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 1),
    _SPDUOutletConfigMSPgsIndex_Type()
)
sPDUOutletConfigMSPgsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsIndex.setStatus("mandatory")
_SPDUOutletConfigMSPgsName_Type = DisplayString
_SPDUOutletConfigMSPgsName_Object = MibTableColumn
sPDUOutletConfigMSPgsName = _SPDUOutletConfigMSPgsName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 2),
    _SPDUOutletConfigMSPgsName_Type()
)
sPDUOutletConfigMSPgsName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsName.setStatus("mandatory")
_SPDUOutletConfigMSPgsOutletIndex_Type = Integer32
_SPDUOutletConfigMSPgsOutletIndex_Object = MibTableColumn
sPDUOutletConfigMSPgsOutletIndex = _SPDUOutletConfigMSPgsOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 3),
    _SPDUOutletConfigMSPgsOutletIndex_Type()
)
sPDUOutletConfigMSPgsOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsOutletIndex.setStatus("mandatory")
_SPDUOutletConfigMSPgsOutletName_Type = DisplayString
_SPDUOutletConfigMSPgsOutletName_Object = MibTableColumn
sPDUOutletConfigMSPgsOutletName = _SPDUOutletConfigMSPgsOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 4),
    _SPDUOutletConfigMSPgsOutletName_Type()
)
sPDUOutletConfigMSPgsOutletName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsOutletName.setStatus("mandatory")


class _SPDUOutletConfigMSPgsOutletCtrlMode_Type(Integer32):
    """Custom type sPDUOutletConfigMSPgsOutletCtrlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("modeAnnunciator", 2),
          ("modeGracefulShutdown", 1))
    )


_SPDUOutletConfigMSPgsOutletCtrlMode_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPgsOutletCtrlMode_Object = MibTableColumn
sPDUOutletConfigMSPgsOutletCtrlMode = _SPDUOutletConfigMSPgsOutletCtrlMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 5),
    _SPDUOutletConfigMSPgsOutletCtrlMode_Type()
)
sPDUOutletConfigMSPgsOutletCtrlMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsOutletCtrlMode.setStatus("mandatory")


class _SPDUOutletConfigMSPgsDeviceConfirm_Type(Integer32):
    """Custom type sPDUOutletConfigMSPgsDeviceConfirm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deviceConfirmNo", 1),
          ("deviceConfirmYes", 2))
    )


_SPDUOutletConfigMSPgsDeviceConfirm_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPgsDeviceConfirm_Object = MibTableColumn
sPDUOutletConfigMSPgsDeviceConfirm = _SPDUOutletConfigMSPgsDeviceConfirm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 6),
    _SPDUOutletConfigMSPgsDeviceConfirm_Type()
)
sPDUOutletConfigMSPgsDeviceConfirm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsDeviceConfirm.setStatus("mandatory")


class _SPDUOutletConfigMSPgsLowBattWarning_Type(Integer32):
    """Custom type sPDUOutletConfigMSPgsLowBattWarning based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-2, 9999),
    )


_SPDUOutletConfigMSPgsLowBattWarning_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPgsLowBattWarning_Object = MibTableColumn
sPDUOutletConfigMSPgsLowBattWarning = _SPDUOutletConfigMSPgsLowBattWarning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 7),
    _SPDUOutletConfigMSPgsLowBattWarning_Type()
)
sPDUOutletConfigMSPgsLowBattWarning.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsLowBattWarning.setStatus("mandatory")


class _SPDUOutletConfigMSPgsLowBattMult_Type(Integer32):
    """Custom type sPDUOutletConfigMSPgsLowBattMult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_SPDUOutletConfigMSPgsLowBattMult_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPgsLowBattMult_Object = MibTableColumn
sPDUOutletConfigMSPgsLowBattMult = _SPDUOutletConfigMSPgsLowBattMult_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 8),
    _SPDUOutletConfigMSPgsLowBattMult_Type()
)
sPDUOutletConfigMSPgsLowBattMult.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsLowBattMult.setStatus("mandatory")


class _SPDUOutletConfigMSPgsRestartDelay_Type(Integer32):
    """Custom type sPDUOutletConfigMSPgsRestartDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 9999),
    )


_SPDUOutletConfigMSPgsRestartDelay_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPgsRestartDelay_Object = MibTableColumn
sPDUOutletConfigMSPgsRestartDelay = _SPDUOutletConfigMSPgsRestartDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 9),
    _SPDUOutletConfigMSPgsRestartDelay_Type()
)
sPDUOutletConfigMSPgsRestartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsRestartDelay.setStatus("mandatory")


class _SPDUOutletConfigMSPgsPowerOnDelay_Type(Integer32):
    """Custom type sPDUOutletConfigMSPgsPowerOnDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-1, 9999),
    )


_SPDUOutletConfigMSPgsPowerOnDelay_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPgsPowerOnDelay_Object = MibTableColumn
sPDUOutletConfigMSPgsPowerOnDelay = _SPDUOutletConfigMSPgsPowerOnDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 10),
    _SPDUOutletConfigMSPgsPowerOnDelay_Type()
)
sPDUOutletConfigMSPgsPowerOnDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsPowerOnDelay.setStatus("mandatory")


class _SPDUOutletConfigMSPgsPowerOffDelay_Type(Integer32):
    """Custom type sPDUOutletConfigMSPgsPowerOffDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_SPDUOutletConfigMSPgsPowerOffDelay_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPgsPowerOffDelay_Object = MibTableColumn
sPDUOutletConfigMSPgsPowerOffDelay = _SPDUOutletConfigMSPgsPowerOffDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 11),
    _SPDUOutletConfigMSPgsPowerOffDelay_Type()
)
sPDUOutletConfigMSPgsPowerOffDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsPowerOffDelay.setStatus("mandatory")


class _SPDUOutletConfigMSPgsBattCapThresh_Type(Integer32):
    """Custom type sPDUOutletConfigMSPgsBattCapThresh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_SPDUOutletConfigMSPgsBattCapThresh_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPgsBattCapThresh_Object = MibTableColumn
sPDUOutletConfigMSPgsBattCapThresh = _SPDUOutletConfigMSPgsBattCapThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 12),
    _SPDUOutletConfigMSPgsBattCapThresh_Type()
)
sPDUOutletConfigMSPgsBattCapThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsBattCapThresh.setStatus("mandatory")


class _SPDUOutletConfigMSPgsRebootDuration_Type(Integer32):
    """Custom type sPDUOutletConfigMSPgsRebootDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_SPDUOutletConfigMSPgsRebootDuration_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPgsRebootDuration_Object = MibTableColumn
sPDUOutletConfigMSPgsRebootDuration = _SPDUOutletConfigMSPgsRebootDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 2, 1, 1, 13),
    _SPDUOutletConfigMSPgsRebootDuration_Type()
)
sPDUOutletConfigMSPgsRebootDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPgsRebootDuration.setStatus("mandatory")
_SPDUOutletConfigMSPannun_ObjectIdentity = ObjectIdentity
sPDUOutletConfigMSPannun = _SPDUOutletConfigMSPannun_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3)
)
_SPDUOutletConfigMSPannunTable_Object = MibTable
sPDUOutletConfigMSPannunTable = _SPDUOutletConfigMSPannunTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1)
)
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPannunTable.setStatus("mandatory")
_SPDUOutletConfigMSPannunEntry_Object = MibTableRow
sPDUOutletConfigMSPannunEntry = _SPDUOutletConfigMSPannunEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1)
)
sPDUOutletConfigMSPannunEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUOutletConfigMSPannunIndex"),
    (0, "POWERNET-MIB", "sPDUOutletConfigMSPannunOutletIndex"),
)
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPannunEntry.setStatus("mandatory")
_SPDUOutletConfigMSPannunIndex_Type = Integer32
_SPDUOutletConfigMSPannunIndex_Object = MibTableColumn
sPDUOutletConfigMSPannunIndex = _SPDUOutletConfigMSPannunIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 1),
    _SPDUOutletConfigMSPannunIndex_Type()
)
sPDUOutletConfigMSPannunIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPannunIndex.setStatus("mandatory")
_SPDUOutletConfigMSPannunName_Type = DisplayString
_SPDUOutletConfigMSPannunName_Object = MibTableColumn
sPDUOutletConfigMSPannunName = _SPDUOutletConfigMSPannunName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 2),
    _SPDUOutletConfigMSPannunName_Type()
)
sPDUOutletConfigMSPannunName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPannunName.setStatus("mandatory")
_SPDUOutletConfigMSPannunOutletIndex_Type = Integer32
_SPDUOutletConfigMSPannunOutletIndex_Object = MibTableColumn
sPDUOutletConfigMSPannunOutletIndex = _SPDUOutletConfigMSPannunOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 3),
    _SPDUOutletConfigMSPannunOutletIndex_Type()
)
sPDUOutletConfigMSPannunOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPannunOutletIndex.setStatus("mandatory")
_SPDUOutletConfigMSPannunOutletName_Type = DisplayString
_SPDUOutletConfigMSPannunOutletName_Object = MibTableColumn
sPDUOutletConfigMSPannunOutletName = _SPDUOutletConfigMSPannunOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 4),
    _SPDUOutletConfigMSPannunOutletName_Type()
)
sPDUOutletConfigMSPannunOutletName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPannunOutletName.setStatus("mandatory")


class _SPDUOutletConfigMSPannunOutletCtrlMode_Type(Integer32):
    """Custom type sPDUOutletConfigMSPannunOutletCtrlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("modeAnnunciator", 2),
          ("modeGracefulShutdown", 1))
    )


_SPDUOutletConfigMSPannunOutletCtrlMode_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPannunOutletCtrlMode_Object = MibTableColumn
sPDUOutletConfigMSPannunOutletCtrlMode = _SPDUOutletConfigMSPannunOutletCtrlMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 5),
    _SPDUOutletConfigMSPannunOutletCtrlMode_Type()
)
sPDUOutletConfigMSPannunOutletCtrlMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPannunOutletCtrlMode.setStatus("mandatory")


class _SPDUOutletConfigMSPannunInitialState_Type(Integer32):
    """Custom type sPDUOutletConfigMSPannunInitialState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("initialStateOff", 1),
          ("initialStateOn", 2))
    )


_SPDUOutletConfigMSPannunInitialState_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPannunInitialState_Object = MibTableColumn
sPDUOutletConfigMSPannunInitialState = _SPDUOutletConfigMSPannunInitialState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 6),
    _SPDUOutletConfigMSPannunInitialState_Type()
)
sPDUOutletConfigMSPannunInitialState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPannunInitialState.setStatus("mandatory")


class _SPDUOutletConfigMSPannunAlarmActionDly_Type(Integer32):
    """Custom type sPDUOutletConfigMSPannunAlarmActionDly based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_SPDUOutletConfigMSPannunAlarmActionDly_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPannunAlarmActionDly_Object = MibTableColumn
sPDUOutletConfigMSPannunAlarmActionDly = _SPDUOutletConfigMSPannunAlarmActionDly_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 3, 1, 1, 7),
    _SPDUOutletConfigMSPannunAlarmActionDly_Type()
)
sPDUOutletConfigMSPannunAlarmActionDly.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPannunAlarmActionDly.setStatus("mandatory")
_SPDUOutletConfigMSPmups_ObjectIdentity = ObjectIdentity
sPDUOutletConfigMSPmups = _SPDUOutletConfigMSPmups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4)
)
_SPDUOutletConfigMSPmupsTable_Object = MibTable
sPDUOutletConfigMSPmupsTable = _SPDUOutletConfigMSPmupsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1)
)
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsTable.setStatus("mandatory")
_SPDUOutletConfigMSPmupsEntry_Object = MibTableRow
sPDUOutletConfigMSPmupsEntry = _SPDUOutletConfigMSPmupsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1)
)
sPDUOutletConfigMSPmupsEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUOutletConfigMSPmupsIndex"),
    (0, "POWERNET-MIB", "sPDUOutletConfigMSPmupsOutletIndex"),
)
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsEntry.setStatus("mandatory")
_SPDUOutletConfigMSPmupsIndex_Type = Integer32
_SPDUOutletConfigMSPmupsIndex_Object = MibTableColumn
sPDUOutletConfigMSPmupsIndex = _SPDUOutletConfigMSPmupsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 1),
    _SPDUOutletConfigMSPmupsIndex_Type()
)
sPDUOutletConfigMSPmupsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsIndex.setStatus("mandatory")
_SPDUOutletConfigMSPmupsName_Type = DisplayString
_SPDUOutletConfigMSPmupsName_Object = MibTableColumn
sPDUOutletConfigMSPmupsName = _SPDUOutletConfigMSPmupsName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 2),
    _SPDUOutletConfigMSPmupsName_Type()
)
sPDUOutletConfigMSPmupsName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsName.setStatus("mandatory")
_SPDUOutletConfigMSPmupsOutletIndex_Type = Integer32
_SPDUOutletConfigMSPmupsOutletIndex_Object = MibTableColumn
sPDUOutletConfigMSPmupsOutletIndex = _SPDUOutletConfigMSPmupsOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 3),
    _SPDUOutletConfigMSPmupsOutletIndex_Type()
)
sPDUOutletConfigMSPmupsOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsOutletIndex.setStatus("mandatory")
_SPDUOutletConfigMSPmupsOutletName_Type = DisplayString
_SPDUOutletConfigMSPmupsOutletName_Object = MibTableColumn
sPDUOutletConfigMSPmupsOutletName = _SPDUOutletConfigMSPmupsOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 4),
    _SPDUOutletConfigMSPmupsOutletName_Type()
)
sPDUOutletConfigMSPmupsOutletName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsOutletName.setStatus("mandatory")


class _SPDUOutletConfigMSPmupsZone1_Type(Integer32):
    """Custom type sPDUOutletConfigMSPmupsZone1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarm", 1),
          ("enableAlarm", 2))
    )


_SPDUOutletConfigMSPmupsZone1_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPmupsZone1_Object = MibTableColumn
sPDUOutletConfigMSPmupsZone1 = _SPDUOutletConfigMSPmupsZone1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 5),
    _SPDUOutletConfigMSPmupsZone1_Type()
)
sPDUOutletConfigMSPmupsZone1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsZone1.setStatus("mandatory")


class _SPDUOutletConfigMSPmupsZone2_Type(Integer32):
    """Custom type sPDUOutletConfigMSPmupsZone2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarm", 1),
          ("enableAlarm", 2))
    )


_SPDUOutletConfigMSPmupsZone2_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPmupsZone2_Object = MibTableColumn
sPDUOutletConfigMSPmupsZone2 = _SPDUOutletConfigMSPmupsZone2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 6),
    _SPDUOutletConfigMSPmupsZone2_Type()
)
sPDUOutletConfigMSPmupsZone2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsZone2.setStatus("mandatory")


class _SPDUOutletConfigMSPmupsZone3_Type(Integer32):
    """Custom type sPDUOutletConfigMSPmupsZone3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarm", 1),
          ("enableAlarm", 2))
    )


_SPDUOutletConfigMSPmupsZone3_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPmupsZone3_Object = MibTableColumn
sPDUOutletConfigMSPmupsZone3 = _SPDUOutletConfigMSPmupsZone3_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 7),
    _SPDUOutletConfigMSPmupsZone3_Type()
)
sPDUOutletConfigMSPmupsZone3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsZone3.setStatus("mandatory")


class _SPDUOutletConfigMSPmupsZone4_Type(Integer32):
    """Custom type sPDUOutletConfigMSPmupsZone4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarm", 1),
          ("enableAlarm", 2))
    )


_SPDUOutletConfigMSPmupsZone4_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPmupsZone4_Object = MibTableColumn
sPDUOutletConfigMSPmupsZone4 = _SPDUOutletConfigMSPmupsZone4_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 8),
    _SPDUOutletConfigMSPmupsZone4_Type()
)
sPDUOutletConfigMSPmupsZone4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsZone4.setStatus("mandatory")


class _SPDUOutletConfigMSPmupsP1LowHum_Type(Integer32):
    """Custom type sPDUOutletConfigMSPmupsP1LowHum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarm", 1),
          ("enableAlarm", 2))
    )


_SPDUOutletConfigMSPmupsP1LowHum_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPmupsP1LowHum_Object = MibTableColumn
sPDUOutletConfigMSPmupsP1LowHum = _SPDUOutletConfigMSPmupsP1LowHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 9),
    _SPDUOutletConfigMSPmupsP1LowHum_Type()
)
sPDUOutletConfigMSPmupsP1LowHum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsP1LowHum.setStatus("mandatory")


class _SPDUOutletConfigMSPmupsP1HiHum_Type(Integer32):
    """Custom type sPDUOutletConfigMSPmupsP1HiHum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarm", 1),
          ("enableAlarm", 2))
    )


_SPDUOutletConfigMSPmupsP1HiHum_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPmupsP1HiHum_Object = MibTableColumn
sPDUOutletConfigMSPmupsP1HiHum = _SPDUOutletConfigMSPmupsP1HiHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 10),
    _SPDUOutletConfigMSPmupsP1HiHum_Type()
)
sPDUOutletConfigMSPmupsP1HiHum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsP1HiHum.setStatus("mandatory")


class _SPDUOutletConfigMSPmupsP1LowTemp_Type(Integer32):
    """Custom type sPDUOutletConfigMSPmupsP1LowTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarm", 1),
          ("enableAlarm", 2))
    )


_SPDUOutletConfigMSPmupsP1LowTemp_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPmupsP1LowTemp_Object = MibTableColumn
sPDUOutletConfigMSPmupsP1LowTemp = _SPDUOutletConfigMSPmupsP1LowTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 11),
    _SPDUOutletConfigMSPmupsP1LowTemp_Type()
)
sPDUOutletConfigMSPmupsP1LowTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsP1LowTemp.setStatus("mandatory")


class _SPDUOutletConfigMSPmupsP1HiTemp_Type(Integer32):
    """Custom type sPDUOutletConfigMSPmupsP1HiTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarm", 1),
          ("enableAlarm", 2))
    )


_SPDUOutletConfigMSPmupsP1HiTemp_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPmupsP1HiTemp_Object = MibTableColumn
sPDUOutletConfigMSPmupsP1HiTemp = _SPDUOutletConfigMSPmupsP1HiTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 12),
    _SPDUOutletConfigMSPmupsP1HiTemp_Type()
)
sPDUOutletConfigMSPmupsP1HiTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsP1HiTemp.setStatus("mandatory")


class _SPDUOutletConfigMSPmupsP2LowHum_Type(Integer32):
    """Custom type sPDUOutletConfigMSPmupsP2LowHum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarm", 1),
          ("enableAlarm", 2))
    )


_SPDUOutletConfigMSPmupsP2LowHum_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPmupsP2LowHum_Object = MibTableColumn
sPDUOutletConfigMSPmupsP2LowHum = _SPDUOutletConfigMSPmupsP2LowHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 13),
    _SPDUOutletConfigMSPmupsP2LowHum_Type()
)
sPDUOutletConfigMSPmupsP2LowHum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsP2LowHum.setStatus("mandatory")


class _SPDUOutletConfigMSPmupsP2HiHum_Type(Integer32):
    """Custom type sPDUOutletConfigMSPmupsP2HiHum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarm", 1),
          ("enableAlarm", 2))
    )


_SPDUOutletConfigMSPmupsP2HiHum_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPmupsP2HiHum_Object = MibTableColumn
sPDUOutletConfigMSPmupsP2HiHum = _SPDUOutletConfigMSPmupsP2HiHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 14),
    _SPDUOutletConfigMSPmupsP2HiHum_Type()
)
sPDUOutletConfigMSPmupsP2HiHum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsP2HiHum.setStatus("mandatory")


class _SPDUOutletConfigMSPmupsP2LowTemp_Type(Integer32):
    """Custom type sPDUOutletConfigMSPmupsP2LowTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarm", 1),
          ("enableAlarm", 2))
    )


_SPDUOutletConfigMSPmupsP2LowTemp_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPmupsP2LowTemp_Object = MibTableColumn
sPDUOutletConfigMSPmupsP2LowTemp = _SPDUOutletConfigMSPmupsP2LowTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 15),
    _SPDUOutletConfigMSPmupsP2LowTemp_Type()
)
sPDUOutletConfigMSPmupsP2LowTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsP2LowTemp.setStatus("mandatory")


class _SPDUOutletConfigMSPmupsP2HiTemp_Type(Integer32):
    """Custom type sPDUOutletConfigMSPmupsP2HiTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarm", 1),
          ("enableAlarm", 2))
    )


_SPDUOutletConfigMSPmupsP2HiTemp_Type.__name__ = "Integer32"
_SPDUOutletConfigMSPmupsP2HiTemp_Object = MibTableColumn
sPDUOutletConfigMSPmupsP2HiTemp = _SPDUOutletConfigMSPmupsP2HiTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 6, 4, 1, 1, 16),
    _SPDUOutletConfigMSPmupsP2HiTemp_Type()
)
sPDUOutletConfigMSPmupsP2HiTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPDUOutletConfigMSPmupsP2HiTemp.setStatus("mandatory")
_SPDUOutletStatusMSP_ObjectIdentity = ObjectIdentity
sPDUOutletStatusMSP = _SPDUOutletStatusMSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7)
)
_SPDUOutletStatusMSPTable_Object = MibTable
sPDUOutletStatusMSPTable = _SPDUOutletStatusMSPTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1)
)
if mibBuilder.loadTexts:
    sPDUOutletStatusMSPTable.setStatus("mandatory")
_SPDUOutletStatusMSPEntry_Object = MibTableRow
sPDUOutletStatusMSPEntry = _SPDUOutletStatusMSPEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1)
)
sPDUOutletStatusMSPEntry.setIndexNames(
    (0, "POWERNET-MIB", "sPDUOutletStatusMSPIndex"),
    (0, "POWERNET-MIB", "sPDUOutletStatusMSPOutletIndex"),
)
if mibBuilder.loadTexts:
    sPDUOutletStatusMSPEntry.setStatus("mandatory")
_SPDUOutletStatusMSPIndex_Type = Integer32
_SPDUOutletStatusMSPIndex_Object = MibTableColumn
sPDUOutletStatusMSPIndex = _SPDUOutletStatusMSPIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 1),
    _SPDUOutletStatusMSPIndex_Type()
)
sPDUOutletStatusMSPIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusMSPIndex.setStatus("mandatory")
_SPDUOutletStatusMSPName_Type = DisplayString
_SPDUOutletStatusMSPName_Object = MibTableColumn
sPDUOutletStatusMSPName = _SPDUOutletStatusMSPName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 2),
    _SPDUOutletStatusMSPName_Type()
)
sPDUOutletStatusMSPName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusMSPName.setStatus("mandatory")
_SPDUOutletStatusMSPOutletIndex_Type = Integer32
_SPDUOutletStatusMSPOutletIndex_Object = MibTableColumn
sPDUOutletStatusMSPOutletIndex = _SPDUOutletStatusMSPOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 3),
    _SPDUOutletStatusMSPOutletIndex_Type()
)
sPDUOutletStatusMSPOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusMSPOutletIndex.setStatus("mandatory")
_SPDUOutletStatusMSPOutletName_Type = DisplayString
_SPDUOutletStatusMSPOutletName_Object = MibTableColumn
sPDUOutletStatusMSPOutletName = _SPDUOutletStatusMSPOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 4),
    _SPDUOutletStatusMSPOutletName_Type()
)
sPDUOutletStatusMSPOutletName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusMSPOutletName.setStatus("mandatory")


class _SPDUOutletStatusMSPOutletState_Type(Integer32):
    """Custom type sPDUOutletStatusMSPOutletState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("outletStatusMSPOff", 2),
          ("outletStatusMSPOn", 1))
    )


_SPDUOutletStatusMSPOutletState_Type.__name__ = "Integer32"
_SPDUOutletStatusMSPOutletState_Object = MibTableColumn
sPDUOutletStatusMSPOutletState = _SPDUOutletStatusMSPOutletState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 5),
    _SPDUOutletStatusMSPOutletState_Type()
)
sPDUOutletStatusMSPOutletState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusMSPOutletState.setStatus("mandatory")


class _SPDUOutletStatusMSPCommandPending_Type(Integer32):
    """Custom type sPDUOutletStatusMSPCommandPending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("outletStatusMSPCommandPending", 1),
          ("outletStatusMSPNoCommandPending", 2))
    )


_SPDUOutletStatusMSPCommandPending_Type.__name__ = "Integer32"
_SPDUOutletStatusMSPCommandPending_Object = MibTableColumn
sPDUOutletStatusMSPCommandPending = _SPDUOutletStatusMSPCommandPending_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 6),
    _SPDUOutletStatusMSPCommandPending_Type()
)
sPDUOutletStatusMSPCommandPending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusMSPCommandPending.setStatus("mandatory")


class _SPDUOutletStatusMSPOutletCtrlMode_Type(Integer32):
    """Custom type sPDUOutletStatusMSPOutletCtrlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("modeAnnunciator", 2),
          ("modeGracefulShutdown", 1))
    )


_SPDUOutletStatusMSPOutletCtrlMode_Type.__name__ = "Integer32"
_SPDUOutletStatusMSPOutletCtrlMode_Object = MibTableColumn
sPDUOutletStatusMSPOutletCtrlMode = _SPDUOutletStatusMSPOutletCtrlMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 6, 7, 1, 1, 7),
    _SPDUOutletStatusMSPOutletCtrlMode_Type()
)
sPDUOutletStatusMSPOutletCtrlMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPDUOutletStatusMSPOutletCtrlMode.setStatus("mandatory")
_DcDM3_ObjectIdentity = ObjectIdentity
dcDM3 = _DcDM3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7)
)
_Dm3Ident_ObjectIdentity = ObjectIdentity
dm3Ident = _Dm3Ident_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1)
)
_Dm3IdentSystem_ObjectIdentity = ObjectIdentity
dm3IdentSystem = _Dm3IdentSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1)
)
_Dm3IdentSysDescriptionTableSize_Type = Integer32
_Dm3IdentSysDescriptionTableSize_Object = MibScalar
dm3IdentSysDescriptionTableSize = _Dm3IdentSysDescriptionTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 1),
    _Dm3IdentSysDescriptionTableSize_Type()
)
dm3IdentSysDescriptionTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3IdentSysDescriptionTableSize.setStatus("mandatory")
_Dm3IdentSysDescriptionTable_Object = MibTable
dm3IdentSysDescriptionTable = _Dm3IdentSysDescriptionTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2)
)
if mibBuilder.loadTexts:
    dm3IdentSysDescriptionTable.setStatus("mandatory")
_Dm3IdentSysDescriptionEntry_Object = MibTableRow
dm3IdentSysDescriptionEntry = _Dm3IdentSysDescriptionEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1)
)
dm3IdentSysDescriptionEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3IdentSysDescriptionIndex"),
)
if mibBuilder.loadTexts:
    dm3IdentSysDescriptionEntry.setStatus("mandatory")
_Dm3IdentSysDescriptionIndex_Type = Integer32
_Dm3IdentSysDescriptionIndex_Object = MibTableColumn
dm3IdentSysDescriptionIndex = _Dm3IdentSysDescriptionIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1, 1),
    _Dm3IdentSysDescriptionIndex_Type()
)
dm3IdentSysDescriptionIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3IdentSysDescriptionIndex.setStatus("mandatory")
_Dm3IdentSysDescriptionText_Type = DisplayString
_Dm3IdentSysDescriptionText_Object = MibTableColumn
dm3IdentSysDescriptionText = _Dm3IdentSysDescriptionText_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 2, 1, 2),
    _Dm3IdentSysDescriptionText_Type()
)
dm3IdentSysDescriptionText.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3IdentSysDescriptionText.setStatus("mandatory")
_Dm3IdentSysModel_Type = Integer32
_Dm3IdentSysModel_Object = MibScalar
dm3IdentSysModel = _Dm3IdentSysModel_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 3),
    _Dm3IdentSysModel_Type()
)
dm3IdentSysModel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3IdentSysModel.setStatus("mandatory")
_Dm3IdentSysCntrlRev_Type = Integer32
_Dm3IdentSysCntrlRev_Object = MibScalar
dm3IdentSysCntrlRev = _Dm3IdentSysCntrlRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 4),
    _Dm3IdentSysCntrlRev_Type()
)
dm3IdentSysCntrlRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3IdentSysCntrlRev.setStatus("mandatory")
_Dm3IdentSysFWVersion_Type = Integer32
_Dm3IdentSysFWVersion_Object = MibScalar
dm3IdentSysFWVersion = _Dm3IdentSysFWVersion_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 1, 1, 5),
    _Dm3IdentSysFWVersion_Type()
)
dm3IdentSysFWVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3IdentSysFWVersion.setStatus("mandatory")
_Dm3Config_ObjectIdentity = ObjectIdentity
dm3Config = _Dm3Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2)
)
_Dm3ConfigSystem_ObjectIdentity = ObjectIdentity
dm3ConfigSystem = _Dm3ConfigSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1)
)
_Dm3ConfigSysDescriptionTableSize_Type = Integer32
_Dm3ConfigSysDescriptionTableSize_Object = MibScalar
dm3ConfigSysDescriptionTableSize = _Dm3ConfigSysDescriptionTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 1),
    _Dm3ConfigSysDescriptionTableSize_Type()
)
dm3ConfigSysDescriptionTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3ConfigSysDescriptionTableSize.setStatus("mandatory")
_Dm3ConfigSysDescriptionTable_Object = MibTable
dm3ConfigSysDescriptionTable = _Dm3ConfigSysDescriptionTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2)
)
if mibBuilder.loadTexts:
    dm3ConfigSysDescriptionTable.setStatus("mandatory")
_Dm3ConfigSysDescriptionEntry_Object = MibTableRow
dm3ConfigSysDescriptionEntry = _Dm3ConfigSysDescriptionEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1)
)
dm3ConfigSysDescriptionEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3ConfigSysDescriptionIndex"),
)
if mibBuilder.loadTexts:
    dm3ConfigSysDescriptionEntry.setStatus("mandatory")
_Dm3ConfigSysDescriptionIndex_Type = Integer32
_Dm3ConfigSysDescriptionIndex_Object = MibTableColumn
dm3ConfigSysDescriptionIndex = _Dm3ConfigSysDescriptionIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1, 1),
    _Dm3ConfigSysDescriptionIndex_Type()
)
dm3ConfigSysDescriptionIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3ConfigSysDescriptionIndex.setStatus("mandatory")
_Dm3ConfigSysDescriptionText_Type = DisplayString
_Dm3ConfigSysDescriptionText_Object = MibTableColumn
dm3ConfigSysDescriptionText = _Dm3ConfigSysDescriptionText_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 2, 1, 2),
    _Dm3ConfigSysDescriptionText_Type()
)
dm3ConfigSysDescriptionText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigSysDescriptionText.setStatus("mandatory")
_Dm3ConfigSysHighTempThresh_Type = Integer32
_Dm3ConfigSysHighTempThresh_Object = MibScalar
dm3ConfigSysHighTempThresh = _Dm3ConfigSysHighTempThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 3),
    _Dm3ConfigSysHighTempThresh_Type()
)
dm3ConfigSysHighTempThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigSysHighTempThresh.setStatus("mandatory")


class _Dm3ConfigSysHighTempAlarm_Type(Integer32):
    """Custom type dm3ConfigSysHighTempAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigSysHighTempAlarm_Type.__name__ = "Integer32"
_Dm3ConfigSysHighTempAlarm_Object = MibScalar
dm3ConfigSysHighTempAlarm = _Dm3ConfigSysHighTempAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 4),
    _Dm3ConfigSysHighTempAlarm_Type()
)
dm3ConfigSysHighTempAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigSysHighTempAlarm.setStatus("mandatory")
_Dm3ConfigSysLowTempThresh_Type = Integer32
_Dm3ConfigSysLowTempThresh_Object = MibScalar
dm3ConfigSysLowTempThresh = _Dm3ConfigSysLowTempThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 5),
    _Dm3ConfigSysLowTempThresh_Type()
)
dm3ConfigSysLowTempThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigSysLowTempThresh.setStatus("mandatory")


class _Dm3ConfigSysLowTempAlarm_Type(Integer32):
    """Custom type dm3ConfigSysLowTempAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigSysLowTempAlarm_Type.__name__ = "Integer32"
_Dm3ConfigSysLowTempAlarm_Object = MibScalar
dm3ConfigSysLowTempAlarm = _Dm3ConfigSysLowTempAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 6),
    _Dm3ConfigSysLowTempAlarm_Type()
)
dm3ConfigSysLowTempAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigSysLowTempAlarm.setStatus("mandatory")


class _Dm3ConfigSysHardwareTempAlarm_Type(Integer32):
    """Custom type dm3ConfigSysHardwareTempAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigSysHardwareTempAlarm_Type.__name__ = "Integer32"
_Dm3ConfigSysHardwareTempAlarm_Object = MibScalar
dm3ConfigSysHardwareTempAlarm = _Dm3ConfigSysHardwareTempAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 7),
    _Dm3ConfigSysHardwareTempAlarm_Type()
)
dm3ConfigSysHardwareTempAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigSysHardwareTempAlarm.setStatus("mandatory")


class _Dm3ConfigSysRemoteAccess_Type(Integer32):
    """Custom type dm3ConfigSysRemoteAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("accessDisabled", 2),
          ("accessEnabled", 1))
    )


_Dm3ConfigSysRemoteAccess_Type.__name__ = "Integer32"
_Dm3ConfigSysRemoteAccess_Object = MibScalar
dm3ConfigSysRemoteAccess = _Dm3ConfigSysRemoteAccess_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 1, 8),
    _Dm3ConfigSysRemoteAccess_Type()
)
dm3ConfigSysRemoteAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigSysRemoteAccess.setStatus("mandatory")
_Dm3ConfigLVD_ObjectIdentity = ObjectIdentity
dm3ConfigLVD = _Dm3ConfigLVD_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2)
)
_Dm3ConfigLVDTableSize_Type = Integer32
_Dm3ConfigLVDTableSize_Object = MibScalar
dm3ConfigLVDTableSize = _Dm3ConfigLVDTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 1),
    _Dm3ConfigLVDTableSize_Type()
)
dm3ConfigLVDTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3ConfigLVDTableSize.setStatus("mandatory")
_Dm3ConfigLVDTable_Object = MibTable
dm3ConfigLVDTable = _Dm3ConfigLVDTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2)
)
if mibBuilder.loadTexts:
    dm3ConfigLVDTable.setStatus("mandatory")
_Dm3ConfigLVDEntry_Object = MibTableRow
dm3ConfigLVDEntry = _Dm3ConfigLVDEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1)
)
dm3ConfigLVDEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3ConfigLVDIndex"),
)
if mibBuilder.loadTexts:
    dm3ConfigLVDEntry.setStatus("mandatory")
_Dm3ConfigLVDIndex_Type = Integer32
_Dm3ConfigLVDIndex_Object = MibTableColumn
dm3ConfigLVDIndex = _Dm3ConfigLVDIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 1),
    _Dm3ConfigLVDIndex_Type()
)
dm3ConfigLVDIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3ConfigLVDIndex.setStatus("mandatory")
_Dm3ConfigLVDName_Type = DisplayString
_Dm3ConfigLVDName_Object = MibTableColumn
dm3ConfigLVDName = _Dm3ConfigLVDName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 2),
    _Dm3ConfigLVDName_Type()
)
dm3ConfigLVDName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigLVDName.setStatus("mandatory")


class _Dm3ConfigLVDEnable_Type(Integer32):
    """Custom type dm3ConfigLVDEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabledNo", 2),
          ("enabledYes", 1))
    )


_Dm3ConfigLVDEnable_Type.__name__ = "Integer32"
_Dm3ConfigLVDEnable_Object = MibTableColumn
dm3ConfigLVDEnable = _Dm3ConfigLVDEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 3),
    _Dm3ConfigLVDEnable_Type()
)
dm3ConfigLVDEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigLVDEnable.setStatus("mandatory")
_Dm3ConfigLVDTripThresh_Type = Integer32
_Dm3ConfigLVDTripThresh_Object = MibTableColumn
dm3ConfigLVDTripThresh = _Dm3ConfigLVDTripThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 4),
    _Dm3ConfigLVDTripThresh_Type()
)
dm3ConfigLVDTripThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigLVDTripThresh.setStatus("mandatory")
_Dm3ConfigLVDResetThresh_Type = Integer32
_Dm3ConfigLVDResetThresh_Object = MibTableColumn
dm3ConfigLVDResetThresh = _Dm3ConfigLVDResetThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 5),
    _Dm3ConfigLVDResetThresh_Type()
)
dm3ConfigLVDResetThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigLVDResetThresh.setStatus("mandatory")


class _Dm3ConfigLVDOpenAlarm_Type(Integer32):
    """Custom type dm3ConfigLVDOpenAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigLVDOpenAlarm_Type.__name__ = "Integer32"
_Dm3ConfigLVDOpenAlarm_Object = MibTableColumn
dm3ConfigLVDOpenAlarm = _Dm3ConfigLVDOpenAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 6),
    _Dm3ConfigLVDOpenAlarm_Type()
)
dm3ConfigLVDOpenAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigLVDOpenAlarm.setStatus("mandatory")


class _Dm3ConfigLVDHWAlarm_Type(Integer32):
    """Custom type dm3ConfigLVDHWAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigLVDHWAlarm_Type.__name__ = "Integer32"
_Dm3ConfigLVDHWAlarm_Object = MibTableColumn
dm3ConfigLVDHWAlarm = _Dm3ConfigLVDHWAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 2, 2, 1, 7),
    _Dm3ConfigLVDHWAlarm_Type()
)
dm3ConfigLVDHWAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigLVDHWAlarm.setStatus("mandatory")
_Dm3ConfigBattery_ObjectIdentity = ObjectIdentity
dm3ConfigBattery = _Dm3ConfigBattery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3)
)
_Dm3ConfigBattFloatVolt_Type = Integer32
_Dm3ConfigBattFloatVolt_Object = MibScalar
dm3ConfigBattFloatVolt = _Dm3ConfigBattFloatVolt_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 1),
    _Dm3ConfigBattFloatVolt_Type()
)
dm3ConfigBattFloatVolt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattFloatVolt.setStatus("mandatory")
_Dm3ConfigBattMaxRecharge_Type = Integer32
_Dm3ConfigBattMaxRecharge_Object = MibScalar
dm3ConfigBattMaxRecharge = _Dm3ConfigBattMaxRecharge_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 2),
    _Dm3ConfigBattMaxRecharge_Type()
)
dm3ConfigBattMaxRecharge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattMaxRecharge.setStatus("mandatory")
_Dm3ConfigBattDischargeThresh_Type = Integer32
_Dm3ConfigBattDischargeThresh_Object = MibScalar
dm3ConfigBattDischargeThresh = _Dm3ConfigBattDischargeThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 3),
    _Dm3ConfigBattDischargeThresh_Type()
)
dm3ConfigBattDischargeThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattDischargeThresh.setStatus("mandatory")


class _Dm3ConfigBattDischargeAlarm_Type(Integer32):
    """Custom type dm3ConfigBattDischargeAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigBattDischargeAlarm_Type.__name__ = "Integer32"
_Dm3ConfigBattDischargeAlarm_Object = MibScalar
dm3ConfigBattDischargeAlarm = _Dm3ConfigBattDischargeAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 4),
    _Dm3ConfigBattDischargeAlarm_Type()
)
dm3ConfigBattDischargeAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattDischargeAlarm.setStatus("mandatory")
_Dm3ConfigBattHighVoltThresh_Type = Integer32
_Dm3ConfigBattHighVoltThresh_Object = MibScalar
dm3ConfigBattHighVoltThresh = _Dm3ConfigBattHighVoltThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 5),
    _Dm3ConfigBattHighVoltThresh_Type()
)
dm3ConfigBattHighVoltThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattHighVoltThresh.setStatus("mandatory")


class _Dm3ConfigBattHighVoltAlarm_Type(Integer32):
    """Custom type dm3ConfigBattHighVoltAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigBattHighVoltAlarm_Type.__name__ = "Integer32"
_Dm3ConfigBattHighVoltAlarm_Object = MibScalar
dm3ConfigBattHighVoltAlarm = _Dm3ConfigBattHighVoltAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 6),
    _Dm3ConfigBattHighVoltAlarm_Type()
)
dm3ConfigBattHighVoltAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattHighVoltAlarm.setStatus("mandatory")
_Dm3ConfigBattLowVoltThresh_Type = Integer32
_Dm3ConfigBattLowVoltThresh_Object = MibScalar
dm3ConfigBattLowVoltThresh = _Dm3ConfigBattLowVoltThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 7),
    _Dm3ConfigBattLowVoltThresh_Type()
)
dm3ConfigBattLowVoltThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattLowVoltThresh.setStatus("mandatory")


class _Dm3ConfigBattLowVoltAlarm_Type(Integer32):
    """Custom type dm3ConfigBattLowVoltAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigBattLowVoltAlarm_Type.__name__ = "Integer32"
_Dm3ConfigBattLowVoltAlarm_Object = MibScalar
dm3ConfigBattLowVoltAlarm = _Dm3ConfigBattLowVoltAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 8),
    _Dm3ConfigBattLowVoltAlarm_Type()
)
dm3ConfigBattLowVoltAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattLowVoltAlarm.setStatus("mandatory")
_Dm3ConfigBattHighTempThresh_Type = Integer32
_Dm3ConfigBattHighTempThresh_Object = MibScalar
dm3ConfigBattHighTempThresh = _Dm3ConfigBattHighTempThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 9),
    _Dm3ConfigBattHighTempThresh_Type()
)
dm3ConfigBattHighTempThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattHighTempThresh.setStatus("mandatory")


class _Dm3ConfigBattHighTempAlarm_Type(Integer32):
    """Custom type dm3ConfigBattHighTempAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigBattHighTempAlarm_Type.__name__ = "Integer32"
_Dm3ConfigBattHighTempAlarm_Object = MibScalar
dm3ConfigBattHighTempAlarm = _Dm3ConfigBattHighTempAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 10),
    _Dm3ConfigBattHighTempAlarm_Type()
)
dm3ConfigBattHighTempAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattHighTempAlarm.setStatus("mandatory")
_Dm3ConfigBattLowTempThresh_Type = Integer32
_Dm3ConfigBattLowTempThresh_Object = MibScalar
dm3ConfigBattLowTempThresh = _Dm3ConfigBattLowTempThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 11),
    _Dm3ConfigBattLowTempThresh_Type()
)
dm3ConfigBattLowTempThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattLowTempThresh.setStatus("mandatory")


class _Dm3ConfigBattLowTempAlarm_Type(Integer32):
    """Custom type dm3ConfigBattLowTempAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigBattLowTempAlarm_Type.__name__ = "Integer32"
_Dm3ConfigBattLowTempAlarm_Object = MibScalar
dm3ConfigBattLowTempAlarm = _Dm3ConfigBattLowTempAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 12),
    _Dm3ConfigBattLowTempAlarm_Type()
)
dm3ConfigBattLowTempAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattLowTempAlarm.setStatus("mandatory")
_Dm3ConfigBattAmpHour_Type = Integer32
_Dm3ConfigBattAmpHour_Object = MibScalar
dm3ConfigBattAmpHour = _Dm3ConfigBattAmpHour_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 13),
    _Dm3ConfigBattAmpHour_Type()
)
dm3ConfigBattAmpHour.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattAmpHour.setStatus("mandatory")


class _Dm3ConfigCompMethod_Type(Integer32):
    """Custom type dm3ConfigCompMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("tempcompOff", 2),
          ("tempcompOn", 1))
    )


_Dm3ConfigCompMethod_Type.__name__ = "Integer32"
_Dm3ConfigCompMethod_Object = MibScalar
dm3ConfigCompMethod = _Dm3ConfigCompMethod_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 14),
    _Dm3ConfigCompMethod_Type()
)
dm3ConfigCompMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigCompMethod.setStatus("mandatory")
_Dm3ConfigCompTempCoeff_Type = Integer32
_Dm3ConfigCompTempCoeff_Object = MibScalar
dm3ConfigCompTempCoeff = _Dm3ConfigCompTempCoeff_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 15),
    _Dm3ConfigCompTempCoeff_Type()
)
dm3ConfigCompTempCoeff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigCompTempCoeff.setStatus("mandatory")
_Dm3ConfigHighKneeTemp_Type = Integer32
_Dm3ConfigHighKneeTemp_Object = MibScalar
dm3ConfigHighKneeTemp = _Dm3ConfigHighKneeTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 16),
    _Dm3ConfigHighKneeTemp_Type()
)
dm3ConfigHighKneeTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigHighKneeTemp.setStatus("mandatory")
_Dm3ConfigLowKneeTemp_Type = Integer32
_Dm3ConfigLowKneeTemp_Object = MibScalar
dm3ConfigLowKneeTemp = _Dm3ConfigLowKneeTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 17),
    _Dm3ConfigLowKneeTemp_Type()
)
dm3ConfigLowKneeTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigLowKneeTemp.setStatus("mandatory")


class _Dm3ConfigBattHwCurrentAlarm_Type(Integer32):
    """Custom type dm3ConfigBattHwCurrentAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigBattHwCurrentAlarm_Type.__name__ = "Integer32"
_Dm3ConfigBattHwCurrentAlarm_Object = MibScalar
dm3ConfigBattHwCurrentAlarm = _Dm3ConfigBattHwCurrentAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 18),
    _Dm3ConfigBattHwCurrentAlarm_Type()
)
dm3ConfigBattHwCurrentAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattHwCurrentAlarm.setStatus("mandatory")


class _Dm3ConfigBattHwTempAlarm_Type(Integer32):
    """Custom type dm3ConfigBattHwTempAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigBattHwTempAlarm_Type.__name__ = "Integer32"
_Dm3ConfigBattHwTempAlarm_Object = MibScalar
dm3ConfigBattHwTempAlarm = _Dm3ConfigBattHwTempAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 3, 19),
    _Dm3ConfigBattHwTempAlarm_Type()
)
dm3ConfigBattHwTempAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBattHwTempAlarm.setStatus("mandatory")
_Dm3ConfigPowerModules_ObjectIdentity = ObjectIdentity
dm3ConfigPowerModules = _Dm3ConfigPowerModules_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4)
)
_Dm3ConfigRectifier_ObjectIdentity = ObjectIdentity
dm3ConfigRectifier = _Dm3ConfigRectifier_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1)
)
_Dm3ConfigRectThresh_ObjectIdentity = ObjectIdentity
dm3ConfigRectThresh = _Dm3ConfigRectThresh_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1)
)
_Dm3ConfigRectHighVoltThresh_Type = Integer32
_Dm3ConfigRectHighVoltThresh_Object = MibScalar
dm3ConfigRectHighVoltThresh = _Dm3ConfigRectHighVoltThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 1),
    _Dm3ConfigRectHighVoltThresh_Type()
)
dm3ConfigRectHighVoltThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectHighVoltThresh.setStatus("mandatory")
_Dm3ConfigRectLowVoltThresh_Type = Integer32
_Dm3ConfigRectLowVoltThresh_Object = MibScalar
dm3ConfigRectLowVoltThresh = _Dm3ConfigRectLowVoltThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 2),
    _Dm3ConfigRectLowVoltThresh_Type()
)
dm3ConfigRectLowVoltThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectLowVoltThresh.setStatus("mandatory")
_Dm3ConfigRectFailSafe_Type = Integer32
_Dm3ConfigRectFailSafe_Object = MibScalar
dm3ConfigRectFailSafe = _Dm3ConfigRectFailSafe_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 3),
    _Dm3ConfigRectFailSafe_Type()
)
dm3ConfigRectFailSafe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectFailSafe.setStatus("mandatory")
_Dm3ConfigRectFailComm_Type = Integer32
_Dm3ConfigRectFailComm_Object = MibScalar
dm3ConfigRectFailComm = _Dm3ConfigRectFailComm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 1, 4),
    _Dm3ConfigRectFailComm_Type()
)
dm3ConfigRectFailComm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectFailComm.setStatus("mandatory")
_Dm3ConfigRectAlarms_ObjectIdentity = ObjectIdentity
dm3ConfigRectAlarms = _Dm3ConfigRectAlarms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2)
)


class _Dm3ConfigRectHighVoltAlarm_Type(Integer32):
    """Custom type dm3ConfigRectHighVoltAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigRectHighVoltAlarm_Type.__name__ = "Integer32"
_Dm3ConfigRectHighVoltAlarm_Object = MibScalar
dm3ConfigRectHighVoltAlarm = _Dm3ConfigRectHighVoltAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 1),
    _Dm3ConfigRectHighVoltAlarm_Type()
)
dm3ConfigRectHighVoltAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectHighVoltAlarm.setStatus("mandatory")


class _Dm3ConfigRectLowVoltAlarm_Type(Integer32):
    """Custom type dm3ConfigRectLowVoltAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigRectLowVoltAlarm_Type.__name__ = "Integer32"
_Dm3ConfigRectLowVoltAlarm_Object = MibScalar
dm3ConfigRectLowVoltAlarm = _Dm3ConfigRectLowVoltAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 2),
    _Dm3ConfigRectLowVoltAlarm_Type()
)
dm3ConfigRectLowVoltAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectLowVoltAlarm.setStatus("mandatory")


class _Dm3ConfigRectConfigAlarm_Type(Integer32):
    """Custom type dm3ConfigRectConfigAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigRectConfigAlarm_Type.__name__ = "Integer32"
_Dm3ConfigRectConfigAlarm_Object = MibScalar
dm3ConfigRectConfigAlarm = _Dm3ConfigRectConfigAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 3),
    _Dm3ConfigRectConfigAlarm_Type()
)
dm3ConfigRectConfigAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectConfigAlarm.setStatus("mandatory")


class _Dm3ConfigRect1ofNAlarm_Type(Integer32):
    """Custom type dm3ConfigRect1ofNAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigRect1ofNAlarm_Type.__name__ = "Integer32"
_Dm3ConfigRect1ofNAlarm_Object = MibScalar
dm3ConfigRect1ofNAlarm = _Dm3ConfigRect1ofNAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 4),
    _Dm3ConfigRect1ofNAlarm_Type()
)
dm3ConfigRect1ofNAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRect1ofNAlarm.setStatus("mandatory")


class _Dm3ConfigRect2ofNAlarm_Type(Integer32):
    """Custom type dm3ConfigRect2ofNAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigRect2ofNAlarm_Type.__name__ = "Integer32"
_Dm3ConfigRect2ofNAlarm_Object = MibScalar
dm3ConfigRect2ofNAlarm = _Dm3ConfigRect2ofNAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 5),
    _Dm3ConfigRect2ofNAlarm_Type()
)
dm3ConfigRect2ofNAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRect2ofNAlarm.setStatus("mandatory")


class _Dm3ConfigRectDiagAlarm_Type(Integer32):
    """Custom type dm3ConfigRectDiagAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmNofN", 10),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigRectDiagAlarm_Type.__name__ = "Integer32"
_Dm3ConfigRectDiagAlarm_Object = MibScalar
dm3ConfigRectDiagAlarm = _Dm3ConfigRectDiagAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 6),
    _Dm3ConfigRectDiagAlarm_Type()
)
dm3ConfigRectDiagAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectDiagAlarm.setStatus("mandatory")


class _Dm3ConfigRectImbalanceAlarm_Type(Integer32):
    """Custom type dm3ConfigRectImbalanceAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigRectImbalanceAlarm_Type.__name__ = "Integer32"
_Dm3ConfigRectImbalanceAlarm_Object = MibScalar
dm3ConfigRectImbalanceAlarm = _Dm3ConfigRectImbalanceAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 7),
    _Dm3ConfigRectImbalanceAlarm_Type()
)
dm3ConfigRectImbalanceAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectImbalanceAlarm.setStatus("mandatory")


class _Dm3ConfigRectCurrLimitAlarm_Type(Integer32):
    """Custom type dm3ConfigRectCurrLimitAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmNofN", 10),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigRectCurrLimitAlarm_Type.__name__ = "Integer32"
_Dm3ConfigRectCurrLimitAlarm_Object = MibScalar
dm3ConfigRectCurrLimitAlarm = _Dm3ConfigRectCurrLimitAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 8),
    _Dm3ConfigRectCurrLimitAlarm_Type()
)
dm3ConfigRectCurrLimitAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectCurrLimitAlarm.setStatus("mandatory")


class _Dm3ConfigRectStandbyAlarm_Type(Integer32):
    """Custom type dm3ConfigRectStandbyAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmNofN", 10),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigRectStandbyAlarm_Type.__name__ = "Integer32"
_Dm3ConfigRectStandbyAlarm_Object = MibScalar
dm3ConfigRectStandbyAlarm = _Dm3ConfigRectStandbyAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 9),
    _Dm3ConfigRectStandbyAlarm_Type()
)
dm3ConfigRectStandbyAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectStandbyAlarm.setStatus("mandatory")


class _Dm3ConfigRectFanFailAlarm_Type(Integer32):
    """Custom type dm3ConfigRectFanFailAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmNofN", 10),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigRectFanFailAlarm_Type.__name__ = "Integer32"
_Dm3ConfigRectFanFailAlarm_Object = MibScalar
dm3ConfigRectFanFailAlarm = _Dm3ConfigRectFanFailAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 10),
    _Dm3ConfigRectFanFailAlarm_Type()
)
dm3ConfigRectFanFailAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectFanFailAlarm.setStatus("mandatory")


class _Dm3ConfigRectFailAlarm_Type(Integer32):
    """Custom type dm3ConfigRectFailAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmNofN", 10),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigRectFailAlarm_Type.__name__ = "Integer32"
_Dm3ConfigRectFailAlarm_Object = MibScalar
dm3ConfigRectFailAlarm = _Dm3ConfigRectFailAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 11),
    _Dm3ConfigRectFailAlarm_Type()
)
dm3ConfigRectFailAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectFailAlarm.setStatus("mandatory")


class _Dm3ConfigRectHwVoltAlarm_Type(Integer32):
    """Custom type dm3ConfigRectHwVoltAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigRectHwVoltAlarm_Type.__name__ = "Integer32"
_Dm3ConfigRectHwVoltAlarm_Object = MibScalar
dm3ConfigRectHwVoltAlarm = _Dm3ConfigRectHwVoltAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 1, 2, 12),
    _Dm3ConfigRectHwVoltAlarm_Type()
)
dm3ConfigRectHwVoltAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigRectHwVoltAlarm.setStatus("mandatory")
_Dm3ConfigConverter_ObjectIdentity = ObjectIdentity
dm3ConfigConverter = _Dm3ConfigConverter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2)
)
_Dm3ConfigConvThresh_ObjectIdentity = ObjectIdentity
dm3ConfigConvThresh = _Dm3ConfigConvThresh_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1)
)
_Dm3ConfigConvHighVoltThresh_Type = Integer32
_Dm3ConfigConvHighVoltThresh_Object = MibScalar
dm3ConfigConvHighVoltThresh = _Dm3ConfigConvHighVoltThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 1),
    _Dm3ConfigConvHighVoltThresh_Type()
)
dm3ConfigConvHighVoltThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvHighVoltThresh.setStatus("mandatory")
_Dm3ConfigConvLowVoltThresh_Type = Integer32
_Dm3ConfigConvLowVoltThresh_Object = MibScalar
dm3ConfigConvLowVoltThresh = _Dm3ConfigConvLowVoltThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 2),
    _Dm3ConfigConvLowVoltThresh_Type()
)
dm3ConfigConvLowVoltThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvLowVoltThresh.setStatus("mandatory")
_Dm3ConfigConvFailSafe_Type = Integer32
_Dm3ConfigConvFailSafe_Object = MibScalar
dm3ConfigConvFailSafe = _Dm3ConfigConvFailSafe_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 3),
    _Dm3ConfigConvFailSafe_Type()
)
dm3ConfigConvFailSafe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvFailSafe.setStatus("mandatory")
_Dm3ConfigConvSetPoint_Type = Integer32
_Dm3ConfigConvSetPoint_Object = MibScalar
dm3ConfigConvSetPoint = _Dm3ConfigConvSetPoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 4),
    _Dm3ConfigConvSetPoint_Type()
)
dm3ConfigConvSetPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvSetPoint.setStatus("mandatory")
_Dm3ConfigConvFailMax_Type = Integer32
_Dm3ConfigConvFailMax_Object = MibScalar
dm3ConfigConvFailMax = _Dm3ConfigConvFailMax_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 5),
    _Dm3ConfigConvFailMax_Type()
)
dm3ConfigConvFailMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvFailMax.setStatus("mandatory")
_Dm3ConfigConvFailMin_Type = Integer32
_Dm3ConfigConvFailMin_Object = MibScalar
dm3ConfigConvFailMin = _Dm3ConfigConvFailMin_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 6),
    _Dm3ConfigConvFailMin_Type()
)
dm3ConfigConvFailMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvFailMin.setStatus("mandatory")
_Dm3ConfigConvFailComm_Type = Integer32
_Dm3ConfigConvFailComm_Object = MibScalar
dm3ConfigConvFailComm = _Dm3ConfigConvFailComm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 1, 7),
    _Dm3ConfigConvFailComm_Type()
)
dm3ConfigConvFailComm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvFailComm.setStatus("mandatory")
_Dm3ConfigConvAlarms_ObjectIdentity = ObjectIdentity
dm3ConfigConvAlarms = _Dm3ConfigConvAlarms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2)
)


class _Dm3ConfigConvHighVoltAlarm_Type(Integer32):
    """Custom type dm3ConfigConvHighVoltAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigConvHighVoltAlarm_Type.__name__ = "Integer32"
_Dm3ConfigConvHighVoltAlarm_Object = MibScalar
dm3ConfigConvHighVoltAlarm = _Dm3ConfigConvHighVoltAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 1),
    _Dm3ConfigConvHighVoltAlarm_Type()
)
dm3ConfigConvHighVoltAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvHighVoltAlarm.setStatus("mandatory")


class _Dm3ConfigConvLowVoltAlarm_Type(Integer32):
    """Custom type dm3ConfigConvLowVoltAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigConvLowVoltAlarm_Type.__name__ = "Integer32"
_Dm3ConfigConvLowVoltAlarm_Object = MibScalar
dm3ConfigConvLowVoltAlarm = _Dm3ConfigConvLowVoltAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 2),
    _Dm3ConfigConvLowVoltAlarm_Type()
)
dm3ConfigConvLowVoltAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvLowVoltAlarm.setStatus("mandatory")


class _Dm3ConfigConvConfigAlarm_Type(Integer32):
    """Custom type dm3ConfigConvConfigAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigConvConfigAlarm_Type.__name__ = "Integer32"
_Dm3ConfigConvConfigAlarm_Object = MibScalar
dm3ConfigConvConfigAlarm = _Dm3ConfigConvConfigAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 3),
    _Dm3ConfigConvConfigAlarm_Type()
)
dm3ConfigConvConfigAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvConfigAlarm.setStatus("mandatory")


class _Dm3ConfigConv1ofNAlarm_Type(Integer32):
    """Custom type dm3ConfigConv1ofNAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigConv1ofNAlarm_Type.__name__ = "Integer32"
_Dm3ConfigConv1ofNAlarm_Object = MibScalar
dm3ConfigConv1ofNAlarm = _Dm3ConfigConv1ofNAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 4),
    _Dm3ConfigConv1ofNAlarm_Type()
)
dm3ConfigConv1ofNAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConv1ofNAlarm.setStatus("mandatory")


class _Dm3ConfigConv2ofNAlarm_Type(Integer32):
    """Custom type dm3ConfigConv2ofNAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigConv2ofNAlarm_Type.__name__ = "Integer32"
_Dm3ConfigConv2ofNAlarm_Object = MibScalar
dm3ConfigConv2ofNAlarm = _Dm3ConfigConv2ofNAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 5),
    _Dm3ConfigConv2ofNAlarm_Type()
)
dm3ConfigConv2ofNAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConv2ofNAlarm.setStatus("mandatory")


class _Dm3ConfigConvDiagAlarm_Type(Integer32):
    """Custom type dm3ConfigConvDiagAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmNofN", 10),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigConvDiagAlarm_Type.__name__ = "Integer32"
_Dm3ConfigConvDiagAlarm_Object = MibScalar
dm3ConfigConvDiagAlarm = _Dm3ConfigConvDiagAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 6),
    _Dm3ConfigConvDiagAlarm_Type()
)
dm3ConfigConvDiagAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvDiagAlarm.setStatus("mandatory")


class _Dm3ConfigConvImbalanceAlarm_Type(Integer32):
    """Custom type dm3ConfigConvImbalanceAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmNofN", 10),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigConvImbalanceAlarm_Type.__name__ = "Integer32"
_Dm3ConfigConvImbalanceAlarm_Object = MibScalar
dm3ConfigConvImbalanceAlarm = _Dm3ConfigConvImbalanceAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 7),
    _Dm3ConfigConvImbalanceAlarm_Type()
)
dm3ConfigConvImbalanceAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvImbalanceAlarm.setStatus("mandatory")


class _Dm3ConfigConvCurrLimitAlarm_Type(Integer32):
    """Custom type dm3ConfigConvCurrLimitAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmNofN", 10),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigConvCurrLimitAlarm_Type.__name__ = "Integer32"
_Dm3ConfigConvCurrLimitAlarm_Object = MibScalar
dm3ConfigConvCurrLimitAlarm = _Dm3ConfigConvCurrLimitAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 8),
    _Dm3ConfigConvCurrLimitAlarm_Type()
)
dm3ConfigConvCurrLimitAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvCurrLimitAlarm.setStatus("mandatory")


class _Dm3ConfigConvStandbyAlarm_Type(Integer32):
    """Custom type dm3ConfigConvStandbyAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmNofN", 10),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigConvStandbyAlarm_Type.__name__ = "Integer32"
_Dm3ConfigConvStandbyAlarm_Object = MibScalar
dm3ConfigConvStandbyAlarm = _Dm3ConfigConvStandbyAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 9),
    _Dm3ConfigConvStandbyAlarm_Type()
)
dm3ConfigConvStandbyAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvStandbyAlarm.setStatus("mandatory")


class _Dm3ConfigConvFanFailAlarm_Type(Integer32):
    """Custom type dm3ConfigConvFanFailAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmNofN", 10),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigConvFanFailAlarm_Type.__name__ = "Integer32"
_Dm3ConfigConvFanFailAlarm_Object = MibScalar
dm3ConfigConvFanFailAlarm = _Dm3ConfigConvFanFailAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 10),
    _Dm3ConfigConvFanFailAlarm_Type()
)
dm3ConfigConvFanFailAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvFanFailAlarm.setStatus("mandatory")


class _Dm3ConfigConvFailAlarm_Type(Integer32):
    """Custom type dm3ConfigConvFailAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmNofN", 10),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigConvFailAlarm_Type.__name__ = "Integer32"
_Dm3ConfigConvFailAlarm_Object = MibScalar
dm3ConfigConvFailAlarm = _Dm3ConfigConvFailAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 11),
    _Dm3ConfigConvFailAlarm_Type()
)
dm3ConfigConvFailAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvFailAlarm.setStatus("mandatory")


class _Dm3ConfigConvHwVoltAlarm_Type(Integer32):
    """Custom type dm3ConfigConvHwVoltAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmNofN", 10),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigConvHwVoltAlarm_Type.__name__ = "Integer32"
_Dm3ConfigConvHwVoltAlarm_Object = MibScalar
dm3ConfigConvHwVoltAlarm = _Dm3ConfigConvHwVoltAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 4, 2, 2, 12),
    _Dm3ConfigConvHwVoltAlarm_Type()
)
dm3ConfigConvHwVoltAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigConvHwVoltAlarm.setStatus("mandatory")
_Dm3ConfigRelays_ObjectIdentity = ObjectIdentity
dm3ConfigRelays = _Dm3ConfigRelays_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5)
)
_Dm3ConfigOutputRelays_ObjectIdentity = ObjectIdentity
dm3ConfigOutputRelays = _Dm3ConfigOutputRelays_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1)
)
_Dm3ConfigOutRlyTableSize_Type = Integer32
_Dm3ConfigOutRlyTableSize_Object = MibScalar
dm3ConfigOutRlyTableSize = _Dm3ConfigOutRlyTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 1),
    _Dm3ConfigOutRlyTableSize_Type()
)
dm3ConfigOutRlyTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3ConfigOutRlyTableSize.setStatus("mandatory")
_Dm3ConfigOutRlyTable_Object = MibTable
dm3ConfigOutRlyTable = _Dm3ConfigOutRlyTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2)
)
if mibBuilder.loadTexts:
    dm3ConfigOutRlyTable.setStatus("mandatory")
_Dm3ConfigOutRlyEntry_Object = MibTableRow
dm3ConfigOutRlyEntry = _Dm3ConfigOutRlyEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1)
)
dm3ConfigOutRlyEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3ConfigOutRlyIndex"),
)
if mibBuilder.loadTexts:
    dm3ConfigOutRlyEntry.setStatus("mandatory")
_Dm3ConfigOutRlyIndex_Type = Integer32
_Dm3ConfigOutRlyIndex_Object = MibTableColumn
dm3ConfigOutRlyIndex = _Dm3ConfigOutRlyIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 1),
    _Dm3ConfigOutRlyIndex_Type()
)
dm3ConfigOutRlyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3ConfigOutRlyIndex.setStatus("mandatory")
_Dm3ConfigOutRlyName_Type = DisplayString
_Dm3ConfigOutRlyName_Object = MibTableColumn
dm3ConfigOutRlyName = _Dm3ConfigOutRlyName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 2),
    _Dm3ConfigOutRlyName_Type()
)
dm3ConfigOutRlyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigOutRlyName.setStatus("mandatory")
_Dm3ConfigOutRlyDelay_Type = Integer32
_Dm3ConfigOutRlyDelay_Object = MibTableColumn
dm3ConfigOutRlyDelay = _Dm3ConfigOutRlyDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 3),
    _Dm3ConfigOutRlyDelay_Type()
)
dm3ConfigOutRlyDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigOutRlyDelay.setStatus("mandatory")


class _Dm3ConfigOutRlyAlarm_Type(Integer32):
    """Custom type dm3ConfigOutRlyAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigOutRlyAlarm_Type.__name__ = "Integer32"
_Dm3ConfigOutRlyAlarm_Object = MibTableColumn
dm3ConfigOutRlyAlarm = _Dm3ConfigOutRlyAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 1, 2, 1, 4),
    _Dm3ConfigOutRlyAlarm_Type()
)
dm3ConfigOutRlyAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigOutRlyAlarm.setStatus("mandatory")
_Dm3ConfigInputRelays_ObjectIdentity = ObjectIdentity
dm3ConfigInputRelays = _Dm3ConfigInputRelays_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2)
)
_Dm3ConfigInRlyTableSize_Type = Integer32
_Dm3ConfigInRlyTableSize_Object = MibScalar
dm3ConfigInRlyTableSize = _Dm3ConfigInRlyTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 1),
    _Dm3ConfigInRlyTableSize_Type()
)
dm3ConfigInRlyTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3ConfigInRlyTableSize.setStatus("mandatory")
_Dm3ConfigInRlyTable_Object = MibTable
dm3ConfigInRlyTable = _Dm3ConfigInRlyTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2)
)
if mibBuilder.loadTexts:
    dm3ConfigInRlyTable.setStatus("mandatory")
_Dm3ConfigInRlyEntry_Object = MibTableRow
dm3ConfigInRlyEntry = _Dm3ConfigInRlyEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1)
)
dm3ConfigInRlyEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3ConfigInRlyIndex"),
)
if mibBuilder.loadTexts:
    dm3ConfigInRlyEntry.setStatus("mandatory")
_Dm3ConfigInRlyIndex_Type = Integer32
_Dm3ConfigInRlyIndex_Object = MibTableColumn
dm3ConfigInRlyIndex = _Dm3ConfigInRlyIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 1),
    _Dm3ConfigInRlyIndex_Type()
)
dm3ConfigInRlyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3ConfigInRlyIndex.setStatus("mandatory")
_Dm3ConfigInRlyName_Type = DisplayString
_Dm3ConfigInRlyName_Object = MibTableColumn
dm3ConfigInRlyName = _Dm3ConfigInRlyName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 2),
    _Dm3ConfigInRlyName_Type()
)
dm3ConfigInRlyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigInRlyName.setStatus("mandatory")
_Dm3ConfigInRlyDelay_Type = Integer32
_Dm3ConfigInRlyDelay_Object = MibTableColumn
dm3ConfigInRlyDelay = _Dm3ConfigInRlyDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 3),
    _Dm3ConfigInRlyDelay_Type()
)
dm3ConfigInRlyDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigInRlyDelay.setStatus("mandatory")


class _Dm3ConfigInRlyAlarm_Type(Integer32):
    """Custom type dm3ConfigInRlyAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigInRlyAlarm_Type.__name__ = "Integer32"
_Dm3ConfigInRlyAlarm_Object = MibTableColumn
dm3ConfigInRlyAlarm = _Dm3ConfigInRlyAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 5, 2, 2, 1, 4),
    _Dm3ConfigInRlyAlarm_Type()
)
dm3ConfigInRlyAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigInRlyAlarm.setStatus("mandatory")
_Dm3ConfigDistribution_ObjectIdentity = ObjectIdentity
dm3ConfigDistribution = _Dm3ConfigDistribution_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6)
)
_Dm3ConfigBreakers_ObjectIdentity = ObjectIdentity
dm3ConfigBreakers = _Dm3ConfigBreakers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1)
)
_Dm3ConfigBreakersTableSize_Type = Integer32
_Dm3ConfigBreakersTableSize_Object = MibScalar
dm3ConfigBreakersTableSize = _Dm3ConfigBreakersTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 1),
    _Dm3ConfigBreakersTableSize_Type()
)
dm3ConfigBreakersTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3ConfigBreakersTableSize.setStatus("mandatory")
_Dm3ConfigBreakersTable_Object = MibTable
dm3ConfigBreakersTable = _Dm3ConfigBreakersTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2)
)
if mibBuilder.loadTexts:
    dm3ConfigBreakersTable.setStatus("mandatory")
_Dm3ConfigBreakersEntry_Object = MibTableRow
dm3ConfigBreakersEntry = _Dm3ConfigBreakersEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1)
)
dm3ConfigBreakersEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3ConfigBreakersIndex"),
)
if mibBuilder.loadTexts:
    dm3ConfigBreakersEntry.setStatus("mandatory")
_Dm3ConfigBreakersIndex_Type = Integer32
_Dm3ConfigBreakersIndex_Object = MibTableColumn
dm3ConfigBreakersIndex = _Dm3ConfigBreakersIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 1),
    _Dm3ConfigBreakersIndex_Type()
)
dm3ConfigBreakersIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3ConfigBreakersIndex.setStatus("mandatory")
_Dm3ConfigBreakersName_Type = DisplayString
_Dm3ConfigBreakersName_Object = MibTableColumn
dm3ConfigBreakersName = _Dm3ConfigBreakersName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 2),
    _Dm3ConfigBreakersName_Type()
)
dm3ConfigBreakersName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBreakersName.setStatus("mandatory")


class _Dm3ConfigBreakersAlarm_Type(Integer32):
    """Custom type dm3ConfigBreakersAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigBreakersAlarm_Type.__name__ = "Integer32"
_Dm3ConfigBreakersAlarm_Object = MibTableColumn
dm3ConfigBreakersAlarm = _Dm3ConfigBreakersAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 1, 2, 1, 3),
    _Dm3ConfigBreakersAlarm_Type()
)
dm3ConfigBreakersAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigBreakersAlarm.setStatus("mandatory")
_Dm3ConfigFuses_ObjectIdentity = ObjectIdentity
dm3ConfigFuses = _Dm3ConfigFuses_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2)
)
_Dm3ConfigFusesTableSize_Type = Integer32
_Dm3ConfigFusesTableSize_Object = MibScalar
dm3ConfigFusesTableSize = _Dm3ConfigFusesTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 1),
    _Dm3ConfigFusesTableSize_Type()
)
dm3ConfigFusesTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3ConfigFusesTableSize.setStatus("mandatory")
_Dm3ConfigFusesTable_Object = MibTable
dm3ConfigFusesTable = _Dm3ConfigFusesTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2)
)
if mibBuilder.loadTexts:
    dm3ConfigFusesTable.setStatus("mandatory")
_Dm3ConfigFusesEntry_Object = MibTableRow
dm3ConfigFusesEntry = _Dm3ConfigFusesEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1)
)
dm3ConfigFusesEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3ConfigFusesIndex"),
)
if mibBuilder.loadTexts:
    dm3ConfigFusesEntry.setStatus("mandatory")
_Dm3ConfigFusesIndex_Type = Integer32
_Dm3ConfigFusesIndex_Object = MibTableColumn
dm3ConfigFusesIndex = _Dm3ConfigFusesIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 1),
    _Dm3ConfigFusesIndex_Type()
)
dm3ConfigFusesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3ConfigFusesIndex.setStatus("mandatory")
_Dm3ConfigFusesName_Type = DisplayString
_Dm3ConfigFusesName_Object = MibTableColumn
dm3ConfigFusesName = _Dm3ConfigFusesName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 2),
    _Dm3ConfigFusesName_Type()
)
dm3ConfigFusesName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigFusesName.setStatus("mandatory")


class _Dm3ConfigFusesAlarm_Type(Integer32):
    """Custom type dm3ConfigFusesAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alarmIgnore", 1),
          ("alarmMajor", 9),
          ("alarmMinor", 8),
          ("alarmRelay1", 2),
          ("alarmRelay2", 3),
          ("alarmRelay3", 4),
          ("alarmRelay4", 5),
          ("alarmRelay5", 6),
          ("alarmRelay6", 7))
    )


_Dm3ConfigFusesAlarm_Type.__name__ = "Integer32"
_Dm3ConfigFusesAlarm_Object = MibTableColumn
dm3ConfigFusesAlarm = _Dm3ConfigFusesAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 2, 6, 2, 2, 1, 3),
    _Dm3ConfigFusesAlarm_Type()
)
dm3ConfigFusesAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dm3ConfigFusesAlarm.setStatus("mandatory")
_Dm3Status_ObjectIdentity = ObjectIdentity
dm3Status = _Dm3Status_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3)
)
_Dm3StatusSystem_ObjectIdentity = ObjectIdentity
dm3StatusSystem = _Dm3StatusSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1)
)
_Dm3StatusSystemTemp_Type = Integer32
_Dm3StatusSystemTemp_Object = MibScalar
dm3StatusSystemTemp = _Dm3StatusSystemTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 1),
    _Dm3StatusSystemTemp_Type()
)
dm3StatusSystemTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSystemTemp.setStatus("mandatory")
_Dm3StatusSystemStart_Type = DisplayString
_Dm3StatusSystemStart_Object = MibScalar
dm3StatusSystemStart = _Dm3StatusSystemStart_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 2),
    _Dm3StatusSystemStart_Type()
)
dm3StatusSystemStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSystemStart.setStatus("mandatory")


class _Dm3StatusSysRemoteAccess_Type(Integer32):
    """Custom type dm3StatusSysRemoteAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("accessDisabled", 2),
          ("accessEnabled", 1))
    )


_Dm3StatusSysRemoteAccess_Type.__name__ = "Integer32"
_Dm3StatusSysRemoteAccess_Object = MibScalar
dm3StatusSysRemoteAccess = _Dm3StatusSysRemoteAccess_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 3),
    _Dm3StatusSysRemoteAccess_Type()
)
dm3StatusSysRemoteAccess.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysRemoteAccess.setStatus("mandatory")
_Dm3StatusSysSecurityLevel_Type = Integer32
_Dm3StatusSysSecurityLevel_Object = MibScalar
dm3StatusSysSecurityLevel = _Dm3StatusSysSecurityLevel_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 4),
    _Dm3StatusSysSecurityLevel_Type()
)
dm3StatusSysSecurityLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysSecurityLevel.setStatus("mandatory")


class _Dm3StatusSysTempSanity_Type(Integer32):
    """Custom type dm3StatusSysTempSanity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("saneNO", 2),
          ("saneYES", 1))
    )


_Dm3StatusSysTempSanity_Type.__name__ = "Integer32"
_Dm3StatusSysTempSanity_Object = MibScalar
dm3StatusSysTempSanity = _Dm3StatusSysTempSanity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 5),
    _Dm3StatusSysTempSanity_Type()
)
dm3StatusSysTempSanity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysTempSanity.setStatus("mandatory")


class _Dm3StatusSysAlarmState_Type(Integer32):
    """Custom type dm3StatusSysAlarmState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("alarmBoth", 3),
          ("alarmMajor", 2),
          ("alarmMinor", 1),
          ("alarmNone", 4))
    )


_Dm3StatusSysAlarmState_Type.__name__ = "Integer32"
_Dm3StatusSysAlarmState_Object = MibScalar
dm3StatusSysAlarmState = _Dm3StatusSysAlarmState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 6),
    _Dm3StatusSysAlarmState_Type()
)
dm3StatusSysAlarmState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysAlarmState.setStatus("mandatory")


class _Dm3StatusSysTempUnits_Type(Integer32):
    """Custom type dm3StatusSysTempUnits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("celsius", 1),
          ("fahrenheit", 2))
    )


_Dm3StatusSysTempUnits_Type.__name__ = "Integer32"
_Dm3StatusSysTempUnits_Object = MibScalar
dm3StatusSysTempUnits = _Dm3StatusSysTempUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 1, 7),
    _Dm3StatusSysTempUnits_Type()
)
dm3StatusSysTempUnits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysTempUnits.setStatus("mandatory")
_Dm3StatusAlarms_ObjectIdentity = ObjectIdentity
dm3StatusAlarms = _Dm3StatusAlarms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2)
)
_Dm3StatusAlarmsTableSize_Type = Integer32
_Dm3StatusAlarmsTableSize_Object = MibScalar
dm3StatusAlarmsTableSize = _Dm3StatusAlarmsTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 1),
    _Dm3StatusAlarmsTableSize_Type()
)
dm3StatusAlarmsTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusAlarmsTableSize.setStatus("mandatory")
_Dm3StatusAlarmsTable_Object = MibTable
dm3StatusAlarmsTable = _Dm3StatusAlarmsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2)
)
if mibBuilder.loadTexts:
    dm3StatusAlarmsTable.setStatus("mandatory")
_Dm3StatusAlarmsEntry_Object = MibTableRow
dm3StatusAlarmsEntry = _Dm3StatusAlarmsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1)
)
dm3StatusAlarmsEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3StatusAlarmsIndex"),
)
if mibBuilder.loadTexts:
    dm3StatusAlarmsEntry.setStatus("mandatory")
_Dm3StatusAlarmsIndex_Type = Integer32
_Dm3StatusAlarmsIndex_Object = MibTableColumn
dm3StatusAlarmsIndex = _Dm3StatusAlarmsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1, 1),
    _Dm3StatusAlarmsIndex_Type()
)
dm3StatusAlarmsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusAlarmsIndex.setStatus("mandatory")
_Dm3StatusAlarmsText_Type = DisplayString
_Dm3StatusAlarmsText_Object = MibTableColumn
dm3StatusAlarmsText = _Dm3StatusAlarmsText_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 2, 2, 1, 2),
    _Dm3StatusAlarmsText_Type()
)
dm3StatusAlarmsText.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusAlarmsText.setStatus("mandatory")
_Dm3StatusBattery_ObjectIdentity = ObjectIdentity
dm3StatusBattery = _Dm3StatusBattery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3)
)
_Dm3StatusBattCurrent_Type = Integer32
_Dm3StatusBattCurrent_Object = MibScalar
dm3StatusBattCurrent = _Dm3StatusBattCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 1),
    _Dm3StatusBattCurrent_Type()
)
dm3StatusBattCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusBattCurrent.setStatus("mandatory")
_Dm3StatusBattTemp_Type = Integer32
_Dm3StatusBattTemp_Object = MibScalar
dm3StatusBattTemp = _Dm3StatusBattTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 2),
    _Dm3StatusBattTemp_Type()
)
dm3StatusBattTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusBattTemp.setStatus("mandatory")


class _Dm3StatusBattCurrentSanity_Type(Integer32):
    """Custom type dm3StatusBattCurrentSanity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("saneNO", 2),
          ("saneYES", 1))
    )


_Dm3StatusBattCurrentSanity_Type.__name__ = "Integer32"
_Dm3StatusBattCurrentSanity_Object = MibScalar
dm3StatusBattCurrentSanity = _Dm3StatusBattCurrentSanity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 3),
    _Dm3StatusBattCurrentSanity_Type()
)
dm3StatusBattCurrentSanity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusBattCurrentSanity.setStatus("mandatory")


class _Dm3StatusBattTempSanity_Type(Integer32):
    """Custom type dm3StatusBattTempSanity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("saneNO", 2),
          ("saneYES", 1))
    )


_Dm3StatusBattTempSanity_Type.__name__ = "Integer32"
_Dm3StatusBattTempSanity_Object = MibScalar
dm3StatusBattTempSanity = _Dm3StatusBattTempSanity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 3, 4),
    _Dm3StatusBattTempSanity_Type()
)
dm3StatusBattTempSanity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusBattTempSanity.setStatus("mandatory")
_Dm3StatusOEM_ObjectIdentity = ObjectIdentity
dm3StatusOEM = _Dm3StatusOEM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4)
)
_Dm3StatusOEMrectOffset_Type = Integer32
_Dm3StatusOEMrectOffset_Object = MibScalar
dm3StatusOEMrectOffset = _Dm3StatusOEMrectOffset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 1),
    _Dm3StatusOEMrectOffset_Type()
)
dm3StatusOEMrectOffset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusOEMrectOffset.setStatus("mandatory")
_Dm3StatusOEMrectGain_Type = Integer32
_Dm3StatusOEMrectGain_Object = MibScalar
dm3StatusOEMrectGain = _Dm3StatusOEMrectGain_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 2),
    _Dm3StatusOEMrectGain_Type()
)
dm3StatusOEMrectGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusOEMrectGain.setStatus("mandatory")
_Dm3StatusOEMconvOffset_Type = Integer32
_Dm3StatusOEMconvOffset_Object = MibScalar
dm3StatusOEMconvOffset = _Dm3StatusOEMconvOffset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 3),
    _Dm3StatusOEMconvOffset_Type()
)
dm3StatusOEMconvOffset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusOEMconvOffset.setStatus("mandatory")
_Dm3StatusOEMconvGain_Type = Integer32
_Dm3StatusOEMconvGain_Object = MibScalar
dm3StatusOEMconvGain = _Dm3StatusOEMconvGain_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 4),
    _Dm3StatusOEMconvGain_Type()
)
dm3StatusOEMconvGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusOEMconvGain.setStatus("mandatory")
_Dm3StatusOEMshuntOffset_Type = Integer32
_Dm3StatusOEMshuntOffset_Object = MibScalar
dm3StatusOEMshuntOffset = _Dm3StatusOEMshuntOffset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 5),
    _Dm3StatusOEMshuntOffset_Type()
)
dm3StatusOEMshuntOffset.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusOEMshuntOffset.setStatus("mandatory")
_Dm3StatusOEMshuntGain_Type = Integer32
_Dm3StatusOEMshuntGain_Object = MibScalar
dm3StatusOEMshuntGain = _Dm3StatusOEMshuntGain_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 4, 6),
    _Dm3StatusOEMshuntGain_Type()
)
dm3StatusOEMshuntGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusOEMshuntGain.setStatus("mandatory")
_Dm3StatusLVD_ObjectIdentity = ObjectIdentity
dm3StatusLVD = _Dm3StatusLVD_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5)
)
_Dm3StatusLVDTableSize_Type = Integer32
_Dm3StatusLVDTableSize_Object = MibScalar
dm3StatusLVDTableSize = _Dm3StatusLVDTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 1),
    _Dm3StatusLVDTableSize_Type()
)
dm3StatusLVDTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusLVDTableSize.setStatus("mandatory")
_Dm3StatusLVDTable_Object = MibTable
dm3StatusLVDTable = _Dm3StatusLVDTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2)
)
if mibBuilder.loadTexts:
    dm3StatusLVDTable.setStatus("mandatory")
_Dm3StatusLVDEntry_Object = MibTableRow
dm3StatusLVDEntry = _Dm3StatusLVDEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1)
)
dm3StatusLVDEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3StatusLVDIndex"),
)
if mibBuilder.loadTexts:
    dm3StatusLVDEntry.setStatus("mandatory")
_Dm3StatusLVDIndex_Type = Integer32
_Dm3StatusLVDIndex_Object = MibTableColumn
dm3StatusLVDIndex = _Dm3StatusLVDIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 1),
    _Dm3StatusLVDIndex_Type()
)
dm3StatusLVDIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusLVDIndex.setStatus("mandatory")
_Dm3StatusLVDName_Type = DisplayString
_Dm3StatusLVDName_Object = MibTableColumn
dm3StatusLVDName = _Dm3StatusLVDName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 2),
    _Dm3StatusLVDName_Type()
)
dm3StatusLVDName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusLVDName.setStatus("mandatory")


class _Dm3StatusLVDState_Type(Integer32):
    """Custom type dm3StatusLVDState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusClosed", 1),
          ("statusOpened", 2))
    )


_Dm3StatusLVDState_Type.__name__ = "Integer32"
_Dm3StatusLVDState_Object = MibTableColumn
dm3StatusLVDState = _Dm3StatusLVDState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 3),
    _Dm3StatusLVDState_Type()
)
dm3StatusLVDState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusLVDState.setStatus("mandatory")


class _Dm3StatusLVDHwFault_Type(Integer32):
    """Custom type dm3StatusLVDHwFault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFault", 1),
          ("statusNofault", 2))
    )


_Dm3StatusLVDHwFault_Type.__name__ = "Integer32"
_Dm3StatusLVDHwFault_Object = MibTableColumn
dm3StatusLVDHwFault = _Dm3StatusLVDHwFault_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 5, 2, 1, 4),
    _Dm3StatusLVDHwFault_Type()
)
dm3StatusLVDHwFault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusLVDHwFault.setStatus("mandatory")
_Dm3StatusPowerModules_ObjectIdentity = ObjectIdentity
dm3StatusPowerModules = _Dm3StatusPowerModules_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6)
)
_Dm3StatusRectifier_ObjectIdentity = ObjectIdentity
dm3StatusRectifier = _Dm3StatusRectifier_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1)
)
_Dm3StatusRectTableSize_Type = Integer32
_Dm3StatusRectTableSize_Object = MibScalar
dm3StatusRectTableSize = _Dm3StatusRectTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 1),
    _Dm3StatusRectTableSize_Type()
)
dm3StatusRectTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectTableSize.setStatus("mandatory")
_Dm3StatusRectTable_Object = MibTable
dm3StatusRectTable = _Dm3StatusRectTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2)
)
if mibBuilder.loadTexts:
    dm3StatusRectTable.setStatus("mandatory")
_Dm3StatusRectEntry_Object = MibTableRow
dm3StatusRectEntry = _Dm3StatusRectEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1)
)
dm3StatusRectEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3StatusRectIndex"),
)
if mibBuilder.loadTexts:
    dm3StatusRectEntry.setStatus("mandatory")
_Dm3StatusRectIndex_Type = Integer32
_Dm3StatusRectIndex_Object = MibTableColumn
dm3StatusRectIndex = _Dm3StatusRectIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 1),
    _Dm3StatusRectIndex_Type()
)
dm3StatusRectIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectIndex.setStatus("mandatory")
_Dm3StatusRectID_Type = Integer32
_Dm3StatusRectID_Object = MibTableColumn
dm3StatusRectID = _Dm3StatusRectID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 2),
    _Dm3StatusRectID_Type()
)
dm3StatusRectID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectID.setStatus("mandatory")
_Dm3StatusRectDesc_Type = DisplayString
_Dm3StatusRectDesc_Object = MibTableColumn
dm3StatusRectDesc = _Dm3StatusRectDesc_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 3),
    _Dm3StatusRectDesc_Type()
)
dm3StatusRectDesc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectDesc.setStatus("mandatory")
_Dm3StatusRectCurrent_Type = Integer32
_Dm3StatusRectCurrent_Object = MibTableColumn
dm3StatusRectCurrent = _Dm3StatusRectCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 4),
    _Dm3StatusRectCurrent_Type()
)
dm3StatusRectCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectCurrent.setStatus("mandatory")


class _Dm3StatusRectCurrentLimit_Type(Integer32):
    """Custom type dm3StatusRectCurrentLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusRectCurrentLimit_Type.__name__ = "Integer32"
_Dm3StatusRectCurrentLimit_Object = MibTableColumn
dm3StatusRectCurrentLimit = _Dm3StatusRectCurrentLimit_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 5),
    _Dm3StatusRectCurrentLimit_Type()
)
dm3StatusRectCurrentLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectCurrentLimit.setStatus("mandatory")


class _Dm3StatusRectStandby_Type(Integer32):
    """Custom type dm3StatusRectStandby based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusRectStandby_Type.__name__ = "Integer32"
_Dm3StatusRectStandby_Object = MibTableColumn
dm3StatusRectStandby = _Dm3StatusRectStandby_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 6),
    _Dm3StatusRectStandby_Type()
)
dm3StatusRectStandby.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectStandby.setStatus("mandatory")


class _Dm3StatusRectFanFail_Type(Integer32):
    """Custom type dm3StatusRectFanFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusRectFanFail_Type.__name__ = "Integer32"
_Dm3StatusRectFanFail_Object = MibTableColumn
dm3StatusRectFanFail = _Dm3StatusRectFanFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 7),
    _Dm3StatusRectFanFail_Type()
)
dm3StatusRectFanFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectFanFail.setStatus("mandatory")


class _Dm3StatusRectFail_Type(Integer32):
    """Custom type dm3StatusRectFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusRectFail_Type.__name__ = "Integer32"
_Dm3StatusRectFail_Object = MibTableColumn
dm3StatusRectFail = _Dm3StatusRectFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 8),
    _Dm3StatusRectFail_Type()
)
dm3StatusRectFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectFail.setStatus("mandatory")
_Dm3StatusRectDevType_Type = Integer32
_Dm3StatusRectDevType_Object = MibTableColumn
dm3StatusRectDevType = _Dm3StatusRectDevType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 9),
    _Dm3StatusRectDevType_Type()
)
dm3StatusRectDevType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectDevType.setStatus("mandatory")
_Dm3StatusRectPhyAddr_Type = Integer32
_Dm3StatusRectPhyAddr_Object = MibTableColumn
dm3StatusRectPhyAddr = _Dm3StatusRectPhyAddr_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 10),
    _Dm3StatusRectPhyAddr_Type()
)
dm3StatusRectPhyAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectPhyAddr.setStatus("mandatory")


class _Dm3StatusRectCfg_Type(Integer32):
    """Custom type dm3StatusRectCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusRectCfg_Type.__name__ = "Integer32"
_Dm3StatusRectCfg_Object = MibTableColumn
dm3StatusRectCfg = _Dm3StatusRectCfg_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 11),
    _Dm3StatusRectCfg_Type()
)
dm3StatusRectCfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectCfg.setStatus("mandatory")
_Dm3StatusRectPcbRev_Type = Integer32
_Dm3StatusRectPcbRev_Object = MibTableColumn
dm3StatusRectPcbRev = _Dm3StatusRectPcbRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 12),
    _Dm3StatusRectPcbRev_Type()
)
dm3StatusRectPcbRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectPcbRev.setStatus("mandatory")
_Dm3StatusRectFwVer_Type = Integer32
_Dm3StatusRectFwVer_Object = MibTableColumn
dm3StatusRectFwVer = _Dm3StatusRectFwVer_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 13),
    _Dm3StatusRectFwVer_Type()
)
dm3StatusRectFwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectFwVer.setStatus("mandatory")


class _Dm3StatusRectPresent_Type(Integer32):
    """Custom type dm3StatusRectPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusRectPresent_Type.__name__ = "Integer32"
_Dm3StatusRectPresent_Object = MibTableColumn
dm3StatusRectPresent = _Dm3StatusRectPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 14),
    _Dm3StatusRectPresent_Type()
)
dm3StatusRectPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectPresent.setStatus("mandatory")


class _Dm3StatusRectDiagPass_Type(Integer32):
    """Custom type dm3StatusRectDiagPass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusRectDiagPass_Type.__name__ = "Integer32"
_Dm3StatusRectDiagPass_Object = MibTableColumn
dm3StatusRectDiagPass = _Dm3StatusRectDiagPass_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 15),
    _Dm3StatusRectDiagPass_Type()
)
dm3StatusRectDiagPass.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectDiagPass.setStatus("mandatory")
_Dm3StatusRectState_Type = Integer32
_Dm3StatusRectState_Object = MibTableColumn
dm3StatusRectState = _Dm3StatusRectState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 2, 1, 16),
    _Dm3StatusRectState_Type()
)
dm3StatusRectState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusRectState.setStatus("mandatory")


class _Dm3StatusSysRectVoltSanity_Type(Integer32):
    """Custom type dm3StatusSysRectVoltSanity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("saneNO", 2),
          ("saneYES", 1))
    )


_Dm3StatusSysRectVoltSanity_Type.__name__ = "Integer32"
_Dm3StatusSysRectVoltSanity_Object = MibScalar
dm3StatusSysRectVoltSanity = _Dm3StatusSysRectVoltSanity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 3),
    _Dm3StatusSysRectVoltSanity_Type()
)
dm3StatusSysRectVoltSanity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysRectVoltSanity.setStatus("mandatory")


class _Dm3StatusSysRectAvailable_Type(Integer32):
    """Custom type dm3StatusSysRectAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusSysRectAvailable_Type.__name__ = "Integer32"
_Dm3StatusSysRectAvailable_Object = MibScalar
dm3StatusSysRectAvailable = _Dm3StatusSysRectAvailable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 4),
    _Dm3StatusSysRectAvailable_Type()
)
dm3StatusSysRectAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysRectAvailable.setStatus("mandatory")
_Dm3StatusSysRectType_Type = Integer32
_Dm3StatusSysRectType_Object = MibScalar
dm3StatusSysRectType = _Dm3StatusSysRectType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 5),
    _Dm3StatusSysRectType_Type()
)
dm3StatusSysRectType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysRectType.setStatus("mandatory")
_Dm3StatusSysRectVoltage_Type = Integer32
_Dm3StatusSysRectVoltage_Object = MibScalar
dm3StatusSysRectVoltage = _Dm3StatusSysRectVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 6),
    _Dm3StatusSysRectVoltage_Type()
)
dm3StatusSysRectVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysRectVoltage.setStatus("mandatory")
_Dm3StatusSysRectCurrent_Type = Integer32
_Dm3StatusSysRectCurrent_Object = MibScalar
dm3StatusSysRectCurrent = _Dm3StatusSysRectCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 1, 7),
    _Dm3StatusSysRectCurrent_Type()
)
dm3StatusSysRectCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysRectCurrent.setStatus("mandatory")
_Dm3StatusConverter_ObjectIdentity = ObjectIdentity
dm3StatusConverter = _Dm3StatusConverter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2)
)
_Dm3StatusConvTableSize_Type = Integer32
_Dm3StatusConvTableSize_Object = MibScalar
dm3StatusConvTableSize = _Dm3StatusConvTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 1),
    _Dm3StatusConvTableSize_Type()
)
dm3StatusConvTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvTableSize.setStatus("mandatory")
_Dm3StatusConvTable_Object = MibTable
dm3StatusConvTable = _Dm3StatusConvTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2)
)
if mibBuilder.loadTexts:
    dm3StatusConvTable.setStatus("mandatory")
_Dm3StatusConvEntry_Object = MibTableRow
dm3StatusConvEntry = _Dm3StatusConvEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1)
)
dm3StatusConvEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3StatusConvIndex"),
)
if mibBuilder.loadTexts:
    dm3StatusConvEntry.setStatus("mandatory")
_Dm3StatusConvIndex_Type = Integer32
_Dm3StatusConvIndex_Object = MibTableColumn
dm3StatusConvIndex = _Dm3StatusConvIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 1),
    _Dm3StatusConvIndex_Type()
)
dm3StatusConvIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvIndex.setStatus("mandatory")
_Dm3StatusConvID_Type = Integer32
_Dm3StatusConvID_Object = MibTableColumn
dm3StatusConvID = _Dm3StatusConvID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 2),
    _Dm3StatusConvID_Type()
)
dm3StatusConvID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvID.setStatus("mandatory")
_Dm3StatusConvDesc_Type = DisplayString
_Dm3StatusConvDesc_Object = MibTableColumn
dm3StatusConvDesc = _Dm3StatusConvDesc_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 3),
    _Dm3StatusConvDesc_Type()
)
dm3StatusConvDesc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvDesc.setStatus("mandatory")
_Dm3StatusConvCurrent_Type = Integer32
_Dm3StatusConvCurrent_Object = MibTableColumn
dm3StatusConvCurrent = _Dm3StatusConvCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 4),
    _Dm3StatusConvCurrent_Type()
)
dm3StatusConvCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvCurrent.setStatus("mandatory")


class _Dm3StatusConvCurrentLimit_Type(Integer32):
    """Custom type dm3StatusConvCurrentLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusConvCurrentLimit_Type.__name__ = "Integer32"
_Dm3StatusConvCurrentLimit_Object = MibTableColumn
dm3StatusConvCurrentLimit = _Dm3StatusConvCurrentLimit_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 5),
    _Dm3StatusConvCurrentLimit_Type()
)
dm3StatusConvCurrentLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvCurrentLimit.setStatus("mandatory")


class _Dm3StatusConvStandby_Type(Integer32):
    """Custom type dm3StatusConvStandby based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusConvStandby_Type.__name__ = "Integer32"
_Dm3StatusConvStandby_Object = MibTableColumn
dm3StatusConvStandby = _Dm3StatusConvStandby_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 6),
    _Dm3StatusConvStandby_Type()
)
dm3StatusConvStandby.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvStandby.setStatus("mandatory")


class _Dm3StatusConvFanFail_Type(Integer32):
    """Custom type dm3StatusConvFanFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusConvFanFail_Type.__name__ = "Integer32"
_Dm3StatusConvFanFail_Object = MibTableColumn
dm3StatusConvFanFail = _Dm3StatusConvFanFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 7),
    _Dm3StatusConvFanFail_Type()
)
dm3StatusConvFanFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvFanFail.setStatus("mandatory")


class _Dm3StatusConvFail_Type(Integer32):
    """Custom type dm3StatusConvFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusConvFail_Type.__name__ = "Integer32"
_Dm3StatusConvFail_Object = MibTableColumn
dm3StatusConvFail = _Dm3StatusConvFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 8),
    _Dm3StatusConvFail_Type()
)
dm3StatusConvFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvFail.setStatus("mandatory")
_Dm3StatusConvDevType_Type = Integer32
_Dm3StatusConvDevType_Object = MibTableColumn
dm3StatusConvDevType = _Dm3StatusConvDevType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 9),
    _Dm3StatusConvDevType_Type()
)
dm3StatusConvDevType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvDevType.setStatus("mandatory")
_Dm3StatusConvPhyAddr_Type = Integer32
_Dm3StatusConvPhyAddr_Object = MibTableColumn
dm3StatusConvPhyAddr = _Dm3StatusConvPhyAddr_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 10),
    _Dm3StatusConvPhyAddr_Type()
)
dm3StatusConvPhyAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvPhyAddr.setStatus("mandatory")


class _Dm3StatusConvCfg_Type(Integer32):
    """Custom type dm3StatusConvCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusConvCfg_Type.__name__ = "Integer32"
_Dm3StatusConvCfg_Object = MibTableColumn
dm3StatusConvCfg = _Dm3StatusConvCfg_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 11),
    _Dm3StatusConvCfg_Type()
)
dm3StatusConvCfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvCfg.setStatus("mandatory")
_Dm3StatusConvPcbRev_Type = Integer32
_Dm3StatusConvPcbRev_Object = MibTableColumn
dm3StatusConvPcbRev = _Dm3StatusConvPcbRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 12),
    _Dm3StatusConvPcbRev_Type()
)
dm3StatusConvPcbRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvPcbRev.setStatus("mandatory")
_Dm3StatusConvFwVer_Type = Integer32
_Dm3StatusConvFwVer_Object = MibTableColumn
dm3StatusConvFwVer = _Dm3StatusConvFwVer_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 13),
    _Dm3StatusConvFwVer_Type()
)
dm3StatusConvFwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvFwVer.setStatus("mandatory")


class _Dm3StatusConvPresent_Type(Integer32):
    """Custom type dm3StatusConvPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusConvPresent_Type.__name__ = "Integer32"
_Dm3StatusConvPresent_Object = MibTableColumn
dm3StatusConvPresent = _Dm3StatusConvPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 14),
    _Dm3StatusConvPresent_Type()
)
dm3StatusConvPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvPresent.setStatus("mandatory")


class _Dm3StatusConvDiagPass_Type(Integer32):
    """Custom type dm3StatusConvDiagPass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusConvDiagPass_Type.__name__ = "Integer32"
_Dm3StatusConvDiagPass_Object = MibTableColumn
dm3StatusConvDiagPass = _Dm3StatusConvDiagPass_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 15),
    _Dm3StatusConvDiagPass_Type()
)
dm3StatusConvDiagPass.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvDiagPass.setStatus("mandatory")
_Dm3StatusConvState_Type = Integer32
_Dm3StatusConvState_Object = MibTableColumn
dm3StatusConvState = _Dm3StatusConvState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 2, 1, 16),
    _Dm3StatusConvState_Type()
)
dm3StatusConvState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusConvState.setStatus("mandatory")


class _Dm3StatusSysConvVoltSanity_Type(Integer32):
    """Custom type dm3StatusSysConvVoltSanity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("saneNO", 2),
          ("saneYES", 1))
    )


_Dm3StatusSysConvVoltSanity_Type.__name__ = "Integer32"
_Dm3StatusSysConvVoltSanity_Object = MibScalar
dm3StatusSysConvVoltSanity = _Dm3StatusSysConvVoltSanity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 3),
    _Dm3StatusSysConvVoltSanity_Type()
)
dm3StatusSysConvVoltSanity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysConvVoltSanity.setStatus("mandatory")


class _Dm3StatusSysConvAvailable_Type(Integer32):
    """Custom type dm3StatusSysConvAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dm3StatusSysConvAvailable_Type.__name__ = "Integer32"
_Dm3StatusSysConvAvailable_Object = MibScalar
dm3StatusSysConvAvailable = _Dm3StatusSysConvAvailable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 4),
    _Dm3StatusSysConvAvailable_Type()
)
dm3StatusSysConvAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysConvAvailable.setStatus("mandatory")
_Dm3StatusSysConvType_Type = Integer32
_Dm3StatusSysConvType_Object = MibScalar
dm3StatusSysConvType = _Dm3StatusSysConvType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 5),
    _Dm3StatusSysConvType_Type()
)
dm3StatusSysConvType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysConvType.setStatus("mandatory")
_Dm3StatusSysConvVoltage_Type = Integer32
_Dm3StatusSysConvVoltage_Object = MibScalar
dm3StatusSysConvVoltage = _Dm3StatusSysConvVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 6),
    _Dm3StatusSysConvVoltage_Type()
)
dm3StatusSysConvVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysConvVoltage.setStatus("mandatory")
_Dm3StatusSysConvCurrent_Type = Integer32
_Dm3StatusSysConvCurrent_Object = MibScalar
dm3StatusSysConvCurrent = _Dm3StatusSysConvCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 6, 2, 7),
    _Dm3StatusSysConvCurrent_Type()
)
dm3StatusSysConvCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusSysConvCurrent.setStatus("mandatory")
_Dm3StatusRelays_ObjectIdentity = ObjectIdentity
dm3StatusRelays = _Dm3StatusRelays_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7)
)
_Dm3StatusOutputRelays_ObjectIdentity = ObjectIdentity
dm3StatusOutputRelays = _Dm3StatusOutputRelays_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1)
)
_Dm3StatusOutRlyTableSize_Type = Integer32
_Dm3StatusOutRlyTableSize_Object = MibScalar
dm3StatusOutRlyTableSize = _Dm3StatusOutRlyTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 1),
    _Dm3StatusOutRlyTableSize_Type()
)
dm3StatusOutRlyTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusOutRlyTableSize.setStatus("mandatory")
_Dm3StatusOutRlyTable_Object = MibTable
dm3StatusOutRlyTable = _Dm3StatusOutRlyTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2)
)
if mibBuilder.loadTexts:
    dm3StatusOutRlyTable.setStatus("mandatory")
_Dm3StatusOutRlyEntry_Object = MibTableRow
dm3StatusOutRlyEntry = _Dm3StatusOutRlyEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1)
)
dm3StatusOutRlyEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3StatusOutRlyIndex"),
)
if mibBuilder.loadTexts:
    dm3StatusOutRlyEntry.setStatus("mandatory")
_Dm3StatusOutRlyIndex_Type = Integer32
_Dm3StatusOutRlyIndex_Object = MibTableColumn
dm3StatusOutRlyIndex = _Dm3StatusOutRlyIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 1),
    _Dm3StatusOutRlyIndex_Type()
)
dm3StatusOutRlyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusOutRlyIndex.setStatus("mandatory")
_Dm3StatusOutRlyName_Type = DisplayString
_Dm3StatusOutRlyName_Object = MibTableColumn
dm3StatusOutRlyName = _Dm3StatusOutRlyName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 2),
    _Dm3StatusOutRlyName_Type()
)
dm3StatusOutRlyName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusOutRlyName.setStatus("mandatory")


class _Dm3StatusOutRlyStatus_Type(Integer32):
    """Custom type dm3StatusOutRlyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusOff", 2),
          ("statusOn", 1))
    )


_Dm3StatusOutRlyStatus_Type.__name__ = "Integer32"
_Dm3StatusOutRlyStatus_Object = MibTableColumn
dm3StatusOutRlyStatus = _Dm3StatusOutRlyStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 1, 2, 1, 3),
    _Dm3StatusOutRlyStatus_Type()
)
dm3StatusOutRlyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusOutRlyStatus.setStatus("mandatory")
_Dm3StatusInputRelays_ObjectIdentity = ObjectIdentity
dm3StatusInputRelays = _Dm3StatusInputRelays_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2)
)
_Dm3StatusInRlyTableSize_Type = Integer32
_Dm3StatusInRlyTableSize_Object = MibScalar
dm3StatusInRlyTableSize = _Dm3StatusInRlyTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 1),
    _Dm3StatusInRlyTableSize_Type()
)
dm3StatusInRlyTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusInRlyTableSize.setStatus("mandatory")
_Dm3StatusInRlyTable_Object = MibTable
dm3StatusInRlyTable = _Dm3StatusInRlyTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2)
)
if mibBuilder.loadTexts:
    dm3StatusInRlyTable.setStatus("mandatory")
_Dm3StatusInRlyEntry_Object = MibTableRow
dm3StatusInRlyEntry = _Dm3StatusInRlyEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1)
)
dm3StatusInRlyEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3StatusInRlyIndex"),
)
if mibBuilder.loadTexts:
    dm3StatusInRlyEntry.setStatus("mandatory")
_Dm3StatusInRlyIndex_Type = Integer32
_Dm3StatusInRlyIndex_Object = MibTableColumn
dm3StatusInRlyIndex = _Dm3StatusInRlyIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 1),
    _Dm3StatusInRlyIndex_Type()
)
dm3StatusInRlyIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusInRlyIndex.setStatus("mandatory")
_Dm3StatusInRlyName_Type = DisplayString
_Dm3StatusInRlyName_Object = MibTableColumn
dm3StatusInRlyName = _Dm3StatusInRlyName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 2),
    _Dm3StatusInRlyName_Type()
)
dm3StatusInRlyName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusInRlyName.setStatus("mandatory")


class _Dm3StatusInRlyStatus_Type(Integer32):
    """Custom type dm3StatusInRlyStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusOff", 2),
          ("statusOn", 1))
    )


_Dm3StatusInRlyStatus_Type.__name__ = "Integer32"
_Dm3StatusInRlyStatus_Object = MibTableColumn
dm3StatusInRlyStatus = _Dm3StatusInRlyStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 7, 2, 2, 1, 3),
    _Dm3StatusInRlyStatus_Type()
)
dm3StatusInRlyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusInRlyStatus.setStatus("mandatory")
_Dm3StatusDistribution_ObjectIdentity = ObjectIdentity
dm3StatusDistribution = _Dm3StatusDistribution_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8)
)
_Dm3StatusBreakers_ObjectIdentity = ObjectIdentity
dm3StatusBreakers = _Dm3StatusBreakers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1)
)
_Dm3StatusBreakersTableSize_Type = Integer32
_Dm3StatusBreakersTableSize_Object = MibScalar
dm3StatusBreakersTableSize = _Dm3StatusBreakersTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 1),
    _Dm3StatusBreakersTableSize_Type()
)
dm3StatusBreakersTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusBreakersTableSize.setStatus("mandatory")
_Dm3StatusBreakersTable_Object = MibTable
dm3StatusBreakersTable = _Dm3StatusBreakersTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2)
)
if mibBuilder.loadTexts:
    dm3StatusBreakersTable.setStatus("mandatory")
_Dm3StatusBreakersEntry_Object = MibTableRow
dm3StatusBreakersEntry = _Dm3StatusBreakersEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1)
)
dm3StatusBreakersEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3StatusBreakersIndex"),
)
if mibBuilder.loadTexts:
    dm3StatusBreakersEntry.setStatus("mandatory")
_Dm3StatusBreakersIndex_Type = Integer32
_Dm3StatusBreakersIndex_Object = MibTableColumn
dm3StatusBreakersIndex = _Dm3StatusBreakersIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 1),
    _Dm3StatusBreakersIndex_Type()
)
dm3StatusBreakersIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusBreakersIndex.setStatus("mandatory")
_Dm3StatusBreakersName_Type = DisplayString
_Dm3StatusBreakersName_Object = MibTableColumn
dm3StatusBreakersName = _Dm3StatusBreakersName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 2),
    _Dm3StatusBreakersName_Type()
)
dm3StatusBreakersName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusBreakersName.setStatus("mandatory")


class _Dm3StatusBreakersStatus_Type(Integer32):
    """Custom type dm3StatusBreakersStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusClosed", 1),
          ("statusOpen", 2))
    )


_Dm3StatusBreakersStatus_Type.__name__ = "Integer32"
_Dm3StatusBreakersStatus_Object = MibTableColumn
dm3StatusBreakersStatus = _Dm3StatusBreakersStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 1, 2, 1, 3),
    _Dm3StatusBreakersStatus_Type()
)
dm3StatusBreakersStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusBreakersStatus.setStatus("mandatory")
_Dm3StatusFuses_ObjectIdentity = ObjectIdentity
dm3StatusFuses = _Dm3StatusFuses_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2)
)
_Dm3StatusFusesTableSize_Type = Integer32
_Dm3StatusFusesTableSize_Object = MibScalar
dm3StatusFusesTableSize = _Dm3StatusFusesTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 1),
    _Dm3StatusFusesTableSize_Type()
)
dm3StatusFusesTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusFusesTableSize.setStatus("mandatory")
_Dm3StatusFusesTable_Object = MibTable
dm3StatusFusesTable = _Dm3StatusFusesTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2)
)
if mibBuilder.loadTexts:
    dm3StatusFusesTable.setStatus("mandatory")
_Dm3StatusFusesEntry_Object = MibTableRow
dm3StatusFusesEntry = _Dm3StatusFusesEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1)
)
dm3StatusFusesEntry.setIndexNames(
    (0, "POWERNET-MIB", "dm3StatusFusesIndex"),
)
if mibBuilder.loadTexts:
    dm3StatusFusesEntry.setStatus("mandatory")
_Dm3StatusFusesIndex_Type = Integer32
_Dm3StatusFusesIndex_Object = MibTableColumn
dm3StatusFusesIndex = _Dm3StatusFusesIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 1),
    _Dm3StatusFusesIndex_Type()
)
dm3StatusFusesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusFusesIndex.setStatus("mandatory")
_Dm3StatusFusesName_Type = DisplayString
_Dm3StatusFusesName_Object = MibTableColumn
dm3StatusFusesName = _Dm3StatusFusesName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 2),
    _Dm3StatusFusesName_Type()
)
dm3StatusFusesName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusFusesName.setStatus("mandatory")


class _Dm3StatusFusesStatus_Type(Integer32):
    """Custom type dm3StatusFusesStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusClosed", 1),
          ("statusOpen", 2))
    )


_Dm3StatusFusesStatus_Type.__name__ = "Integer32"
_Dm3StatusFusesStatus_Object = MibTableColumn
dm3StatusFusesStatus = _Dm3StatusFusesStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 7, 3, 8, 2, 2, 1, 3),
    _Dm3StatusFusesStatus_Type()
)
dm3StatusFusesStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dm3StatusFusesStatus.setStatus("mandatory")
_AutomaticTransferSwitch_ObjectIdentity = ObjectIdentity
automaticTransferSwitch = _AutomaticTransferSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8)
)
_AtsIdent_ObjectIdentity = ObjectIdentity
atsIdent = _AtsIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1)
)
_AtsIdentHardwareRev_Type = DisplayString
_AtsIdentHardwareRev_Object = MibScalar
atsIdentHardwareRev = _AtsIdentHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 1),
    _AtsIdentHardwareRev_Type()
)
atsIdentHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsIdentHardwareRev.setStatus("mandatory")
_AtsIdentFirmwareRev_Type = DisplayString
_AtsIdentFirmwareRev_Object = MibScalar
atsIdentFirmwareRev = _AtsIdentFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 2),
    _AtsIdentFirmwareRev_Type()
)
atsIdentFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsIdentFirmwareRev.setStatus("mandatory")
_AtsIdentFirmwareDate_Type = DisplayString
_AtsIdentFirmwareDate_Object = MibScalar
atsIdentFirmwareDate = _AtsIdentFirmwareDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 3),
    _AtsIdentFirmwareDate_Type()
)
atsIdentFirmwareDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsIdentFirmwareDate.setStatus("mandatory")
_AtsIdentDateOfManufacture_Type = DisplayString
_AtsIdentDateOfManufacture_Object = MibScalar
atsIdentDateOfManufacture = _AtsIdentDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 4),
    _AtsIdentDateOfManufacture_Type()
)
atsIdentDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsIdentDateOfManufacture.setStatus("mandatory")
_AtsIdentModelNumber_Type = DisplayString
_AtsIdentModelNumber_Object = MibScalar
atsIdentModelNumber = _AtsIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 5),
    _AtsIdentModelNumber_Type()
)
atsIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsIdentModelNumber.setStatus("mandatory")
_AtsIdentSerialNumber_Type = DisplayString
_AtsIdentSerialNumber_Object = MibScalar
atsIdentSerialNumber = _AtsIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 6),
    _AtsIdentSerialNumber_Type()
)
atsIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsIdentSerialNumber.setStatus("mandatory")
_AtsIdentNominalLineVoltage_Type = Integer32
_AtsIdentNominalLineVoltage_Object = MibScalar
atsIdentNominalLineVoltage = _AtsIdentNominalLineVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 7),
    _AtsIdentNominalLineVoltage_Type()
)
atsIdentNominalLineVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsIdentNominalLineVoltage.setStatus("mandatory")
_AtsIdentNominalLineFrequency_Type = Integer32
_AtsIdentNominalLineFrequency_Object = MibScalar
atsIdentNominalLineFrequency = _AtsIdentNominalLineFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 8),
    _AtsIdentNominalLineFrequency_Type()
)
atsIdentNominalLineFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsIdentNominalLineFrequency.setStatus("mandatory")
_AtsIdentDeviceRating_Type = Integer32
_AtsIdentDeviceRating_Object = MibScalar
atsIdentDeviceRating = _AtsIdentDeviceRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 1, 9),
    _AtsIdentDeviceRating_Type()
)
atsIdentDeviceRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsIdentDeviceRating.setStatus("mandatory")
_AtsCalibration_ObjectIdentity = ObjectIdentity
atsCalibration = _AtsCalibration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2)
)
_AtsCalibrationInput_ObjectIdentity = ObjectIdentity
atsCalibrationInput = _AtsCalibrationInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1)
)
_AtsCalibrationNumInputs_Type = Integer32
_AtsCalibrationNumInputs_Object = MibScalar
atsCalibrationNumInputs = _AtsCalibrationNumInputs_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 1),
    _AtsCalibrationNumInputs_Type()
)
atsCalibrationNumInputs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsCalibrationNumInputs.setStatus("mandatory")
_AtsCalibrationNumInputPhases_Type = Integer32
_AtsCalibrationNumInputPhases_Object = MibScalar
atsCalibrationNumInputPhases = _AtsCalibrationNumInputPhases_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 2),
    _AtsCalibrationNumInputPhases_Type()
)
atsCalibrationNumInputPhases.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsCalibrationNumInputPhases.setStatus("mandatory")
_AtsCalibrationInputPhaseTable_Object = MibTable
atsCalibrationInputPhaseTable = _AtsCalibrationInputPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3)
)
if mibBuilder.loadTexts:
    atsCalibrationInputPhaseTable.setStatus("mandatory")
_AtsCalibrationInputPhaseEntry_Object = MibTableRow
atsCalibrationInputPhaseEntry = _AtsCalibrationInputPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1)
)
atsCalibrationInputPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "atsCalibrationInputTableIndex"),
    (0, "POWERNET-MIB", "atsCalibrationInputPhaseTableIndex"),
)
if mibBuilder.loadTexts:
    atsCalibrationInputPhaseEntry.setStatus("mandatory")
_AtsCalibrationInputTableIndex_Type = Integer32
_AtsCalibrationInputTableIndex_Object = MibTableColumn
atsCalibrationInputTableIndex = _AtsCalibrationInputTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 1),
    _AtsCalibrationInputTableIndex_Type()
)
atsCalibrationInputTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsCalibrationInputTableIndex.setStatus("mandatory")
_AtsCalibrationInputPhaseTableIndex_Type = Integer32
_AtsCalibrationInputPhaseTableIndex_Object = MibTableColumn
atsCalibrationInputPhaseTableIndex = _AtsCalibrationInputPhaseTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 2),
    _AtsCalibrationInputPhaseTableIndex_Type()
)
atsCalibrationInputPhaseTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsCalibrationInputPhaseTableIndex.setStatus("mandatory")
_AtsLineVoltageCalibrationFactor_Type = Integer32
_AtsLineVoltageCalibrationFactor_Object = MibTableColumn
atsLineVoltageCalibrationFactor = _AtsLineVoltageCalibrationFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 1, 3, 1, 3),
    _AtsLineVoltageCalibrationFactor_Type()
)
atsLineVoltageCalibrationFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsLineVoltageCalibrationFactor.setStatus("mandatory")
_AtsCalibrationPowerSupply_ObjectIdentity = ObjectIdentity
atsCalibrationPowerSupply = _AtsCalibrationPowerSupply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2)
)
_AtsCalibrationPowerSupplyVoltages_Type = Integer32
_AtsCalibrationPowerSupplyVoltages_Object = MibScalar
atsCalibrationPowerSupplyVoltages = _AtsCalibrationPowerSupplyVoltages_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 1),
    _AtsCalibrationPowerSupplyVoltages_Type()
)
atsCalibrationPowerSupplyVoltages.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsCalibrationPowerSupplyVoltages.setStatus("mandatory")
_AtsCalibrationPowerSupplyVoltageTable_Object = MibTable
atsCalibrationPowerSupplyVoltageTable = _AtsCalibrationPowerSupplyVoltageTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2)
)
if mibBuilder.loadTexts:
    atsCalibrationPowerSupplyVoltageTable.setStatus("mandatory")
_AtsCalibrationPowerSupplyVoltageEntry_Object = MibTableRow
atsCalibrationPowerSupplyVoltageEntry = _AtsCalibrationPowerSupplyVoltageEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1)
)
atsCalibrationPowerSupplyVoltageEntry.setIndexNames(
    (0, "POWERNET-MIB", "atsCalibrationPowerSupplyVoltageTableIndex"),
)
if mibBuilder.loadTexts:
    atsCalibrationPowerSupplyVoltageEntry.setStatus("mandatory")
_AtsCalibrationPowerSupplyVoltageTableIndex_Type = Integer32
_AtsCalibrationPowerSupplyVoltageTableIndex_Object = MibTableColumn
atsCalibrationPowerSupplyVoltageTableIndex = _AtsCalibrationPowerSupplyVoltageTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 1),
    _AtsCalibrationPowerSupplyVoltageTableIndex_Type()
)
atsCalibrationPowerSupplyVoltageTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsCalibrationPowerSupplyVoltageTableIndex.setStatus("mandatory")


class _AtsCalibrationPowerSupplyVoltage_Type(Integer32):
    """Custom type atsCalibrationPowerSupplyVoltage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("powerSupply", 3),
          ("powerSupply12V", 2),
          ("powerSupply24V", 1),
          ("powerSupply24VSourceB", 4),
          ("powerSupplyMinus12V", 5))
    )


_AtsCalibrationPowerSupplyVoltage_Type.__name__ = "Integer32"
_AtsCalibrationPowerSupplyVoltage_Object = MibTableColumn
atsCalibrationPowerSupplyVoltage = _AtsCalibrationPowerSupplyVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 2),
    _AtsCalibrationPowerSupplyVoltage_Type()
)
atsCalibrationPowerSupplyVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsCalibrationPowerSupplyVoltage.setStatus("mandatory")
_AtsPowerSupplyVoltageCalibrationFactor_Type = Integer32
_AtsPowerSupplyVoltageCalibrationFactor_Object = MibTableColumn
atsPowerSupplyVoltageCalibrationFactor = _AtsPowerSupplyVoltageCalibrationFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 2, 2, 1, 3),
    _AtsPowerSupplyVoltageCalibrationFactor_Type()
)
atsPowerSupplyVoltageCalibrationFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsPowerSupplyVoltageCalibrationFactor.setStatus("mandatory")
_AtsCalibrationOutput_ObjectIdentity = ObjectIdentity
atsCalibrationOutput = _AtsCalibrationOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3)
)
_AtsCalibrationNumOutputs_Type = Integer32
_AtsCalibrationNumOutputs_Object = MibScalar
atsCalibrationNumOutputs = _AtsCalibrationNumOutputs_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 1),
    _AtsCalibrationNumOutputs_Type()
)
atsCalibrationNumOutputs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsCalibrationNumOutputs.setStatus("mandatory")
_AtsCalibrationNumOutputPhases_Type = Integer32
_AtsCalibrationNumOutputPhases_Object = MibScalar
atsCalibrationNumOutputPhases = _AtsCalibrationNumOutputPhases_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 2),
    _AtsCalibrationNumOutputPhases_Type()
)
atsCalibrationNumOutputPhases.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsCalibrationNumOutputPhases.setStatus("mandatory")
_AtsCalibrationOutputTable_Object = MibTable
atsCalibrationOutputTable = _AtsCalibrationOutputTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3)
)
if mibBuilder.loadTexts:
    atsCalibrationOutputTable.setStatus("mandatory")
_AtsCalibrationOutputEntry_Object = MibTableRow
atsCalibrationOutputEntry = _AtsCalibrationOutputEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1)
)
atsCalibrationOutputEntry.setIndexNames(
    (0, "POWERNET-MIB", "atsCalibrationOutputTableIndex"),
    (0, "POWERNET-MIB", "atsCalibrationOutputPhasesTableIndex"),
)
if mibBuilder.loadTexts:
    atsCalibrationOutputEntry.setStatus("mandatory")
_AtsCalibrationOutputTableIndex_Type = Integer32
_AtsCalibrationOutputTableIndex_Object = MibTableColumn
atsCalibrationOutputTableIndex = _AtsCalibrationOutputTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 1),
    _AtsCalibrationOutputTableIndex_Type()
)
atsCalibrationOutputTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsCalibrationOutputTableIndex.setStatus("mandatory")


class _AtsCalibrationOutputPhasesTableIndex_Type(Integer32):
    """Custom type atsCalibrationOutputPhasesTableIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("neutral", 4),
          ("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_AtsCalibrationOutputPhasesTableIndex_Type.__name__ = "Integer32"
_AtsCalibrationOutputPhasesTableIndex_Object = MibTableColumn
atsCalibrationOutputPhasesTableIndex = _AtsCalibrationOutputPhasesTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 2),
    _AtsCalibrationOutputPhasesTableIndex_Type()
)
atsCalibrationOutputPhasesTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsCalibrationOutputPhasesTableIndex.setStatus("mandatory")
_AtsOutputCurrentCalibrationFactor_Type = Integer32
_AtsOutputCurrentCalibrationFactor_Object = MibTableColumn
atsOutputCurrentCalibrationFactor = _AtsOutputCurrentCalibrationFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 2, 3, 3, 1, 3),
    _AtsOutputCurrentCalibrationFactor_Type()
)
atsOutputCurrentCalibrationFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputCurrentCalibrationFactor.setStatus("mandatory")
_AtsControl_ObjectIdentity = ObjectIdentity
atsControl = _AtsControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3)
)


class _AtsControlResetATS_Type(Integer32):
    """Custom type atsControlResetATS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("reset", 2))
    )


_AtsControlResetATS_Type.__name__ = "Integer32"
_AtsControlResetATS_Object = MibScalar
atsControlResetATS = _AtsControlResetATS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3, 1),
    _AtsControlResetATS_Type()
)
atsControlResetATS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsControlResetATS.setStatus("mandatory")


class _AtsControlClearAllAlarms_Type(Integer32):
    """Custom type atsControlClearAllAlarms based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("none", 1))
    )


_AtsControlClearAllAlarms_Type.__name__ = "Integer32"
_AtsControlClearAllAlarms_Object = MibScalar
atsControlClearAllAlarms = _AtsControlClearAllAlarms_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 3, 2),
    _AtsControlClearAllAlarms_Type()
)
atsControlClearAllAlarms.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsControlClearAllAlarms.setStatus("mandatory")
_AtsConfig_ObjectIdentity = ObjectIdentity
atsConfig = _AtsConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4)
)
_AtsConfigProductName_Type = DisplayString
_AtsConfigProductName_Object = MibScalar
atsConfigProductName = _AtsConfigProductName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 1),
    _AtsConfigProductName_Type()
)
atsConfigProductName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigProductName.setStatus("mandatory")


class _AtsConfigPreferredSource_Type(Integer32):
    """Custom type atsConfigPreferredSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 3),
          ("sourceA", 1),
          ("sourceB", 2))
    )


_AtsConfigPreferredSource_Type.__name__ = "Integer32"
_AtsConfigPreferredSource_Object = MibScalar
atsConfigPreferredSource = _AtsConfigPreferredSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 2),
    _AtsConfigPreferredSource_Type()
)
atsConfigPreferredSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigPreferredSource.setStatus("mandatory")


class _AtsConfigFrontPanelLockout_Type(Integer32):
    """Custom type atsConfigFrontPanelLockout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disableFrontPanel", 1),
          ("enableFrontPanel", 2))
    )


_AtsConfigFrontPanelLockout_Type.__name__ = "Integer32"
_AtsConfigFrontPanelLockout_Object = MibScalar
atsConfigFrontPanelLockout = _AtsConfigFrontPanelLockout_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 3),
    _AtsConfigFrontPanelLockout_Type()
)
atsConfigFrontPanelLockout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigFrontPanelLockout.setStatus("mandatory")


class _AtsConfigVoltageSensitivity_Type(Integer32):
    """Custom type atsConfigVoltageSensitivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 2))
    )


_AtsConfigVoltageSensitivity_Type.__name__ = "Integer32"
_AtsConfigVoltageSensitivity_Object = MibScalar
atsConfigVoltageSensitivity = _AtsConfigVoltageSensitivity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 4),
    _AtsConfigVoltageSensitivity_Type()
)
atsConfigVoltageSensitivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigVoltageSensitivity.setStatus("mandatory")


class _AtsConfigTransferVoltageRange_Type(Integer32):
    """Custom type atsConfigTransferVoltageRange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("medium", 2),
          ("narrow", 3),
          ("wide", 1))
    )


_AtsConfigTransferVoltageRange_Type.__name__ = "Integer32"
_AtsConfigTransferVoltageRange_Object = MibScalar
atsConfigTransferVoltageRange = _AtsConfigTransferVoltageRange_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 5),
    _AtsConfigTransferVoltageRange_Type()
)
atsConfigTransferVoltageRange.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigTransferVoltageRange.setStatus("mandatory")


class _AtsConfigCurrentLimit_Type(Integer32):
    """Custom type atsConfigCurrentLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_AtsConfigCurrentLimit_Type.__name__ = "Integer32"
_AtsConfigCurrentLimit_Object = MibScalar
atsConfigCurrentLimit = _AtsConfigCurrentLimit_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 6),
    _AtsConfigCurrentLimit_Type()
)
atsConfigCurrentLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigCurrentLimit.setStatus("mandatory")


class _AtsConfigResetValues_Type(Integer32):
    """Custom type atsConfigResetValues based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("reset", 2))
    )


_AtsConfigResetValues_Type.__name__ = "Integer32"
_AtsConfigResetValues_Object = MibScalar
atsConfigResetValues = _AtsConfigResetValues_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 7),
    _AtsConfigResetValues_Type()
)
atsConfigResetValues.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigResetValues.setStatus("mandatory")
_AtsConfigLineVRMS_Type = Integer32
_AtsConfigLineVRMS_Object = MibScalar
atsConfigLineVRMS = _AtsConfigLineVRMS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 8),
    _AtsConfigLineVRMS_Type()
)
atsConfigLineVRMS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigLineVRMS.setStatus("mandatory")
_AtsConfigLineVRMSNarrowLimit_Type = Integer32
_AtsConfigLineVRMSNarrowLimit_Object = MibScalar
atsConfigLineVRMSNarrowLimit = _AtsConfigLineVRMSNarrowLimit_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 9),
    _AtsConfigLineVRMSNarrowLimit_Type()
)
atsConfigLineVRMSNarrowLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigLineVRMSNarrowLimit.setStatus("mandatory")
_AtsConfigLineVRMSMediumLimit_Type = Integer32
_AtsConfigLineVRMSMediumLimit_Object = MibScalar
atsConfigLineVRMSMediumLimit = _AtsConfigLineVRMSMediumLimit_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 10),
    _AtsConfigLineVRMSMediumLimit_Type()
)
atsConfigLineVRMSMediumLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigLineVRMSMediumLimit.setStatus("mandatory")
_AtsConfigLineVRMSWideLimit_Type = Integer32
_AtsConfigLineVRMSWideLimit_Object = MibScalar
atsConfigLineVRMSWideLimit = _AtsConfigLineVRMSWideLimit_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 11),
    _AtsConfigLineVRMSWideLimit_Type()
)
atsConfigLineVRMSWideLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigLineVRMSWideLimit.setStatus("mandatory")


class _AtsConfigFrequencyDeviation_Type(Integer32):
    """Custom type atsConfigFrequencyDeviation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("one", 1),
          ("three", 3),
          ("two", 2))
    )


_AtsConfigFrequencyDeviation_Type.__name__ = "Integer32"
_AtsConfigFrequencyDeviation_Object = MibScalar
atsConfigFrequencyDeviation = _AtsConfigFrequencyDeviation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 12),
    _AtsConfigFrequencyDeviation_Type()
)
atsConfigFrequencyDeviation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigFrequencyDeviation.setStatus("mandatory")
_AtsConfigBankTableSize_Type = Integer32
_AtsConfigBankTableSize_Object = MibScalar
atsConfigBankTableSize = _AtsConfigBankTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 13),
    _AtsConfigBankTableSize_Type()
)
atsConfigBankTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsConfigBankTableSize.setStatus("mandatory")
_AtsConfigBankTable_Object = MibTable
atsConfigBankTable = _AtsConfigBankTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14)
)
if mibBuilder.loadTexts:
    atsConfigBankTable.setStatus("mandatory")
_AtsConfigBankEntry_Object = MibTableRow
atsConfigBankEntry = _AtsConfigBankEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1)
)
atsConfigBankEntry.setIndexNames(
    (0, "POWERNET-MIB", "atsConfigBankTableIndex"),
)
if mibBuilder.loadTexts:
    atsConfigBankEntry.setStatus("mandatory")
_AtsConfigBankTableIndex_Type = Integer32
_AtsConfigBankTableIndex_Object = MibTableColumn
atsConfigBankTableIndex = _AtsConfigBankTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 1),
    _AtsConfigBankTableIndex_Type()
)
atsConfigBankTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsConfigBankTableIndex.setStatus("mandatory")


class _AtsConfigBank_Type(Integer32):
    """Custom type atsConfigBank based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bank1", 2),
          ("bank2", 3),
          ("total", 1))
    )


_AtsConfigBank_Type.__name__ = "Integer32"
_AtsConfigBank_Object = MibTableColumn
atsConfigBank = _AtsConfigBank_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 2),
    _AtsConfigBank_Type()
)
atsConfigBank.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsConfigBank.setStatus("mandatory")
_AtsConfigBankLowLoadThreshold_Type = Integer32
_AtsConfigBankLowLoadThreshold_Object = MibTableColumn
atsConfigBankLowLoadThreshold = _AtsConfigBankLowLoadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 3),
    _AtsConfigBankLowLoadThreshold_Type()
)
atsConfigBankLowLoadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigBankLowLoadThreshold.setStatus("mandatory")
_AtsConfigBankNearOverLoadThreshold_Type = Integer32
_AtsConfigBankNearOverLoadThreshold_Object = MibTableColumn
atsConfigBankNearOverLoadThreshold = _AtsConfigBankNearOverLoadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 4),
    _AtsConfigBankNearOverLoadThreshold_Type()
)
atsConfigBankNearOverLoadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigBankNearOverLoadThreshold.setStatus("mandatory")
_AtsConfigBankOverLoadThreshold_Type = Integer32
_AtsConfigBankOverLoadThreshold_Object = MibTableColumn
atsConfigBankOverLoadThreshold = _AtsConfigBankOverLoadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 14, 1, 5),
    _AtsConfigBankOverLoadThreshold_Type()
)
atsConfigBankOverLoadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigBankOverLoadThreshold.setStatus("mandatory")
_AtsConfigPhaseTableSize_Type = Integer32
_AtsConfigPhaseTableSize_Object = MibScalar
atsConfigPhaseTableSize = _AtsConfigPhaseTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 15),
    _AtsConfigPhaseTableSize_Type()
)
atsConfigPhaseTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsConfigPhaseTableSize.setStatus("mandatory")
_AtsConfigPhaseTable_Object = MibTable
atsConfigPhaseTable = _AtsConfigPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16)
)
if mibBuilder.loadTexts:
    atsConfigPhaseTable.setStatus("mandatory")
_AtsConfigPhaseEntry_Object = MibTableRow
atsConfigPhaseEntry = _AtsConfigPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1)
)
atsConfigPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "atsConfigPhaseTableIndex"),
)
if mibBuilder.loadTexts:
    atsConfigPhaseEntry.setStatus("mandatory")
_AtsConfigPhaseTableIndex_Type = Integer32
_AtsConfigPhaseTableIndex_Object = MibTableColumn
atsConfigPhaseTableIndex = _AtsConfigPhaseTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 1),
    _AtsConfigPhaseTableIndex_Type()
)
atsConfigPhaseTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsConfigPhaseTableIndex.setStatus("mandatory")


class _AtsConfigPhase_Type(Integer32):
    """Custom type atsConfigPhase based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_AtsConfigPhase_Type.__name__ = "Integer32"
_AtsConfigPhase_Object = MibTableColumn
atsConfigPhase = _AtsConfigPhase_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 2),
    _AtsConfigPhase_Type()
)
atsConfigPhase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsConfigPhase.setStatus("mandatory")
_AtsConfigPhaseLowLoadThreshold_Type = Integer32
_AtsConfigPhaseLowLoadThreshold_Object = MibTableColumn
atsConfigPhaseLowLoadThreshold = _AtsConfigPhaseLowLoadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 3),
    _AtsConfigPhaseLowLoadThreshold_Type()
)
atsConfigPhaseLowLoadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigPhaseLowLoadThreshold.setStatus("mandatory")
_AtsConfigPhaseNearOverLoadThreshold_Type = Integer32
_AtsConfigPhaseNearOverLoadThreshold_Object = MibTableColumn
atsConfigPhaseNearOverLoadThreshold = _AtsConfigPhaseNearOverLoadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 4),
    _AtsConfigPhaseNearOverLoadThreshold_Type()
)
atsConfigPhaseNearOverLoadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigPhaseNearOverLoadThreshold.setStatus("mandatory")
_AtsConfigPhaseOverLoadThreshold_Type = Integer32
_AtsConfigPhaseOverLoadThreshold_Object = MibTableColumn
atsConfigPhaseOverLoadThreshold = _AtsConfigPhaseOverLoadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 4, 16, 1, 5),
    _AtsConfigPhaseOverLoadThreshold_Type()
)
atsConfigPhaseOverLoadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsConfigPhaseOverLoadThreshold.setStatus("mandatory")
_AtsStatus_ObjectIdentity = ObjectIdentity
atsStatus = _AtsStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5)
)
_AtsStatusDeviceStatus_ObjectIdentity = ObjectIdentity
atsStatusDeviceStatus = _AtsStatusDeviceStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1)
)


class _AtsStatusCommStatus_Type(Integer32):
    """Custom type atsStatusCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("atsCommEstablished", 2),
          ("atsCommLost", 3),
          ("atsNeverDiscovered", 1))
    )


_AtsStatusCommStatus_Type.__name__ = "Integer32"
_AtsStatusCommStatus_Object = MibScalar
atsStatusCommStatus = _AtsStatusCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 1),
    _AtsStatusCommStatus_Type()
)
atsStatusCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusCommStatus.setStatus("mandatory")


class _AtsStatusSelectedSource_Type(Integer32):
    """Custom type atsStatusSelectedSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sourceA", 1),
          ("sourceB", 2))
    )


_AtsStatusSelectedSource_Type.__name__ = "Integer32"
_AtsStatusSelectedSource_Object = MibScalar
atsStatusSelectedSource = _AtsStatusSelectedSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 2),
    _AtsStatusSelectedSource_Type()
)
atsStatusSelectedSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusSelectedSource.setStatus("mandatory")


class _AtsStatusRedundancyState_Type(Integer32):
    """Custom type atsStatusRedundancyState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atsFullyRedundant", 2),
          ("atsRedundancyLost", 1))
    )


_AtsStatusRedundancyState_Type.__name__ = "Integer32"
_AtsStatusRedundancyState_Object = MibScalar
atsStatusRedundancyState = _AtsStatusRedundancyState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 3),
    _AtsStatusRedundancyState_Type()
)
atsStatusRedundancyState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusRedundancyState.setStatus("mandatory")


class _AtsStatusOverCurrentState_Type(Integer32):
    """Custom type atsStatusOverCurrentState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atsCurrentOK", 2),
          ("atsOverCurrent", 1))
    )


_AtsStatusOverCurrentState_Type.__name__ = "Integer32"
_AtsStatusOverCurrentState_Object = MibScalar
atsStatusOverCurrentState = _AtsStatusOverCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 4),
    _AtsStatusOverCurrentState_Type()
)
atsStatusOverCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusOverCurrentState.setStatus("mandatory")


class _AtsStatus5VPowerSupply_Type(Integer32):
    """Custom type atsStatus5VPowerSupply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atsPowerSupplyFailure", 1),
          ("atsPowerSupplyOK", 2))
    )


_AtsStatus5VPowerSupply_Type.__name__ = "Integer32"
_AtsStatus5VPowerSupply_Object = MibScalar
atsStatus5VPowerSupply = _AtsStatus5VPowerSupply_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 5),
    _AtsStatus5VPowerSupply_Type()
)
atsStatus5VPowerSupply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatus5VPowerSupply.setStatus("mandatory")


class _AtsStatus24VPowerSupply_Type(Integer32):
    """Custom type atsStatus24VPowerSupply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atsPowerSupplyFailure", 1),
          ("atsPowerSupplyOK", 2))
    )


_AtsStatus24VPowerSupply_Type.__name__ = "Integer32"
_AtsStatus24VPowerSupply_Object = MibScalar
atsStatus24VPowerSupply = _AtsStatus24VPowerSupply_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 6),
    _AtsStatus24VPowerSupply_Type()
)
atsStatus24VPowerSupply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatus24VPowerSupply.setStatus("mandatory")


class _AtsStatus24VSourceBPowerSupply_Type(Integer32):
    """Custom type atsStatus24VSourceBPowerSupply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atsPowerSupplyFailure", 1),
          ("atsPowerSupplyOK", 2))
    )


_AtsStatus24VSourceBPowerSupply_Type.__name__ = "Integer32"
_AtsStatus24VSourceBPowerSupply_Object = MibScalar
atsStatus24VSourceBPowerSupply = _AtsStatus24VSourceBPowerSupply_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 7),
    _AtsStatus24VSourceBPowerSupply_Type()
)
atsStatus24VSourceBPowerSupply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatus24VSourceBPowerSupply.setStatus("mandatory")


class _AtsStatusPlus12VPowerSupply_Type(Integer32):
    """Custom type atsStatusPlus12VPowerSupply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atsPowerSupplyFailure", 1),
          ("atsPowerSupplyOK", 2))
    )


_AtsStatusPlus12VPowerSupply_Type.__name__ = "Integer32"
_AtsStatusPlus12VPowerSupply_Object = MibScalar
atsStatusPlus12VPowerSupply = _AtsStatusPlus12VPowerSupply_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 8),
    _AtsStatusPlus12VPowerSupply_Type()
)
atsStatusPlus12VPowerSupply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusPlus12VPowerSupply.setStatus("mandatory")


class _AtsStatusMinus12VPowerSupply_Type(Integer32):
    """Custom type atsStatusMinus12VPowerSupply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atsPowerSupplyFailure", 1),
          ("atsPowerSupplyOK", 2))
    )


_AtsStatusMinus12VPowerSupply_Type.__name__ = "Integer32"
_AtsStatusMinus12VPowerSupply_Object = MibScalar
atsStatusMinus12VPowerSupply = _AtsStatusMinus12VPowerSupply_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 9),
    _AtsStatusMinus12VPowerSupply_Type()
)
atsStatusMinus12VPowerSupply.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusMinus12VPowerSupply.setStatus("mandatory")


class _AtsStatusSwitchStatus_Type(Integer32):
    """Custom type atsStatusSwitchStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fail", 1),
          ("ok", 2))
    )


_AtsStatusSwitchStatus_Type.__name__ = "Integer32"
_AtsStatusSwitchStatus_Object = MibScalar
atsStatusSwitchStatus = _AtsStatusSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 10),
    _AtsStatusSwitchStatus_Type()
)
atsStatusSwitchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusSwitchStatus.setStatus("mandatory")


class _AtsStatusFrontPanel_Type(Integer32):
    """Custom type atsStatusFrontPanel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 1),
          ("unlocked", 2))
    )


_AtsStatusFrontPanel_Type.__name__ = "Integer32"
_AtsStatusFrontPanel_Object = MibScalar
atsStatusFrontPanel = _AtsStatusFrontPanel_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 11),
    _AtsStatusFrontPanel_Type()
)
atsStatusFrontPanel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusFrontPanel.setStatus("mandatory")


class _AtsStatusSourceAStatus_Type(Integer32):
    """Custom type atsStatusSourceAStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fail", 1),
          ("ok", 2))
    )


_AtsStatusSourceAStatus_Type.__name__ = "Integer32"
_AtsStatusSourceAStatus_Object = MibScalar
atsStatusSourceAStatus = _AtsStatusSourceAStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 12),
    _AtsStatusSourceAStatus_Type()
)
atsStatusSourceAStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusSourceAStatus.setStatus("mandatory")


class _AtsStatusSourceBStatus_Type(Integer32):
    """Custom type atsStatusSourceBStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fail", 1),
          ("ok", 2))
    )


_AtsStatusSourceBStatus_Type.__name__ = "Integer32"
_AtsStatusSourceBStatus_Object = MibScalar
atsStatusSourceBStatus = _AtsStatusSourceBStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 13),
    _AtsStatusSourceBStatus_Type()
)
atsStatusSourceBStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusSourceBStatus.setStatus("mandatory")


class _AtsStatusPhaseSyncStatus_Type(Integer32):
    """Custom type atsStatusPhaseSyncStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inSync", 1),
          ("outOfSync", 2))
    )


_AtsStatusPhaseSyncStatus_Type.__name__ = "Integer32"
_AtsStatusPhaseSyncStatus_Object = MibScalar
atsStatusPhaseSyncStatus = _AtsStatusPhaseSyncStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 14),
    _AtsStatusPhaseSyncStatus_Type()
)
atsStatusPhaseSyncStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusPhaseSyncStatus.setStatus("mandatory")


class _AtsStatusVoltageOutStatus_Type(Integer32):
    """Custom type atsStatusVoltageOutStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fail", 1),
          ("ok", 2))
    )


_AtsStatusVoltageOutStatus_Type.__name__ = "Integer32"
_AtsStatusVoltageOutStatus_Object = MibScalar
atsStatusVoltageOutStatus = _AtsStatusVoltageOutStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 15),
    _AtsStatusVoltageOutStatus_Type()
)
atsStatusVoltageOutStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusVoltageOutStatus.setStatus("mandatory")


class _AtsStatusHardwareStatus_Type(Integer32):
    """Custom type atsStatusHardwareStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fail", 1),
          ("ok", 2))
    )


_AtsStatusHardwareStatus_Type.__name__ = "Integer32"
_AtsStatusHardwareStatus_Object = MibScalar
atsStatusHardwareStatus = _AtsStatusHardwareStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 1, 16),
    _AtsStatusHardwareStatus_Type()
)
atsStatusHardwareStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsStatusHardwareStatus.setStatus("mandatory")
_AtsStatusResetValues_ObjectIdentity = ObjectIdentity
atsStatusResetValues = _AtsStatusResetValues_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 2)
)


class _AtsStatusResetMaxMinValues_Type(Integer32):
    """Custom type atsStatusResetMaxMinValues based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("reset", 2))
    )


_AtsStatusResetMaxMinValues_Type.__name__ = "Integer32"
_AtsStatusResetMaxMinValues_Object = MibScalar
atsStatusResetMaxMinValues = _AtsStatusResetMaxMinValues_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 2, 1),
    _AtsStatusResetMaxMinValues_Type()
)
atsStatusResetMaxMinValues.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsStatusResetMaxMinValues.setStatus("mandatory")
_AtsStatusInput_ObjectIdentity = ObjectIdentity
atsStatusInput = _AtsStatusInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3)
)
_AtsNumInputs_Type = Integer32
_AtsNumInputs_Object = MibScalar
atsNumInputs = _AtsNumInputs_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 1),
    _AtsNumInputs_Type()
)
atsNumInputs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsNumInputs.setStatus("mandatory")
_AtsInputTable_Object = MibTable
atsInputTable = _AtsInputTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2)
)
if mibBuilder.loadTexts:
    atsInputTable.setStatus("mandatory")
_AtsInputEntry_Object = MibTableRow
atsInputEntry = _AtsInputEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1)
)
atsInputEntry.setIndexNames(
    (0, "POWERNET-MIB", "atsInputTableIndex"),
)
if mibBuilder.loadTexts:
    atsInputEntry.setStatus("mandatory")
_AtsInputTableIndex_Type = Integer32
_AtsInputTableIndex_Object = MibTableColumn
atsInputTableIndex = _AtsInputTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 1),
    _AtsInputTableIndex_Type()
)
atsInputTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputTableIndex.setStatus("mandatory")
_AtsNumInputPhases_Type = Integer32
_AtsNumInputPhases_Object = MibTableColumn
atsNumInputPhases = _AtsNumInputPhases_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 2),
    _AtsNumInputPhases_Type()
)
atsNumInputPhases.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsNumInputPhases.setStatus("mandatory")


class _AtsInputVoltageOrientation_Type(Integer32):
    """Custom type atsInputVoltageOrientation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("singlePhase", 2),
          ("splitPhase", 3),
          ("threePhasePhaseToNeutral", 4),
          ("threePhasePhaseToPhase", 5),
          ("unknown", 1))
    )


_AtsInputVoltageOrientation_Type.__name__ = "Integer32"
_AtsInputVoltageOrientation_Object = MibTableColumn
atsInputVoltageOrientation = _AtsInputVoltageOrientation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 3),
    _AtsInputVoltageOrientation_Type()
)
atsInputVoltageOrientation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputVoltageOrientation.setStatus("mandatory")
_AtsInputFrequency_Type = Integer32
_AtsInputFrequency_Object = MibTableColumn
atsInputFrequency = _AtsInputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 4),
    _AtsInputFrequency_Type()
)
atsInputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputFrequency.setStatus("mandatory")


class _AtsInputType_Type(Integer32):
    """Custom type atsInputType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bypass", 3),
          ("main", 2),
          ("unknown", 1))
    )


_AtsInputType_Type.__name__ = "Integer32"
_AtsInputType_Object = MibTableColumn
atsInputType = _AtsInputType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 5),
    _AtsInputType_Type()
)
atsInputType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputType.setStatus("mandatory")
_AtsInputName_Type = DisplayString
_AtsInputName_Object = MibTableColumn
atsInputName = _AtsInputName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 2, 1, 6),
    _AtsInputName_Type()
)
atsInputName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atsInputName.setStatus("mandatory")
_AtsInputPhaseTable_Object = MibTable
atsInputPhaseTable = _AtsInputPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3)
)
if mibBuilder.loadTexts:
    atsInputPhaseTable.setStatus("mandatory")
_AtsInputPhaseEntry_Object = MibTableRow
atsInputPhaseEntry = _AtsInputPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1)
)
atsInputPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "atsInputPhaseTableIndex"),
    (0, "POWERNET-MIB", "atsInputPhaseIndex"),
)
if mibBuilder.loadTexts:
    atsInputPhaseEntry.setStatus("mandatory")
_AtsInputPhaseTableIndex_Type = Integer32
_AtsInputPhaseTableIndex_Object = MibTableColumn
atsInputPhaseTableIndex = _AtsInputPhaseTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 1),
    _AtsInputPhaseTableIndex_Type()
)
atsInputPhaseTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputPhaseTableIndex.setStatus("mandatory")
_AtsInputPhaseIndex_Type = Integer32
_AtsInputPhaseIndex_Object = MibTableColumn
atsInputPhaseIndex = _AtsInputPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 2),
    _AtsInputPhaseIndex_Type()
)
atsInputPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputPhaseIndex.setStatus("mandatory")
_AtsInputVoltage_Type = Integer32
_AtsInputVoltage_Object = MibTableColumn
atsInputVoltage = _AtsInputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 3),
    _AtsInputVoltage_Type()
)
atsInputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputVoltage.setStatus("mandatory")
_AtsInputMaxVoltage_Type = Integer32
_AtsInputMaxVoltage_Object = MibTableColumn
atsInputMaxVoltage = _AtsInputMaxVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 4),
    _AtsInputMaxVoltage_Type()
)
atsInputMaxVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputMaxVoltage.setStatus("mandatory")
_AtsInputMinVoltage_Type = Integer32
_AtsInputMinVoltage_Object = MibTableColumn
atsInputMinVoltage = _AtsInputMinVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 5),
    _AtsInputMinVoltage_Type()
)
atsInputMinVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputMinVoltage.setStatus("mandatory")
_AtsInputCurrent_Type = Integer32
_AtsInputCurrent_Object = MibTableColumn
atsInputCurrent = _AtsInputCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 6),
    _AtsInputCurrent_Type()
)
atsInputCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputCurrent.setStatus("mandatory")
_AtsInputMaxCurrent_Type = Integer32
_AtsInputMaxCurrent_Object = MibTableColumn
atsInputMaxCurrent = _AtsInputMaxCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 7),
    _AtsInputMaxCurrent_Type()
)
atsInputMaxCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputMaxCurrent.setStatus("mandatory")
_AtsInputMinCurrent_Type = Integer32
_AtsInputMinCurrent_Object = MibTableColumn
atsInputMinCurrent = _AtsInputMinCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 8),
    _AtsInputMinCurrent_Type()
)
atsInputMinCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputMinCurrent.setStatus("mandatory")
_AtsInputPower_Type = Integer32
_AtsInputPower_Object = MibTableColumn
atsInputPower = _AtsInputPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 9),
    _AtsInputPower_Type()
)
atsInputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputPower.setStatus("mandatory")
_AtsInputMaxPower_Type = Integer32
_AtsInputMaxPower_Object = MibTableColumn
atsInputMaxPower = _AtsInputMaxPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 10),
    _AtsInputMaxPower_Type()
)
atsInputMaxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputMaxPower.setStatus("mandatory")
_AtsInputMinPower_Type = Integer32
_AtsInputMinPower_Object = MibTableColumn
atsInputMinPower = _AtsInputMinPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 3, 3, 1, 11),
    _AtsInputMinPower_Type()
)
atsInputMinPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsInputMinPower.setStatus("mandatory")
_AtsStatusOutput_ObjectIdentity = ObjectIdentity
atsStatusOutput = _AtsStatusOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4)
)
_AtsNumOutputs_Type = Integer32
_AtsNumOutputs_Object = MibScalar
atsNumOutputs = _AtsNumOutputs_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 1),
    _AtsNumOutputs_Type()
)
atsNumOutputs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsNumOutputs.setStatus("mandatory")
_AtsOutputTable_Object = MibTable
atsOutputTable = _AtsOutputTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2)
)
if mibBuilder.loadTexts:
    atsOutputTable.setStatus("mandatory")
_AtsOutputEntry_Object = MibTableRow
atsOutputEntry = _AtsOutputEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1)
)
atsOutputEntry.setIndexNames(
    (0, "POWERNET-MIB", "atsOutputTableIndex"),
)
if mibBuilder.loadTexts:
    atsOutputEntry.setStatus("mandatory")
_AtsOutputTableIndex_Type = Integer32
_AtsOutputTableIndex_Object = MibTableColumn
atsOutputTableIndex = _AtsOutputTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 1),
    _AtsOutputTableIndex_Type()
)
atsOutputTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputTableIndex.setStatus("mandatory")
_AtsNumOutputPhases_Type = Integer32
_AtsNumOutputPhases_Object = MibTableColumn
atsNumOutputPhases = _AtsNumOutputPhases_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 2),
    _AtsNumOutputPhases_Type()
)
atsNumOutputPhases.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsNumOutputPhases.setStatus("mandatory")


class _AtsOutputVoltageOrientation_Type(Integer32):
    """Custom type atsOutputVoltageOrientation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("singlePhase", 2),
          ("splitPhase", 3),
          ("threePhasePhaseToNeutral", 4),
          ("threePhasePhaseToPhase", 5),
          ("unknown", 1))
    )


_AtsOutputVoltageOrientation_Type.__name__ = "Integer32"
_AtsOutputVoltageOrientation_Object = MibTableColumn
atsOutputVoltageOrientation = _AtsOutputVoltageOrientation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 3),
    _AtsOutputVoltageOrientation_Type()
)
atsOutputVoltageOrientation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputVoltageOrientation.setStatus("mandatory")
_AtsOutputFrequency_Type = Integer32
_AtsOutputFrequency_Object = MibTableColumn
atsOutputFrequency = _AtsOutputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 2, 1, 4),
    _AtsOutputFrequency_Type()
)
atsOutputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputFrequency.setStatus("mandatory")
_AtsOutputPhaseTable_Object = MibTable
atsOutputPhaseTable = _AtsOutputPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3)
)
if mibBuilder.loadTexts:
    atsOutputPhaseTable.setStatus("mandatory")
_AtsOutputPhaseEntry_Object = MibTableRow
atsOutputPhaseEntry = _AtsOutputPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1)
)
atsOutputPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "atsOutputPhaseTableIndex"),
    (0, "POWERNET-MIB", "atsOutputPhaseIndex"),
)
if mibBuilder.loadTexts:
    atsOutputPhaseEntry.setStatus("mandatory")
_AtsOutputPhaseTableIndex_Type = Integer32
_AtsOutputPhaseTableIndex_Object = MibTableColumn
atsOutputPhaseTableIndex = _AtsOutputPhaseTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 1),
    _AtsOutputPhaseTableIndex_Type()
)
atsOutputPhaseTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputPhaseTableIndex.setStatus("mandatory")


class _AtsOutputPhaseIndex_Type(Integer32):
    """Custom type atsOutputPhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("neutral", 4),
          ("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_AtsOutputPhaseIndex_Type.__name__ = "Integer32"
_AtsOutputPhaseIndex_Object = MibTableColumn
atsOutputPhaseIndex = _AtsOutputPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 2),
    _AtsOutputPhaseIndex_Type()
)
atsOutputPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputPhaseIndex.setStatus("mandatory")
_AtsOutputVoltage_Type = Integer32
_AtsOutputVoltage_Object = MibTableColumn
atsOutputVoltage = _AtsOutputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 3),
    _AtsOutputVoltage_Type()
)
atsOutputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputVoltage.setStatus("mandatory")
_AtsOutputCurrent_Type = Integer32
_AtsOutputCurrent_Object = MibTableColumn
atsOutputCurrent = _AtsOutputCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 4),
    _AtsOutputCurrent_Type()
)
atsOutputCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputCurrent.setStatus("mandatory")
_AtsOutputMaxCurrent_Type = Integer32
_AtsOutputMaxCurrent_Object = MibTableColumn
atsOutputMaxCurrent = _AtsOutputMaxCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 5),
    _AtsOutputMaxCurrent_Type()
)
atsOutputMaxCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputMaxCurrent.setStatus("mandatory")
_AtsOutputMinCurrent_Type = Integer32
_AtsOutputMinCurrent_Object = MibTableColumn
atsOutputMinCurrent = _AtsOutputMinCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 6),
    _AtsOutputMinCurrent_Type()
)
atsOutputMinCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputMinCurrent.setStatus("mandatory")
_AtsOutputLoad_Type = Integer32
_AtsOutputLoad_Object = MibTableColumn
atsOutputLoad = _AtsOutputLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 7),
    _AtsOutputLoad_Type()
)
atsOutputLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputLoad.setStatus("mandatory")
_AtsOutputMaxLoad_Type = Integer32
_AtsOutputMaxLoad_Object = MibTableColumn
atsOutputMaxLoad = _AtsOutputMaxLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 8),
    _AtsOutputMaxLoad_Type()
)
atsOutputMaxLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputMaxLoad.setStatus("mandatory")
_AtsOutputMinLoad_Type = Integer32
_AtsOutputMinLoad_Object = MibTableColumn
atsOutputMinLoad = _AtsOutputMinLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 9),
    _AtsOutputMinLoad_Type()
)
atsOutputMinLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputMinLoad.setStatus("mandatory")
_AtsOutputPercentLoad_Type = Integer32
_AtsOutputPercentLoad_Object = MibTableColumn
atsOutputPercentLoad = _AtsOutputPercentLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 10),
    _AtsOutputPercentLoad_Type()
)
atsOutputPercentLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputPercentLoad.setStatus("mandatory")
_AtsOutputMaxPercentLoad_Type = Integer32
_AtsOutputMaxPercentLoad_Object = MibTableColumn
atsOutputMaxPercentLoad = _AtsOutputMaxPercentLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 11),
    _AtsOutputMaxPercentLoad_Type()
)
atsOutputMaxPercentLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputMaxPercentLoad.setStatus("mandatory")
_AtsOutputMinPercentLoad_Type = Integer32
_AtsOutputMinPercentLoad_Object = MibTableColumn
atsOutputMinPercentLoad = _AtsOutputMinPercentLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 12),
    _AtsOutputMinPercentLoad_Type()
)
atsOutputMinPercentLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputMinPercentLoad.setStatus("mandatory")
_AtsOutputPower_Type = Integer32
_AtsOutputPower_Object = MibTableColumn
atsOutputPower = _AtsOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 13),
    _AtsOutputPower_Type()
)
atsOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputPower.setStatus("mandatory")
_AtsOutputMaxPower_Type = Integer32
_AtsOutputMaxPower_Object = MibTableColumn
atsOutputMaxPower = _AtsOutputMaxPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 14),
    _AtsOutputMaxPower_Type()
)
atsOutputMaxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputMaxPower.setStatus("mandatory")
_AtsOutputMinPower_Type = Integer32
_AtsOutputMinPower_Object = MibTableColumn
atsOutputMinPower = _AtsOutputMinPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 15),
    _AtsOutputMinPower_Type()
)
atsOutputMinPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputMinPower.setStatus("mandatory")
_AtsOutputPercentPower_Type = Integer32
_AtsOutputPercentPower_Object = MibTableColumn
atsOutputPercentPower = _AtsOutputPercentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 16),
    _AtsOutputPercentPower_Type()
)
atsOutputPercentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputPercentPower.setStatus("mandatory")
_AtsOutputMaxPercentPower_Type = Integer32
_AtsOutputMaxPercentPower_Object = MibTableColumn
atsOutputMaxPercentPower = _AtsOutputMaxPercentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 17),
    _AtsOutputMaxPercentPower_Type()
)
atsOutputMaxPercentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputMaxPercentPower.setStatus("mandatory")
_AtsOutputMinPercentPower_Type = Integer32
_AtsOutputMinPercentPower_Object = MibTableColumn
atsOutputMinPercentPower = _AtsOutputMinPercentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 18),
    _AtsOutputMinPercentPower_Type()
)
atsOutputMinPercentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputMinPercentPower.setStatus("mandatory")


class _AtsOutputPhaseState_Type(Integer32):
    """Custom type atsOutputPhaseState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("lowload", 2),
          ("nearoverload", 3),
          ("normal", 1),
          ("overload", 4))
    )


_AtsOutputPhaseState_Type.__name__ = "Integer32"
_AtsOutputPhaseState_Object = MibTableColumn
atsOutputPhaseState = _AtsOutputPhaseState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 3, 1, 19),
    _AtsOutputPhaseState_Type()
)
atsOutputPhaseState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputPhaseState.setStatus("mandatory")
_AtsOutputBankTableSize_Type = Integer32
_AtsOutputBankTableSize_Object = MibScalar
atsOutputBankTableSize = _AtsOutputBankTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 4),
    _AtsOutputBankTableSize_Type()
)
atsOutputBankTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankTableSize.setStatus("mandatory")
_AtsOutputBankTable_Object = MibTable
atsOutputBankTable = _AtsOutputBankTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5)
)
if mibBuilder.loadTexts:
    atsOutputBankTable.setStatus("mandatory")
_AtsOutputBankEntry_Object = MibTableRow
atsOutputBankEntry = _AtsOutputBankEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1)
)
atsOutputBankEntry.setIndexNames(
    (0, "POWERNET-MIB", "atsOutputBankTableIndex"),
)
if mibBuilder.loadTexts:
    atsOutputBankEntry.setStatus("mandatory")
_AtsOutputBankTableIndex_Type = Integer32
_AtsOutputBankTableIndex_Object = MibTableColumn
atsOutputBankTableIndex = _AtsOutputBankTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 1),
    _AtsOutputBankTableIndex_Type()
)
atsOutputBankTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankTableIndex.setStatus("mandatory")


class _AtsOutputPhase_Type(Integer32):
    """Custom type atsOutputPhase based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_AtsOutputPhase_Type.__name__ = "Integer32"
_AtsOutputPhase_Object = MibTableColumn
atsOutputPhase = _AtsOutputPhase_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 2),
    _AtsOutputPhase_Type()
)
atsOutputPhase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputPhase.setStatus("mandatory")


class _AtsOutputBank_Type(Integer32):
    """Custom type atsOutputBank based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bank1", 2),
          ("bank2", 3),
          ("total", 1))
    )


_AtsOutputBank_Type.__name__ = "Integer32"
_AtsOutputBank_Object = MibTableColumn
atsOutputBank = _AtsOutputBank_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 3),
    _AtsOutputBank_Type()
)
atsOutputBank.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBank.setStatus("mandatory")
_AtsOutputBankCurrent_Type = Gauge32
_AtsOutputBankCurrent_Object = MibTableColumn
atsOutputBankCurrent = _AtsOutputBankCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 4),
    _AtsOutputBankCurrent_Type()
)
atsOutputBankCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankCurrent.setStatus("mandatory")


class _AtsOutputBankState_Type(Integer32):
    """Custom type atsOutputBankState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("lowload", 2),
          ("nearoverload", 3),
          ("normal", 1),
          ("overload", 4))
    )


_AtsOutputBankState_Type.__name__ = "Integer32"
_AtsOutputBankState_Object = MibTableColumn
atsOutputBankState = _AtsOutputBankState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 5),
    _AtsOutputBankState_Type()
)
atsOutputBankState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankState.setStatus("mandatory")
_AtsOutputBankOutputVoltage_Type = Integer32
_AtsOutputBankOutputVoltage_Object = MibTableColumn
atsOutputBankOutputVoltage = _AtsOutputBankOutputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 6),
    _AtsOutputBankOutputVoltage_Type()
)
atsOutputBankOutputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankOutputVoltage.setStatus("mandatory")
_AtsOutputBankMaxCurrent_Type = Integer32
_AtsOutputBankMaxCurrent_Object = MibTableColumn
atsOutputBankMaxCurrent = _AtsOutputBankMaxCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 7),
    _AtsOutputBankMaxCurrent_Type()
)
atsOutputBankMaxCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankMaxCurrent.setStatus("mandatory")
_AtsOutputBankMinCurrent_Type = Integer32
_AtsOutputBankMinCurrent_Object = MibTableColumn
atsOutputBankMinCurrent = _AtsOutputBankMinCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 8),
    _AtsOutputBankMinCurrent_Type()
)
atsOutputBankMinCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankMinCurrent.setStatus("mandatory")
_AtsOutputBankLoad_Type = Integer32
_AtsOutputBankLoad_Object = MibTableColumn
atsOutputBankLoad = _AtsOutputBankLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 9),
    _AtsOutputBankLoad_Type()
)
atsOutputBankLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankLoad.setStatus("mandatory")
_AtsOutputBankMaxLoad_Type = Integer32
_AtsOutputBankMaxLoad_Object = MibTableColumn
atsOutputBankMaxLoad = _AtsOutputBankMaxLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 10),
    _AtsOutputBankMaxLoad_Type()
)
atsOutputBankMaxLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankMaxLoad.setStatus("mandatory")
_AtsOutputBankMinLoad_Type = Integer32
_AtsOutputBankMinLoad_Object = MibTableColumn
atsOutputBankMinLoad = _AtsOutputBankMinLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 11),
    _AtsOutputBankMinLoad_Type()
)
atsOutputBankMinLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankMinLoad.setStatus("mandatory")
_AtsOutputBankPercentLoad_Type = Integer32
_AtsOutputBankPercentLoad_Object = MibTableColumn
atsOutputBankPercentLoad = _AtsOutputBankPercentLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 12),
    _AtsOutputBankPercentLoad_Type()
)
atsOutputBankPercentLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankPercentLoad.setStatus("mandatory")
_AtsOutputBankMaxPercentLoad_Type = Integer32
_AtsOutputBankMaxPercentLoad_Object = MibTableColumn
atsOutputBankMaxPercentLoad = _AtsOutputBankMaxPercentLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 13),
    _AtsOutputBankMaxPercentLoad_Type()
)
atsOutputBankMaxPercentLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankMaxPercentLoad.setStatus("mandatory")
_AtsOutputBankMinPercentLoad_Type = Integer32
_AtsOutputBankMinPercentLoad_Object = MibTableColumn
atsOutputBankMinPercentLoad = _AtsOutputBankMinPercentLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 14),
    _AtsOutputBankMinPercentLoad_Type()
)
atsOutputBankMinPercentLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankMinPercentLoad.setStatus("mandatory")
_AtsOutputBankPower_Type = Integer32
_AtsOutputBankPower_Object = MibTableColumn
atsOutputBankPower = _AtsOutputBankPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 15),
    _AtsOutputBankPower_Type()
)
atsOutputBankPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankPower.setStatus("mandatory")
_AtsOutputBankMaxPower_Type = Integer32
_AtsOutputBankMaxPower_Object = MibTableColumn
atsOutputBankMaxPower = _AtsOutputBankMaxPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 16),
    _AtsOutputBankMaxPower_Type()
)
atsOutputBankMaxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankMaxPower.setStatus("mandatory")
_AtsOutputBankMinPower_Type = Integer32
_AtsOutputBankMinPower_Object = MibTableColumn
atsOutputBankMinPower = _AtsOutputBankMinPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 17),
    _AtsOutputBankMinPower_Type()
)
atsOutputBankMinPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankMinPower.setStatus("mandatory")
_AtsOutputBankPercentPower_Type = Integer32
_AtsOutputBankPercentPower_Object = MibTableColumn
atsOutputBankPercentPower = _AtsOutputBankPercentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 18),
    _AtsOutputBankPercentPower_Type()
)
atsOutputBankPercentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankPercentPower.setStatus("mandatory")
_AtsOutputBankMaxPercentPower_Type = Integer32
_AtsOutputBankMaxPercentPower_Object = MibTableColumn
atsOutputBankMaxPercentPower = _AtsOutputBankMaxPercentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 19),
    _AtsOutputBankMaxPercentPower_Type()
)
atsOutputBankMaxPercentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankMaxPercentPower.setStatus("mandatory")
_AtsOutputBankMinPercentPower_Type = Integer32
_AtsOutputBankMinPercentPower_Object = MibTableColumn
atsOutputBankMinPercentPower = _AtsOutputBankMinPercentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 8, 5, 4, 5, 1, 20),
    _AtsOutputBankMinPercentPower_Type()
)
atsOutputBankMinPercentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atsOutputBankMinPercentPower.setStatus("mandatory")
_Dc2_ObjectIdentity = ObjectIdentity
dc2 = _Dc2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9)
)
_Dcmim2Ident_ObjectIdentity = ObjectIdentity
dcmim2Ident = _Dcmim2Ident_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1)
)
_Dcmim2IdentSystem_ObjectIdentity = ObjectIdentity
dcmim2IdentSystem = _Dcmim2IdentSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1, 1)
)
_Dcmim2IdentSysFWVersion_Type = Integer32
_Dcmim2IdentSysFWVersion_Object = MibScalar
dcmim2IdentSysFWVersion = _Dcmim2IdentSysFWVersion_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 1, 1, 1),
    _Dcmim2IdentSysFWVersion_Type()
)
dcmim2IdentSysFWVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2IdentSysFWVersion.setStatus("mandatory")
_Dcmim2Control_ObjectIdentity = ObjectIdentity
dcmim2Control = _Dcmim2Control_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2)
)
_Dcmim2ControlSystem_ObjectIdentity = ObjectIdentity
dcmim2ControlSystem = _Dcmim2ControlSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1)
)


class _Dcmim2ControlRunFunctBatteryTest_Type(Integer32):
    """Custom type dcmim2ControlRunFunctBatteryTest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("battTestOff", 1),
          ("battTestOn", 2))
    )


_Dcmim2ControlRunFunctBatteryTest_Type.__name__ = "Integer32"
_Dcmim2ControlRunFunctBatteryTest_Object = MibScalar
dcmim2ControlRunFunctBatteryTest = _Dcmim2ControlRunFunctBatteryTest_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1, 1),
    _Dcmim2ControlRunFunctBatteryTest_Type()
)
dcmim2ControlRunFunctBatteryTest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ControlRunFunctBatteryTest.setStatus("mandatory")


class _Dcmim2ControlRunCapacityBatteryTest_Type(Integer32):
    """Custom type dcmim2ControlRunCapacityBatteryTest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("battTestOff", 1),
          ("battTestOn", 2))
    )


_Dcmim2ControlRunCapacityBatteryTest_Type.__name__ = "Integer32"
_Dcmim2ControlRunCapacityBatteryTest_Object = MibScalar
dcmim2ControlRunCapacityBatteryTest = _Dcmim2ControlRunCapacityBatteryTest_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 2, 1, 2),
    _Dcmim2ControlRunCapacityBatteryTest_Type()
)
dcmim2ControlRunCapacityBatteryTest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ControlRunCapacityBatteryTest.setStatus("mandatory")
_Dcmim2Config_ObjectIdentity = ObjectIdentity
dcmim2Config = _Dcmim2Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3)
)
_Dcmim2ConfigSystem_ObjectIdentity = ObjectIdentity
dcmim2ConfigSystem = _Dcmim2ConfigSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1)
)
_Dcmim2ConfigSysHighTempTrip_Type = Integer32
_Dcmim2ConfigSysHighTempTrip_Object = MibScalar
dcmim2ConfigSysHighTempTrip = _Dcmim2ConfigSysHighTempTrip_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 1),
    _Dcmim2ConfigSysHighTempTrip_Type()
)
dcmim2ConfigSysHighTempTrip.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigSysHighTempTrip.setStatus("mandatory")
_Dcmim2ConfigSysHighTempReset_Type = Integer32
_Dcmim2ConfigSysHighTempReset_Object = MibScalar
dcmim2ConfigSysHighTempReset = _Dcmim2ConfigSysHighTempReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 2),
    _Dcmim2ConfigSysHighTempReset_Type()
)
dcmim2ConfigSysHighTempReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigSysHighTempReset.setStatus("mandatory")
_Dcmim2ConfigSysLowTempTrip_Type = Integer32
_Dcmim2ConfigSysLowTempTrip_Object = MibScalar
dcmim2ConfigSysLowTempTrip = _Dcmim2ConfigSysLowTempTrip_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 3),
    _Dcmim2ConfigSysLowTempTrip_Type()
)
dcmim2ConfigSysLowTempTrip.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigSysLowTempTrip.setStatus("mandatory")
_Dcmim2ConfigSysLowTempReset_Type = Integer32
_Dcmim2ConfigSysLowTempReset_Object = MibScalar
dcmim2ConfigSysLowTempReset = _Dcmim2ConfigSysLowTempReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 1, 4),
    _Dcmim2ConfigSysLowTempReset_Type()
)
dcmim2ConfigSysLowTempReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigSysLowTempReset.setStatus("mandatory")
_Dcmim2ConfigBattery_ObjectIdentity = ObjectIdentity
dcmim2ConfigBattery = _Dcmim2ConfigBattery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2)
)
_Dcmim2ConfigBattFloatVolt_Type = Integer32
_Dcmim2ConfigBattFloatVolt_Object = MibScalar
dcmim2ConfigBattFloatVolt = _Dcmim2ConfigBattFloatVolt_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 1),
    _Dcmim2ConfigBattFloatVolt_Type()
)
dcmim2ConfigBattFloatVolt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigBattFloatVolt.setStatus("mandatory")
_Dcmim2ConfigBattMaxRecharge_Type = Integer32
_Dcmim2ConfigBattMaxRecharge_Object = MibScalar
dcmim2ConfigBattMaxRecharge = _Dcmim2ConfigBattMaxRecharge_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 2),
    _Dcmim2ConfigBattMaxRecharge_Type()
)
dcmim2ConfigBattMaxRecharge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigBattMaxRecharge.setStatus("mandatory")
_Dcmim2ConfigBattMfgCapacity_Type = Integer32
_Dcmim2ConfigBattMfgCapacity_Object = MibScalar
dcmim2ConfigBattMfgCapacity = _Dcmim2ConfigBattMfgCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 3),
    _Dcmim2ConfigBattMfgCapacity_Type()
)
dcmim2ConfigBattMfgCapacity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigBattMfgCapacity.setStatus("mandatory")
_Dcmim2ConfigBattType_Type = Integer32
_Dcmim2ConfigBattType_Object = MibScalar
dcmim2ConfigBattType = _Dcmim2ConfigBattType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 4),
    _Dcmim2ConfigBattType_Type()
)
dcmim2ConfigBattType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigBattType.setStatus("mandatory")
_Dcmim2ConfigBattFunctTestDuration_Type = Integer32
_Dcmim2ConfigBattFunctTestDuration_Object = MibScalar
dcmim2ConfigBattFunctTestDuration = _Dcmim2ConfigBattFunctTestDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 5),
    _Dcmim2ConfigBattFunctTestDuration_Type()
)
dcmim2ConfigBattFunctTestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigBattFunctTestDuration.setStatus("mandatory")
_Dcmim2ConfigBattFunctTestThresh_Type = Integer32
_Dcmim2ConfigBattFunctTestThresh_Object = MibScalar
dcmim2ConfigBattFunctTestThresh = _Dcmim2ConfigBattFunctTestThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 6),
    _Dcmim2ConfigBattFunctTestThresh_Type()
)
dcmim2ConfigBattFunctTestThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigBattFunctTestThresh.setStatus("mandatory")
_Dcmim2ConfigBattCapacityTestPercent_Type = Integer32
_Dcmim2ConfigBattCapacityTestPercent_Object = MibScalar
dcmim2ConfigBattCapacityTestPercent = _Dcmim2ConfigBattCapacityTestPercent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 7),
    _Dcmim2ConfigBattCapacityTestPercent_Type()
)
dcmim2ConfigBattCapacityTestPercent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigBattCapacityTestPercent.setStatus("mandatory")
_Dcmim2ConfigBattCapacityTestEndThresh_Type = Integer32
_Dcmim2ConfigBattCapacityTestEndThresh_Object = MibScalar
dcmim2ConfigBattCapacityTestEndThresh = _Dcmim2ConfigBattCapacityTestEndThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 8),
    _Dcmim2ConfigBattCapacityTestEndThresh_Type()
)
dcmim2ConfigBattCapacityTestEndThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigBattCapacityTestEndThresh.setStatus("mandatory")
_Dcmim2ConfigBattCapacityTestCurrent_Type = Integer32
_Dcmim2ConfigBattCapacityTestCurrent_Object = MibScalar
dcmim2ConfigBattCapacityTestCurrent = _Dcmim2ConfigBattCapacityTestCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 2, 9),
    _Dcmim2ConfigBattCapacityTestCurrent_Type()
)
dcmim2ConfigBattCapacityTestCurrent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigBattCapacityTestCurrent.setStatus("mandatory")
_Dcmim2ConfigLVD_ObjectIdentity = ObjectIdentity
dcmim2ConfigLVD = _Dcmim2ConfigLVD_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3)
)
_Dcmim2ConfigLVDTableSize_Type = Integer32
_Dcmim2ConfigLVDTableSize_Object = MibScalar
dcmim2ConfigLVDTableSize = _Dcmim2ConfigLVDTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 1),
    _Dcmim2ConfigLVDTableSize_Type()
)
dcmim2ConfigLVDTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2ConfigLVDTableSize.setStatus("mandatory")
_Dcmim2ConfigLVDTable_Object = MibTable
dcmim2ConfigLVDTable = _Dcmim2ConfigLVDTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2)
)
if mibBuilder.loadTexts:
    dcmim2ConfigLVDTable.setStatus("mandatory")
_Dcmim2ConfigLVDEntry_Object = MibTableRow
dcmim2ConfigLVDEntry = _Dcmim2ConfigLVDEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1)
)
dcmim2ConfigLVDEntry.setIndexNames(
    (0, "POWERNET-MIB", "dcmim2ConfigLVDIndex"),
)
if mibBuilder.loadTexts:
    dcmim2ConfigLVDEntry.setStatus("mandatory")
_Dcmim2ConfigLVDIndex_Type = Integer32
_Dcmim2ConfigLVDIndex_Object = MibTableColumn
dcmim2ConfigLVDIndex = _Dcmim2ConfigLVDIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 1),
    _Dcmim2ConfigLVDIndex_Type()
)
dcmim2ConfigLVDIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2ConfigLVDIndex.setStatus("mandatory")
_Dcmim2ConfigLVDTrip_Type = Integer32
_Dcmim2ConfigLVDTrip_Object = MibTableColumn
dcmim2ConfigLVDTrip = _Dcmim2ConfigLVDTrip_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 2),
    _Dcmim2ConfigLVDTrip_Type()
)
dcmim2ConfigLVDTrip.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigLVDTrip.setStatus("mandatory")
_Dcmim2ConfigLVDReset_Type = Integer32
_Dcmim2ConfigLVDReset_Object = MibTableColumn
dcmim2ConfigLVDReset = _Dcmim2ConfigLVDReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 3),
    _Dcmim2ConfigLVDReset_Type()
)
dcmim2ConfigLVDReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmim2ConfigLVDReset.setStatus("mandatory")


class _Dcmim2ConfigLVDState_Type(Integer32):
    """Custom type dcmim2ConfigLVDState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusClosed", 1),
          ("statusOpened", 2))
    )


_Dcmim2ConfigLVDState_Type.__name__ = "Integer32"
_Dcmim2ConfigLVDState_Object = MibTableColumn
dcmim2ConfigLVDState = _Dcmim2ConfigLVDState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 3, 3, 2, 1, 4),
    _Dcmim2ConfigLVDState_Type()
)
dcmim2ConfigLVDState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2ConfigLVDState.setStatus("mandatory")
_Dcmim2Status_ObjectIdentity = ObjectIdentity
dcmim2Status = _Dcmim2Status_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4)
)
_Dcmim2StatusSystem_ObjectIdentity = ObjectIdentity
dcmim2StatusSystem = _Dcmim2StatusSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1)
)
_Dcmim2StatusSysRectCurrent_Type = Integer32
_Dcmim2StatusSysRectCurrent_Object = MibScalar
dcmim2StatusSysRectCurrent = _Dcmim2StatusSysRectCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 1),
    _Dcmim2StatusSysRectCurrent_Type()
)
dcmim2StatusSysRectCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusSysRectCurrent.setStatus("mandatory")
_Dcmim2StatusSysLoadCurrent_Type = Integer32
_Dcmim2StatusSysLoadCurrent_Object = MibScalar
dcmim2StatusSysLoadCurrent = _Dcmim2StatusSysLoadCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 2),
    _Dcmim2StatusSysLoadCurrent_Type()
)
dcmim2StatusSysLoadCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusSysLoadCurrent.setStatus("mandatory")
_Dcmim2StatusSysBusVoltage_Type = Integer32
_Dcmim2StatusSysBusVoltage_Object = MibScalar
dcmim2StatusSysBusVoltage = _Dcmim2StatusSysBusVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 3),
    _Dcmim2StatusSysBusVoltage_Type()
)
dcmim2StatusSysBusVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusSysBusVoltage.setStatus("mandatory")
_Dcmim2StatusSysAmbientTemp_Type = Integer32
_Dcmim2StatusSysAmbientTemp_Object = MibScalar
dcmim2StatusSysAmbientTemp = _Dcmim2StatusSysAmbientTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 4),
    _Dcmim2StatusSysAmbientTemp_Type()
)
dcmim2StatusSysAmbientTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusSysAmbientTemp.setStatus("mandatory")
_Dcmim2StatusSysUpTime_Type = DisplayString
_Dcmim2StatusSysUpTime_Object = MibScalar
dcmim2StatusSysUpTime = _Dcmim2StatusSysUpTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 5),
    _Dcmim2StatusSysUpTime_Type()
)
dcmim2StatusSysUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusSysUpTime.setStatus("mandatory")


class _Dcmim2StatusSysTempUnits_Type(Integer32):
    """Custom type dcmim2StatusSysTempUnits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("celsius", 1),
          ("fahrenheit", 2))
    )


_Dcmim2StatusSysTempUnits_Type.__name__ = "Integer32"
_Dcmim2StatusSysTempUnits_Object = MibScalar
dcmim2StatusSysTempUnits = _Dcmim2StatusSysTempUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 1, 6),
    _Dcmim2StatusSysTempUnits_Type()
)
dcmim2StatusSysTempUnits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusSysTempUnits.setStatus("mandatory")
_Dcmim2StatusRectifier_ObjectIdentity = ObjectIdentity
dcmim2StatusRectifier = _Dcmim2StatusRectifier_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2)
)
_Dcmim2StatusRectTableSize_Type = Integer32
_Dcmim2StatusRectTableSize_Object = MibScalar
dcmim2StatusRectTableSize = _Dcmim2StatusRectTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 1),
    _Dcmim2StatusRectTableSize_Type()
)
dcmim2StatusRectTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusRectTableSize.setStatus("mandatory")
_Dcmim2StatusRectTable_Object = MibTable
dcmim2StatusRectTable = _Dcmim2StatusRectTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2)
)
if mibBuilder.loadTexts:
    dcmim2StatusRectTable.setStatus("mandatory")
_Dcmim2StatusRectEntry_Object = MibTableRow
dcmim2StatusRectEntry = _Dcmim2StatusRectEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1)
)
dcmim2StatusRectEntry.setIndexNames(
    (0, "POWERNET-MIB", "dcmim2StatusRectIndex"),
)
if mibBuilder.loadTexts:
    dcmim2StatusRectEntry.setStatus("mandatory")
_Dcmim2StatusRectIndex_Type = Integer32
_Dcmim2StatusRectIndex_Object = MibTableColumn
dcmim2StatusRectIndex = _Dcmim2StatusRectIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 1),
    _Dcmim2StatusRectIndex_Type()
)
dcmim2StatusRectIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusRectIndex.setStatus("mandatory")
_Dcmim2StatusRectDevType_Type = Integer32
_Dcmim2StatusRectDevType_Object = MibTableColumn
dcmim2StatusRectDevType = _Dcmim2StatusRectDevType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 2),
    _Dcmim2StatusRectDevType_Type()
)
dcmim2StatusRectDevType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusRectDevType.setStatus("mandatory")
_Dcmim2StatusRectID_Type = Integer32
_Dcmim2StatusRectID_Object = MibTableColumn
dcmim2StatusRectID = _Dcmim2StatusRectID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 3),
    _Dcmim2StatusRectID_Type()
)
dcmim2StatusRectID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusRectID.setStatus("mandatory")
_Dcmim2StatusRectPhyAddr_Type = Integer32
_Dcmim2StatusRectPhyAddr_Object = MibTableColumn
dcmim2StatusRectPhyAddr = _Dcmim2StatusRectPhyAddr_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 4),
    _Dcmim2StatusRectPhyAddr_Type()
)
dcmim2StatusRectPhyAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusRectPhyAddr.setStatus("mandatory")


class _Dcmim2StatusRectFail_Type(Integer32):
    """Custom type dcmim2StatusRectFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusFalse", 2),
          ("statusTrue", 1))
    )


_Dcmim2StatusRectFail_Type.__name__ = "Integer32"
_Dcmim2StatusRectFail_Object = MibTableColumn
dcmim2StatusRectFail = _Dcmim2StatusRectFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 5),
    _Dcmim2StatusRectFail_Type()
)
dcmim2StatusRectFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusRectFail.setStatus("mandatory")
_Dcmim2StatusRectCurrent_Type = Integer32
_Dcmim2StatusRectCurrent_Object = MibTableColumn
dcmim2StatusRectCurrent = _Dcmim2StatusRectCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 2, 2, 1, 6),
    _Dcmim2StatusRectCurrent_Type()
)
dcmim2StatusRectCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusRectCurrent.setStatus("mandatory")
_Dcmim2StatusBattery_ObjectIdentity = ObjectIdentity
dcmim2StatusBattery = _Dcmim2StatusBattery_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3)
)
_Dcmim2StatusBattFloatVolt_Type = Integer32
_Dcmim2StatusBattFloatVolt_Object = MibScalar
dcmim2StatusBattFloatVolt = _Dcmim2StatusBattFloatVolt_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 1),
    _Dcmim2StatusBattFloatVolt_Type()
)
dcmim2StatusBattFloatVolt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusBattFloatVolt.setStatus("mandatory")
_Dcmim2StatusBattCurrent_Type = Integer32
_Dcmim2StatusBattCurrent_Object = MibScalar
dcmim2StatusBattCurrent = _Dcmim2StatusBattCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 2),
    _Dcmim2StatusBattCurrent_Type()
)
dcmim2StatusBattCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusBattCurrent.setStatus("mandatory")
_Dcmim2StatusBattTemp_Type = Integer32
_Dcmim2StatusBattTemp_Object = MibScalar
dcmim2StatusBattTemp = _Dcmim2StatusBattTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 3),
    _Dcmim2StatusBattTemp_Type()
)
dcmim2StatusBattTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusBattTemp.setStatus("mandatory")
_Dcmim2StatusBattMfgCapacity_Type = Integer32
_Dcmim2StatusBattMfgCapacity_Object = MibScalar
dcmim2StatusBattMfgCapacity = _Dcmim2StatusBattMfgCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 4),
    _Dcmim2StatusBattMfgCapacity_Type()
)
dcmim2StatusBattMfgCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusBattMfgCapacity.setStatus("mandatory")
_Dcmim2StatusBattTestCapacity_Type = Integer32
_Dcmim2StatusBattTestCapacity_Object = MibScalar
dcmim2StatusBattTestCapacity = _Dcmim2StatusBattTestCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 5),
    _Dcmim2StatusBattTestCapacity_Type()
)
dcmim2StatusBattTestCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusBattTestCapacity.setStatus("mandatory")


class _Dcmim2StatusBattFunctTestResult_Type(Integer32):
    """Custom type dcmim2StatusBattFunctTestResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("functTestFail", 5),
          ("functTestInProcess", 2),
          ("functTestInterrupted", 3),
          ("functTestNotPerformed", 1),
          ("functTestPass", 4))
    )


_Dcmim2StatusBattFunctTestResult_Type.__name__ = "Integer32"
_Dcmim2StatusBattFunctTestResult_Object = MibScalar
dcmim2StatusBattFunctTestResult = _Dcmim2StatusBattFunctTestResult_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 6),
    _Dcmim2StatusBattFunctTestResult_Type()
)
dcmim2StatusBattFunctTestResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusBattFunctTestResult.setStatus("mandatory")


class _Dcmim2StatusBattCapacityTestResult_Type(Integer32):
    """Custom type dcmim2StatusBattCapacityTestResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("capacityTestFail", 5),
          ("capacityTestInProcess", 2),
          ("capacityTestInterrupted", 3),
          ("capacityTestNotPerformed", 1),
          ("capacityTestPass", 4))
    )


_Dcmim2StatusBattCapacityTestResult_Type.__name__ = "Integer32"
_Dcmim2StatusBattCapacityTestResult_Object = MibScalar
dcmim2StatusBattCapacityTestResult = _Dcmim2StatusBattCapacityTestResult_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 3, 7),
    _Dcmim2StatusBattCapacityTestResult_Type()
)
dcmim2StatusBattCapacityTestResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusBattCapacityTestResult.setStatus("mandatory")
_Dcmim2StatusLVD_ObjectIdentity = ObjectIdentity
dcmim2StatusLVD = _Dcmim2StatusLVD_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4)
)
_Dcmim2StatusLVDTableSize_Type = Integer32
_Dcmim2StatusLVDTableSize_Object = MibScalar
dcmim2StatusLVDTableSize = _Dcmim2StatusLVDTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 1),
    _Dcmim2StatusLVDTableSize_Type()
)
dcmim2StatusLVDTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusLVDTableSize.setStatus("mandatory")
_Dcmim2StatusLVDTable_Object = MibTable
dcmim2StatusLVDTable = _Dcmim2StatusLVDTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2)
)
if mibBuilder.loadTexts:
    dcmim2StatusLVDTable.setStatus("mandatory")
_Dcmim2StatusLVDEntry_Object = MibTableRow
dcmim2StatusLVDEntry = _Dcmim2StatusLVDEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1)
)
dcmim2StatusLVDEntry.setIndexNames(
    (0, "POWERNET-MIB", "dcmim2StatusLVDIndex"),
)
if mibBuilder.loadTexts:
    dcmim2StatusLVDEntry.setStatus("mandatory")
_Dcmim2StatusLVDIndex_Type = Integer32
_Dcmim2StatusLVDIndex_Object = MibTableColumn
dcmim2StatusLVDIndex = _Dcmim2StatusLVDIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1, 1),
    _Dcmim2StatusLVDIndex_Type()
)
dcmim2StatusLVDIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusLVDIndex.setStatus("mandatory")


class _Dcmim2StatusLVDState_Type(Integer32):
    """Custom type dcmim2StatusLVDState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusClosed", 1),
          ("statusOpened", 2))
    )


_Dcmim2StatusLVDState_Type.__name__ = "Integer32"
_Dcmim2StatusLVDState_Object = MibTableColumn
dcmim2StatusLVDState = _Dcmim2StatusLVDState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 4, 2, 1, 2),
    _Dcmim2StatusLVDState_Type()
)
dcmim2StatusLVDState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusLVDState.setStatus("mandatory")
_Dcmim2StatusAlarms_ObjectIdentity = ObjectIdentity
dcmim2StatusAlarms = _Dcmim2StatusAlarms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5)
)
_Dcmim2StatusAlarmsTableSize_Type = Integer32
_Dcmim2StatusAlarmsTableSize_Object = MibScalar
dcmim2StatusAlarmsTableSize = _Dcmim2StatusAlarmsTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 1),
    _Dcmim2StatusAlarmsTableSize_Type()
)
dcmim2StatusAlarmsTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusAlarmsTableSize.setStatus("mandatory")
_Dcmim2StatusAlarmsTable_Object = MibTable
dcmim2StatusAlarmsTable = _Dcmim2StatusAlarmsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2)
)
if mibBuilder.loadTexts:
    dcmim2StatusAlarmsTable.setStatus("mandatory")
_Dcmim2StatusAlarmsEntry_Object = MibTableRow
dcmim2StatusAlarmsEntry = _Dcmim2StatusAlarmsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1)
)
dcmim2StatusAlarmsEntry.setIndexNames(
    (0, "POWERNET-MIB", "dcmim2StatusAlarmsIndex"),
)
if mibBuilder.loadTexts:
    dcmim2StatusAlarmsEntry.setStatus("mandatory")
_Dcmim2StatusAlarmsIndex_Type = Integer32
_Dcmim2StatusAlarmsIndex_Object = MibTableColumn
dcmim2StatusAlarmsIndex = _Dcmim2StatusAlarmsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1, 1),
    _Dcmim2StatusAlarmsIndex_Type()
)
dcmim2StatusAlarmsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusAlarmsIndex.setStatus("mandatory")
_Dcmim2StatusAlarmsText_Type = DisplayString
_Dcmim2StatusAlarmsText_Object = MibTableColumn
dcmim2StatusAlarmsText = _Dcmim2StatusAlarmsText_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 9, 4, 5, 2, 1, 2),
    _Dcmim2StatusAlarmsText_Type()
)
dcmim2StatusAlarmsText.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmim2StatusAlarmsText.setStatus("mandatory")
_EnvironmentalMonitor_ObjectIdentity = ObjectIdentity
environmentalMonitor = _EnvironmentalMonitor_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10)
)
_External_ObjectIdentity = ObjectIdentity
external = _External_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1)
)
_EmIdent_ObjectIdentity = ObjectIdentity
emIdent = _EmIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 1)
)
_EmIdentFirmwareRevision_Type = DisplayString
_EmIdentFirmwareRevision_Object = MibScalar
emIdentFirmwareRevision = _EmIdentFirmwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 1, 1),
    _EmIdentFirmwareRevision_Type()
)
emIdentFirmwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emIdentFirmwareRevision.setStatus("mandatory")
_EmConfig_ObjectIdentity = ObjectIdentity
emConfig = _EmConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2)
)
_EmConfigProbesNumProbes_Type = Integer32
_EmConfigProbesNumProbes_Object = MibScalar
emConfigProbesNumProbes = _EmConfigProbesNumProbes_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 1),
    _EmConfigProbesNumProbes_Type()
)
emConfigProbesNumProbes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emConfigProbesNumProbes.setStatus("mandatory")
_EmConfigProbesTable_Object = MibTable
emConfigProbesTable = _EmConfigProbesTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2)
)
if mibBuilder.loadTexts:
    emConfigProbesTable.setStatus("mandatory")
_EmConfigProbesEntry_Object = MibTableRow
emConfigProbesEntry = _EmConfigProbesEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1)
)
emConfigProbesEntry.setIndexNames(
    (0, "POWERNET-MIB", "emConfigProbeNumber"),
)
if mibBuilder.loadTexts:
    emConfigProbesEntry.setStatus("mandatory")
_EmConfigProbeNumber_Type = Integer32
_EmConfigProbeNumber_Object = MibTableColumn
emConfigProbeNumber = _EmConfigProbeNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 1),
    _EmConfigProbeNumber_Type()
)
emConfigProbeNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emConfigProbeNumber.setStatus("mandatory")
_EmConfigProbeName_Type = DisplayString
_EmConfigProbeName_Object = MibTableColumn
emConfigProbeName = _EmConfigProbeName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 2),
    _EmConfigProbeName_Type()
)
emConfigProbeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeName.setStatus("mandatory")
_EmConfigProbeHighTempThreshold_Type = Integer32
_EmConfigProbeHighTempThreshold_Object = MibTableColumn
emConfigProbeHighTempThreshold = _EmConfigProbeHighTempThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 3),
    _EmConfigProbeHighTempThreshold_Type()
)
emConfigProbeHighTempThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeHighTempThreshold.setStatus("mandatory")
_EmConfigProbeLowTempThreshold_Type = Integer32
_EmConfigProbeLowTempThreshold_Object = MibTableColumn
emConfigProbeLowTempThreshold = _EmConfigProbeLowTempThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 4),
    _EmConfigProbeLowTempThreshold_Type()
)
emConfigProbeLowTempThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeLowTempThreshold.setStatus("mandatory")


class _EmConfigProbeTempUnits_Type(Integer32):
    """Custom type emConfigProbeTempUnits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("celsius", 1),
          ("fahrenheit", 2))
    )


_EmConfigProbeTempUnits_Type.__name__ = "Integer32"
_EmConfigProbeTempUnits_Object = MibTableColumn
emConfigProbeTempUnits = _EmConfigProbeTempUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 5),
    _EmConfigProbeTempUnits_Type()
)
emConfigProbeTempUnits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emConfigProbeTempUnits.setStatus("mandatory")
_EmConfigProbeHighHumidThreshold_Type = Integer32
_EmConfigProbeHighHumidThreshold_Object = MibTableColumn
emConfigProbeHighHumidThreshold = _EmConfigProbeHighHumidThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 6),
    _EmConfigProbeHighHumidThreshold_Type()
)
emConfigProbeHighHumidThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeHighHumidThreshold.setStatus("mandatory")
_EmConfigProbeLowHumidThreshold_Type = Integer32
_EmConfigProbeLowHumidThreshold_Object = MibTableColumn
emConfigProbeLowHumidThreshold = _EmConfigProbeLowHumidThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 7),
    _EmConfigProbeLowHumidThreshold_Type()
)
emConfigProbeLowHumidThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeLowHumidThreshold.setStatus("mandatory")


class _EmConfigProbeHighTempEnable_Type(Integer32):
    """Custom type emConfigProbeHighTempEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_EmConfigProbeHighTempEnable_Type.__name__ = "Integer32"
_EmConfigProbeHighTempEnable_Object = MibTableColumn
emConfigProbeHighTempEnable = _EmConfigProbeHighTempEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 8),
    _EmConfigProbeHighTempEnable_Type()
)
emConfigProbeHighTempEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeHighTempEnable.setStatus("mandatory")


class _EmConfigProbeLowTempEnable_Type(Integer32):
    """Custom type emConfigProbeLowTempEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_EmConfigProbeLowTempEnable_Type.__name__ = "Integer32"
_EmConfigProbeLowTempEnable_Object = MibTableColumn
emConfigProbeLowTempEnable = _EmConfigProbeLowTempEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 9),
    _EmConfigProbeLowTempEnable_Type()
)
emConfigProbeLowTempEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeLowTempEnable.setStatus("mandatory")


class _EmConfigProbeHighHumidEnable_Type(Integer32):
    """Custom type emConfigProbeHighHumidEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_EmConfigProbeHighHumidEnable_Type.__name__ = "Integer32"
_EmConfigProbeHighHumidEnable_Object = MibTableColumn
emConfigProbeHighHumidEnable = _EmConfigProbeHighHumidEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 10),
    _EmConfigProbeHighHumidEnable_Type()
)
emConfigProbeHighHumidEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeHighHumidEnable.setStatus("mandatory")


class _EmConfigProbeLowHumidEnable_Type(Integer32):
    """Custom type emConfigProbeLowHumidEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_EmConfigProbeLowHumidEnable_Type.__name__ = "Integer32"
_EmConfigProbeLowHumidEnable_Object = MibTableColumn
emConfigProbeLowHumidEnable = _EmConfigProbeLowHumidEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 11),
    _EmConfigProbeLowHumidEnable_Type()
)
emConfigProbeLowHumidEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeLowHumidEnable.setStatus("mandatory")
_EmConfigProbeMaxTempThreshold_Type = Integer32
_EmConfigProbeMaxTempThreshold_Object = MibTableColumn
emConfigProbeMaxTempThreshold = _EmConfigProbeMaxTempThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 12),
    _EmConfigProbeMaxTempThreshold_Type()
)
emConfigProbeMaxTempThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeMaxTempThreshold.setStatus("mandatory")
_EmConfigProbeMinTempThreshold_Type = Integer32
_EmConfigProbeMinTempThreshold_Object = MibTableColumn
emConfigProbeMinTempThreshold = _EmConfigProbeMinTempThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 13),
    _EmConfigProbeMinTempThreshold_Type()
)
emConfigProbeMinTempThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeMinTempThreshold.setStatus("mandatory")
_EmConfigProbeMaxHumidThreshold_Type = Integer32
_EmConfigProbeMaxHumidThreshold_Object = MibTableColumn
emConfigProbeMaxHumidThreshold = _EmConfigProbeMaxHumidThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 14),
    _EmConfigProbeMaxHumidThreshold_Type()
)
emConfigProbeMaxHumidThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeMaxHumidThreshold.setStatus("mandatory")
_EmConfigProbeMinHumidThreshold_Type = Integer32
_EmConfigProbeMinHumidThreshold_Object = MibTableColumn
emConfigProbeMinHumidThreshold = _EmConfigProbeMinHumidThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 15),
    _EmConfigProbeMinHumidThreshold_Type()
)
emConfigProbeMinHumidThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeMinHumidThreshold.setStatus("mandatory")


class _EmConfigProbeMaxTempEnable_Type(Integer32):
    """Custom type emConfigProbeMaxTempEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_EmConfigProbeMaxTempEnable_Type.__name__ = "Integer32"
_EmConfigProbeMaxTempEnable_Object = MibTableColumn
emConfigProbeMaxTempEnable = _EmConfigProbeMaxTempEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 16),
    _EmConfigProbeMaxTempEnable_Type()
)
emConfigProbeMaxTempEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeMaxTempEnable.setStatus("mandatory")


class _EmConfigProbeMinTempEnable_Type(Integer32):
    """Custom type emConfigProbeMinTempEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_EmConfigProbeMinTempEnable_Type.__name__ = "Integer32"
_EmConfigProbeMinTempEnable_Object = MibTableColumn
emConfigProbeMinTempEnable = _EmConfigProbeMinTempEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 17),
    _EmConfigProbeMinTempEnable_Type()
)
emConfigProbeMinTempEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeMinTempEnable.setStatus("mandatory")


class _EmConfigProbeMaxHumidEnable_Type(Integer32):
    """Custom type emConfigProbeMaxHumidEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_EmConfigProbeMaxHumidEnable_Type.__name__ = "Integer32"
_EmConfigProbeMaxHumidEnable_Object = MibTableColumn
emConfigProbeMaxHumidEnable = _EmConfigProbeMaxHumidEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 18),
    _EmConfigProbeMaxHumidEnable_Type()
)
emConfigProbeMaxHumidEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeMaxHumidEnable.setStatus("mandatory")


class _EmConfigProbeMinHumidEnable_Type(Integer32):
    """Custom type emConfigProbeMinHumidEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_EmConfigProbeMinHumidEnable_Type.__name__ = "Integer32"
_EmConfigProbeMinHumidEnable_Object = MibTableColumn
emConfigProbeMinHumidEnable = _EmConfigProbeMinHumidEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 19),
    _EmConfigProbeMinHumidEnable_Type()
)
emConfigProbeMinHumidEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeMinHumidEnable.setStatus("mandatory")
_EmConfigProbeTempHysteresis_Type = Integer32
_EmConfigProbeTempHysteresis_Object = MibTableColumn
emConfigProbeTempHysteresis = _EmConfigProbeTempHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 20),
    _EmConfigProbeTempHysteresis_Type()
)
emConfigProbeTempHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeTempHysteresis.setStatus("mandatory")
_EmConfigProbeHumidHysteresis_Type = Integer32
_EmConfigProbeHumidHysteresis_Object = MibTableColumn
emConfigProbeHumidHysteresis = _EmConfigProbeHumidHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 21),
    _EmConfigProbeHumidHysteresis_Type()
)
emConfigProbeHumidHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeHumidHysteresis.setStatus("mandatory")
_EmConfigProbeLocation_Type = DisplayString
_EmConfigProbeLocation_Object = MibTableColumn
emConfigProbeLocation = _EmConfigProbeLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 2, 1, 22),
    _EmConfigProbeLocation_Type()
)
emConfigProbeLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigProbeLocation.setStatus("mandatory")
_EmConfigContactsNumContacts_Type = Integer32
_EmConfigContactsNumContacts_Object = MibScalar
emConfigContactsNumContacts = _EmConfigContactsNumContacts_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 3),
    _EmConfigContactsNumContacts_Type()
)
emConfigContactsNumContacts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emConfigContactsNumContacts.setStatus("mandatory")
_EmConfigContactsTable_Object = MibTable
emConfigContactsTable = _EmConfigContactsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4)
)
if mibBuilder.loadTexts:
    emConfigContactsTable.setStatus("mandatory")
_EmConfigContactsEntry_Object = MibTableRow
emConfigContactsEntry = _EmConfigContactsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1)
)
emConfigContactsEntry.setIndexNames(
    (0, "POWERNET-MIB", "emConfigContactNumber"),
)
if mibBuilder.loadTexts:
    emConfigContactsEntry.setStatus("mandatory")
_EmConfigContactNumber_Type = Integer32
_EmConfigContactNumber_Object = MibTableColumn
emConfigContactNumber = _EmConfigContactNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 1),
    _EmConfigContactNumber_Type()
)
emConfigContactNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emConfigContactNumber.setStatus("mandatory")
_EmConfigContactName_Type = DisplayString
_EmConfigContactName_Object = MibTableColumn
emConfigContactName = _EmConfigContactName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 2),
    _EmConfigContactName_Type()
)
emConfigContactName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigContactName.setStatus("mandatory")


class _EmConfigContactEnable_Type(Integer32):
    """Custom type emConfigContactEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_EmConfigContactEnable_Type.__name__ = "Integer32"
_EmConfigContactEnable_Object = MibTableColumn
emConfigContactEnable = _EmConfigContactEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 3),
    _EmConfigContactEnable_Type()
)
emConfigContactEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigContactEnable.setStatus("mandatory")


class _EmConfigContactSeverity_Type(Integer32):
    """Custom type emConfigContactSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("critical", 1),
          ("informational", 3),
          ("warning", 2))
    )


_EmConfigContactSeverity_Type.__name__ = "Integer32"
_EmConfigContactSeverity_Object = MibTableColumn
emConfigContactSeverity = _EmConfigContactSeverity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 4),
    _EmConfigContactSeverity_Type()
)
emConfigContactSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigContactSeverity.setStatus("mandatory")


class _EmConfigContactNormalState_Type(Integer32):
    """Custom type emConfigContactNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_EmConfigContactNormalState_Type.__name__ = "Integer32"
_EmConfigContactNormalState_Object = MibTableColumn
emConfigContactNormalState = _EmConfigContactNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 5),
    _EmConfigContactNormalState_Type()
)
emConfigContactNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigContactNormalState.setStatus("mandatory")
_EmConfigContactLocation_Type = DisplayString
_EmConfigContactLocation_Object = MibTableColumn
emConfigContactLocation = _EmConfigContactLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 2, 4, 1, 6),
    _EmConfigContactLocation_Type()
)
emConfigContactLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emConfigContactLocation.setStatus("mandatory")
_EmStatus_ObjectIdentity = ObjectIdentity
emStatus = _EmStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3)
)


class _EmStatusCommStatus_Type(Integer32):
    """Custom type emStatusCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("comm", 2),
          ("commLost", 3),
          ("noComm", 1))
    )


_EmStatusCommStatus_Type.__name__ = "Integer32"
_EmStatusCommStatus_Object = MibScalar
emStatusCommStatus = _EmStatusCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 1),
    _EmStatusCommStatus_Type()
)
emStatusCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusCommStatus.setStatus("mandatory")
_EmStatusProbesNumProbes_Type = Integer32
_EmStatusProbesNumProbes_Object = MibScalar
emStatusProbesNumProbes = _EmStatusProbesNumProbes_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 2),
    _EmStatusProbesNumProbes_Type()
)
emStatusProbesNumProbes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbesNumProbes.setStatus("mandatory")
_EmStatusProbesTable_Object = MibTable
emStatusProbesTable = _EmStatusProbesTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3)
)
if mibBuilder.loadTexts:
    emStatusProbesTable.setStatus("mandatory")
_EmStatusProbesEntry_Object = MibTableRow
emStatusProbesEntry = _EmStatusProbesEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1)
)
emStatusProbesEntry.setIndexNames(
    (0, "POWERNET-MIB", "emStatusProbeNumber"),
)
if mibBuilder.loadTexts:
    emStatusProbesEntry.setStatus("mandatory")
_EmStatusProbeNumber_Type = Integer32
_EmStatusProbeNumber_Object = MibTableColumn
emStatusProbeNumber = _EmStatusProbeNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 1),
    _EmStatusProbeNumber_Type()
)
emStatusProbeNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeNumber.setStatus("mandatory")
_EmStatusProbeName_Type = DisplayString
_EmStatusProbeName_Object = MibTableColumn
emStatusProbeName = _EmStatusProbeName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 2),
    _EmStatusProbeName_Type()
)
emStatusProbeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeName.setStatus("mandatory")


class _EmStatusProbeStatus_Type(Integer32):
    """Custom type emStatusProbeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connected", 2),
          ("disconnected", 1))
    )


_EmStatusProbeStatus_Type.__name__ = "Integer32"
_EmStatusProbeStatus_Object = MibTableColumn
emStatusProbeStatus = _EmStatusProbeStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 3),
    _EmStatusProbeStatus_Type()
)
emStatusProbeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeStatus.setStatus("mandatory")
_EmStatusProbeCurrentTemp_Type = Integer32
_EmStatusProbeCurrentTemp_Object = MibTableColumn
emStatusProbeCurrentTemp = _EmStatusProbeCurrentTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 4),
    _EmStatusProbeCurrentTemp_Type()
)
emStatusProbeCurrentTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeCurrentTemp.setStatus("mandatory")


class _EmStatusProbeTempUnits_Type(Integer32):
    """Custom type emStatusProbeTempUnits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("celsius", 1),
          ("fahrenheit", 2))
    )


_EmStatusProbeTempUnits_Type.__name__ = "Integer32"
_EmStatusProbeTempUnits_Object = MibTableColumn
emStatusProbeTempUnits = _EmStatusProbeTempUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 5),
    _EmStatusProbeTempUnits_Type()
)
emStatusProbeTempUnits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeTempUnits.setStatus("mandatory")
_EmStatusProbeCurrentHumid_Type = Integer32
_EmStatusProbeCurrentHumid_Object = MibTableColumn
emStatusProbeCurrentHumid = _EmStatusProbeCurrentHumid_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 6),
    _EmStatusProbeCurrentHumid_Type()
)
emStatusProbeCurrentHumid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeCurrentHumid.setStatus("mandatory")


class _EmStatusProbeHighTempViolation_Type(Integer32):
    """Custom type emStatusProbeHighTempViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("highTempViolation", 2),
          ("noViolation", 1))
    )


_EmStatusProbeHighTempViolation_Type.__name__ = "Integer32"
_EmStatusProbeHighTempViolation_Object = MibTableColumn
emStatusProbeHighTempViolation = _EmStatusProbeHighTempViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 7),
    _EmStatusProbeHighTempViolation_Type()
)
emStatusProbeHighTempViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeHighTempViolation.setStatus("mandatory")


class _EmStatusProbeLowTempViolation_Type(Integer32):
    """Custom type emStatusProbeLowTempViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("lowTempViolation", 2),
          ("noViolation", 1))
    )


_EmStatusProbeLowTempViolation_Type.__name__ = "Integer32"
_EmStatusProbeLowTempViolation_Object = MibTableColumn
emStatusProbeLowTempViolation = _EmStatusProbeLowTempViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 8),
    _EmStatusProbeLowTempViolation_Type()
)
emStatusProbeLowTempViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeLowTempViolation.setStatus("mandatory")


class _EmStatusProbeHighHumidViolation_Type(Integer32):
    """Custom type emStatusProbeHighHumidViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("highHumidViolation", 2),
          ("noViolation", 1))
    )


_EmStatusProbeHighHumidViolation_Type.__name__ = "Integer32"
_EmStatusProbeHighHumidViolation_Object = MibTableColumn
emStatusProbeHighHumidViolation = _EmStatusProbeHighHumidViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 9),
    _EmStatusProbeHighHumidViolation_Type()
)
emStatusProbeHighHumidViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeHighHumidViolation.setStatus("mandatory")


class _EmStatusProbeLowHumidViolation_Type(Integer32):
    """Custom type emStatusProbeLowHumidViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("lowHumidViolation", 2),
          ("noViolation", 1))
    )


_EmStatusProbeLowHumidViolation_Type.__name__ = "Integer32"
_EmStatusProbeLowHumidViolation_Object = MibTableColumn
emStatusProbeLowHumidViolation = _EmStatusProbeLowHumidViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 10),
    _EmStatusProbeLowHumidViolation_Type()
)
emStatusProbeLowHumidViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeLowHumidViolation.setStatus("mandatory")


class _EmStatusProbeMaxTempViolation_Type(Integer32):
    """Custom type emStatusProbeMaxTempViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("maxTempViolation", 2),
          ("noViolation", 1))
    )


_EmStatusProbeMaxTempViolation_Type.__name__ = "Integer32"
_EmStatusProbeMaxTempViolation_Object = MibTableColumn
emStatusProbeMaxTempViolation = _EmStatusProbeMaxTempViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 11),
    _EmStatusProbeMaxTempViolation_Type()
)
emStatusProbeMaxTempViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeMaxTempViolation.setStatus("mandatory")


class _EmStatusProbeMinTempViolation_Type(Integer32):
    """Custom type emStatusProbeMinTempViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("minTempViolation", 2),
          ("noViolation", 1))
    )


_EmStatusProbeMinTempViolation_Type.__name__ = "Integer32"
_EmStatusProbeMinTempViolation_Object = MibTableColumn
emStatusProbeMinTempViolation = _EmStatusProbeMinTempViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 12),
    _EmStatusProbeMinTempViolation_Type()
)
emStatusProbeMinTempViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeMinTempViolation.setStatus("mandatory")


class _EmStatusProbeMaxHumidViolation_Type(Integer32):
    """Custom type emStatusProbeMaxHumidViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("maxHumidViolation", 2),
          ("noViolation", 1))
    )


_EmStatusProbeMaxHumidViolation_Type.__name__ = "Integer32"
_EmStatusProbeMaxHumidViolation_Object = MibTableColumn
emStatusProbeMaxHumidViolation = _EmStatusProbeMaxHumidViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 13),
    _EmStatusProbeMaxHumidViolation_Type()
)
emStatusProbeMaxHumidViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeMaxHumidViolation.setStatus("mandatory")


class _EmStatusProbeMinHumidViolation_Type(Integer32):
    """Custom type emStatusProbeMinHumidViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("minHumidViolation", 2),
          ("noViolation", 1))
    )


_EmStatusProbeMinHumidViolation_Type.__name__ = "Integer32"
_EmStatusProbeMinHumidViolation_Object = MibTableColumn
emStatusProbeMinHumidViolation = _EmStatusProbeMinHumidViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 3, 1, 14),
    _EmStatusProbeMinHumidViolation_Type()
)
emStatusProbeMinHumidViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusProbeMinHumidViolation.setStatus("mandatory")
_EmStatusContactsNumContacts_Type = Integer32
_EmStatusContactsNumContacts_Object = MibScalar
emStatusContactsNumContacts = _EmStatusContactsNumContacts_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 4),
    _EmStatusContactsNumContacts_Type()
)
emStatusContactsNumContacts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusContactsNumContacts.setStatus("mandatory")
_EmStatusContactsTable_Object = MibTable
emStatusContactsTable = _EmStatusContactsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5)
)
if mibBuilder.loadTexts:
    emStatusContactsTable.setStatus("mandatory")
_EmStatusContactsEntry_Object = MibTableRow
emStatusContactsEntry = _EmStatusContactsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1)
)
emStatusContactsEntry.setIndexNames(
    (0, "POWERNET-MIB", "emStatusContactNumber"),
)
if mibBuilder.loadTexts:
    emStatusContactsEntry.setStatus("mandatory")
_EmStatusContactNumber_Type = Integer32
_EmStatusContactNumber_Object = MibTableColumn
emStatusContactNumber = _EmStatusContactNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 1),
    _EmStatusContactNumber_Type()
)
emStatusContactNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusContactNumber.setStatus("mandatory")
_EmStatusContactName_Type = DisplayString
_EmStatusContactName_Object = MibTableColumn
emStatusContactName = _EmStatusContactName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 2),
    _EmStatusContactName_Type()
)
emStatusContactName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusContactName.setStatus("mandatory")


class _EmStatusContactStatus_Type(Integer32):
    """Custom type emStatusContactStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("fault", 2),
          ("noFault", 1))
    )


_EmStatusContactStatus_Type.__name__ = "Integer32"
_EmStatusContactStatus_Object = MibTableColumn
emStatusContactStatus = _EmStatusContactStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 1, 3, 5, 1, 3),
    _EmStatusContactStatus_Type()
)
emStatusContactStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emStatusContactStatus.setStatus("mandatory")
_Integrated_ObjectIdentity = ObjectIdentity
integrated = _Integrated_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2)
)
_IemIdent_ObjectIdentity = ObjectIdentity
iemIdent = _IemIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 1)
)
_IemIdentHardwareRevision_Type = DisplayString
_IemIdentHardwareRevision_Object = MibScalar
iemIdentHardwareRevision = _IemIdentHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 1, 1),
    _IemIdentHardwareRevision_Type()
)
iemIdentHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemIdentHardwareRevision.setStatus("mandatory")
_IemConfig_ObjectIdentity = ObjectIdentity
iemConfig = _IemConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2)
)
_IemConfigProbesNumProbes_Type = Integer32
_IemConfigProbesNumProbes_Object = MibScalar
iemConfigProbesNumProbes = _IemConfigProbesNumProbes_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 1),
    _IemConfigProbesNumProbes_Type()
)
iemConfigProbesNumProbes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemConfigProbesNumProbes.setStatus("mandatory")
_IemConfigProbesTable_Object = MibTable
iemConfigProbesTable = _IemConfigProbesTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2)
)
if mibBuilder.loadTexts:
    iemConfigProbesTable.setStatus("mandatory")
_IemConfigProbesEntry_Object = MibTableRow
iemConfigProbesEntry = _IemConfigProbesEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1)
)
iemConfigProbesEntry.setIndexNames(
    (0, "POWERNET-MIB", "iemConfigProbeNumber"),
)
if mibBuilder.loadTexts:
    iemConfigProbesEntry.setStatus("mandatory")
_IemConfigProbeNumber_Type = Integer32
_IemConfigProbeNumber_Object = MibTableColumn
iemConfigProbeNumber = _IemConfigProbeNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 1),
    _IemConfigProbeNumber_Type()
)
iemConfigProbeNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemConfigProbeNumber.setStatus("mandatory")
_IemConfigProbeName_Type = DisplayString
_IemConfigProbeName_Object = MibTableColumn
iemConfigProbeName = _IemConfigProbeName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 2),
    _IemConfigProbeName_Type()
)
iemConfigProbeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeName.setStatus("mandatory")
_IemConfigProbeHighTempThreshold_Type = Integer32
_IemConfigProbeHighTempThreshold_Object = MibTableColumn
iemConfigProbeHighTempThreshold = _IemConfigProbeHighTempThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 3),
    _IemConfigProbeHighTempThreshold_Type()
)
iemConfigProbeHighTempThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeHighTempThreshold.setStatus("mandatory")
_IemConfigProbeLowTempThreshold_Type = Integer32
_IemConfigProbeLowTempThreshold_Object = MibTableColumn
iemConfigProbeLowTempThreshold = _IemConfigProbeLowTempThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 4),
    _IemConfigProbeLowTempThreshold_Type()
)
iemConfigProbeLowTempThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeLowTempThreshold.setStatus("mandatory")


class _IemConfigProbeTempUnits_Type(Integer32):
    """Custom type iemConfigProbeTempUnits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("celsius", 1),
          ("fahrenheit", 2))
    )


_IemConfigProbeTempUnits_Type.__name__ = "Integer32"
_IemConfigProbeTempUnits_Object = MibTableColumn
iemConfigProbeTempUnits = _IemConfigProbeTempUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 5),
    _IemConfigProbeTempUnits_Type()
)
iemConfigProbeTempUnits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemConfigProbeTempUnits.setStatus("mandatory")
_IemConfigProbeHighHumidThreshold_Type = Integer32
_IemConfigProbeHighHumidThreshold_Object = MibTableColumn
iemConfigProbeHighHumidThreshold = _IemConfigProbeHighHumidThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 6),
    _IemConfigProbeHighHumidThreshold_Type()
)
iemConfigProbeHighHumidThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeHighHumidThreshold.setStatus("mandatory")
_IemConfigProbeLowHumidThreshold_Type = Integer32
_IemConfigProbeLowHumidThreshold_Object = MibTableColumn
iemConfigProbeLowHumidThreshold = _IemConfigProbeLowHumidThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 7),
    _IemConfigProbeLowHumidThreshold_Type()
)
iemConfigProbeLowHumidThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeLowHumidThreshold.setStatus("mandatory")


class _IemConfigProbeHighTempEnable_Type(Integer32):
    """Custom type iemConfigProbeHighTempEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IemConfigProbeHighTempEnable_Type.__name__ = "Integer32"
_IemConfigProbeHighTempEnable_Object = MibTableColumn
iemConfigProbeHighTempEnable = _IemConfigProbeHighTempEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 8),
    _IemConfigProbeHighTempEnable_Type()
)
iemConfigProbeHighTempEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeHighTempEnable.setStatus("mandatory")


class _IemConfigProbeLowTempEnable_Type(Integer32):
    """Custom type iemConfigProbeLowTempEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IemConfigProbeLowTempEnable_Type.__name__ = "Integer32"
_IemConfigProbeLowTempEnable_Object = MibTableColumn
iemConfigProbeLowTempEnable = _IemConfigProbeLowTempEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 9),
    _IemConfigProbeLowTempEnable_Type()
)
iemConfigProbeLowTempEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeLowTempEnable.setStatus("mandatory")


class _IemConfigProbeHighHumidEnable_Type(Integer32):
    """Custom type iemConfigProbeHighHumidEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IemConfigProbeHighHumidEnable_Type.__name__ = "Integer32"
_IemConfigProbeHighHumidEnable_Object = MibTableColumn
iemConfigProbeHighHumidEnable = _IemConfigProbeHighHumidEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 10),
    _IemConfigProbeHighHumidEnable_Type()
)
iemConfigProbeHighHumidEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeHighHumidEnable.setStatus("mandatory")


class _IemConfigProbeLowHumidEnable_Type(Integer32):
    """Custom type iemConfigProbeLowHumidEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IemConfigProbeLowHumidEnable_Type.__name__ = "Integer32"
_IemConfigProbeLowHumidEnable_Object = MibTableColumn
iemConfigProbeLowHumidEnable = _IemConfigProbeLowHumidEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 11),
    _IemConfigProbeLowHumidEnable_Type()
)
iemConfigProbeLowHumidEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeLowHumidEnable.setStatus("mandatory")
_IemConfigProbeMaxTempThreshold_Type = Integer32
_IemConfigProbeMaxTempThreshold_Object = MibTableColumn
iemConfigProbeMaxTempThreshold = _IemConfigProbeMaxTempThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 12),
    _IemConfigProbeMaxTempThreshold_Type()
)
iemConfigProbeMaxTempThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeMaxTempThreshold.setStatus("mandatory")
_IemConfigProbeMinTempThreshold_Type = Integer32
_IemConfigProbeMinTempThreshold_Object = MibTableColumn
iemConfigProbeMinTempThreshold = _IemConfigProbeMinTempThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 13),
    _IemConfigProbeMinTempThreshold_Type()
)
iemConfigProbeMinTempThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeMinTempThreshold.setStatus("mandatory")
_IemConfigProbeMaxHumidThreshold_Type = Integer32
_IemConfigProbeMaxHumidThreshold_Object = MibTableColumn
iemConfigProbeMaxHumidThreshold = _IemConfigProbeMaxHumidThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 14),
    _IemConfigProbeMaxHumidThreshold_Type()
)
iemConfigProbeMaxHumidThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeMaxHumidThreshold.setStatus("mandatory")
_IemConfigProbeMinHumidThreshold_Type = Integer32
_IemConfigProbeMinHumidThreshold_Object = MibTableColumn
iemConfigProbeMinHumidThreshold = _IemConfigProbeMinHumidThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 15),
    _IemConfigProbeMinHumidThreshold_Type()
)
iemConfigProbeMinHumidThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeMinHumidThreshold.setStatus("mandatory")


class _IemConfigProbeMaxTempEnable_Type(Integer32):
    """Custom type iemConfigProbeMaxTempEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IemConfigProbeMaxTempEnable_Type.__name__ = "Integer32"
_IemConfigProbeMaxTempEnable_Object = MibTableColumn
iemConfigProbeMaxTempEnable = _IemConfigProbeMaxTempEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 16),
    _IemConfigProbeMaxTempEnable_Type()
)
iemConfigProbeMaxTempEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeMaxTempEnable.setStatus("mandatory")


class _IemConfigProbeMinTempEnable_Type(Integer32):
    """Custom type iemConfigProbeMinTempEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IemConfigProbeMinTempEnable_Type.__name__ = "Integer32"
_IemConfigProbeMinTempEnable_Object = MibTableColumn
iemConfigProbeMinTempEnable = _IemConfigProbeMinTempEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 17),
    _IemConfigProbeMinTempEnable_Type()
)
iemConfigProbeMinTempEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeMinTempEnable.setStatus("mandatory")


class _IemConfigProbeMaxHumidEnable_Type(Integer32):
    """Custom type iemConfigProbeMaxHumidEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IemConfigProbeMaxHumidEnable_Type.__name__ = "Integer32"
_IemConfigProbeMaxHumidEnable_Object = MibTableColumn
iemConfigProbeMaxHumidEnable = _IemConfigProbeMaxHumidEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 18),
    _IemConfigProbeMaxHumidEnable_Type()
)
iemConfigProbeMaxHumidEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeMaxHumidEnable.setStatus("mandatory")


class _IemConfigProbeMinHumidEnable_Type(Integer32):
    """Custom type iemConfigProbeMinHumidEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IemConfigProbeMinHumidEnable_Type.__name__ = "Integer32"
_IemConfigProbeMinHumidEnable_Object = MibTableColumn
iemConfigProbeMinHumidEnable = _IemConfigProbeMinHumidEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 19),
    _IemConfigProbeMinHumidEnable_Type()
)
iemConfigProbeMinHumidEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeMinHumidEnable.setStatus("mandatory")
_IemConfigProbeTempHysteresis_Type = Integer32
_IemConfigProbeTempHysteresis_Object = MibTableColumn
iemConfigProbeTempHysteresis = _IemConfigProbeTempHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 20),
    _IemConfigProbeTempHysteresis_Type()
)
iemConfigProbeTempHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeTempHysteresis.setStatus("mandatory")
_IemConfigProbeHumidHysteresis_Type = Integer32
_IemConfigProbeHumidHysteresis_Object = MibTableColumn
iemConfigProbeHumidHysteresis = _IemConfigProbeHumidHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 21),
    _IemConfigProbeHumidHysteresis_Type()
)
iemConfigProbeHumidHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeHumidHysteresis.setStatus("mandatory")
_IemConfigProbeLocation_Type = DisplayString
_IemConfigProbeLocation_Object = MibTableColumn
iemConfigProbeLocation = _IemConfigProbeLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 2, 1, 22),
    _IemConfigProbeLocation_Type()
)
iemConfigProbeLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigProbeLocation.setStatus("mandatory")
_IemConfigContactsNumContacts_Type = Integer32
_IemConfigContactsNumContacts_Object = MibScalar
iemConfigContactsNumContacts = _IemConfigContactsNumContacts_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 3),
    _IemConfigContactsNumContacts_Type()
)
iemConfigContactsNumContacts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemConfigContactsNumContacts.setStatus("mandatory")
_IemConfigContactsTable_Object = MibTable
iemConfigContactsTable = _IemConfigContactsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4)
)
if mibBuilder.loadTexts:
    iemConfigContactsTable.setStatus("mandatory")
_IemConfigContactsEntry_Object = MibTableRow
iemConfigContactsEntry = _IemConfigContactsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1)
)
iemConfigContactsEntry.setIndexNames(
    (0, "POWERNET-MIB", "iemConfigContactNumber"),
)
if mibBuilder.loadTexts:
    iemConfigContactsEntry.setStatus("mandatory")
_IemConfigContactNumber_Type = Integer32
_IemConfigContactNumber_Object = MibTableColumn
iemConfigContactNumber = _IemConfigContactNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 1),
    _IemConfigContactNumber_Type()
)
iemConfigContactNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemConfigContactNumber.setStatus("mandatory")
_IemConfigContactName_Type = DisplayString
_IemConfigContactName_Object = MibTableColumn
iemConfigContactName = _IemConfigContactName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 2),
    _IemConfigContactName_Type()
)
iemConfigContactName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigContactName.setStatus("mandatory")


class _IemConfigContactEnable_Type(Integer32):
    """Custom type iemConfigContactEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IemConfigContactEnable_Type.__name__ = "Integer32"
_IemConfigContactEnable_Object = MibTableColumn
iemConfigContactEnable = _IemConfigContactEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 3),
    _IemConfigContactEnable_Type()
)
iemConfigContactEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigContactEnable.setStatus("mandatory")


class _IemConfigContactSeverity_Type(Integer32):
    """Custom type iemConfigContactSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("critical", 1),
          ("informational", 3),
          ("warning", 2))
    )


_IemConfigContactSeverity_Type.__name__ = "Integer32"
_IemConfigContactSeverity_Object = MibTableColumn
iemConfigContactSeverity = _IemConfigContactSeverity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 4),
    _IemConfigContactSeverity_Type()
)
iemConfigContactSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigContactSeverity.setStatus("mandatory")


class _IemConfigContactNormalState_Type(Integer32):
    """Custom type iemConfigContactNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_IemConfigContactNormalState_Type.__name__ = "Integer32"
_IemConfigContactNormalState_Object = MibTableColumn
iemConfigContactNormalState = _IemConfigContactNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 5),
    _IemConfigContactNormalState_Type()
)
iemConfigContactNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigContactNormalState.setStatus("mandatory")
_IemConfigContactLocation_Type = DisplayString
_IemConfigContactLocation_Object = MibTableColumn
iemConfigContactLocation = _IemConfigContactLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 4, 1, 6),
    _IemConfigContactLocation_Type()
)
iemConfigContactLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigContactLocation.setStatus("mandatory")
_IemConfigConfigRelaysNumRelays_Type = Integer32
_IemConfigConfigRelaysNumRelays_Object = MibScalar
iemConfigConfigRelaysNumRelays = _IemConfigConfigRelaysNumRelays_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 5),
    _IemConfigConfigRelaysNumRelays_Type()
)
iemConfigConfigRelaysNumRelays.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemConfigConfigRelaysNumRelays.setStatus("mandatory")
_IemConfigRelaysTable_Object = MibTable
iemConfigRelaysTable = _IemConfigRelaysTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6)
)
if mibBuilder.loadTexts:
    iemConfigRelaysTable.setStatus("mandatory")
_IemConfigRelaysEntry_Object = MibTableRow
iemConfigRelaysEntry = _IemConfigRelaysEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1)
)
iemConfigRelaysEntry.setIndexNames(
    (0, "POWERNET-MIB", "iemConfigRelayNumber"),
)
if mibBuilder.loadTexts:
    iemConfigRelaysEntry.setStatus("mandatory")
_IemConfigRelayNumber_Type = Integer32
_IemConfigRelayNumber_Object = MibTableColumn
iemConfigRelayNumber = _IemConfigRelayNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 1),
    _IemConfigRelayNumber_Type()
)
iemConfigRelayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemConfigRelayNumber.setStatus("mandatory")
_IemConfigRelayName_Type = DisplayString
_IemConfigRelayName_Object = MibTableColumn
iemConfigRelayName = _IemConfigRelayName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 2),
    _IemConfigRelayName_Type()
)
iemConfigRelayName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigRelayName.setStatus("mandatory")


class _IemConfigRelayNormalState_Type(Integer32):
    """Custom type iemConfigRelayNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_IemConfigRelayNormalState_Type.__name__ = "Integer32"
_IemConfigRelayNormalState_Object = MibTableColumn
iemConfigRelayNormalState = _IemConfigRelayNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 3),
    _IemConfigRelayNormalState_Type()
)
iemConfigRelayNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigRelayNormalState.setStatus("mandatory")
_IemConfigRelayFaultCondition_Type = Integer32
_IemConfigRelayFaultCondition_Object = MibTableColumn
iemConfigRelayFaultCondition = _IemConfigRelayFaultCondition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 2, 6, 1, 4),
    _IemConfigRelayFaultCondition_Type()
)
iemConfigRelayFaultCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iemConfigRelayFaultCondition.setStatus("mandatory")
_IemStatus_ObjectIdentity = ObjectIdentity
iemStatus = _IemStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3)
)
_IemStatusProbesNumProbes_Type = Integer32
_IemStatusProbesNumProbes_Object = MibScalar
iemStatusProbesNumProbes = _IemStatusProbesNumProbes_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 1),
    _IemStatusProbesNumProbes_Type()
)
iemStatusProbesNumProbes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbesNumProbes.setStatus("mandatory")
_IemStatusProbesTable_Object = MibTable
iemStatusProbesTable = _IemStatusProbesTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2)
)
if mibBuilder.loadTexts:
    iemStatusProbesTable.setStatus("mandatory")
_IemStatusProbesEntry_Object = MibTableRow
iemStatusProbesEntry = _IemStatusProbesEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1)
)
iemStatusProbesEntry.setIndexNames(
    (0, "POWERNET-MIB", "iemStatusProbeNumber"),
)
if mibBuilder.loadTexts:
    iemStatusProbesEntry.setStatus("mandatory")
_IemStatusProbeNumber_Type = Integer32
_IemStatusProbeNumber_Object = MibTableColumn
iemStatusProbeNumber = _IemStatusProbeNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 1),
    _IemStatusProbeNumber_Type()
)
iemStatusProbeNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeNumber.setStatus("mandatory")
_IemStatusProbeName_Type = DisplayString
_IemStatusProbeName_Object = MibTableColumn
iemStatusProbeName = _IemStatusProbeName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 2),
    _IemStatusProbeName_Type()
)
iemStatusProbeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeName.setStatus("mandatory")


class _IemStatusProbeStatus_Type(Integer32):
    """Custom type iemStatusProbeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connected", 2),
          ("disconnected", 1))
    )


_IemStatusProbeStatus_Type.__name__ = "Integer32"
_IemStatusProbeStatus_Object = MibTableColumn
iemStatusProbeStatus = _IemStatusProbeStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 3),
    _IemStatusProbeStatus_Type()
)
iemStatusProbeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeStatus.setStatus("mandatory")
_IemStatusProbeCurrentTemp_Type = Integer32
_IemStatusProbeCurrentTemp_Object = MibTableColumn
iemStatusProbeCurrentTemp = _IemStatusProbeCurrentTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 4),
    _IemStatusProbeCurrentTemp_Type()
)
iemStatusProbeCurrentTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeCurrentTemp.setStatus("mandatory")


class _IemStatusProbeTempUnits_Type(Integer32):
    """Custom type iemStatusProbeTempUnits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("celsius", 1),
          ("fahrenheit", 2))
    )


_IemStatusProbeTempUnits_Type.__name__ = "Integer32"
_IemStatusProbeTempUnits_Object = MibTableColumn
iemStatusProbeTempUnits = _IemStatusProbeTempUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 5),
    _IemStatusProbeTempUnits_Type()
)
iemStatusProbeTempUnits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeTempUnits.setStatus("mandatory")
_IemStatusProbeCurrentHumid_Type = Integer32
_IemStatusProbeCurrentHumid_Object = MibTableColumn
iemStatusProbeCurrentHumid = _IemStatusProbeCurrentHumid_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 6),
    _IemStatusProbeCurrentHumid_Type()
)
iemStatusProbeCurrentHumid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeCurrentHumid.setStatus("mandatory")


class _IemStatusProbeHighTempViolation_Type(Integer32):
    """Custom type iemStatusProbeHighTempViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("highTempViolation", 2),
          ("noViolation", 1))
    )


_IemStatusProbeHighTempViolation_Type.__name__ = "Integer32"
_IemStatusProbeHighTempViolation_Object = MibTableColumn
iemStatusProbeHighTempViolation = _IemStatusProbeHighTempViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 7),
    _IemStatusProbeHighTempViolation_Type()
)
iemStatusProbeHighTempViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeHighTempViolation.setStatus("mandatory")


class _IemStatusProbeLowTempViolation_Type(Integer32):
    """Custom type iemStatusProbeLowTempViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("lowTempViolation", 2),
          ("noViolation", 1))
    )


_IemStatusProbeLowTempViolation_Type.__name__ = "Integer32"
_IemStatusProbeLowTempViolation_Object = MibTableColumn
iemStatusProbeLowTempViolation = _IemStatusProbeLowTempViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 8),
    _IemStatusProbeLowTempViolation_Type()
)
iemStatusProbeLowTempViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeLowTempViolation.setStatus("mandatory")


class _IemStatusProbeHighHumidViolation_Type(Integer32):
    """Custom type iemStatusProbeHighHumidViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("highHumidViolation", 2),
          ("noViolation", 1))
    )


_IemStatusProbeHighHumidViolation_Type.__name__ = "Integer32"
_IemStatusProbeHighHumidViolation_Object = MibTableColumn
iemStatusProbeHighHumidViolation = _IemStatusProbeHighHumidViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 9),
    _IemStatusProbeHighHumidViolation_Type()
)
iemStatusProbeHighHumidViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeHighHumidViolation.setStatus("mandatory")


class _IemStatusProbeLowHumidViolation_Type(Integer32):
    """Custom type iemStatusProbeLowHumidViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("lowHumidViolation", 2),
          ("noViolation", 1))
    )


_IemStatusProbeLowHumidViolation_Type.__name__ = "Integer32"
_IemStatusProbeLowHumidViolation_Object = MibTableColumn
iemStatusProbeLowHumidViolation = _IemStatusProbeLowHumidViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 10),
    _IemStatusProbeLowHumidViolation_Type()
)
iemStatusProbeLowHumidViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeLowHumidViolation.setStatus("mandatory")


class _IemStatusProbeMaxTempViolation_Type(Integer32):
    """Custom type iemStatusProbeMaxTempViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("maxTempViolation", 2),
          ("noViolation", 1))
    )


_IemStatusProbeMaxTempViolation_Type.__name__ = "Integer32"
_IemStatusProbeMaxTempViolation_Object = MibTableColumn
iemStatusProbeMaxTempViolation = _IemStatusProbeMaxTempViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 11),
    _IemStatusProbeMaxTempViolation_Type()
)
iemStatusProbeMaxTempViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeMaxTempViolation.setStatus("mandatory")


class _IemStatusProbeMinTempViolation_Type(Integer32):
    """Custom type iemStatusProbeMinTempViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("minTempViolation", 2),
          ("noViolation", 1))
    )


_IemStatusProbeMinTempViolation_Type.__name__ = "Integer32"
_IemStatusProbeMinTempViolation_Object = MibTableColumn
iemStatusProbeMinTempViolation = _IemStatusProbeMinTempViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 12),
    _IemStatusProbeMinTempViolation_Type()
)
iemStatusProbeMinTempViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeMinTempViolation.setStatus("mandatory")


class _IemStatusProbeMaxHumidViolation_Type(Integer32):
    """Custom type iemStatusProbeMaxHumidViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("maxHumidViolation", 2),
          ("noViolation", 1))
    )


_IemStatusProbeMaxHumidViolation_Type.__name__ = "Integer32"
_IemStatusProbeMaxHumidViolation_Object = MibTableColumn
iemStatusProbeMaxHumidViolation = _IemStatusProbeMaxHumidViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 13),
    _IemStatusProbeMaxHumidViolation_Type()
)
iemStatusProbeMaxHumidViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeMaxHumidViolation.setStatus("mandatory")


class _IemStatusProbeMinHumidViolation_Type(Integer32):
    """Custom type iemStatusProbeMinHumidViolation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("minHumidViolation", 2),
          ("noViolation", 1))
    )


_IemStatusProbeMinHumidViolation_Type.__name__ = "Integer32"
_IemStatusProbeMinHumidViolation_Object = MibTableColumn
iemStatusProbeMinHumidViolation = _IemStatusProbeMinHumidViolation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 14),
    _IemStatusProbeMinHumidViolation_Type()
)
iemStatusProbeMinHumidViolation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeMinHumidViolation.setStatus("mandatory")
_IemStatusProbeLocation_Type = DisplayString
_IemStatusProbeLocation_Object = MibTableColumn
iemStatusProbeLocation = _IemStatusProbeLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 2, 1, 15),
    _IemStatusProbeLocation_Type()
)
iemStatusProbeLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusProbeLocation.setStatus("mandatory")
_IemStatusContactsNumContacts_Type = Integer32
_IemStatusContactsNumContacts_Object = MibScalar
iemStatusContactsNumContacts = _IemStatusContactsNumContacts_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 3),
    _IemStatusContactsNumContacts_Type()
)
iemStatusContactsNumContacts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusContactsNumContacts.setStatus("mandatory")
_IemStatusContactsTable_Object = MibTable
iemStatusContactsTable = _IemStatusContactsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4)
)
if mibBuilder.loadTexts:
    iemStatusContactsTable.setStatus("mandatory")
_IemStatusContactsEntry_Object = MibTableRow
iemStatusContactsEntry = _IemStatusContactsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1)
)
iemStatusContactsEntry.setIndexNames(
    (0, "POWERNET-MIB", "iemStatusContactNumber"),
)
if mibBuilder.loadTexts:
    iemStatusContactsEntry.setStatus("mandatory")
_IemStatusContactNumber_Type = Integer32
_IemStatusContactNumber_Object = MibTableColumn
iemStatusContactNumber = _IemStatusContactNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 1),
    _IemStatusContactNumber_Type()
)
iemStatusContactNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusContactNumber.setStatus("mandatory")
_IemStatusContactName_Type = DisplayString
_IemStatusContactName_Object = MibTableColumn
iemStatusContactName = _IemStatusContactName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 2),
    _IemStatusContactName_Type()
)
iemStatusContactName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusContactName.setStatus("mandatory")


class _IemStatusContactStatus_Type(Integer32):
    """Custom type iemStatusContactStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 3),
          ("fault", 2),
          ("noFault", 1))
    )


_IemStatusContactStatus_Type.__name__ = "Integer32"
_IemStatusContactStatus_Object = MibTableColumn
iemStatusContactStatus = _IemStatusContactStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 4, 1, 3),
    _IemStatusContactStatus_Type()
)
iemStatusContactStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusContactStatus.setStatus("mandatory")
_IemStatusRelaysNumRelays_Type = Integer32
_IemStatusRelaysNumRelays_Object = MibScalar
iemStatusRelaysNumRelays = _IemStatusRelaysNumRelays_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 6),
    _IemStatusRelaysNumRelays_Type()
)
iemStatusRelaysNumRelays.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusRelaysNumRelays.setStatus("mandatory")
_IemStatusRelaysTable_Object = MibTable
iemStatusRelaysTable = _IemStatusRelaysTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7)
)
if mibBuilder.loadTexts:
    iemStatusRelaysTable.setStatus("mandatory")
_IemStatusRelaysEntry_Object = MibTableRow
iemStatusRelaysEntry = _IemStatusRelaysEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1)
)
iemStatusRelaysEntry.setIndexNames(
    (0, "POWERNET-MIB", "iemStatusRelayNumber"),
)
if mibBuilder.loadTexts:
    iemStatusRelaysEntry.setStatus("mandatory")
_IemStatusRelayNumber_Type = Integer32
_IemStatusRelayNumber_Object = MibTableColumn
iemStatusRelayNumber = _IemStatusRelayNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 1),
    _IemStatusRelayNumber_Type()
)
iemStatusRelayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusRelayNumber.setStatus("mandatory")
_IemStatusRelayName_Type = DisplayString
_IemStatusRelayName_Object = MibTableColumn
iemStatusRelayName = _IemStatusRelayName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 2),
    _IemStatusRelayName_Type()
)
iemStatusRelayName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusRelayName.setStatus("mandatory")


class _IemStatusRelayStatus_Type(Integer32):
    """Custom type iemStatusRelayStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("faultState", 1),
          ("normalState", 2))
    )


_IemStatusRelayStatus_Type.__name__ = "Integer32"
_IemStatusRelayStatus_Object = MibTableColumn
iemStatusRelayStatus = _IemStatusRelayStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 2, 3, 7, 1, 3),
    _IemStatusRelayStatus_Type()
)
iemStatusRelayStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    iemStatusRelayStatus.setStatus("mandatory")
_EnvMgtSystem_ObjectIdentity = ObjectIdentity
envMgtSystem = _EnvMgtSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3)
)
_EmsIdent_ObjectIdentity = ObjectIdentity
emsIdent = _EmsIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1)
)
_EmsIdentEMSName_Type = DisplayString
_EmsIdentEMSName_Object = MibScalar
emsIdentEMSName = _EmsIdentEMSName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 1),
    _EmsIdentEMSName_Type()
)
emsIdentEMSName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsIdentEMSName.setStatus("mandatory")
_EmsIdentProductNumber_Type = DisplayString
_EmsIdentProductNumber_Object = MibScalar
emsIdentProductNumber = _EmsIdentProductNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 2),
    _EmsIdentProductNumber_Type()
)
emsIdentProductNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsIdentProductNumber.setStatus("mandatory")
_EmsIdentFirmwareRev_Type = DisplayString
_EmsIdentFirmwareRev_Object = MibScalar
emsIdentFirmwareRev = _EmsIdentFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 3),
    _EmsIdentFirmwareRev_Type()
)
emsIdentFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsIdentFirmwareRev.setStatus("mandatory")
_EmsIdentHardwareRev_Type = DisplayString
_EmsIdentHardwareRev_Object = MibScalar
emsIdentHardwareRev = _EmsIdentHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 4),
    _EmsIdentHardwareRev_Type()
)
emsIdentHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsIdentHardwareRev.setStatus("mandatory")
_EmsIdentDateOfManufacture_Type = DisplayString
_EmsIdentDateOfManufacture_Object = MibScalar
emsIdentDateOfManufacture = _EmsIdentDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 5),
    _EmsIdentDateOfManufacture_Type()
)
emsIdentDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsIdentDateOfManufacture.setStatus("mandatory")
_EmsIdentSerialNumber_Type = DisplayString
_EmsIdentSerialNumber_Object = MibScalar
emsIdentSerialNumber = _EmsIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 1, 6),
    _EmsIdentSerialNumber_Type()
)
emsIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsIdentSerialNumber.setStatus("mandatory")
_EmsOutputRelayControl_ObjectIdentity = ObjectIdentity
emsOutputRelayControl = _EmsOutputRelayControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2)
)
_EmsOutputRelayControlTable_Object = MibTable
emsOutputRelayControlTable = _EmsOutputRelayControlTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1)
)
if mibBuilder.loadTexts:
    emsOutputRelayControlTable.setStatus("mandatory")
_EmsOutputRelayControlEntry_Object = MibTableRow
emsOutputRelayControlEntry = _EmsOutputRelayControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1)
)
emsOutputRelayControlEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsOutputRelayControlOutputRelayIndex"),
)
if mibBuilder.loadTexts:
    emsOutputRelayControlEntry.setStatus("mandatory")
_EmsOutputRelayControlOutputRelayIndex_Type = Integer32
_EmsOutputRelayControlOutputRelayIndex_Object = MibTableColumn
emsOutputRelayControlOutputRelayIndex = _EmsOutputRelayControlOutputRelayIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 1),
    _EmsOutputRelayControlOutputRelayIndex_Type()
)
emsOutputRelayControlOutputRelayIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutputRelayControlOutputRelayIndex.setStatus("mandatory")
_EmsOutputRelayControlOutputRelayName_Type = DisplayString
_EmsOutputRelayControlOutputRelayName_Object = MibTableColumn
emsOutputRelayControlOutputRelayName = _EmsOutputRelayControlOutputRelayName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 2),
    _EmsOutputRelayControlOutputRelayName_Type()
)
emsOutputRelayControlOutputRelayName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutputRelayControlOutputRelayName.setStatus("mandatory")


class _EmsOutputRelayControlOutputRelayCommand_Type(Integer32):
    """Custom type emsOutputRelayControlOutputRelayCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("immediateCloseEMS", 1),
          ("immediateOpenEMS", 2))
    )


_EmsOutputRelayControlOutputRelayCommand_Type.__name__ = "Integer32"
_EmsOutputRelayControlOutputRelayCommand_Object = MibTableColumn
emsOutputRelayControlOutputRelayCommand = _EmsOutputRelayControlOutputRelayCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 2, 1, 1, 3),
    _EmsOutputRelayControlOutputRelayCommand_Type()
)
emsOutputRelayControlOutputRelayCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsOutputRelayControlOutputRelayCommand.setStatus("mandatory")
_EmsOutletControl_ObjectIdentity = ObjectIdentity
emsOutletControl = _EmsOutletControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3)
)
_EmsOutletControlTable_Object = MibTable
emsOutletControlTable = _EmsOutletControlTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1)
)
if mibBuilder.loadTexts:
    emsOutletControlTable.setStatus("mandatory")
_EmsOutletControlEntry_Object = MibTableRow
emsOutletControlEntry = _EmsOutletControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1)
)
emsOutletControlEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsOutletControlOutletIndex"),
)
if mibBuilder.loadTexts:
    emsOutletControlEntry.setStatus("mandatory")
_EmsOutletControlOutletIndex_Type = Integer32
_EmsOutletControlOutletIndex_Object = MibTableColumn
emsOutletControlOutletIndex = _EmsOutletControlOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 1),
    _EmsOutletControlOutletIndex_Type()
)
emsOutletControlOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutletControlOutletIndex.setStatus("mandatory")
_EmsOutletControlOutletName_Type = DisplayString
_EmsOutletControlOutletName_Object = MibTableColumn
emsOutletControlOutletName = _EmsOutletControlOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 2),
    _EmsOutletControlOutletName_Type()
)
emsOutletControlOutletName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutletControlOutletName.setStatus("mandatory")


class _EmsOutletControlOutletCommand_Type(Integer32):
    """Custom type emsOutletControlOutletCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("immediateOffEMS", 2),
          ("immediateOnEMS", 1))
    )


_EmsOutletControlOutletCommand_Type.__name__ = "Integer32"
_EmsOutletControlOutletCommand_Object = MibTableColumn
emsOutletControlOutletCommand = _EmsOutletControlOutletCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 3, 1, 1, 3),
    _EmsOutletControlOutletCommand_Type()
)
emsOutletControlOutletCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsOutletControlOutletCommand.setStatus("mandatory")
_EmsSensorControl_ObjectIdentity = ObjectIdentity
emsSensorControl = _EmsSensorControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4)
)
_EmsSensorControlTable_Object = MibTable
emsSensorControlTable = _EmsSensorControlTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1)
)
if mibBuilder.loadTexts:
    emsSensorControlTable.setStatus("mandatory")
_EmsSensorControlEntry_Object = MibTableRow
emsSensorControlEntry = _EmsSensorControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1)
)
emsSensorControlEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsSensorControlSensorIndex"),
)
if mibBuilder.loadTexts:
    emsSensorControlEntry.setStatus("mandatory")
_EmsSensorControlSensorIndex_Type = Integer32
_EmsSensorControlSensorIndex_Object = MibTableColumn
emsSensorControlSensorIndex = _EmsSensorControlSensorIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 1),
    _EmsSensorControlSensorIndex_Type()
)
emsSensorControlSensorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsSensorControlSensorIndex.setStatus("mandatory")
_EmsSensorControlSensorSystemName_Type = DisplayString
_EmsSensorControlSensorSystemName_Object = MibTableColumn
emsSensorControlSensorSystemName = _EmsSensorControlSensorSystemName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 2),
    _EmsSensorControlSensorSystemName_Type()
)
emsSensorControlSensorSystemName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsSensorControlSensorSystemName.setStatus("mandatory")
_EmsSensorControlSensorUserName_Type = DisplayString
_EmsSensorControlSensorUserName_Object = MibTableColumn
emsSensorControlSensorUserName = _EmsSensorControlSensorUserName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 3),
    _EmsSensorControlSensorUserName_Type()
)
emsSensorControlSensorUserName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsSensorControlSensorUserName.setStatus("mandatory")


class _EmsSensorControlSensorCommand_Type(Integer32):
    """Custom type emsSensorControlSensorCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noCommandEMS", 1),
          ("resetCommandEMS", 2))
    )


_EmsSensorControlSensorCommand_Type.__name__ = "Integer32"
_EmsSensorControlSensorCommand_Object = MibTableColumn
emsSensorControlSensorCommand = _EmsSensorControlSensorCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 4, 1, 1, 4),
    _EmsSensorControlSensorCommand_Type()
)
emsSensorControlSensorCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsSensorControlSensorCommand.setStatus("mandatory")
_EmsAlarmDeviceControl_ObjectIdentity = ObjectIdentity
emsAlarmDeviceControl = _EmsAlarmDeviceControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5)
)
_EmsAlarmDeviceControlTable_Object = MibTable
emsAlarmDeviceControlTable = _EmsAlarmDeviceControlTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1)
)
if mibBuilder.loadTexts:
    emsAlarmDeviceControlTable.setStatus("mandatory")
_EmsAlarmDeviceControlEntry_Object = MibTableRow
emsAlarmDeviceControlEntry = _EmsAlarmDeviceControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1)
)
emsAlarmDeviceControlEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsAlarmDeviceControlDeviceIndex"),
)
if mibBuilder.loadTexts:
    emsAlarmDeviceControlEntry.setStatus("mandatory")
_EmsAlarmDeviceControlDeviceIndex_Type = Integer32
_EmsAlarmDeviceControlDeviceIndex_Object = MibTableColumn
emsAlarmDeviceControlDeviceIndex = _EmsAlarmDeviceControlDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 1),
    _EmsAlarmDeviceControlDeviceIndex_Type()
)
emsAlarmDeviceControlDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsAlarmDeviceControlDeviceIndex.setStatus("mandatory")
_EmsAlarmDeviceControlDeviceName_Type = DisplayString
_EmsAlarmDeviceControlDeviceName_Object = MibTableColumn
emsAlarmDeviceControlDeviceName = _EmsAlarmDeviceControlDeviceName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 2),
    _EmsAlarmDeviceControlDeviceName_Type()
)
emsAlarmDeviceControlDeviceName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsAlarmDeviceControlDeviceName.setStatus("mandatory")


class _EmsAlarmDeviceControlDeviceCommand_Type(Integer32):
    """Custom type emsAlarmDeviceControlDeviceCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("alarmDeviceNotInstalledEMS", 3),
          ("alarmDeviceOffEMS", 2),
          ("alarmDeviceOnEMS", 1))
    )


_EmsAlarmDeviceControlDeviceCommand_Type.__name__ = "Integer32"
_EmsAlarmDeviceControlDeviceCommand_Object = MibTableColumn
emsAlarmDeviceControlDeviceCommand = _EmsAlarmDeviceControlDeviceCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 5, 1, 1, 3),
    _EmsAlarmDeviceControlDeviceCommand_Type()
)
emsAlarmDeviceControlDeviceCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsAlarmDeviceControlDeviceCommand.setStatus("mandatory")
_EmsConfig_ObjectIdentity = ObjectIdentity
emsConfig = _EmsConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6)
)
_EmsConfigName_Type = DisplayString
_EmsConfigName_Object = MibScalar
emsConfigName = _EmsConfigName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6, 1),
    _EmsConfigName_Type()
)
emsConfigName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsConfigName.setStatus("mandatory")


class _EmsConfigCheckLogLight_Type(Integer32):
    """Custom type emsConfigCheckLogLight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("lightDisabled", 1),
          ("lightOnInformational", 2),
          ("lightOnSevere", 4),
          ("lightOnWarning", 3))
    )


_EmsConfigCheckLogLight_Type.__name__ = "Integer32"
_EmsConfigCheckLogLight_Object = MibScalar
emsConfigCheckLogLight = _EmsConfigCheckLogLight_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 6, 2),
    _EmsConfigCheckLogLight_Type()
)
emsConfigCheckLogLight.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsConfigCheckLogLight.setStatus("mandatory")
_EmsProbeConfig_ObjectIdentity = ObjectIdentity
emsProbeConfig = _EmsProbeConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7)
)
_EmsProbeConfigTable_Object = MibTable
emsProbeConfigTable = _EmsProbeConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1)
)
if mibBuilder.loadTexts:
    emsProbeConfigTable.setStatus("mandatory")
_EmsProbeConfigEntry_Object = MibTableRow
emsProbeConfigEntry = _EmsProbeConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1)
)
emsProbeConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsProbeConfigProbeIndex"),
)
if mibBuilder.loadTexts:
    emsProbeConfigEntry.setStatus("mandatory")
_EmsProbeConfigProbeIndex_Type = Integer32
_EmsProbeConfigProbeIndex_Object = MibTableColumn
emsProbeConfigProbeIndex = _EmsProbeConfigProbeIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 1),
    _EmsProbeConfigProbeIndex_Type()
)
emsProbeConfigProbeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeConfigProbeIndex.setStatus("mandatory")
_EmsProbeConfigProbeName_Type = DisplayString
_EmsProbeConfigProbeName_Object = MibTableColumn
emsProbeConfigProbeName = _EmsProbeConfigProbeName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 2),
    _EmsProbeConfigProbeName_Type()
)
emsProbeConfigProbeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeName.setStatus("mandatory")
_EmsProbeConfigProbeHighTempThresh_Type = Integer32
_EmsProbeConfigProbeHighTempThresh_Object = MibTableColumn
emsProbeConfigProbeHighTempThresh = _EmsProbeConfigProbeHighTempThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 3),
    _EmsProbeConfigProbeHighTempThresh_Type()
)
emsProbeConfigProbeHighTempThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeHighTempThresh.setStatus("mandatory")
_EmsProbeConfigProbeLowTempThresh_Type = Integer32
_EmsProbeConfigProbeLowTempThresh_Object = MibTableColumn
emsProbeConfigProbeLowTempThresh = _EmsProbeConfigProbeLowTempThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 4),
    _EmsProbeConfigProbeLowTempThresh_Type()
)
emsProbeConfigProbeLowTempThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeLowTempThresh.setStatus("mandatory")
_EmsProbeConfigProbeHighHumidityThresh_Type = Integer32
_EmsProbeConfigProbeHighHumidityThresh_Object = MibTableColumn
emsProbeConfigProbeHighHumidityThresh = _EmsProbeConfigProbeHighHumidityThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 5),
    _EmsProbeConfigProbeHighHumidityThresh_Type()
)
emsProbeConfigProbeHighHumidityThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeHighHumidityThresh.setStatus("mandatory")
_EmsProbeConfigProbeLowHumidityThresh_Type = Integer32
_EmsProbeConfigProbeLowHumidityThresh_Object = MibTableColumn
emsProbeConfigProbeLowHumidityThresh = _EmsProbeConfigProbeLowHumidityThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 6),
    _EmsProbeConfigProbeLowHumidityThresh_Type()
)
emsProbeConfigProbeLowHumidityThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeLowHumidityThresh.setStatus("mandatory")
_EmsProbeConfigProbeMaxTempThresh_Type = Integer32
_EmsProbeConfigProbeMaxTempThresh_Object = MibTableColumn
emsProbeConfigProbeMaxTempThresh = _EmsProbeConfigProbeMaxTempThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 7),
    _EmsProbeConfigProbeMaxTempThresh_Type()
)
emsProbeConfigProbeMaxTempThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeMaxTempThresh.setStatus("mandatory")
_EmsProbeConfigProbeMinTempThresh_Type = Integer32
_EmsProbeConfigProbeMinTempThresh_Object = MibTableColumn
emsProbeConfigProbeMinTempThresh = _EmsProbeConfigProbeMinTempThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 8),
    _EmsProbeConfigProbeMinTempThresh_Type()
)
emsProbeConfigProbeMinTempThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeMinTempThresh.setStatus("mandatory")
_EmsProbeConfigProbeDeltaTemp_Type = Integer32
_EmsProbeConfigProbeDeltaTemp_Object = MibTableColumn
emsProbeConfigProbeDeltaTemp = _EmsProbeConfigProbeDeltaTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 9),
    _EmsProbeConfigProbeDeltaTemp_Type()
)
emsProbeConfigProbeDeltaTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeDeltaTemp.setStatus("mandatory")
_EmsProbeConfigProbeMaxHumidityThresh_Type = Integer32
_EmsProbeConfigProbeMaxHumidityThresh_Object = MibTableColumn
emsProbeConfigProbeMaxHumidityThresh = _EmsProbeConfigProbeMaxHumidityThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 10),
    _EmsProbeConfigProbeMaxHumidityThresh_Type()
)
emsProbeConfigProbeMaxHumidityThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeMaxHumidityThresh.setStatus("mandatory")
_EmsProbeConfigProbeMinHumidityThresh_Type = Integer32
_EmsProbeConfigProbeMinHumidityThresh_Object = MibTableColumn
emsProbeConfigProbeMinHumidityThresh = _EmsProbeConfigProbeMinHumidityThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 11),
    _EmsProbeConfigProbeMinHumidityThresh_Type()
)
emsProbeConfigProbeMinHumidityThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeMinHumidityThresh.setStatus("mandatory")
_EmsProbeConfigProbeDeltaHumidity_Type = Integer32
_EmsProbeConfigProbeDeltaHumidity_Object = MibTableColumn
emsProbeConfigProbeDeltaHumidity = _EmsProbeConfigProbeDeltaHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 12),
    _EmsProbeConfigProbeDeltaHumidity_Type()
)
emsProbeConfigProbeDeltaHumidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeDeltaHumidity.setStatus("mandatory")
_EmsProbeConfigProbeSTIncTempVariance_Type = Integer32
_EmsProbeConfigProbeSTIncTempVariance_Object = MibTableColumn
emsProbeConfigProbeSTIncTempVariance = _EmsProbeConfigProbeSTIncTempVariance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 13),
    _EmsProbeConfigProbeSTIncTempVariance_Type()
)
emsProbeConfigProbeSTIncTempVariance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeSTIncTempVariance.setStatus("mandatory")
_EmsProbeConfigProbeSTIncTempTime_Type = Integer32
_EmsProbeConfigProbeSTIncTempTime_Object = MibTableColumn
emsProbeConfigProbeSTIncTempTime = _EmsProbeConfigProbeSTIncTempTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 14),
    _EmsProbeConfigProbeSTIncTempTime_Type()
)
emsProbeConfigProbeSTIncTempTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeSTIncTempTime.setStatus("mandatory")
_EmsProbeConfigProbeSTDecTempVariance_Type = Integer32
_EmsProbeConfigProbeSTDecTempVariance_Object = MibTableColumn
emsProbeConfigProbeSTDecTempVariance = _EmsProbeConfigProbeSTDecTempVariance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 15),
    _EmsProbeConfigProbeSTDecTempVariance_Type()
)
emsProbeConfigProbeSTDecTempVariance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeSTDecTempVariance.setStatus("mandatory")
_EmsProbeConfigProbeSTDecTempTime_Type = Integer32
_EmsProbeConfigProbeSTDecTempTime_Object = MibTableColumn
emsProbeConfigProbeSTDecTempTime = _EmsProbeConfigProbeSTDecTempTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 16),
    _EmsProbeConfigProbeSTDecTempTime_Type()
)
emsProbeConfigProbeSTDecTempTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeSTDecTempTime.setStatus("mandatory")
_EmsProbeConfigProbeLTIncTempVariance_Type = Integer32
_EmsProbeConfigProbeLTIncTempVariance_Object = MibTableColumn
emsProbeConfigProbeLTIncTempVariance = _EmsProbeConfigProbeLTIncTempVariance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 17),
    _EmsProbeConfigProbeLTIncTempVariance_Type()
)
emsProbeConfigProbeLTIncTempVariance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeLTIncTempVariance.setStatus("mandatory")
_EmsProbeConfigProbeLTIncTempTime_Type = Integer32
_EmsProbeConfigProbeLTIncTempTime_Object = MibTableColumn
emsProbeConfigProbeLTIncTempTime = _EmsProbeConfigProbeLTIncTempTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 18),
    _EmsProbeConfigProbeLTIncTempTime_Type()
)
emsProbeConfigProbeLTIncTempTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeLTIncTempTime.setStatus("mandatory")
_EmsProbeConfigProbeLTDecTempVariance_Type = Integer32
_EmsProbeConfigProbeLTDecTempVariance_Object = MibTableColumn
emsProbeConfigProbeLTDecTempVariance = _EmsProbeConfigProbeLTDecTempVariance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 19),
    _EmsProbeConfigProbeLTDecTempVariance_Type()
)
emsProbeConfigProbeLTDecTempVariance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeLTDecTempVariance.setStatus("mandatory")
_EmsProbeConfigProbeLTDecTempTime_Type = Integer32
_EmsProbeConfigProbeLTDecTempTime_Object = MibTableColumn
emsProbeConfigProbeLTDecTempTime = _EmsProbeConfigProbeLTDecTempTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 7, 1, 1, 20),
    _EmsProbeConfigProbeLTDecTempTime_Type()
)
emsProbeConfigProbeLTDecTempTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsProbeConfigProbeLTDecTempTime.setStatus("mandatory")
_EmsInputContactConfig_ObjectIdentity = ObjectIdentity
emsInputContactConfig = _EmsInputContactConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8)
)
_EmsInputContactConfigTable_Object = MibTable
emsInputContactConfigTable = _EmsInputContactConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1)
)
if mibBuilder.loadTexts:
    emsInputContactConfigTable.setStatus("mandatory")
_EmsInputContactConfigEntry_Object = MibTableRow
emsInputContactConfigEntry = _EmsInputContactConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1)
)
emsInputContactConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsInputContactConfigInputContactIndex"),
)
if mibBuilder.loadTexts:
    emsInputContactConfigEntry.setStatus("mandatory")
_EmsInputContactConfigInputContactIndex_Type = Integer32
_EmsInputContactConfigInputContactIndex_Object = MibTableColumn
emsInputContactConfigInputContactIndex = _EmsInputContactConfigInputContactIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 1),
    _EmsInputContactConfigInputContactIndex_Type()
)
emsInputContactConfigInputContactIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsInputContactConfigInputContactIndex.setStatus("mandatory")
_EmsInputContactConfigInputContactName_Type = DisplayString
_EmsInputContactConfigInputContactName_Object = MibTableColumn
emsInputContactConfigInputContactName = _EmsInputContactConfigInputContactName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 2),
    _EmsInputContactConfigInputContactName_Type()
)
emsInputContactConfigInputContactName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsInputContactConfigInputContactName.setStatus("mandatory")


class _EmsInputContactConfigInputContactNormalState_Type(Integer32):
    """Custom type emsInputContactConfigInputContactNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normallyClosedEMS", 1),
          ("normallyOpenEMS", 2))
    )


_EmsInputContactConfigInputContactNormalState_Type.__name__ = "Integer32"
_EmsInputContactConfigInputContactNormalState_Object = MibTableColumn
emsInputContactConfigInputContactNormalState = _EmsInputContactConfigInputContactNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 8, 1, 1, 3),
    _EmsInputContactConfigInputContactNormalState_Type()
)
emsInputContactConfigInputContactNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsInputContactConfigInputContactNormalState.setStatus("mandatory")
_EmsOutputRelayConfig_ObjectIdentity = ObjectIdentity
emsOutputRelayConfig = _EmsOutputRelayConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9)
)
_EmsOutputRelayConfigTable_Object = MibTable
emsOutputRelayConfigTable = _EmsOutputRelayConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1)
)
if mibBuilder.loadTexts:
    emsOutputRelayConfigTable.setStatus("mandatory")
_EmsOutputRelayConfigEntry_Object = MibTableRow
emsOutputRelayConfigEntry = _EmsOutputRelayConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1)
)
emsOutputRelayConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsOutputRelayConfigOutputRelayIndex"),
)
if mibBuilder.loadTexts:
    emsOutputRelayConfigEntry.setStatus("mandatory")
_EmsOutputRelayConfigOutputRelayIndex_Type = Integer32
_EmsOutputRelayConfigOutputRelayIndex_Object = MibTableColumn
emsOutputRelayConfigOutputRelayIndex = _EmsOutputRelayConfigOutputRelayIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 1),
    _EmsOutputRelayConfigOutputRelayIndex_Type()
)
emsOutputRelayConfigOutputRelayIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutputRelayConfigOutputRelayIndex.setStatus("mandatory")
_EmsOutputRelayConfigOutputRelayName_Type = DisplayString
_EmsOutputRelayConfigOutputRelayName_Object = MibTableColumn
emsOutputRelayConfigOutputRelayName = _EmsOutputRelayConfigOutputRelayName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 2),
    _EmsOutputRelayConfigOutputRelayName_Type()
)
emsOutputRelayConfigOutputRelayName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsOutputRelayConfigOutputRelayName.setStatus("mandatory")


class _EmsOutputRelayConfigOutputRelayNormalState_Type(Integer32):
    """Custom type emsOutputRelayConfigOutputRelayNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normallyClosedEMS", 1),
          ("normallyOpenEMS", 2))
    )


_EmsOutputRelayConfigOutputRelayNormalState_Type.__name__ = "Integer32"
_EmsOutputRelayConfigOutputRelayNormalState_Object = MibTableColumn
emsOutputRelayConfigOutputRelayNormalState = _EmsOutputRelayConfigOutputRelayNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 9, 1, 1, 3),
    _EmsOutputRelayConfigOutputRelayNormalState_Type()
)
emsOutputRelayConfigOutputRelayNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsOutputRelayConfigOutputRelayNormalState.setStatus("mandatory")
_EmsOutletConfig_ObjectIdentity = ObjectIdentity
emsOutletConfig = _EmsOutletConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10)
)
_EmsOutletConfigTable_Object = MibTable
emsOutletConfigTable = _EmsOutletConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1)
)
if mibBuilder.loadTexts:
    emsOutletConfigTable.setStatus("mandatory")
_EmsOutletConfigEntry_Object = MibTableRow
emsOutletConfigEntry = _EmsOutletConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1)
)
emsOutletConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsOutletConfigOutletIndex"),
)
if mibBuilder.loadTexts:
    emsOutletConfigEntry.setStatus("mandatory")
_EmsOutletConfigOutletIndex_Type = Integer32
_EmsOutletConfigOutletIndex_Object = MibTableColumn
emsOutletConfigOutletIndex = _EmsOutletConfigOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 1),
    _EmsOutletConfigOutletIndex_Type()
)
emsOutletConfigOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutletConfigOutletIndex.setStatus("mandatory")
_EmsOutletConfigOutletName_Type = DisplayString
_EmsOutletConfigOutletName_Object = MibTableColumn
emsOutletConfigOutletName = _EmsOutletConfigOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 2),
    _EmsOutletConfigOutletName_Type()
)
emsOutletConfigOutletName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsOutletConfigOutletName.setStatus("mandatory")


class _EmsOutletConfigOutletNormalState_Type(Integer32):
    """Custom type emsOutletConfigOutletNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normallyOffEMS", 2),
          ("normallyOnEMS", 1))
    )


_EmsOutletConfigOutletNormalState_Type.__name__ = "Integer32"
_EmsOutletConfigOutletNormalState_Object = MibTableColumn
emsOutletConfigOutletNormalState = _EmsOutletConfigOutletNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 10, 1, 1, 3),
    _EmsOutletConfigOutletNormalState_Type()
)
emsOutletConfigOutletNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsOutletConfigOutletNormalState.setStatus("mandatory")
_EmsSensorConfig_ObjectIdentity = ObjectIdentity
emsSensorConfig = _EmsSensorConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11)
)
_EmsSensorConfigTable_Object = MibTable
emsSensorConfigTable = _EmsSensorConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1)
)
if mibBuilder.loadTexts:
    emsSensorConfigTable.setStatus("mandatory")
_EmsSensorConfigEntry_Object = MibTableRow
emsSensorConfigEntry = _EmsSensorConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1)
)
emsSensorConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsSensorConfigSensorIndex"),
)
if mibBuilder.loadTexts:
    emsSensorConfigEntry.setStatus("mandatory")
_EmsSensorConfigSensorIndex_Type = Integer32
_EmsSensorConfigSensorIndex_Object = MibTableColumn
emsSensorConfigSensorIndex = _EmsSensorConfigSensorIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 1),
    _EmsSensorConfigSensorIndex_Type()
)
emsSensorConfigSensorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsSensorConfigSensorIndex.setStatus("mandatory")
_EmsSensorConfigSensorSystemName_Type = DisplayString
_EmsSensorConfigSensorSystemName_Object = MibTableColumn
emsSensorConfigSensorSystemName = _EmsSensorConfigSensorSystemName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 2),
    _EmsSensorConfigSensorSystemName_Type()
)
emsSensorConfigSensorSystemName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsSensorConfigSensorSystemName.setStatus("mandatory")
_EmsSensorConfigSensorUserName_Type = DisplayString
_EmsSensorConfigSensorUserName_Object = MibTableColumn
emsSensorConfigSensorUserName = _EmsSensorConfigSensorUserName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 3),
    _EmsSensorConfigSensorUserName_Type()
)
emsSensorConfigSensorUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsSensorConfigSensorUserName.setStatus("mandatory")


class _EmsSensorConfigSensorNormalState_Type(Integer32):
    """Custom type emsSensorConfigSensorNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normallyClosedEMS", 1),
          ("normallyOpenEMS", 2))
    )


_EmsSensorConfigSensorNormalState_Type.__name__ = "Integer32"
_EmsSensorConfigSensorNormalState_Object = MibTableColumn
emsSensorConfigSensorNormalState = _EmsSensorConfigSensorNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 4),
    _EmsSensorConfigSensorNormalState_Type()
)
emsSensorConfigSensorNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsSensorConfigSensorNormalState.setStatus("mandatory")
_EmsSensorConfigSensorAlarmDelay_Type = Integer32
_EmsSensorConfigSensorAlarmDelay_Object = MibTableColumn
emsSensorConfigSensorAlarmDelay = _EmsSensorConfigSensorAlarmDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 11, 1, 1, 5),
    _EmsSensorConfigSensorAlarmDelay_Type()
)
emsSensorConfigSensorAlarmDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    emsSensorConfigSensorAlarmDelay.setStatus("mandatory")
_EmsStatus_ObjectIdentity = ObjectIdentity
emsStatus = _EmsStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12)
)
_EmsStatusEMSName_Type = DisplayString
_EmsStatusEMSName_Object = MibScalar
emsStatusEMSName = _EmsStatusEMSName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 1),
    _EmsStatusEMSName_Type()
)
emsStatusEMSName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusEMSName.setStatus("mandatory")


class _EmsStatusCommStatus_Type(Integer32):
    """Custom type emsStatusCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("comm", 2),
          ("commLost", 3),
          ("noComm", 1))
    )


_EmsStatusCommStatus_Type.__name__ = "Integer32"
_EmsStatusCommStatus_Object = MibScalar
emsStatusCommStatus = _EmsStatusCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 2),
    _EmsStatusCommStatus_Type()
)
emsStatusCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusCommStatus.setStatus("mandatory")
_EmsStatusProbeCount_Type = Integer32
_EmsStatusProbeCount_Object = MibScalar
emsStatusProbeCount = _EmsStatusProbeCount_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 3),
    _EmsStatusProbeCount_Type()
)
emsStatusProbeCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusProbeCount.setStatus("mandatory")
_EmsStatusInputContactCount_Type = Integer32
_EmsStatusInputContactCount_Object = MibScalar
emsStatusInputContactCount = _EmsStatusInputContactCount_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 4),
    _EmsStatusInputContactCount_Type()
)
emsStatusInputContactCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusInputContactCount.setStatus("mandatory")
_EmsStatusOutputRelayCount_Type = Integer32
_EmsStatusOutputRelayCount_Object = MibScalar
emsStatusOutputRelayCount = _EmsStatusOutputRelayCount_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 5),
    _EmsStatusOutputRelayCount_Type()
)
emsStatusOutputRelayCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusOutputRelayCount.setStatus("mandatory")
_EmsStatusOutletCount_Type = Integer32
_EmsStatusOutletCount_Object = MibScalar
emsStatusOutletCount = _EmsStatusOutletCount_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 6),
    _EmsStatusOutletCount_Type()
)
emsStatusOutletCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusOutletCount.setStatus("mandatory")
_EmsStatusSensorCount_Type = Integer32
_EmsStatusSensorCount_Object = MibScalar
emsStatusSensorCount = _EmsStatusSensorCount_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 7),
    _EmsStatusSensorCount_Type()
)
emsStatusSensorCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusSensorCount.setStatus("mandatory")
_EmsStatusAlinkAruDeviceCount_Type = Integer32
_EmsStatusAlinkAruDeviceCount_Object = MibScalar
emsStatusAlinkAruDeviceCount = _EmsStatusAlinkAruDeviceCount_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 8),
    _EmsStatusAlinkAruDeviceCount_Type()
)
emsStatusAlinkAruDeviceCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusAlinkAruDeviceCount.setStatus("mandatory")
_EmsStatusAlinkProbeDeviceCount_Type = Integer32
_EmsStatusAlinkProbeDeviceCount_Object = MibScalar
emsStatusAlinkProbeDeviceCount = _EmsStatusAlinkProbeDeviceCount_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 9),
    _EmsStatusAlinkProbeDeviceCount_Type()
)
emsStatusAlinkProbeDeviceCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusAlinkProbeDeviceCount.setStatus("mandatory")
_EmsStatusAlarmDeviceCount_Type = Integer32
_EmsStatusAlarmDeviceCount_Object = MibScalar
emsStatusAlarmDeviceCount = _EmsStatusAlarmDeviceCount_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 10),
    _EmsStatusAlarmDeviceCount_Type()
)
emsStatusAlarmDeviceCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusAlarmDeviceCount.setStatus("mandatory")


class _EmsStatusSysTempUnits_Type(Integer32):
    """Custom type emsStatusSysTempUnits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("celsius", 1),
          ("fahrenheit", 2))
    )


_EmsStatusSysTempUnits_Type.__name__ = "Integer32"
_EmsStatusSysTempUnits_Object = MibScalar
emsStatusSysTempUnits = _EmsStatusSysTempUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 11),
    _EmsStatusSysTempUnits_Type()
)
emsStatusSysTempUnits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusSysTempUnits.setStatus("mandatory")


class _EmsStatusCheckLogLight_Type(Integer32):
    """Custom type emsStatusCheckLogLight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("lightOff", 1),
          ("lightOn", 2))
    )


_EmsStatusCheckLogLight_Type.__name__ = "Integer32"
_EmsStatusCheckLogLight_Object = MibScalar
emsStatusCheckLogLight = _EmsStatusCheckLogLight_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 12),
    _EmsStatusCheckLogLight_Type()
)
emsStatusCheckLogLight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusCheckLogLight.setStatus("mandatory")
_EmsStatusHardwareStatus_Type = Integer32
_EmsStatusHardwareStatus_Object = MibScalar
emsStatusHardwareStatus = _EmsStatusHardwareStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 12, 13),
    _EmsStatusHardwareStatus_Type()
)
emsStatusHardwareStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsStatusHardwareStatus.setStatus("mandatory")
_EmsProbeStatus_ObjectIdentity = ObjectIdentity
emsProbeStatus = _EmsProbeStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13)
)
_EmsProbeStatusTable_Object = MibTable
emsProbeStatusTable = _EmsProbeStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1)
)
if mibBuilder.loadTexts:
    emsProbeStatusTable.setStatus("mandatory")
_EmsProbeStatusEntry_Object = MibTableRow
emsProbeStatusEntry = _EmsProbeStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1)
)
emsProbeStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsProbeStatusProbeIndex"),
)
if mibBuilder.loadTexts:
    emsProbeStatusEntry.setStatus("mandatory")
_EmsProbeStatusProbeIndex_Type = Integer32
_EmsProbeStatusProbeIndex_Object = MibTableColumn
emsProbeStatusProbeIndex = _EmsProbeStatusProbeIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 1),
    _EmsProbeStatusProbeIndex_Type()
)
emsProbeStatusProbeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeIndex.setStatus("mandatory")
_EmsProbeStatusProbeName_Type = DisplayString
_EmsProbeStatusProbeName_Object = MibTableColumn
emsProbeStatusProbeName = _EmsProbeStatusProbeName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 2),
    _EmsProbeStatusProbeName_Type()
)
emsProbeStatusProbeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeName.setStatus("mandatory")
_EmsProbeStatusProbeTemperature_Type = Integer32
_EmsProbeStatusProbeTemperature_Object = MibTableColumn
emsProbeStatusProbeTemperature = _EmsProbeStatusProbeTemperature_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 3),
    _EmsProbeStatusProbeTemperature_Type()
)
emsProbeStatusProbeTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeTemperature.setStatus("mandatory")
_EmsProbeStatusProbeHighTempThresh_Type = Integer32
_EmsProbeStatusProbeHighTempThresh_Object = MibTableColumn
emsProbeStatusProbeHighTempThresh = _EmsProbeStatusProbeHighTempThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 4),
    _EmsProbeStatusProbeHighTempThresh_Type()
)
emsProbeStatusProbeHighTempThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeHighTempThresh.setStatus("mandatory")
_EmsProbeStatusProbeLowTempThresh_Type = Integer32
_EmsProbeStatusProbeLowTempThresh_Object = MibTableColumn
emsProbeStatusProbeLowTempThresh = _EmsProbeStatusProbeLowTempThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 5),
    _EmsProbeStatusProbeLowTempThresh_Type()
)
emsProbeStatusProbeLowTempThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeLowTempThresh.setStatus("mandatory")
_EmsProbeStatusProbeHumidity_Type = Integer32
_EmsProbeStatusProbeHumidity_Object = MibTableColumn
emsProbeStatusProbeHumidity = _EmsProbeStatusProbeHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 6),
    _EmsProbeStatusProbeHumidity_Type()
)
emsProbeStatusProbeHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeHumidity.setStatus("mandatory")
_EmsProbeStatusProbeHighHumidityThresh_Type = Integer32
_EmsProbeStatusProbeHighHumidityThresh_Object = MibTableColumn
emsProbeStatusProbeHighHumidityThresh = _EmsProbeStatusProbeHighHumidityThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 7),
    _EmsProbeStatusProbeHighHumidityThresh_Type()
)
emsProbeStatusProbeHighHumidityThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeHighHumidityThresh.setStatus("mandatory")
_EmsProbeStatusProbeLowHumidityThresh_Type = Integer32
_EmsProbeStatusProbeLowHumidityThresh_Object = MibTableColumn
emsProbeStatusProbeLowHumidityThresh = _EmsProbeStatusProbeLowHumidityThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 8),
    _EmsProbeStatusProbeLowHumidityThresh_Type()
)
emsProbeStatusProbeLowHumidityThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeLowHumidityThresh.setStatus("mandatory")
_EmsProbeStatusProbeSerialNumber_Type = DisplayString
_EmsProbeStatusProbeSerialNumber_Object = MibTableColumn
emsProbeStatusProbeSerialNumber = _EmsProbeStatusProbeSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 9),
    _EmsProbeStatusProbeSerialNumber_Type()
)
emsProbeStatusProbeSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeSerialNumber.setStatus("mandatory")


class _EmsProbeStatusProbeCommStatus_Type(Integer32):
    """Custom type emsProbeStatusProbeCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("commsEstablished", 2),
          ("commsLost", 3),
          ("commsNeverDiscovered", 1))
    )


_EmsProbeStatusProbeCommStatus_Type.__name__ = "Integer32"
_EmsProbeStatusProbeCommStatus_Object = MibTableColumn
emsProbeStatusProbeCommStatus = _EmsProbeStatusProbeCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 10),
    _EmsProbeStatusProbeCommStatus_Type()
)
emsProbeStatusProbeCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeCommStatus.setStatus("mandatory")
_EmsProbeStatusProbeAlarmStatus_Type = Integer32
_EmsProbeStatusProbeAlarmStatus_Object = MibTableColumn
emsProbeStatusProbeAlarmStatus = _EmsProbeStatusProbeAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 11),
    _EmsProbeStatusProbeAlarmStatus_Type()
)
emsProbeStatusProbeAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeAlarmStatus.setStatus("mandatory")
_EmsProbeStatusProbeMaxTempThresh_Type = Integer32
_EmsProbeStatusProbeMaxTempThresh_Object = MibTableColumn
emsProbeStatusProbeMaxTempThresh = _EmsProbeStatusProbeMaxTempThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 12),
    _EmsProbeStatusProbeMaxTempThresh_Type()
)
emsProbeStatusProbeMaxTempThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeMaxTempThresh.setStatus("mandatory")
_EmsProbeStatusProbeMinTempThresh_Type = Integer32
_EmsProbeStatusProbeMinTempThresh_Object = MibTableColumn
emsProbeStatusProbeMinTempThresh = _EmsProbeStatusProbeMinTempThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 13),
    _EmsProbeStatusProbeMinTempThresh_Type()
)
emsProbeStatusProbeMinTempThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeMinTempThresh.setStatus("mandatory")
_EmsProbeStatusProbeMaxHumidityThresh_Type = Integer32
_EmsProbeStatusProbeMaxHumidityThresh_Object = MibTableColumn
emsProbeStatusProbeMaxHumidityThresh = _EmsProbeStatusProbeMaxHumidityThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 14),
    _EmsProbeStatusProbeMaxHumidityThresh_Type()
)
emsProbeStatusProbeMaxHumidityThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeMaxHumidityThresh.setStatus("mandatory")
_EmsProbeStatusProbeMinHumidityThresh_Type = Integer32
_EmsProbeStatusProbeMinHumidityThresh_Object = MibTableColumn
emsProbeStatusProbeMinHumidityThresh = _EmsProbeStatusProbeMinHumidityThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 13, 1, 1, 15),
    _EmsProbeStatusProbeMinHumidityThresh_Type()
)
emsProbeStatusProbeMinHumidityThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsProbeStatusProbeMinHumidityThresh.setStatus("mandatory")
_EmsInputContactStatus_ObjectIdentity = ObjectIdentity
emsInputContactStatus = _EmsInputContactStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14)
)
_EmsInputContactStatusTable_Object = MibTable
emsInputContactStatusTable = _EmsInputContactStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1)
)
if mibBuilder.loadTexts:
    emsInputContactStatusTable.setStatus("mandatory")
_EmsInputContactStatusEntry_Object = MibTableRow
emsInputContactStatusEntry = _EmsInputContactStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1)
)
emsInputContactStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsInputContactStatusInputContactIndex"),
)
if mibBuilder.loadTexts:
    emsInputContactStatusEntry.setStatus("mandatory")
_EmsInputContactStatusInputContactIndex_Type = Integer32
_EmsInputContactStatusInputContactIndex_Object = MibTableColumn
emsInputContactStatusInputContactIndex = _EmsInputContactStatusInputContactIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 1),
    _EmsInputContactStatusInputContactIndex_Type()
)
emsInputContactStatusInputContactIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsInputContactStatusInputContactIndex.setStatus("mandatory")
_EmsInputContactStatusInputContactName_Type = DisplayString
_EmsInputContactStatusInputContactName_Object = MibTableColumn
emsInputContactStatusInputContactName = _EmsInputContactStatusInputContactName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 2),
    _EmsInputContactStatusInputContactName_Type()
)
emsInputContactStatusInputContactName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsInputContactStatusInputContactName.setStatus("mandatory")


class _EmsInputContactStatusInputContactState_Type(Integer32):
    """Custom type emsInputContactStatusInputContactState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("contactClosedEMS", 1),
          ("contactOpenEMS", 2))
    )


_EmsInputContactStatusInputContactState_Type.__name__ = "Integer32"
_EmsInputContactStatusInputContactState_Object = MibTableColumn
emsInputContactStatusInputContactState = _EmsInputContactStatusInputContactState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 3),
    _EmsInputContactStatusInputContactState_Type()
)
emsInputContactStatusInputContactState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsInputContactStatusInputContactState.setStatus("mandatory")


class _EmsInputContactStatusInputContactNormalState_Type(Integer32):
    """Custom type emsInputContactStatusInputContactNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normallyClosedEMS", 1),
          ("normallyOpenEMS", 2))
    )


_EmsInputContactStatusInputContactNormalState_Type.__name__ = "Integer32"
_EmsInputContactStatusInputContactNormalState_Object = MibTableColumn
emsInputContactStatusInputContactNormalState = _EmsInputContactStatusInputContactNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 14, 1, 1, 4),
    _EmsInputContactStatusInputContactNormalState_Type()
)
emsInputContactStatusInputContactNormalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsInputContactStatusInputContactNormalState.setStatus("mandatory")
_EmsOutputRelayStatus_ObjectIdentity = ObjectIdentity
emsOutputRelayStatus = _EmsOutputRelayStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15)
)
_EmsOutputRelayStatusTable_Object = MibTable
emsOutputRelayStatusTable = _EmsOutputRelayStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1)
)
if mibBuilder.loadTexts:
    emsOutputRelayStatusTable.setStatus("mandatory")
_EmsOutputRelayStatusEntry_Object = MibTableRow
emsOutputRelayStatusEntry = _EmsOutputRelayStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1)
)
emsOutputRelayStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsOutputRelayStatusOutputRelayIndex"),
)
if mibBuilder.loadTexts:
    emsOutputRelayStatusEntry.setStatus("mandatory")
_EmsOutputRelayStatusOutputRelayIndex_Type = Integer32
_EmsOutputRelayStatusOutputRelayIndex_Object = MibTableColumn
emsOutputRelayStatusOutputRelayIndex = _EmsOutputRelayStatusOutputRelayIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 1),
    _EmsOutputRelayStatusOutputRelayIndex_Type()
)
emsOutputRelayStatusOutputRelayIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutputRelayStatusOutputRelayIndex.setStatus("mandatory")
_EmsOutputRelayStatusOutputRelayName_Type = DisplayString
_EmsOutputRelayStatusOutputRelayName_Object = MibTableColumn
emsOutputRelayStatusOutputRelayName = _EmsOutputRelayStatusOutputRelayName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 2),
    _EmsOutputRelayStatusOutputRelayName_Type()
)
emsOutputRelayStatusOutputRelayName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutputRelayStatusOutputRelayName.setStatus("mandatory")


class _EmsOutputRelayStatusOutputRelayState_Type(Integer32):
    """Custom type emsOutputRelayStatusOutputRelayState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("relayClosedEMS", 1),
          ("relayOpenEMS", 2))
    )


_EmsOutputRelayStatusOutputRelayState_Type.__name__ = "Integer32"
_EmsOutputRelayStatusOutputRelayState_Object = MibTableColumn
emsOutputRelayStatusOutputRelayState = _EmsOutputRelayStatusOutputRelayState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 3),
    _EmsOutputRelayStatusOutputRelayState_Type()
)
emsOutputRelayStatusOutputRelayState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutputRelayStatusOutputRelayState.setStatus("mandatory")


class _EmsOutputRelayStatusOutputRelayNormalState_Type(Integer32):
    """Custom type emsOutputRelayStatusOutputRelayNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normallyClosedEMS", 1),
          ("normallyOpenEMS", 2))
    )


_EmsOutputRelayStatusOutputRelayNormalState_Type.__name__ = "Integer32"
_EmsOutputRelayStatusOutputRelayNormalState_Object = MibTableColumn
emsOutputRelayStatusOutputRelayNormalState = _EmsOutputRelayStatusOutputRelayNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 15, 1, 1, 4),
    _EmsOutputRelayStatusOutputRelayNormalState_Type()
)
emsOutputRelayStatusOutputRelayNormalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutputRelayStatusOutputRelayNormalState.setStatus("mandatory")
_EmsOutletStatus_ObjectIdentity = ObjectIdentity
emsOutletStatus = _EmsOutletStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16)
)
_EmsOutletStatusTable_Object = MibTable
emsOutletStatusTable = _EmsOutletStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1)
)
if mibBuilder.loadTexts:
    emsOutletStatusTable.setStatus("mandatory")
_EmsOutletStatusEntry_Object = MibTableRow
emsOutletStatusEntry = _EmsOutletStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1)
)
emsOutletStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsOutletStatusOutletIndex"),
)
if mibBuilder.loadTexts:
    emsOutletStatusEntry.setStatus("mandatory")
_EmsOutletStatusOutletIndex_Type = Integer32
_EmsOutletStatusOutletIndex_Object = MibTableColumn
emsOutletStatusOutletIndex = _EmsOutletStatusOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 1),
    _EmsOutletStatusOutletIndex_Type()
)
emsOutletStatusOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutletStatusOutletIndex.setStatus("mandatory")
_EmsOutletStatusOutletName_Type = DisplayString
_EmsOutletStatusOutletName_Object = MibTableColumn
emsOutletStatusOutletName = _EmsOutletStatusOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 2),
    _EmsOutletStatusOutletName_Type()
)
emsOutletStatusOutletName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutletStatusOutletName.setStatus("mandatory")


class _EmsOutletStatusOutletState_Type(Integer32):
    """Custom type emsOutletStatusOutletState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("outletOffEMS", 2),
          ("outletOnEMS", 1))
    )


_EmsOutletStatusOutletState_Type.__name__ = "Integer32"
_EmsOutletStatusOutletState_Object = MibTableColumn
emsOutletStatusOutletState = _EmsOutletStatusOutletState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 3),
    _EmsOutletStatusOutletState_Type()
)
emsOutletStatusOutletState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutletStatusOutletState.setStatus("mandatory")


class _EmsOutletStatusOutletNormalState_Type(Integer32):
    """Custom type emsOutletStatusOutletNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normallyOffEMS", 2),
          ("normallyOnEMS", 1))
    )


_EmsOutletStatusOutletNormalState_Type.__name__ = "Integer32"
_EmsOutletStatusOutletNormalState_Object = MibTableColumn
emsOutletStatusOutletNormalState = _EmsOutletStatusOutletNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 16, 1, 1, 4),
    _EmsOutletStatusOutletNormalState_Type()
)
emsOutletStatusOutletNormalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsOutletStatusOutletNormalState.setStatus("mandatory")
_EmsAlarmDeviceStatus_ObjectIdentity = ObjectIdentity
emsAlarmDeviceStatus = _EmsAlarmDeviceStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17)
)
_EmsAlarmDeviceStatusTable_Object = MibTable
emsAlarmDeviceStatusTable = _EmsAlarmDeviceStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1)
)
if mibBuilder.loadTexts:
    emsAlarmDeviceStatusTable.setStatus("mandatory")
_EmsAlarmDeviceStatusEntry_Object = MibTableRow
emsAlarmDeviceStatusEntry = _EmsAlarmDeviceStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1)
)
emsAlarmDeviceStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsAlarmDeviceStatusDeviceIndex"),
)
if mibBuilder.loadTexts:
    emsAlarmDeviceStatusEntry.setStatus("mandatory")
_EmsAlarmDeviceStatusDeviceIndex_Type = Integer32
_EmsAlarmDeviceStatusDeviceIndex_Object = MibTableColumn
emsAlarmDeviceStatusDeviceIndex = _EmsAlarmDeviceStatusDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 1),
    _EmsAlarmDeviceStatusDeviceIndex_Type()
)
emsAlarmDeviceStatusDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsAlarmDeviceStatusDeviceIndex.setStatus("mandatory")
_EmsAlarmDeviceStatusDeviceName_Type = DisplayString
_EmsAlarmDeviceStatusDeviceName_Object = MibTableColumn
emsAlarmDeviceStatusDeviceName = _EmsAlarmDeviceStatusDeviceName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 2),
    _EmsAlarmDeviceStatusDeviceName_Type()
)
emsAlarmDeviceStatusDeviceName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsAlarmDeviceStatusDeviceName.setStatus("mandatory")


class _EmsAlarmDeviceStatusDeviceState_Type(Integer32):
    """Custom type emsAlarmDeviceStatusDeviceState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("alarmDeviceNotInstalledEMS", 3),
          ("alarmDeviceOffEMS", 2),
          ("alarmDeviceOnEMS", 1))
    )


_EmsAlarmDeviceStatusDeviceState_Type.__name__ = "Integer32"
_EmsAlarmDeviceStatusDeviceState_Object = MibTableColumn
emsAlarmDeviceStatusDeviceState = _EmsAlarmDeviceStatusDeviceState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 17, 1, 1, 3),
    _EmsAlarmDeviceStatusDeviceState_Type()
)
emsAlarmDeviceStatusDeviceState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsAlarmDeviceStatusDeviceState.setStatus("mandatory")
_EmsSensorStatus_ObjectIdentity = ObjectIdentity
emsSensorStatus = _EmsSensorStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18)
)
_EmsSensorStatusTable_Object = MibTable
emsSensorStatusTable = _EmsSensorStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1)
)
if mibBuilder.loadTexts:
    emsSensorStatusTable.setStatus("mandatory")
_EmsSensorStatusEntry_Object = MibTableRow
emsSensorStatusEntry = _EmsSensorStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1)
)
emsSensorStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "emsSensorStatusSensorIndex"),
)
if mibBuilder.loadTexts:
    emsSensorStatusEntry.setStatus("mandatory")
_EmsSensorStatusSensorIndex_Type = Integer32
_EmsSensorStatusSensorIndex_Object = MibTableColumn
emsSensorStatusSensorIndex = _EmsSensorStatusSensorIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 1),
    _EmsSensorStatusSensorIndex_Type()
)
emsSensorStatusSensorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsSensorStatusSensorIndex.setStatus("mandatory")
_EmsSensorStatusSensorSystemName_Type = DisplayString
_EmsSensorStatusSensorSystemName_Object = MibTableColumn
emsSensorStatusSensorSystemName = _EmsSensorStatusSensorSystemName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 2),
    _EmsSensorStatusSensorSystemName_Type()
)
emsSensorStatusSensorSystemName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsSensorStatusSensorSystemName.setStatus("mandatory")
_EmsSensorStatusSensorName_Type = DisplayString
_EmsSensorStatusSensorName_Object = MibTableColumn
emsSensorStatusSensorName = _EmsSensorStatusSensorName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 3),
    _EmsSensorStatusSensorName_Type()
)
emsSensorStatusSensorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsSensorStatusSensorName.setStatus("mandatory")


class _EmsSensorStatusSensorState_Type(Integer32):
    """Custom type emsSensorStatusSensorState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("sensorFaultedEMS", 1),
          ("sensorNotInstalledEMS", 3),
          ("sensorOKEMS", 2))
    )


_EmsSensorStatusSensorState_Type.__name__ = "Integer32"
_EmsSensorStatusSensorState_Object = MibTableColumn
emsSensorStatusSensorState = _EmsSensorStatusSensorState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 4),
    _EmsSensorStatusSensorState_Type()
)
emsSensorStatusSensorState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsSensorStatusSensorState.setStatus("mandatory")


class _EmsSensorStatusSensorNormalState_Type(Integer32):
    """Custom type emsSensorStatusSensorNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normallyClosedEMS", 1),
          ("normallyOpenEMS", 2))
    )


_EmsSensorStatusSensorNormalState_Type.__name__ = "Integer32"
_EmsSensorStatusSensorNormalState_Object = MibTableColumn
emsSensorStatusSensorNormalState = _EmsSensorStatusSensorNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 5),
    _EmsSensorStatusSensorNormalState_Type()
)
emsSensorStatusSensorNormalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsSensorStatusSensorNormalState.setStatus("mandatory")
_EmsSensorStatusSensorAlarmDelay_Type = Integer32
_EmsSensorStatusSensorAlarmDelay_Object = MibTableColumn
emsSensorStatusSensorAlarmDelay = _EmsSensorStatusSensorAlarmDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 3, 18, 1, 1, 6),
    _EmsSensorStatusSensorAlarmDelay_Type()
)
emsSensorStatusSensorAlarmDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    emsSensorStatusSensorAlarmDelay.setStatus("mandatory")
_ModEnvMgr_ObjectIdentity = ObjectIdentity
modEnvMgr = _ModEnvMgr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4)
)
_MemModules_ObjectIdentity = ObjectIdentity
memModules = _MemModules_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1)
)
_MemModulesStatusTableSize_Type = Integer32
_MemModulesStatusTableSize_Object = MibScalar
memModulesStatusTableSize = _MemModulesStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 1),
    _MemModulesStatusTableSize_Type()
)
memModulesStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memModulesStatusTableSize.setStatus("mandatory")
_MemModulesStatusTable_Object = MibTable
memModulesStatusTable = _MemModulesStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2)
)
if mibBuilder.loadTexts:
    memModulesStatusTable.setStatus("mandatory")
_MemModulesStatusEntry_Object = MibTableRow
memModulesStatusEntry = _MemModulesStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1)
)
memModulesStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "memModulesStatusModuleNumber"),
)
if mibBuilder.loadTexts:
    memModulesStatusEntry.setStatus("mandatory")
_MemModulesStatusModuleNumber_Type = Integer32
_MemModulesStatusModuleNumber_Object = MibTableColumn
memModulesStatusModuleNumber = _MemModulesStatusModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 1),
    _MemModulesStatusModuleNumber_Type()
)
memModulesStatusModuleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memModulesStatusModuleNumber.setStatus("mandatory")
_MemModulesStatusModuleName_Type = DisplayString
_MemModulesStatusModuleName_Object = MibTableColumn
memModulesStatusModuleName = _MemModulesStatusModuleName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 2),
    _MemModulesStatusModuleName_Type()
)
memModulesStatusModuleName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memModulesStatusModuleName.setStatus("mandatory")
_MemModulesStatusModuleLocation_Type = DisplayString
_MemModulesStatusModuleLocation_Object = MibTableColumn
memModulesStatusModuleLocation = _MemModulesStatusModuleLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 3),
    _MemModulesStatusModuleLocation_Type()
)
memModulesStatusModuleLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memModulesStatusModuleLocation.setStatus("mandatory")
_MemModulesStatusModelNumber_Type = DisplayString
_MemModulesStatusModelNumber_Object = MibTableColumn
memModulesStatusModelNumber = _MemModulesStatusModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 4),
    _MemModulesStatusModelNumber_Type()
)
memModulesStatusModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memModulesStatusModelNumber.setStatus("mandatory")
_MemModulesStatusSerialNumber_Type = DisplayString
_MemModulesStatusSerialNumber_Object = MibTableColumn
memModulesStatusSerialNumber = _MemModulesStatusSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 5),
    _MemModulesStatusSerialNumber_Type()
)
memModulesStatusSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memModulesStatusSerialNumber.setStatus("mandatory")
_MemModulesStatusFirmwareRev_Type = DisplayString
_MemModulesStatusFirmwareRev_Object = MibTableColumn
memModulesStatusFirmwareRev = _MemModulesStatusFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 6),
    _MemModulesStatusFirmwareRev_Type()
)
memModulesStatusFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memModulesStatusFirmwareRev.setStatus("mandatory")
_MemModulesStatusHardwareRev_Type = DisplayString
_MemModulesStatusHardwareRev_Object = MibTableColumn
memModulesStatusHardwareRev = _MemModulesStatusHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 2, 1, 7),
    _MemModulesStatusHardwareRev_Type()
)
memModulesStatusHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memModulesStatusHardwareRev.setStatus("mandatory")
_MemModulesConfigTableSize_Type = Integer32
_MemModulesConfigTableSize_Object = MibScalar
memModulesConfigTableSize = _MemModulesConfigTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 3),
    _MemModulesConfigTableSize_Type()
)
memModulesConfigTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memModulesConfigTableSize.setStatus("mandatory")
_MemModulesConfigTable_Object = MibTable
memModulesConfigTable = _MemModulesConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4)
)
if mibBuilder.loadTexts:
    memModulesConfigTable.setStatus("mandatory")
_MemModulesConfigEntry_Object = MibTableRow
memModulesConfigEntry = _MemModulesConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1)
)
memModulesConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "memModulesConfigModuleNumber"),
)
if mibBuilder.loadTexts:
    memModulesConfigEntry.setStatus("mandatory")
_MemModulesConfigModuleNumber_Type = Integer32
_MemModulesConfigModuleNumber_Object = MibTableColumn
memModulesConfigModuleNumber = _MemModulesConfigModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 1),
    _MemModulesConfigModuleNumber_Type()
)
memModulesConfigModuleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memModulesConfigModuleNumber.setStatus("mandatory")
_MemModulesConfigModuleName_Type = DisplayString
_MemModulesConfigModuleName_Object = MibTableColumn
memModulesConfigModuleName = _MemModulesConfigModuleName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 2),
    _MemModulesConfigModuleName_Type()
)
memModulesConfigModuleName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memModulesConfigModuleName.setStatus("mandatory")
_MemModulesConfigModuleLocation_Type = DisplayString
_MemModulesConfigModuleLocation_Object = MibTableColumn
memModulesConfigModuleLocation = _MemModulesConfigModuleLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 1, 4, 1, 3),
    _MemModulesConfigModuleLocation_Type()
)
memModulesConfigModuleLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memModulesConfigModuleLocation.setStatus("mandatory")
_MemSensors_ObjectIdentity = ObjectIdentity
memSensors = _MemSensors_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2)
)


class _MemSensorsStatusSysTempUnits_Type(Integer32):
    """Custom type memSensorsStatusSysTempUnits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("celsius", 1),
          ("fahrenheit", 2))
    )


_MemSensorsStatusSysTempUnits_Type.__name__ = "Integer32"
_MemSensorsStatusSysTempUnits_Object = MibScalar
memSensorsStatusSysTempUnits = _MemSensorsStatusSysTempUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 1),
    _MemSensorsStatusSysTempUnits_Type()
)
memSensorsStatusSysTempUnits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsStatusSysTempUnits.setStatus("mandatory")
_MemSensorsStatusTableSize_Type = Integer32
_MemSensorsStatusTableSize_Object = MibScalar
memSensorsStatusTableSize = _MemSensorsStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 2),
    _MemSensorsStatusTableSize_Type()
)
memSensorsStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsStatusTableSize.setStatus("mandatory")
_MemSensorsStatusTable_Object = MibTable
memSensorsStatusTable = _MemSensorsStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3)
)
if mibBuilder.loadTexts:
    memSensorsStatusTable.setStatus("mandatory")
_MemSensorsStatusEntry_Object = MibTableRow
memSensorsStatusEntry = _MemSensorsStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1)
)
memSensorsStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "memSensorsStatusModuleNumber"),
    (0, "POWERNET-MIB", "memSensorsStatusSensorNumber"),
)
if mibBuilder.loadTexts:
    memSensorsStatusEntry.setStatus("mandatory")
_MemSensorsStatusModuleNumber_Type = Integer32
_MemSensorsStatusModuleNumber_Object = MibTableColumn
memSensorsStatusModuleNumber = _MemSensorsStatusModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 1),
    _MemSensorsStatusModuleNumber_Type()
)
memSensorsStatusModuleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsStatusModuleNumber.setStatus("mandatory")
_MemSensorsStatusSensorNumber_Type = Integer32
_MemSensorsStatusSensorNumber_Object = MibTableColumn
memSensorsStatusSensorNumber = _MemSensorsStatusSensorNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 2),
    _MemSensorsStatusSensorNumber_Type()
)
memSensorsStatusSensorNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsStatusSensorNumber.setStatus("mandatory")
_MemSensorsStatusSensorName_Type = DisplayString
_MemSensorsStatusSensorName_Object = MibTableColumn
memSensorsStatusSensorName = _MemSensorsStatusSensorName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 3),
    _MemSensorsStatusSensorName_Type()
)
memSensorsStatusSensorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsStatusSensorName.setStatus("mandatory")
_MemSensorsStatusSensorLocation_Type = DisplayString
_MemSensorsStatusSensorLocation_Object = MibTableColumn
memSensorsStatusSensorLocation = _MemSensorsStatusSensorLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 4),
    _MemSensorsStatusSensorLocation_Type()
)
memSensorsStatusSensorLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsStatusSensorLocation.setStatus("mandatory")
_MemSensorsTemperature_Type = Integer32
_MemSensorsTemperature_Object = MibTableColumn
memSensorsTemperature = _MemSensorsTemperature_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 5),
    _MemSensorsTemperature_Type()
)
memSensorsTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsTemperature.setStatus("mandatory")
_MemSensorsHumidity_Type = Integer32
_MemSensorsHumidity_Object = MibTableColumn
memSensorsHumidity = _MemSensorsHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 6),
    _MemSensorsHumidity_Type()
)
memSensorsHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsHumidity.setStatus("mandatory")


class _MemSensorsCommStatus_Type(Integer32):
    """Custom type memSensorsCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("commsLost", 3),
          ("commsOK", 2),
          ("notInstalled", 1))
    )


_MemSensorsCommStatus_Type.__name__ = "Integer32"
_MemSensorsCommStatus_Object = MibTableColumn
memSensorsCommStatus = _MemSensorsCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 7),
    _MemSensorsCommStatus_Type()
)
memSensorsCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsCommStatus.setStatus("mandatory")


class _MemSensorsAlarmStatus_Type(Integer32):
    """Custom type memSensorsAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("memCritical", 3),
          ("memNormal", 1),
          ("memWarning", 2))
    )


_MemSensorsAlarmStatus_Type.__name__ = "Integer32"
_MemSensorsAlarmStatus_Object = MibTableColumn
memSensorsAlarmStatus = _MemSensorsAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 3, 1, 8),
    _MemSensorsAlarmStatus_Type()
)
memSensorsAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsAlarmStatus.setStatus("mandatory")
_MemSensorsConfigTableSize_Type = Integer32
_MemSensorsConfigTableSize_Object = MibScalar
memSensorsConfigTableSize = _MemSensorsConfigTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 4),
    _MemSensorsConfigTableSize_Type()
)
memSensorsConfigTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsConfigTableSize.setStatus("mandatory")
_MemSensorsConfigTable_Object = MibTable
memSensorsConfigTable = _MemSensorsConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5)
)
if mibBuilder.loadTexts:
    memSensorsConfigTable.setStatus("mandatory")
_MemSensorsConfigEntry_Object = MibTableRow
memSensorsConfigEntry = _MemSensorsConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1)
)
memSensorsConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "memSensorsConfigModuleNumber"),
    (0, "POWERNET-MIB", "memSensorsConfigSensorNumber"),
)
if mibBuilder.loadTexts:
    memSensorsConfigEntry.setStatus("mandatory")
_MemSensorsConfigModuleNumber_Type = Integer32
_MemSensorsConfigModuleNumber_Object = MibTableColumn
memSensorsConfigModuleNumber = _MemSensorsConfigModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 1),
    _MemSensorsConfigModuleNumber_Type()
)
memSensorsConfigModuleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsConfigModuleNumber.setStatus("mandatory")
_MemSensorsConfigSensorNumber_Type = Integer32
_MemSensorsConfigSensorNumber_Object = MibTableColumn
memSensorsConfigSensorNumber = _MemSensorsConfigSensorNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 2),
    _MemSensorsConfigSensorNumber_Type()
)
memSensorsConfigSensorNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memSensorsConfigSensorNumber.setStatus("mandatory")
_MemSensorsName_Type = DisplayString
_MemSensorsName_Object = MibTableColumn
memSensorsName = _MemSensorsName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 3),
    _MemSensorsName_Type()
)
memSensorsName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsName.setStatus("mandatory")
_MemSensorsLocation_Type = DisplayString
_MemSensorsLocation_Object = MibTableColumn
memSensorsLocation = _MemSensorsLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 4),
    _MemSensorsLocation_Type()
)
memSensorsLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsLocation.setStatus("mandatory")


class _MemSensorsAlarmGeneration_Type(Integer32):
    """Custom type memSensorsAlarmGeneration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_MemSensorsAlarmGeneration_Type.__name__ = "Integer32"
_MemSensorsAlarmGeneration_Object = MibTableColumn
memSensorsAlarmGeneration = _MemSensorsAlarmGeneration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 5),
    _MemSensorsAlarmGeneration_Type()
)
memSensorsAlarmGeneration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsAlarmGeneration.setStatus("mandatory")
_MemSensorsTempMaxThresh_Type = Integer32
_MemSensorsTempMaxThresh_Object = MibTableColumn
memSensorsTempMaxThresh = _MemSensorsTempMaxThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 6),
    _MemSensorsTempMaxThresh_Type()
)
memSensorsTempMaxThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempMaxThresh.setStatus("mandatory")
_MemSensorsTempHighThresh_Type = Integer32
_MemSensorsTempHighThresh_Object = MibTableColumn
memSensorsTempHighThresh = _MemSensorsTempHighThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 7),
    _MemSensorsTempHighThresh_Type()
)
memSensorsTempHighThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempHighThresh.setStatus("mandatory")
_MemSensorsTempLowThresh_Type = Integer32
_MemSensorsTempLowThresh_Object = MibTableColumn
memSensorsTempLowThresh = _MemSensorsTempLowThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 8),
    _MemSensorsTempLowThresh_Type()
)
memSensorsTempLowThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempLowThresh.setStatus("mandatory")
_MemSensorsTempMinThresh_Type = Integer32
_MemSensorsTempMinThresh_Object = MibTableColumn
memSensorsTempMinThresh = _MemSensorsTempMinThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 9),
    _MemSensorsTempMinThresh_Type()
)
memSensorsTempMinThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempMinThresh.setStatus("mandatory")
_MemSensorsTempThreshHysteresis_Type = Integer32
_MemSensorsTempThreshHysteresis_Object = MibTableColumn
memSensorsTempThreshHysteresis = _MemSensorsTempThreshHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 10),
    _MemSensorsTempThreshHysteresis_Type()
)
memSensorsTempThreshHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempThreshHysteresis.setStatus("mandatory")
_MemSensorsTempShortDecRateThreshValue_Type = Integer32
_MemSensorsTempShortDecRateThreshValue_Object = MibTableColumn
memSensorsTempShortDecRateThreshValue = _MemSensorsTempShortDecRateThreshValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 11),
    _MemSensorsTempShortDecRateThreshValue_Type()
)
memSensorsTempShortDecRateThreshValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempShortDecRateThreshValue.setStatus("mandatory")
_MemSensorsTempShortDecRateThreshTime_Type = Integer32
_MemSensorsTempShortDecRateThreshTime_Object = MibTableColumn
memSensorsTempShortDecRateThreshTime = _MemSensorsTempShortDecRateThreshTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 12),
    _MemSensorsTempShortDecRateThreshTime_Type()
)
memSensorsTempShortDecRateThreshTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempShortDecRateThreshTime.setStatus("mandatory")
_MemSensorsTempShortIncRateThreshValue_Type = Integer32
_MemSensorsTempShortIncRateThreshValue_Object = MibTableColumn
memSensorsTempShortIncRateThreshValue = _MemSensorsTempShortIncRateThreshValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 13),
    _MemSensorsTempShortIncRateThreshValue_Type()
)
memSensorsTempShortIncRateThreshValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempShortIncRateThreshValue.setStatus("mandatory")
_MemSensorsTempShortIncRateThreshTime_Type = Integer32
_MemSensorsTempShortIncRateThreshTime_Object = MibTableColumn
memSensorsTempShortIncRateThreshTime = _MemSensorsTempShortIncRateThreshTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 14),
    _MemSensorsTempShortIncRateThreshTime_Type()
)
memSensorsTempShortIncRateThreshTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempShortIncRateThreshTime.setStatus("mandatory")
_MemSensorsTempLongDecRateThreshValue_Type = Integer32
_MemSensorsTempLongDecRateThreshValue_Object = MibTableColumn
memSensorsTempLongDecRateThreshValue = _MemSensorsTempLongDecRateThreshValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 15),
    _MemSensorsTempLongDecRateThreshValue_Type()
)
memSensorsTempLongDecRateThreshValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempLongDecRateThreshValue.setStatus("mandatory")
_MemSensorsTempLongDecRateThreshTime_Type = Integer32
_MemSensorsTempLongDecRateThreshTime_Object = MibTableColumn
memSensorsTempLongDecRateThreshTime = _MemSensorsTempLongDecRateThreshTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 16),
    _MemSensorsTempLongDecRateThreshTime_Type()
)
memSensorsTempLongDecRateThreshTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempLongDecRateThreshTime.setStatus("mandatory")
_MemSensorsTempLongIncRateThreshValue_Type = Integer32
_MemSensorsTempLongIncRateThreshValue_Object = MibTableColumn
memSensorsTempLongIncRateThreshValue = _MemSensorsTempLongIncRateThreshValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 17),
    _MemSensorsTempLongIncRateThreshValue_Type()
)
memSensorsTempLongIncRateThreshValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempLongIncRateThreshValue.setStatus("mandatory")
_MemSensorsTempLongIncRateThreshTime_Type = Integer32
_MemSensorsTempLongIncRateThreshTime_Object = MibTableColumn
memSensorsTempLongIncRateThreshTime = _MemSensorsTempLongIncRateThreshTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 18),
    _MemSensorsTempLongIncRateThreshTime_Type()
)
memSensorsTempLongIncRateThreshTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsTempLongIncRateThreshTime.setStatus("mandatory")
_MemSensorsHumidityMaxThresh_Type = Integer32
_MemSensorsHumidityMaxThresh_Object = MibTableColumn
memSensorsHumidityMaxThresh = _MemSensorsHumidityMaxThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 19),
    _MemSensorsHumidityMaxThresh_Type()
)
memSensorsHumidityMaxThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsHumidityMaxThresh.setStatus("mandatory")
_MemSensorsHumidityHighThresh_Type = Integer32
_MemSensorsHumidityHighThresh_Object = MibTableColumn
memSensorsHumidityHighThresh = _MemSensorsHumidityHighThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 20),
    _MemSensorsHumidityHighThresh_Type()
)
memSensorsHumidityHighThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsHumidityHighThresh.setStatus("mandatory")
_MemSensorsHumidityLowThresh_Type = Integer32
_MemSensorsHumidityLowThresh_Object = MibTableColumn
memSensorsHumidityLowThresh = _MemSensorsHumidityLowThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 21),
    _MemSensorsHumidityLowThresh_Type()
)
memSensorsHumidityLowThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsHumidityLowThresh.setStatus("mandatory")
_MemSensorsHumidityMinThresh_Type = Integer32
_MemSensorsHumidityMinThresh_Object = MibTableColumn
memSensorsHumidityMinThresh = _MemSensorsHumidityMinThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 22),
    _MemSensorsHumidityMinThresh_Type()
)
memSensorsHumidityMinThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsHumidityMinThresh.setStatus("mandatory")
_MemSensorsHumidityThreshHysteresis_Type = Integer32
_MemSensorsHumidityThreshHysteresis_Object = MibTableColumn
memSensorsHumidityThreshHysteresis = _MemSensorsHumidityThreshHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 2, 5, 1, 23),
    _MemSensorsHumidityThreshHysteresis_Type()
)
memSensorsHumidityThreshHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memSensorsHumidityThreshHysteresis.setStatus("mandatory")
_MemInputs_ObjectIdentity = ObjectIdentity
memInputs = _MemInputs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3)
)
_MemInputsStatusTableSize_Type = Integer32
_MemInputsStatusTableSize_Object = MibScalar
memInputsStatusTableSize = _MemInputsStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 1),
    _MemInputsStatusTableSize_Type()
)
memInputsStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memInputsStatusTableSize.setStatus("mandatory")
_MemInputsStatusTable_Object = MibTable
memInputsStatusTable = _MemInputsStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2)
)
if mibBuilder.loadTexts:
    memInputsStatusTable.setStatus("mandatory")
_MemInputsStatusEntry_Object = MibTableRow
memInputsStatusEntry = _MemInputsStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1)
)
memInputsStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "memInputsStatusModuleNumber"),
    (0, "POWERNET-MIB", "memInputsStatusInputNumber"),
)
if mibBuilder.loadTexts:
    memInputsStatusEntry.setStatus("mandatory")
_MemInputsStatusModuleNumber_Type = Integer32
_MemInputsStatusModuleNumber_Object = MibTableColumn
memInputsStatusModuleNumber = _MemInputsStatusModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 1),
    _MemInputsStatusModuleNumber_Type()
)
memInputsStatusModuleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memInputsStatusModuleNumber.setStatus("mandatory")
_MemInputsStatusInputNumber_Type = Integer32
_MemInputsStatusInputNumber_Object = MibTableColumn
memInputsStatusInputNumber = _MemInputsStatusInputNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 2),
    _MemInputsStatusInputNumber_Type()
)
memInputsStatusInputNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memInputsStatusInputNumber.setStatus("mandatory")
_MemInputsStatusInputName_Type = DisplayString
_MemInputsStatusInputName_Object = MibTableColumn
memInputsStatusInputName = _MemInputsStatusInputName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 3),
    _MemInputsStatusInputName_Type()
)
memInputsStatusInputName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memInputsStatusInputName.setStatus("mandatory")
_MemInputsStatusInputLocation_Type = DisplayString
_MemInputsStatusInputLocation_Object = MibTableColumn
memInputsStatusInputLocation = _MemInputsStatusInputLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 4),
    _MemInputsStatusInputLocation_Type()
)
memInputsStatusInputLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memInputsStatusInputLocation.setStatus("mandatory")


class _MemInputsStatusCurrentState_Type(Integer32):
    """Custom type memInputsStatusCurrentState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("inputClosedHighMEM", 1),
          ("inputDisabled", 3),
          ("inputOpenLowMEM", 2),
          ("inputStateNotApplicable", 4))
    )


_MemInputsStatusCurrentState_Type.__name__ = "Integer32"
_MemInputsStatusCurrentState_Object = MibTableColumn
memInputsStatusCurrentState = _MemInputsStatusCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 5),
    _MemInputsStatusCurrentState_Type()
)
memInputsStatusCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memInputsStatusCurrentState.setStatus("mandatory")
_MemInputsStatusCurrentAnalogValue_Type = DisplayString
_MemInputsStatusCurrentAnalogValue_Object = MibTableColumn
memInputsStatusCurrentAnalogValue = _MemInputsStatusCurrentAnalogValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 6),
    _MemInputsStatusCurrentAnalogValue_Type()
)
memInputsStatusCurrentAnalogValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memInputsStatusCurrentAnalogValue.setStatus("mandatory")


class _MemInputsStatusAlarmStatus_Type(Integer32):
    """Custom type memInputsStatusAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("memCritical", 3),
          ("memNormal", 1),
          ("memWarning", 2))
    )


_MemInputsStatusAlarmStatus_Type.__name__ = "Integer32"
_MemInputsStatusAlarmStatus_Object = MibTableColumn
memInputsStatusAlarmStatus = _MemInputsStatusAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 7),
    _MemInputsStatusAlarmStatus_Type()
)
memInputsStatusAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memInputsStatusAlarmStatus.setStatus("mandatory")


class _MemInputsCommStatus_Type(Integer32):
    """Custom type memInputsCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("commsLost", 3),
          ("commsOK", 2),
          ("notInstalled", 1))
    )


_MemInputsCommStatus_Type.__name__ = "Integer32"
_MemInputsCommStatus_Object = MibTableColumn
memInputsCommStatus = _MemInputsCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 2, 1, 8),
    _MemInputsCommStatus_Type()
)
memInputsCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memInputsCommStatus.setStatus("mandatory")
_MemInputsConfigTableSize_Type = Integer32
_MemInputsConfigTableSize_Object = MibScalar
memInputsConfigTableSize = _MemInputsConfigTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 3),
    _MemInputsConfigTableSize_Type()
)
memInputsConfigTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memInputsConfigTableSize.setStatus("mandatory")
_MemInputsConfigTable_Object = MibTable
memInputsConfigTable = _MemInputsConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4)
)
if mibBuilder.loadTexts:
    memInputsConfigTable.setStatus("mandatory")
_MemInputsConfigEntry_Object = MibTableRow
memInputsConfigEntry = _MemInputsConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1)
)
memInputsConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "memInputsConfigModuleNumber"),
    (0, "POWERNET-MIB", "memInputsConfigInputNumber"),
)
if mibBuilder.loadTexts:
    memInputsConfigEntry.setStatus("mandatory")
_MemInputsConfigModuleNumber_Type = Integer32
_MemInputsConfigModuleNumber_Object = MibTableColumn
memInputsConfigModuleNumber = _MemInputsConfigModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 1),
    _MemInputsConfigModuleNumber_Type()
)
memInputsConfigModuleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memInputsConfigModuleNumber.setStatus("mandatory")
_MemInputsConfigInputNumber_Type = Integer32
_MemInputsConfigInputNumber_Object = MibTableColumn
memInputsConfigInputNumber = _MemInputsConfigInputNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 2),
    _MemInputsConfigInputNumber_Type()
)
memInputsConfigInputNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memInputsConfigInputNumber.setStatus("mandatory")
_MemInputName_Type = DisplayString
_MemInputName_Object = MibTableColumn
memInputName = _MemInputName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 3),
    _MemInputName_Type()
)
memInputName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputName.setStatus("mandatory")
_MemInputLocation_Type = DisplayString
_MemInputLocation_Object = MibTableColumn
memInputLocation = _MemInputLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 4),
    _MemInputLocation_Type()
)
memInputLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputLocation.setStatus("mandatory")


class _MemInputType_Type(Integer32):
    """Custom type memInputType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("analogVolts", 5),
          ("analogmAmps", 4),
          ("digital", 3),
          ("dryContact", 2),
          ("noConnection", 1))
    )


_MemInputType_Type.__name__ = "Integer32"
_MemInputType_Object = MibTableColumn
memInputType = _MemInputType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 5),
    _MemInputType_Type()
)
memInputType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputType.setStatus("mandatory")


class _MemInputAlarmGeneration_Type(Integer32):
    """Custom type memInputAlarmGeneration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_MemInputAlarmGeneration_Type.__name__ = "Integer32"
_MemInputAlarmGeneration_Object = MibTableColumn
memInputAlarmGeneration = _MemInputAlarmGeneration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 6),
    _MemInputAlarmGeneration_Type()
)
memInputAlarmGeneration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAlarmGeneration.setStatus("mandatory")


class _MemInputNormalState_Type(Integer32):
    """Custom type memInputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("inputClosedHighMEM", 1),
          ("inputDisabled", 3),
          ("inputOpenLowMEM", 2),
          ("inputStateNotApplicable", 4))
    )


_MemInputNormalState_Type.__name__ = "Integer32"
_MemInputNormalState_Object = MibTableColumn
memInputNormalState = _MemInputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 7),
    _MemInputNormalState_Type()
)
memInputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputNormalState.setStatus("mandatory")


class _MemInputAbnormalSeverity_Type(Integer32):
    """Custom type memInputAbnormalSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("inputSeverityNotApplicable", 4),
          ("inputSeverityinformational", 1),
          ("inputSeveritysevere", 3),
          ("inputSeveritywarning", 2))
    )


_MemInputAbnormalSeverity_Type.__name__ = "Integer32"
_MemInputAbnormalSeverity_Object = MibTableColumn
memInputAbnormalSeverity = _MemInputAbnormalSeverity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 8),
    _MemInputAbnormalSeverity_Type()
)
memInputAbnormalSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAbnormalSeverity.setStatus("mandatory")
_MemInputNumberCalibrationPoints_Type = Integer32
_MemInputNumberCalibrationPoints_Object = MibTableColumn
memInputNumberCalibrationPoints = _MemInputNumberCalibrationPoints_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 9),
    _MemInputNumberCalibrationPoints_Type()
)
memInputNumberCalibrationPoints.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputNumberCalibrationPoints.setStatus("mandatory")
_MemInputAnalogCalibrationPoint1_Type = DisplayString
_MemInputAnalogCalibrationPoint1_Object = MibTableColumn
memInputAnalogCalibrationPoint1 = _MemInputAnalogCalibrationPoint1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 10),
    _MemInputAnalogCalibrationPoint1_Type()
)
memInputAnalogCalibrationPoint1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogCalibrationPoint1.setStatus("mandatory")
_MemInputAnalogCalibrationPoint2_Type = DisplayString
_MemInputAnalogCalibrationPoint2_Object = MibTableColumn
memInputAnalogCalibrationPoint2 = _MemInputAnalogCalibrationPoint2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 11),
    _MemInputAnalogCalibrationPoint2_Type()
)
memInputAnalogCalibrationPoint2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogCalibrationPoint2.setStatus("mandatory")
_MemInputAnalogCalibrationPoint3_Type = DisplayString
_MemInputAnalogCalibrationPoint3_Object = MibTableColumn
memInputAnalogCalibrationPoint3 = _MemInputAnalogCalibrationPoint3_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 12),
    _MemInputAnalogCalibrationPoint3_Type()
)
memInputAnalogCalibrationPoint3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogCalibrationPoint3.setStatus("mandatory")
_MemInputAnalogCalibrationPoint4_Type = DisplayString
_MemInputAnalogCalibrationPoint4_Object = MibTableColumn
memInputAnalogCalibrationPoint4 = _MemInputAnalogCalibrationPoint4_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 13),
    _MemInputAnalogCalibrationPoint4_Type()
)
memInputAnalogCalibrationPoint4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogCalibrationPoint4.setStatus("mandatory")
_MemInputAnalogCalibrationPoint5_Type = DisplayString
_MemInputAnalogCalibrationPoint5_Object = MibTableColumn
memInputAnalogCalibrationPoint5 = _MemInputAnalogCalibrationPoint5_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 14),
    _MemInputAnalogCalibrationPoint5_Type()
)
memInputAnalogCalibrationPoint5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogCalibrationPoint5.setStatus("mandatory")
_MemInputAnalogCalibrationPoint1Value_Type = DisplayString
_MemInputAnalogCalibrationPoint1Value_Object = MibTableColumn
memInputAnalogCalibrationPoint1Value = _MemInputAnalogCalibrationPoint1Value_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 15),
    _MemInputAnalogCalibrationPoint1Value_Type()
)
memInputAnalogCalibrationPoint1Value.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogCalibrationPoint1Value.setStatus("mandatory")
_MemInputAnalogCalibrationPoint2Value_Type = DisplayString
_MemInputAnalogCalibrationPoint2Value_Object = MibTableColumn
memInputAnalogCalibrationPoint2Value = _MemInputAnalogCalibrationPoint2Value_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 16),
    _MemInputAnalogCalibrationPoint2Value_Type()
)
memInputAnalogCalibrationPoint2Value.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogCalibrationPoint2Value.setStatus("mandatory")
_MemInputAnalogCalibrationPoint3Value_Type = DisplayString
_MemInputAnalogCalibrationPoint3Value_Object = MibTableColumn
memInputAnalogCalibrationPoint3Value = _MemInputAnalogCalibrationPoint3Value_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 17),
    _MemInputAnalogCalibrationPoint3Value_Type()
)
memInputAnalogCalibrationPoint3Value.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogCalibrationPoint3Value.setStatus("mandatory")
_MemInputAnalogCalibrationPoint4Value_Type = DisplayString
_MemInputAnalogCalibrationPoint4Value_Object = MibTableColumn
memInputAnalogCalibrationPoint4Value = _MemInputAnalogCalibrationPoint4Value_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 18),
    _MemInputAnalogCalibrationPoint4Value_Type()
)
memInputAnalogCalibrationPoint4Value.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogCalibrationPoint4Value.setStatus("mandatory")
_MemInputAnalogCalibrationPoint5Value_Type = DisplayString
_MemInputAnalogCalibrationPoint5Value_Object = MibTableColumn
memInputAnalogCalibrationPoint5Value = _MemInputAnalogCalibrationPoint5Value_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 19),
    _MemInputAnalogCalibrationPoint5Value_Type()
)
memInputAnalogCalibrationPoint5Value.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogCalibrationPoint5Value.setStatus("mandatory")
_MemInputAnalogMeasurementUnits_Type = DisplayString
_MemInputAnalogMeasurementUnits_Object = MibTableColumn
memInputAnalogMeasurementUnits = _MemInputAnalogMeasurementUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 20),
    _MemInputAnalogMeasurementUnits_Type()
)
memInputAnalogMeasurementUnits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogMeasurementUnits.setStatus("mandatory")
_MemInputAnalogMaxThresh_Type = DisplayString
_MemInputAnalogMaxThresh_Object = MibTableColumn
memInputAnalogMaxThresh = _MemInputAnalogMaxThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 21),
    _MemInputAnalogMaxThresh_Type()
)
memInputAnalogMaxThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogMaxThresh.setStatus("mandatory")
_MemInputAnalogHighThresh_Type = DisplayString
_MemInputAnalogHighThresh_Object = MibTableColumn
memInputAnalogHighThresh = _MemInputAnalogHighThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 22),
    _MemInputAnalogHighThresh_Type()
)
memInputAnalogHighThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogHighThresh.setStatus("mandatory")
_MemInputAnalogLowThresh_Type = DisplayString
_MemInputAnalogLowThresh_Object = MibTableColumn
memInputAnalogLowThresh = _MemInputAnalogLowThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 23),
    _MemInputAnalogLowThresh_Type()
)
memInputAnalogLowThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogLowThresh.setStatus("mandatory")
_MemInputAnalogMinThresh_Type = DisplayString
_MemInputAnalogMinThresh_Object = MibTableColumn
memInputAnalogMinThresh = _MemInputAnalogMinThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 24),
    _MemInputAnalogMinThresh_Type()
)
memInputAnalogMinThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogMinThresh.setStatus("mandatory")
_MemInputAnalogThreshHysteresis_Type = DisplayString
_MemInputAnalogThreshHysteresis_Object = MibTableColumn
memInputAnalogThreshHysteresis = _MemInputAnalogThreshHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 3, 4, 1, 25),
    _MemInputAnalogThreshHysteresis_Type()
)
memInputAnalogThreshHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memInputAnalogThreshHysteresis.setStatus("mandatory")
_MemOutputs_ObjectIdentity = ObjectIdentity
memOutputs = _MemOutputs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4)
)
_MemOutputStatusTableSize_Type = Integer32
_MemOutputStatusTableSize_Object = MibScalar
memOutputStatusTableSize = _MemOutputStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 1),
    _MemOutputStatusTableSize_Type()
)
memOutputStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutputStatusTableSize.setStatus("mandatory")
_MemOutputStatusTable_Object = MibTable
memOutputStatusTable = _MemOutputStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2)
)
if mibBuilder.loadTexts:
    memOutputStatusTable.setStatus("mandatory")
_MemOutputStatusEntry_Object = MibTableRow
memOutputStatusEntry = _MemOutputStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1)
)
memOutputStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "memOutputStatusModuleNumber"),
    (0, "POWERNET-MIB", "memOutputStatusOutputNumber"),
)
if mibBuilder.loadTexts:
    memOutputStatusEntry.setStatus("mandatory")
_MemOutputStatusModuleNumber_Type = Integer32
_MemOutputStatusModuleNumber_Object = MibTableColumn
memOutputStatusModuleNumber = _MemOutputStatusModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 1),
    _MemOutputStatusModuleNumber_Type()
)
memOutputStatusModuleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutputStatusModuleNumber.setStatus("mandatory")
_MemOutputStatusOutputNumber_Type = Integer32
_MemOutputStatusOutputNumber_Object = MibTableColumn
memOutputStatusOutputNumber = _MemOutputStatusOutputNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 2),
    _MemOutputStatusOutputNumber_Type()
)
memOutputStatusOutputNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutputStatusOutputNumber.setStatus("mandatory")
_MemOutputStatusOutputName_Type = DisplayString
_MemOutputStatusOutputName_Object = MibTableColumn
memOutputStatusOutputName = _MemOutputStatusOutputName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 3),
    _MemOutputStatusOutputName_Type()
)
memOutputStatusOutputName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutputStatusOutputName.setStatus("mandatory")
_MemOutputStatusOutputLocation_Type = DisplayString
_MemOutputStatusOutputLocation_Object = MibTableColumn
memOutputStatusOutputLocation = _MemOutputStatusOutputLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 4),
    _MemOutputStatusOutputLocation_Type()
)
memOutputStatusOutputLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutputStatusOutputLocation.setStatus("mandatory")


class _MemOutputStatusCurrentState_Type(Integer32):
    """Custom type memOutputStatusCurrentState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("memOutputClosed", 1),
          ("memOutputOpen", 2))
    )


_MemOutputStatusCurrentState_Type.__name__ = "Integer32"
_MemOutputStatusCurrentState_Object = MibTableColumn
memOutputStatusCurrentState = _MemOutputStatusCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 2, 1, 5),
    _MemOutputStatusCurrentState_Type()
)
memOutputStatusCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutputStatusCurrentState.setStatus("mandatory")
_MemOutputConfigTableSize_Type = Integer32
_MemOutputConfigTableSize_Object = MibScalar
memOutputConfigTableSize = _MemOutputConfigTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 3),
    _MemOutputConfigTableSize_Type()
)
memOutputConfigTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutputConfigTableSize.setStatus("mandatory")
_MemOutputConfigTable_Object = MibTable
memOutputConfigTable = _MemOutputConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4)
)
if mibBuilder.loadTexts:
    memOutputConfigTable.setStatus("mandatory")
_MemOutputConfigEntry_Object = MibTableRow
memOutputConfigEntry = _MemOutputConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1)
)
memOutputConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "memOutputConfigModuleNumber"),
    (0, "POWERNET-MIB", "memOutputConfigOutputNumber"),
)
if mibBuilder.loadTexts:
    memOutputConfigEntry.setStatus("mandatory")
_MemOutputConfigModuleNumber_Type = Integer32
_MemOutputConfigModuleNumber_Object = MibTableColumn
memOutputConfigModuleNumber = _MemOutputConfigModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 1),
    _MemOutputConfigModuleNumber_Type()
)
memOutputConfigModuleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutputConfigModuleNumber.setStatus("mandatory")
_MemOutputConfigOutputNumber_Type = Integer32
_MemOutputConfigOutputNumber_Object = MibTableColumn
memOutputConfigOutputNumber = _MemOutputConfigOutputNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 2),
    _MemOutputConfigOutputNumber_Type()
)
memOutputConfigOutputNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutputConfigOutputNumber.setStatus("mandatory")
_MemOutputName_Type = DisplayString
_MemOutputName_Object = MibTableColumn
memOutputName = _MemOutputName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 3),
    _MemOutputName_Type()
)
memOutputName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memOutputName.setStatus("mandatory")
_MemOutputLocation_Type = DisplayString
_MemOutputLocation_Object = MibTableColumn
memOutputLocation = _MemOutputLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 4),
    _MemOutputLocation_Type()
)
memOutputLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memOutputLocation.setStatus("mandatory")


class _MemOutputNormalState_Type(Integer32):
    """Custom type memOutputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("memOutputClosed", 1),
          ("memOutputOpen", 2))
    )


_MemOutputNormalState_Type.__name__ = "Integer32"
_MemOutputNormalState_Object = MibTableColumn
memOutputNormalState = _MemOutputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 5),
    _MemOutputNormalState_Type()
)
memOutputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memOutputNormalState.setStatus("mandatory")


class _MemOutputAction_Type(Integer32):
    """Custom type memOutputAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("memActionClose", 1),
          ("memActionOpen", 2))
    )


_MemOutputAction_Type.__name__ = "Integer32"
_MemOutputAction_Object = MibTableColumn
memOutputAction = _MemOutputAction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 4, 4, 1, 6),
    _MemOutputAction_Type()
)
memOutputAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memOutputAction.setStatus("mandatory")
_MemOutlets_ObjectIdentity = ObjectIdentity
memOutlets = _MemOutlets_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5)
)
_MemOutletStatusTableSize_Type = Integer32
_MemOutletStatusTableSize_Object = MibScalar
memOutletStatusTableSize = _MemOutletStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 1),
    _MemOutletStatusTableSize_Type()
)
memOutletStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutletStatusTableSize.setStatus("mandatory")
_MemOutletStatusTable_Object = MibTable
memOutletStatusTable = _MemOutletStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2)
)
if mibBuilder.loadTexts:
    memOutletStatusTable.setStatus("mandatory")
_MemOutletStatusEntry_Object = MibTableRow
memOutletStatusEntry = _MemOutletStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1)
)
memOutletStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "memOutletStatusModuleNumber"),
    (0, "POWERNET-MIB", "memOutletStatusOutletNumber"),
)
if mibBuilder.loadTexts:
    memOutletStatusEntry.setStatus("mandatory")
_MemOutletStatusModuleNumber_Type = Integer32
_MemOutletStatusModuleNumber_Object = MibTableColumn
memOutletStatusModuleNumber = _MemOutletStatusModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 1),
    _MemOutletStatusModuleNumber_Type()
)
memOutletStatusModuleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutletStatusModuleNumber.setStatus("mandatory")
_MemOutletStatusOutletNumber_Type = Integer32
_MemOutletStatusOutletNumber_Object = MibTableColumn
memOutletStatusOutletNumber = _MemOutletStatusOutletNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 2),
    _MemOutletStatusOutletNumber_Type()
)
memOutletStatusOutletNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutletStatusOutletNumber.setStatus("mandatory")
_MemOutletStatusOutletName_Type = DisplayString
_MemOutletStatusOutletName_Object = MibTableColumn
memOutletStatusOutletName = _MemOutletStatusOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 3),
    _MemOutletStatusOutletName_Type()
)
memOutletStatusOutletName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutletStatusOutletName.setStatus("mandatory")
_MemOutletStatusOutletLocation_Type = DisplayString
_MemOutletStatusOutletLocation_Object = MibTableColumn
memOutletStatusOutletLocation = _MemOutletStatusOutletLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 4),
    _MemOutletStatusOutletLocation_Type()
)
memOutletStatusOutletLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutletStatusOutletLocation.setStatus("mandatory")


class _MemOutletStatusCurrentState_Type(Integer32):
    """Custom type memOutletStatusCurrentState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_MemOutletStatusCurrentState_Type.__name__ = "Integer32"
_MemOutletStatusCurrentState_Object = MibTableColumn
memOutletStatusCurrentState = _MemOutletStatusCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 2, 1, 5),
    _MemOutletStatusCurrentState_Type()
)
memOutletStatusCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutletStatusCurrentState.setStatus("mandatory")
_MemOutletConfigTableSize_Type = Integer32
_MemOutletConfigTableSize_Object = MibScalar
memOutletConfigTableSize = _MemOutletConfigTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 3),
    _MemOutletConfigTableSize_Type()
)
memOutletConfigTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutletConfigTableSize.setStatus("mandatory")
_MemOutletConfigTable_Object = MibTable
memOutletConfigTable = _MemOutletConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4)
)
if mibBuilder.loadTexts:
    memOutletConfigTable.setStatus("mandatory")
_MemOutletConfigEntry_Object = MibTableRow
memOutletConfigEntry = _MemOutletConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1)
)
memOutletConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "memOutletConfigModuleNumber"),
    (0, "POWERNET-MIB", "memOutletConfigOutletNumber"),
)
if mibBuilder.loadTexts:
    memOutletConfigEntry.setStatus("mandatory")
_MemOutletConfigModuleNumber_Type = Integer32
_MemOutletConfigModuleNumber_Object = MibTableColumn
memOutletConfigModuleNumber = _MemOutletConfigModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 1),
    _MemOutletConfigModuleNumber_Type()
)
memOutletConfigModuleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutletConfigModuleNumber.setStatus("mandatory")
_MemOutletConfigOutletNumber_Type = Integer32
_MemOutletConfigOutletNumber_Object = MibTableColumn
memOutletConfigOutletNumber = _MemOutletConfigOutletNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 2),
    _MemOutletConfigOutletNumber_Type()
)
memOutletConfigOutletNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memOutletConfigOutletNumber.setStatus("mandatory")
_MemOutletName_Type = DisplayString
_MemOutletName_Object = MibTableColumn
memOutletName = _MemOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 3),
    _MemOutletName_Type()
)
memOutletName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memOutletName.setStatus("mandatory")
_MemOutletLocation_Type = DisplayString
_MemOutletLocation_Object = MibTableColumn
memOutletLocation = _MemOutletLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 4),
    _MemOutletLocation_Type()
)
memOutletLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memOutletLocation.setStatus("mandatory")


class _MemOutletNormalState_Type(Integer32):
    """Custom type memOutletNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_MemOutletNormalState_Type.__name__ = "Integer32"
_MemOutletNormalState_Object = MibTableColumn
memOutletNormalState = _MemOutletNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 5),
    _MemOutletNormalState_Type()
)
memOutletNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memOutletNormalState.setStatus("mandatory")


class _MemOutletAction_Type(Integer32):
    """Custom type memOutletAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("turnOff", 1),
          ("turnOn", 2))
    )


_MemOutletAction_Type.__name__ = "Integer32"
_MemOutletAction_Object = MibTableColumn
memOutletAction = _MemOutletAction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 5, 4, 1, 6),
    _MemOutletAction_Type()
)
memOutletAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memOutletAction.setStatus("mandatory")
_MemBeacons_ObjectIdentity = ObjectIdentity
memBeacons = _MemBeacons_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6)
)
_MemBeaconStatusTableSize_Type = Integer32
_MemBeaconStatusTableSize_Object = MibScalar
memBeaconStatusTableSize = _MemBeaconStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 1),
    _MemBeaconStatusTableSize_Type()
)
memBeaconStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memBeaconStatusTableSize.setStatus("mandatory")
_MemBeaconStatusTable_Object = MibTable
memBeaconStatusTable = _MemBeaconStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2)
)
if mibBuilder.loadTexts:
    memBeaconStatusTable.setStatus("mandatory")
_MemBeaconStatusEntry_Object = MibTableRow
memBeaconStatusEntry = _MemBeaconStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1)
)
memBeaconStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "memBeaconStatusModuleNumber"),
    (0, "POWERNET-MIB", "memBeaconStatusBeaconNumber"),
)
if mibBuilder.loadTexts:
    memBeaconStatusEntry.setStatus("mandatory")
_MemBeaconStatusModuleNumber_Type = Integer32
_MemBeaconStatusModuleNumber_Object = MibTableColumn
memBeaconStatusModuleNumber = _MemBeaconStatusModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 1),
    _MemBeaconStatusModuleNumber_Type()
)
memBeaconStatusModuleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memBeaconStatusModuleNumber.setStatus("mandatory")
_MemBeaconStatusBeaconNumber_Type = Integer32
_MemBeaconStatusBeaconNumber_Object = MibTableColumn
memBeaconStatusBeaconNumber = _MemBeaconStatusBeaconNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 2),
    _MemBeaconStatusBeaconNumber_Type()
)
memBeaconStatusBeaconNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memBeaconStatusBeaconNumber.setStatus("mandatory")
_MemBeaconStatusBeaconName_Type = DisplayString
_MemBeaconStatusBeaconName_Object = MibTableColumn
memBeaconStatusBeaconName = _MemBeaconStatusBeaconName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 3),
    _MemBeaconStatusBeaconName_Type()
)
memBeaconStatusBeaconName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memBeaconStatusBeaconName.setStatus("mandatory")
_MemBeaconStatusBeaconLocation_Type = DisplayString
_MemBeaconStatusBeaconLocation_Object = MibTableColumn
memBeaconStatusBeaconLocation = _MemBeaconStatusBeaconLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 4),
    _MemBeaconStatusBeaconLocation_Type()
)
memBeaconStatusBeaconLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memBeaconStatusBeaconLocation.setStatus("mandatory")


class _MemBeaconStatusCurrentState_Type(Integer32):
    """Custom type memBeaconStatusCurrentState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_MemBeaconStatusCurrentState_Type.__name__ = "Integer32"
_MemBeaconStatusCurrentState_Object = MibTableColumn
memBeaconStatusCurrentState = _MemBeaconStatusCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 2, 1, 5),
    _MemBeaconStatusCurrentState_Type()
)
memBeaconStatusCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memBeaconStatusCurrentState.setStatus("mandatory")
_MemBeaconConfigTableSize_Type = Integer32
_MemBeaconConfigTableSize_Object = MibScalar
memBeaconConfigTableSize = _MemBeaconConfigTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 3),
    _MemBeaconConfigTableSize_Type()
)
memBeaconConfigTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memBeaconConfigTableSize.setStatus("mandatory")
_MemBeaconConfigTable_Object = MibTable
memBeaconConfigTable = _MemBeaconConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4)
)
if mibBuilder.loadTexts:
    memBeaconConfigTable.setStatus("mandatory")
_MemBeaconConfigEntry_Object = MibTableRow
memBeaconConfigEntry = _MemBeaconConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1)
)
memBeaconConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "memBeaconConfigModuleNumber"),
    (0, "POWERNET-MIB", "memBeaconConfigBeaconNumber"),
)
if mibBuilder.loadTexts:
    memBeaconConfigEntry.setStatus("mandatory")
_MemBeaconConfigModuleNumber_Type = Integer32
_MemBeaconConfigModuleNumber_Object = MibTableColumn
memBeaconConfigModuleNumber = _MemBeaconConfigModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 1),
    _MemBeaconConfigModuleNumber_Type()
)
memBeaconConfigModuleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memBeaconConfigModuleNumber.setStatus("mandatory")
_MemBeaconConfigBeaconNumber_Type = Integer32
_MemBeaconConfigBeaconNumber_Object = MibTableColumn
memBeaconConfigBeaconNumber = _MemBeaconConfigBeaconNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 2),
    _MemBeaconConfigBeaconNumber_Type()
)
memBeaconConfigBeaconNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    memBeaconConfigBeaconNumber.setStatus("mandatory")
_MemBeaconConfigName_Type = DisplayString
_MemBeaconConfigName_Object = MibTableColumn
memBeaconConfigName = _MemBeaconConfigName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 3),
    _MemBeaconConfigName_Type()
)
memBeaconConfigName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memBeaconConfigName.setStatus("mandatory")
_MemBeaconConfigLocation_Type = DisplayString
_MemBeaconConfigLocation_Object = MibTableColumn
memBeaconConfigLocation = _MemBeaconConfigLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 4),
    _MemBeaconConfigLocation_Type()
)
memBeaconConfigLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memBeaconConfigLocation.setStatus("mandatory")


class _MemBeaconAction_Type(Integer32):
    """Custom type memBeaconAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("turnOff", 1),
          ("turnOn", 2))
    )


_MemBeaconAction_Type.__name__ = "Integer32"
_MemBeaconAction_Object = MibTableColumn
memBeaconAction = _MemBeaconAction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 10, 4, 6, 4, 1, 5),
    _MemBeaconAction_Type()
)
memBeaconAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    memBeaconAction.setStatus("mandatory")
_Netlock_ObjectIdentity = ObjectIdentity
netlock = _Netlock_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 11)
)
_NlIdent_ObjectIdentity = ObjectIdentity
nlIdent = _NlIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 11, 1)
)
_NlStatus_ObjectIdentity = ObjectIdentity
nlStatus = _NlStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 11, 2)
)
_RPDU_ObjectIdentity = ObjectIdentity
rPDU = _RPDU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12)
)
_RPDUIdent_ObjectIdentity = ObjectIdentity
rPDUIdent = _RPDUIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1)
)
_RPDUIdentName_Type = DisplayString
_RPDUIdentName_Object = MibScalar
rPDUIdentName = _RPDUIdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 1),
    _RPDUIdentName_Type()
)
rPDUIdentName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUIdentName.setStatus("mandatory")
_RPDUIdentHardwareRev_Type = DisplayString
_RPDUIdentHardwareRev_Object = MibScalar
rPDUIdentHardwareRev = _RPDUIdentHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 2),
    _RPDUIdentHardwareRev_Type()
)
rPDUIdentHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentHardwareRev.setStatus("mandatory")
_RPDUIdentFirmwareRev_Type = DisplayString
_RPDUIdentFirmwareRev_Object = MibScalar
rPDUIdentFirmwareRev = _RPDUIdentFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 3),
    _RPDUIdentFirmwareRev_Type()
)
rPDUIdentFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentFirmwareRev.setStatus("mandatory")
_RPDUIdentDateOfManufacture_Type = DisplayString
_RPDUIdentDateOfManufacture_Object = MibScalar
rPDUIdentDateOfManufacture = _RPDUIdentDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 4),
    _RPDUIdentDateOfManufacture_Type()
)
rPDUIdentDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentDateOfManufacture.setStatus("mandatory")
_RPDUIdentModelNumber_Type = DisplayString
_RPDUIdentModelNumber_Object = MibScalar
rPDUIdentModelNumber = _RPDUIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 5),
    _RPDUIdentModelNumber_Type()
)
rPDUIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentModelNumber.setStatus("mandatory")
_RPDUIdentSerialNumber_Type = DisplayString
_RPDUIdentSerialNumber_Object = MibScalar
rPDUIdentSerialNumber = _RPDUIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 6),
    _RPDUIdentSerialNumber_Type()
)
rPDUIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentSerialNumber.setStatus("mandatory")
_RPDUIdentDeviceRating_Type = Integer32
_RPDUIdentDeviceRating_Object = MibScalar
rPDUIdentDeviceRating = _RPDUIdentDeviceRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 7),
    _RPDUIdentDeviceRating_Type()
)
rPDUIdentDeviceRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentDeviceRating.setStatus("mandatory")
_RPDUIdentDeviceNumOutlets_Type = Integer32
_RPDUIdentDeviceNumOutlets_Object = MibScalar
rPDUIdentDeviceNumOutlets = _RPDUIdentDeviceNumOutlets_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 8),
    _RPDUIdentDeviceNumOutlets_Type()
)
rPDUIdentDeviceNumOutlets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentDeviceNumOutlets.setStatus("mandatory")
_RPDUIdentDeviceNumPhases_Type = Integer32
_RPDUIdentDeviceNumPhases_Object = MibScalar
rPDUIdentDeviceNumPhases = _RPDUIdentDeviceNumPhases_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 9),
    _RPDUIdentDeviceNumPhases_Type()
)
rPDUIdentDeviceNumPhases.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentDeviceNumPhases.setStatus("mandatory")
_RPDUIdentDeviceNumBreakers_Type = Integer32
_RPDUIdentDeviceNumBreakers_Object = MibScalar
rPDUIdentDeviceNumBreakers = _RPDUIdentDeviceNumBreakers_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 10),
    _RPDUIdentDeviceNumBreakers_Type()
)
rPDUIdentDeviceNumBreakers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentDeviceNumBreakers.setStatus("mandatory")
_RPDUIdentDeviceBreakerRating_Type = Integer32
_RPDUIdentDeviceBreakerRating_Object = MibScalar
rPDUIdentDeviceBreakerRating = _RPDUIdentDeviceBreakerRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 11),
    _RPDUIdentDeviceBreakerRating_Type()
)
rPDUIdentDeviceBreakerRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentDeviceBreakerRating.setStatus("mandatory")


class _RPDUIdentDeviceOrientation_Type(Integer32):
    """Custom type rPDUIdentDeviceOrientation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("orientHorizontal", 1),
          ("orientVertical", 2))
    )


_RPDUIdentDeviceOrientation_Type.__name__ = "Integer32"
_RPDUIdentDeviceOrientation_Object = MibScalar
rPDUIdentDeviceOrientation = _RPDUIdentDeviceOrientation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 12),
    _RPDUIdentDeviceOrientation_Type()
)
rPDUIdentDeviceOrientation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentDeviceOrientation.setStatus("mandatory")


class _RPDUIdentDeviceOutletLayout_Type(Integer32):
    """Custom type rPDUIdentDeviceOutletLayout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("seqNotApplicable", 9),
          ("seqPToN1516PToPGrouped", 6),
          ("seqPhToN2xGrouped", 8),
          ("seqPhToNGrouped", 5),
          ("seqPhToNeu21PhToPh", 3),
          ("seqPhToPh2xGrouped", 7),
          ("seqPhToPhGrouped", 4),
          ("seqPhaseToNeutral", 1),
          ("seqPhaseToPhase", 2))
    )


_RPDUIdentDeviceOutletLayout_Type.__name__ = "Integer32"
_RPDUIdentDeviceOutletLayout_Object = MibScalar
rPDUIdentDeviceOutletLayout = _RPDUIdentDeviceOutletLayout_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 13),
    _RPDUIdentDeviceOutletLayout_Type()
)
rPDUIdentDeviceOutletLayout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentDeviceOutletLayout.setStatus("mandatory")


class _RPDUIdentDeviceDisplayOrientation_Type(Integer32):
    """Custom type rPDUIdentDeviceDisplayOrientation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("displayNormal", 1),
          ("displayReverse", 2))
    )


_RPDUIdentDeviceDisplayOrientation_Type.__name__ = "Integer32"
_RPDUIdentDeviceDisplayOrientation_Object = MibScalar
rPDUIdentDeviceDisplayOrientation = _RPDUIdentDeviceDisplayOrientation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 14),
    _RPDUIdentDeviceDisplayOrientation_Type()
)
rPDUIdentDeviceDisplayOrientation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUIdentDeviceDisplayOrientation.setStatus("mandatory")
_RPDUIdentDeviceLinetoLineVoltage_Type = Integer32
_RPDUIdentDeviceLinetoLineVoltage_Object = MibScalar
rPDUIdentDeviceLinetoLineVoltage = _RPDUIdentDeviceLinetoLineVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 15),
    _RPDUIdentDeviceLinetoLineVoltage_Type()
)
rPDUIdentDeviceLinetoLineVoltage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUIdentDeviceLinetoLineVoltage.setStatus("mandatory")
_RPDUIdentDevicePowerWatts_Type = Integer32
_RPDUIdentDevicePowerWatts_Object = MibScalar
rPDUIdentDevicePowerWatts = _RPDUIdentDevicePowerWatts_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 16),
    _RPDUIdentDevicePowerWatts_Type()
)
rPDUIdentDevicePowerWatts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentDevicePowerWatts.setStatus("mandatory")
_RPDUIdentDevicePowerFactor_Type = Integer32
_RPDUIdentDevicePowerFactor_Object = MibScalar
rPDUIdentDevicePowerFactor = _RPDUIdentDevicePowerFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 17),
    _RPDUIdentDevicePowerFactor_Type()
)
rPDUIdentDevicePowerFactor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUIdentDevicePowerFactor.setStatus("mandatory")
_RPDUIdentDevicePowerVA_Type = Integer32
_RPDUIdentDevicePowerVA_Object = MibScalar
rPDUIdentDevicePowerVA = _RPDUIdentDevicePowerVA_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 1, 18),
    _RPDUIdentDevicePowerVA_Type()
)
rPDUIdentDevicePowerVA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUIdentDevicePowerVA.setStatus("mandatory")
_RPDULoad_ObjectIdentity = ObjectIdentity
rPDULoad = _RPDULoad_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2)
)
_RPDULoadDevice_ObjectIdentity = ObjectIdentity
rPDULoadDevice = _RPDULoadDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1)
)
_RPDULoadDevMaxPhaseLoad_Type = Integer32
_RPDULoadDevMaxPhaseLoad_Object = MibScalar
rPDULoadDevMaxPhaseLoad = _RPDULoadDevMaxPhaseLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 1),
    _RPDULoadDevMaxPhaseLoad_Type()
)
rPDULoadDevMaxPhaseLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadDevMaxPhaseLoad.setStatus("mandatory")
_RPDULoadDevNumPhases_Type = Integer32
_RPDULoadDevNumPhases_Object = MibScalar
rPDULoadDevNumPhases = _RPDULoadDevNumPhases_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 2),
    _RPDULoadDevNumPhases_Type()
)
rPDULoadDevNumPhases.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadDevNumPhases.setStatus("mandatory")
_RPDULoadDevMaxBankLoad_Type = Integer32
_RPDULoadDevMaxBankLoad_Object = MibScalar
rPDULoadDevMaxBankLoad = _RPDULoadDevMaxBankLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 3),
    _RPDULoadDevMaxBankLoad_Type()
)
rPDULoadDevMaxBankLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadDevMaxBankLoad.setStatus("mandatory")
_RPDULoadDevNumBanks_Type = Integer32
_RPDULoadDevNumBanks_Object = MibScalar
rPDULoadDevNumBanks = _RPDULoadDevNumBanks_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 4),
    _RPDULoadDevNumBanks_Type()
)
rPDULoadDevNumBanks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadDevNumBanks.setStatus("mandatory")
_RPDULoadDevBankTableSize_Type = Integer32
_RPDULoadDevBankTableSize_Object = MibScalar
rPDULoadDevBankTableSize = _RPDULoadDevBankTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 5),
    _RPDULoadDevBankTableSize_Type()
)
rPDULoadDevBankTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadDevBankTableSize.setStatus("mandatory")
_RPDULoadDevBankTable_Object = MibTable
rPDULoadDevBankTable = _RPDULoadDevBankTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6)
)
if mibBuilder.loadTexts:
    rPDULoadDevBankTable.setStatus("mandatory")
_RPDULoadDevBankEntry_Object = MibTableRow
rPDULoadDevBankEntry = _RPDULoadDevBankEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1)
)
rPDULoadDevBankEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDULoadDevBankIndex"),
)
if mibBuilder.loadTexts:
    rPDULoadDevBankEntry.setStatus("mandatory")
_RPDULoadDevBankIndex_Type = Integer32
_RPDULoadDevBankIndex_Object = MibTableColumn
rPDULoadDevBankIndex = _RPDULoadDevBankIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 1),
    _RPDULoadDevBankIndex_Type()
)
rPDULoadDevBankIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadDevBankIndex.setStatus("mandatory")
_RPDULoadDevBankNumber_Type = Integer32
_RPDULoadDevBankNumber_Object = MibTableColumn
rPDULoadDevBankNumber = _RPDULoadDevBankNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 2),
    _RPDULoadDevBankNumber_Type()
)
rPDULoadDevBankNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadDevBankNumber.setStatus("mandatory")
_RPDULoadDevBankMaxLoad_Type = Integer32
_RPDULoadDevBankMaxLoad_Object = MibTableColumn
rPDULoadDevBankMaxLoad = _RPDULoadDevBankMaxLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 6, 1, 3),
    _RPDULoadDevBankMaxLoad_Type()
)
rPDULoadDevBankMaxLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadDevBankMaxLoad.setStatus("mandatory")
_RPDULoadDevMaxOutletTableSize_Type = Integer32
_RPDULoadDevMaxOutletTableSize_Object = MibScalar
rPDULoadDevMaxOutletTableSize = _RPDULoadDevMaxOutletTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 7),
    _RPDULoadDevMaxOutletTableSize_Type()
)
rPDULoadDevMaxOutletTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadDevMaxOutletTableSize.setStatus("mandatory")
_RPDULoadDevMaxOutletTable_Object = MibTable
rPDULoadDevMaxOutletTable = _RPDULoadDevMaxOutletTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8)
)
if mibBuilder.loadTexts:
    rPDULoadDevMaxOutletTable.setStatus("mandatory")
_RPDULoadDevMaxOutletEntry_Object = MibTableRow
rPDULoadDevMaxOutletEntry = _RPDULoadDevMaxOutletEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1)
)
rPDULoadDevMaxOutletEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDULoadDevOutletIndex"),
)
if mibBuilder.loadTexts:
    rPDULoadDevMaxOutletEntry.setStatus("mandatory")
_RPDULoadDevOutletIndex_Type = Integer32
_RPDULoadDevOutletIndex_Object = MibTableColumn
rPDULoadDevOutletIndex = _RPDULoadDevOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 1),
    _RPDULoadDevOutletIndex_Type()
)
rPDULoadDevOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadDevOutletIndex.setStatus("mandatory")
_RPDULoadDevOutletNumber_Type = Integer32
_RPDULoadDevOutletNumber_Object = MibTableColumn
rPDULoadDevOutletNumber = _RPDULoadDevOutletNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 2),
    _RPDULoadDevOutletNumber_Type()
)
rPDULoadDevOutletNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadDevOutletNumber.setStatus("mandatory")
_RPDULoadDevMaxOutletLoad_Type = Integer32
_RPDULoadDevMaxOutletLoad_Object = MibTableColumn
rPDULoadDevMaxOutletLoad = _RPDULoadDevMaxOutletLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 1, 8, 1, 3),
    _RPDULoadDevMaxOutletLoad_Type()
)
rPDULoadDevMaxOutletLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadDevMaxOutletLoad.setStatus("mandatory")
_RPDULoadPhaseConfig_ObjectIdentity = ObjectIdentity
rPDULoadPhaseConfig = _RPDULoadPhaseConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2)
)
_RPDULoadPhaseConfigTable_Object = MibTable
rPDULoadPhaseConfigTable = _RPDULoadPhaseConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1)
)
if mibBuilder.loadTexts:
    rPDULoadPhaseConfigTable.setStatus("mandatory")
_RPDULoadPhaseConfigEntry_Object = MibTableRow
rPDULoadPhaseConfigEntry = _RPDULoadPhaseConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1)
)
rPDULoadPhaseConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDULoadPhaseConfigIndex"),
)
if mibBuilder.loadTexts:
    rPDULoadPhaseConfigEntry.setStatus("mandatory")


class _RPDULoadPhaseConfigIndex_Type(Integer32):
    """Custom type rPDULoadPhaseConfigIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_RPDULoadPhaseConfigIndex_Type.__name__ = "Integer32"
_RPDULoadPhaseConfigIndex_Object = MibTableColumn
rPDULoadPhaseConfigIndex = _RPDULoadPhaseConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 1),
    _RPDULoadPhaseConfigIndex_Type()
)
rPDULoadPhaseConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadPhaseConfigIndex.setStatus("mandatory")
_RPDULoadPhaseConfigLowLoadThreshold_Type = Integer32
_RPDULoadPhaseConfigLowLoadThreshold_Object = MibTableColumn
rPDULoadPhaseConfigLowLoadThreshold = _RPDULoadPhaseConfigLowLoadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 2),
    _RPDULoadPhaseConfigLowLoadThreshold_Type()
)
rPDULoadPhaseConfigLowLoadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDULoadPhaseConfigLowLoadThreshold.setStatus("mandatory")
_RPDULoadPhaseConfigNearOverloadThreshold_Type = Integer32
_RPDULoadPhaseConfigNearOverloadThreshold_Object = MibTableColumn
rPDULoadPhaseConfigNearOverloadThreshold = _RPDULoadPhaseConfigNearOverloadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 3),
    _RPDULoadPhaseConfigNearOverloadThreshold_Type()
)
rPDULoadPhaseConfigNearOverloadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDULoadPhaseConfigNearOverloadThreshold.setStatus("mandatory")
_RPDULoadPhaseConfigOverloadThreshold_Type = Integer32
_RPDULoadPhaseConfigOverloadThreshold_Object = MibTableColumn
rPDULoadPhaseConfigOverloadThreshold = _RPDULoadPhaseConfigOverloadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 4),
    _RPDULoadPhaseConfigOverloadThreshold_Type()
)
rPDULoadPhaseConfigOverloadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDULoadPhaseConfigOverloadThreshold.setStatus("mandatory")


class _RPDULoadPhaseConfigAlarm_Type(Integer32):
    """Custom type rPDULoadPhaseConfigAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("nearOverCurrentAlarm", 3),
          ("noLoadAlarm", 1),
          ("overCurrentAlarm", 4),
          ("underCurrentAlarm", 2))
    )


_RPDULoadPhaseConfigAlarm_Type.__name__ = "Integer32"
_RPDULoadPhaseConfigAlarm_Object = MibTableColumn
rPDULoadPhaseConfigAlarm = _RPDULoadPhaseConfigAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 2, 1, 1, 5),
    _RPDULoadPhaseConfigAlarm_Type()
)
rPDULoadPhaseConfigAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadPhaseConfigAlarm.setStatus("mandatory")
_RPDULoadStatus_ObjectIdentity = ObjectIdentity
rPDULoadStatus = _RPDULoadStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3)
)
_RPDULoadStatusTable_Object = MibTable
rPDULoadStatusTable = _RPDULoadStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1)
)
if mibBuilder.loadTexts:
    rPDULoadStatusTable.setStatus("mandatory")
_RPDULoadStatusEntry_Object = MibTableRow
rPDULoadStatusEntry = _RPDULoadStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1)
)
rPDULoadStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDULoadStatusIndex"),
)
if mibBuilder.loadTexts:
    rPDULoadStatusEntry.setStatus("mandatory")
_RPDULoadStatusIndex_Type = Integer32
_RPDULoadStatusIndex_Object = MibTableColumn
rPDULoadStatusIndex = _RPDULoadStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 1),
    _RPDULoadStatusIndex_Type()
)
rPDULoadStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadStatusIndex.setStatus("mandatory")
_RPDULoadStatusLoad_Type = Gauge32
_RPDULoadStatusLoad_Object = MibTableColumn
rPDULoadStatusLoad = _RPDULoadStatusLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 2),
    _RPDULoadStatusLoad_Type()
)
rPDULoadStatusLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadStatusLoad.setStatus("mandatory")


class _RPDULoadStatusLoadState_Type(Integer32):
    """Custom type rPDULoadStatusLoadState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("phaseLoadLow", 2),
          ("phaseLoadNearOverload", 3),
          ("phaseLoadNormal", 1),
          ("phaseLoadOverload", 4))
    )


_RPDULoadStatusLoadState_Type.__name__ = "Integer32"
_RPDULoadStatusLoadState_Object = MibTableColumn
rPDULoadStatusLoadState = _RPDULoadStatusLoadState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 3),
    _RPDULoadStatusLoadState_Type()
)
rPDULoadStatusLoadState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadStatusLoadState.setStatus("mandatory")
_RPDULoadStatusPhaseNumber_Type = Integer32
_RPDULoadStatusPhaseNumber_Object = MibTableColumn
rPDULoadStatusPhaseNumber = _RPDULoadStatusPhaseNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 4),
    _RPDULoadStatusPhaseNumber_Type()
)
rPDULoadStatusPhaseNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadStatusPhaseNumber.setStatus("mandatory")
_RPDULoadStatusBankNumber_Type = Integer32
_RPDULoadStatusBankNumber_Object = MibTableColumn
rPDULoadStatusBankNumber = _RPDULoadStatusBankNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 3, 1, 1, 5),
    _RPDULoadStatusBankNumber_Type()
)
rPDULoadStatusBankNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadStatusBankNumber.setStatus("mandatory")
_RPDULoadBankConfig_ObjectIdentity = ObjectIdentity
rPDULoadBankConfig = _RPDULoadBankConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4)
)
_RPDULoadBankConfigTable_Object = MibTable
rPDULoadBankConfigTable = _RPDULoadBankConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1)
)
if mibBuilder.loadTexts:
    rPDULoadBankConfigTable.setStatus("mandatory")
_RPDULoadBankConfigEntry_Object = MibTableRow
rPDULoadBankConfigEntry = _RPDULoadBankConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1)
)
rPDULoadBankConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDULoadBankConfigIndex"),
)
if mibBuilder.loadTexts:
    rPDULoadBankConfigEntry.setStatus("mandatory")
_RPDULoadBankConfigIndex_Type = Integer32
_RPDULoadBankConfigIndex_Object = MibTableColumn
rPDULoadBankConfigIndex = _RPDULoadBankConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 1),
    _RPDULoadBankConfigIndex_Type()
)
rPDULoadBankConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadBankConfigIndex.setStatus("mandatory")
_RPDULoadBankConfigLowLoadThreshold_Type = Integer32
_RPDULoadBankConfigLowLoadThreshold_Object = MibTableColumn
rPDULoadBankConfigLowLoadThreshold = _RPDULoadBankConfigLowLoadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 2),
    _RPDULoadBankConfigLowLoadThreshold_Type()
)
rPDULoadBankConfigLowLoadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDULoadBankConfigLowLoadThreshold.setStatus("mandatory")
_RPDULoadBankConfigNearOverloadThreshold_Type = Integer32
_RPDULoadBankConfigNearOverloadThreshold_Object = MibTableColumn
rPDULoadBankConfigNearOverloadThreshold = _RPDULoadBankConfigNearOverloadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 3),
    _RPDULoadBankConfigNearOverloadThreshold_Type()
)
rPDULoadBankConfigNearOverloadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDULoadBankConfigNearOverloadThreshold.setStatus("mandatory")
_RPDULoadBankConfigOverloadThreshold_Type = Integer32
_RPDULoadBankConfigOverloadThreshold_Object = MibTableColumn
rPDULoadBankConfigOverloadThreshold = _RPDULoadBankConfigOverloadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 4),
    _RPDULoadBankConfigOverloadThreshold_Type()
)
rPDULoadBankConfigOverloadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDULoadBankConfigOverloadThreshold.setStatus("mandatory")


class _RPDULoadBankConfigAlarm_Type(Integer32):
    """Custom type rPDULoadBankConfigAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("nearOverCurrentAlarm", 3),
          ("noLoadAlarm", 1),
          ("overCurrentAlarm", 4),
          ("underCurrentAlarm", 2))
    )


_RPDULoadBankConfigAlarm_Type.__name__ = "Integer32"
_RPDULoadBankConfigAlarm_Object = MibTableColumn
rPDULoadBankConfigAlarm = _RPDULoadBankConfigAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 2, 4, 1, 1, 5),
    _RPDULoadBankConfigAlarm_Type()
)
rPDULoadBankConfigAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDULoadBankConfigAlarm.setStatus("mandatory")
_RPDUOutlet_ObjectIdentity = ObjectIdentity
rPDUOutlet = _RPDUOutlet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3)
)
_RPDUOutletDevice_ObjectIdentity = ObjectIdentity
rPDUOutletDevice = _RPDUOutletDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1)
)


class _RPDUOutletDevCommand_Type(Integer32):
    """Custom type rPDUOutletDevCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("cancelAllPendingCommands", 8),
          ("delayedAllOff", 6),
          ("delayedAllOn", 5),
          ("delayedAllReboot", 7),
          ("immediateAllOff", 3),
          ("immediateAllOn", 2),
          ("immediateAllReboot", 4),
          ("noCommandAll", 1))
    )


_RPDUOutletDevCommand_Type.__name__ = "Integer32"
_RPDUOutletDevCommand_Object = MibScalar
rPDUOutletDevCommand = _RPDUOutletDevCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 1),
    _RPDUOutletDevCommand_Type()
)
rPDUOutletDevCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletDevCommand.setStatus("mandatory")
_RPDUOutletDevColdstartDelay_Type = Integer32
_RPDUOutletDevColdstartDelay_Object = MibScalar
rPDUOutletDevColdstartDelay = _RPDUOutletDevColdstartDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 2),
    _RPDUOutletDevColdstartDelay_Type()
)
rPDUOutletDevColdstartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletDevColdstartDelay.setStatus("mandatory")
_RPDUOutletDevNumCntrlOutlets_Type = Integer32
_RPDUOutletDevNumCntrlOutlets_Object = MibScalar
rPDUOutletDevNumCntrlOutlets = _RPDUOutletDevNumCntrlOutlets_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 3),
    _RPDUOutletDevNumCntrlOutlets_Type()
)
rPDUOutletDevNumCntrlOutlets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletDevNumCntrlOutlets.setStatus("mandatory")
_RPDUOutletDevNumTotalOutlets_Type = Integer32
_RPDUOutletDevNumTotalOutlets_Object = MibScalar
rPDUOutletDevNumTotalOutlets = _RPDUOutletDevNumTotalOutlets_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 4),
    _RPDUOutletDevNumTotalOutlets_Type()
)
rPDUOutletDevNumTotalOutlets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletDevNumTotalOutlets.setStatus("mandatory")
_RPDUOutletDevMonitoredOutlets_Type = Integer32
_RPDUOutletDevMonitoredOutlets_Object = MibScalar
rPDUOutletDevMonitoredOutlets = _RPDUOutletDevMonitoredOutlets_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 1, 5),
    _RPDUOutletDevMonitoredOutlets_Type()
)
rPDUOutletDevMonitoredOutlets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletDevMonitoredOutlets.setStatus("mandatory")
_RPDUOutletPhase_ObjectIdentity = ObjectIdentity
rPDUOutletPhase = _RPDUOutletPhase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2)
)
_RPDUOutletPhaseTable_Object = MibTable
rPDUOutletPhaseTable = _RPDUOutletPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1)
)
if mibBuilder.loadTexts:
    rPDUOutletPhaseTable.setStatus("mandatory")
_RPDUOutletPhaseEntry_Object = MibTableRow
rPDUOutletPhaseEntry = _RPDUOutletPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1)
)
rPDUOutletPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDUOutletPhaseIndex"),
)
if mibBuilder.loadTexts:
    rPDUOutletPhaseEntry.setStatus("mandatory")


class _RPDUOutletPhaseIndex_Type(Integer32):
    """Custom type rPDUOutletPhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_RPDUOutletPhaseIndex_Type.__name__ = "Integer32"
_RPDUOutletPhaseIndex_Object = MibTableColumn
rPDUOutletPhaseIndex = _RPDUOutletPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1, 1),
    _RPDUOutletPhaseIndex_Type()
)
rPDUOutletPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletPhaseIndex.setStatus("mandatory")


class _RPDUOutletPhaseOverloadRestriction_Type(Integer32):
    """Custom type rPDUOutletPhaseOverloadRestriction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("alwaysAllowTurnON", 1),
          ("restrictOnNearOverload", 2),
          ("restrictOnOverload", 3))
    )


_RPDUOutletPhaseOverloadRestriction_Type.__name__ = "Integer32"
_RPDUOutletPhaseOverloadRestriction_Object = MibTableColumn
rPDUOutletPhaseOverloadRestriction = _RPDUOutletPhaseOverloadRestriction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 2, 1, 1, 2),
    _RPDUOutletPhaseOverloadRestriction_Type()
)
rPDUOutletPhaseOverloadRestriction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletPhaseOverloadRestriction.setStatus("mandatory")
_RPDUOutletControl_ObjectIdentity = ObjectIdentity
rPDUOutletControl = _RPDUOutletControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3)
)
_RPDUOutletControlTable_Object = MibTable
rPDUOutletControlTable = _RPDUOutletControlTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1)
)
if mibBuilder.loadTexts:
    rPDUOutletControlTable.setStatus("mandatory")
_RPDUOutletControlEntry_Object = MibTableRow
rPDUOutletControlEntry = _RPDUOutletControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1)
)
rPDUOutletControlEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDUOutletControlIndex"),
)
if mibBuilder.loadTexts:
    rPDUOutletControlEntry.setStatus("mandatory")
_RPDUOutletControlIndex_Type = Integer32
_RPDUOutletControlIndex_Object = MibTableColumn
rPDUOutletControlIndex = _RPDUOutletControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 1),
    _RPDUOutletControlIndex_Type()
)
rPDUOutletControlIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletControlIndex.setStatus("mandatory")
_RPDUOutletControlOutletName_Type = DisplayString
_RPDUOutletControlOutletName_Object = MibTableColumn
rPDUOutletControlOutletName = _RPDUOutletControlOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 2),
    _RPDUOutletControlOutletName_Type()
)
rPDUOutletControlOutletName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletControlOutletName.setStatus("mandatory")


class _RPDUOutletControlOutletPhase_Type(Integer32):
    """Custom type rPDUOutletControlOutletPhase based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase1-2", 4),
          ("phase2", 2),
          ("phase2-3", 5),
          ("phase3", 3),
          ("phase3-1", 6))
    )


_RPDUOutletControlOutletPhase_Type.__name__ = "Integer32"
_RPDUOutletControlOutletPhase_Object = MibTableColumn
rPDUOutletControlOutletPhase = _RPDUOutletControlOutletPhase_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 3),
    _RPDUOutletControlOutletPhase_Type()
)
rPDUOutletControlOutletPhase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletControlOutletPhase.setStatus("mandatory")


class _RPDUOutletControlOutletCommand_Type(Integer32):
    """Custom type rPDUOutletControlOutletCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("cancelPendingCommand", 7),
          ("delayedOff", 5),
          ("delayedOn", 4),
          ("delayedReboot", 6),
          ("immediateOff", 2),
          ("immediateOn", 1),
          ("immediateReboot", 3))
    )


_RPDUOutletControlOutletCommand_Type.__name__ = "Integer32"
_RPDUOutletControlOutletCommand_Object = MibTableColumn
rPDUOutletControlOutletCommand = _RPDUOutletControlOutletCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 4),
    _RPDUOutletControlOutletCommand_Type()
)
rPDUOutletControlOutletCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletControlOutletCommand.setStatus("mandatory")
_RPDUOutletControlOutletBank_Type = Integer32
_RPDUOutletControlOutletBank_Object = MibTableColumn
rPDUOutletControlOutletBank = _RPDUOutletControlOutletBank_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 3, 1, 1, 5),
    _RPDUOutletControlOutletBank_Type()
)
rPDUOutletControlOutletBank.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletControlOutletBank.setStatus("mandatory")
_RPDUOutletConfig_ObjectIdentity = ObjectIdentity
rPDUOutletConfig = _RPDUOutletConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4)
)
_RPDUOutletConfigTable_Object = MibTable
rPDUOutletConfigTable = _RPDUOutletConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1)
)
if mibBuilder.loadTexts:
    rPDUOutletConfigTable.setStatus("mandatory")
_RPDUOutletConfigEntry_Object = MibTableRow
rPDUOutletConfigEntry = _RPDUOutletConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1)
)
rPDUOutletConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDUOutletConfigIndex"),
)
if mibBuilder.loadTexts:
    rPDUOutletConfigEntry.setStatus("mandatory")
_RPDUOutletConfigIndex_Type = Integer32
_RPDUOutletConfigIndex_Object = MibTableColumn
rPDUOutletConfigIndex = _RPDUOutletConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 1),
    _RPDUOutletConfigIndex_Type()
)
rPDUOutletConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletConfigIndex.setStatus("mandatory")
_RPDUOutletConfigOutletName_Type = DisplayString
_RPDUOutletConfigOutletName_Object = MibTableColumn
rPDUOutletConfigOutletName = _RPDUOutletConfigOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 2),
    _RPDUOutletConfigOutletName_Type()
)
rPDUOutletConfigOutletName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletConfigOutletName.setStatus("mandatory")


class _RPDUOutletConfigOutletPhase_Type(Integer32):
    """Custom type rPDUOutletConfigOutletPhase based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase1-2", 4),
          ("phase2", 2),
          ("phase2-3", 5),
          ("phase3", 3),
          ("phase3-1", 6))
    )


_RPDUOutletConfigOutletPhase_Type.__name__ = "Integer32"
_RPDUOutletConfigOutletPhase_Object = MibTableColumn
rPDUOutletConfigOutletPhase = _RPDUOutletConfigOutletPhase_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 3),
    _RPDUOutletConfigOutletPhase_Type()
)
rPDUOutletConfigOutletPhase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletConfigOutletPhase.setStatus("mandatory")
_RPDUOutletConfigPowerOnTime_Type = Integer32
_RPDUOutletConfigPowerOnTime_Object = MibTableColumn
rPDUOutletConfigPowerOnTime = _RPDUOutletConfigPowerOnTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 4),
    _RPDUOutletConfigPowerOnTime_Type()
)
rPDUOutletConfigPowerOnTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletConfigPowerOnTime.setStatus("mandatory")
_RPDUOutletConfigPowerOffTime_Type = Integer32
_RPDUOutletConfigPowerOffTime_Object = MibTableColumn
rPDUOutletConfigPowerOffTime = _RPDUOutletConfigPowerOffTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 5),
    _RPDUOutletConfigPowerOffTime_Type()
)
rPDUOutletConfigPowerOffTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletConfigPowerOffTime.setStatus("mandatory")
_RPDUOutletConfigRebootDuration_Type = Integer32
_RPDUOutletConfigRebootDuration_Object = MibTableColumn
rPDUOutletConfigRebootDuration = _RPDUOutletConfigRebootDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 6),
    _RPDUOutletConfigRebootDuration_Type()
)
rPDUOutletConfigRebootDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletConfigRebootDuration.setStatus("mandatory")
_RPDUOutletConfigOutletBank_Type = Integer32
_RPDUOutletConfigOutletBank_Object = MibTableColumn
rPDUOutletConfigOutletBank = _RPDUOutletConfigOutletBank_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 1, 1, 7),
    _RPDUOutletConfigOutletBank_Type()
)
rPDUOutletConfigOutletBank.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletConfigOutletBank.setStatus("mandatory")
_RPDUOutletConfigMonitoredTableSize_Type = Integer32
_RPDUOutletConfigMonitoredTableSize_Object = MibScalar
rPDUOutletConfigMonitoredTableSize = _RPDUOutletConfigMonitoredTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 2),
    _RPDUOutletConfigMonitoredTableSize_Type()
)
rPDUOutletConfigMonitoredTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletConfigMonitoredTableSize.setStatus("mandatory")
_RPDUOutletConfigMonitoredTable_Object = MibTable
rPDUOutletConfigMonitoredTable = _RPDUOutletConfigMonitoredTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3)
)
if mibBuilder.loadTexts:
    rPDUOutletConfigMonitoredTable.setStatus("mandatory")
_RPDUOutletConfigMonitoredEntry_Object = MibTableRow
rPDUOutletConfigMonitoredEntry = _RPDUOutletConfigMonitoredEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1)
)
rPDUOutletConfigMonitoredEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDUOutletConfigMonitoredIndex"),
)
if mibBuilder.loadTexts:
    rPDUOutletConfigMonitoredEntry.setStatus("mandatory")
_RPDUOutletConfigMonitoredIndex_Type = Integer32
_RPDUOutletConfigMonitoredIndex_Object = MibTableColumn
rPDUOutletConfigMonitoredIndex = _RPDUOutletConfigMonitoredIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 1),
    _RPDUOutletConfigMonitoredIndex_Type()
)
rPDUOutletConfigMonitoredIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletConfigMonitoredIndex.setStatus("mandatory")
_RPDUOutletConfigMonitoredName_Type = DisplayString
_RPDUOutletConfigMonitoredName_Object = MibTableColumn
rPDUOutletConfigMonitoredName = _RPDUOutletConfigMonitoredName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 2),
    _RPDUOutletConfigMonitoredName_Type()
)
rPDUOutletConfigMonitoredName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletConfigMonitoredName.setStatus("mandatory")
_RPDUOutletConfigMonitoredNumber_Type = Integer32
_RPDUOutletConfigMonitoredNumber_Object = MibTableColumn
rPDUOutletConfigMonitoredNumber = _RPDUOutletConfigMonitoredNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 3),
    _RPDUOutletConfigMonitoredNumber_Type()
)
rPDUOutletConfigMonitoredNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletConfigMonitoredNumber.setStatus("mandatory")
_RPDUOutletConfigMonitoredLowLoadThreshold_Type = Integer32
_RPDUOutletConfigMonitoredLowLoadThreshold_Object = MibTableColumn
rPDUOutletConfigMonitoredLowLoadThreshold = _RPDUOutletConfigMonitoredLowLoadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 4),
    _RPDUOutletConfigMonitoredLowLoadThreshold_Type()
)
rPDUOutletConfigMonitoredLowLoadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletConfigMonitoredLowLoadThreshold.setStatus("mandatory")
_RPDUOutletConfigMonitoredNearOverloadThreshold_Type = Integer32
_RPDUOutletConfigMonitoredNearOverloadThreshold_Object = MibTableColumn
rPDUOutletConfigMonitoredNearOverloadThreshold = _RPDUOutletConfigMonitoredNearOverloadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 5),
    _RPDUOutletConfigMonitoredNearOverloadThreshold_Type()
)
rPDUOutletConfigMonitoredNearOverloadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletConfigMonitoredNearOverloadThreshold.setStatus("mandatory")
_RPDUOutletConfigMonitoredOverloadThreshold_Type = Integer32
_RPDUOutletConfigMonitoredOverloadThreshold_Object = MibTableColumn
rPDUOutletConfigMonitoredOverloadThreshold = _RPDUOutletConfigMonitoredOverloadThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 4, 3, 1, 6),
    _RPDUOutletConfigMonitoredOverloadThreshold_Type()
)
rPDUOutletConfigMonitoredOverloadThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletConfigMonitoredOverloadThreshold.setStatus("mandatory")
_RPDUOutletStatus_ObjectIdentity = ObjectIdentity
rPDUOutletStatus = _RPDUOutletStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5)
)
_RPDUOutletStatusTable_Object = MibTable
rPDUOutletStatusTable = _RPDUOutletStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1)
)
if mibBuilder.loadTexts:
    rPDUOutletStatusTable.setStatus("mandatory")
_RPDUOutletStatusEntry_Object = MibTableRow
rPDUOutletStatusEntry = _RPDUOutletStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1)
)
rPDUOutletStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDUOutletStatusIndex"),
)
if mibBuilder.loadTexts:
    rPDUOutletStatusEntry.setStatus("mandatory")
_RPDUOutletStatusIndex_Type = Integer32
_RPDUOutletStatusIndex_Object = MibTableColumn
rPDUOutletStatusIndex = _RPDUOutletStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 1),
    _RPDUOutletStatusIndex_Type()
)
rPDUOutletStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletStatusIndex.setStatus("mandatory")
_RPDUOutletStatusOutletName_Type = DisplayString
_RPDUOutletStatusOutletName_Object = MibTableColumn
rPDUOutletStatusOutletName = _RPDUOutletStatusOutletName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 2),
    _RPDUOutletStatusOutletName_Type()
)
rPDUOutletStatusOutletName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletStatusOutletName.setStatus("mandatory")


class _RPDUOutletStatusOutletPhase_Type(Integer32):
    """Custom type rPDUOutletStatusOutletPhase based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase1-2", 4),
          ("phase2", 2),
          ("phase2-3", 5),
          ("phase3", 3),
          ("phase3-1", 6))
    )


_RPDUOutletStatusOutletPhase_Type.__name__ = "Integer32"
_RPDUOutletStatusOutletPhase_Object = MibTableColumn
rPDUOutletStatusOutletPhase = _RPDUOutletStatusOutletPhase_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 3),
    _RPDUOutletStatusOutletPhase_Type()
)
rPDUOutletStatusOutletPhase.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletStatusOutletPhase.setStatus("mandatory")


class _RPDUOutletStatusOutletState_Type(Integer32):
    """Custom type rPDUOutletStatusOutletState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("outletStatusOff", 2),
          ("outletStatusOn", 1))
    )


_RPDUOutletStatusOutletState_Type.__name__ = "Integer32"
_RPDUOutletStatusOutletState_Object = MibTableColumn
rPDUOutletStatusOutletState = _RPDUOutletStatusOutletState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 4),
    _RPDUOutletStatusOutletState_Type()
)
rPDUOutletStatusOutletState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletStatusOutletState.setStatus("mandatory")


class _RPDUOutletStatusCommandPending_Type(Integer32):
    """Custom type rPDUOutletStatusCommandPending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("outletStatusCommandPending", 1),
          ("outletStatusNoCommandPending", 2))
    )


_RPDUOutletStatusCommandPending_Type.__name__ = "Integer32"
_RPDUOutletStatusCommandPending_Object = MibTableColumn
rPDUOutletStatusCommandPending = _RPDUOutletStatusCommandPending_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 5),
    _RPDUOutletStatusCommandPending_Type()
)
rPDUOutletStatusCommandPending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletStatusCommandPending.setStatus("mandatory")
_RPDUOutletStatusOutletBank_Type = Integer32
_RPDUOutletStatusOutletBank_Object = MibTableColumn
rPDUOutletStatusOutletBank = _RPDUOutletStatusOutletBank_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 6),
    _RPDUOutletStatusOutletBank_Type()
)
rPDUOutletStatusOutletBank.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletStatusOutletBank.setStatus("mandatory")
_RPDUOutletStatusLoad_Type = Gauge32
_RPDUOutletStatusLoad_Object = MibTableColumn
rPDUOutletStatusLoad = _RPDUOutletStatusLoad_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 5, 1, 1, 7),
    _RPDUOutletStatusLoad_Type()
)
rPDUOutletStatusLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletStatusLoad.setStatus("mandatory")
_RPDUOutletBank_ObjectIdentity = ObjectIdentity
rPDUOutletBank = _RPDUOutletBank_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6)
)
_RPDUOutletBankTable_Object = MibTable
rPDUOutletBankTable = _RPDUOutletBankTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1)
)
if mibBuilder.loadTexts:
    rPDUOutletBankTable.setStatus("mandatory")
_RPDUOutletBankEntry_Object = MibTableRow
rPDUOutletBankEntry = _RPDUOutletBankEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1)
)
rPDUOutletBankEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDUOutletBankIndex"),
)
if mibBuilder.loadTexts:
    rPDUOutletBankEntry.setStatus("mandatory")
_RPDUOutletBankIndex_Type = Integer32
_RPDUOutletBankIndex_Object = MibTableColumn
rPDUOutletBankIndex = _RPDUOutletBankIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1, 1),
    _RPDUOutletBankIndex_Type()
)
rPDUOutletBankIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUOutletBankIndex.setStatus("mandatory")


class _RPDUOutletBankOverloadRestriction_Type(Integer32):
    """Custom type rPDUOutletBankOverloadRestriction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("alwaysAllowTurnON", 1),
          ("restrictOnNearOverload", 2),
          ("restrictOnOverload", 3))
    )


_RPDUOutletBankOverloadRestriction_Type.__name__ = "Integer32"
_RPDUOutletBankOverloadRestriction_Object = MibTableColumn
rPDUOutletBankOverloadRestriction = _RPDUOutletBankOverloadRestriction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 3, 6, 1, 1, 2),
    _RPDUOutletBankOverloadRestriction_Type()
)
rPDUOutletBankOverloadRestriction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDUOutletBankOverloadRestriction.setStatus("mandatory")
_RPDUPowerSupply_ObjectIdentity = ObjectIdentity
rPDUPowerSupply = _RPDUPowerSupply_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4)
)
_RPDUPowerSupplyDevice_ObjectIdentity = ObjectIdentity
rPDUPowerSupplyDevice = _RPDUPowerSupplyDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1)
)


class _RPDUPowerSupply1Status_Type(Integer32):
    """Custom type rPDUPowerSupply1Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("powerSupplyOneFailed", 2),
          ("powerSupplyOneOk", 1))
    )


_RPDUPowerSupply1Status_Type.__name__ = "Integer32"
_RPDUPowerSupply1Status_Object = MibScalar
rPDUPowerSupply1Status = _RPDUPowerSupply1Status_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 1),
    _RPDUPowerSupply1Status_Type()
)
rPDUPowerSupply1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUPowerSupply1Status.setStatus("mandatory")


class _RPDUPowerSupply2Status_Type(Integer32):
    """Custom type rPDUPowerSupply2Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("powerSupplyTwoFailed", 2),
          ("powerSupplyTwoNotPresent", 3),
          ("powerSupplyTwoOk", 1))
    )


_RPDUPowerSupply2Status_Type.__name__ = "Integer32"
_RPDUPowerSupply2Status_Object = MibScalar
rPDUPowerSupply2Status = _RPDUPowerSupply2Status_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 2),
    _RPDUPowerSupply2Status_Type()
)
rPDUPowerSupply2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUPowerSupply2Status.setStatus("mandatory")


class _RPDUPowerSupplyAlarm_Type(Integer32):
    """Custom type rPDUPowerSupplyAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("allAvailablePowerSuppliesOK", 1),
          ("powerSupplyOneFailed", 2),
          ("powerSupplyOneandTwoFailed", 4),
          ("powerSupplyTwoFailed", 3))
    )


_RPDUPowerSupplyAlarm_Type.__name__ = "Integer32"
_RPDUPowerSupplyAlarm_Object = MibScalar
rPDUPowerSupplyAlarm = _RPDUPowerSupplyAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 4, 1, 3),
    _RPDUPowerSupplyAlarm_Type()
)
rPDUPowerSupplyAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUPowerSupplyAlarm.setStatus("mandatory")
_RPDUStatus_ObjectIdentity = ObjectIdentity
rPDUStatus = _RPDUStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5)
)
_RPDUStatusBankTableSize_Type = Integer32
_RPDUStatusBankTableSize_Object = MibScalar
rPDUStatusBankTableSize = _RPDUStatusBankTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 1),
    _RPDUStatusBankTableSize_Type()
)
rPDUStatusBankTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUStatusBankTableSize.setStatus("mandatory")
_RPDUStatusBankTable_Object = MibTable
rPDUStatusBankTable = _RPDUStatusBankTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2)
)
if mibBuilder.loadTexts:
    rPDUStatusBankTable.setStatus("mandatory")
_RPDUStatusBankEntry_Object = MibTableRow
rPDUStatusBankEntry = _RPDUStatusBankEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1)
)
rPDUStatusBankEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDUStatusBankIndex"),
)
if mibBuilder.loadTexts:
    rPDUStatusBankEntry.setStatus("mandatory")
_RPDUStatusBankIndex_Type = Integer32
_RPDUStatusBankIndex_Object = MibTableColumn
rPDUStatusBankIndex = _RPDUStatusBankIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 1),
    _RPDUStatusBankIndex_Type()
)
rPDUStatusBankIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUStatusBankIndex.setStatus("mandatory")
_RPDUStatusBankNumber_Type = Integer32
_RPDUStatusBankNumber_Object = MibTableColumn
rPDUStatusBankNumber = _RPDUStatusBankNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 2),
    _RPDUStatusBankNumber_Type()
)
rPDUStatusBankNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUStatusBankNumber.setStatus("mandatory")


class _RPDUStatusBankState_Type(Integer32):
    """Custom type rPDUStatusBankState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bankLoadLow", 2),
          ("bankLoadNearOverload", 3),
          ("bankLoadNormal", 1),
          ("bankLoadOverload", 4))
    )


_RPDUStatusBankState_Type.__name__ = "Integer32"
_RPDUStatusBankState_Object = MibTableColumn
rPDUStatusBankState = _RPDUStatusBankState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 2, 1, 3),
    _RPDUStatusBankState_Type()
)
rPDUStatusBankState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUStatusBankState.setStatus("mandatory")
_RPDUStatusPhaseTableSize_Type = Integer32
_RPDUStatusPhaseTableSize_Object = MibScalar
rPDUStatusPhaseTableSize = _RPDUStatusPhaseTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 3),
    _RPDUStatusPhaseTableSize_Type()
)
rPDUStatusPhaseTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUStatusPhaseTableSize.setStatus("mandatory")
_RPDUStatusPhaseTable_Object = MibTable
rPDUStatusPhaseTable = _RPDUStatusPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4)
)
if mibBuilder.loadTexts:
    rPDUStatusPhaseTable.setStatus("mandatory")
_RPDUStatusPhaseEntry_Object = MibTableRow
rPDUStatusPhaseEntry = _RPDUStatusPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1)
)
rPDUStatusPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDUStatusPhaseIndex"),
)
if mibBuilder.loadTexts:
    rPDUStatusPhaseEntry.setStatus("mandatory")
_RPDUStatusPhaseIndex_Type = Integer32
_RPDUStatusPhaseIndex_Object = MibTableColumn
rPDUStatusPhaseIndex = _RPDUStatusPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 1),
    _RPDUStatusPhaseIndex_Type()
)
rPDUStatusPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUStatusPhaseIndex.setStatus("mandatory")
_RPDUStatusPhaseNumber_Type = Integer32
_RPDUStatusPhaseNumber_Object = MibTableColumn
rPDUStatusPhaseNumber = _RPDUStatusPhaseNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 2),
    _RPDUStatusPhaseNumber_Type()
)
rPDUStatusPhaseNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUStatusPhaseNumber.setStatus("mandatory")


class _RPDUStatusPhaseState_Type(Integer32):
    """Custom type rPDUStatusPhaseState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("phaseLoadLow", 2),
          ("phaseLoadNearOverload", 3),
          ("phaseLoadNormal", 1),
          ("phaseLoadOverload", 4))
    )


_RPDUStatusPhaseState_Type.__name__ = "Integer32"
_RPDUStatusPhaseState_Object = MibTableColumn
rPDUStatusPhaseState = _RPDUStatusPhaseState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 4, 1, 3),
    _RPDUStatusPhaseState_Type()
)
rPDUStatusPhaseState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUStatusPhaseState.setStatus("mandatory")
_RPDUStatusOutletTableSize_Type = Integer32
_RPDUStatusOutletTableSize_Object = MibScalar
rPDUStatusOutletTableSize = _RPDUStatusOutletTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 5),
    _RPDUStatusOutletTableSize_Type()
)
rPDUStatusOutletTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUStatusOutletTableSize.setStatus("mandatory")
_RPDUStatusOutletTable_Object = MibTable
rPDUStatusOutletTable = _RPDUStatusOutletTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6)
)
if mibBuilder.loadTexts:
    rPDUStatusOutletTable.setStatus("mandatory")
_RPDUStatusOutletEntry_Object = MibTableRow
rPDUStatusOutletEntry = _RPDUStatusOutletEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1)
)
rPDUStatusOutletEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDUStatusOutletIndex"),
)
if mibBuilder.loadTexts:
    rPDUStatusOutletEntry.setStatus("mandatory")
_RPDUStatusOutletIndex_Type = Integer32
_RPDUStatusOutletIndex_Object = MibTableColumn
rPDUStatusOutletIndex = _RPDUStatusOutletIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 1),
    _RPDUStatusOutletIndex_Type()
)
rPDUStatusOutletIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUStatusOutletIndex.setStatus("mandatory")
_RPDUStatusOutletNumber_Type = Integer32
_RPDUStatusOutletNumber_Object = MibTableColumn
rPDUStatusOutletNumber = _RPDUStatusOutletNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 2),
    _RPDUStatusOutletNumber_Type()
)
rPDUStatusOutletNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUStatusOutletNumber.setStatus("mandatory")


class _RPDUStatusOutletState_Type(Integer32):
    """Custom type rPDUStatusOutletState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("outletLoadLow", 2),
          ("outletLoadNearOverload", 3),
          ("outletLoadNormal", 1),
          ("outletLoadOverload", 4))
    )


_RPDUStatusOutletState_Type.__name__ = "Integer32"
_RPDUStatusOutletState_Object = MibTableColumn
rPDUStatusOutletState = _RPDUStatusOutletState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 12, 5, 6, 1, 3),
    _RPDUStatusOutletState_Type()
)
rPDUStatusOutletState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDUStatusOutletState.setStatus("mandatory")
_AirConditioners_ObjectIdentity = ObjectIdentity
airConditioners = _AirConditioners_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13)
)
_AirFM_ObjectIdentity = ObjectIdentity
airFM = _AirFM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1)
)
_AirFMIdent_ObjectIdentity = ObjectIdentity
airFMIdent = _AirFMIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1)
)
_AirFMIdentName_Type = DisplayString
_AirFMIdentName_Object = MibScalar
airFMIdentName = _AirFMIdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 1),
    _AirFMIdentName_Type()
)
airFMIdentName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMIdentName.setStatus("mandatory")
_AirFMIdentTableSize_Type = Integer32
_AirFMIdentTableSize_Object = MibScalar
airFMIdentTableSize = _AirFMIdentTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 2),
    _AirFMIdentTableSize_Type()
)
airFMIdentTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMIdentTableSize.setStatus("mandatory")
_AirFMIdentTable_Object = MibTable
airFMIdentTable = _AirFMIdentTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3)
)
if mibBuilder.loadTexts:
    airFMIdentTable.setStatus("mandatory")
_AirFMIdentEntry_Object = MibTableRow
airFMIdentEntry = _AirFMIdentEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1)
)
airFMIdentEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMIdentModuleIndex"),
)
if mibBuilder.loadTexts:
    airFMIdentEntry.setStatus("mandatory")
_AirFMIdentModuleIndex_Type = Integer32
_AirFMIdentModuleIndex_Object = MibTableColumn
airFMIdentModuleIndex = _AirFMIdentModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 1),
    _AirFMIdentModuleIndex_Type()
)
airFMIdentModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMIdentModuleIndex.setStatus("mandatory")
_AirFMIdentModuleModelNumber_Type = DisplayString
_AirFMIdentModuleModelNumber_Object = MibTableColumn
airFMIdentModuleModelNumber = _AirFMIdentModuleModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 2),
    _AirFMIdentModuleModelNumber_Type()
)
airFMIdentModuleModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMIdentModuleModelNumber.setStatus("mandatory")
_AirFMIdentModuleDateOfMfg_Type = DisplayString
_AirFMIdentModuleDateOfMfg_Object = MibTableColumn
airFMIdentModuleDateOfMfg = _AirFMIdentModuleDateOfMfg_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 3),
    _AirFMIdentModuleDateOfMfg_Type()
)
airFMIdentModuleDateOfMfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMIdentModuleDateOfMfg.setStatus("mandatory")
_AirFMIdentModuleSerialNumber_Type = DisplayString
_AirFMIdentModuleSerialNumber_Object = MibTableColumn
airFMIdentModuleSerialNumber = _AirFMIdentModuleSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 4),
    _AirFMIdentModuleSerialNumber_Type()
)
airFMIdentModuleSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMIdentModuleSerialNumber.setStatus("mandatory")
_AirFMIdentModuleFirmwareRev_Type = DisplayString
_AirFMIdentModuleFirmwareRev_Object = MibTableColumn
airFMIdentModuleFirmwareRev = _AirFMIdentModuleFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 5),
    _AirFMIdentModuleFirmwareRev_Type()
)
airFMIdentModuleFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMIdentModuleFirmwareRev.setStatus("mandatory")
_AirFMIdentModuleHardwareRev_Type = DisplayString
_AirFMIdentModuleHardwareRev_Object = MibTableColumn
airFMIdentModuleHardwareRev = _AirFMIdentModuleHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 3, 1, 6),
    _AirFMIdentModuleHardwareRev_Type()
)
airFMIdentModuleHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMIdentModuleHardwareRev.setStatus("mandatory")
_AirFMIdentLocation_Type = DisplayString
_AirFMIdentLocation_Object = MibScalar
airFMIdentLocation = _AirFMIdentLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 4),
    _AirFMIdentLocation_Type()
)
airFMIdentLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMIdentLocation.setStatus("mandatory")
_AirFMIdentContact_Type = DisplayString
_AirFMIdentContact_Object = MibScalar
airFMIdentContact = _AirFMIdentContact_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 1, 5),
    _AirFMIdentContact_Type()
)
airFMIdentContact.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMIdentContact.setStatus("mandatory")
_AirFMStatus_ObjectIdentity = ObjectIdentity
airFMStatus = _AirFMStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2)
)


class _AirFMStatusSystemOn_Type(Integer32):
    """Custom type airFMStatusSystemOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusOff", 2),
          ("statusOn", 1))
    )


_AirFMStatusSystemOn_Type.__name__ = "Integer32"
_AirFMStatusSystemOn_Object = MibScalar
airFMStatusSystemOn = _AirFMStatusSystemOn_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 1),
    _AirFMStatusSystemOn_Type()
)
airFMStatusSystemOn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemOn.setStatus("mandatory")
_AirFMStatusSystemAverageRetTempC_Type = Integer32
_AirFMStatusSystemAverageRetTempC_Object = MibScalar
airFMStatusSystemAverageRetTempC = _AirFMStatusSystemAverageRetTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 2),
    _AirFMStatusSystemAverageRetTempC_Type()
)
airFMStatusSystemAverageRetTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemAverageRetTempC.setStatus("mandatory")
_AirFMStatusSystemAverageRetTempF_Type = Integer32
_AirFMStatusSystemAverageRetTempF_Object = MibScalar
airFMStatusSystemAverageRetTempF = _AirFMStatusSystemAverageRetTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 3),
    _AirFMStatusSystemAverageRetTempF_Type()
)
airFMStatusSystemAverageRetTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemAverageRetTempF.setStatus("mandatory")
_AirFMStatusSystemAverageRetHum_Type = Integer32
_AirFMStatusSystemAverageRetHum_Object = MibScalar
airFMStatusSystemAverageRetHum = _AirFMStatusSystemAverageRetHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 4),
    _AirFMStatusSystemAverageRetHum_Type()
)
airFMStatusSystemAverageRetHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemAverageRetHum.setStatus("mandatory")
_AirFMStatusSystemActionTempC_Type = Integer32
_AirFMStatusSystemActionTempC_Object = MibScalar
airFMStatusSystemActionTempC = _AirFMStatusSystemActionTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 5),
    _AirFMStatusSystemActionTempC_Type()
)
airFMStatusSystemActionTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemActionTempC.setStatus("mandatory")
_AirFMStatusSystemActionTempF_Type = Integer32
_AirFMStatusSystemActionTempF_Object = MibScalar
airFMStatusSystemActionTempF = _AirFMStatusSystemActionTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 6),
    _AirFMStatusSystemActionTempF_Type()
)
airFMStatusSystemActionTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemActionTempF.setStatus("mandatory")
_AirFMStatusSystemActionHum_Type = Integer32
_AirFMStatusSystemActionHum_Object = MibScalar
airFMStatusSystemActionHum = _AirFMStatusSystemActionHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 7),
    _AirFMStatusSystemActionHum_Type()
)
airFMStatusSystemActionHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemActionHum.setStatus("mandatory")
_AirFMStatusSystemRemoteHighTempC_Type = Integer32
_AirFMStatusSystemRemoteHighTempC_Object = MibScalar
airFMStatusSystemRemoteHighTempC = _AirFMStatusSystemRemoteHighTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 8),
    _AirFMStatusSystemRemoteHighTempC_Type()
)
airFMStatusSystemRemoteHighTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemRemoteHighTempC.setStatus("mandatory")
_AirFMStatusSystemRemoteHighTempF_Type = Integer32
_AirFMStatusSystemRemoteHighTempF_Object = MibScalar
airFMStatusSystemRemoteHighTempF = _AirFMStatusSystemRemoteHighTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 9),
    _AirFMStatusSystemRemoteHighTempF_Type()
)
airFMStatusSystemRemoteHighTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemRemoteHighTempF.setStatus("mandatory")
_AirFMStatusSystemRemoteAvgTempC_Type = Integer32
_AirFMStatusSystemRemoteAvgTempC_Object = MibScalar
airFMStatusSystemRemoteAvgTempC = _AirFMStatusSystemRemoteAvgTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 10),
    _AirFMStatusSystemRemoteAvgTempC_Type()
)
airFMStatusSystemRemoteAvgTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemRemoteAvgTempC.setStatus("mandatory")
_AirFMStatusSystemRemoteAvgTempF_Type = Integer32
_AirFMStatusSystemRemoteAvgTempF_Object = MibScalar
airFMStatusSystemRemoteAvgTempF = _AirFMStatusSystemRemoteAvgTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 11),
    _AirFMStatusSystemRemoteAvgTempF_Type()
)
airFMStatusSystemRemoteAvgTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemRemoteAvgTempF.setStatus("mandatory")
_AirFMStatusSystemRemoteAvgHum_Type = Integer32
_AirFMStatusSystemRemoteAvgHum_Object = MibScalar
airFMStatusSystemRemoteAvgHum = _AirFMStatusSystemRemoteAvgHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 12),
    _AirFMStatusSystemRemoteAvgHum_Type()
)
airFMStatusSystemRemoteAvgHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemRemoteAvgHum.setStatus("mandatory")
_AirFMStatusSystemRemoteLowTempC_Type = Integer32
_AirFMStatusSystemRemoteLowTempC_Object = MibScalar
airFMStatusSystemRemoteLowTempC = _AirFMStatusSystemRemoteLowTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 13),
    _AirFMStatusSystemRemoteLowTempC_Type()
)
airFMStatusSystemRemoteLowTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemRemoteLowTempC.setStatus("mandatory")
_AirFMStatusSystemRemoteLowTempF_Type = Integer32
_AirFMStatusSystemRemoteLowTempF_Object = MibScalar
airFMStatusSystemRemoteLowTempF = _AirFMStatusSystemRemoteLowTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 14),
    _AirFMStatusSystemRemoteLowTempF_Type()
)
airFMStatusSystemRemoteLowTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemRemoteLowTempF.setStatus("mandatory")


class _AirFMStatusSystemCoolingEnabled_Type(Integer32):
    """Custom type airFMStatusSystemCoolingEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabledNo", 2),
          ("enabledYes", 1))
    )


_AirFMStatusSystemCoolingEnabled_Type.__name__ = "Integer32"
_AirFMStatusSystemCoolingEnabled_Object = MibScalar
airFMStatusSystemCoolingEnabled = _AirFMStatusSystemCoolingEnabled_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 15),
    _AirFMStatusSystemCoolingEnabled_Type()
)
airFMStatusSystemCoolingEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemCoolingEnabled.setStatus("mandatory")


class _AirFMStatusSystemReheatingEnabled_Type(Integer32):
    """Custom type airFMStatusSystemReheatingEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabledNo", 2),
          ("enabledYes", 1))
    )


_AirFMStatusSystemReheatingEnabled_Type.__name__ = "Integer32"
_AirFMStatusSystemReheatingEnabled_Object = MibScalar
airFMStatusSystemReheatingEnabled = _AirFMStatusSystemReheatingEnabled_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 16),
    _AirFMStatusSystemReheatingEnabled_Type()
)
airFMStatusSystemReheatingEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemReheatingEnabled.setStatus("mandatory")


class _AirFMStatusSystemHumidifyEnabled_Type(Integer32):
    """Custom type airFMStatusSystemHumidifyEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabledNo", 2),
          ("enabledYes", 1))
    )


_AirFMStatusSystemHumidifyEnabled_Type.__name__ = "Integer32"
_AirFMStatusSystemHumidifyEnabled_Object = MibScalar
airFMStatusSystemHumidifyEnabled = _AirFMStatusSystemHumidifyEnabled_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 17),
    _AirFMStatusSystemHumidifyEnabled_Type()
)
airFMStatusSystemHumidifyEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemHumidifyEnabled.setStatus("mandatory")


class _AirFMStatusSystemDehumidifyEnabled_Type(Integer32):
    """Custom type airFMStatusSystemDehumidifyEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabledNo", 2),
          ("enabledYes", 1))
    )


_AirFMStatusSystemDehumidifyEnabled_Type.__name__ = "Integer32"
_AirFMStatusSystemDehumidifyEnabled_Object = MibScalar
airFMStatusSystemDehumidifyEnabled = _AirFMStatusSystemDehumidifyEnabled_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 18),
    _AirFMStatusSystemDehumidifyEnabled_Type()
)
airFMStatusSystemDehumidifyEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusSystemDehumidifyEnabled.setStatus("mandatory")
_AirFMStatusModuleTableSize_Type = Integer32
_AirFMStatusModuleTableSize_Object = MibScalar
airFMStatusModuleTableSize = _AirFMStatusModuleTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 19),
    _AirFMStatusModuleTableSize_Type()
)
airFMStatusModuleTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusModuleTableSize.setStatus("mandatory")
_AirFMStatusModuleTable_Object = MibTable
airFMStatusModuleTable = _AirFMStatusModuleTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20)
)
if mibBuilder.loadTexts:
    airFMStatusModuleTable.setStatus("mandatory")
_AirFMStatusModuleEntry_Object = MibTableRow
airFMStatusModuleEntry = _AirFMStatusModuleEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1)
)
airFMStatusModuleEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMStatusModuleIndex"),
)
if mibBuilder.loadTexts:
    airFMStatusModuleEntry.setStatus("mandatory")
_AirFMStatusModuleIndex_Type = Integer32
_AirFMStatusModuleIndex_Object = MibTableColumn
airFMStatusModuleIndex = _AirFMStatusModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 1),
    _AirFMStatusModuleIndex_Type()
)
airFMStatusModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusModuleIndex.setStatus("mandatory")
_AirFMStatusModuleOutputCapacity_Type = Integer32
_AirFMStatusModuleOutputCapacity_Object = MibTableColumn
airFMStatusModuleOutputCapacity = _AirFMStatusModuleOutputCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 2),
    _AirFMStatusModuleOutputCapacity_Type()
)
airFMStatusModuleOutputCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusModuleOutputCapacity.setStatus("mandatory")
_AirFMStatusModuleSupplyTempC_Type = Integer32
_AirFMStatusModuleSupplyTempC_Object = MibTableColumn
airFMStatusModuleSupplyTempC = _AirFMStatusModuleSupplyTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 3),
    _AirFMStatusModuleSupplyTempC_Type()
)
airFMStatusModuleSupplyTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusModuleSupplyTempC.setStatus("mandatory")
_AirFMStatusModuleSupplyTempF_Type = Integer32
_AirFMStatusModuleSupplyTempF_Object = MibTableColumn
airFMStatusModuleSupplyTempF = _AirFMStatusModuleSupplyTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 4),
    _AirFMStatusModuleSupplyTempF_Type()
)
airFMStatusModuleSupplyTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusModuleSupplyTempF.setStatus("mandatory")
_AirFMStatusModuleSupplyHum_Type = Integer32
_AirFMStatusModuleSupplyHum_Object = MibTableColumn
airFMStatusModuleSupplyHum = _AirFMStatusModuleSupplyHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 5),
    _AirFMStatusModuleSupplyHum_Type()
)
airFMStatusModuleSupplyHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusModuleSupplyHum.setStatus("mandatory")
_AirFMStatusModuleReturnTempC_Type = Integer32
_AirFMStatusModuleReturnTempC_Object = MibTableColumn
airFMStatusModuleReturnTempC = _AirFMStatusModuleReturnTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 6),
    _AirFMStatusModuleReturnTempC_Type()
)
airFMStatusModuleReturnTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusModuleReturnTempC.setStatus("mandatory")
_AirFMStatusModuleReturnTempF_Type = Integer32
_AirFMStatusModuleReturnTempF_Object = MibTableColumn
airFMStatusModuleReturnTempF = _AirFMStatusModuleReturnTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 7),
    _AirFMStatusModuleReturnTempF_Type()
)
airFMStatusModuleReturnTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusModuleReturnTempF.setStatus("mandatory")
_AirFMStatusModuleReturnHum_Type = Integer32
_AirFMStatusModuleReturnHum_Object = MibTableColumn
airFMStatusModuleReturnHum = _AirFMStatusModuleReturnHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 2, 20, 1, 8),
    _AirFMStatusModuleReturnHum_Type()
)
airFMStatusModuleReturnHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMStatusModuleReturnHum.setStatus("mandatory")
_AirFMGroup_ObjectIdentity = ObjectIdentity
airFMGroup = _AirFMGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3)
)


class _AirFMGroupSysStatus_Type(Integer32):
    """Custom type airFMGroupSysStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("statusDisabled", 6),
          ("statusFailed", 5),
          ("statusIdle", 2),
          ("statusLoadShare", 3),
          ("statusOffLine", 4),
          ("statusOnLine", 1),
          ("statusUndefined", 7))
    )


_AirFMGroupSysStatus_Type.__name__ = "Integer32"
_AirFMGroupSysStatus_Object = MibScalar
airFMGroupSysStatus = _AirFMGroupSysStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 1),
    _AirFMGroupSysStatus_Type()
)
airFMGroupSysStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMGroupSysStatus.setStatus("mandatory")
_AirFMGroupSysRuntime_Type = Integer32
_AirFMGroupSysRuntime_Object = MibScalar
airFMGroupSysRuntime = _AirFMGroupSysRuntime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 2),
    _AirFMGroupSysRuntime_Type()
)
airFMGroupSysRuntime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMGroupSysRuntime.setStatus("mandatory")


class _AirFMGroupSysRole_Type(Integer32):
    """Custom type airFMGroupSysRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("roleBackup", 2),
          ("rolePrimary", 1))
    )


_AirFMGroupSysRole_Type.__name__ = "Integer32"
_AirFMGroupSysRole_Object = MibScalar
airFMGroupSysRole = _AirFMGroupSysRole_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 3),
    _AirFMGroupSysRole_Type()
)
airFMGroupSysRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMGroupSysRole.setStatus("mandatory")
_AirFMGroupSysRoles_ObjectIdentity = ObjectIdentity
airFMGroupSysRoles = _AirFMGroupSysRoles_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4)
)
_AirFMGroupSysRolesTableSize_Type = Integer32
_AirFMGroupSysRolesTableSize_Object = MibScalar
airFMGroupSysRolesTableSize = _AirFMGroupSysRolesTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 1),
    _AirFMGroupSysRolesTableSize_Type()
)
airFMGroupSysRolesTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMGroupSysRolesTableSize.setStatus("mandatory")
_AirFMGroupSysRolesTable_Object = MibTable
airFMGroupSysRolesTable = _AirFMGroupSysRolesTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2)
)
if mibBuilder.loadTexts:
    airFMGroupSysRolesTable.setStatus("mandatory")
_AirFMGroupSysRolesEntry_Object = MibTableRow
airFMGroupSysRolesEntry = _AirFMGroupSysRolesEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1)
)
airFMGroupSysRolesEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMGroupSysIndex"),
)
if mibBuilder.loadTexts:
    airFMGroupSysRolesEntry.setStatus("mandatory")
_AirFMGroupSysIndex_Type = Integer32
_AirFMGroupSysIndex_Object = MibTableColumn
airFMGroupSysIndex = _AirFMGroupSysIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 1),
    _AirFMGroupSysIndex_Type()
)
airFMGroupSysIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMGroupSysIndex.setStatus("mandatory")


class _AirFMGroupSysRoleStatus_Type(Integer32):
    """Custom type airFMGroupSysRoleStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("failed", 6),
          ("idle", 4),
          ("loadShare", 5),
          ("offLine", 7),
          ("onLine", 3),
          ("reserved1", 1),
          ("reserved2", 2))
    )


_AirFMGroupSysRoleStatus_Type.__name__ = "Integer32"
_AirFMGroupSysRoleStatus_Object = MibTableColumn
airFMGroupSysRoleStatus = _AirFMGroupSysRoleStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 2),
    _AirFMGroupSysRoleStatus_Type()
)
airFMGroupSysRoleStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMGroupSysRoleStatus.setStatus("mandatory")


class _AirFMGroupSysPresentRole_Type(Integer32):
    """Custom type airFMGroupSysPresentRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("backup", 2),
          ("primary", 1))
    )


_AirFMGroupSysPresentRole_Type.__name__ = "Integer32"
_AirFMGroupSysPresentRole_Object = MibTableColumn
airFMGroupSysPresentRole = _AirFMGroupSysPresentRole_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 3),
    _AirFMGroupSysPresentRole_Type()
)
airFMGroupSysPresentRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMGroupSysPresentRole.setStatus("mandatory")


class _AirFMGroupSysManualRoleSetting_Type(Integer32):
    """Custom type airFMGroupSysManualRoleSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("backup", 2),
          ("primary", 1))
    )


_AirFMGroupSysManualRoleSetting_Type.__name__ = "Integer32"
_AirFMGroupSysManualRoleSetting_Object = MibTableColumn
airFMGroupSysManualRoleSetting = _AirFMGroupSysManualRoleSetting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 4),
    _AirFMGroupSysManualRoleSetting_Type()
)
airFMGroupSysManualRoleSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupSysManualRoleSetting.setStatus("mandatory")
_AirFMGroupSysRunHours_Type = Integer32
_AirFMGroupSysRunHours_Object = MibTableColumn
airFMGroupSysRunHours = _AirFMGroupSysRunHours_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 5),
    _AirFMGroupSysRunHours_Type()
)
airFMGroupSysRunHours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMGroupSysRunHours.setStatus("mandatory")


class _AirFMGroupSysComm_Type(Integer32):
    """Custom type airFMGroupSysComm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("commEstablished", 2),
          ("commLost", 1))
    )


_AirFMGroupSysComm_Type.__name__ = "Integer32"
_AirFMGroupSysComm_Object = MibTableColumn
airFMGroupSysComm = _AirFMGroupSysComm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 6),
    _AirFMGroupSysComm_Type()
)
airFMGroupSysComm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMGroupSysComm.setStatus("mandatory")
_AirFMGroupSysIPAddress_Type = IpAddress
_AirFMGroupSysIPAddress_Object = MibTableColumn
airFMGroupSysIPAddress = _AirFMGroupSysIPAddress_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 2, 1, 7),
    _AirFMGroupSysIPAddress_Type()
)
airFMGroupSysIPAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMGroupSysIPAddress.setStatus("mandatory")


class _AirFMGroupSysRoleAssignment_Type(Integer32):
    """Custom type airFMGroupSysRoleAssignment based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dynamicAutomatic", 2),
          ("staticManual", 1))
    )


_AirFMGroupSysRoleAssignment_Type.__name__ = "Integer32"
_AirFMGroupSysRoleAssignment_Object = MibScalar
airFMGroupSysRoleAssignment = _AirFMGroupSysRoleAssignment_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 3),
    _AirFMGroupSysRoleAssignment_Type()
)
airFMGroupSysRoleAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupSysRoleAssignment.setStatus("mandatory")


class _AirFMGroupAutoRoleNumPrimary_Type(Integer32):
    """Custom type airFMGroupAutoRoleNumPrimary based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("four", 4),
          ("one", 1),
          ("three", 3),
          ("two", 2))
    )


_AirFMGroupAutoRoleNumPrimary_Type.__name__ = "Integer32"
_AirFMGroupAutoRoleNumPrimary_Object = MibScalar
airFMGroupAutoRoleNumPrimary = _AirFMGroupAutoRoleNumPrimary_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 4, 4),
    _AirFMGroupAutoRoleNumPrimary_Type()
)
airFMGroupAutoRoleNumPrimary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupAutoRoleNumPrimary.setStatus("mandatory")
_AirFMGroupCfg_ObjectIdentity = ObjectIdentity
airFMGroupCfg = _AirFMGroupCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5)
)
_AirFMGroupCfgName_Type = DisplayString
_AirFMGroupCfgName_Object = MibScalar
airFMGroupCfgName = _AirFMGroupCfgName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 1),
    _AirFMGroupCfgName_Type()
)
airFMGroupCfgName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupCfgName.setStatus("mandatory")


class _AirFMGroupCfgNumSystems_Type(Integer32):
    """Custom type airFMGroupCfgNumSystems based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("four", 4),
          ("one", 1),
          ("three", 3),
          ("two", 2))
    )


_AirFMGroupCfgNumSystems_Type.__name__ = "Integer32"
_AirFMGroupCfgNumSystems_Object = MibScalar
airFMGroupCfgNumSystems = _AirFMGroupCfgNumSystems_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 2),
    _AirFMGroupCfgNumSystems_Type()
)
airFMGroupCfgNumSystems.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupCfgNumSystems.setStatus("mandatory")


class _AirFMGroupCfgIdleBlower_Type(Integer32):
    """Custom type airFMGroupCfgIdleBlower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("minimumSpeed", 2),
          ("normalSpeed", 3),
          ("off", 1))
    )


_AirFMGroupCfgIdleBlower_Type.__name__ = "Integer32"
_AirFMGroupCfgIdleBlower_Object = MibScalar
airFMGroupCfgIdleBlower = _AirFMGroupCfgIdleBlower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 3),
    _AirFMGroupCfgIdleBlower_Type()
)
airFMGroupCfgIdleBlower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupCfgIdleBlower.setStatus("mandatory")


class _AirFMGroupCfgShutdownSmoke_Type(Integer32):
    """Custom type airFMGroupCfgShutdownSmoke based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirFMGroupCfgShutdownSmoke_Type.__name__ = "Integer32"
_AirFMGroupCfgShutdownSmoke_Object = MibScalar
airFMGroupCfgShutdownSmoke = _AirFMGroupCfgShutdownSmoke_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 4),
    _AirFMGroupCfgShutdownSmoke_Type()
)
airFMGroupCfgShutdownSmoke.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupCfgShutdownSmoke.setStatus("mandatory")


class _AirFMGroupCfgShutdownFire_Type(Integer32):
    """Custom type airFMGroupCfgShutdownFire based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirFMGroupCfgShutdownFire_Type.__name__ = "Integer32"
_AirFMGroupCfgShutdownFire_Object = MibScalar
airFMGroupCfgShutdownFire = _AirFMGroupCfgShutdownFire_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 5),
    _AirFMGroupCfgShutdownFire_Type()
)
airFMGroupCfgShutdownFire.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupCfgShutdownFire.setStatus("mandatory")


class _AirFMGroupCfgFailoverCommLoss_Type(Integer32):
    """Custom type airFMGroupCfgFailoverCommLoss based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirFMGroupCfgFailoverCommLoss_Type.__name__ = "Integer32"
_AirFMGroupCfgFailoverCommLoss_Object = MibScalar
airFMGroupCfgFailoverCommLoss = _AirFMGroupCfgFailoverCommLoss_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 6),
    _AirFMGroupCfgFailoverCommLoss_Type()
)
airFMGroupCfgFailoverCommLoss.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupCfgFailoverCommLoss.setStatus("mandatory")


class _AirFMGroupCfgDmdFightStatus_Type(Integer32):
    """Custom type airFMGroupCfgDmdFightStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AirFMGroupCfgDmdFightStatus_Type.__name__ = "Integer32"
_AirFMGroupCfgDmdFightStatus_Object = MibScalar
airFMGroupCfgDmdFightStatus = _AirFMGroupCfgDmdFightStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 7),
    _AirFMGroupCfgDmdFightStatus_Type()
)
airFMGroupCfgDmdFightStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMGroupCfgDmdFightStatus.setStatus("mandatory")


class _AirFMGroupCfgDmdFightSetting_Type(Integer32):
    """Custom type airFMGroupCfgDmdFightSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirFMGroupCfgDmdFightSetting_Type.__name__ = "Integer32"
_AirFMGroupCfgDmdFightSetting_Object = MibScalar
airFMGroupCfgDmdFightSetting = _AirFMGroupCfgDmdFightSetting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 8),
    _AirFMGroupCfgDmdFightSetting_Type()
)
airFMGroupCfgDmdFightSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupCfgDmdFightSetting.setStatus("mandatory")


class _AirFMGroupCfgSetpointShareStatus_Type(Integer32):
    """Custom type airFMGroupCfgSetpointShareStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AirFMGroupCfgSetpointShareStatus_Type.__name__ = "Integer32"
_AirFMGroupCfgSetpointShareStatus_Object = MibScalar
airFMGroupCfgSetpointShareStatus = _AirFMGroupCfgSetpointShareStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 9),
    _AirFMGroupCfgSetpointShareStatus_Type()
)
airFMGroupCfgSetpointShareStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMGroupCfgSetpointShareStatus.setStatus("mandatory")


class _AirFMGroupCfgSetpointShareSetting_Type(Integer32):
    """Custom type airFMGroupCfgSetpointShareSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirFMGroupCfgSetpointShareSetting_Type.__name__ = "Integer32"
_AirFMGroupCfgSetpointShareSetting_Object = MibScalar
airFMGroupCfgSetpointShareSetting = _AirFMGroupCfgSetpointShareSetting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 10),
    _AirFMGroupCfgSetpointShareSetting_Type()
)
airFMGroupCfgSetpointShareSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupCfgSetpointShareSetting.setStatus("mandatory")


class _AirFMGroupCfgResetFieldServiceDefaults_Type(Integer32):
    """Custom type airFMGroupCfgResetFieldServiceDefaults based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 1),
          ("reset", 2))
    )


_AirFMGroupCfgResetFieldServiceDefaults_Type.__name__ = "Integer32"
_AirFMGroupCfgResetFieldServiceDefaults_Object = MibScalar
airFMGroupCfgResetFieldServiceDefaults = _AirFMGroupCfgResetFieldServiceDefaults_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 5, 11),
    _AirFMGroupCfgResetFieldServiceDefaults_Type()
)
airFMGroupCfgResetFieldServiceDefaults.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupCfgResetFieldServiceDefaults.setStatus("mandatory")
_AirFMGroupLoadShare_ObjectIdentity = ObjectIdentity
airFMGroupLoadShare = _AirFMGroupLoadShare_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6)
)


class _AirFMGroupLoadShareCoolRequests_Type(Integer32):
    """Custom type airFMGroupLoadShareCoolRequests based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirFMGroupLoadShareCoolRequests_Type.__name__ = "Integer32"
_AirFMGroupLoadShareCoolRequests_Object = MibScalar
airFMGroupLoadShareCoolRequests = _AirFMGroupLoadShareCoolRequests_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 1),
    _AirFMGroupLoadShareCoolRequests_Type()
)
airFMGroupLoadShareCoolRequests.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupLoadShareCoolRequests.setStatus("mandatory")
_AirFMGroupLoadShareCoolThreshC_Type = Integer32
_AirFMGroupLoadShareCoolThreshC_Object = MibScalar
airFMGroupLoadShareCoolThreshC = _AirFMGroupLoadShareCoolThreshC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 2),
    _AirFMGroupLoadShareCoolThreshC_Type()
)
airFMGroupLoadShareCoolThreshC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupLoadShareCoolThreshC.setStatus("mandatory")
_AirFMGroupLoadShareCoolThreshF_Type = Integer32
_AirFMGroupLoadShareCoolThreshF_Object = MibScalar
airFMGroupLoadShareCoolThreshF = _AirFMGroupLoadShareCoolThreshF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 3),
    _AirFMGroupLoadShareCoolThreshF_Type()
)
airFMGroupLoadShareCoolThreshF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupLoadShareCoolThreshF.setStatus("mandatory")


class _AirFMGroupLoadShareReheatRequests_Type(Integer32):
    """Custom type airFMGroupLoadShareReheatRequests based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirFMGroupLoadShareReheatRequests_Type.__name__ = "Integer32"
_AirFMGroupLoadShareReheatRequests_Object = MibScalar
airFMGroupLoadShareReheatRequests = _AirFMGroupLoadShareReheatRequests_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 4),
    _AirFMGroupLoadShareReheatRequests_Type()
)
airFMGroupLoadShareReheatRequests.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupLoadShareReheatRequests.setStatus("mandatory")
_AirFMGroupLoadShareReheatThreshC_Type = Integer32
_AirFMGroupLoadShareReheatThreshC_Object = MibScalar
airFMGroupLoadShareReheatThreshC = _AirFMGroupLoadShareReheatThreshC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 5),
    _AirFMGroupLoadShareReheatThreshC_Type()
)
airFMGroupLoadShareReheatThreshC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupLoadShareReheatThreshC.setStatus("mandatory")
_AirFMGroupLoadShareReheatThreshF_Type = Integer32
_AirFMGroupLoadShareReheatThreshF_Object = MibScalar
airFMGroupLoadShareReheatThreshF = _AirFMGroupLoadShareReheatThreshF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 6),
    _AirFMGroupLoadShareReheatThreshF_Type()
)
airFMGroupLoadShareReheatThreshF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupLoadShareReheatThreshF.setStatus("mandatory")


class _AirFMGroupLoadShareHumRequests_Type(Integer32):
    """Custom type airFMGroupLoadShareHumRequests based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirFMGroupLoadShareHumRequests_Type.__name__ = "Integer32"
_AirFMGroupLoadShareHumRequests_Object = MibScalar
airFMGroupLoadShareHumRequests = _AirFMGroupLoadShareHumRequests_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 7),
    _AirFMGroupLoadShareHumRequests_Type()
)
airFMGroupLoadShareHumRequests.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupLoadShareHumRequests.setStatus("mandatory")
_AirFMGroupLoadShareHumThresh_Type = Integer32
_AirFMGroupLoadShareHumThresh_Object = MibScalar
airFMGroupLoadShareHumThresh = _AirFMGroupLoadShareHumThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 8),
    _AirFMGroupLoadShareHumThresh_Type()
)
airFMGroupLoadShareHumThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupLoadShareHumThresh.setStatus("mandatory")


class _AirFMGroupLoadShareDehumRequests_Type(Integer32):
    """Custom type airFMGroupLoadShareDehumRequests based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirFMGroupLoadShareDehumRequests_Type.__name__ = "Integer32"
_AirFMGroupLoadShareDehumRequests_Object = MibScalar
airFMGroupLoadShareDehumRequests = _AirFMGroupLoadShareDehumRequests_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 9),
    _AirFMGroupLoadShareDehumRequests_Type()
)
airFMGroupLoadShareDehumRequests.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupLoadShareDehumRequests.setStatus("mandatory")
_AirFMGroupLoadShareDehumThresh_Type = Integer32
_AirFMGroupLoadShareDehumThresh_Object = MibScalar
airFMGroupLoadShareDehumThresh = _AirFMGroupLoadShareDehumThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 6, 10),
    _AirFMGroupLoadShareDehumThresh_Type()
)
airFMGroupLoadShareDehumThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupLoadShareDehumThresh.setStatus("mandatory")
_AirFMGroupFailover_ObjectIdentity = ObjectIdentity
airFMGroupFailover = _AirFMGroupFailover_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7)
)
_AirFMGroupFailoverSys_ObjectIdentity = ObjectIdentity
airFMGroupFailoverSys = _AirFMGroupFailoverSys_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1)
)


class _AirFMGroupFailoverSysAnyMinorAlarm_Type(Integer32):
    """Custom type airFMGroupFailoverSysAnyMinorAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysAnyMinorAlarm_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysAnyMinorAlarm_Object = MibScalar
airFMGroupFailoverSysAnyMinorAlarm = _AirFMGroupFailoverSysAnyMinorAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 1),
    _AirFMGroupFailoverSysAnyMinorAlarm_Type()
)
airFMGroupFailoverSysAnyMinorAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysAnyMinorAlarm.setStatus("mandatory")


class _AirFMGroupFailoverSysAnyMajorAlarm_Type(Integer32):
    """Custom type airFMGroupFailoverSysAnyMajorAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysAnyMajorAlarm_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysAnyMajorAlarm_Object = MibScalar
airFMGroupFailoverSysAnyMajorAlarm = _AirFMGroupFailoverSysAnyMajorAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 2),
    _AirFMGroupFailoverSysAnyMajorAlarm_Type()
)
airFMGroupFailoverSysAnyMajorAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysAnyMajorAlarm.setStatus("mandatory")


class _AirFMGroupFailoverSysHighEnvTemp_Type(Integer32):
    """Custom type airFMGroupFailoverSysHighEnvTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysHighEnvTemp_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysHighEnvTemp_Object = MibScalar
airFMGroupFailoverSysHighEnvTemp = _AirFMGroupFailoverSysHighEnvTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 3),
    _AirFMGroupFailoverSysHighEnvTemp_Type()
)
airFMGroupFailoverSysHighEnvTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysHighEnvTemp.setStatus("mandatory")


class _AirFMGroupFailoverSysLowEnvTemp_Type(Integer32):
    """Custom type airFMGroupFailoverSysLowEnvTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysLowEnvTemp_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysLowEnvTemp_Object = MibScalar
airFMGroupFailoverSysLowEnvTemp = _AirFMGroupFailoverSysLowEnvTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 4),
    _AirFMGroupFailoverSysLowEnvTemp_Type()
)
airFMGroupFailoverSysLowEnvTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysLowEnvTemp.setStatus("mandatory")


class _AirFMGroupFailoverSysHighEnvHum_Type(Integer32):
    """Custom type airFMGroupFailoverSysHighEnvHum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysHighEnvHum_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysHighEnvHum_Object = MibScalar
airFMGroupFailoverSysHighEnvHum = _AirFMGroupFailoverSysHighEnvHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 5),
    _AirFMGroupFailoverSysHighEnvHum_Type()
)
airFMGroupFailoverSysHighEnvHum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysHighEnvHum.setStatus("mandatory")


class _AirFMGroupFailoverSysLowEnvHum_Type(Integer32):
    """Custom type airFMGroupFailoverSysLowEnvHum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysLowEnvHum_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysLowEnvHum_Object = MibScalar
airFMGroupFailoverSysLowEnvHum = _AirFMGroupFailoverSysLowEnvHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 6),
    _AirFMGroupFailoverSysLowEnvHum_Type()
)
airFMGroupFailoverSysLowEnvHum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysLowEnvHum.setStatus("mandatory")


class _AirFMGroupFailoverSysFireAlarm_Type(Integer32):
    """Custom type airFMGroupFailoverSysFireAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysFireAlarm_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysFireAlarm_Object = MibScalar
airFMGroupFailoverSysFireAlarm = _AirFMGroupFailoverSysFireAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 7),
    _AirFMGroupFailoverSysFireAlarm_Type()
)
airFMGroupFailoverSysFireAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysFireAlarm.setStatus("mandatory")


class _AirFMGroupFailoverSysSmokeAlarm_Type(Integer32):
    """Custom type airFMGroupFailoverSysSmokeAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysSmokeAlarm_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysSmokeAlarm_Object = MibScalar
airFMGroupFailoverSysSmokeAlarm = _AirFMGroupFailoverSysSmokeAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 8),
    _AirFMGroupFailoverSysSmokeAlarm_Type()
)
airFMGroupFailoverSysSmokeAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysSmokeAlarm.setStatus("mandatory")


class _AirFMGroupFailoverSysCommLost_Type(Integer32):
    """Custom type airFMGroupFailoverSysCommLost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysCommLost_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysCommLost_Object = MibScalar
airFMGroupFailoverSysCommLost = _AirFMGroupFailoverSysCommLost_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 9),
    _AirFMGroupFailoverSysCommLost_Type()
)
airFMGroupFailoverSysCommLost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysCommLost.setStatus("mandatory")


class _AirFMGroupFailoverSysSupplySensorFail_Type(Integer32):
    """Custom type airFMGroupFailoverSysSupplySensorFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysSupplySensorFail_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysSupplySensorFail_Object = MibScalar
airFMGroupFailoverSysSupplySensorFail = _AirFMGroupFailoverSysSupplySensorFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 10),
    _AirFMGroupFailoverSysSupplySensorFail_Type()
)
airFMGroupFailoverSysSupplySensorFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysSupplySensorFail.setStatus("mandatory")


class _AirFMGroupFailoverSysReturnSensorFail_Type(Integer32):
    """Custom type airFMGroupFailoverSysReturnSensorFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysReturnSensorFail_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysReturnSensorFail_Object = MibScalar
airFMGroupFailoverSysReturnSensorFail = _AirFMGroupFailoverSysReturnSensorFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 11),
    _AirFMGroupFailoverSysReturnSensorFail_Type()
)
airFMGroupFailoverSysReturnSensorFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysReturnSensorFail.setStatus("mandatory")


class _AirFMGroupFailoverSysPrimarySensorFail_Type(Integer32):
    """Custom type airFMGroupFailoverSysPrimarySensorFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysPrimarySensorFail_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysPrimarySensorFail_Object = MibScalar
airFMGroupFailoverSysPrimarySensorFail = _AirFMGroupFailoverSysPrimarySensorFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 12),
    _AirFMGroupFailoverSysPrimarySensorFail_Type()
)
airFMGroupFailoverSysPrimarySensorFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysPrimarySensorFail.setStatus("mandatory")


class _AirFMGroupFailoverSysSecondarySensorFail_Type(Integer32):
    """Custom type airFMGroupFailoverSysSecondarySensorFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysSecondarySensorFail_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysSecondarySensorFail_Object = MibScalar
airFMGroupFailoverSysSecondarySensorFail = _AirFMGroupFailoverSysSecondarySensorFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 13),
    _AirFMGroupFailoverSysSecondarySensorFail_Type()
)
airFMGroupFailoverSysSecondarySensorFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysSecondarySensorFail.setStatus("mandatory")


class _AirFMGroupFailoverSysNoSensorsAvailable_Type(Integer32):
    """Custom type airFMGroupFailoverSysNoSensorsAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverSysNoSensorsAvailable_Type.__name__ = "Integer32"
_AirFMGroupFailoverSysNoSensorsAvailable_Object = MibScalar
airFMGroupFailoverSysNoSensorsAvailable = _AirFMGroupFailoverSysNoSensorsAvailable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 1, 14),
    _AirFMGroupFailoverSysNoSensorsAvailable_Type()
)
airFMGroupFailoverSysNoSensorsAvailable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverSysNoSensorsAvailable.setStatus("mandatory")
_AirFMGroupFailoverMod_ObjectIdentity = ObjectIdentity
airFMGroupFailoverMod = _AirFMGroupFailoverMod_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2)
)


class _AirFMGroupFailoverModMaintRequired_Type(Integer32):
    """Custom type airFMGroupFailoverModMaintRequired based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModMaintRequired_Type.__name__ = "Integer32"
_AirFMGroupFailoverModMaintRequired_Object = MibScalar
airFMGroupFailoverModMaintRequired = _AirFMGroupFailoverModMaintRequired_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 1),
    _AirFMGroupFailoverModMaintRequired_Type()
)
airFMGroupFailoverModMaintRequired.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModMaintRequired.setStatus("mandatory")


class _AirFMGroupFailoverModCoolFail_Type(Integer32):
    """Custom type airFMGroupFailoverModCoolFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModCoolFail_Type.__name__ = "Integer32"
_AirFMGroupFailoverModCoolFail_Object = MibScalar
airFMGroupFailoverModCoolFail = _AirFMGroupFailoverModCoolFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 2),
    _AirFMGroupFailoverModCoolFail_Type()
)
airFMGroupFailoverModCoolFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModCoolFail.setStatus("mandatory")


class _AirFMGroupFailoverModHumFail_Type(Integer32):
    """Custom type airFMGroupFailoverModHumFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModHumFail_Type.__name__ = "Integer32"
_AirFMGroupFailoverModHumFail_Object = MibScalar
airFMGroupFailoverModHumFail = _AirFMGroupFailoverModHumFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 3),
    _AirFMGroupFailoverModHumFail_Type()
)
airFMGroupFailoverModHumFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModHumFail.setStatus("mandatory")


class _AirFMGroupFailoverModBlwrCntrl1Fail_Type(Integer32):
    """Custom type airFMGroupFailoverModBlwrCntrl1Fail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModBlwrCntrl1Fail_Type.__name__ = "Integer32"
_AirFMGroupFailoverModBlwrCntrl1Fail_Object = MibScalar
airFMGroupFailoverModBlwrCntrl1Fail = _AirFMGroupFailoverModBlwrCntrl1Fail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 4),
    _AirFMGroupFailoverModBlwrCntrl1Fail_Type()
)
airFMGroupFailoverModBlwrCntrl1Fail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModBlwrCntrl1Fail.setStatus("mandatory")


class _AirFMGroupFailoverModBlwrCntrl2Fail_Type(Integer32):
    """Custom type airFMGroupFailoverModBlwrCntrl2Fail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModBlwrCntrl2Fail_Type.__name__ = "Integer32"
_AirFMGroupFailoverModBlwrCntrl2Fail_Object = MibScalar
airFMGroupFailoverModBlwrCntrl2Fail = _AirFMGroupFailoverModBlwrCntrl2Fail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 5),
    _AirFMGroupFailoverModBlwrCntrl2Fail_Type()
)
airFMGroupFailoverModBlwrCntrl2Fail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModBlwrCntrl2Fail.setStatus("mandatory")


class _AirFMGroupFailoverModHighFilterDP_Type(Integer32):
    """Custom type airFMGroupFailoverModHighFilterDP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModHighFilterDP_Type.__name__ = "Integer32"
_AirFMGroupFailoverModHighFilterDP_Object = MibScalar
airFMGroupFailoverModHighFilterDP = _AirFMGroupFailoverModHighFilterDP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 6),
    _AirFMGroupFailoverModHighFilterDP_Type()
)
airFMGroupFailoverModHighFilterDP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModHighFilterDP.setStatus("mandatory")


class _AirFMGroupFailoverModHighSupplyTemp_Type(Integer32):
    """Custom type airFMGroupFailoverModHighSupplyTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModHighSupplyTemp_Type.__name__ = "Integer32"
_AirFMGroupFailoverModHighSupplyTemp_Object = MibScalar
airFMGroupFailoverModHighSupplyTemp = _AirFMGroupFailoverModHighSupplyTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 7),
    _AirFMGroupFailoverModHighSupplyTemp_Type()
)
airFMGroupFailoverModHighSupplyTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModHighSupplyTemp.setStatus("mandatory")


class _AirFMGroupFailoverModLowSupplyTemp_Type(Integer32):
    """Custom type airFMGroupFailoverModLowSupplyTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModLowSupplyTemp_Type.__name__ = "Integer32"
_AirFMGroupFailoverModLowSupplyTemp_Object = MibScalar
airFMGroupFailoverModLowSupplyTemp = _AirFMGroupFailoverModLowSupplyTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 8),
    _AirFMGroupFailoverModLowSupplyTemp_Type()
)
airFMGroupFailoverModLowSupplyTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModLowSupplyTemp.setStatus("mandatory")


class _AirFMGroupFailoverModLossOrLowAirFlow_Type(Integer32):
    """Custom type airFMGroupFailoverModLossOrLowAirFlow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModLossOrLowAirFlow_Type.__name__ = "Integer32"
_AirFMGroupFailoverModLossOrLowAirFlow_Object = MibScalar
airFMGroupFailoverModLossOrLowAirFlow = _AirFMGroupFailoverModLossOrLowAirFlow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 9),
    _AirFMGroupFailoverModLossOrLowAirFlow_Type()
)
airFMGroupFailoverModLossOrLowAirFlow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModLossOrLowAirFlow.setStatus("mandatory")


class _AirFMGroupFailoverModHumReplaceCylinder_Type(Integer32):
    """Custom type airFMGroupFailoverModHumReplaceCylinder based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModHumReplaceCylinder_Type.__name__ = "Integer32"
_AirFMGroupFailoverModHumReplaceCylinder_Object = MibScalar
airFMGroupFailoverModHumReplaceCylinder = _AirFMGroupFailoverModHumReplaceCylinder_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 10),
    _AirFMGroupFailoverModHumReplaceCylinder_Type()
)
airFMGroupFailoverModHumReplaceCylinder.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModHumReplaceCylinder.setStatus("mandatory")


class _AirFMGroupFailoverModAirBlockInterlockOpen_Type(Integer32):
    """Custom type airFMGroupFailoverModAirBlockInterlockOpen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModAirBlockInterlockOpen_Type.__name__ = "Integer32"
_AirFMGroupFailoverModAirBlockInterlockOpen_Object = MibScalar
airFMGroupFailoverModAirBlockInterlockOpen = _AirFMGroupFailoverModAirBlockInterlockOpen_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 11),
    _AirFMGroupFailoverModAirBlockInterlockOpen_Type()
)
airFMGroupFailoverModAirBlockInterlockOpen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModAirBlockInterlockOpen.setStatus("mandatory")


class _AirFMGroupFailoverModWaterDetected_Type(Integer32):
    """Custom type airFMGroupFailoverModWaterDetected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModWaterDetected_Type.__name__ = "Integer32"
_AirFMGroupFailoverModWaterDetected_Object = MibScalar
airFMGroupFailoverModWaterDetected = _AirFMGroupFailoverModWaterDetected_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 12),
    _AirFMGroupFailoverModWaterDetected_Type()
)
airFMGroupFailoverModWaterDetected.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModWaterDetected.setStatus("mandatory")


class _AirFMGroupFailoverModCondensatePumpFail_Type(Integer32):
    """Custom type airFMGroupFailoverModCondensatePumpFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AirFMGroupFailoverModCondensatePumpFail_Type.__name__ = "Integer32"
_AirFMGroupFailoverModCondensatePumpFail_Object = MibScalar
airFMGroupFailoverModCondensatePumpFail = _AirFMGroupFailoverModCondensatePumpFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 3, 7, 2, 13),
    _AirFMGroupFailoverModCondensatePumpFail_Type()
)
airFMGroupFailoverModCondensatePumpFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMGroupFailoverModCondensatePumpFail.setStatus("mandatory")
_AirFMSystem_ObjectIdentity = ObjectIdentity
airFMSystem = _AirFMSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4)
)
_AirFMSysStatus_ObjectIdentity = ObjectIdentity
airFMSysStatus = _AirFMSysStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1)
)


class _AirFMSysNumber_Type(Integer32):
    """Custom type airFMSysNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("four", 5),
          ("notApplicable", 1),
          ("one", 2),
          ("three", 4),
          ("two", 3))
    )


_AirFMSysNumber_Type.__name__ = "Integer32"
_AirFMSysNumber_Object = MibScalar
airFMSysNumber = _AirFMSysNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 1),
    _AirFMSysNumber_Type()
)
airFMSysNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysNumber.setStatus("mandatory")


class _AirFMSysPresentStatus_Type(Integer32):
    """Custom type airFMSysPresentStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("failed", 7),
          ("idle", 5),
          ("loadShare", 6),
          ("notApplicable", 1),
          ("offLine", 8),
          ("onLine", 4),
          ("reserved1", 2),
          ("reserved2", 3))
    )


_AirFMSysPresentStatus_Type.__name__ = "Integer32"
_AirFMSysPresentStatus_Object = MibScalar
airFMSysPresentStatus = _AirFMSysPresentStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 2),
    _AirFMSysPresentStatus_Type()
)
airFMSysPresentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysPresentStatus.setStatus("mandatory")


class _AirFMSysPresentRole_Type(Integer32):
    """Custom type airFMSysPresentRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backup", 3),
          ("notApplicable", 1),
          ("primary", 2))
    )


_AirFMSysPresentRole_Type.__name__ = "Integer32"
_AirFMSysPresentRole_Object = MibScalar
airFMSysPresentRole = _AirFMSysPresentRole_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 3),
    _AirFMSysPresentRole_Type()
)
airFMSysPresentRole.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysPresentRole.setStatus("mandatory")
_AirFMSysRunHours_Type = Integer32
_AirFMSysRunHours_Object = MibScalar
airFMSysRunHours = _AirFMSysRunHours_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 4),
    _AirFMSysRunHours_Type()
)
airFMSysRunHours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysRunHours.setStatus("mandatory")
_AirFMSysCoilFluidTempC_Type = Integer32
_AirFMSysCoilFluidTempC_Object = MibScalar
airFMSysCoilFluidTempC = _AirFMSysCoilFluidTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 5),
    _AirFMSysCoilFluidTempC_Type()
)
airFMSysCoilFluidTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCoilFluidTempC.setStatus("mandatory")
_AirFMSysCoilFluidTempF_Type = Integer32
_AirFMSysCoilFluidTempF_Object = MibScalar
airFMSysCoilFluidTempF = _AirFMSysCoilFluidTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 6),
    _AirFMSysCoilFluidTempF_Type()
)
airFMSysCoilFluidTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCoilFluidTempF.setStatus("mandatory")
_AirFMSysHotWaterTempC_Type = Integer32
_AirFMSysHotWaterTempC_Object = MibScalar
airFMSysHotWaterTempC = _AirFMSysHotWaterTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 7),
    _AirFMSysHotWaterTempC_Type()
)
airFMSysHotWaterTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysHotWaterTempC.setStatus("mandatory")
_AirFMSysHotWaterTempF_Type = Integer32
_AirFMSysHotWaterTempF_Object = MibScalar
airFMSysHotWaterTempF = _AirFMSysHotWaterTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 8),
    _AirFMSysHotWaterTempF_Type()
)
airFMSysHotWaterTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysHotWaterTempF.setStatus("mandatory")
_AirFMSysAvgReturnTempC_Type = Integer32
_AirFMSysAvgReturnTempC_Object = MibScalar
airFMSysAvgReturnTempC = _AirFMSysAvgReturnTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 9),
    _AirFMSysAvgReturnTempC_Type()
)
airFMSysAvgReturnTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAvgReturnTempC.setStatus("mandatory")
_AirFMSysAvgReturnTempF_Type = Integer32
_AirFMSysAvgReturnTempF_Object = MibScalar
airFMSysAvgReturnTempF = _AirFMSysAvgReturnTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 10),
    _AirFMSysAvgReturnTempF_Type()
)
airFMSysAvgReturnTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAvgReturnTempF.setStatus("mandatory")
_AirFMSysAvgReturnHum_Type = Integer32
_AirFMSysAvgReturnHum_Object = MibScalar
airFMSysAvgReturnHum = _AirFMSysAvgReturnHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 11),
    _AirFMSysAvgReturnHum_Type()
)
airFMSysAvgReturnHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAvgReturnHum.setStatus("mandatory")
_AirFMSysAvgRemoteTempC_Type = Integer32
_AirFMSysAvgRemoteTempC_Object = MibScalar
airFMSysAvgRemoteTempC = _AirFMSysAvgRemoteTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 12),
    _AirFMSysAvgRemoteTempC_Type()
)
airFMSysAvgRemoteTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAvgRemoteTempC.setStatus("mandatory")
_AirFMSysAvgRemoteTempF_Type = Integer32
_AirFMSysAvgRemoteTempF_Object = MibScalar
airFMSysAvgRemoteTempF = _AirFMSysAvgRemoteTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 13),
    _AirFMSysAvgRemoteTempF_Type()
)
airFMSysAvgRemoteTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAvgRemoteTempF.setStatus("mandatory")
_AirFMSysAvgRemoteHum_Type = Integer32
_AirFMSysAvgRemoteHum_Object = MibScalar
airFMSysAvgRemoteHum = _AirFMSysAvgRemoteHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 14),
    _AirFMSysAvgRemoteHum_Type()
)
airFMSysAvgRemoteHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAvgRemoteHum.setStatus("mandatory")
_AirFMSysMaxRemoteTempC_Type = Integer32
_AirFMSysMaxRemoteTempC_Object = MibScalar
airFMSysMaxRemoteTempC = _AirFMSysMaxRemoteTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 15),
    _AirFMSysMaxRemoteTempC_Type()
)
airFMSysMaxRemoteTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysMaxRemoteTempC.setStatus("mandatory")
_AirFMSysMaxRemoteTempF_Type = Integer32
_AirFMSysMaxRemoteTempF_Object = MibScalar
airFMSysMaxRemoteTempF = _AirFMSysMaxRemoteTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 16),
    _AirFMSysMaxRemoteTempF_Type()
)
airFMSysMaxRemoteTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysMaxRemoteTempF.setStatus("mandatory")
_AirFMSysMinRemoteTempC_Type = Integer32
_AirFMSysMinRemoteTempC_Object = MibScalar
airFMSysMinRemoteTempC = _AirFMSysMinRemoteTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 17),
    _AirFMSysMinRemoteTempC_Type()
)
airFMSysMinRemoteTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysMinRemoteTempC.setStatus("mandatory")
_AirFMSysMinRemoteTempF_Type = Integer32
_AirFMSysMinRemoteTempF_Object = MibScalar
airFMSysMinRemoteTempF = _AirFMSysMinRemoteTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 18),
    _AirFMSysMinRemoteTempF_Type()
)
airFMSysMinRemoteTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysMinRemoteTempF.setStatus("mandatory")


class _AirFMSysTempCtrlMethod_Type(Integer32):
    """Custom type airFMSysTempCtrlMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("avgRemote", 3),
          ("avgReturn", 2),
          ("maxRemote", 4),
          ("notApplicable", 1))
    )


_AirFMSysTempCtrlMethod_Type.__name__ = "Integer32"
_AirFMSysTempCtrlMethod_Object = MibScalar
airFMSysTempCtrlMethod = _AirFMSysTempCtrlMethod_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 19),
    _AirFMSysTempCtrlMethod_Type()
)
airFMSysTempCtrlMethod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysTempCtrlMethod.setStatus("mandatory")


class _AirFMSysActualTempCtrlMethod_Type(Integer32):
    """Custom type airFMSysActualTempCtrlMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("avgRemote", 3),
          ("avgReturn", 2),
          ("maxRemote", 4),
          ("notApplicable", 1))
    )


_AirFMSysActualTempCtrlMethod_Type.__name__ = "Integer32"
_AirFMSysActualTempCtrlMethod_Object = MibScalar
airFMSysActualTempCtrlMethod = _AirFMSysActualTempCtrlMethod_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 20),
    _AirFMSysActualTempCtrlMethod_Type()
)
airFMSysActualTempCtrlMethod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysActualTempCtrlMethod.setStatus("mandatory")


class _AirFMSysHumCtrlMethod_Type(Integer32):
    """Custom type airFMSysHumCtrlMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("avgRemoteDewPt", 5),
          ("avgRemoteRH", 4),
          ("avgReturnDewPt", 3),
          ("avgReturnRH", 2),
          ("notApplicable", 1))
    )


_AirFMSysHumCtrlMethod_Type.__name__ = "Integer32"
_AirFMSysHumCtrlMethod_Object = MibScalar
airFMSysHumCtrlMethod = _AirFMSysHumCtrlMethod_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 21),
    _AirFMSysHumCtrlMethod_Type()
)
airFMSysHumCtrlMethod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysHumCtrlMethod.setStatus("mandatory")


class _AirFMSysActualHumCtrlMethod_Type(Integer32):
    """Custom type airFMSysActualHumCtrlMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("avgRemoteDewPt", 5),
          ("avgRemoteRH", 4),
          ("avgReturnDewPt", 3),
          ("avgReturnRH", 2),
          ("notApplicable", 1))
    )


_AirFMSysActualHumCtrlMethod_Type.__name__ = "Integer32"
_AirFMSysActualHumCtrlMethod_Object = MibScalar
airFMSysActualHumCtrlMethod = _AirFMSysActualHumCtrlMethod_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 22),
    _AirFMSysActualHumCtrlMethod_Type()
)
airFMSysActualHumCtrlMethod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysActualHumCtrlMethod.setStatus("mandatory")
_AirFMSysCtrlTempC_Type = Integer32
_AirFMSysCtrlTempC_Object = MibScalar
airFMSysCtrlTempC = _AirFMSysCtrlTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 23),
    _AirFMSysCtrlTempC_Type()
)
airFMSysCtrlTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCtrlTempC.setStatus("mandatory")
_AirFMSysCtrlTempF_Type = Integer32
_AirFMSysCtrlTempF_Object = MibScalar
airFMSysCtrlTempF = _AirFMSysCtrlTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 24),
    _AirFMSysCtrlTempF_Type()
)
airFMSysCtrlTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCtrlTempF.setStatus("mandatory")
_AirFMSysCtrlHum_Type = Integer32
_AirFMSysCtrlHum_Object = MibScalar
airFMSysCtrlHum = _AirFMSysCtrlHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 1, 25),
    _AirFMSysCtrlHum_Type()
)
airFMSysCtrlHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCtrlHum.setStatus("mandatory")
_AirFMSysDemands_ObjectIdentity = ObjectIdentity
airFMSysDemands = _AirFMSysDemands_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2)
)
_AirFMSysDXCoolingDmd_Type = Integer32
_AirFMSysDXCoolingDmd_Object = MibScalar
airFMSysDXCoolingDmd = _AirFMSysDXCoolingDmd_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 1),
    _AirFMSysDXCoolingDmd_Type()
)
airFMSysDXCoolingDmd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysDXCoolingDmd.setStatus("mandatory")
_AirFMSysDXDehumDmd_Type = Integer32
_AirFMSysDXDehumDmd_Object = MibScalar
airFMSysDXDehumDmd = _AirFMSysDXDehumDmd_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 2),
    _AirFMSysDXDehumDmd_Type()
)
airFMSysDXDehumDmd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysDXDehumDmd.setStatus("mandatory")
_AirFMSysDXActualCoolDehum_Type = Integer32
_AirFMSysDXActualCoolDehum_Object = MibScalar
airFMSysDXActualCoolDehum = _AirFMSysDXActualCoolDehum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 3),
    _AirFMSysDXActualCoolDehum_Type()
)
airFMSysDXActualCoolDehum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysDXActualCoolDehum.setStatus("mandatory")
_AirFMSysCoilFluidCoolDmd_Type = Integer32
_AirFMSysCoilFluidCoolDmd_Object = MibScalar
airFMSysCoilFluidCoolDmd = _AirFMSysCoilFluidCoolDmd_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 4),
    _AirFMSysCoilFluidCoolDmd_Type()
)
airFMSysCoilFluidCoolDmd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCoilFluidCoolDmd.setStatus("mandatory")
_AirFMSysCoilFluidDehumDmd_Type = Integer32
_AirFMSysCoilFluidDehumDmd_Object = MibScalar
airFMSysCoilFluidDehumDmd = _AirFMSysCoilFluidDehumDmd_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 5),
    _AirFMSysCoilFluidDehumDmd_Type()
)
airFMSysCoilFluidDehumDmd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCoilFluidDehumDmd.setStatus("mandatory")
_AirFMSysCoilFluidActualCoolDehum_Type = Integer32
_AirFMSysCoilFluidActualCoolDehum_Object = MibScalar
airFMSysCoilFluidActualCoolDehum = _AirFMSysCoilFluidActualCoolDehum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 6),
    _AirFMSysCoilFluidActualCoolDehum_Type()
)
airFMSysCoilFluidActualCoolDehum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCoilFluidActualCoolDehum.setStatus("mandatory")
_AirFMSysElectricReheatDmd_Type = Integer32
_AirFMSysElectricReheatDmd_Object = MibScalar
airFMSysElectricReheatDmd = _AirFMSysElectricReheatDmd_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 7),
    _AirFMSysElectricReheatDmd_Type()
)
airFMSysElectricReheatDmd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysElectricReheatDmd.setStatus("mandatory")
_AirFMSysActualElectricReheat_Type = Integer32
_AirFMSysActualElectricReheat_Object = MibScalar
airFMSysActualElectricReheat = _AirFMSysActualElectricReheat_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 8),
    _AirFMSysActualElectricReheat_Type()
)
airFMSysActualElectricReheat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysActualElectricReheat.setStatus("mandatory")


class _AirFMSysSteamHotGasReheatDmd_Type(Integer32):
    """Custom type airFMSysSteamHotGasReheatDmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_AirFMSysSteamHotGasReheatDmd_Type.__name__ = "Integer32"
_AirFMSysSteamHotGasReheatDmd_Object = MibScalar
airFMSysSteamHotGasReheatDmd = _AirFMSysSteamHotGasReheatDmd_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 9),
    _AirFMSysSteamHotGasReheatDmd_Type()
)
airFMSysSteamHotGasReheatDmd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysSteamHotGasReheatDmd.setStatus("mandatory")


class _AirFMSysActualSteamHotGasReheat_Type(Integer32):
    """Custom type airFMSysActualSteamHotGasReheat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_AirFMSysActualSteamHotGasReheat_Type.__name__ = "Integer32"
_AirFMSysActualSteamHotGasReheat_Object = MibScalar
airFMSysActualSteamHotGasReheat = _AirFMSysActualSteamHotGasReheat_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 10),
    _AirFMSysActualSteamHotGasReheat_Type()
)
airFMSysActualSteamHotGasReheat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysActualSteamHotGasReheat.setStatus("mandatory")
_AirFMSysSteamElectrodeHumDmd_Type = Integer32
_AirFMSysSteamElectrodeHumDmd_Object = MibScalar
airFMSysSteamElectrodeHumDmd = _AirFMSysSteamElectrodeHumDmd_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 11),
    _AirFMSysSteamElectrodeHumDmd_Type()
)
airFMSysSteamElectrodeHumDmd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysSteamElectrodeHumDmd.setStatus("mandatory")
_AirFMSysActualSteamElectrodeHum_Type = Integer32
_AirFMSysActualSteamElectrodeHum_Object = MibScalar
airFMSysActualSteamElectrodeHum = _AirFMSysActualSteamElectrodeHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 12),
    _AirFMSysActualSteamElectrodeHum_Type()
)
airFMSysActualSteamElectrodeHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysActualSteamElectrodeHum.setStatus("mandatory")


class _AirFMSysSteamHumDmd_Type(Integer32):
    """Custom type airFMSysSteamHumDmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_AirFMSysSteamHumDmd_Type.__name__ = "Integer32"
_AirFMSysSteamHumDmd_Object = MibScalar
airFMSysSteamHumDmd = _AirFMSysSteamHumDmd_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 13),
    _AirFMSysSteamHumDmd_Type()
)
airFMSysSteamHumDmd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysSteamHumDmd.setStatus("mandatory")


class _AirFMSysActualSteamHum_Type(Integer32):
    """Custom type airFMSysActualSteamHum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_AirFMSysActualSteamHum_Type.__name__ = "Integer32"
_AirFMSysActualSteamHum_Object = MibScalar
airFMSysActualSteamHum = _AirFMSysActualSteamHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 2, 14),
    _AirFMSysActualSteamHum_Type()
)
airFMSysActualSteamHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysActualSteamHum.setStatus("mandatory")
_AirFMSysSetup_ObjectIdentity = ObjectIdentity
airFMSysSetup = _AirFMSysSetup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3)
)


class _AirFMSysNumModules_Type(Integer32):
    """Custom type airFMSysNumModules based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("one", 2),
          ("three", 4),
          ("two", 3))
    )


_AirFMSysNumModules_Type.__name__ = "Integer32"
_AirFMSysNumModules_Object = MibScalar
airFMSysNumModules = _AirFMSysNumModules_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 1),
    _AirFMSysNumModules_Type()
)
airFMSysNumModules.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysNumModules.setStatus("mandatory")


class _AirFMSysNumPCIOMs_Type(Integer32):
    """Custom type airFMSysNumPCIOMs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("four", 5),
          ("notApplicable", 1),
          ("one", 2),
          ("three", 4),
          ("two", 3))
    )


_AirFMSysNumPCIOMs_Type.__name__ = "Integer32"
_AirFMSysNumPCIOMs_Object = MibScalar
airFMSysNumPCIOMs = _AirFMSysNumPCIOMs_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 2),
    _AirFMSysNumPCIOMs_Type()
)
airFMSysNumPCIOMs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysNumPCIOMs.setStatus("mandatory")
_AirFMSysMainsVlt_Type = DisplayString
_AirFMSysMainsVlt_Object = MibScalar
airFMSysMainsVlt = _AirFMSysMainsVlt_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 3),
    _AirFMSysMainsVlt_Type()
)
airFMSysMainsVlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysMainsVlt.setStatus("mandatory")
_AirFMSysUPSVlt_Type = DisplayString
_AirFMSysUPSVlt_Object = MibScalar
airFMSysUPSVlt = _AirFMSysUPSVlt_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 4),
    _AirFMSysUPSVlt_Type()
)
airFMSysUPSVlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysUPSVlt.setStatus("mandatory")


class _AirFMSysCoilCfg_Type(Integer32):
    """Custom type airFMSysCoilCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("chilledWater", 5),
          ("dx", 2),
          ("econ", 3),
          ("multicool", 4),
          ("notApplicable", 1))
    )


_AirFMSysCoilCfg_Type.__name__ = "Integer32"
_AirFMSysCoilCfg_Object = MibScalar
airFMSysCoilCfg = _AirFMSysCoilCfg_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 5),
    _AirFMSysCoilCfg_Type()
)
airFMSysCoilCfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCoilCfg.setStatus("mandatory")


class _AirFMSysRefrigType_Type(Integer32):
    """Custom type airFMSysRefrigType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r22", 2),
          ("r407C", 3))
    )


_AirFMSysRefrigType_Type.__name__ = "Integer32"
_AirFMSysRefrigType_Object = MibScalar
airFMSysRefrigType = _AirFMSysRefrigType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 6),
    _AirFMSysRefrigType_Type()
)
airFMSysRefrigType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysRefrigType.setStatus("mandatory")


class _AirFMSysHeatRejection_Type(Integer32):
    """Custom type airFMSysHeatRejection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("airCooled", 2),
          ("glycolCooled", 4),
          ("notApplicable", 1),
          ("waterCooled", 3))
    )


_AirFMSysHeatRejection_Type.__name__ = "Integer32"
_AirFMSysHeatRejection_Object = MibScalar
airFMSysHeatRejection = _AirFMSysHeatRejection_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 7),
    _AirFMSysHeatRejection_Type()
)
airFMSysHeatRejection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysHeatRejection.setStatus("mandatory")


class _AirFMSysDischAirPtrn_Type(Integer32):
    """Custom type airFMSysDischAirPtrn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("downFlow", 3),
          ("horizFlow", 4),
          ("notApplicable", 1),
          ("upFlow", 2))
    )


_AirFMSysDischAirPtrn_Type.__name__ = "Integer32"
_AirFMSysDischAirPtrn_Object = MibScalar
airFMSysDischAirPtrn = _AirFMSysDischAirPtrn_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 8),
    _AirFMSysDischAirPtrn_Type()
)
airFMSysDischAirPtrn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysDischAirPtrn.setStatus("mandatory")


class _AirFMSysAirFltr_Type(Integer32):
    """Custom type airFMSysAirFltr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("highEfficiency", 3),
          ("notApplicable", 1),
          ("standard", 2))
    )


_AirFMSysAirFltr_Type.__name__ = "Integer32"
_AirFMSysAirFltr_Object = MibScalar
airFMSysAirFltr = _AirFMSysAirFltr_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 9),
    _AirFMSysAirFltr_Type()
)
airFMSysAirFltr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAirFltr.setStatus("mandatory")


class _AirFMSysFlowSwitch_Type(Integer32):
    """Custom type airFMSysFlowSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dxEcon", 3),
          ("multiCoolChillWater", 4),
          ("none", 2),
          ("notApplicable", 1))
    )


_AirFMSysFlowSwitch_Type.__name__ = "Integer32"
_AirFMSysFlowSwitch_Object = MibScalar
airFMSysFlowSwitch = _AirFMSysFlowSwitch_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 10),
    _AirFMSysFlowSwitch_Type()
)
airFMSysFlowSwitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysFlowSwitch.setStatus("mandatory")


class _AirFMSysCoilFluidVlvAct_Type(Integer32):
    """Custom type airFMSysCoilFluidVlvAct based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("floatingControl", 4),
          ("none", 2),
          ("notApplicable", 1),
          ("springAnalog", 3))
    )


_AirFMSysCoilFluidVlvAct_Type.__name__ = "Integer32"
_AirFMSysCoilFluidVlvAct_Object = MibScalar
airFMSysCoilFluidVlvAct = _AirFMSysCoilFluidVlvAct_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 11),
    _AirFMSysCoilFluidVlvAct_Type()
)
airFMSysCoilFluidVlvAct.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCoilFluidVlvAct.setStatus("mandatory")


class _AirFMSysCoilFluidVlvType_Type(Integer32):
    """Custom type airFMSysCoilFluidVlvType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("threeWay", 3),
          ("twoWay", 2))
    )


_AirFMSysCoilFluidVlvType_Type.__name__ = "Integer32"
_AirFMSysCoilFluidVlvType_Object = MibScalar
airFMSysCoilFluidVlvType = _AirFMSysCoilFluidVlvType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 12),
    _AirFMSysCoilFluidVlvType_Type()
)
airFMSysCoilFluidVlvType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCoilFluidVlvType.setStatus("mandatory")


class _AirFMSysCndsrFluidVlvAct_Type(Integer32):
    """Custom type airFMSysCndsrFluidVlvAct based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("floatingControl", 3),
          ("none", 2),
          ("notApplicable", 1))
    )


_AirFMSysCndsrFluidVlvAct_Type.__name__ = "Integer32"
_AirFMSysCndsrFluidVlvAct_Object = MibScalar
airFMSysCndsrFluidVlvAct = _AirFMSysCndsrFluidVlvAct_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 13),
    _AirFMSysCndsrFluidVlvAct_Type()
)
airFMSysCndsrFluidVlvAct.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCndsrFluidVlvAct.setStatus("mandatory")


class _AirFMSysCndsrFluidVlvType_Type(Integer32):
    """Custom type airFMSysCndsrFluidVlvType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("threeWay", 3),
          ("twoWay", 2))
    )


_AirFMSysCndsrFluidVlvType_Type.__name__ = "Integer32"
_AirFMSysCndsrFluidVlvType_Object = MibScalar
airFMSysCndsrFluidVlvType = _AirFMSysCndsrFluidVlvType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 14),
    _AirFMSysCndsrFluidVlvType_Type()
)
airFMSysCndsrFluidVlvType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysCndsrFluidVlvType.setStatus("mandatory")


class _AirFMSysHotWaterVlvAct_Type(Integer32):
    """Custom type airFMSysHotWaterVlvAct based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("floatingControl", 4),
          ("none", 2),
          ("notApplicable", 1),
          ("springAnalog", 3))
    )


_AirFMSysHotWaterVlvAct_Type.__name__ = "Integer32"
_AirFMSysHotWaterVlvAct_Object = MibScalar
airFMSysHotWaterVlvAct = _AirFMSysHotWaterVlvAct_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 15),
    _AirFMSysHotWaterVlvAct_Type()
)
airFMSysHotWaterVlvAct.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysHotWaterVlvAct.setStatus("mandatory")
_AirFMSysNumRemoteSensors_Type = Integer32
_AirFMSysNumRemoteSensors_Object = MibScalar
airFMSysNumRemoteSensors = _AirFMSysNumRemoteSensors_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 3, 16),
    _AirFMSysNumRemoteSensors_Type()
)
airFMSysNumRemoteSensors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysNumRemoteSensors.setStatus("mandatory")
_AirFMSysConfig_ObjectIdentity = ObjectIdentity
airFMSysConfig = _AirFMSysConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4)
)


class _AirFMSysPrimaryControlSensor_Type(Integer32):
    """Custom type airFMSysPrimaryControlSensor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("remote", 3),
          ("return", 2))
    )


_AirFMSysPrimaryControlSensor_Type.__name__ = "Integer32"
_AirFMSysPrimaryControlSensor_Object = MibScalar
airFMSysPrimaryControlSensor = _AirFMSysPrimaryControlSensor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 1),
    _AirFMSysPrimaryControlSensor_Type()
)
airFMSysPrimaryControlSensor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysPrimaryControlSensor.setStatus("mandatory")


class _AirFMSysRemoteSensorData_Type(Integer32):
    """Custom type airFMSysRemoteSensorData based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("average", 2),
          ("maximum", 3),
          ("notApplicable", 1))
    )


_AirFMSysRemoteSensorData_Type.__name__ = "Integer32"
_AirFMSysRemoteSensorData_Object = MibScalar
airFMSysRemoteSensorData = _AirFMSysRemoteSensorData_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 2),
    _AirFMSysRemoteSensorData_Type()
)
airFMSysRemoteSensorData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysRemoteSensorData.setStatus("mandatory")


class _AirFMSysFastStartup_Type(Integer32):
    """Custom type airFMSysFastStartup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysFastStartup_Type.__name__ = "Integer32"
_AirFMSysFastStartup_Object = MibScalar
airFMSysFastStartup = _AirFMSysFastStartup_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 3),
    _AirFMSysFastStartup_Type()
)
airFMSysFastStartup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysFastStartup.setStatus("mandatory")
_AirFMSysStartupDelay_Type = Integer32
_AirFMSysStartupDelay_Object = MibScalar
airFMSysStartupDelay = _AirFMSysStartupDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 4),
    _AirFMSysStartupDelay_Type()
)
airFMSysStartupDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysStartupDelay.setStatus("mandatory")
_AirFMSysModeDelay_Type = Integer32
_AirFMSysModeDelay_Object = MibScalar
airFMSysModeDelay = _AirFMSysModeDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 5),
    _AirFMSysModeDelay_Type()
)
airFMSysModeDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysModeDelay.setStatus("mandatory")
_AirFMSysCommLossShutdownDelay_Type = Integer32
_AirFMSysCommLossShutdownDelay_Object = MibScalar
airFMSysCommLossShutdownDelay = _AirFMSysCommLossShutdownDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 6),
    _AirFMSysCommLossShutdownDelay_Type()
)
airFMSysCommLossShutdownDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCommLossShutdownDelay.setStatus("mandatory")


class _AirFMSysResetSysFailure_Type(Integer32):
    """Custom type airFMSysResetSysFailure based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMSysResetSysFailure_Type.__name__ = "Integer32"
_AirFMSysResetSysFailure_Object = MibScalar
airFMSysResetSysFailure = _AirFMSysResetSysFailure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 7),
    _AirFMSysResetSysFailure_Type()
)
airFMSysResetSysFailure.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysResetSysFailure.setStatus("mandatory")


class _AirFMSysResetUserDflts_Type(Integer32):
    """Custom type airFMSysResetUserDflts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMSysResetUserDflts_Type.__name__ = "Integer32"
_AirFMSysResetUserDflts_Object = MibScalar
airFMSysResetUserDflts = _AirFMSysResetUserDflts_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 8),
    _AirFMSysResetUserDflts_Type()
)
airFMSysResetUserDflts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysResetUserDflts.setStatus("mandatory")


class _AirFMSysResetFldSrvcDflts_Type(Integer32):
    """Custom type airFMSysResetFldSrvcDflts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMSysResetFldSrvcDflts_Type.__name__ = "Integer32"
_AirFMSysResetFldSrvcDflts_Object = MibScalar
airFMSysResetFldSrvcDflts = _AirFMSysResetFldSrvcDflts_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 9),
    _AirFMSysResetFldSrvcDflts_Type()
)
airFMSysResetFldSrvcDflts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysResetFldSrvcDflts.setStatus("mandatory")


class _AirFMSysResetRunHours_Type(Integer32):
    """Custom type airFMSysResetRunHours based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMSysResetRunHours_Type.__name__ = "Integer32"
_AirFMSysResetRunHours_Object = MibScalar
airFMSysResetRunHours = _AirFMSysResetRunHours_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 4, 10),
    _AirFMSysResetRunHours_Type()
)
airFMSysResetRunHours.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysResetRunHours.setStatus("mandatory")
_AirFMSysCooling_ObjectIdentity = ObjectIdentity
airFMSysCooling = _AirFMSysCooling_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5)
)
_AirFMSysCompMinOnTime_Type = Integer32
_AirFMSysCompMinOnTime_Object = MibScalar
airFMSysCompMinOnTime = _AirFMSysCompMinOnTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 1),
    _AirFMSysCompMinOnTime_Type()
)
airFMSysCompMinOnTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCompMinOnTime.setStatus("mandatory")
_AirFMSysCompMinOffTime_Type = Integer32
_AirFMSysCompMinOffTime_Object = MibScalar
airFMSysCompMinOffTime = _AirFMSysCompMinOffTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 2),
    _AirFMSysCompMinOffTime_Type()
)
airFMSysCompMinOffTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCompMinOffTime.setStatus("mandatory")
_AirFMSysCompRotPeriod_Type = Integer32
_AirFMSysCompRotPeriod_Object = MibScalar
airFMSysCompRotPeriod = _AirFMSysCompRotPeriod_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 3),
    _AirFMSysCompRotPeriod_Type()
)
airFMSysCompRotPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCompRotPeriod.setStatus("mandatory")
_AirFMSysEconIsolVlvOpenDelay_Type = Integer32
_AirFMSysEconIsolVlvOpenDelay_Object = MibScalar
airFMSysEconIsolVlvOpenDelay = _AirFMSysEconIsolVlvOpenDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 4),
    _AirFMSysEconIsolVlvOpenDelay_Type()
)
airFMSysEconIsolVlvOpenDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysEconIsolVlvOpenDelay.setStatus("mandatory")
_AirFMSysEconIsolVlvCloseDelay_Type = Integer32
_AirFMSysEconIsolVlvCloseDelay_Object = MibScalar
airFMSysEconIsolVlvCloseDelay = _AirFMSysEconIsolVlvCloseDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 5),
    _AirFMSysEconIsolVlvCloseDelay_Type()
)
airFMSysEconIsolVlvCloseDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysEconIsolVlvCloseDelay.setStatus("mandatory")
_AirFMSysCndsrFluidVlvCloseDelay_Type = Integer32
_AirFMSysCndsrFluidVlvCloseDelay_Object = MibScalar
airFMSysCndsrFluidVlvCloseDelay = _AirFMSysCndsrFluidVlvCloseDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 6),
    _AirFMSysCndsrFluidVlvCloseDelay_Type()
)
airFMSysCndsrFluidVlvCloseDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCndsrFluidVlvCloseDelay.setStatus("mandatory")
_AirFMSysInterstageDelay_Type = Integer32
_AirFMSysInterstageDelay_Object = MibScalar
airFMSysInterstageDelay = _AirFMSysInterstageDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 7),
    _AirFMSysInterstageDelay_Type()
)
airFMSysInterstageDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysInterstageDelay.setStatus("mandatory")


class _AirFMSysCoolState_Type(Integer32):
    """Custom type airFMSysCoolState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysCoolState_Type.__name__ = "Integer32"
_AirFMSysCoolState_Object = MibScalar
airFMSysCoolState = _AirFMSysCoolState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 8),
    _AirFMSysCoolState_Type()
)
airFMSysCoolState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoolState.setStatus("mandatory")


class _AirFMSysCoolEssFunction_Type(Integer32):
    """Custom type airFMSysCoolEssFunction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 3),
          ("notApplicable", 1),
          ("yes", 2))
    )


_AirFMSysCoolEssFunction_Type.__name__ = "Integer32"
_AirFMSysCoolEssFunction_Object = MibScalar
airFMSysCoolEssFunction = _AirFMSysCoolEssFunction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 9),
    _AirFMSysCoolEssFunction_Type()
)
airFMSysCoolEssFunction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoolEssFunction.setStatus("mandatory")
_AirFMSysCoolSetpointC_Type = Integer32
_AirFMSysCoolSetpointC_Object = MibScalar
airFMSysCoolSetpointC = _AirFMSysCoolSetpointC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 10),
    _AirFMSysCoolSetpointC_Type()
)
airFMSysCoolSetpointC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoolSetpointC.setStatus("mandatory")
_AirFMSysCoolSetpointF_Type = Integer32
_AirFMSysCoolSetpointF_Object = MibScalar
airFMSysCoolSetpointF = _AirFMSysCoolSetpointF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 11),
    _AirFMSysCoolSetpointF_Type()
)
airFMSysCoolSetpointF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoolSetpointF.setStatus("mandatory")
_AirFMSysCoolDeadbandC_Type = Integer32
_AirFMSysCoolDeadbandC_Object = MibScalar
airFMSysCoolDeadbandC = _AirFMSysCoolDeadbandC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 12),
    _AirFMSysCoolDeadbandC_Type()
)
airFMSysCoolDeadbandC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoolDeadbandC.setStatus("mandatory")
_AirFMSysCoolDeadbandF_Type = Integer32
_AirFMSysCoolDeadbandF_Object = MibScalar
airFMSysCoolDeadbandF = _AirFMSysCoolDeadbandF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 13),
    _AirFMSysCoolDeadbandF_Type()
)
airFMSysCoolDeadbandF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoolDeadbandF.setStatus("mandatory")


class _AirFMSysCoolEconIsolFunction_Type(Integer32):
    """Custom type airFMSysCoolEconIsolFunction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysCoolEconIsolFunction_Type.__name__ = "Integer32"
_AirFMSysCoolEconIsolFunction_Object = MibScalar
airFMSysCoolEconIsolFunction = _AirFMSysCoolEconIsolFunction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 14),
    _AirFMSysCoolEconIsolFunction_Type()
)
airFMSysCoolEconIsolFunction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoolEconIsolFunction.setStatus("mandatory")


class _AirFMSysSuctPresCompensation_Type(Integer32):
    """Custom type airFMSysSuctPresCompensation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysSuctPresCompensation_Type.__name__ = "Integer32"
_AirFMSysSuctPresCompensation_Object = MibScalar
airFMSysSuctPresCompensation = _AirFMSysSuctPresCompensation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 15),
    _AirFMSysSuctPresCompensation_Type()
)
airFMSysSuctPresCompensation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysSuctPresCompensation.setStatus("mandatory")
_AirFMSysCoilFluidActivThreshC_Type = Integer32
_AirFMSysCoilFluidActivThreshC_Object = MibScalar
airFMSysCoilFluidActivThreshC = _AirFMSysCoilFluidActivThreshC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 16),
    _AirFMSysCoilFluidActivThreshC_Type()
)
airFMSysCoilFluidActivThreshC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoilFluidActivThreshC.setStatus("mandatory")
_AirFMSysCoilFluidActivThreshF_Type = Integer32
_AirFMSysCoilFluidActivThreshF_Object = MibScalar
airFMSysCoilFluidActivThreshF = _AirFMSysCoilFluidActivThreshF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 17),
    _AirFMSysCoilFluidActivThreshF_Type()
)
airFMSysCoilFluidActivThreshF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoilFluidActivThreshF.setStatus("mandatory")
_AirFMSysCoilFluidActivDeadbandC_Type = Integer32
_AirFMSysCoilFluidActivDeadbandC_Object = MibScalar
airFMSysCoilFluidActivDeadbandC = _AirFMSysCoilFluidActivDeadbandC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 18),
    _AirFMSysCoilFluidActivDeadbandC_Type()
)
airFMSysCoilFluidActivDeadbandC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoilFluidActivDeadbandC.setStatus("mandatory")
_AirFMSysCoilFluidActivDeadbandF_Type = Integer32
_AirFMSysCoilFluidActivDeadbandF_Object = MibScalar
airFMSysCoilFluidActivDeadbandF = _AirFMSysCoilFluidActivDeadbandF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 19),
    _AirFMSysCoilFluidActivDeadbandF_Type()
)
airFMSysCoilFluidActivDeadbandF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoilFluidActivDeadbandF.setStatus("mandatory")


class _AirFMSysCoolPIDMethod_Type(Integer32):
    """Custom type airFMSysCoolPIDMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("p", 2),
          ("pi", 3),
          ("pid", 4))
    )


_AirFMSysCoolPIDMethod_Type.__name__ = "Integer32"
_AirFMSysCoolPIDMethod_Object = MibScalar
airFMSysCoolPIDMethod = _AirFMSysCoolPIDMethod_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 20),
    _AirFMSysCoolPIDMethod_Type()
)
airFMSysCoolPIDMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoolPIDMethod.setStatus("mandatory")
_AirFMSysCoolPIDGainP_Type = Integer32
_AirFMSysCoolPIDGainP_Object = MibScalar
airFMSysCoolPIDGainP = _AirFMSysCoolPIDGainP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 21),
    _AirFMSysCoolPIDGainP_Type()
)
airFMSysCoolPIDGainP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoolPIDGainP.setStatus("mandatory")
_AirFMSysCoolPIDResetRateI_Type = Integer32
_AirFMSysCoolPIDResetRateI_Object = MibScalar
airFMSysCoolPIDResetRateI = _AirFMSysCoolPIDResetRateI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 22),
    _AirFMSysCoolPIDResetRateI_Type()
)
airFMSysCoolPIDResetRateI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoolPIDResetRateI.setStatus("mandatory")
_AirFMSysCoolPIDDerivativeD_Type = Integer32
_AirFMSysCoolPIDDerivativeD_Object = MibScalar
airFMSysCoolPIDDerivativeD = _AirFMSysCoolPIDDerivativeD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 5, 23),
    _AirFMSysCoolPIDDerivativeD_Type()
)
airFMSysCoolPIDDerivativeD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysCoolPIDDerivativeD.setStatus("mandatory")
_AirFMSysHumidify_ObjectIdentity = ObjectIdentity
airFMSysHumidify = _AirFMSysHumidify_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6)
)


class _AirFMSysHumState_Type(Integer32):
    """Custom type airFMSysHumState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysHumState_Type.__name__ = "Integer32"
_AirFMSysHumState_Object = MibScalar
airFMSysHumState = _AirFMSysHumState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 1),
    _AirFMSysHumState_Type()
)
airFMSysHumState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHumState.setStatus("mandatory")


class _AirFMSysHumEssFunction_Type(Integer32):
    """Custom type airFMSysHumEssFunction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 3),
          ("notApplicable", 1),
          ("yes", 2))
    )


_AirFMSysHumEssFunction_Type.__name__ = "Integer32"
_AirFMSysHumEssFunction_Object = MibScalar
airFMSysHumEssFunction = _AirFMSysHumEssFunction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 2),
    _AirFMSysHumEssFunction_Type()
)
airFMSysHumEssFunction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHumEssFunction.setStatus("mandatory")
_AirFMSysHumSetpoint_Type = Integer32
_AirFMSysHumSetpoint_Object = MibScalar
airFMSysHumSetpoint = _AirFMSysHumSetpoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 3),
    _AirFMSysHumSetpoint_Type()
)
airFMSysHumSetpoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHumSetpoint.setStatus("mandatory")
_AirFMSysHumDeadband_Type = Integer32
_AirFMSysHumDeadband_Object = MibScalar
airFMSysHumDeadband = _AirFMSysHumDeadband_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 4),
    _AirFMSysHumDeadband_Type()
)
airFMSysHumDeadband.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHumDeadband.setStatus("mandatory")


class _AirFMSysHumCtrlSetting_Type(Integer32):
    """Custom type airFMSysHumCtrlSetting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dewPoint", 3),
          ("notApplicable", 1),
          ("relativeHum", 2))
    )


_AirFMSysHumCtrlSetting_Type.__name__ = "Integer32"
_AirFMSysHumCtrlSetting_Object = MibScalar
airFMSysHumCtrlSetting = _AirFMSysHumCtrlSetting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 5),
    _AirFMSysHumCtrlSetting_Type()
)
airFMSysHumCtrlSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHumCtrlSetting.setStatus("mandatory")


class _AirFMSysActualHumCtrl_Type(Integer32):
    """Custom type airFMSysActualHumCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dewPoint", 3),
          ("notApplicable", 1),
          ("relativeHum", 2))
    )


_AirFMSysActualHumCtrl_Type.__name__ = "Integer32"
_AirFMSysActualHumCtrl_Object = MibScalar
airFMSysActualHumCtrl = _AirFMSysActualHumCtrl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 6),
    _AirFMSysActualHumCtrl_Type()
)
airFMSysActualHumCtrl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysActualHumCtrl.setStatus("mandatory")
_AirFMSysHumSensBand_Type = Integer32
_AirFMSysHumSensBand_Object = MibScalar
airFMSysHumSensBand = _AirFMSysHumSensBand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 6, 7),
    _AirFMSysHumSensBand_Type()
)
airFMSysHumSensBand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHumSensBand.setStatus("mandatory")
_AirFMSysDehumidify_ObjectIdentity = ObjectIdentity
airFMSysDehumidify = _AirFMSysDehumidify_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7)
)


class _AirFMSysDehumState_Type(Integer32):
    """Custom type airFMSysDehumState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysDehumState_Type.__name__ = "Integer32"
_AirFMSysDehumState_Object = MibScalar
airFMSysDehumState = _AirFMSysDehumState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 1),
    _AirFMSysDehumState_Type()
)
airFMSysDehumState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysDehumState.setStatus("mandatory")


class _AirFMSysDehumEssFunction_Type(Integer32):
    """Custom type airFMSysDehumEssFunction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 3),
          ("notApplicable", 1),
          ("yes", 2))
    )


_AirFMSysDehumEssFunction_Type.__name__ = "Integer32"
_AirFMSysDehumEssFunction_Object = MibScalar
airFMSysDehumEssFunction = _AirFMSysDehumEssFunction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 2),
    _AirFMSysDehumEssFunction_Type()
)
airFMSysDehumEssFunction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysDehumEssFunction.setStatus("mandatory")
_AirFMSysDehumSetpoint_Type = Integer32
_AirFMSysDehumSetpoint_Object = MibScalar
airFMSysDehumSetpoint = _AirFMSysDehumSetpoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 3),
    _AirFMSysDehumSetpoint_Type()
)
airFMSysDehumSetpoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysDehumSetpoint.setStatus("mandatory")
_AirFMSysDehumDeadband_Type = Integer32
_AirFMSysDehumDeadband_Object = MibScalar
airFMSysDehumDeadband = _AirFMSysDehumDeadband_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 4),
    _AirFMSysDehumDeadband_Type()
)
airFMSysDehumDeadband.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysDehumDeadband.setStatus("mandatory")


class _AirFMSysDehumCapacity_Type(Integer32):
    """Custom type airFMSysDehumCapacity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("full", 3),
          ("half", 2),
          ("notApplicable", 1))
    )


_AirFMSysDehumCapacity_Type.__name__ = "Integer32"
_AirFMSysDehumCapacity_Object = MibScalar
airFMSysDehumCapacity = _AirFMSysDehumCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 5),
    _AirFMSysDehumCapacity_Type()
)
airFMSysDehumCapacity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysDehumCapacity.setStatus("mandatory")


class _AirFMSysDehumPIDMethod_Type(Integer32):
    """Custom type airFMSysDehumPIDMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("p", 2),
          ("pi", 3),
          ("pid", 4))
    )


_AirFMSysDehumPIDMethod_Type.__name__ = "Integer32"
_AirFMSysDehumPIDMethod_Object = MibScalar
airFMSysDehumPIDMethod = _AirFMSysDehumPIDMethod_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 6),
    _AirFMSysDehumPIDMethod_Type()
)
airFMSysDehumPIDMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysDehumPIDMethod.setStatus("mandatory")
_AirFMSysDehumPIDGainP_Type = Integer32
_AirFMSysDehumPIDGainP_Object = MibScalar
airFMSysDehumPIDGainP = _AirFMSysDehumPIDGainP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 7),
    _AirFMSysDehumPIDGainP_Type()
)
airFMSysDehumPIDGainP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysDehumPIDGainP.setStatus("mandatory")
_AirFMSysDehumPIDResetRateI_Type = Integer32
_AirFMSysDehumPIDResetRateI_Object = MibScalar
airFMSysDehumPIDResetRateI = _AirFMSysDehumPIDResetRateI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 8),
    _AirFMSysDehumPIDResetRateI_Type()
)
airFMSysDehumPIDResetRateI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysDehumPIDResetRateI.setStatus("mandatory")
_AirFMSysDehumPIDDerivativeD_Type = Integer32
_AirFMSysDehumPIDDerivativeD_Object = MibScalar
airFMSysDehumPIDDerivativeD = _AirFMSysDehumPIDDerivativeD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 7, 9),
    _AirFMSysDehumPIDDerivativeD_Type()
)
airFMSysDehumPIDDerivativeD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysDehumPIDDerivativeD.setStatus("mandatory")
_AirFMSysReheat_ObjectIdentity = ObjectIdentity
airFMSysReheat = _AirFMSysReheat_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8)
)


class _AirFMSysReheatState_Type(Integer32):
    """Custom type airFMSysReheatState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysReheatState_Type.__name__ = "Integer32"
_AirFMSysReheatState_Object = MibScalar
airFMSysReheatState = _AirFMSysReheatState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 1),
    _AirFMSysReheatState_Type()
)
airFMSysReheatState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysReheatState.setStatus("mandatory")


class _AirFMSysReheatEssFunction_Type(Integer32):
    """Custom type airFMSysReheatEssFunction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 3),
          ("notApplicable", 1),
          ("yes", 2))
    )


_AirFMSysReheatEssFunction_Type.__name__ = "Integer32"
_AirFMSysReheatEssFunction_Object = MibScalar
airFMSysReheatEssFunction = _AirFMSysReheatEssFunction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 2),
    _AirFMSysReheatEssFunction_Type()
)
airFMSysReheatEssFunction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysReheatEssFunction.setStatus("mandatory")
_AirFMSysReheatSetpointC_Type = Integer32
_AirFMSysReheatSetpointC_Object = MibScalar
airFMSysReheatSetpointC = _AirFMSysReheatSetpointC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 3),
    _AirFMSysReheatSetpointC_Type()
)
airFMSysReheatSetpointC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysReheatSetpointC.setStatus("mandatory")
_AirFMSysReheatSetpointF_Type = Integer32
_AirFMSysReheatSetpointF_Object = MibScalar
airFMSysReheatSetpointF = _AirFMSysReheatSetpointF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 4),
    _AirFMSysReheatSetpointF_Type()
)
airFMSysReheatSetpointF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysReheatSetpointF.setStatus("mandatory")
_AirFMSysReheatDeadbandC_Type = Integer32
_AirFMSysReheatDeadbandC_Object = MibScalar
airFMSysReheatDeadbandC = _AirFMSysReheatDeadbandC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 5),
    _AirFMSysReheatDeadbandC_Type()
)
airFMSysReheatDeadbandC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysReheatDeadbandC.setStatus("mandatory")
_AirFMSysReheatDeadbandF_Type = Integer32
_AirFMSysReheatDeadbandF_Object = MibScalar
airFMSysReheatDeadbandF = _AirFMSysReheatDeadbandF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 6),
    _AirFMSysReheatDeadbandF_Type()
)
airFMSysReheatDeadbandF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysReheatDeadbandF.setStatus("mandatory")


class _AirFMSysReheatPIDMethod_Type(Integer32):
    """Custom type airFMSysReheatPIDMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("p", 2),
          ("pi", 3),
          ("pid", 4))
    )


_AirFMSysReheatPIDMethod_Type.__name__ = "Integer32"
_AirFMSysReheatPIDMethod_Object = MibScalar
airFMSysReheatPIDMethod = _AirFMSysReheatPIDMethod_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 7),
    _AirFMSysReheatPIDMethod_Type()
)
airFMSysReheatPIDMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysReheatPIDMethod.setStatus("mandatory")
_AirFMSysReheatPIDGainP_Type = Integer32
_AirFMSysReheatPIDGainP_Object = MibScalar
airFMSysReheatPIDGainP = _AirFMSysReheatPIDGainP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 8),
    _AirFMSysReheatPIDGainP_Type()
)
airFMSysReheatPIDGainP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysReheatPIDGainP.setStatus("mandatory")
_AirFMSysReheatPIDResetRateI_Type = Integer32
_AirFMSysReheatPIDResetRateI_Object = MibScalar
airFMSysReheatPIDResetRateI = _AirFMSysReheatPIDResetRateI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 9),
    _AirFMSysReheatPIDResetRateI_Type()
)
airFMSysReheatPIDResetRateI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysReheatPIDResetRateI.setStatus("mandatory")
_AirFMSysReheatPIDDerivativeD_Type = Integer32
_AirFMSysReheatPIDDerivativeD_Object = MibScalar
airFMSysReheatPIDDerivativeD = _AirFMSysReheatPIDDerivativeD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 8, 10),
    _AirFMSysReheatPIDDerivativeD_Type()
)
airFMSysReheatPIDDerivativeD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysReheatPIDDerivativeD.setStatus("mandatory")
_AirFMSysThresholds_ObjectIdentity = ObjectIdentity
airFMSysThresholds = _AirFMSysThresholds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9)
)
_AirFMSysHighSplyTempC_Type = Integer32
_AirFMSysHighSplyTempC_Object = MibScalar
airFMSysHighSplyTempC = _AirFMSysHighSplyTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 1),
    _AirFMSysHighSplyTempC_Type()
)
airFMSysHighSplyTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHighSplyTempC.setStatus("mandatory")
_AirFMSysHighSplyTempF_Type = Integer32
_AirFMSysHighSplyTempF_Object = MibScalar
airFMSysHighSplyTempF = _AirFMSysHighSplyTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 2),
    _AirFMSysHighSplyTempF_Type()
)
airFMSysHighSplyTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHighSplyTempF.setStatus("mandatory")
_AirFMSysLowSplyTempC_Type = Integer32
_AirFMSysLowSplyTempC_Object = MibScalar
airFMSysLowSplyTempC = _AirFMSysLowSplyTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 3),
    _AirFMSysLowSplyTempC_Type()
)
airFMSysLowSplyTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysLowSplyTempC.setStatus("mandatory")
_AirFMSysLowSplyTempF_Type = Integer32
_AirFMSysLowSplyTempF_Object = MibScalar
airFMSysLowSplyTempF = _AirFMSysLowSplyTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 4),
    _AirFMSysLowSplyTempF_Type()
)
airFMSysLowSplyTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysLowSplyTempF.setStatus("mandatory")
_AirFMSysHighCoilFluidTempC_Type = Integer32
_AirFMSysHighCoilFluidTempC_Object = MibScalar
airFMSysHighCoilFluidTempC = _AirFMSysHighCoilFluidTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 5),
    _AirFMSysHighCoilFluidTempC_Type()
)
airFMSysHighCoilFluidTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHighCoilFluidTempC.setStatus("mandatory")
_AirFMSysHighCoilFluidTempF_Type = Integer32
_AirFMSysHighCoilFluidTempF_Object = MibScalar
airFMSysHighCoilFluidTempF = _AirFMSysHighCoilFluidTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 6),
    _AirFMSysHighCoilFluidTempF_Type()
)
airFMSysHighCoilFluidTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHighCoilFluidTempF.setStatus("mandatory")
_AirFMSysLowCoilFluidTempC_Type = Integer32
_AirFMSysLowCoilFluidTempC_Object = MibScalar
airFMSysLowCoilFluidTempC = _AirFMSysLowCoilFluidTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 7),
    _AirFMSysLowCoilFluidTempC_Type()
)
airFMSysLowCoilFluidTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysLowCoilFluidTempC.setStatus("mandatory")
_AirFMSysLowCoilFluidTempF_Type = Integer32
_AirFMSysLowCoilFluidTempF_Object = MibScalar
airFMSysLowCoilFluidTempF = _AirFMSysLowCoilFluidTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 8),
    _AirFMSysLowCoilFluidTempF_Type()
)
airFMSysLowCoilFluidTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysLowCoilFluidTempF.setStatus("mandatory")
_AirFMSysHighCtrlTempC_Type = Integer32
_AirFMSysHighCtrlTempC_Object = MibScalar
airFMSysHighCtrlTempC = _AirFMSysHighCtrlTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 9),
    _AirFMSysHighCtrlTempC_Type()
)
airFMSysHighCtrlTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHighCtrlTempC.setStatus("mandatory")
_AirFMSysHighCtrlTempF_Type = Integer32
_AirFMSysHighCtrlTempF_Object = MibScalar
airFMSysHighCtrlTempF = _AirFMSysHighCtrlTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 10),
    _AirFMSysHighCtrlTempF_Type()
)
airFMSysHighCtrlTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHighCtrlTempF.setStatus("mandatory")
_AirFMSysLowCtrlTempC_Type = Integer32
_AirFMSysLowCtrlTempC_Object = MibScalar
airFMSysLowCtrlTempC = _AirFMSysLowCtrlTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 11),
    _AirFMSysLowCtrlTempC_Type()
)
airFMSysLowCtrlTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysLowCtrlTempC.setStatus("mandatory")
_AirFMSysLowCtrlTempF_Type = Integer32
_AirFMSysLowCtrlTempF_Object = MibScalar
airFMSysLowCtrlTempF = _AirFMSysLowCtrlTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 12),
    _AirFMSysLowCtrlTempF_Type()
)
airFMSysLowCtrlTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysLowCtrlTempF.setStatus("mandatory")
_AirFMSysHighCtrlHum_Type = Integer32
_AirFMSysHighCtrlHum_Object = MibScalar
airFMSysHighCtrlHum = _AirFMSysHighCtrlHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 13),
    _AirFMSysHighCtrlHum_Type()
)
airFMSysHighCtrlHum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHighCtrlHum.setStatus("mandatory")
_AirFMSysLowCtrlHum_Type = Integer32
_AirFMSysLowCtrlHum_Object = MibScalar
airFMSysLowCtrlHum = _AirFMSysLowCtrlHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 14),
    _AirFMSysLowCtrlHum_Type()
)
airFMSysLowCtrlHum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysLowCtrlHum.setStatus("mandatory")
_AirFMSysTempAlarmDelay_Type = Integer32
_AirFMSysTempAlarmDelay_Object = MibScalar
airFMSysTempAlarmDelay = _AirFMSysTempAlarmDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 15),
    _AirFMSysTempAlarmDelay_Type()
)
airFMSysTempAlarmDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysTempAlarmDelay.setStatus("mandatory")
_AirFMSysHumAlarmDelay_Type = Integer32
_AirFMSysHumAlarmDelay_Object = MibScalar
airFMSysHumAlarmDelay = _AirFMSysHumAlarmDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 9, 16),
    _AirFMSysHumAlarmDelay_Type()
)
airFMSysHumAlarmDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysHumAlarmDelay.setStatus("mandatory")
_AirFMSysInputs_ObjectIdentity = ObjectIdentity
airFMSysInputs = _AirFMSysInputs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10)
)
_AirFMSysInputTableSize_Type = Integer32
_AirFMSysInputTableSize_Object = MibScalar
airFMSysInputTableSize = _AirFMSysInputTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 1),
    _AirFMSysInputTableSize_Type()
)
airFMSysInputTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysInputTableSize.setStatus("mandatory")
_AirFMSysInputTable_Object = MibTable
airFMSysInputTable = _AirFMSysInputTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2)
)
if mibBuilder.loadTexts:
    airFMSysInputTable.setStatus("mandatory")
_AirFMSysInputEntry_Object = MibTableRow
airFMSysInputEntry = _AirFMSysInputEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1)
)
airFMSysInputEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMSysInputIndex"),
)
if mibBuilder.loadTexts:
    airFMSysInputEntry.setStatus("mandatory")
_AirFMSysInputIndex_Type = Integer32
_AirFMSysInputIndex_Object = MibTableColumn
airFMSysInputIndex = _AirFMSysInputIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 1),
    _AirFMSysInputIndex_Type()
)
airFMSysInputIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysInputIndex.setStatus("mandatory")
_AirFMSysInputName_Type = DisplayString
_AirFMSysInputName_Object = MibTableColumn
airFMSysInputName = _AirFMSysInputName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 2),
    _AirFMSysInputName_Type()
)
airFMSysInputName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysInputName.setStatus("mandatory")


class _AirFMSysInputStatus_Type(Integer32):
    """Custom type airFMSysInputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirFMSysInputStatus_Type.__name__ = "Integer32"
_AirFMSysInputStatus_Object = MibTableColumn
airFMSysInputStatus = _AirFMSysInputStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 3),
    _AirFMSysInputStatus_Type()
)
airFMSysInputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysInputStatus.setStatus("mandatory")


class _AirFMSysInputNormalState_Type(Integer32):
    """Custom type airFMSysInputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirFMSysInputNormalState_Type.__name__ = "Integer32"
_AirFMSysInputNormalState_Object = MibTableColumn
airFMSysInputNormalState = _AirFMSysInputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 4),
    _AirFMSysInputNormalState_Type()
)
airFMSysInputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysInputNormalState.setStatus("mandatory")
_AirFMSysInputDelay_Type = Integer32
_AirFMSysInputDelay_Object = MibTableColumn
airFMSysInputDelay = _AirFMSysInputDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 5),
    _AirFMSysInputDelay_Type()
)
airFMSysInputDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysInputDelay.setStatus("mandatory")


class _AirFMSysInputAlarmAction_Type(Integer32):
    """Custom type airFMSysInputAlarmAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("immShutdown", 6),
          ("major", 3),
          ("minor", 2),
          ("nonessStop", 5),
          ("remoteRunStop", 4),
          ("statusOnly", 1))
    )


_AirFMSysInputAlarmAction_Type.__name__ = "Integer32"
_AirFMSysInputAlarmAction_Object = MibTableColumn
airFMSysInputAlarmAction = _AirFMSysInputAlarmAction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 10, 2, 1, 6),
    _AirFMSysInputAlarmAction_Type()
)
airFMSysInputAlarmAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysInputAlarmAction.setStatus("mandatory")
_AirFMSysOutputs_ObjectIdentity = ObjectIdentity
airFMSysOutputs = _AirFMSysOutputs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11)
)
_AirFMSysOutputTableSize_Type = Integer32
_AirFMSysOutputTableSize_Object = MibScalar
airFMSysOutputTableSize = _AirFMSysOutputTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 1),
    _AirFMSysOutputTableSize_Type()
)
airFMSysOutputTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysOutputTableSize.setStatus("mandatory")
_AirFMSysOutputTable_Object = MibTable
airFMSysOutputTable = _AirFMSysOutputTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2)
)
if mibBuilder.loadTexts:
    airFMSysOutputTable.setStatus("mandatory")
_AirFMSysOutputEntry_Object = MibTableRow
airFMSysOutputEntry = _AirFMSysOutputEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1)
)
airFMSysOutputEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMSysOutputIndex"),
)
if mibBuilder.loadTexts:
    airFMSysOutputEntry.setStatus("mandatory")
_AirFMSysOutputIndex_Type = Integer32
_AirFMSysOutputIndex_Object = MibTableColumn
airFMSysOutputIndex = _AirFMSysOutputIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1, 1),
    _AirFMSysOutputIndex_Type()
)
airFMSysOutputIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysOutputIndex.setStatus("mandatory")


class _AirFMSysOutputStatus_Type(Integer32):
    """Custom type airFMSysOutputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirFMSysOutputStatus_Type.__name__ = "Integer32"
_AirFMSysOutputStatus_Object = MibTableColumn
airFMSysOutputStatus = _AirFMSysOutputStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1, 2),
    _AirFMSysOutputStatus_Type()
)
airFMSysOutputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysOutputStatus.setStatus("mandatory")


class _AirFMSysOutputNormalState_Type(Integer32):
    """Custom type airFMSysOutputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirFMSysOutputNormalState_Type.__name__ = "Integer32"
_AirFMSysOutputNormalState_Object = MibTableColumn
airFMSysOutputNormalState = _AirFMSysOutputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 11, 2, 1, 3),
    _AirFMSysOutputNormalState_Type()
)
airFMSysOutputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysOutputNormalState.setStatus("mandatory")
_AirFMSysAlarmMap_ObjectIdentity = ObjectIdentity
airFMSysAlarmMap = _AirFMSysAlarmMap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12)
)
_AirFMSysAlarmMapSys_ObjectIdentity = ObjectIdentity
airFMSysAlarmMapSys = _AirFMSysAlarmMapSys_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1)
)
_AirFMSysAlarmMapSysTableSize_Type = Integer32
_AirFMSysAlarmMapSysTableSize_Object = MibScalar
airFMSysAlarmMapSysTableSize = _AirFMSysAlarmMapSysTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 1),
    _AirFMSysAlarmMapSysTableSize_Type()
)
airFMSysAlarmMapSysTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysTableSize.setStatus("mandatory")
_AirFMSysAlarmMapSysTable_Object = MibTable
airFMSysAlarmMapSysTable = _AirFMSysAlarmMapSysTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2)
)
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysTable.setStatus("mandatory")
_AirFMSysAlarmMapSysEntry_Object = MibTableRow
airFMSysAlarmMapSysEntry = _AirFMSysAlarmMapSysEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1)
)
airFMSysAlarmMapSysEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMSysAlarmMapSysOutputIndex"),
)
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysEntry.setStatus("mandatory")
_AirFMSysAlarmMapSysOutputIndex_Type = Integer32
_AirFMSysAlarmMapSysOutputIndex_Object = MibTableColumn
airFMSysAlarmMapSysOutputIndex = _AirFMSysAlarmMapSysOutputIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 1),
    _AirFMSysAlarmMapSysOutputIndex_Type()
)
airFMSysAlarmMapSysOutputIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysOutputIndex.setStatus("mandatory")


class _AirFMSysAlarmMapSysAnyAlarm_Type(Integer32):
    """Custom type airFMSysAlarmMapSysAnyAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysAnyAlarm_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysAnyAlarm_Object = MibTableColumn
airFMSysAlarmMapSysAnyAlarm = _AirFMSysAlarmMapSysAnyAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 2),
    _AirFMSysAlarmMapSysAnyAlarm_Type()
)
airFMSysAlarmMapSysAnyAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysAnyAlarm.setStatus("mandatory")


class _AirFMSysAlarmMapSystemOn_Type(Integer32):
    """Custom type airFMSysAlarmMapSystemOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSystemOn_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSystemOn_Object = MibTableColumn
airFMSysAlarmMapSystemOn = _AirFMSysAlarmMapSystemOn_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 3),
    _AirFMSysAlarmMapSystemOn_Type()
)
airFMSysAlarmMapSystemOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSystemOn.setStatus("mandatory")


class _AirFMSysAlarmMapSystemOffline_Type(Integer32):
    """Custom type airFMSysAlarmMapSystemOffline based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSystemOffline_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSystemOffline_Object = MibTableColumn
airFMSysAlarmMapSystemOffline = _AirFMSysAlarmMapSystemOffline_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 4),
    _AirFMSysAlarmMapSystemOffline_Type()
)
airFMSysAlarmMapSystemOffline.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSystemOffline.setStatus("mandatory")


class _AirFMSysAlarmMapSysHighEnvTemp_Type(Integer32):
    """Custom type airFMSysAlarmMapSysHighEnvTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysHighEnvTemp_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysHighEnvTemp_Object = MibTableColumn
airFMSysAlarmMapSysHighEnvTemp = _AirFMSysAlarmMapSysHighEnvTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 5),
    _AirFMSysAlarmMapSysHighEnvTemp_Type()
)
airFMSysAlarmMapSysHighEnvTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysHighEnvTemp.setStatus("mandatory")


class _AirFMSysAlarmMapSysLowEnvTemp_Type(Integer32):
    """Custom type airFMSysAlarmMapSysLowEnvTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysLowEnvTemp_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysLowEnvTemp_Object = MibTableColumn
airFMSysAlarmMapSysLowEnvTemp = _AirFMSysAlarmMapSysLowEnvTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 6),
    _AirFMSysAlarmMapSysLowEnvTemp_Type()
)
airFMSysAlarmMapSysLowEnvTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysLowEnvTemp.setStatus("mandatory")


class _AirFMSysAlarmMapSysHighEnvHum_Type(Integer32):
    """Custom type airFMSysAlarmMapSysHighEnvHum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysHighEnvHum_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysHighEnvHum_Object = MibTableColumn
airFMSysAlarmMapSysHighEnvHum = _AirFMSysAlarmMapSysHighEnvHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 7),
    _AirFMSysAlarmMapSysHighEnvHum_Type()
)
airFMSysAlarmMapSysHighEnvHum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysHighEnvHum.setStatus("mandatory")


class _AirFMSysAlarmMapSysLowEnvHum_Type(Integer32):
    """Custom type airFMSysAlarmMapSysLowEnvHum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysLowEnvHum_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysLowEnvHum_Object = MibTableColumn
airFMSysAlarmMapSysLowEnvHum = _AirFMSysAlarmMapSysLowEnvHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 8),
    _AirFMSysAlarmMapSysLowEnvHum_Type()
)
airFMSysAlarmMapSysLowEnvHum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysLowEnvHum.setStatus("mandatory")


class _AirFMSysAlarmMapSysFireDet_Type(Integer32):
    """Custom type airFMSysAlarmMapSysFireDet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysFireDet_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysFireDet_Object = MibTableColumn
airFMSysAlarmMapSysFireDet = _AirFMSysAlarmMapSysFireDet_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 9),
    _AirFMSysAlarmMapSysFireDet_Type()
)
airFMSysAlarmMapSysFireDet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysFireDet.setStatus("mandatory")


class _AirFMSysAlarmMapSysSmokeDet_Type(Integer32):
    """Custom type airFMSysAlarmMapSysSmokeDet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysSmokeDet_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysSmokeDet_Object = MibTableColumn
airFMSysAlarmMapSysSmokeDet = _AirFMSysAlarmMapSysSmokeDet_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 10),
    _AirFMSysAlarmMapSysSmokeDet_Type()
)
airFMSysAlarmMapSysSmokeDet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysSmokeDet.setStatus("mandatory")


class _AirFMSysAlarmMapSysEconIsol_Type(Integer32):
    """Custom type airFMSysAlarmMapSysEconIsol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysEconIsol_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysEconIsol_Object = MibTableColumn
airFMSysAlarmMapSysEconIsol = _AirFMSysAlarmMapSysEconIsol_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 11),
    _AirFMSysAlarmMapSysEconIsol_Type()
)
airFMSysAlarmMapSysEconIsol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysEconIsol.setStatus("mandatory")


class _AirFMSysAlarmMapSysSupplySensFail_Type(Integer32):
    """Custom type airFMSysAlarmMapSysSupplySensFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysSupplySensFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysSupplySensFail_Object = MibTableColumn
airFMSysAlarmMapSysSupplySensFail = _AirFMSysAlarmMapSysSupplySensFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 12),
    _AirFMSysAlarmMapSysSupplySensFail_Type()
)
airFMSysAlarmMapSysSupplySensFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysSupplySensFail.setStatus("mandatory")


class _AirFMSysAlarmMapSysReturnSensFail_Type(Integer32):
    """Custom type airFMSysAlarmMapSysReturnSensFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysReturnSensFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysReturnSensFail_Object = MibTableColumn
airFMSysAlarmMapSysReturnSensFail = _AirFMSysAlarmMapSysReturnSensFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 13),
    _AirFMSysAlarmMapSysReturnSensFail_Type()
)
airFMSysAlarmMapSysReturnSensFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysReturnSensFail.setStatus("mandatory")


class _AirFMSysAlarmMapSysRemSensRemoved_Type(Integer32):
    """Custom type airFMSysAlarmMapSysRemSensRemoved based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysRemSensRemoved_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysRemSensRemoved_Object = MibTableColumn
airFMSysAlarmMapSysRemSensRemoved = _AirFMSysAlarmMapSysRemSensRemoved_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 14),
    _AirFMSysAlarmMapSysRemSensRemoved_Type()
)
airFMSysAlarmMapSysRemSensRemoved.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysRemSensRemoved.setStatus("mandatory")


class _AirFMSysAlarmMapSysPrimSensFail_Type(Integer32):
    """Custom type airFMSysAlarmMapSysPrimSensFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysPrimSensFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysPrimSensFail_Object = MibTableColumn
airFMSysAlarmMapSysPrimSensFail = _AirFMSysAlarmMapSysPrimSensFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 15),
    _AirFMSysAlarmMapSysPrimSensFail_Type()
)
airFMSysAlarmMapSysPrimSensFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysPrimSensFail.setStatus("mandatory")


class _AirFMSysAlarmMapSysSecSensFail_Type(Integer32):
    """Custom type airFMSysAlarmMapSysSecSensFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysSecSensFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysSecSensFail_Object = MibTableColumn
airFMSysAlarmMapSysSecSensFail = _AirFMSysAlarmMapSysSecSensFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 16),
    _AirFMSysAlarmMapSysSecSensFail_Type()
)
airFMSysAlarmMapSysSecSensFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysSecSensFail.setStatus("mandatory")


class _AirFMSysAlarmMapSysSecSensActive_Type(Integer32):
    """Custom type airFMSysAlarmMapSysSecSensActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapSysSecSensActive_Type.__name__ = "Integer32"
_AirFMSysAlarmMapSysSecSensActive_Object = MibTableColumn
airFMSysAlarmMapSysSecSensActive = _AirFMSysAlarmMapSysSecSensActive_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 1, 2, 1, 17),
    _AirFMSysAlarmMapSysSecSensActive_Type()
)
airFMSysAlarmMapSysSecSensActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapSysSecSensActive.setStatus("mandatory")
_AirFMSysAlarmMapMainMod_ObjectIdentity = ObjectIdentity
airFMSysAlarmMapMainMod = _AirFMSysAlarmMapMainMod_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2)
)
_AirFMSysAlarmMapMainModTableSize_Type = Integer32
_AirFMSysAlarmMapMainModTableSize_Object = MibScalar
airFMSysAlarmMapMainModTableSize = _AirFMSysAlarmMapMainModTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 1),
    _AirFMSysAlarmMapMainModTableSize_Type()
)
airFMSysAlarmMapMainModTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModTableSize.setStatus("mandatory")
_AirFMSysAlarmMapMainModTable_Object = MibTable
airFMSysAlarmMapMainModTable = _AirFMSysAlarmMapMainModTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2)
)
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModTable.setStatus("mandatory")
_AirFMSysAlarmMapMainModEntry_Object = MibTableRow
airFMSysAlarmMapMainModEntry = _AirFMSysAlarmMapMainModEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1)
)
airFMSysAlarmMapMainModEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMSysAlarmMapMainModOutputIndex"),
)
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModEntry.setStatus("mandatory")
_AirFMSysAlarmMapMainModOutputIndex_Type = Integer32
_AirFMSysAlarmMapMainModOutputIndex_Object = MibTableColumn
airFMSysAlarmMapMainModOutputIndex = _AirFMSysAlarmMapMainModOutputIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 1),
    _AirFMSysAlarmMapMainModOutputIndex_Type()
)
airFMSysAlarmMapMainModOutputIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModOutputIndex.setStatus("mandatory")


class _AirFMSysAlarmMapMainModAnyAlarm_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModAnyAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModAnyAlarm_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModAnyAlarm_Object = MibTableColumn
airFMSysAlarmMapMainModAnyAlarm = _AirFMSysAlarmMapMainModAnyAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 2),
    _AirFMSysAlarmMapMainModAnyAlarm_Type()
)
airFMSysAlarmMapMainModAnyAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModAnyAlarm.setStatus("mandatory")


class _AirFMSysAlarmMapMainModMaintReq_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModMaintReq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModMaintReq_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModMaintReq_Object = MibTableColumn
airFMSysAlarmMapMainModMaintReq = _AirFMSysAlarmMapMainModMaintReq_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 3),
    _AirFMSysAlarmMapMainModMaintReq_Type()
)
airFMSysAlarmMapMainModMaintReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModMaintReq.setStatus("mandatory")


class _AirFMSysAlarmMapMainModCoolFail_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModCoolFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModCoolFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModCoolFail_Object = MibTableColumn
airFMSysAlarmMapMainModCoolFail = _AirFMSysAlarmMapMainModCoolFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 4),
    _AirFMSysAlarmMapMainModCoolFail_Type()
)
airFMSysAlarmMapMainModCoolFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModCoolFail.setStatus("mandatory")


class _AirFMSysAlarmMapMainModHighSupplyTemp_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModHighSupplyTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModHighSupplyTemp_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModHighSupplyTemp_Object = MibTableColumn
airFMSysAlarmMapMainModHighSupplyTemp = _AirFMSysAlarmMapMainModHighSupplyTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 5),
    _AirFMSysAlarmMapMainModHighSupplyTemp_Type()
)
airFMSysAlarmMapMainModHighSupplyTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModHighSupplyTemp.setStatus("mandatory")


class _AirFMSysAlarmMapMainModLowSupplyTemp_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModLowSupplyTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModLowSupplyTemp_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModLowSupplyTemp_Object = MibTableColumn
airFMSysAlarmMapMainModLowSupplyTemp = _AirFMSysAlarmMapMainModLowSupplyTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 6),
    _AirFMSysAlarmMapMainModLowSupplyTemp_Type()
)
airFMSysAlarmMapMainModLowSupplyTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModLowSupplyTemp.setStatus("mandatory")


class _AirFMSysAlarmMapMainModHumFail_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModHumFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModHumFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModHumFail_Object = MibTableColumn
airFMSysAlarmMapMainModHumFail = _AirFMSysAlarmMapMainModHumFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 7),
    _AirFMSysAlarmMapMainModHumFail_Type()
)
airFMSysAlarmMapMainModHumFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModHumFail.setStatus("mandatory")


class _AirFMSysAlarmMapMainModHumReplCyl_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModHumReplCyl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModHumReplCyl_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModHumReplCyl_Object = MibTableColumn
airFMSysAlarmMapMainModHumReplCyl = _AirFMSysAlarmMapMainModHumReplCyl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 8),
    _AirFMSysAlarmMapMainModHumReplCyl_Type()
)
airFMSysAlarmMapMainModHumReplCyl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModHumReplCyl.setStatus("mandatory")


class _AirFMSysAlarmMapMainModCondPumpFail_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModCondPumpFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModCondPumpFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModCondPumpFail_Object = MibTableColumn
airFMSysAlarmMapMainModCondPumpFail = _AirFMSysAlarmMapMainModCondPumpFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 9),
    _AirFMSysAlarmMapMainModCondPumpFail_Type()
)
airFMSysAlarmMapMainModCondPumpFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModCondPumpFail.setStatus("mandatory")


class _AirFMSysAlarmMapMainModBlwrCntl1Fail_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModBlwrCntl1Fail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModBlwrCntl1Fail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModBlwrCntl1Fail_Object = MibTableColumn
airFMSysAlarmMapMainModBlwrCntl1Fail = _AirFMSysAlarmMapMainModBlwrCntl1Fail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 10),
    _AirFMSysAlarmMapMainModBlwrCntl1Fail_Type()
)
airFMSysAlarmMapMainModBlwrCntl1Fail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModBlwrCntl1Fail.setStatus("mandatory")


class _AirFMSysAlarmMapMainModBlwrCntl2Fail_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModBlwrCntl2Fail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModBlwrCntl2Fail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModBlwrCntl2Fail_Object = MibTableColumn
airFMSysAlarmMapMainModBlwrCntl2Fail = _AirFMSysAlarmMapMainModBlwrCntl2Fail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 11),
    _AirFMSysAlarmMapMainModBlwrCntl2Fail_Type()
)
airFMSysAlarmMapMainModBlwrCntl2Fail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModBlwrCntl2Fail.setStatus("mandatory")


class _AirFMSysAlarmMapMainModHighFltrDP_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModHighFltrDP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModHighFltrDP_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModHighFltrDP_Object = MibTableColumn
airFMSysAlarmMapMainModHighFltrDP = _AirFMSysAlarmMapMainModHighFltrDP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 12),
    _AirFMSysAlarmMapMainModHighFltrDP_Type()
)
airFMSysAlarmMapMainModHighFltrDP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModHighFltrDP.setStatus("mandatory")


class _AirFMSysAlarmMapMainModLowAirFlow_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModLowAirFlow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModLowAirFlow_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModLowAirFlow_Object = MibTableColumn
airFMSysAlarmMapMainModLowAirFlow = _AirFMSysAlarmMapMainModLowAirFlow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 13),
    _AirFMSysAlarmMapMainModLowAirFlow_Type()
)
airFMSysAlarmMapMainModLowAirFlow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModLowAirFlow.setStatus("mandatory")


class _AirFMSysAlarmMapMainModAirBlckIntOpen_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModAirBlckIntOpen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModAirBlckIntOpen_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModAirBlckIntOpen_Object = MibTableColumn
airFMSysAlarmMapMainModAirBlckIntOpen = _AirFMSysAlarmMapMainModAirBlckIntOpen_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 14),
    _AirFMSysAlarmMapMainModAirBlckIntOpen_Type()
)
airFMSysAlarmMapMainModAirBlckIntOpen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModAirBlckIntOpen.setStatus("mandatory")


class _AirFMSysAlarmMapMainModWaterDetected_Type(Integer32):
    """Custom type airFMSysAlarmMapMainModWaterDetected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapMainModWaterDetected_Type.__name__ = "Integer32"
_AirFMSysAlarmMapMainModWaterDetected_Object = MibTableColumn
airFMSysAlarmMapMainModWaterDetected = _AirFMSysAlarmMapMainModWaterDetected_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 2, 2, 1, 15),
    _AirFMSysAlarmMapMainModWaterDetected_Type()
)
airFMSysAlarmMapMainModWaterDetected.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapMainModWaterDetected.setStatus("mandatory")
_AirFMSysAlarmMapExpMod1_ObjectIdentity = ObjectIdentity
airFMSysAlarmMapExpMod1 = _AirFMSysAlarmMapExpMod1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3)
)
_AirFMSysAlarmMapExpMod1TableSize_Type = Integer32
_AirFMSysAlarmMapExpMod1TableSize_Object = MibScalar
airFMSysAlarmMapExpMod1TableSize = _AirFMSysAlarmMapExpMod1TableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 1),
    _AirFMSysAlarmMapExpMod1TableSize_Type()
)
airFMSysAlarmMapExpMod1TableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1TableSize.setStatus("mandatory")
_AirFMSysAlarmMapExpMod1Table_Object = MibTable
airFMSysAlarmMapExpMod1Table = _AirFMSysAlarmMapExpMod1Table_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2)
)
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1Table.setStatus("mandatory")
_AirFMSysAlarmMapExpMod1Entry_Object = MibTableRow
airFMSysAlarmMapExpMod1Entry = _AirFMSysAlarmMapExpMod1Entry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1)
)
airFMSysAlarmMapExpMod1Entry.setIndexNames(
    (0, "POWERNET-MIB", "airFMSysAlarmMapExpMod1OutputIndex"),
)
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1Entry.setStatus("mandatory")
_AirFMSysAlarmMapExpMod1OutputIndex_Type = Integer32
_AirFMSysAlarmMapExpMod1OutputIndex_Object = MibTableColumn
airFMSysAlarmMapExpMod1OutputIndex = _AirFMSysAlarmMapExpMod1OutputIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 1),
    _AirFMSysAlarmMapExpMod1OutputIndex_Type()
)
airFMSysAlarmMapExpMod1OutputIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1OutputIndex.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1AnyAlarm_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1AnyAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1AnyAlarm_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1AnyAlarm_Object = MibTableColumn
airFMSysAlarmMapExpMod1AnyAlarm = _AirFMSysAlarmMapExpMod1AnyAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 2),
    _AirFMSysAlarmMapExpMod1AnyAlarm_Type()
)
airFMSysAlarmMapExpMod1AnyAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1AnyAlarm.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1MaintReq_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1MaintReq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1MaintReq_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1MaintReq_Object = MibTableColumn
airFMSysAlarmMapExpMod1MaintReq = _AirFMSysAlarmMapExpMod1MaintReq_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 3),
    _AirFMSysAlarmMapExpMod1MaintReq_Type()
)
airFMSysAlarmMapExpMod1MaintReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1MaintReq.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1CoolFail_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1CoolFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1CoolFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1CoolFail_Object = MibTableColumn
airFMSysAlarmMapExpMod1CoolFail = _AirFMSysAlarmMapExpMod1CoolFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 4),
    _AirFMSysAlarmMapExpMod1CoolFail_Type()
)
airFMSysAlarmMapExpMod1CoolFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1CoolFail.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1HighSupplyTemp_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1HighSupplyTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1HighSupplyTemp_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1HighSupplyTemp_Object = MibTableColumn
airFMSysAlarmMapExpMod1HighSupplyTemp = _AirFMSysAlarmMapExpMod1HighSupplyTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 5),
    _AirFMSysAlarmMapExpMod1HighSupplyTemp_Type()
)
airFMSysAlarmMapExpMod1HighSupplyTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1HighSupplyTemp.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1LowSupplyTemp_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1LowSupplyTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1LowSupplyTemp_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1LowSupplyTemp_Object = MibTableColumn
airFMSysAlarmMapExpMod1LowSupplyTemp = _AirFMSysAlarmMapExpMod1LowSupplyTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 6),
    _AirFMSysAlarmMapExpMod1LowSupplyTemp_Type()
)
airFMSysAlarmMapExpMod1LowSupplyTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1LowSupplyTemp.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1HumFail_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1HumFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1HumFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1HumFail_Object = MibTableColumn
airFMSysAlarmMapExpMod1HumFail = _AirFMSysAlarmMapExpMod1HumFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 7),
    _AirFMSysAlarmMapExpMod1HumFail_Type()
)
airFMSysAlarmMapExpMod1HumFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1HumFail.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1HumReplCyl_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1HumReplCyl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1HumReplCyl_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1HumReplCyl_Object = MibTableColumn
airFMSysAlarmMapExpMod1HumReplCyl = _AirFMSysAlarmMapExpMod1HumReplCyl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 8),
    _AirFMSysAlarmMapExpMod1HumReplCyl_Type()
)
airFMSysAlarmMapExpMod1HumReplCyl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1HumReplCyl.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1CondPumpFail_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1CondPumpFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1CondPumpFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1CondPumpFail_Object = MibTableColumn
airFMSysAlarmMapExpMod1CondPumpFail = _AirFMSysAlarmMapExpMod1CondPumpFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 9),
    _AirFMSysAlarmMapExpMod1CondPumpFail_Type()
)
airFMSysAlarmMapExpMod1CondPumpFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1CondPumpFail.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1BlwrCntl1Fail_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1BlwrCntl1Fail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1BlwrCntl1Fail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1BlwrCntl1Fail_Object = MibTableColumn
airFMSysAlarmMapExpMod1BlwrCntl1Fail = _AirFMSysAlarmMapExpMod1BlwrCntl1Fail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 10),
    _AirFMSysAlarmMapExpMod1BlwrCntl1Fail_Type()
)
airFMSysAlarmMapExpMod1BlwrCntl1Fail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1BlwrCntl1Fail.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1BlwrCntl2Fail_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1BlwrCntl2Fail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1BlwrCntl2Fail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1BlwrCntl2Fail_Object = MibTableColumn
airFMSysAlarmMapExpMod1BlwrCntl2Fail = _AirFMSysAlarmMapExpMod1BlwrCntl2Fail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 11),
    _AirFMSysAlarmMapExpMod1BlwrCntl2Fail_Type()
)
airFMSysAlarmMapExpMod1BlwrCntl2Fail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1BlwrCntl2Fail.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1HighFltrDP_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1HighFltrDP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1HighFltrDP_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1HighFltrDP_Object = MibTableColumn
airFMSysAlarmMapExpMod1HighFltrDP = _AirFMSysAlarmMapExpMod1HighFltrDP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 12),
    _AirFMSysAlarmMapExpMod1HighFltrDP_Type()
)
airFMSysAlarmMapExpMod1HighFltrDP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1HighFltrDP.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1LowAirFlow_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1LowAirFlow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1LowAirFlow_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1LowAirFlow_Object = MibTableColumn
airFMSysAlarmMapExpMod1LowAirFlow = _AirFMSysAlarmMapExpMod1LowAirFlow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 13),
    _AirFMSysAlarmMapExpMod1LowAirFlow_Type()
)
airFMSysAlarmMapExpMod1LowAirFlow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1LowAirFlow.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1AirBlckIntOpen_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1AirBlckIntOpen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1AirBlckIntOpen_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1AirBlckIntOpen_Object = MibTableColumn
airFMSysAlarmMapExpMod1AirBlckIntOpen = _AirFMSysAlarmMapExpMod1AirBlckIntOpen_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 14),
    _AirFMSysAlarmMapExpMod1AirBlckIntOpen_Type()
)
airFMSysAlarmMapExpMod1AirBlckIntOpen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1AirBlckIntOpen.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod1WaterDetected_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod1WaterDetected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod1WaterDetected_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod1WaterDetected_Object = MibTableColumn
airFMSysAlarmMapExpMod1WaterDetected = _AirFMSysAlarmMapExpMod1WaterDetected_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 3, 2, 1, 15),
    _AirFMSysAlarmMapExpMod1WaterDetected_Type()
)
airFMSysAlarmMapExpMod1WaterDetected.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod1WaterDetected.setStatus("mandatory")
_AirFMSysAlarmMapExpMod2_ObjectIdentity = ObjectIdentity
airFMSysAlarmMapExpMod2 = _AirFMSysAlarmMapExpMod2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4)
)
_AirFMSysAlarmMapExpMod2TableSize_Type = Integer32
_AirFMSysAlarmMapExpMod2TableSize_Object = MibScalar
airFMSysAlarmMapExpMod2TableSize = _AirFMSysAlarmMapExpMod2TableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 1),
    _AirFMSysAlarmMapExpMod2TableSize_Type()
)
airFMSysAlarmMapExpMod2TableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2TableSize.setStatus("mandatory")
_AirFMSysAlarmMapExpMod2Table_Object = MibTable
airFMSysAlarmMapExpMod2Table = _AirFMSysAlarmMapExpMod2Table_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2)
)
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2Table.setStatus("mandatory")
_AirFMSysAlarmMapExpMod2Entry_Object = MibTableRow
airFMSysAlarmMapExpMod2Entry = _AirFMSysAlarmMapExpMod2Entry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1)
)
airFMSysAlarmMapExpMod2Entry.setIndexNames(
    (0, "POWERNET-MIB", "airFMSysAlarmMapExpMod2OutputIndex"),
)
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2Entry.setStatus("mandatory")
_AirFMSysAlarmMapExpMod2OutputIndex_Type = Integer32
_AirFMSysAlarmMapExpMod2OutputIndex_Object = MibTableColumn
airFMSysAlarmMapExpMod2OutputIndex = _AirFMSysAlarmMapExpMod2OutputIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 1),
    _AirFMSysAlarmMapExpMod2OutputIndex_Type()
)
airFMSysAlarmMapExpMod2OutputIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2OutputIndex.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2AnyAlarm_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2AnyAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2AnyAlarm_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2AnyAlarm_Object = MibTableColumn
airFMSysAlarmMapExpMod2AnyAlarm = _AirFMSysAlarmMapExpMod2AnyAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 2),
    _AirFMSysAlarmMapExpMod2AnyAlarm_Type()
)
airFMSysAlarmMapExpMod2AnyAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2AnyAlarm.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2MaintReq_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2MaintReq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2MaintReq_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2MaintReq_Object = MibTableColumn
airFMSysAlarmMapExpMod2MaintReq = _AirFMSysAlarmMapExpMod2MaintReq_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 3),
    _AirFMSysAlarmMapExpMod2MaintReq_Type()
)
airFMSysAlarmMapExpMod2MaintReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2MaintReq.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2CoolFail_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2CoolFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2CoolFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2CoolFail_Object = MibTableColumn
airFMSysAlarmMapExpMod2CoolFail = _AirFMSysAlarmMapExpMod2CoolFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 4),
    _AirFMSysAlarmMapExpMod2CoolFail_Type()
)
airFMSysAlarmMapExpMod2CoolFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2CoolFail.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2HighSupplyTemp_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2HighSupplyTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2HighSupplyTemp_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2HighSupplyTemp_Object = MibTableColumn
airFMSysAlarmMapExpMod2HighSupplyTemp = _AirFMSysAlarmMapExpMod2HighSupplyTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 5),
    _AirFMSysAlarmMapExpMod2HighSupplyTemp_Type()
)
airFMSysAlarmMapExpMod2HighSupplyTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2HighSupplyTemp.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2LowSupplyTemp_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2LowSupplyTemp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2LowSupplyTemp_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2LowSupplyTemp_Object = MibTableColumn
airFMSysAlarmMapExpMod2LowSupplyTemp = _AirFMSysAlarmMapExpMod2LowSupplyTemp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 6),
    _AirFMSysAlarmMapExpMod2LowSupplyTemp_Type()
)
airFMSysAlarmMapExpMod2LowSupplyTemp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2LowSupplyTemp.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2HumFail_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2HumFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2HumFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2HumFail_Object = MibTableColumn
airFMSysAlarmMapExpMod2HumFail = _AirFMSysAlarmMapExpMod2HumFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 7),
    _AirFMSysAlarmMapExpMod2HumFail_Type()
)
airFMSysAlarmMapExpMod2HumFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2HumFail.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2HumReplCyl_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2HumReplCyl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2HumReplCyl_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2HumReplCyl_Object = MibTableColumn
airFMSysAlarmMapExpMod2HumReplCyl = _AirFMSysAlarmMapExpMod2HumReplCyl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 8),
    _AirFMSysAlarmMapExpMod2HumReplCyl_Type()
)
airFMSysAlarmMapExpMod2HumReplCyl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2HumReplCyl.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2CondPumpFail_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2CondPumpFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2CondPumpFail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2CondPumpFail_Object = MibTableColumn
airFMSysAlarmMapExpMod2CondPumpFail = _AirFMSysAlarmMapExpMod2CondPumpFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 9),
    _AirFMSysAlarmMapExpMod2CondPumpFail_Type()
)
airFMSysAlarmMapExpMod2CondPumpFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2CondPumpFail.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2BlwrCntl1Fail_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2BlwrCntl1Fail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2BlwrCntl1Fail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2BlwrCntl1Fail_Object = MibTableColumn
airFMSysAlarmMapExpMod2BlwrCntl1Fail = _AirFMSysAlarmMapExpMod2BlwrCntl1Fail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 10),
    _AirFMSysAlarmMapExpMod2BlwrCntl1Fail_Type()
)
airFMSysAlarmMapExpMod2BlwrCntl1Fail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2BlwrCntl1Fail.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2BlwrCntl2Fail_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2BlwrCntl2Fail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2BlwrCntl2Fail_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2BlwrCntl2Fail_Object = MibTableColumn
airFMSysAlarmMapExpMod2BlwrCntl2Fail = _AirFMSysAlarmMapExpMod2BlwrCntl2Fail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 11),
    _AirFMSysAlarmMapExpMod2BlwrCntl2Fail_Type()
)
airFMSysAlarmMapExpMod2BlwrCntl2Fail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2BlwrCntl2Fail.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2HighFltrDP_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2HighFltrDP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2HighFltrDP_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2HighFltrDP_Object = MibTableColumn
airFMSysAlarmMapExpMod2HighFltrDP = _AirFMSysAlarmMapExpMod2HighFltrDP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 12),
    _AirFMSysAlarmMapExpMod2HighFltrDP_Type()
)
airFMSysAlarmMapExpMod2HighFltrDP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2HighFltrDP.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2LowAirFlow_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2LowAirFlow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2LowAirFlow_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2LowAirFlow_Object = MibTableColumn
airFMSysAlarmMapExpMod2LowAirFlow = _AirFMSysAlarmMapExpMod2LowAirFlow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 13),
    _AirFMSysAlarmMapExpMod2LowAirFlow_Type()
)
airFMSysAlarmMapExpMod2LowAirFlow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2LowAirFlow.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2AirBlckIntOpen_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2AirBlckIntOpen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2AirBlckIntOpen_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2AirBlckIntOpen_Object = MibTableColumn
airFMSysAlarmMapExpMod2AirBlckIntOpen = _AirFMSysAlarmMapExpMod2AirBlckIntOpen_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 14),
    _AirFMSysAlarmMapExpMod2AirBlckIntOpen_Type()
)
airFMSysAlarmMapExpMod2AirBlckIntOpen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2AirBlckIntOpen.setStatus("mandatory")


class _AirFMSysAlarmMapExpMod2WaterDetected_Type(Integer32):
    """Custom type airFMSysAlarmMapExpMod2WaterDetected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapExpMod2WaterDetected_Type.__name__ = "Integer32"
_AirFMSysAlarmMapExpMod2WaterDetected_Object = MibTableColumn
airFMSysAlarmMapExpMod2WaterDetected = _AirFMSysAlarmMapExpMod2WaterDetected_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 4, 2, 1, 15),
    _AirFMSysAlarmMapExpMod2WaterDetected_Type()
)
airFMSysAlarmMapExpMod2WaterDetected.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapExpMod2WaterDetected.setStatus("mandatory")
_AirFMSysAlarmMapInput_ObjectIdentity = ObjectIdentity
airFMSysAlarmMapInput = _AirFMSysAlarmMapInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5)
)
_AirFMSysAlarmMapInputTableSize_Type = Integer32
_AirFMSysAlarmMapInputTableSize_Object = MibScalar
airFMSysAlarmMapInputTableSize = _AirFMSysAlarmMapInputTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 1),
    _AirFMSysAlarmMapInputTableSize_Type()
)
airFMSysAlarmMapInputTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInputTableSize.setStatus("mandatory")
_AirFMSysAlarmMapInputTable_Object = MibTable
airFMSysAlarmMapInputTable = _AirFMSysAlarmMapInputTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2)
)
if mibBuilder.loadTexts:
    airFMSysAlarmMapInputTable.setStatus("mandatory")
_AirFMSysAlarmMapInputEntry_Object = MibTableRow
airFMSysAlarmMapInputEntry = _AirFMSysAlarmMapInputEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1)
)
airFMSysAlarmMapInputEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMSysAlarmMapInputOutputIndex"),
)
if mibBuilder.loadTexts:
    airFMSysAlarmMapInputEntry.setStatus("mandatory")
_AirFMSysAlarmMapInputOutputIndex_Type = Integer32
_AirFMSysAlarmMapInputOutputIndex_Object = MibTableColumn
airFMSysAlarmMapInputOutputIndex = _AirFMSysAlarmMapInputOutputIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 1),
    _AirFMSysAlarmMapInputOutputIndex_Type()
)
airFMSysAlarmMapInputOutputIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInputOutputIndex.setStatus("mandatory")


class _AirFMSysAlarmMapInput1_Type(Integer32):
    """Custom type airFMSysAlarmMapInput1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput1_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput1_Object = MibTableColumn
airFMSysAlarmMapInput1 = _AirFMSysAlarmMapInput1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 2),
    _AirFMSysAlarmMapInput1_Type()
)
airFMSysAlarmMapInput1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput1.setStatus("mandatory")


class _AirFMSysAlarmMapInput2_Type(Integer32):
    """Custom type airFMSysAlarmMapInput2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput2_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput2_Object = MibTableColumn
airFMSysAlarmMapInput2 = _AirFMSysAlarmMapInput2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 3),
    _AirFMSysAlarmMapInput2_Type()
)
airFMSysAlarmMapInput2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput2.setStatus("mandatory")


class _AirFMSysAlarmMapInput3_Type(Integer32):
    """Custom type airFMSysAlarmMapInput3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput3_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput3_Object = MibTableColumn
airFMSysAlarmMapInput3 = _AirFMSysAlarmMapInput3_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 4),
    _AirFMSysAlarmMapInput3_Type()
)
airFMSysAlarmMapInput3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput3.setStatus("mandatory")


class _AirFMSysAlarmMapInput4_Type(Integer32):
    """Custom type airFMSysAlarmMapInput4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput4_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput4_Object = MibTableColumn
airFMSysAlarmMapInput4 = _AirFMSysAlarmMapInput4_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 5),
    _AirFMSysAlarmMapInput4_Type()
)
airFMSysAlarmMapInput4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput4.setStatus("mandatory")


class _AirFMSysAlarmMapInput5_Type(Integer32):
    """Custom type airFMSysAlarmMapInput5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput5_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput5_Object = MibTableColumn
airFMSysAlarmMapInput5 = _AirFMSysAlarmMapInput5_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 6),
    _AirFMSysAlarmMapInput5_Type()
)
airFMSysAlarmMapInput5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput5.setStatus("mandatory")


class _AirFMSysAlarmMapInput6_Type(Integer32):
    """Custom type airFMSysAlarmMapInput6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput6_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput6_Object = MibTableColumn
airFMSysAlarmMapInput6 = _AirFMSysAlarmMapInput6_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 7),
    _AirFMSysAlarmMapInput6_Type()
)
airFMSysAlarmMapInput6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput6.setStatus("mandatory")


class _AirFMSysAlarmMapInput7_Type(Integer32):
    """Custom type airFMSysAlarmMapInput7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput7_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput7_Object = MibTableColumn
airFMSysAlarmMapInput7 = _AirFMSysAlarmMapInput7_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 8),
    _AirFMSysAlarmMapInput7_Type()
)
airFMSysAlarmMapInput7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput7.setStatus("mandatory")


class _AirFMSysAlarmMapInput8_Type(Integer32):
    """Custom type airFMSysAlarmMapInput8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput8_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput8_Object = MibTableColumn
airFMSysAlarmMapInput8 = _AirFMSysAlarmMapInput8_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 9),
    _AirFMSysAlarmMapInput8_Type()
)
airFMSysAlarmMapInput8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput8.setStatus("mandatory")


class _AirFMSysAlarmMapInput9_Type(Integer32):
    """Custom type airFMSysAlarmMapInput9 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput9_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput9_Object = MibTableColumn
airFMSysAlarmMapInput9 = _AirFMSysAlarmMapInput9_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 10),
    _AirFMSysAlarmMapInput9_Type()
)
airFMSysAlarmMapInput9.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput9.setStatus("mandatory")


class _AirFMSysAlarmMapInput10_Type(Integer32):
    """Custom type airFMSysAlarmMapInput10 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput10_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput10_Object = MibTableColumn
airFMSysAlarmMapInput10 = _AirFMSysAlarmMapInput10_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 11),
    _AirFMSysAlarmMapInput10_Type()
)
airFMSysAlarmMapInput10.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput10.setStatus("mandatory")


class _AirFMSysAlarmMapInput11_Type(Integer32):
    """Custom type airFMSysAlarmMapInput11 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput11_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput11_Object = MibTableColumn
airFMSysAlarmMapInput11 = _AirFMSysAlarmMapInput11_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 12),
    _AirFMSysAlarmMapInput11_Type()
)
airFMSysAlarmMapInput11.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput11.setStatus("mandatory")


class _AirFMSysAlarmMapInput12_Type(Integer32):
    """Custom type airFMSysAlarmMapInput12 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput12_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput12_Object = MibTableColumn
airFMSysAlarmMapInput12 = _AirFMSysAlarmMapInput12_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 13),
    _AirFMSysAlarmMapInput12_Type()
)
airFMSysAlarmMapInput12.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput12.setStatus("mandatory")


class _AirFMSysAlarmMapInput13_Type(Integer32):
    """Custom type airFMSysAlarmMapInput13 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput13_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput13_Object = MibTableColumn
airFMSysAlarmMapInput13 = _AirFMSysAlarmMapInput13_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 14),
    _AirFMSysAlarmMapInput13_Type()
)
airFMSysAlarmMapInput13.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput13.setStatus("mandatory")


class _AirFMSysAlarmMapInput14_Type(Integer32):
    """Custom type airFMSysAlarmMapInput14 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput14_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput14_Object = MibTableColumn
airFMSysAlarmMapInput14 = _AirFMSysAlarmMapInput14_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 15),
    _AirFMSysAlarmMapInput14_Type()
)
airFMSysAlarmMapInput14.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput14.setStatus("mandatory")


class _AirFMSysAlarmMapInput15_Type(Integer32):
    """Custom type airFMSysAlarmMapInput15 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput15_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput15_Object = MibTableColumn
airFMSysAlarmMapInput15 = _AirFMSysAlarmMapInput15_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 16),
    _AirFMSysAlarmMapInput15_Type()
)
airFMSysAlarmMapInput15.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput15.setStatus("mandatory")


class _AirFMSysAlarmMapInput16_Type(Integer32):
    """Custom type airFMSysAlarmMapInput16 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapInput16_Type.__name__ = "Integer32"
_AirFMSysAlarmMapInput16_Object = MibTableColumn
airFMSysAlarmMapInput16 = _AirFMSysAlarmMapInput16_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 5, 2, 1, 17),
    _AirFMSysAlarmMapInput16_Type()
)
airFMSysAlarmMapInput16.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapInput16.setStatus("mandatory")
_AirFMSysAlarmMapOutput_ObjectIdentity = ObjectIdentity
airFMSysAlarmMapOutput = _AirFMSysAlarmMapOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6)
)
_AirFMSysAlarmMapOutputTableSize_Type = Integer32
_AirFMSysAlarmMapOutputTableSize_Object = MibScalar
airFMSysAlarmMapOutputTableSize = _AirFMSysAlarmMapOutputTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 1),
    _AirFMSysAlarmMapOutputTableSize_Type()
)
airFMSysAlarmMapOutputTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutputTableSize.setStatus("mandatory")
_AirFMSysAlarmMapOutputTable_Object = MibTable
airFMSysAlarmMapOutputTable = _AirFMSysAlarmMapOutputTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2)
)
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutputTable.setStatus("mandatory")
_AirFMSysAlarmMapOutputEntry_Object = MibTableRow
airFMSysAlarmMapOutputEntry = _AirFMSysAlarmMapOutputEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1)
)
airFMSysAlarmMapOutputEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMSysAlarmMapOutputIndex"),
)
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutputEntry.setStatus("mandatory")
_AirFMSysAlarmMapOutputIndex_Type = Integer32
_AirFMSysAlarmMapOutputIndex_Object = MibTableColumn
airFMSysAlarmMapOutputIndex = _AirFMSysAlarmMapOutputIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 1),
    _AirFMSysAlarmMapOutputIndex_Type()
)
airFMSysAlarmMapOutputIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutputIndex.setStatus("mandatory")


class _AirFMSysAlarmMapOutput1_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput1_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput1_Object = MibTableColumn
airFMSysAlarmMapOutput1 = _AirFMSysAlarmMapOutput1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 2),
    _AirFMSysAlarmMapOutput1_Type()
)
airFMSysAlarmMapOutput1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput1.setStatus("mandatory")


class _AirFMSysAlarmMapOutput2_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput2_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput2_Object = MibTableColumn
airFMSysAlarmMapOutput2 = _AirFMSysAlarmMapOutput2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 3),
    _AirFMSysAlarmMapOutput2_Type()
)
airFMSysAlarmMapOutput2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput2.setStatus("mandatory")


class _AirFMSysAlarmMapOutput3_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput3_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput3_Object = MibTableColumn
airFMSysAlarmMapOutput3 = _AirFMSysAlarmMapOutput3_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 4),
    _AirFMSysAlarmMapOutput3_Type()
)
airFMSysAlarmMapOutput3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput3.setStatus("mandatory")


class _AirFMSysAlarmMapOutput4_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput4_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput4_Object = MibTableColumn
airFMSysAlarmMapOutput4 = _AirFMSysAlarmMapOutput4_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 5),
    _AirFMSysAlarmMapOutput4_Type()
)
airFMSysAlarmMapOutput4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput4.setStatus("mandatory")


class _AirFMSysAlarmMapOutput5_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput5_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput5_Object = MibTableColumn
airFMSysAlarmMapOutput5 = _AirFMSysAlarmMapOutput5_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 6),
    _AirFMSysAlarmMapOutput5_Type()
)
airFMSysAlarmMapOutput5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput5.setStatus("mandatory")


class _AirFMSysAlarmMapOutput6_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput6_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput6_Object = MibTableColumn
airFMSysAlarmMapOutput6 = _AirFMSysAlarmMapOutput6_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 7),
    _AirFMSysAlarmMapOutput6_Type()
)
airFMSysAlarmMapOutput6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput6.setStatus("mandatory")


class _AirFMSysAlarmMapOutput7_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput7_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput7_Object = MibTableColumn
airFMSysAlarmMapOutput7 = _AirFMSysAlarmMapOutput7_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 8),
    _AirFMSysAlarmMapOutput7_Type()
)
airFMSysAlarmMapOutput7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput7.setStatus("mandatory")


class _AirFMSysAlarmMapOutput8_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput8_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput8_Object = MibTableColumn
airFMSysAlarmMapOutput8 = _AirFMSysAlarmMapOutput8_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 9),
    _AirFMSysAlarmMapOutput8_Type()
)
airFMSysAlarmMapOutput8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput8.setStatus("mandatory")


class _AirFMSysAlarmMapOutput9_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput9 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput9_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput9_Object = MibTableColumn
airFMSysAlarmMapOutput9 = _AirFMSysAlarmMapOutput9_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 10),
    _AirFMSysAlarmMapOutput9_Type()
)
airFMSysAlarmMapOutput9.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput9.setStatus("mandatory")


class _AirFMSysAlarmMapOutput10_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput10 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput10_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput10_Object = MibTableColumn
airFMSysAlarmMapOutput10 = _AirFMSysAlarmMapOutput10_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 11),
    _AirFMSysAlarmMapOutput10_Type()
)
airFMSysAlarmMapOutput10.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput10.setStatus("mandatory")


class _AirFMSysAlarmMapOutput11_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput11 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput11_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput11_Object = MibTableColumn
airFMSysAlarmMapOutput11 = _AirFMSysAlarmMapOutput11_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 12),
    _AirFMSysAlarmMapOutput11_Type()
)
airFMSysAlarmMapOutput11.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput11.setStatus("mandatory")


class _AirFMSysAlarmMapOutput12_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput12 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput12_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput12_Object = MibTableColumn
airFMSysAlarmMapOutput12 = _AirFMSysAlarmMapOutput12_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 13),
    _AirFMSysAlarmMapOutput12_Type()
)
airFMSysAlarmMapOutput12.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput12.setStatus("mandatory")


class _AirFMSysAlarmMapOutput13_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput13 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput13_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput13_Object = MibTableColumn
airFMSysAlarmMapOutput13 = _AirFMSysAlarmMapOutput13_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 14),
    _AirFMSysAlarmMapOutput13_Type()
)
airFMSysAlarmMapOutput13.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput13.setStatus("mandatory")


class _AirFMSysAlarmMapOutput14_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput14 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput14_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput14_Object = MibTableColumn
airFMSysAlarmMapOutput14 = _AirFMSysAlarmMapOutput14_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 15),
    _AirFMSysAlarmMapOutput14_Type()
)
airFMSysAlarmMapOutput14.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput14.setStatus("mandatory")


class _AirFMSysAlarmMapOutput15_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput15 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput15_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput15_Object = MibTableColumn
airFMSysAlarmMapOutput15 = _AirFMSysAlarmMapOutput15_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 16),
    _AirFMSysAlarmMapOutput15_Type()
)
airFMSysAlarmMapOutput15.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput15.setStatus("mandatory")


class _AirFMSysAlarmMapOutput16_Type(Integer32):
    """Custom type airFMSysAlarmMapOutput16 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_AirFMSysAlarmMapOutput16_Type.__name__ = "Integer32"
_AirFMSysAlarmMapOutput16_Object = MibTableColumn
airFMSysAlarmMapOutput16 = _AirFMSysAlarmMapOutput16_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 4, 12, 6, 2, 1, 17),
    _AirFMSysAlarmMapOutput16_Type()
)
airFMSysAlarmMapOutput16.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMSysAlarmMapOutput16.setStatus("mandatory")
_AirFMModule_ObjectIdentity = ObjectIdentity
airFMModule = _AirFMModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5)
)
_AirFMModIdent_ObjectIdentity = ObjectIdentity
airFMModIdent = _AirFMModIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1)
)
_AirFMModIdentTableSize_Type = Integer32
_AirFMModIdentTableSize_Object = MibScalar
airFMModIdentTableSize = _AirFMModIdentTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 1),
    _AirFMModIdentTableSize_Type()
)
airFMModIdentTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModIdentTableSize.setStatus("mandatory")
_AirFMModIdentTable_Object = MibTable
airFMModIdentTable = _AirFMModIdentTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2)
)
if mibBuilder.loadTexts:
    airFMModIdentTable.setStatus("mandatory")
_AirFMModIdentEntry_Object = MibTableRow
airFMModIdentEntry = _AirFMModIdentEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1)
)
airFMModIdentEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMModIdentModuleIndex"),
)
if mibBuilder.loadTexts:
    airFMModIdentEntry.setStatus("mandatory")
_AirFMModIdentModuleIndex_Type = Integer32
_AirFMModIdentModuleIndex_Object = MibTableColumn
airFMModIdentModuleIndex = _AirFMModIdentModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 1),
    _AirFMModIdentModuleIndex_Type()
)
airFMModIdentModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModIdentModuleIndex.setStatus("mandatory")
_AirFMModModelNumber_Type = DisplayString
_AirFMModModelNumber_Object = MibTableColumn
airFMModModelNumber = _AirFMModModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 2),
    _AirFMModModelNumber_Type()
)
airFMModModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModModelNumber.setStatus("mandatory")
_AirFMModSerialNumber_Type = DisplayString
_AirFMModSerialNumber_Object = MibTableColumn
airFMModSerialNumber = _AirFMModSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 3),
    _AirFMModSerialNumber_Type()
)
airFMModSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModSerialNumber.setStatus("mandatory")
_AirFMModManufactureDate_Type = DisplayString
_AirFMModManufactureDate_Object = MibTableColumn
airFMModManufactureDate = _AirFMModManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 4),
    _AirFMModManufactureDate_Type()
)
airFMModManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModManufactureDate.setStatus("mandatory")
_AirFMModFirmwareRev_Type = DisplayString
_AirFMModFirmwareRev_Object = MibTableColumn
airFMModFirmwareRev = _AirFMModFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 5),
    _AirFMModFirmwareRev_Type()
)
airFMModFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModFirmwareRev.setStatus("mandatory")
_AirFMModHardwareRev_Type = DisplayString
_AirFMModHardwareRev_Object = MibTableColumn
airFMModHardwareRev = _AirFMModHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 1, 2, 1, 6),
    _AirFMModHardwareRev_Type()
)
airFMModHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModHardwareRev.setStatus("mandatory")
_AirFMModStatus_ObjectIdentity = ObjectIdentity
airFMModStatus = _AirFMModStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2)
)
_AirFMModStatusTableSize_Type = Integer32
_AirFMModStatusTableSize_Object = MibScalar
airFMModStatusTableSize = _AirFMModStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 1),
    _AirFMModStatusTableSize_Type()
)
airFMModStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModStatusTableSize.setStatus("mandatory")
_AirFMModStatusTable_Object = MibTable
airFMModStatusTable = _AirFMModStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2)
)
if mibBuilder.loadTexts:
    airFMModStatusTable.setStatus("mandatory")
_AirFMModStatusEntry_Object = MibTableRow
airFMModStatusEntry = _AirFMModStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1)
)
airFMModStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMModStatusModuleIndex"),
)
if mibBuilder.loadTexts:
    airFMModStatusEntry.setStatus("mandatory")
_AirFMModStatusModuleIndex_Type = Integer32
_AirFMModStatusModuleIndex_Object = MibTableColumn
airFMModStatusModuleIndex = _AirFMModStatusModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 1),
    _AirFMModStatusModuleIndex_Type()
)
airFMModStatusModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModStatusModuleIndex.setStatus("mandatory")
_AirFMModSupplyTempC_Type = Integer32
_AirFMModSupplyTempC_Object = MibTableColumn
airFMModSupplyTempC = _AirFMModSupplyTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 2),
    _AirFMModSupplyTempC_Type()
)
airFMModSupplyTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModSupplyTempC.setStatus("mandatory")
_AirFMModSupplyTempF_Type = Integer32
_AirFMModSupplyTempF_Object = MibTableColumn
airFMModSupplyTempF = _AirFMModSupplyTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 3),
    _AirFMModSupplyTempF_Type()
)
airFMModSupplyTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModSupplyTempF.setStatus("mandatory")
_AirFMModSupplyHum_Type = Integer32
_AirFMModSupplyHum_Object = MibTableColumn
airFMModSupplyHum = _AirFMModSupplyHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 4),
    _AirFMModSupplyHum_Type()
)
airFMModSupplyHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModSupplyHum.setStatus("mandatory")
_AirFMModReturnTempC_Type = Integer32
_AirFMModReturnTempC_Object = MibTableColumn
airFMModReturnTempC = _AirFMModReturnTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 5),
    _AirFMModReturnTempC_Type()
)
airFMModReturnTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModReturnTempC.setStatus("mandatory")
_AirFMModReturnTempF_Type = Integer32
_AirFMModReturnTempF_Object = MibTableColumn
airFMModReturnTempF = _AirFMModReturnTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 6),
    _AirFMModReturnTempF_Type()
)
airFMModReturnTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModReturnTempF.setStatus("mandatory")
_AirFMModReturnHum_Type = Integer32
_AirFMModReturnHum_Object = MibTableColumn
airFMModReturnHum = _AirFMModReturnHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 7),
    _AirFMModReturnHum_Type()
)
airFMModReturnHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModReturnHum.setStatus("mandatory")
_AirFMModFilterDiffPresPa_Type = Integer32
_AirFMModFilterDiffPresPa_Object = MibTableColumn
airFMModFilterDiffPresPa = _AirFMModFilterDiffPresPa_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 8),
    _AirFMModFilterDiffPresPa_Type()
)
airFMModFilterDiffPresPa.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModFilterDiffPresPa.setStatus("mandatory")
_AirFMModFilterDiffPresInWC_Type = Integer32
_AirFMModFilterDiffPresInWC_Object = MibTableColumn
airFMModFilterDiffPresInWC = _AirFMModFilterDiffPresInWC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 9),
    _AirFMModFilterDiffPresInWC_Type()
)
airFMModFilterDiffPresInWC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModFilterDiffPresInWC.setStatus("mandatory")
_AirFMModCoilDiffPresPa_Type = Integer32
_AirFMModCoilDiffPresPa_Object = MibTableColumn
airFMModCoilDiffPresPa = _AirFMModCoilDiffPresPa_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 10),
    _AirFMModCoilDiffPresPa_Type()
)
airFMModCoilDiffPresPa.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModCoilDiffPresPa.setStatus("mandatory")
_AirFMModCoilDiffPresInWC_Type = Integer32
_AirFMModCoilDiffPresInWC_Object = MibTableColumn
airFMModCoilDiffPresInWC = _AirFMModCoilDiffPresInWC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 2, 2, 1, 11),
    _AirFMModCoilDiffPresInWC_Type()
)
airFMModCoilDiffPresInWC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModCoilDiffPresInWC.setStatus("mandatory")
_AirFMModProperties_ObjectIdentity = ObjectIdentity
airFMModProperties = _AirFMModProperties_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3)
)
_AirFMModPropTableSize_Type = Integer32
_AirFMModPropTableSize_Object = MibScalar
airFMModPropTableSize = _AirFMModPropTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 1),
    _AirFMModPropTableSize_Type()
)
airFMModPropTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModPropTableSize.setStatus("mandatory")
_AirFMModPropTable_Object = MibTable
airFMModPropTable = _AirFMModPropTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2)
)
if mibBuilder.loadTexts:
    airFMModPropTable.setStatus("mandatory")
_AirFMModPropEntry_Object = MibTableRow
airFMModPropEntry = _AirFMModPropEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1)
)
airFMModPropEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMModPropModuleIndex"),
)
if mibBuilder.loadTexts:
    airFMModPropEntry.setStatus("mandatory")
_AirFMModPropModuleIndex_Type = Integer32
_AirFMModPropModuleIndex_Object = MibTableColumn
airFMModPropModuleIndex = _AirFMModPropModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 1),
    _AirFMModPropModuleIndex_Type()
)
airFMModPropModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModPropModuleIndex.setStatus("mandatory")


class _AirFMModOutputCapacity_Type(Integer32):
    """Custom type airFMModOutputCapacity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("kw35", 3),
          ("kw40", 4),
          ("kw45", 2),
          ("kw50", 5),
          ("kw80", 6),
          ("notApplicable", 1))
    )


_AirFMModOutputCapacity_Type.__name__ = "Integer32"
_AirFMModOutputCapacity_Object = MibTableColumn
airFMModOutputCapacity = _AirFMModOutputCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 2),
    _AirFMModOutputCapacity_Type()
)
airFMModOutputCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModOutputCapacity.setStatus("mandatory")


class _AirFMModCapacityCtrl_Type(Integer32):
    """Custom type airFMModCapacityCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hotGasBypass", 3),
          ("notApplicable", 1),
          ("tandem", 2))
    )


_AirFMModCapacityCtrl_Type.__name__ = "Integer32"
_AirFMModCapacityCtrl_Object = MibTableColumn
airFMModCapacityCtrl = _AirFMModCapacityCtrl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 3),
    _AirFMModCapacityCtrl_Type()
)
airFMModCapacityCtrl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModCapacityCtrl.setStatus("mandatory")


class _AirFMModHeaterType_Type(Integer32):
    """Custom type airFMModHeaterType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("electricSCR", 3),
          ("hotGasAndElectric", 7),
          ("hotGasReheat", 6),
          ("hotWaterOnOff", 5),
          ("hotWaterProp", 8),
          ("none", 2),
          ("notApplicable", 1),
          ("steam", 4))
    )


_AirFMModHeaterType_Type.__name__ = "Integer32"
_AirFMModHeaterType_Object = MibTableColumn
airFMModHeaterType = _AirFMModHeaterType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 4),
    _AirFMModHeaterType_Type()
)
airFMModHeaterType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModHeaterType.setStatus("mandatory")


class _AirFMModElectricHeaterType_Type(Integer32):
    """Custom type airFMModElectricHeaterType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("kw10", 2),
          ("kw15", 3),
          ("notApplicable", 1))
    )


_AirFMModElectricHeaterType_Type.__name__ = "Integer32"
_AirFMModElectricHeaterType_Object = MibTableColumn
airFMModElectricHeaterType = _AirFMModElectricHeaterType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 5),
    _AirFMModElectricHeaterType_Type()
)
airFMModElectricHeaterType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModElectricHeaterType.setStatus("mandatory")


class _AirFMModHumidifierType_Type(Integer32):
    """Custom type airFMModHumidifierType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("liveSteam", 4),
          ("none", 2),
          ("notApplicable", 1),
          ("steamElectrode", 3))
    )


_AirFMModHumidifierType_Type.__name__ = "Integer32"
_AirFMModHumidifierType_Object = MibTableColumn
airFMModHumidifierType = _AirFMModHumidifierType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 6),
    _AirFMModHumidifierType_Type()
)
airFMModHumidifierType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModHumidifierType.setStatus("mandatory")
_AirFMModBlwrFreqSetting_Type = Integer32
_AirFMModBlwrFreqSetting_Object = MibTableColumn
airFMModBlwrFreqSetting = _AirFMModBlwrFreqSetting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 7),
    _AirFMModBlwrFreqSetting_Type()
)
airFMModBlwrFreqSetting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwrFreqSetting.setStatus("mandatory")
_AirFMModNomCoilDiffPresPa_Type = Integer32
_AirFMModNomCoilDiffPresPa_Object = MibTableColumn
airFMModNomCoilDiffPresPa = _AirFMModNomCoilDiffPresPa_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 8),
    _AirFMModNomCoilDiffPresPa_Type()
)
airFMModNomCoilDiffPresPa.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModNomCoilDiffPresPa.setStatus("mandatory")
_AirFMModNomCoilDiffPresInWC_Type = Integer32
_AirFMModNomCoilDiffPresInWC_Object = MibTableColumn
airFMModNomCoilDiffPresInWC = _AirFMModNomCoilDiffPresInWC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 9),
    _AirFMModNomCoilDiffPresInWC_Type()
)
airFMModNomCoilDiffPresInWC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModNomCoilDiffPresInWC.setStatus("mandatory")


class _AirFMModCondPump_Type(Integer32):
    """Custom type airFMModCondPump based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("notPresent", 2),
          ("present", 3))
    )


_AirFMModCondPump_Type.__name__ = "Integer32"
_AirFMModCondPump_Object = MibTableColumn
airFMModCondPump = _AirFMModCondPump_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 10),
    _AirFMModCondPump_Type()
)
airFMModCondPump.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModCondPump.setStatus("mandatory")


class _AirFMModFireDetector_Type(Integer32):
    """Custom type airFMModFireDetector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("notPresent", 2),
          ("present", 3))
    )


_AirFMModFireDetector_Type.__name__ = "Integer32"
_AirFMModFireDetector_Object = MibTableColumn
airFMModFireDetector = _AirFMModFireDetector_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 11),
    _AirFMModFireDetector_Type()
)
airFMModFireDetector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModFireDetector.setStatus("mandatory")


class _AirFMModSmokeDetector_Type(Integer32):
    """Custom type airFMModSmokeDetector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("notPresent", 2),
          ("present", 3))
    )


_AirFMModSmokeDetector_Type.__name__ = "Integer32"
_AirFMModSmokeDetector_Object = MibTableColumn
airFMModSmokeDetector = _AirFMModSmokeDetector_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 12),
    _AirFMModSmokeDetector_Type()
)
airFMModSmokeDetector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModSmokeDetector.setStatus("mandatory")


class _AirFMModWaterDetector_Type(Integer32):
    """Custom type airFMModWaterDetector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("notPresent", 2),
          ("present", 3))
    )


_AirFMModWaterDetector_Type.__name__ = "Integer32"
_AirFMModWaterDetector_Object = MibTableColumn
airFMModWaterDetector = _AirFMModWaterDetector_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 3, 2, 1, 13),
    _AirFMModWaterDetector_Type()
)
airFMModWaterDetector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModWaterDetector.setStatus("mandatory")
_AirFMModCooling_ObjectIdentity = ObjectIdentity
airFMModCooling = _AirFMModCooling_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4)
)
_AirFMModCoolTableSize_Type = Integer32
_AirFMModCoolTableSize_Object = MibScalar
airFMModCoolTableSize = _AirFMModCoolTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 1),
    _AirFMModCoolTableSize_Type()
)
airFMModCoolTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModCoolTableSize.setStatus("mandatory")
_AirFMModCoolTable_Object = MibTable
airFMModCoolTable = _AirFMModCoolTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2)
)
if mibBuilder.loadTexts:
    airFMModCoolTable.setStatus("mandatory")
_AirFMModCoolEntry_Object = MibTableRow
airFMModCoolEntry = _AirFMModCoolEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1)
)
airFMModCoolEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMModCoolModuleIndex"),
)
if mibBuilder.loadTexts:
    airFMModCoolEntry.setStatus("mandatory")
_AirFMModCoolModuleIndex_Type = Integer32
_AirFMModCoolModuleIndex_Object = MibTableColumn
airFMModCoolModuleIndex = _AirFMModCoolModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 1),
    _AirFMModCoolModuleIndex_Type()
)
airFMModCoolModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModCoolModuleIndex.setStatus("mandatory")


class _AirFMModComp1_Type(Integer32):
    """Custom type airFMModComp1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 3),
          ("on", 2))
    )


_AirFMModComp1_Type.__name__ = "Integer32"
_AirFMModComp1_Object = MibTableColumn
airFMModComp1 = _AirFMModComp1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 2),
    _AirFMModComp1_Type()
)
airFMModComp1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModComp1.setStatus("mandatory")


class _AirFMModComp2_Type(Integer32):
    """Custom type airFMModComp2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 3),
          ("on", 2))
    )


_AirFMModComp2_Type.__name__ = "Integer32"
_AirFMModComp2_Object = MibTableColumn
airFMModComp2 = _AirFMModComp2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 3),
    _AirFMModComp2_Type()
)
airFMModComp2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModComp2.setStatus("mandatory")
_AirFMModSuctPresKPa_Type = Integer32
_AirFMModSuctPresKPa_Object = MibTableColumn
airFMModSuctPresKPa = _AirFMModSuctPresKPa_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 4),
    _AirFMModSuctPresKPa_Type()
)
airFMModSuctPresKPa.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModSuctPresKPa.setStatus("mandatory")
_AirFMModSuctPresPSI_Type = Integer32
_AirFMModSuctPresPSI_Object = MibTableColumn
airFMModSuctPresPSI = _AirFMModSuctPresPSI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 5),
    _AirFMModSuctPresPSI_Type()
)
airFMModSuctPresPSI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModSuctPresPSI.setStatus("mandatory")
_AirFMModDischPresKPa_Type = Integer32
_AirFMModDischPresKPa_Object = MibTableColumn
airFMModDischPresKPa = _AirFMModDischPresKPa_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 6),
    _AirFMModDischPresKPa_Type()
)
airFMModDischPresKPa.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModDischPresKPa.setStatus("mandatory")
_AirFMModDischPresPSI_Type = Integer32
_AirFMModDischPresPSI_Object = MibTableColumn
airFMModDischPresPSI = _AirFMModDischPresPSI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 7),
    _AirFMModDischPresPSI_Type()
)
airFMModDischPresPSI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModDischPresPSI.setStatus("mandatory")
_AirFMModCondFluidVlvPos_Type = Integer32
_AirFMModCondFluidVlvPos_Object = MibTableColumn
airFMModCondFluidVlvPos = _AirFMModCondFluidVlvPos_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 8),
    _AirFMModCondFluidVlvPos_Type()
)
airFMModCondFluidVlvPos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModCondFluidVlvPos.setStatus("mandatory")
_AirFMModCoilFluidVlvPos_Type = Integer32
_AirFMModCoilFluidVlvPos_Object = MibTableColumn
airFMModCoilFluidVlvPos = _AirFMModCoilFluidVlvPos_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 4, 2, 1, 9),
    _AirFMModCoilFluidVlvPos_Type()
)
airFMModCoilFluidVlvPos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModCoilFluidVlvPos.setStatus("mandatory")
_AirFMModHumidity_ObjectIdentity = ObjectIdentity
airFMModHumidity = _AirFMModHumidity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5)
)
_AirFMModHumTableSize_Type = Integer32
_AirFMModHumTableSize_Object = MibScalar
airFMModHumTableSize = _AirFMModHumTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 1),
    _AirFMModHumTableSize_Type()
)
airFMModHumTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModHumTableSize.setStatus("mandatory")
_AirFMModHumTable_Object = MibTable
airFMModHumTable = _AirFMModHumTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2)
)
if mibBuilder.loadTexts:
    airFMModHumTable.setStatus("mandatory")
_AirFMModHumEntry_Object = MibTableRow
airFMModHumEntry = _AirFMModHumEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1)
)
airFMModHumEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMModHumModuleIndex"),
)
if mibBuilder.loadTexts:
    airFMModHumEntry.setStatus("mandatory")
_AirFMModHumModuleIndex_Type = Integer32
_AirFMModHumModuleIndex_Object = MibTableColumn
airFMModHumModuleIndex = _AirFMModHumModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 1),
    _AirFMModHumModuleIndex_Type()
)
airFMModHumModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModHumModuleIndex.setStatus("mandatory")


class _AirFMModHumidifier_Type(Integer32):
    """Custom type airFMModHumidifier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("liveSteam", 4),
          ("none", 2),
          ("notApplicable", 1),
          ("steamElectrode", 3))
    )


_AirFMModHumidifier_Type.__name__ = "Integer32"
_AirFMModHumidifier_Object = MibTableColumn
airFMModHumidifier = _AirFMModHumidifier_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 2),
    _AirFMModHumidifier_Type()
)
airFMModHumidifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModHumidifier.setStatus("mandatory")
_AirFMModElectrodeCurrent_Type = Integer32
_AirFMModElectrodeCurrent_Object = MibTableColumn
airFMModElectrodeCurrent = _AirFMModElectrodeCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 3),
    _AirFMModElectrodeCurrent_Type()
)
airFMModElectrodeCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModElectrodeCurrent.setStatus("mandatory")
_AirFMModHumActualOutput_Type = Integer32
_AirFMModHumActualOutput_Object = MibTableColumn
airFMModHumActualOutput = _AirFMModHumActualOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 4),
    _AirFMModHumActualOutput_Type()
)
airFMModHumActualOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModHumActualOutput.setStatus("mandatory")
_AirFMModWaterConductivity_Type = Integer32
_AirFMModWaterConductivity_Object = MibTableColumn
airFMModWaterConductivity = _AirFMModWaterConductivity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 5),
    _AirFMModWaterConductivity_Type()
)
airFMModWaterConductivity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModWaterConductivity.setStatus("mandatory")
_AirFMModHotWaterVlvPos_Type = Integer32
_AirFMModHotWaterVlvPos_Object = MibTableColumn
airFMModHotWaterVlvPos = _AirFMModHotWaterVlvPos_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 6),
    _AirFMModHotWaterVlvPos_Type()
)
airFMModHotWaterVlvPos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModHotWaterVlvPos.setStatus("mandatory")


class _AirFMModStmElectHumMode_Type(Integer32):
    """Custom type airFMModStmElectHumMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("auto", 3),
          ("drain", 4),
          ("notApplicable", 1),
          ("off", 2))
    )


_AirFMModStmElectHumMode_Type.__name__ = "Integer32"
_AirFMModStmElectHumMode_Object = MibTableColumn
airFMModStmElectHumMode = _AirFMModStmElectHumMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 5, 2, 1, 7),
    _AirFMModStmElectHumMode_Type()
)
airFMModStmElectHumMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModStmElectHumMode.setStatus("mandatory")
_AirFMModBlower1_ObjectIdentity = ObjectIdentity
airFMModBlower1 = _AirFMModBlower1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6)
)
_AirFMModBlwr1TableSize_Type = Integer32
_AirFMModBlwr1TableSize_Object = MibScalar
airFMModBlwr1TableSize = _AirFMModBlwr1TableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 1),
    _AirFMModBlwr1TableSize_Type()
)
airFMModBlwr1TableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1TableSize.setStatus("mandatory")
_AirFMModBlwr1Table_Object = MibTable
airFMModBlwr1Table = _AirFMModBlwr1Table_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2)
)
if mibBuilder.loadTexts:
    airFMModBlwr1Table.setStatus("mandatory")
_AirFMModBlwr1Entry_Object = MibTableRow
airFMModBlwr1Entry = _AirFMModBlwr1Entry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1)
)
airFMModBlwr1Entry.setIndexNames(
    (0, "POWERNET-MIB", "airFMModBlwr1ModuleIndex"),
)
if mibBuilder.loadTexts:
    airFMModBlwr1Entry.setStatus("mandatory")
_AirFMModBlwr1ModuleIndex_Type = Integer32
_AirFMModBlwr1ModuleIndex_Object = MibTableColumn
airFMModBlwr1ModuleIndex = _AirFMModBlwr1ModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 1),
    _AirFMModBlwr1ModuleIndex_Type()
)
airFMModBlwr1ModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1ModuleIndex.setStatus("mandatory")


class _AirFMModBlwr1CtrlType_Type(Integer32):
    """Custom type airFMModBlwr1CtrlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("danfossVFD", 4),
          ("ecController", 3),
          ("fujiVFD", 2),
          ("notApplicable", 1))
    )


_AirFMModBlwr1CtrlType_Type.__name__ = "Integer32"
_AirFMModBlwr1CtrlType_Object = MibTableColumn
airFMModBlwr1CtrlType = _AirFMModBlwr1CtrlType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 2),
    _AirFMModBlwr1CtrlType_Type()
)
airFMModBlwr1CtrlType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1CtrlType.setStatus("mandatory")
_AirFMModBlwr1CmdFreq_Type = Integer32
_AirFMModBlwr1CmdFreq_Object = MibTableColumn
airFMModBlwr1CmdFreq = _AirFMModBlwr1CmdFreq_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 3),
    _AirFMModBlwr1CmdFreq_Type()
)
airFMModBlwr1CmdFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1CmdFreq.setStatus("mandatory")
_AirFMModBlwr1ActFreq_Type = Integer32
_AirFMModBlwr1ActFreq_Object = MibTableColumn
airFMModBlwr1ActFreq = _AirFMModBlwr1ActFreq_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 4),
    _AirFMModBlwr1ActFreq_Type()
)
airFMModBlwr1ActFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1ActFreq.setStatus("mandatory")
_AirFMModBlwr1Poles_Type = Integer32
_AirFMModBlwr1Poles_Object = MibTableColumn
airFMModBlwr1Poles = _AirFMModBlwr1Poles_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 5),
    _AirFMModBlwr1Poles_Type()
)
airFMModBlwr1Poles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1Poles.setStatus("mandatory")
_AirFMModBlwr1RatedHorsePower_Type = Integer32
_AirFMModBlwr1RatedHorsePower_Object = MibTableColumn
airFMModBlwr1RatedHorsePower = _AirFMModBlwr1RatedHorsePower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 6),
    _AirFMModBlwr1RatedHorsePower_Type()
)
airFMModBlwr1RatedHorsePower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1RatedHorsePower.setStatus("mandatory")
_AirFMModBlwr1RatedCurrent_Type = Integer32
_AirFMModBlwr1RatedCurrent_Object = MibTableColumn
airFMModBlwr1RatedCurrent = _AirFMModBlwr1RatedCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 7),
    _AirFMModBlwr1RatedCurrent_Type()
)
airFMModBlwr1RatedCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1RatedCurrent.setStatus("mandatory")
_AirFMModBlwr1ActTorq_Type = Integer32
_AirFMModBlwr1ActTorq_Object = MibTableColumn
airFMModBlwr1ActTorq = _AirFMModBlwr1ActTorq_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 8),
    _AirFMModBlwr1ActTorq_Type()
)
airFMModBlwr1ActTorq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1ActTorq.setStatus("mandatory")
_AirFMModBlwr1Current_Type = Integer32
_AirFMModBlwr1Current_Object = MibTableColumn
airFMModBlwr1Current = _AirFMModBlwr1Current_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 9),
    _AirFMModBlwr1Current_Type()
)
airFMModBlwr1Current.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1Current.setStatus("mandatory")
_AirFMModBlwr1Vlt_Type = Integer32
_AirFMModBlwr1Vlt_Object = MibTableColumn
airFMModBlwr1Vlt = _AirFMModBlwr1Vlt_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 10),
    _AirFMModBlwr1Vlt_Type()
)
airFMModBlwr1Vlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1Vlt.setStatus("mandatory")
_AirFMModBlwr1DCLinkVlt_Type = Integer32
_AirFMModBlwr1DCLinkVlt_Object = MibTableColumn
airFMModBlwr1DCLinkVlt = _AirFMModBlwr1DCLinkVlt_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 11),
    _AirFMModBlwr1DCLinkVlt_Type()
)
airFMModBlwr1DCLinkVlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1DCLinkVlt.setStatus("mandatory")
_AirFMModBlwr1AccTime_Type = Integer32
_AirFMModBlwr1AccTime_Object = MibTableColumn
airFMModBlwr1AccTime = _AirFMModBlwr1AccTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 12),
    _AirFMModBlwr1AccTime_Type()
)
airFMModBlwr1AccTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1AccTime.setStatus("mandatory")
_AirFMModBlwr1DecTime_Type = Integer32
_AirFMModBlwr1DecTime_Object = MibTableColumn
airFMModBlwr1DecTime = _AirFMModBlwr1DecTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 13),
    _AirFMModBlwr1DecTime_Type()
)
airFMModBlwr1DecTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1DecTime.setStatus("mandatory")
_AirFMModBlwr1CapLife_Type = Integer32
_AirFMModBlwr1CapLife_Object = MibTableColumn
airFMModBlwr1CapLife = _AirFMModBlwr1CapLife_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 14),
    _AirFMModBlwr1CapLife_Type()
)
airFMModBlwr1CapLife.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1CapLife.setStatus("mandatory")
_AirFMModBlwr1CtrlCoolFanLife_Type = Integer32
_AirFMModBlwr1CtrlCoolFanLife_Object = MibTableColumn
airFMModBlwr1CtrlCoolFanLife = _AirFMModBlwr1CtrlCoolFanLife_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 15),
    _AirFMModBlwr1CtrlCoolFanLife_Type()
)
airFMModBlwr1CtrlCoolFanLife.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1CtrlCoolFanLife.setStatus("mandatory")


class _AirFMModBlwr1ElOvMode_Type(Integer32):
    """Custom type airFMModBlwr1ElOvMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 3),
          ("inactive", 2),
          ("notApplicable", 1))
    )


_AirFMModBlwr1ElOvMode_Type.__name__ = "Integer32"
_AirFMModBlwr1ElOvMode_Object = MibTableColumn
airFMModBlwr1ElOvMode = _AirFMModBlwr1ElOvMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 16),
    _AirFMModBlwr1ElOvMode_Type()
)
airFMModBlwr1ElOvMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1ElOvMode.setStatus("mandatory")
_AirFMModBlwr1ElOvSetting_Type = Integer32
_AirFMModBlwr1ElOvSetting_Object = MibTableColumn
airFMModBlwr1ElOvSetting = _AirFMModBlwr1ElOvSetting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 17),
    _AirFMModBlwr1ElOvSetting_Type()
)
airFMModBlwr1ElOvSetting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1ElOvSetting.setStatus("mandatory")
_AirFMModBlwr1ElOvTimeConst_Type = Integer32
_AirFMModBlwr1ElOvTimeConst_Object = MibTableColumn
airFMModBlwr1ElOvTimeConst = _AirFMModBlwr1ElOvTimeConst_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 18),
    _AirFMModBlwr1ElOvTimeConst_Type()
)
airFMModBlwr1ElOvTimeConst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1ElOvTimeConst.setStatus("mandatory")
_AirFMModBlwr1FanPower_Type = Integer32
_AirFMModBlwr1FanPower_Object = MibTableColumn
airFMModBlwr1FanPower = _AirFMModBlwr1FanPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 19),
    _AirFMModBlwr1FanPower_Type()
)
airFMModBlwr1FanPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1FanPower.setStatus("mandatory")
_AirFMModBlwr1HeatsinkTempC_Type = Integer32
_AirFMModBlwr1HeatsinkTempC_Object = MibTableColumn
airFMModBlwr1HeatsinkTempC = _AirFMModBlwr1HeatsinkTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 20),
    _AirFMModBlwr1HeatsinkTempC_Type()
)
airFMModBlwr1HeatsinkTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1HeatsinkTempC.setStatus("mandatory")
_AirFMModBlwr1HeatsinkTempF_Type = Integer32
_AirFMModBlwr1HeatsinkTempF_Object = MibTableColumn
airFMModBlwr1HeatsinkTempF = _AirFMModBlwr1HeatsinkTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 21),
    _AirFMModBlwr1HeatsinkTempF_Type()
)
airFMModBlwr1HeatsinkTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1HeatsinkTempF.setStatus("mandatory")
_AirFMModBlwr1ChokeTempC_Type = Integer32
_AirFMModBlwr1ChokeTempC_Object = MibTableColumn
airFMModBlwr1ChokeTempC = _AirFMModBlwr1ChokeTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 22),
    _AirFMModBlwr1ChokeTempC_Type()
)
airFMModBlwr1ChokeTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1ChokeTempC.setStatus("mandatory")
_AirFMModBlwr1ChokeTempF_Type = Integer32
_AirFMModBlwr1ChokeTempF_Object = MibTableColumn
airFMModBlwr1ChokeTempF = _AirFMModBlwr1ChokeTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 23),
    _AirFMModBlwr1ChokeTempF_Type()
)
airFMModBlwr1ChokeTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1ChokeTempF.setStatus("mandatory")
_AirFMModBlwr1InverterTempC_Type = Integer32
_AirFMModBlwr1InverterTempC_Object = MibTableColumn
airFMModBlwr1InverterTempC = _AirFMModBlwr1InverterTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 24),
    _AirFMModBlwr1InverterTempC_Type()
)
airFMModBlwr1InverterTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1InverterTempC.setStatus("mandatory")
_AirFMModBlwr1InverterTempF_Type = Integer32
_AirFMModBlwr1InverterTempF_Object = MibTableColumn
airFMModBlwr1InverterTempF = _AirFMModBlwr1InverterTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 6, 2, 1, 25),
    _AirFMModBlwr1InverterTempF_Type()
)
airFMModBlwr1InverterTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr1InverterTempF.setStatus("mandatory")
_AirFMModBlower2_ObjectIdentity = ObjectIdentity
airFMModBlower2 = _AirFMModBlower2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7)
)
_AirFMModBlwr2TableSize_Type = Integer32
_AirFMModBlwr2TableSize_Object = MibScalar
airFMModBlwr2TableSize = _AirFMModBlwr2TableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 1),
    _AirFMModBlwr2TableSize_Type()
)
airFMModBlwr2TableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2TableSize.setStatus("mandatory")
_AirFMModBlwr2Table_Object = MibTable
airFMModBlwr2Table = _AirFMModBlwr2Table_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2)
)
if mibBuilder.loadTexts:
    airFMModBlwr2Table.setStatus("mandatory")
_AirFMModBlwr2Entry_Object = MibTableRow
airFMModBlwr2Entry = _AirFMModBlwr2Entry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1)
)
airFMModBlwr2Entry.setIndexNames(
    (0, "POWERNET-MIB", "airFMModBlwr2ModuleIndex"),
)
if mibBuilder.loadTexts:
    airFMModBlwr2Entry.setStatus("mandatory")
_AirFMModBlwr2ModuleIndex_Type = Integer32
_AirFMModBlwr2ModuleIndex_Object = MibTableColumn
airFMModBlwr2ModuleIndex = _AirFMModBlwr2ModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 1),
    _AirFMModBlwr2ModuleIndex_Type()
)
airFMModBlwr2ModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2ModuleIndex.setStatus("mandatory")


class _AirFMModBlwr2CtrlType_Type(Integer32):
    """Custom type airFMModBlwr2CtrlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("danfossVFD", 4),
          ("ecController", 3),
          ("fujiVFD", 2),
          ("notApplicable", 1))
    )


_AirFMModBlwr2CtrlType_Type.__name__ = "Integer32"
_AirFMModBlwr2CtrlType_Object = MibTableColumn
airFMModBlwr2CtrlType = _AirFMModBlwr2CtrlType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 2),
    _AirFMModBlwr2CtrlType_Type()
)
airFMModBlwr2CtrlType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2CtrlType.setStatus("mandatory")
_AirFMModBlwr2CmdFreq_Type = Integer32
_AirFMModBlwr2CmdFreq_Object = MibTableColumn
airFMModBlwr2CmdFreq = _AirFMModBlwr2CmdFreq_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 3),
    _AirFMModBlwr2CmdFreq_Type()
)
airFMModBlwr2CmdFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2CmdFreq.setStatus("mandatory")
_AirFMModBlwr2ActFreq_Type = Integer32
_AirFMModBlwr2ActFreq_Object = MibTableColumn
airFMModBlwr2ActFreq = _AirFMModBlwr2ActFreq_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 4),
    _AirFMModBlwr2ActFreq_Type()
)
airFMModBlwr2ActFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2ActFreq.setStatus("mandatory")
_AirFMModBlwr2Poles_Type = Integer32
_AirFMModBlwr2Poles_Object = MibTableColumn
airFMModBlwr2Poles = _AirFMModBlwr2Poles_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 5),
    _AirFMModBlwr2Poles_Type()
)
airFMModBlwr2Poles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2Poles.setStatus("mandatory")
_AirFMModBlwr2RatedHorsePower_Type = Integer32
_AirFMModBlwr2RatedHorsePower_Object = MibTableColumn
airFMModBlwr2RatedHorsePower = _AirFMModBlwr2RatedHorsePower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 6),
    _AirFMModBlwr2RatedHorsePower_Type()
)
airFMModBlwr2RatedHorsePower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2RatedHorsePower.setStatus("mandatory")
_AirFMModBlwr2RatedCurrent_Type = Integer32
_AirFMModBlwr2RatedCurrent_Object = MibTableColumn
airFMModBlwr2RatedCurrent = _AirFMModBlwr2RatedCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 7),
    _AirFMModBlwr2RatedCurrent_Type()
)
airFMModBlwr2RatedCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2RatedCurrent.setStatus("mandatory")
_AirFMModBlwr2ActTorq_Type = Integer32
_AirFMModBlwr2ActTorq_Object = MibTableColumn
airFMModBlwr2ActTorq = _AirFMModBlwr2ActTorq_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 8),
    _AirFMModBlwr2ActTorq_Type()
)
airFMModBlwr2ActTorq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2ActTorq.setStatus("mandatory")
_AirFMModBlwr2Current_Type = Integer32
_AirFMModBlwr2Current_Object = MibTableColumn
airFMModBlwr2Current = _AirFMModBlwr2Current_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 9),
    _AirFMModBlwr2Current_Type()
)
airFMModBlwr2Current.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2Current.setStatus("mandatory")
_AirFMModBlwr2Vlt_Type = Integer32
_AirFMModBlwr2Vlt_Object = MibTableColumn
airFMModBlwr2Vlt = _AirFMModBlwr2Vlt_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 10),
    _AirFMModBlwr2Vlt_Type()
)
airFMModBlwr2Vlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2Vlt.setStatus("mandatory")
_AirFMModBlwr2DCLinkVlt_Type = Integer32
_AirFMModBlwr2DCLinkVlt_Object = MibTableColumn
airFMModBlwr2DCLinkVlt = _AirFMModBlwr2DCLinkVlt_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 11),
    _AirFMModBlwr2DCLinkVlt_Type()
)
airFMModBlwr2DCLinkVlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2DCLinkVlt.setStatus("mandatory")
_AirFMModBlwr2AccTime_Type = Integer32
_AirFMModBlwr2AccTime_Object = MibTableColumn
airFMModBlwr2AccTime = _AirFMModBlwr2AccTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 12),
    _AirFMModBlwr2AccTime_Type()
)
airFMModBlwr2AccTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2AccTime.setStatus("mandatory")
_AirFMModBlwr2DecTime_Type = Integer32
_AirFMModBlwr2DecTime_Object = MibTableColumn
airFMModBlwr2DecTime = _AirFMModBlwr2DecTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 13),
    _AirFMModBlwr2DecTime_Type()
)
airFMModBlwr2DecTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2DecTime.setStatus("mandatory")
_AirFMModBlwr2CapLife_Type = Integer32
_AirFMModBlwr2CapLife_Object = MibTableColumn
airFMModBlwr2CapLife = _AirFMModBlwr2CapLife_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 14),
    _AirFMModBlwr2CapLife_Type()
)
airFMModBlwr2CapLife.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2CapLife.setStatus("mandatory")
_AirFMModBlwr2CtrlCoolFanLife_Type = Integer32
_AirFMModBlwr2CtrlCoolFanLife_Object = MibTableColumn
airFMModBlwr2CtrlCoolFanLife = _AirFMModBlwr2CtrlCoolFanLife_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 15),
    _AirFMModBlwr2CtrlCoolFanLife_Type()
)
airFMModBlwr2CtrlCoolFanLife.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2CtrlCoolFanLife.setStatus("mandatory")


class _AirFMModBlwr2ElOvMode_Type(Integer32):
    """Custom type airFMModBlwr2ElOvMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 3),
          ("inactive", 2),
          ("notApplicable", 1))
    )


_AirFMModBlwr2ElOvMode_Type.__name__ = "Integer32"
_AirFMModBlwr2ElOvMode_Object = MibTableColumn
airFMModBlwr2ElOvMode = _AirFMModBlwr2ElOvMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 16),
    _AirFMModBlwr2ElOvMode_Type()
)
airFMModBlwr2ElOvMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2ElOvMode.setStatus("mandatory")
_AirFMModBlwr2ElOvSetting_Type = Integer32
_AirFMModBlwr2ElOvSetting_Object = MibTableColumn
airFMModBlwr2ElOvSetting = _AirFMModBlwr2ElOvSetting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 17),
    _AirFMModBlwr2ElOvSetting_Type()
)
airFMModBlwr2ElOvSetting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2ElOvSetting.setStatus("mandatory")
_AirFMModBlwr2ElOvTimeConst_Type = Integer32
_AirFMModBlwr2ElOvTimeConst_Object = MibTableColumn
airFMModBlwr2ElOvTimeConst = _AirFMModBlwr2ElOvTimeConst_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 18),
    _AirFMModBlwr2ElOvTimeConst_Type()
)
airFMModBlwr2ElOvTimeConst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2ElOvTimeConst.setStatus("mandatory")
_AirFMModBlwr2FanPower_Type = Integer32
_AirFMModBlwr2FanPower_Object = MibTableColumn
airFMModBlwr2FanPower = _AirFMModBlwr2FanPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 19),
    _AirFMModBlwr2FanPower_Type()
)
airFMModBlwr2FanPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2FanPower.setStatus("mandatory")
_AirFMModBlwr2HeatsinkTempC_Type = Integer32
_AirFMModBlwr2HeatsinkTempC_Object = MibTableColumn
airFMModBlwr2HeatsinkTempC = _AirFMModBlwr2HeatsinkTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 20),
    _AirFMModBlwr2HeatsinkTempC_Type()
)
airFMModBlwr2HeatsinkTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2HeatsinkTempC.setStatus("mandatory")
_AirFMModBlwr2HeatsinkTempF_Type = Integer32
_AirFMModBlwr2HeatsinkTempF_Object = MibTableColumn
airFMModBlwr2HeatsinkTempF = _AirFMModBlwr2HeatsinkTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 21),
    _AirFMModBlwr2HeatsinkTempF_Type()
)
airFMModBlwr2HeatsinkTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2HeatsinkTempF.setStatus("mandatory")
_AirFMModBlwr2ChokeTempC_Type = Integer32
_AirFMModBlwr2ChokeTempC_Object = MibTableColumn
airFMModBlwr2ChokeTempC = _AirFMModBlwr2ChokeTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 22),
    _AirFMModBlwr2ChokeTempC_Type()
)
airFMModBlwr2ChokeTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2ChokeTempC.setStatus("mandatory")
_AirFMModBlwr2ChokeTempF_Type = Integer32
_AirFMModBlwr2ChokeTempF_Object = MibTableColumn
airFMModBlwr2ChokeTempF = _AirFMModBlwr2ChokeTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 23),
    _AirFMModBlwr2ChokeTempF_Type()
)
airFMModBlwr2ChokeTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2ChokeTempF.setStatus("mandatory")
_AirFMModBlwr2InverterTempC_Type = Integer32
_AirFMModBlwr2InverterTempC_Object = MibTableColumn
airFMModBlwr2InverterTempC = _AirFMModBlwr2InverterTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 24),
    _AirFMModBlwr2InverterTempC_Type()
)
airFMModBlwr2InverterTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2InverterTempC.setStatus("mandatory")
_AirFMModBlwr2InverterTempF_Type = Integer32
_AirFMModBlwr2InverterTempF_Object = MibTableColumn
airFMModBlwr2InverterTempF = _AirFMModBlwr2InverterTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 7, 2, 1, 25),
    _AirFMModBlwr2InverterTempF_Type()
)
airFMModBlwr2InverterTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModBlwr2InverterTempF.setStatus("mandatory")
_AirFMModRunHours_ObjectIdentity = ObjectIdentity
airFMModRunHours = _AirFMModRunHours_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8)
)
_AirFMModRHTableSize_Type = Integer32
_AirFMModRHTableSize_Object = MibScalar
airFMModRHTableSize = _AirFMModRHTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 1),
    _AirFMModRHTableSize_Type()
)
airFMModRHTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModRHTableSize.setStatus("mandatory")
_AirFMModRHTable_Object = MibTable
airFMModRHTable = _AirFMModRHTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2)
)
if mibBuilder.loadTexts:
    airFMModRHTable.setStatus("mandatory")
_AirFMModRHEntry_Object = MibTableRow
airFMModRHEntry = _AirFMModRHEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1)
)
airFMModRHEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMModRHModuleIndex"),
)
if mibBuilder.loadTexts:
    airFMModRHEntry.setStatus("mandatory")
_AirFMModRHModuleIndex_Type = Integer32
_AirFMModRHModuleIndex_Object = MibTableColumn
airFMModRHModuleIndex = _AirFMModRHModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 1),
    _AirFMModRHModuleIndex_Type()
)
airFMModRHModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModRHModuleIndex.setStatus("mandatory")
_AirFMModRHComp1_Type = Integer32
_AirFMModRHComp1_Object = MibTableColumn
airFMModRHComp1 = _AirFMModRHComp1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 2),
    _AirFMModRHComp1_Type()
)
airFMModRHComp1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModRHComp1.setStatus("mandatory")
_AirFMModRHComp2_Type = Integer32
_AirFMModRHComp2_Object = MibTableColumn
airFMModRHComp2 = _AirFMModRHComp2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 3),
    _AirFMModRHComp2_Type()
)
airFMModRHComp2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModRHComp2.setStatus("mandatory")
_AirFMModRHHeater_Type = Integer32
_AirFMModRHHeater_Object = MibTableColumn
airFMModRHHeater = _AirFMModRHHeater_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 4),
    _AirFMModRHHeater_Type()
)
airFMModRHHeater.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModRHHeater.setStatus("mandatory")
_AirFMModRHHum_Type = Integer32
_AirFMModRHHum_Object = MibTableColumn
airFMModRHHum = _AirFMModRHHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 5),
    _AirFMModRHHum_Type()
)
airFMModRHHum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModRHHum.setStatus("mandatory")
_AirFMModRHBlwr1_Type = Integer32
_AirFMModRHBlwr1_Object = MibTableColumn
airFMModRHBlwr1 = _AirFMModRHBlwr1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 6),
    _AirFMModRHBlwr1_Type()
)
airFMModRHBlwr1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModRHBlwr1.setStatus("mandatory")
_AirFMModRHBlwr2_Type = Integer32
_AirFMModRHBlwr2_Object = MibTableColumn
airFMModRHBlwr2 = _AirFMModRHBlwr2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 7),
    _AirFMModRHBlwr2_Type()
)
airFMModRHBlwr2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModRHBlwr2.setStatus("mandatory")
_AirFMModRHBlwrCtrl1_Type = Integer32
_AirFMModRHBlwrCtrl1_Object = MibTableColumn
airFMModRHBlwrCtrl1 = _AirFMModRHBlwrCtrl1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 8),
    _AirFMModRHBlwrCtrl1_Type()
)
airFMModRHBlwrCtrl1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModRHBlwrCtrl1.setStatus("mandatory")
_AirFMModRHBlwrCtrl2_Type = Integer32
_AirFMModRHBlwrCtrl2_Object = MibTableColumn
airFMModRHBlwrCtrl2 = _AirFMModRHBlwrCtrl2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 9),
    _AirFMModRHBlwrCtrl2_Type()
)
airFMModRHBlwrCtrl2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModRHBlwrCtrl2.setStatus("mandatory")


class _AirFMModRHComp1Reset_Type(Integer32):
    """Custom type airFMModRHComp1Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModRHComp1Reset_Type.__name__ = "Integer32"
_AirFMModRHComp1Reset_Object = MibTableColumn
airFMModRHComp1Reset = _AirFMModRHComp1Reset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 10),
    _AirFMModRHComp1Reset_Type()
)
airFMModRHComp1Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModRHComp1Reset.setStatus("mandatory")


class _AirFMModRHComp2Reset_Type(Integer32):
    """Custom type airFMModRHComp2Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModRHComp2Reset_Type.__name__ = "Integer32"
_AirFMModRHComp2Reset_Object = MibTableColumn
airFMModRHComp2Reset = _AirFMModRHComp2Reset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 11),
    _AirFMModRHComp2Reset_Type()
)
airFMModRHComp2Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModRHComp2Reset.setStatus("mandatory")


class _AirFMModRHHeaterReset_Type(Integer32):
    """Custom type airFMModRHHeaterReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModRHHeaterReset_Type.__name__ = "Integer32"
_AirFMModRHHeaterReset_Object = MibTableColumn
airFMModRHHeaterReset = _AirFMModRHHeaterReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 12),
    _AirFMModRHHeaterReset_Type()
)
airFMModRHHeaterReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModRHHeaterReset.setStatus("mandatory")


class _AirFMModRHHumReset_Type(Integer32):
    """Custom type airFMModRHHumReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModRHHumReset_Type.__name__ = "Integer32"
_AirFMModRHHumReset_Object = MibTableColumn
airFMModRHHumReset = _AirFMModRHHumReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 13),
    _AirFMModRHHumReset_Type()
)
airFMModRHHumReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModRHHumReset.setStatus("mandatory")


class _AirFMModRHBlwr1Reset_Type(Integer32):
    """Custom type airFMModRHBlwr1Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModRHBlwr1Reset_Type.__name__ = "Integer32"
_AirFMModRHBlwr1Reset_Object = MibTableColumn
airFMModRHBlwr1Reset = _AirFMModRHBlwr1Reset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 14),
    _AirFMModRHBlwr1Reset_Type()
)
airFMModRHBlwr1Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModRHBlwr1Reset.setStatus("mandatory")


class _AirFMModRHBlwr2Reset_Type(Integer32):
    """Custom type airFMModRHBlwr2Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModRHBlwr2Reset_Type.__name__ = "Integer32"
_AirFMModRHBlwr2Reset_Object = MibTableColumn
airFMModRHBlwr2Reset = _AirFMModRHBlwr2Reset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 8, 2, 1, 15),
    _AirFMModRHBlwr2Reset_Type()
)
airFMModRHBlwr2Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModRHBlwr2Reset.setStatus("mandatory")
_AirFMModServIntervals_ObjectIdentity = ObjectIdentity
airFMModServIntervals = _AirFMModServIntervals_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9)
)
_AirFMModServIntComp1_Type = Integer32
_AirFMModServIntComp1_Object = MibScalar
airFMModServIntComp1 = _AirFMModServIntComp1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 1),
    _AirFMModServIntComp1_Type()
)
airFMModServIntComp1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntComp1.setStatus("mandatory")
_AirFMModServIntComp2_Type = Integer32
_AirFMModServIntComp2_Object = MibScalar
airFMModServIntComp2 = _AirFMModServIntComp2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 2),
    _AirFMModServIntComp2_Type()
)
airFMModServIntComp2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntComp2.setStatus("mandatory")
_AirFMModServIntHeater_Type = Integer32
_AirFMModServIntHeater_Object = MibScalar
airFMModServIntHeater = _AirFMModServIntHeater_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 3),
    _AirFMModServIntHeater_Type()
)
airFMModServIntHeater.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntHeater.setStatus("mandatory")
_AirFMModServIntHum_Type = Integer32
_AirFMModServIntHum_Object = MibScalar
airFMModServIntHum = _AirFMModServIntHum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 4),
    _AirFMModServIntHum_Type()
)
airFMModServIntHum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntHum.setStatus("mandatory")
_AirFMModServIntBlwr1_Type = Integer32
_AirFMModServIntBlwr1_Object = MibScalar
airFMModServIntBlwr1 = _AirFMModServIntBlwr1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 5),
    _AirFMModServIntBlwr1_Type()
)
airFMModServIntBlwr1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntBlwr1.setStatus("mandatory")
_AirFMModServIntBlwr2_Type = Integer32
_AirFMModServIntBlwr2_Object = MibScalar
airFMModServIntBlwr2 = _AirFMModServIntBlwr2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 6),
    _AirFMModServIntBlwr2_Type()
)
airFMModServIntBlwr2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntBlwr2.setStatus("mandatory")
_AirFMModServIntBlwrCtrl1_Type = Integer32
_AirFMModServIntBlwrCtrl1_Object = MibScalar
airFMModServIntBlwrCtrl1 = _AirFMModServIntBlwrCtrl1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 7),
    _AirFMModServIntBlwrCtrl1_Type()
)
airFMModServIntBlwrCtrl1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntBlwrCtrl1.setStatus("mandatory")
_AirFMModServIntBlwrCtrl2_Type = Integer32
_AirFMModServIntBlwrCtrl2_Object = MibScalar
airFMModServIntBlwrCtrl2 = _AirFMModServIntBlwrCtrl2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 9, 8),
    _AirFMModServIntBlwrCtrl2_Type()
)
airFMModServIntBlwrCtrl2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntBlwrCtrl2.setStatus("mandatory")
_AirFMModServIntResets_ObjectIdentity = ObjectIdentity
airFMModServIntResets = _AirFMModServIntResets_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10)
)
_AirFMModServIntResetTableSize_Type = Integer32
_AirFMModServIntResetTableSize_Object = MibScalar
airFMModServIntResetTableSize = _AirFMModServIntResetTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 1),
    _AirFMModServIntResetTableSize_Type()
)
airFMModServIntResetTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModServIntResetTableSize.setStatus("mandatory")
_AirFMModServIntResetTable_Object = MibTable
airFMModServIntResetTable = _AirFMModServIntResetTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2)
)
if mibBuilder.loadTexts:
    airFMModServIntResetTable.setStatus("mandatory")
_AirFMModServIntResetEntry_Object = MibTableRow
airFMModServIntResetEntry = _AirFMModServIntResetEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1)
)
airFMModServIntResetEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMModServIntResetModuleIndex"),
)
if mibBuilder.loadTexts:
    airFMModServIntResetEntry.setStatus("mandatory")
_AirFMModServIntResetModuleIndex_Type = Integer32
_AirFMModServIntResetModuleIndex_Object = MibTableColumn
airFMModServIntResetModuleIndex = _AirFMModServIntResetModuleIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 1),
    _AirFMModServIntResetModuleIndex_Type()
)
airFMModServIntResetModuleIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMModServIntResetModuleIndex.setStatus("mandatory")


class _AirFMModServIntComp1Reset_Type(Integer32):
    """Custom type airFMModServIntComp1Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModServIntComp1Reset_Type.__name__ = "Integer32"
_AirFMModServIntComp1Reset_Object = MibTableColumn
airFMModServIntComp1Reset = _AirFMModServIntComp1Reset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 2),
    _AirFMModServIntComp1Reset_Type()
)
airFMModServIntComp1Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntComp1Reset.setStatus("mandatory")


class _AirFMModServIntComp2Reset_Type(Integer32):
    """Custom type airFMModServIntComp2Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModServIntComp2Reset_Type.__name__ = "Integer32"
_AirFMModServIntComp2Reset_Object = MibTableColumn
airFMModServIntComp2Reset = _AirFMModServIntComp2Reset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 3),
    _AirFMModServIntComp2Reset_Type()
)
airFMModServIntComp2Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntComp2Reset.setStatus("mandatory")


class _AirFMModServIntHeaterReset_Type(Integer32):
    """Custom type airFMModServIntHeaterReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModServIntHeaterReset_Type.__name__ = "Integer32"
_AirFMModServIntHeaterReset_Object = MibTableColumn
airFMModServIntHeaterReset = _AirFMModServIntHeaterReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 4),
    _AirFMModServIntHeaterReset_Type()
)
airFMModServIntHeaterReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntHeaterReset.setStatus("mandatory")


class _AirFMModServIntHumReset_Type(Integer32):
    """Custom type airFMModServIntHumReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModServIntHumReset_Type.__name__ = "Integer32"
_AirFMModServIntHumReset_Object = MibTableColumn
airFMModServIntHumReset = _AirFMModServIntHumReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 5),
    _AirFMModServIntHumReset_Type()
)
airFMModServIntHumReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntHumReset.setStatus("mandatory")


class _AirFMModServIntBlwr1Reset_Type(Integer32):
    """Custom type airFMModServIntBlwr1Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModServIntBlwr1Reset_Type.__name__ = "Integer32"
_AirFMModServIntBlwr1Reset_Object = MibTableColumn
airFMModServIntBlwr1Reset = _AirFMModServIntBlwr1Reset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 6),
    _AirFMModServIntBlwr1Reset_Type()
)
airFMModServIntBlwr1Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntBlwr1Reset.setStatus("mandatory")


class _AirFMModServIntBlwr2Reset_Type(Integer32):
    """Custom type airFMModServIntBlwr2Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModServIntBlwr2Reset_Type.__name__ = "Integer32"
_AirFMModServIntBlwr2Reset_Object = MibTableColumn
airFMModServIntBlwr2Reset = _AirFMModServIntBlwr2Reset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 7),
    _AirFMModServIntBlwr2Reset_Type()
)
airFMModServIntBlwr2Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntBlwr2Reset.setStatus("mandatory")


class _AirFMModServIntBlwrCtrl1Reset_Type(Integer32):
    """Custom type airFMModServIntBlwrCtrl1Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModServIntBlwrCtrl1Reset_Type.__name__ = "Integer32"
_AirFMModServIntBlwrCtrl1Reset_Object = MibTableColumn
airFMModServIntBlwrCtrl1Reset = _AirFMModServIntBlwrCtrl1Reset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 8),
    _AirFMModServIntBlwrCtrl1Reset_Type()
)
airFMModServIntBlwrCtrl1Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntBlwrCtrl1Reset.setStatus("mandatory")


class _AirFMModServIntBlwrCtrl2Reset_Type(Integer32):
    """Custom type airFMModServIntBlwrCtrl2Reset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 2),
          ("notApplicable", 1),
          ("reset", 3))
    )


_AirFMModServIntBlwrCtrl2Reset_Type.__name__ = "Integer32"
_AirFMModServIntBlwrCtrl2Reset_Object = MibTableColumn
airFMModServIntBlwrCtrl2Reset = _AirFMModServIntBlwrCtrl2Reset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 5, 10, 2, 1, 9),
    _AirFMModServIntBlwrCtrl2Reset_Type()
)
airFMModServIntBlwrCtrl2Reset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMModServIntBlwrCtrl2Reset.setStatus("mandatory")
_AirFMAlarms_ObjectIdentity = ObjectIdentity
airFMAlarms = _AirFMAlarms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6)
)


class _AirFMAlarmClearActiveGroupAlarms_Type(Integer32):
    """Custom type airFMAlarmClearActiveGroupAlarms based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clearAlarms", 2),
          ("noOperation", 1))
    )


_AirFMAlarmClearActiveGroupAlarms_Type.__name__ = "Integer32"
_AirFMAlarmClearActiveGroupAlarms_Object = MibScalar
airFMAlarmClearActiveGroupAlarms = _AirFMAlarmClearActiveGroupAlarms_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 1),
    _AirFMAlarmClearActiveGroupAlarms_Type()
)
airFMAlarmClearActiveGroupAlarms.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMAlarmClearActiveGroupAlarms.setStatus("mandatory")


class _AirFMAlarmClearActiveSysModAlarms_Type(Integer32):
    """Custom type airFMAlarmClearActiveSysModAlarms based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clearAlarms", 2),
          ("noOperation", 1))
    )


_AirFMAlarmClearActiveSysModAlarms_Type.__name__ = "Integer32"
_AirFMAlarmClearActiveSysModAlarms_Object = MibScalar
airFMAlarmClearActiveSysModAlarms = _AirFMAlarmClearActiveSysModAlarms_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 2),
    _AirFMAlarmClearActiveSysModAlarms_Type()
)
airFMAlarmClearActiveSysModAlarms.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airFMAlarmClearActiveSysModAlarms.setStatus("mandatory")
_AirFMAlarmConditionsTableSize_Type = Integer32
_AirFMAlarmConditionsTableSize_Object = MibScalar
airFMAlarmConditionsTableSize = _AirFMAlarmConditionsTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 3),
    _AirFMAlarmConditionsTableSize_Type()
)
airFMAlarmConditionsTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMAlarmConditionsTableSize.setStatus("mandatory")
_AirFMAlarmConditionsTable_Object = MibTable
airFMAlarmConditionsTable = _AirFMAlarmConditionsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4)
)
if mibBuilder.loadTexts:
    airFMAlarmConditionsTable.setStatus("mandatory")
_AirFMAlarmConditionsEntry_Object = MibTableRow
airFMAlarmConditionsEntry = _AirFMAlarmConditionsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1)
)
airFMAlarmConditionsEntry.setIndexNames(
    (0, "POWERNET-MIB", "airFMAlarmConditionsIndex"),
)
if mibBuilder.loadTexts:
    airFMAlarmConditionsEntry.setStatus("mandatory")
_AirFMAlarmConditionsIndex_Type = Integer32
_AirFMAlarmConditionsIndex_Object = MibTableColumn
airFMAlarmConditionsIndex = _AirFMAlarmConditionsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 1),
    _AirFMAlarmConditionsIndex_Type()
)
airFMAlarmConditionsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMAlarmConditionsIndex.setStatus("mandatory")


class _AirFMAlarmSeverity_Type(Integer32):
    """Custom type airFMAlarmSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("criticalMajor", 3),
          ("informational", 1),
          ("warningMinor", 2))
    )


_AirFMAlarmSeverity_Type.__name__ = "Integer32"
_AirFMAlarmSeverity_Object = MibTableColumn
airFMAlarmSeverity = _AirFMAlarmSeverity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 2),
    _AirFMAlarmSeverity_Type()
)
airFMAlarmSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMAlarmSeverity.setStatus("mandatory")


class _AirFMAlarmType_Type(Integer32):
    """Custom type airFMAlarmType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("expMod1", 4),
          ("expMod2", 5),
          ("group", 1),
          ("mainMod", 3),
          ("system", 2))
    )


_AirFMAlarmType_Type.__name__ = "Integer32"
_AirFMAlarmType_Object = MibTableColumn
airFMAlarmType = _AirFMAlarmType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 3),
    _AirFMAlarmType_Type()
)
airFMAlarmType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMAlarmType.setStatus("mandatory")
_AirFMEventCode_Type = Integer32
_AirFMEventCode_Object = MibTableColumn
airFMEventCode = _AirFMEventCode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 4),
    _AirFMEventCode_Type()
)
airFMEventCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMEventCode.setStatus("mandatory")
_AirFMAlarmDate_Type = DisplayString
_AirFMAlarmDate_Object = MibTableColumn
airFMAlarmDate = _AirFMAlarmDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 5),
    _AirFMAlarmDate_Type()
)
airFMAlarmDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMAlarmDate.setStatus("mandatory")
_AirFMAlarmTime_Type = DisplayString
_AirFMAlarmTime_Object = MibTableColumn
airFMAlarmTime = _AirFMAlarmTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 6),
    _AirFMAlarmTime_Type()
)
airFMAlarmTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMAlarmTime.setStatus("mandatory")


class _AirFMAlarmDescription_Type(DisplayString):
    """Custom type airFMAlarmDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_AirFMAlarmDescription_Type.__name__ = "DisplayString"
_AirFMAlarmDescription_Object = MibTableColumn
airFMAlarmDescription = _AirFMAlarmDescription_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 1, 6, 4, 1, 7),
    _AirFMAlarmDescription_Type()
)
airFMAlarmDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airFMAlarmDescription.setStatus("mandatory")
_AirPA_ObjectIdentity = ObjectIdentity
airPA = _AirPA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2)
)
_AirPAIdent_ObjectIdentity = ObjectIdentity
airPAIdent = _AirPAIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1)
)
_AirPAIdentName_Type = DisplayString
_AirPAIdentName_Object = MibScalar
airPAIdentName = _AirPAIdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 1),
    _AirPAIdentName_Type()
)
airPAIdentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPAIdentName.setStatus("mandatory")
_AirPAModelNumber_Type = DisplayString
_AirPAModelNumber_Object = MibScalar
airPAModelNumber = _AirPAModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 2),
    _AirPAModelNumber_Type()
)
airPAModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPAModelNumber.setStatus("mandatory")
_AirPADateOfManufacture_Type = DisplayString
_AirPADateOfManufacture_Object = MibScalar
airPADateOfManufacture = _AirPADateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 3),
    _AirPADateOfManufacture_Type()
)
airPADateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPADateOfManufacture.setStatus("mandatory")
_AirPASerialNumber_Type = DisplayString
_AirPASerialNumber_Object = MibScalar
airPASerialNumber = _AirPASerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 4),
    _AirPASerialNumber_Type()
)
airPASerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPASerialNumber.setStatus("mandatory")
_AirPAFirmwareRevision_Type = DisplayString
_AirPAFirmwareRevision_Object = MibScalar
airPAFirmwareRevision = _AirPAFirmwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 5),
    _AirPAFirmwareRevision_Type()
)
airPAFirmwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPAFirmwareRevision.setStatus("mandatory")
_AirPAHardwareRevision_Type = DisplayString
_AirPAHardwareRevision_Object = MibScalar
airPAHardwareRevision = _AirPAHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 1, 6),
    _AirPAHardwareRevision_Type()
)
airPAHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPAHardwareRevision.setStatus("mandatory")
_AirPAStatus_ObjectIdentity = ObjectIdentity
airPAStatus = _AirPAStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2)
)


class _AirPASystemPower_Type(Integer32):
    """Custom type airPASystemPower based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("powerOFF", 2),
          ("powerON", 1))
    )


_AirPASystemPower_Type.__name__ = "Integer32"
_AirPASystemPower_Object = MibScalar
airPASystemPower = _AirPASystemPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 1),
    _AirPASystemPower_Type()
)
airPASystemPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPASystemPower.setStatus("mandatory")


class _AirPAOperatingMode_Type(Integer32):
    """Custom type airPAOperatingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("modeCOOLING", 3),
          ("modeOFF", 1),
          ("modeVENTING", 2))
    )


_AirPAOperatingMode_Type.__name__ = "Integer32"
_AirPAOperatingMode_Object = MibScalar
airPAOperatingMode = _AirPAOperatingMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 2),
    _AirPAOperatingMode_Type()
)
airPAOperatingMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPAOperatingMode.setStatus("mandatory")
_AirPASetpointTempF_Type = Integer32
_AirPASetpointTempF_Object = MibScalar
airPASetpointTempF = _AirPASetpointTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 3),
    _AirPASetpointTempF_Type()
)
airPASetpointTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPASetpointTempF.setStatus("mandatory")
_AirPASetpointTempC_Type = Integer32
_AirPASetpointTempC_Object = MibScalar
airPASetpointTempC = _AirPASetpointTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 4),
    _AirPASetpointTempC_Type()
)
airPASetpointTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPASetpointTempC.setStatus("mandatory")


class _AirPABlowerSpeed_Type(Integer32):
    """Custom type airPABlowerSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("speedHIGH", 2),
          ("speedLOW", 1))
    )


_AirPABlowerSpeed_Type.__name__ = "Integer32"
_AirPABlowerSpeed_Object = MibScalar
airPABlowerSpeed = _AirPABlowerSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 5),
    _AirPABlowerSpeed_Type()
)
airPABlowerSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPABlowerSpeed.setStatus("mandatory")


class _AirPACompressor_Type(Integer32):
    """Custom type airPACompressor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusOFF", 2),
          ("statusON", 1))
    )


_AirPACompressor_Type.__name__ = "Integer32"
_AirPACompressor_Object = MibScalar
airPACompressor = _AirPACompressor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 6),
    _AirPACompressor_Type()
)
airPACompressor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPACompressor.setStatus("mandatory")


class _AirPACondenserFan_Type(Integer32):
    """Custom type airPACondenserFan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusOFF", 2),
          ("statusON", 1))
    )


_AirPACondenserFan_Type.__name__ = "Integer32"
_AirPACondenserFan_Object = MibScalar
airPACondenserFan = _AirPACondenserFan_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 7),
    _AirPACondenserFan_Type()
)
airPACondenserFan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPACondenserFan.setStatus("mandatory")


class _AirPACondensatePump_Type(Integer32):
    """Custom type airPACondensatePump based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("statusOFF", 2),
          ("statusON", 1))
    )


_AirPACondensatePump_Type.__name__ = "Integer32"
_AirPACondensatePump_Object = MibScalar
airPACondensatePump = _AirPACondensatePump_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 8),
    _AirPACondensatePump_Type()
)
airPACondensatePump.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPACondensatePump.setStatus("mandatory")
_AirPASupplyTempF_Type = Integer32
_AirPASupplyTempF_Object = MibScalar
airPASupplyTempF = _AirPASupplyTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 9),
    _AirPASupplyTempF_Type()
)
airPASupplyTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPASupplyTempF.setStatus("mandatory")
_AirPASupplyTempC_Type = Integer32
_AirPASupplyTempC_Object = MibScalar
airPASupplyTempC = _AirPASupplyTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 10),
    _AirPASupplyTempC_Type()
)
airPASupplyTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPASupplyTempC.setStatus("mandatory")
_AirPAReturnTempF_Type = Integer32
_AirPAReturnTempF_Object = MibScalar
airPAReturnTempF = _AirPAReturnTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 11),
    _AirPAReturnTempF_Type()
)
airPAReturnTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPAReturnTempF.setStatus("mandatory")
_AirPAReturnTempC_Type = Integer32
_AirPAReturnTempC_Object = MibScalar
airPAReturnTempC = _AirPAReturnTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 12),
    _AirPAReturnTempC_Type()
)
airPAReturnTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPAReturnTempC.setStatus("mandatory")
_AirPARemoteTempF_Type = Integer32
_AirPARemoteTempF_Object = MibScalar
airPARemoteTempF = _AirPARemoteTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 13),
    _AirPARemoteTempF_Type()
)
airPARemoteTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPARemoteTempF.setStatus("mandatory")
_AirPARemoteTempC_Type = Integer32
_AirPARemoteTempC_Object = MibScalar
airPARemoteTempC = _AirPARemoteTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 14),
    _AirPARemoteTempC_Type()
)
airPARemoteTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPARemoteTempC.setStatus("mandatory")
_AirPARemoteHumidity_Type = Integer32
_AirPARemoteHumidity_Object = MibScalar
airPARemoteHumidity = _AirPARemoteHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 2, 2, 15),
    _AirPARemoteHumidity_Type()
)
airPARemoteHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airPARemoteHumidity.setStatus("mandatory")
_AirIR_ObjectIdentity = ObjectIdentity
airIR = _AirIR_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3)
)
_AirIRAlarms_ObjectIdentity = ObjectIdentity
airIRAlarms = _AirIRAlarms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1)
)
_AirIRAlarmConditionsTableSize_Type = Integer32
_AirIRAlarmConditionsTableSize_Object = MibScalar
airIRAlarmConditionsTableSize = _AirIRAlarmConditionsTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 1),
    _AirIRAlarmConditionsTableSize_Type()
)
airIRAlarmConditionsTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRAlarmConditionsTableSize.setStatus("mandatory")
_AirIRAlarmConditionsTable_Object = MibTable
airIRAlarmConditionsTable = _AirIRAlarmConditionsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2)
)
if mibBuilder.loadTexts:
    airIRAlarmConditionsTable.setStatus("mandatory")
_AirIRAlarmConditionsEntry_Object = MibTableRow
airIRAlarmConditionsEntry = _AirIRAlarmConditionsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1)
)
airIRAlarmConditionsEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRAlarmConditionsIndex"),
)
if mibBuilder.loadTexts:
    airIRAlarmConditionsEntry.setStatus("mandatory")
_AirIRAlarmConditionsIndex_Type = Integer32
_AirIRAlarmConditionsIndex_Object = MibTableColumn
airIRAlarmConditionsIndex = _AirIRAlarmConditionsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 1),
    _AirIRAlarmConditionsIndex_Type()
)
airIRAlarmConditionsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRAlarmConditionsIndex.setStatus("mandatory")
_AirIREventCode_Type = Integer32
_AirIREventCode_Object = MibTableColumn
airIREventCode = _AirIREventCode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 2),
    _AirIREventCode_Type()
)
airIREventCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIREventCode.setStatus("mandatory")


class _AirIRAlarmDescription_Type(DisplayString):
    """Custom type airIRAlarmDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_AirIRAlarmDescription_Type.__name__ = "DisplayString"
_AirIRAlarmDescription_Object = MibTableColumn
airIRAlarmDescription = _AirIRAlarmDescription_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 1, 2, 1, 3),
    _AirIRAlarmDescription_Type()
)
airIRAlarmDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRAlarmDescription.setStatus("mandatory")
_AirIRRC_ObjectIdentity = ObjectIdentity
airIRRC = _AirIRRC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2)
)
_AirIRRCGroup_ObjectIdentity = ObjectIdentity
airIRRCGroup = _AirIRRCGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1)
)
_AirIRRCGroupStatus_ObjectIdentity = ObjectIdentity
airIRRCGroupStatus = _AirIRRCGroupStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1)
)
_AirIRRCGroupStatusCoolOutput_Type = Integer32
_AirIRRCGroupStatusCoolOutput_Object = MibScalar
airIRRCGroupStatusCoolOutput = _AirIRRCGroupStatusCoolOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 1),
    _AirIRRCGroupStatusCoolOutput_Type()
)
airIRRCGroupStatusCoolOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCGroupStatusCoolOutput.setStatus("mandatory")
_AirIRRCGroupStatusCoolDemand_Type = Integer32
_AirIRRCGroupStatusCoolDemand_Object = MibScalar
airIRRCGroupStatusCoolDemand = _AirIRRCGroupStatusCoolDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 2),
    _AirIRRCGroupStatusCoolDemand_Type()
)
airIRRCGroupStatusCoolDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCGroupStatusCoolDemand.setStatus("mandatory")
_AirIRRCGroupStatusAirFlowUS_Type = Integer32
_AirIRRCGroupStatusAirFlowUS_Object = MibScalar
airIRRCGroupStatusAirFlowUS = _AirIRRCGroupStatusAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 3),
    _AirIRRCGroupStatusAirFlowUS_Type()
)
airIRRCGroupStatusAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCGroupStatusAirFlowUS.setStatus("mandatory")
_AirIRRCGroupStatusAirFlowMetric_Type = Integer32
_AirIRRCGroupStatusAirFlowMetric_Object = MibScalar
airIRRCGroupStatusAirFlowMetric = _AirIRRCGroupStatusAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 4),
    _AirIRRCGroupStatusAirFlowMetric_Type()
)
airIRRCGroupStatusAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCGroupStatusAirFlowMetric.setStatus("mandatory")
_AirIRRCGroupStatusMaxRackInletTempUS_Type = Integer32
_AirIRRCGroupStatusMaxRackInletTempUS_Object = MibScalar
airIRRCGroupStatusMaxRackInletTempUS = _AirIRRCGroupStatusMaxRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 5),
    _AirIRRCGroupStatusMaxRackInletTempUS_Type()
)
airIRRCGroupStatusMaxRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCGroupStatusMaxRackInletTempUS.setStatus("mandatory")
_AirIRRCGroupStatusMaxRackInletTempMetric_Type = Integer32
_AirIRRCGroupStatusMaxRackInletTempMetric_Object = MibScalar
airIRRCGroupStatusMaxRackInletTempMetric = _AirIRRCGroupStatusMaxRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 6),
    _AirIRRCGroupStatusMaxRackInletTempMetric_Type()
)
airIRRCGroupStatusMaxRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCGroupStatusMaxRackInletTempMetric.setStatus("mandatory")
_AirIRRCGroupStatusMinRackInletTempUS_Type = Integer32
_AirIRRCGroupStatusMinRackInletTempUS_Object = MibScalar
airIRRCGroupStatusMinRackInletTempUS = _AirIRRCGroupStatusMinRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 7),
    _AirIRRCGroupStatusMinRackInletTempUS_Type()
)
airIRRCGroupStatusMinRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCGroupStatusMinRackInletTempUS.setStatus("mandatory")
_AirIRRCGroupStatusMinRackInletTempMetric_Type = Integer32
_AirIRRCGroupStatusMinRackInletTempMetric_Object = MibScalar
airIRRCGroupStatusMinRackInletTempMetric = _AirIRRCGroupStatusMinRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 1, 8),
    _AirIRRCGroupStatusMinRackInletTempMetric_Type()
)
airIRRCGroupStatusMinRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCGroupStatusMinRackInletTempMetric.setStatus("mandatory")
_AirIRRCGroupSetpoints_ObjectIdentity = ObjectIdentity
airIRRCGroupSetpoints = _AirIRRCGroupSetpoints_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2)
)
_AirIRRCGroupSetpointsCoolUS_Type = Integer32
_AirIRRCGroupSetpointsCoolUS_Object = MibScalar
airIRRCGroupSetpointsCoolUS = _AirIRRCGroupSetpointsCoolUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 1),
    _AirIRRCGroupSetpointsCoolUS_Type()
)
airIRRCGroupSetpointsCoolUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupSetpointsCoolUS.setStatus("mandatory")
_AirIRRCGroupSetpointsCoolMetric_Type = Integer32
_AirIRRCGroupSetpointsCoolMetric_Object = MibScalar
airIRRCGroupSetpointsCoolMetric = _AirIRRCGroupSetpointsCoolMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 2),
    _AirIRRCGroupSetpointsCoolMetric_Type()
)
airIRRCGroupSetpointsCoolMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupSetpointsCoolMetric.setStatus("mandatory")
_AirIRRCGroupSetpointsSupplyAirUS_Type = Integer32
_AirIRRCGroupSetpointsSupplyAirUS_Object = MibScalar
airIRRCGroupSetpointsSupplyAirUS = _AirIRRCGroupSetpointsSupplyAirUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 3),
    _AirIRRCGroupSetpointsSupplyAirUS_Type()
)
airIRRCGroupSetpointsSupplyAirUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupSetpointsSupplyAirUS.setStatus("mandatory")
_AirIRRCGroupSetpointsSupplyAirMetric_Type = Integer32
_AirIRRCGroupSetpointsSupplyAirMetric_Object = MibScalar
airIRRCGroupSetpointsSupplyAirMetric = _AirIRRCGroupSetpointsSupplyAirMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 4),
    _AirIRRCGroupSetpointsSupplyAirMetric_Type()
)
airIRRCGroupSetpointsSupplyAirMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupSetpointsSupplyAirMetric.setStatus("mandatory")


class _AirIRRCGroupSetpointsFanSpeedPreference_Type(Integer32):
    """Custom type airIRRCGroupSetpointsFanSpeedPreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("high", 5),
          ("low", 1),
          ("med", 3),
          ("med-high", 4),
          ("med-low", 2))
    )


_AirIRRCGroupSetpointsFanSpeedPreference_Type.__name__ = "Integer32"
_AirIRRCGroupSetpointsFanSpeedPreference_Object = MibScalar
airIRRCGroupSetpointsFanSpeedPreference = _AirIRRCGroupSetpointsFanSpeedPreference_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 5),
    _AirIRRCGroupSetpointsFanSpeedPreference_Type()
)
airIRRCGroupSetpointsFanSpeedPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupSetpointsFanSpeedPreference.setStatus("mandatory")


class _AirIRRCGroupSetpointsFanSpeedControl_Type(Integer32):
    """Custom type airIRRCGroupSetpointsFanSpeedControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("manual", 2))
    )


_AirIRRCGroupSetpointsFanSpeedControl_Type.__name__ = "Integer32"
_AirIRRCGroupSetpointsFanSpeedControl_Object = MibScalar
airIRRCGroupSetpointsFanSpeedControl = _AirIRRCGroupSetpointsFanSpeedControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 2, 6),
    _AirIRRCGroupSetpointsFanSpeedControl_Type()
)
airIRRCGroupSetpointsFanSpeedControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupSetpointsFanSpeedControl.setStatus("mandatory")
_AirIRRCGroupConfig_ObjectIdentity = ObjectIdentity
airIRRCGroupConfig = _AirIRRCGroupConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3)
)
_AirIRRCGroupConfigNumberofCoolingUnits_Type = Integer32
_AirIRRCGroupConfigNumberofCoolingUnits_Object = MibScalar
airIRRCGroupConfigNumberofCoolingUnits = _AirIRRCGroupConfigNumberofCoolingUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 1),
    _AirIRRCGroupConfigNumberofCoolingUnits_Type()
)
airIRRCGroupConfigNumberofCoolingUnits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupConfigNumberofCoolingUnits.setStatus("mandatory")


class _AirIRRCGroupConfigConfigurationType_Type(Integer32):
    """Custom type airIRRCGroupConfigConfigurationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hacs", 2),
          ("in-row", 3),
          ("racs", 1))
    )


_AirIRRCGroupConfigConfigurationType_Type.__name__ = "Integer32"
_AirIRRCGroupConfigConfigurationType_Object = MibScalar
airIRRCGroupConfigConfigurationType = _AirIRRCGroupConfigConfigurationType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 2),
    _AirIRRCGroupConfigConfigurationType_Type()
)
airIRRCGroupConfigConfigurationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupConfigConfigurationType.setStatus("mandatory")
_AirIRRCGroupConfigPctGlycol_Type = Integer32
_AirIRRCGroupConfigPctGlycol_Object = MibScalar
airIRRCGroupConfigPctGlycol = _AirIRRCGroupConfigPctGlycol_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 3),
    _AirIRRCGroupConfigPctGlycol_Type()
)
airIRRCGroupConfigPctGlycol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupConfigPctGlycol.setStatus("mandatory")
_AirIRRCGroupConfigCoolGainP_Type = Integer32
_AirIRRCGroupConfigCoolGainP_Object = MibScalar
airIRRCGroupConfigCoolGainP = _AirIRRCGroupConfigCoolGainP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 4),
    _AirIRRCGroupConfigCoolGainP_Type()
)
airIRRCGroupConfigCoolGainP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupConfigCoolGainP.setStatus("mandatory")
_AirIRRCGroupConfigCoolResetRateI_Type = Integer32
_AirIRRCGroupConfigCoolResetRateI_Object = MibScalar
airIRRCGroupConfigCoolResetRateI = _AirIRRCGroupConfigCoolResetRateI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 5),
    _AirIRRCGroupConfigCoolResetRateI_Type()
)
airIRRCGroupConfigCoolResetRateI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupConfigCoolResetRateI.setStatus("mandatory")
_AirIRRCGroupConfigCoolDerivativeD_Type = Integer32
_AirIRRCGroupConfigCoolDerivativeD_Object = MibScalar
airIRRCGroupConfigCoolDerivativeD = _AirIRRCGroupConfigCoolDerivativeD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 6),
    _AirIRRCGroupConfigCoolDerivativeD_Type()
)
airIRRCGroupConfigCoolDerivativeD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupConfigCoolDerivativeD.setStatus("mandatory")
_AirIRRCGroupConfigMaxFanSpeed_Type = Integer32
_AirIRRCGroupConfigMaxFanSpeed_Object = MibScalar
airIRRCGroupConfigMaxFanSpeed = _AirIRRCGroupConfigMaxFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 1, 3, 7),
    _AirIRRCGroupConfigMaxFanSpeed_Type()
)
airIRRCGroupConfigMaxFanSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCGroupConfigMaxFanSpeed.setStatus("mandatory")
_AirIRRCUnit_ObjectIdentity = ObjectIdentity
airIRRCUnit = _AirIRRCUnit_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2)
)
_AirIRRCUnitIdent_ObjectIdentity = ObjectIdentity
airIRRCUnitIdent = _AirIRRCUnitIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1)
)
_AirIRRCUnitIdentID_Type = Integer32
_AirIRRCUnitIdentID_Object = MibScalar
airIRRCUnitIdentID = _AirIRRCUnitIdentID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 1),
    _AirIRRCUnitIdentID_Type()
)
airIRRCUnitIdentID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitIdentID.setStatus("mandatory")
_AirIRRCUnitIdentName_Type = DisplayString
_AirIRRCUnitIdentName_Object = MibScalar
airIRRCUnitIdentName = _AirIRRCUnitIdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 2),
    _AirIRRCUnitIdentName_Type()
)
airIRRCUnitIdentName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitIdentName.setStatus("mandatory")
_AirIRRCUnitIdentLocation_Type = DisplayString
_AirIRRCUnitIdentLocation_Object = MibScalar
airIRRCUnitIdentLocation = _AirIRRCUnitIdentLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 3),
    _AirIRRCUnitIdentLocation_Type()
)
airIRRCUnitIdentLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitIdentLocation.setStatus("mandatory")
_AirIRRCUnitIdentModelNumber_Type = DisplayString
_AirIRRCUnitIdentModelNumber_Object = MibScalar
airIRRCUnitIdentModelNumber = _AirIRRCUnitIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 4),
    _AirIRRCUnitIdentModelNumber_Type()
)
airIRRCUnitIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitIdentModelNumber.setStatus("mandatory")
_AirIRRCUnitIdentSerialNumber_Type = DisplayString
_AirIRRCUnitIdentSerialNumber_Object = MibScalar
airIRRCUnitIdentSerialNumber = _AirIRRCUnitIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 5),
    _AirIRRCUnitIdentSerialNumber_Type()
)
airIRRCUnitIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitIdentSerialNumber.setStatus("mandatory")
_AirIRRCUnitIdentFirmwareRevision_Type = DisplayString
_AirIRRCUnitIdentFirmwareRevision_Object = MibScalar
airIRRCUnitIdentFirmwareRevision = _AirIRRCUnitIdentFirmwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 6),
    _AirIRRCUnitIdentFirmwareRevision_Type()
)
airIRRCUnitIdentFirmwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitIdentFirmwareRevision.setStatus("mandatory")
_AirIRRCUnitIdentHardwareRevision_Type = DisplayString
_AirIRRCUnitIdentHardwareRevision_Object = MibScalar
airIRRCUnitIdentHardwareRevision = _AirIRRCUnitIdentHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 7),
    _AirIRRCUnitIdentHardwareRevision_Type()
)
airIRRCUnitIdentHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitIdentHardwareRevision.setStatus("mandatory")
_AirIRRCUnitIdentManufactureDate_Type = DisplayString
_AirIRRCUnitIdentManufactureDate_Object = MibScalar
airIRRCUnitIdentManufactureDate = _AirIRRCUnitIdentManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 1, 8),
    _AirIRRCUnitIdentManufactureDate_Type()
)
airIRRCUnitIdentManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitIdentManufactureDate.setStatus("mandatory")
_AirIRRCUnitStatus_ObjectIdentity = ObjectIdentity
airIRRCUnitStatus = _AirIRRCUnitStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2)
)


class _AirIRRCUnitStatusOperateMode_Type(Integer32):
    """Custom type airIRRCUnitStatusOperateMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("idle", 3),
          ("on", 2),
          ("standby", 1))
    )


_AirIRRCUnitStatusOperateMode_Type.__name__ = "Integer32"
_AirIRRCUnitStatusOperateMode_Object = MibScalar
airIRRCUnitStatusOperateMode = _AirIRRCUnitStatusOperateMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 1),
    _AirIRRCUnitStatusOperateMode_Type()
)
airIRRCUnitStatusOperateMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusOperateMode.setStatus("mandatory")
_AirIRRCUnitStatusCoolOutput_Type = Integer32
_AirIRRCUnitStatusCoolOutput_Object = MibScalar
airIRRCUnitStatusCoolOutput = _AirIRRCUnitStatusCoolOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 2),
    _AirIRRCUnitStatusCoolOutput_Type()
)
airIRRCUnitStatusCoolOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusCoolOutput.setStatus("mandatory")
_AirIRRCUnitStatusCoolDemand_Type = Integer32
_AirIRRCUnitStatusCoolDemand_Object = MibScalar
airIRRCUnitStatusCoolDemand = _AirIRRCUnitStatusCoolDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 3),
    _AirIRRCUnitStatusCoolDemand_Type()
)
airIRRCUnitStatusCoolDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusCoolDemand.setStatus("mandatory")
_AirIRRCUnitStatusAirFlowUS_Type = Integer32
_AirIRRCUnitStatusAirFlowUS_Object = MibScalar
airIRRCUnitStatusAirFlowUS = _AirIRRCUnitStatusAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 4),
    _AirIRRCUnitStatusAirFlowUS_Type()
)
airIRRCUnitStatusAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusAirFlowUS.setStatus("mandatory")
_AirIRRCUnitStatusAirFlowMetric_Type = Integer32
_AirIRRCUnitStatusAirFlowMetric_Object = MibScalar
airIRRCUnitStatusAirFlowMetric = _AirIRRCUnitStatusAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 5),
    _AirIRRCUnitStatusAirFlowMetric_Type()
)
airIRRCUnitStatusAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusAirFlowMetric.setStatus("mandatory")
_AirIRRCUnitStatusRackInletTempUS_Type = Integer32
_AirIRRCUnitStatusRackInletTempUS_Object = MibScalar
airIRRCUnitStatusRackInletTempUS = _AirIRRCUnitStatusRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 6),
    _AirIRRCUnitStatusRackInletTempUS_Type()
)
airIRRCUnitStatusRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusRackInletTempUS.setStatus("mandatory")
_AirIRRCUnitStatusRackInletTempMetric_Type = Integer32
_AirIRRCUnitStatusRackInletTempMetric_Object = MibScalar
airIRRCUnitStatusRackInletTempMetric = _AirIRRCUnitStatusRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 7),
    _AirIRRCUnitStatusRackInletTempMetric_Type()
)
airIRRCUnitStatusRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusRackInletTempMetric.setStatus("mandatory")
_AirIRRCUnitStatusSupplyAirTempUS_Type = Integer32
_AirIRRCUnitStatusSupplyAirTempUS_Object = MibScalar
airIRRCUnitStatusSupplyAirTempUS = _AirIRRCUnitStatusSupplyAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 8),
    _AirIRRCUnitStatusSupplyAirTempUS_Type()
)
airIRRCUnitStatusSupplyAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusSupplyAirTempUS.setStatus("mandatory")
_AirIRRCUnitStatusSupplyAirTempMetric_Type = Integer32
_AirIRRCUnitStatusSupplyAirTempMetric_Object = MibScalar
airIRRCUnitStatusSupplyAirTempMetric = _AirIRRCUnitStatusSupplyAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 9),
    _AirIRRCUnitStatusSupplyAirTempMetric_Type()
)
airIRRCUnitStatusSupplyAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusSupplyAirTempMetric.setStatus("mandatory")
_AirIRRCUnitStatusReturnAirTempUS_Type = Integer32
_AirIRRCUnitStatusReturnAirTempUS_Object = MibScalar
airIRRCUnitStatusReturnAirTempUS = _AirIRRCUnitStatusReturnAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 10),
    _AirIRRCUnitStatusReturnAirTempUS_Type()
)
airIRRCUnitStatusReturnAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusReturnAirTempUS.setStatus("mandatory")
_AirIRRCUnitStatusReturnAirTempMetric_Type = Integer32
_AirIRRCUnitStatusReturnAirTempMetric_Object = MibScalar
airIRRCUnitStatusReturnAirTempMetric = _AirIRRCUnitStatusReturnAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 11),
    _AirIRRCUnitStatusReturnAirTempMetric_Type()
)
airIRRCUnitStatusReturnAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusReturnAirTempMetric.setStatus("mandatory")
_AirIRRCUnitStatusContainmtDPUS_Type = Integer32
_AirIRRCUnitStatusContainmtDPUS_Object = MibScalar
airIRRCUnitStatusContainmtDPUS = _AirIRRCUnitStatusContainmtDPUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 12),
    _AirIRRCUnitStatusContainmtDPUS_Type()
)
airIRRCUnitStatusContainmtDPUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusContainmtDPUS.setStatus("mandatory")
_AirIRRCUnitStatusContainmtDPMetric_Type = Integer32
_AirIRRCUnitStatusContainmtDPMetric_Object = MibScalar
airIRRCUnitStatusContainmtDPMetric = _AirIRRCUnitStatusContainmtDPMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 13),
    _AirIRRCUnitStatusContainmtDPMetric_Type()
)
airIRRCUnitStatusContainmtDPMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusContainmtDPMetric.setStatus("mandatory")
_AirIRRCUnitStatusFilterDPUS_Type = Integer32
_AirIRRCUnitStatusFilterDPUS_Object = MibScalar
airIRRCUnitStatusFilterDPUS = _AirIRRCUnitStatusFilterDPUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 14),
    _AirIRRCUnitStatusFilterDPUS_Type()
)
airIRRCUnitStatusFilterDPUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusFilterDPUS.setStatus("mandatory")
_AirIRRCUnitStatusFilterDPMetric_Type = Integer32
_AirIRRCUnitStatusFilterDPMetric_Object = MibScalar
airIRRCUnitStatusFilterDPMetric = _AirIRRCUnitStatusFilterDPMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 15),
    _AirIRRCUnitStatusFilterDPMetric_Type()
)
airIRRCUnitStatusFilterDPMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusFilterDPMetric.setStatus("mandatory")
_AirIRRCUnitStatusFanSpeed_Type = Integer32
_AirIRRCUnitStatusFanSpeed_Object = MibScalar
airIRRCUnitStatusFanSpeed = _AirIRRCUnitStatusFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 16),
    _AirIRRCUnitStatusFanSpeed_Type()
)
airIRRCUnitStatusFanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusFanSpeed.setStatus("mandatory")


class _AirIRRCUnitStatusInputState_Type(Integer32):
    """Custom type airIRRCUnitStatusInputState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRRCUnitStatusInputState_Type.__name__ = "Integer32"
_AirIRRCUnitStatusInputState_Object = MibScalar
airIRRCUnitStatusInputState = _AirIRRCUnitStatusInputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 17),
    _AirIRRCUnitStatusInputState_Type()
)
airIRRCUnitStatusInputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusInputState.setStatus("mandatory")


class _AirIRRCUnitStatusOutputState_Type(Integer32):
    """Custom type airIRRCUnitStatusOutputState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRRCUnitStatusOutputState_Type.__name__ = "Integer32"
_AirIRRCUnitStatusOutputState_Object = MibScalar
airIRRCUnitStatusOutputState = _AirIRRCUnitStatusOutputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 18),
    _AirIRRCUnitStatusOutputState_Type()
)
airIRRCUnitStatusOutputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusOutputState.setStatus("mandatory")


class _AirIRRCUnitStatusActivePowerSource_Type(Integer32):
    """Custom type airIRRCUnitStatusActivePowerSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sourceA", 1),
          ("sourceB", 2))
    )


_AirIRRCUnitStatusActivePowerSource_Type.__name__ = "Integer32"
_AirIRRCUnitStatusActivePowerSource_Object = MibScalar
airIRRCUnitStatusActivePowerSource = _AirIRRCUnitStatusActivePowerSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 19),
    _AirIRRCUnitStatusActivePowerSource_Type()
)
airIRRCUnitStatusActivePowerSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusActivePowerSource.setStatus("mandatory")
_AirIRRCUnitStatusFluidValvePosition_Type = Integer32
_AirIRRCUnitStatusFluidValvePosition_Object = MibScalar
airIRRCUnitStatusFluidValvePosition = _AirIRRCUnitStatusFluidValvePosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 20),
    _AirIRRCUnitStatusFluidValvePosition_Type()
)
airIRRCUnitStatusFluidValvePosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusFluidValvePosition.setStatus("mandatory")
_AirIRRCUnitStatusFluidFlowUS_Type = Integer32
_AirIRRCUnitStatusFluidFlowUS_Object = MibScalar
airIRRCUnitStatusFluidFlowUS = _AirIRRCUnitStatusFluidFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 21),
    _AirIRRCUnitStatusFluidFlowUS_Type()
)
airIRRCUnitStatusFluidFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusFluidFlowUS.setStatus("mandatory")
_AirIRRCUnitStatusFluidFlowMetric_Type = Integer32
_AirIRRCUnitStatusFluidFlowMetric_Object = MibScalar
airIRRCUnitStatusFluidFlowMetric = _AirIRRCUnitStatusFluidFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 22),
    _AirIRRCUnitStatusFluidFlowMetric_Type()
)
airIRRCUnitStatusFluidFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusFluidFlowMetric.setStatus("mandatory")
_AirIRRCUnitStatusEnteringFluidTemperatureUS_Type = Integer32
_AirIRRCUnitStatusEnteringFluidTemperatureUS_Object = MibScalar
airIRRCUnitStatusEnteringFluidTemperatureUS = _AirIRRCUnitStatusEnteringFluidTemperatureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 23),
    _AirIRRCUnitStatusEnteringFluidTemperatureUS_Type()
)
airIRRCUnitStatusEnteringFluidTemperatureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusEnteringFluidTemperatureUS.setStatus("mandatory")
_AirIRRCUnitStatusEnteringFluidTemperatureMetric_Type = Integer32
_AirIRRCUnitStatusEnteringFluidTemperatureMetric_Object = MibScalar
airIRRCUnitStatusEnteringFluidTemperatureMetric = _AirIRRCUnitStatusEnteringFluidTemperatureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 24),
    _AirIRRCUnitStatusEnteringFluidTemperatureMetric_Type()
)
airIRRCUnitStatusEnteringFluidTemperatureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusEnteringFluidTemperatureMetric.setStatus("mandatory")
_AirIRRCUnitStatusLeavingFluidTemperatureUS_Type = Integer32
_AirIRRCUnitStatusLeavingFluidTemperatureUS_Object = MibScalar
airIRRCUnitStatusLeavingFluidTemperatureUS = _AirIRRCUnitStatusLeavingFluidTemperatureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 25),
    _AirIRRCUnitStatusLeavingFluidTemperatureUS_Type()
)
airIRRCUnitStatusLeavingFluidTemperatureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusLeavingFluidTemperatureUS.setStatus("mandatory")
_AirIRRCUnitStatusLeavingFluidTemperatureMetric_Type = Integer32
_AirIRRCUnitStatusLeavingFluidTemperatureMetric_Object = MibScalar
airIRRCUnitStatusLeavingFluidTemperatureMetric = _AirIRRCUnitStatusLeavingFluidTemperatureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 2, 26),
    _AirIRRCUnitStatusLeavingFluidTemperatureMetric_Type()
)
airIRRCUnitStatusLeavingFluidTemperatureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitStatusLeavingFluidTemperatureMetric.setStatus("mandatory")
_AirIRRCUnitRunHours_ObjectIdentity = ObjectIdentity
airIRRCUnitRunHours = _AirIRRCUnitRunHours_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3)
)
_AirIRRCUnitRunHoursAirFilter_Type = Integer32
_AirIRRCUnitRunHoursAirFilter_Object = MibScalar
airIRRCUnitRunHoursAirFilter = _AirIRRCUnitRunHoursAirFilter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 1),
    _AirIRRCUnitRunHoursAirFilter_Type()
)
airIRRCUnitRunHoursAirFilter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitRunHoursAirFilter.setStatus("mandatory")
_AirIRRCUnitRunHoursFan1_Type = Integer32
_AirIRRCUnitRunHoursFan1_Object = MibScalar
airIRRCUnitRunHoursFan1 = _AirIRRCUnitRunHoursFan1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 2),
    _AirIRRCUnitRunHoursFan1_Type()
)
airIRRCUnitRunHoursFan1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitRunHoursFan1.setStatus("mandatory")
_AirIRRCUnitRunHoursFan2_Type = Integer32
_AirIRRCUnitRunHoursFan2_Object = MibScalar
airIRRCUnitRunHoursFan2 = _AirIRRCUnitRunHoursFan2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 3),
    _AirIRRCUnitRunHoursFan2_Type()
)
airIRRCUnitRunHoursFan2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitRunHoursFan2.setStatus("mandatory")
_AirIRRCUnitRunHoursFan3_Type = Integer32
_AirIRRCUnitRunHoursFan3_Object = MibScalar
airIRRCUnitRunHoursFan3 = _AirIRRCUnitRunHoursFan3_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 4),
    _AirIRRCUnitRunHoursFan3_Type()
)
airIRRCUnitRunHoursFan3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitRunHoursFan3.setStatus("mandatory")
_AirIRRCUnitRunHoursFan4_Type = Integer32
_AirIRRCUnitRunHoursFan4_Object = MibScalar
airIRRCUnitRunHoursFan4 = _AirIRRCUnitRunHoursFan4_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 5),
    _AirIRRCUnitRunHoursFan4_Type()
)
airIRRCUnitRunHoursFan4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitRunHoursFan4.setStatus("mandatory")
_AirIRRCUnitRunHoursFan5_Type = Integer32
_AirIRRCUnitRunHoursFan5_Object = MibScalar
airIRRCUnitRunHoursFan5 = _AirIRRCUnitRunHoursFan5_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 6),
    _AirIRRCUnitRunHoursFan5_Type()
)
airIRRCUnitRunHoursFan5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitRunHoursFan5.setStatus("mandatory")
_AirIRRCUnitRunHoursFan6_Type = Integer32
_AirIRRCUnitRunHoursFan6_Object = MibScalar
airIRRCUnitRunHoursFan6 = _AirIRRCUnitRunHoursFan6_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 7),
    _AirIRRCUnitRunHoursFan6_Type()
)
airIRRCUnitRunHoursFan6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitRunHoursFan6.setStatus("mandatory")
_AirIRRCUnitRunHoursFan7_Type = Integer32
_AirIRRCUnitRunHoursFan7_Object = MibScalar
airIRRCUnitRunHoursFan7 = _AirIRRCUnitRunHoursFan7_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 8),
    _AirIRRCUnitRunHoursFan7_Type()
)
airIRRCUnitRunHoursFan7.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitRunHoursFan7.setStatus("mandatory")
_AirIRRCUnitRunHoursFan8_Type = Integer32
_AirIRRCUnitRunHoursFan8_Object = MibScalar
airIRRCUnitRunHoursFan8 = _AirIRRCUnitRunHoursFan8_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 9),
    _AirIRRCUnitRunHoursFan8_Type()
)
airIRRCUnitRunHoursFan8.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitRunHoursFan8.setStatus("mandatory")
_AirIRRCUnitRunHoursFanPowerSupplyLeft_Type = Integer32
_AirIRRCUnitRunHoursFanPowerSupplyLeft_Object = MibScalar
airIRRCUnitRunHoursFanPowerSupplyLeft = _AirIRRCUnitRunHoursFanPowerSupplyLeft_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 10),
    _AirIRRCUnitRunHoursFanPowerSupplyLeft_Type()
)
airIRRCUnitRunHoursFanPowerSupplyLeft.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitRunHoursFanPowerSupplyLeft.setStatus("mandatory")
_AirIRRCUnitRunHoursFanPowerSupplyRight_Type = Integer32
_AirIRRCUnitRunHoursFanPowerSupplyRight_Object = MibScalar
airIRRCUnitRunHoursFanPowerSupplyRight = _AirIRRCUnitRunHoursFanPowerSupplyRight_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 11),
    _AirIRRCUnitRunHoursFanPowerSupplyRight_Type()
)
airIRRCUnitRunHoursFanPowerSupplyRight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitRunHoursFanPowerSupplyRight.setStatus("mandatory")
_AirIRRCUnitRunHoursCondensatePump_Type = Integer32
_AirIRRCUnitRunHoursCondensatePump_Object = MibScalar
airIRRCUnitRunHoursCondensatePump = _AirIRRCUnitRunHoursCondensatePump_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 3, 12),
    _AirIRRCUnitRunHoursCondensatePump_Type()
)
airIRRCUnitRunHoursCondensatePump.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRCUnitRunHoursCondensatePump.setStatus("mandatory")
_AirIRRCUnitServiceIntervals_ObjectIdentity = ObjectIdentity
airIRRCUnitServiceIntervals = _AirIRRCUnitServiceIntervals_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4)
)
_AirIRRCUnitServiceIntervalsAirFilter_Type = Integer32
_AirIRRCUnitServiceIntervalsAirFilter_Object = MibScalar
airIRRCUnitServiceIntervalsAirFilter = _AirIRRCUnitServiceIntervalsAirFilter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4, 1),
    _AirIRRCUnitServiceIntervalsAirFilter_Type()
)
airIRRCUnitServiceIntervalsAirFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitServiceIntervalsAirFilter.setStatus("mandatory")


class _AirIRRCUnitServiceIntervalsAirFilterAlarm_Type(Integer32):
    """Custom type airIRRCUnitServiceIntervalsAirFilterAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRCUnitServiceIntervalsAirFilterAlarm_Type.__name__ = "Integer32"
_AirIRRCUnitServiceIntervalsAirFilterAlarm_Object = MibScalar
airIRRCUnitServiceIntervalsAirFilterAlarm = _AirIRRCUnitServiceIntervalsAirFilterAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 4, 2),
    _AirIRRCUnitServiceIntervalsAirFilterAlarm_Type()
)
airIRRCUnitServiceIntervalsAirFilterAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitServiceIntervalsAirFilterAlarm.setStatus("mandatory")
_AirIRRCUnitThresholds_ObjectIdentity = ObjectIdentity
airIRRCUnitThresholds = _AirIRRCUnitThresholds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5)
)
_AirIRRCUnitThresholdsRackInletHighTempUS_Type = Integer32
_AirIRRCUnitThresholdsRackInletHighTempUS_Object = MibScalar
airIRRCUnitThresholdsRackInletHighTempUS = _AirIRRCUnitThresholdsRackInletHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 1),
    _AirIRRCUnitThresholdsRackInletHighTempUS_Type()
)
airIRRCUnitThresholdsRackInletHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitThresholdsRackInletHighTempUS.setStatus("mandatory")
_AirIRRCUnitThresholdsRackInletHighTempMetric_Type = Integer32
_AirIRRCUnitThresholdsRackInletHighTempMetric_Object = MibScalar
airIRRCUnitThresholdsRackInletHighTempMetric = _AirIRRCUnitThresholdsRackInletHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 2),
    _AirIRRCUnitThresholdsRackInletHighTempMetric_Type()
)
airIRRCUnitThresholdsRackInletHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitThresholdsRackInletHighTempMetric.setStatus("mandatory")
_AirIRRCUnitThresholdsSupplyAirHighTempUS_Type = Integer32
_AirIRRCUnitThresholdsSupplyAirHighTempUS_Object = MibScalar
airIRRCUnitThresholdsSupplyAirHighTempUS = _AirIRRCUnitThresholdsSupplyAirHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 3),
    _AirIRRCUnitThresholdsSupplyAirHighTempUS_Type()
)
airIRRCUnitThresholdsSupplyAirHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitThresholdsSupplyAirHighTempUS.setStatus("mandatory")
_AirIRRCUnitThresholdsSupplyAirHighTempMetric_Type = Integer32
_AirIRRCUnitThresholdsSupplyAirHighTempMetric_Object = MibScalar
airIRRCUnitThresholdsSupplyAirHighTempMetric = _AirIRRCUnitThresholdsSupplyAirHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 4),
    _AirIRRCUnitThresholdsSupplyAirHighTempMetric_Type()
)
airIRRCUnitThresholdsSupplyAirHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitThresholdsSupplyAirHighTempMetric.setStatus("mandatory")
_AirIRRCUnitThresholdsReturnAirHighTempUS_Type = Integer32
_AirIRRCUnitThresholdsReturnAirHighTempUS_Object = MibScalar
airIRRCUnitThresholdsReturnAirHighTempUS = _AirIRRCUnitThresholdsReturnAirHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 5),
    _AirIRRCUnitThresholdsReturnAirHighTempUS_Type()
)
airIRRCUnitThresholdsReturnAirHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitThresholdsReturnAirHighTempUS.setStatus("mandatory")
_AirIRRCUnitThresholdsReturnAirHighTempMetric_Type = Integer32
_AirIRRCUnitThresholdsReturnAirHighTempMetric_Object = MibScalar
airIRRCUnitThresholdsReturnAirHighTempMetric = _AirIRRCUnitThresholdsReturnAirHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 6),
    _AirIRRCUnitThresholdsReturnAirHighTempMetric_Type()
)
airIRRCUnitThresholdsReturnAirHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitThresholdsReturnAirHighTempMetric.setStatus("mandatory")
_AirIRRCUnitThresholdsEnteringFluidHighTempUS_Type = Integer32
_AirIRRCUnitThresholdsEnteringFluidHighTempUS_Object = MibScalar
airIRRCUnitThresholdsEnteringFluidHighTempUS = _AirIRRCUnitThresholdsEnteringFluidHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 7),
    _AirIRRCUnitThresholdsEnteringFluidHighTempUS_Type()
)
airIRRCUnitThresholdsEnteringFluidHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitThresholdsEnteringFluidHighTempUS.setStatus("mandatory")
_AirIRRCUnitThresholdsEnteringFluidHighTempMetric_Type = Integer32
_AirIRRCUnitThresholdsEnteringFluidHighTempMetric_Object = MibScalar
airIRRCUnitThresholdsEnteringFluidHighTempMetric = _AirIRRCUnitThresholdsEnteringFluidHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 5, 8),
    _AirIRRCUnitThresholdsEnteringFluidHighTempMetric_Type()
)
airIRRCUnitThresholdsEnteringFluidHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitThresholdsEnteringFluidHighTempMetric.setStatus("mandatory")
_AirIRRCUnitConfig_ObjectIdentity = ObjectIdentity
airIRRCUnitConfig = _AirIRRCUnitConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6)
)


class _AirIRRCUnitConfigCoolCapacity_Type(Integer32):
    """Custom type airIRRCUnitConfigCoolCapacity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("maximum", 2))
    )


_AirIRRCUnitConfigCoolCapacity_Type.__name__ = "Integer32"
_AirIRRCUnitConfigCoolCapacity_Object = MibScalar
airIRRCUnitConfigCoolCapacity = _AirIRRCUnitConfigCoolCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 1),
    _AirIRRCUnitConfigCoolCapacity_Type()
)
airIRRCUnitConfigCoolCapacity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitConfigCoolCapacity.setStatus("mandatory")
_AirIRRCUnitConfigStartupDelay_Type = Integer32
_AirIRRCUnitConfigStartupDelay_Object = MibScalar
airIRRCUnitConfigStartupDelay = _AirIRRCUnitConfigStartupDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 2),
    _AirIRRCUnitConfigStartupDelay_Type()
)
airIRRCUnitConfigStartupDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitConfigStartupDelay.setStatus("mandatory")


class _AirIRRCUnitConfigIdleOnLeakDetect_Type(Integer32):
    """Custom type airIRRCUnitConfigIdleOnLeakDetect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_AirIRRCUnitConfigIdleOnLeakDetect_Type.__name__ = "Integer32"
_AirIRRCUnitConfigIdleOnLeakDetect_Object = MibScalar
airIRRCUnitConfigIdleOnLeakDetect = _AirIRRCUnitConfigIdleOnLeakDetect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 3),
    _AirIRRCUnitConfigIdleOnLeakDetect_Type()
)
airIRRCUnitConfigIdleOnLeakDetect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitConfigIdleOnLeakDetect.setStatus("mandatory")


class _AirIRRCUnitConfigPowerSource_Type(Integer32):
    """Custom type airIRRCUnitConfigPowerSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("sourceA", 1),
          ("sourceAandB", 3),
          ("sourceB", 2))
    )


_AirIRRCUnitConfigPowerSource_Type.__name__ = "Integer32"
_AirIRRCUnitConfigPowerSource_Object = MibScalar
airIRRCUnitConfigPowerSource = _AirIRRCUnitConfigPowerSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 4),
    _AirIRRCUnitConfigPowerSource_Type()
)
airIRRCUnitConfigPowerSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitConfigPowerSource.setStatus("mandatory")


class _AirIRRCUnitConfigInputNormalState_Type(Integer32):
    """Custom type airIRRCUnitConfigInputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRRCUnitConfigInputNormalState_Type.__name__ = "Integer32"
_AirIRRCUnitConfigInputNormalState_Object = MibScalar
airIRRCUnitConfigInputNormalState = _AirIRRCUnitConfigInputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 5),
    _AirIRRCUnitConfigInputNormalState_Type()
)
airIRRCUnitConfigInputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitConfigInputNormalState.setStatus("mandatory")


class _AirIRRCUnitConfigOutputNormalState_Type(Integer32):
    """Custom type airIRRCUnitConfigOutputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRRCUnitConfigOutputNormalState_Type.__name__ = "Integer32"
_AirIRRCUnitConfigOutputNormalState_Object = MibScalar
airIRRCUnitConfigOutputNormalState = _AirIRRCUnitConfigOutputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 6),
    _AirIRRCUnitConfigOutputNormalState_Type()
)
airIRRCUnitConfigOutputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitConfigOutputNormalState.setStatus("mandatory")


class _AirIRRCUnitConfigOutputSource_Type(Integer32):
    """Custom type airIRRCUnitConfigOutputSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("anyAlarm", 1),
          ("criticalAlarm", 2))
    )


_AirIRRCUnitConfigOutputSource_Type.__name__ = "Integer32"
_AirIRRCUnitConfigOutputSource_Object = MibScalar
airIRRCUnitConfigOutputSource = _AirIRRCUnitConfigOutputSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 7),
    _AirIRRCUnitConfigOutputSource_Type()
)
airIRRCUnitConfigOutputSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitConfigOutputSource.setStatus("mandatory")


class _AirIRRCUnitConfigIdleOnCoolFail_Type(Integer32):
    """Custom type airIRRCUnitConfigIdleOnCoolFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_AirIRRCUnitConfigIdleOnCoolFail_Type.__name__ = "Integer32"
_AirIRRCUnitConfigIdleOnCoolFail_Object = MibScalar
airIRRCUnitConfigIdleOnCoolFail = _AirIRRCUnitConfigIdleOnCoolFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 2, 2, 6, 8),
    _AirIRRCUnitConfigIdleOnCoolFail_Type()
)
airIRRCUnitConfigIdleOnCoolFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRCUnitConfigIdleOnCoolFail.setStatus("mandatory")
_AirIRRP_ObjectIdentity = ObjectIdentity
airIRRP = _AirIRRP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3)
)
_AirIRRP100_ObjectIdentity = ObjectIdentity
airIRRP100 = _AirIRRP100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1)
)
_AirIRRP100Group_ObjectIdentity = ObjectIdentity
airIRRP100Group = _AirIRRP100Group_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1)
)
_AirIRRP100GroupStatus_ObjectIdentity = ObjectIdentity
airIRRP100GroupStatus = _AirIRRP100GroupStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1)
)
_AirIRRP100GroupStatusAirFlowUS_Type = Integer32
_AirIRRP100GroupStatusAirFlowUS_Object = MibScalar
airIRRP100GroupStatusAirFlowUS = _AirIRRP100GroupStatusAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 1),
    _AirIRRP100GroupStatusAirFlowUS_Type()
)
airIRRP100GroupStatusAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusAirFlowUS.setStatus("mandatory")
_AirIRRP100GroupStatusAirFlowMetric_Type = Integer32
_AirIRRP100GroupStatusAirFlowMetric_Object = MibScalar
airIRRP100GroupStatusAirFlowMetric = _AirIRRP100GroupStatusAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 2),
    _AirIRRP100GroupStatusAirFlowMetric_Type()
)
airIRRP100GroupStatusAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusAirFlowMetric.setStatus("mandatory")
_AirIRRP100GroupStatusMaxRackInletTempUS_Type = Integer32
_AirIRRP100GroupStatusMaxRackInletTempUS_Object = MibScalar
airIRRP100GroupStatusMaxRackInletTempUS = _AirIRRP100GroupStatusMaxRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 3),
    _AirIRRP100GroupStatusMaxRackInletTempUS_Type()
)
airIRRP100GroupStatusMaxRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusMaxRackInletTempUS.setStatus("mandatory")
_AirIRRP100GroupStatusMaxRackInletTempMetric_Type = Integer32
_AirIRRP100GroupStatusMaxRackInletTempMetric_Object = MibScalar
airIRRP100GroupStatusMaxRackInletTempMetric = _AirIRRP100GroupStatusMaxRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 4),
    _AirIRRP100GroupStatusMaxRackInletTempMetric_Type()
)
airIRRP100GroupStatusMaxRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusMaxRackInletTempMetric.setStatus("mandatory")
_AirIRRP100GroupStatusMinRackInletTempUS_Type = Integer32
_AirIRRP100GroupStatusMinRackInletTempUS_Object = MibScalar
airIRRP100GroupStatusMinRackInletTempUS = _AirIRRP100GroupStatusMinRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 5),
    _AirIRRP100GroupStatusMinRackInletTempUS_Type()
)
airIRRP100GroupStatusMinRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusMinRackInletTempUS.setStatus("mandatory")
_AirIRRP100GroupStatusMinRackInletTempMetric_Type = Integer32
_AirIRRP100GroupStatusMinRackInletTempMetric_Object = MibScalar
airIRRP100GroupStatusMinRackInletTempMetric = _AirIRRP100GroupStatusMinRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 6),
    _AirIRRP100GroupStatusMinRackInletTempMetric_Type()
)
airIRRP100GroupStatusMinRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusMinRackInletTempMetric.setStatus("mandatory")
_AirIRRP100GroupStatusCoolDemand_Type = Integer32
_AirIRRP100GroupStatusCoolDemand_Object = MibScalar
airIRRP100GroupStatusCoolDemand = _AirIRRP100GroupStatusCoolDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 7),
    _AirIRRP100GroupStatusCoolDemand_Type()
)
airIRRP100GroupStatusCoolDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusCoolDemand.setStatus("mandatory")
_AirIRRP100GroupStatusCoolOutput_Type = Integer32
_AirIRRP100GroupStatusCoolOutput_Object = MibScalar
airIRRP100GroupStatusCoolOutput = _AirIRRP100GroupStatusCoolOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 8),
    _AirIRRP100GroupStatusCoolOutput_Type()
)
airIRRP100GroupStatusCoolOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusCoolOutput.setStatus("mandatory")
_AirIRRP100GroupStatusHumidifyDemand_Type = Integer32
_AirIRRP100GroupStatusHumidifyDemand_Object = MibScalar
airIRRP100GroupStatusHumidifyDemand = _AirIRRP100GroupStatusHumidifyDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 9),
    _AirIRRP100GroupStatusHumidifyDemand_Type()
)
airIRRP100GroupStatusHumidifyDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusHumidifyDemand.setStatus("mandatory")
_AirIRRP100GroupStatusHumidifyOutput_Type = Integer32
_AirIRRP100GroupStatusHumidifyOutput_Object = MibScalar
airIRRP100GroupStatusHumidifyOutput = _AirIRRP100GroupStatusHumidifyOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 10),
    _AirIRRP100GroupStatusHumidifyOutput_Type()
)
airIRRP100GroupStatusHumidifyOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusHumidifyOutput.setStatus("mandatory")
_AirIRRP100GroupStatusDehumidifyDemand_Type = Integer32
_AirIRRP100GroupStatusDehumidifyDemand_Object = MibScalar
airIRRP100GroupStatusDehumidifyDemand = _AirIRRP100GroupStatusDehumidifyDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 11),
    _AirIRRP100GroupStatusDehumidifyDemand_Type()
)
airIRRP100GroupStatusDehumidifyDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusDehumidifyDemand.setStatus("mandatory")
_AirIRRP100GroupStatusDehumidifyOutput_Type = Integer32
_AirIRRP100GroupStatusDehumidifyOutput_Object = MibScalar
airIRRP100GroupStatusDehumidifyOutput = _AirIRRP100GroupStatusDehumidifyOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 12),
    _AirIRRP100GroupStatusDehumidifyOutput_Type()
)
airIRRP100GroupStatusDehumidifyOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusDehumidifyOutput.setStatus("mandatory")
_AirIRRP100GroupStatusReheatDemand_Type = Integer32
_AirIRRP100GroupStatusReheatDemand_Object = MibScalar
airIRRP100GroupStatusReheatDemand = _AirIRRP100GroupStatusReheatDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 13),
    _AirIRRP100GroupStatusReheatDemand_Type()
)
airIRRP100GroupStatusReheatDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusReheatDemand.setStatus("mandatory")
_AirIRRP100GroupStatusReheatOutput_Type = Integer32
_AirIRRP100GroupStatusReheatOutput_Object = MibScalar
airIRRP100GroupStatusReheatOutput = _AirIRRP100GroupStatusReheatOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 1, 14),
    _AirIRRP100GroupStatusReheatOutput_Type()
)
airIRRP100GroupStatusReheatOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100GroupStatusReheatOutput.setStatus("mandatory")
_AirIRRP100GroupSetpoints_ObjectIdentity = ObjectIdentity
airIRRP100GroupSetpoints = _AirIRRP100GroupSetpoints_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2)
)
_AirIRRP100GroupSetpointsCoolUS_Type = Integer32
_AirIRRP100GroupSetpointsCoolUS_Object = MibScalar
airIRRP100GroupSetpointsCoolUS = _AirIRRP100GroupSetpointsCoolUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 1),
    _AirIRRP100GroupSetpointsCoolUS_Type()
)
airIRRP100GroupSetpointsCoolUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupSetpointsCoolUS.setStatus("mandatory")
_AirIRRP100GroupSetpointsCoolMetric_Type = Integer32
_AirIRRP100GroupSetpointsCoolMetric_Object = MibScalar
airIRRP100GroupSetpointsCoolMetric = _AirIRRP100GroupSetpointsCoolMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 2),
    _AirIRRP100GroupSetpointsCoolMetric_Type()
)
airIRRP100GroupSetpointsCoolMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupSetpointsCoolMetric.setStatus("mandatory")
_AirIRRP100GroupSetpointsSupplyAirUS_Type = Integer32
_AirIRRP100GroupSetpointsSupplyAirUS_Object = MibScalar
airIRRP100GroupSetpointsSupplyAirUS = _AirIRRP100GroupSetpointsSupplyAirUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 3),
    _AirIRRP100GroupSetpointsSupplyAirUS_Type()
)
airIRRP100GroupSetpointsSupplyAirUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupSetpointsSupplyAirUS.setStatus("mandatory")
_AirIRRP100GroupSetpointsSupplyAirMetric_Type = Integer32
_AirIRRP100GroupSetpointsSupplyAirMetric_Object = MibScalar
airIRRP100GroupSetpointsSupplyAirMetric = _AirIRRP100GroupSetpointsSupplyAirMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 4),
    _AirIRRP100GroupSetpointsSupplyAirMetric_Type()
)
airIRRP100GroupSetpointsSupplyAirMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupSetpointsSupplyAirMetric.setStatus("mandatory")
_AirIRRP100GroupSetpointsHumidify_Type = Integer32
_AirIRRP100GroupSetpointsHumidify_Object = MibScalar
airIRRP100GroupSetpointsHumidify = _AirIRRP100GroupSetpointsHumidify_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 5),
    _AirIRRP100GroupSetpointsHumidify_Type()
)
airIRRP100GroupSetpointsHumidify.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupSetpointsHumidify.setStatus("mandatory")
_AirIRRP100GroupSetpointsDehumidify_Type = Integer32
_AirIRRP100GroupSetpointsDehumidify_Object = MibScalar
airIRRP100GroupSetpointsDehumidify = _AirIRRP100GroupSetpointsDehumidify_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 6),
    _AirIRRP100GroupSetpointsDehumidify_Type()
)
airIRRP100GroupSetpointsDehumidify.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupSetpointsDehumidify.setStatus("mandatory")
_AirIRRP100GroupSetpointsDehumidifyDeadband_Type = Integer32
_AirIRRP100GroupSetpointsDehumidifyDeadband_Object = MibScalar
airIRRP100GroupSetpointsDehumidifyDeadband = _AirIRRP100GroupSetpointsDehumidifyDeadband_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 7),
    _AirIRRP100GroupSetpointsDehumidifyDeadband_Type()
)
airIRRP100GroupSetpointsDehumidifyDeadband.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupSetpointsDehumidifyDeadband.setStatus("mandatory")
_AirIRRP100GroupSetpointsReheatUS_Type = Integer32
_AirIRRP100GroupSetpointsReheatUS_Object = MibScalar
airIRRP100GroupSetpointsReheatUS = _AirIRRP100GroupSetpointsReheatUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 8),
    _AirIRRP100GroupSetpointsReheatUS_Type()
)
airIRRP100GroupSetpointsReheatUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupSetpointsReheatUS.setStatus("mandatory")
_AirIRRP100GroupSetpointsReheatMetric_Type = Integer32
_AirIRRP100GroupSetpointsReheatMetric_Object = MibScalar
airIRRP100GroupSetpointsReheatMetric = _AirIRRP100GroupSetpointsReheatMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 9),
    _AirIRRP100GroupSetpointsReheatMetric_Type()
)
airIRRP100GroupSetpointsReheatMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupSetpointsReheatMetric.setStatus("mandatory")


class _AirIRRP100GroupSetpointsFanSpeedPreference_Type(Integer32):
    """Custom type airIRRP100GroupSetpointsFanSpeedPreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("high", 5),
          ("low", 1),
          ("med", 3),
          ("med-high", 4),
          ("med-low", 2))
    )


_AirIRRP100GroupSetpointsFanSpeedPreference_Type.__name__ = "Integer32"
_AirIRRP100GroupSetpointsFanSpeedPreference_Object = MibScalar
airIRRP100GroupSetpointsFanSpeedPreference = _AirIRRP100GroupSetpointsFanSpeedPreference_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 10),
    _AirIRRP100GroupSetpointsFanSpeedPreference_Type()
)
airIRRP100GroupSetpointsFanSpeedPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupSetpointsFanSpeedPreference.setStatus("mandatory")


class _AirIRRP100GroupSetpointsFanSpeedControl_Type(Integer32):
    """Custom type airIRRP100GroupSetpointsFanSpeedControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("manual", 2))
    )


_AirIRRP100GroupSetpointsFanSpeedControl_Type.__name__ = "Integer32"
_AirIRRP100GroupSetpointsFanSpeedControl_Object = MibScalar
airIRRP100GroupSetpointsFanSpeedControl = _AirIRRP100GroupSetpointsFanSpeedControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 2, 11),
    _AirIRRP100GroupSetpointsFanSpeedControl_Type()
)
airIRRP100GroupSetpointsFanSpeedControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupSetpointsFanSpeedControl.setStatus("mandatory")
_AirIRRP100GroupConfig_ObjectIdentity = ObjectIdentity
airIRRP100GroupConfig = _AirIRRP100GroupConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3)
)
_AirIRRP100GroupConfigNumberofCoolingUnits_Type = Integer32
_AirIRRP100GroupConfigNumberofCoolingUnits_Object = MibScalar
airIRRP100GroupConfigNumberofCoolingUnits = _AirIRRP100GroupConfigNumberofCoolingUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 1),
    _AirIRRP100GroupConfigNumberofCoolingUnits_Type()
)
airIRRP100GroupConfigNumberofCoolingUnits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupConfigNumberofCoolingUnits.setStatus("mandatory")


class _AirIRRP100GroupConfigConfigurationType_Type(Integer32):
    """Custom type airIRRP100GroupConfigConfigurationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hacs", 2),
          ("in-row", 3),
          ("racs", 1))
    )


_AirIRRP100GroupConfigConfigurationType_Type.__name__ = "Integer32"
_AirIRRP100GroupConfigConfigurationType_Object = MibScalar
airIRRP100GroupConfigConfigurationType = _AirIRRP100GroupConfigConfigurationType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 2),
    _AirIRRP100GroupConfigConfigurationType_Type()
)
airIRRP100GroupConfigConfigurationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupConfigConfigurationType.setStatus("mandatory")
_AirIRRP100GroupConfigCoolGainP_Type = Integer32
_AirIRRP100GroupConfigCoolGainP_Object = MibScalar
airIRRP100GroupConfigCoolGainP = _AirIRRP100GroupConfigCoolGainP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 3),
    _AirIRRP100GroupConfigCoolGainP_Type()
)
airIRRP100GroupConfigCoolGainP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupConfigCoolGainP.setStatus("mandatory")
_AirIRRP100GroupConfigCoolResetRateI_Type = Integer32
_AirIRRP100GroupConfigCoolResetRateI_Object = MibScalar
airIRRP100GroupConfigCoolResetRateI = _AirIRRP100GroupConfigCoolResetRateI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 4),
    _AirIRRP100GroupConfigCoolResetRateI_Type()
)
airIRRP100GroupConfigCoolResetRateI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupConfigCoolResetRateI.setStatus("mandatory")
_AirIRRP100GroupConfigCoolDerivativeD_Type = Integer32
_AirIRRP100GroupConfigCoolDerivativeD_Object = MibScalar
airIRRP100GroupConfigCoolDerivativeD = _AirIRRP100GroupConfigCoolDerivativeD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 5),
    _AirIRRP100GroupConfigCoolDerivativeD_Type()
)
airIRRP100GroupConfigCoolDerivativeD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupConfigCoolDerivativeD.setStatus("mandatory")
_AirIRRP100GroupConfigHumidifySensitivityBand_Type = Integer32
_AirIRRP100GroupConfigHumidifySensitivityBand_Object = MibScalar
airIRRP100GroupConfigHumidifySensitivityBand = _AirIRRP100GroupConfigHumidifySensitivityBand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 6),
    _AirIRRP100GroupConfigHumidifySensitivityBand_Type()
)
airIRRP100GroupConfigHumidifySensitivityBand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupConfigHumidifySensitivityBand.setStatus("mandatory")
_AirIRRP100GroupConfigReheatGainP_Type = Integer32
_AirIRRP100GroupConfigReheatGainP_Object = MibScalar
airIRRP100GroupConfigReheatGainP = _AirIRRP100GroupConfigReheatGainP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 7),
    _AirIRRP100GroupConfigReheatGainP_Type()
)
airIRRP100GroupConfigReheatGainP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupConfigReheatGainP.setStatus("mandatory")
_AirIRRP100GroupConfigReheatResetRateI_Type = Integer32
_AirIRRP100GroupConfigReheatResetRateI_Object = MibScalar
airIRRP100GroupConfigReheatResetRateI = _AirIRRP100GroupConfigReheatResetRateI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 8),
    _AirIRRP100GroupConfigReheatResetRateI_Type()
)
airIRRP100GroupConfigReheatResetRateI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupConfigReheatResetRateI.setStatus("mandatory")
_AirIRRP100GroupConfigReheatDerivativeD_Type = Integer32
_AirIRRP100GroupConfigReheatDerivativeD_Object = MibScalar
airIRRP100GroupConfigReheatDerivativeD = _AirIRRP100GroupConfigReheatDerivativeD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 1, 3, 9),
    _AirIRRP100GroupConfigReheatDerivativeD_Type()
)
airIRRP100GroupConfigReheatDerivativeD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100GroupConfigReheatDerivativeD.setStatus("mandatory")
_AirIRRP100Unit_ObjectIdentity = ObjectIdentity
airIRRP100Unit = _AirIRRP100Unit_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2)
)
_AirIRRP100UnitIdent_ObjectIdentity = ObjectIdentity
airIRRP100UnitIdent = _AirIRRP100UnitIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1)
)
_AirIRRP100UnitIdentID_Type = Integer32
_AirIRRP100UnitIdentID_Object = MibScalar
airIRRP100UnitIdentID = _AirIRRP100UnitIdentID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 1),
    _AirIRRP100UnitIdentID_Type()
)
airIRRP100UnitIdentID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitIdentID.setStatus("mandatory")
_AirIRRP100UnitIdentName_Type = DisplayString
_AirIRRP100UnitIdentName_Object = MibScalar
airIRRP100UnitIdentName = _AirIRRP100UnitIdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 2),
    _AirIRRP100UnitIdentName_Type()
)
airIRRP100UnitIdentName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitIdentName.setStatus("mandatory")
_AirIRRP100UnitIdentLocation_Type = DisplayString
_AirIRRP100UnitIdentLocation_Object = MibScalar
airIRRP100UnitIdentLocation = _AirIRRP100UnitIdentLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 3),
    _AirIRRP100UnitIdentLocation_Type()
)
airIRRP100UnitIdentLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitIdentLocation.setStatus("mandatory")
_AirIRRP100UnitIdentModelNumber_Type = DisplayString
_AirIRRP100UnitIdentModelNumber_Object = MibScalar
airIRRP100UnitIdentModelNumber = _AirIRRP100UnitIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 4),
    _AirIRRP100UnitIdentModelNumber_Type()
)
airIRRP100UnitIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitIdentModelNumber.setStatus("mandatory")
_AirIRRP100UnitIdentSerialNumber_Type = DisplayString
_AirIRRP100UnitIdentSerialNumber_Object = MibScalar
airIRRP100UnitIdentSerialNumber = _AirIRRP100UnitIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 5),
    _AirIRRP100UnitIdentSerialNumber_Type()
)
airIRRP100UnitIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitIdentSerialNumber.setStatus("mandatory")
_AirIRRP100UnitIdentFirmwareRevision_Type = DisplayString
_AirIRRP100UnitIdentFirmwareRevision_Object = MibScalar
airIRRP100UnitIdentFirmwareRevision = _AirIRRP100UnitIdentFirmwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 6),
    _AirIRRP100UnitIdentFirmwareRevision_Type()
)
airIRRP100UnitIdentFirmwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitIdentFirmwareRevision.setStatus("mandatory")
_AirIRRP100UnitIdentHardwareRevision_Type = DisplayString
_AirIRRP100UnitIdentHardwareRevision_Object = MibScalar
airIRRP100UnitIdentHardwareRevision = _AirIRRP100UnitIdentHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 7),
    _AirIRRP100UnitIdentHardwareRevision_Type()
)
airIRRP100UnitIdentHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitIdentHardwareRevision.setStatus("mandatory")
_AirIRRP100UnitIdentManufactureDate_Type = DisplayString
_AirIRRP100UnitIdentManufactureDate_Object = MibScalar
airIRRP100UnitIdentManufactureDate = _AirIRRP100UnitIdentManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 1, 8),
    _AirIRRP100UnitIdentManufactureDate_Type()
)
airIRRP100UnitIdentManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitIdentManufactureDate.setStatus("mandatory")
_AirIRRP100UnitStatus_ObjectIdentity = ObjectIdentity
airIRRP100UnitStatus = _AirIRRP100UnitStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2)
)


class _AirIRRP100UnitStatusOperateMode_Type(Integer32):
    """Custom type airIRRP100UnitStatusOperateMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("idle", 3),
          ("on", 2),
          ("standby", 1))
    )


_AirIRRP100UnitStatusOperateMode_Type.__name__ = "Integer32"
_AirIRRP100UnitStatusOperateMode_Object = MibScalar
airIRRP100UnitStatusOperateMode = _AirIRRP100UnitStatusOperateMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 1),
    _AirIRRP100UnitStatusOperateMode_Type()
)
airIRRP100UnitStatusOperateMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusOperateMode.setStatus("mandatory")
_AirIRRP100UnitStatusRackInletTempUS_Type = Integer32
_AirIRRP100UnitStatusRackInletTempUS_Object = MibScalar
airIRRP100UnitStatusRackInletTempUS = _AirIRRP100UnitStatusRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 2),
    _AirIRRP100UnitStatusRackInletTempUS_Type()
)
airIRRP100UnitStatusRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusRackInletTempUS.setStatus("mandatory")
_AirIRRP100UnitStatusRackInletTempMetric_Type = Integer32
_AirIRRP100UnitStatusRackInletTempMetric_Object = MibScalar
airIRRP100UnitStatusRackInletTempMetric = _AirIRRP100UnitStatusRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 3),
    _AirIRRP100UnitStatusRackInletTempMetric_Type()
)
airIRRP100UnitStatusRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusRackInletTempMetric.setStatus("mandatory")
_AirIRRP100UnitStatusSupplyAirTempUS_Type = Integer32
_AirIRRP100UnitStatusSupplyAirTempUS_Object = MibScalar
airIRRP100UnitStatusSupplyAirTempUS = _AirIRRP100UnitStatusSupplyAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 4),
    _AirIRRP100UnitStatusSupplyAirTempUS_Type()
)
airIRRP100UnitStatusSupplyAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusSupplyAirTempUS.setStatus("mandatory")
_AirIRRP100UnitStatusSupplyAirTempMetric_Type = Integer32
_AirIRRP100UnitStatusSupplyAirTempMetric_Object = MibScalar
airIRRP100UnitStatusSupplyAirTempMetric = _AirIRRP100UnitStatusSupplyAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 5),
    _AirIRRP100UnitStatusSupplyAirTempMetric_Type()
)
airIRRP100UnitStatusSupplyAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusSupplyAirTempMetric.setStatus("mandatory")
_AirIRRP100UnitStatusReturnAirTempUS_Type = Integer32
_AirIRRP100UnitStatusReturnAirTempUS_Object = MibScalar
airIRRP100UnitStatusReturnAirTempUS = _AirIRRP100UnitStatusReturnAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 6),
    _AirIRRP100UnitStatusReturnAirTempUS_Type()
)
airIRRP100UnitStatusReturnAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusReturnAirTempUS.setStatus("mandatory")
_AirIRRP100UnitStatusReturnAirTempMetric_Type = Integer32
_AirIRRP100UnitStatusReturnAirTempMetric_Object = MibScalar
airIRRP100UnitStatusReturnAirTempMetric = _AirIRRP100UnitStatusReturnAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 7),
    _AirIRRP100UnitStatusReturnAirTempMetric_Type()
)
airIRRP100UnitStatusReturnAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusReturnAirTempMetric.setStatus("mandatory")
_AirIRRP100UnitStatusSupplyHumidity_Type = Integer32
_AirIRRP100UnitStatusSupplyHumidity_Object = MibScalar
airIRRP100UnitStatusSupplyHumidity = _AirIRRP100UnitStatusSupplyHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 8),
    _AirIRRP100UnitStatusSupplyHumidity_Type()
)
airIRRP100UnitStatusSupplyHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusSupplyHumidity.setStatus("mandatory")
_AirIRRP100UnitStatusReturnHumidity_Type = Integer32
_AirIRRP100UnitStatusReturnHumidity_Object = MibScalar
airIRRP100UnitStatusReturnHumidity = _AirIRRP100UnitStatusReturnHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 9),
    _AirIRRP100UnitStatusReturnHumidity_Type()
)
airIRRP100UnitStatusReturnHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusReturnHumidity.setStatus("mandatory")
_AirIRRP100UnitStatusAirFlowUS_Type = Integer32
_AirIRRP100UnitStatusAirFlowUS_Object = MibScalar
airIRRP100UnitStatusAirFlowUS = _AirIRRP100UnitStatusAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 10),
    _AirIRRP100UnitStatusAirFlowUS_Type()
)
airIRRP100UnitStatusAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusAirFlowUS.setStatus("mandatory")
_AirIRRP100UnitStatusAirFlowMetric_Type = Integer32
_AirIRRP100UnitStatusAirFlowMetric_Object = MibScalar
airIRRP100UnitStatusAirFlowMetric = _AirIRRP100UnitStatusAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 11),
    _AirIRRP100UnitStatusAirFlowMetric_Type()
)
airIRRP100UnitStatusAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusAirFlowMetric.setStatus("mandatory")
_AirIRRP100UnitStatusFanSpeed_Type = Integer32
_AirIRRP100UnitStatusFanSpeed_Object = MibScalar
airIRRP100UnitStatusFanSpeed = _AirIRRP100UnitStatusFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 12),
    _AirIRRP100UnitStatusFanSpeed_Type()
)
airIRRP100UnitStatusFanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusFanSpeed.setStatus("mandatory")
_AirIRRP100UnitStatusCoolDemand_Type = Integer32
_AirIRRP100UnitStatusCoolDemand_Object = MibScalar
airIRRP100UnitStatusCoolDemand = _AirIRRP100UnitStatusCoolDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 13),
    _AirIRRP100UnitStatusCoolDemand_Type()
)
airIRRP100UnitStatusCoolDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCoolDemand.setStatus("mandatory")
_AirIRRP100UnitStatusCoolOutput_Type = Integer32
_AirIRRP100UnitStatusCoolOutput_Object = MibScalar
airIRRP100UnitStatusCoolOutput = _AirIRRP100UnitStatusCoolOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 14),
    _AirIRRP100UnitStatusCoolOutput_Type()
)
airIRRP100UnitStatusCoolOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCoolOutput.setStatus("mandatory")
_AirIRRP100UnitStatusHumidifyDemand_Type = Integer32
_AirIRRP100UnitStatusHumidifyDemand_Object = MibScalar
airIRRP100UnitStatusHumidifyDemand = _AirIRRP100UnitStatusHumidifyDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 15),
    _AirIRRP100UnitStatusHumidifyDemand_Type()
)
airIRRP100UnitStatusHumidifyDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusHumidifyDemand.setStatus("mandatory")
_AirIRRP100UnitStatusHumidifyOutput_Type = Integer32
_AirIRRP100UnitStatusHumidifyOutput_Object = MibScalar
airIRRP100UnitStatusHumidifyOutput = _AirIRRP100UnitStatusHumidifyOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 16),
    _AirIRRP100UnitStatusHumidifyOutput_Type()
)
airIRRP100UnitStatusHumidifyOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusHumidifyOutput.setStatus("mandatory")
_AirIRRP100UnitStatusDehumidifyDemand_Type = Integer32
_AirIRRP100UnitStatusDehumidifyDemand_Object = MibScalar
airIRRP100UnitStatusDehumidifyDemand = _AirIRRP100UnitStatusDehumidifyDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 17),
    _AirIRRP100UnitStatusDehumidifyDemand_Type()
)
airIRRP100UnitStatusDehumidifyDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusDehumidifyDemand.setStatus("mandatory")
_AirIRRP100UnitStatusDehumidifyOutput_Type = Integer32
_AirIRRP100UnitStatusDehumidifyOutput_Object = MibScalar
airIRRP100UnitStatusDehumidifyOutput = _AirIRRP100UnitStatusDehumidifyOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 18),
    _AirIRRP100UnitStatusDehumidifyOutput_Type()
)
airIRRP100UnitStatusDehumidifyOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusDehumidifyOutput.setStatus("mandatory")
_AirIRRP100UnitStatusReheatDemand_Type = Integer32
_AirIRRP100UnitStatusReheatDemand_Object = MibScalar
airIRRP100UnitStatusReheatDemand = _AirIRRP100UnitStatusReheatDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 19),
    _AirIRRP100UnitStatusReheatDemand_Type()
)
airIRRP100UnitStatusReheatDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusReheatDemand.setStatus("mandatory")
_AirIRRP100UnitStatusReheatOutput_Type = Integer32
_AirIRRP100UnitStatusReheatOutput_Object = MibScalar
airIRRP100UnitStatusReheatOutput = _AirIRRP100UnitStatusReheatOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 20),
    _AirIRRP100UnitStatusReheatOutput_Type()
)
airIRRP100UnitStatusReheatOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusReheatOutput.setStatus("mandatory")


class _AirIRRP100UnitStatusInputState_Type(Integer32):
    """Custom type airIRRP100UnitStatusInputState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRRP100UnitStatusInputState_Type.__name__ = "Integer32"
_AirIRRP100UnitStatusInputState_Object = MibScalar
airIRRP100UnitStatusInputState = _AirIRRP100UnitStatusInputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 21),
    _AirIRRP100UnitStatusInputState_Type()
)
airIRRP100UnitStatusInputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusInputState.setStatus("mandatory")


class _AirIRRP100UnitStatusOutputState_Type(Integer32):
    """Custom type airIRRP100UnitStatusOutputState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRRP100UnitStatusOutputState_Type.__name__ = "Integer32"
_AirIRRP100UnitStatusOutputState_Object = MibScalar
airIRRP100UnitStatusOutputState = _AirIRRP100UnitStatusOutputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 22),
    _AirIRRP100UnitStatusOutputState_Type()
)
airIRRP100UnitStatusOutputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusOutputState.setStatus("mandatory")
_AirIRRP100UnitStatusRackInletTemperature1US_Type = Integer32
_AirIRRP100UnitStatusRackInletTemperature1US_Object = MibScalar
airIRRP100UnitStatusRackInletTemperature1US = _AirIRRP100UnitStatusRackInletTemperature1US_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 23),
    _AirIRRP100UnitStatusRackInletTemperature1US_Type()
)
airIRRP100UnitStatusRackInletTemperature1US.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusRackInletTemperature1US.setStatus("mandatory")
_AirIRRP100UnitStatusRackInletTemperature1Metric_Type = Integer32
_AirIRRP100UnitStatusRackInletTemperature1Metric_Object = MibScalar
airIRRP100UnitStatusRackInletTemperature1Metric = _AirIRRP100UnitStatusRackInletTemperature1Metric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 24),
    _AirIRRP100UnitStatusRackInletTemperature1Metric_Type()
)
airIRRP100UnitStatusRackInletTemperature1Metric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusRackInletTemperature1Metric.setStatus("mandatory")
_AirIRRP100UnitStatusRackInletTemperature2US_Type = Integer32
_AirIRRP100UnitStatusRackInletTemperature2US_Object = MibScalar
airIRRP100UnitStatusRackInletTemperature2US = _AirIRRP100UnitStatusRackInletTemperature2US_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 25),
    _AirIRRP100UnitStatusRackInletTemperature2US_Type()
)
airIRRP100UnitStatusRackInletTemperature2US.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusRackInletTemperature2US.setStatus("mandatory")
_AirIRRP100UnitStatusRackInletTemperature2Metric_Type = Integer32
_AirIRRP100UnitStatusRackInletTemperature2Metric_Object = MibScalar
airIRRP100UnitStatusRackInletTemperature2Metric = _AirIRRP100UnitStatusRackInletTemperature2Metric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 26),
    _AirIRRP100UnitStatusRackInletTemperature2Metric_Type()
)
airIRRP100UnitStatusRackInletTemperature2Metric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusRackInletTemperature2Metric.setStatus("mandatory")
_AirIRRP100UnitStatusRackInletTemperature3US_Type = Integer32
_AirIRRP100UnitStatusRackInletTemperature3US_Object = MibScalar
airIRRP100UnitStatusRackInletTemperature3US = _AirIRRP100UnitStatusRackInletTemperature3US_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 27),
    _AirIRRP100UnitStatusRackInletTemperature3US_Type()
)
airIRRP100UnitStatusRackInletTemperature3US.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusRackInletTemperature3US.setStatus("mandatory")
_AirIRRP100UnitStatusRackInletTemperature3Metric_Type = Integer32
_AirIRRP100UnitStatusRackInletTemperature3Metric_Object = MibScalar
airIRRP100UnitStatusRackInletTemperature3Metric = _AirIRRP100UnitStatusRackInletTemperature3Metric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 28),
    _AirIRRP100UnitStatusRackInletTemperature3Metric_Type()
)
airIRRP100UnitStatusRackInletTemperature3Metric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusRackInletTemperature3Metric.setStatus("mandatory")
_AirIRRP100UnitStatusFilterDPUS_Type = Integer32
_AirIRRP100UnitStatusFilterDPUS_Object = MibScalar
airIRRP100UnitStatusFilterDPUS = _AirIRRP100UnitStatusFilterDPUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 29),
    _AirIRRP100UnitStatusFilterDPUS_Type()
)
airIRRP100UnitStatusFilterDPUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusFilterDPUS.setStatus("mandatory")
_AirIRRP100UnitStatusFilterDPMetric_Type = Integer32
_AirIRRP100UnitStatusFilterDPMetric_Object = MibScalar
airIRRP100UnitStatusFilterDPMetric = _AirIRRP100UnitStatusFilterDPMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 30),
    _AirIRRP100UnitStatusFilterDPMetric_Type()
)
airIRRP100UnitStatusFilterDPMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusFilterDPMetric.setStatus("mandatory")
_AirIRRP100UnitStatusContainmtDPUS_Type = Integer32
_AirIRRP100UnitStatusContainmtDPUS_Object = MibScalar
airIRRP100UnitStatusContainmtDPUS = _AirIRRP100UnitStatusContainmtDPUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 31),
    _AirIRRP100UnitStatusContainmtDPUS_Type()
)
airIRRP100UnitStatusContainmtDPUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusContainmtDPUS.setStatus("mandatory")
_AirIRRP100UnitStatusContainmtDPMetric_Type = Integer32
_AirIRRP100UnitStatusContainmtDPMetric_Object = MibScalar
airIRRP100UnitStatusContainmtDPMetric = _AirIRRP100UnitStatusContainmtDPMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 32),
    _AirIRRP100UnitStatusContainmtDPMetric_Type()
)
airIRRP100UnitStatusContainmtDPMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusContainmtDPMetric.setStatus("mandatory")
_AirIRRP100UnitStatusHumidifierCurrent_Type = Integer32
_AirIRRP100UnitStatusHumidifierCurrent_Object = MibScalar
airIRRP100UnitStatusHumidifierCurrent = _AirIRRP100UnitStatusHumidifierCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 33),
    _AirIRRP100UnitStatusHumidifierCurrent_Type()
)
airIRRP100UnitStatusHumidifierCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusHumidifierCurrent.setStatus("mandatory")
_AirIRRP100UnitStatusHumidifierWaterConductivity_Type = Integer32
_AirIRRP100UnitStatusHumidifierWaterConductivity_Object = MibScalar
airIRRP100UnitStatusHumidifierWaterConductivity = _AirIRRP100UnitStatusHumidifierWaterConductivity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 34),
    _AirIRRP100UnitStatusHumidifierWaterConductivity_Type()
)
airIRRP100UnitStatusHumidifierWaterConductivity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusHumidifierWaterConductivity.setStatus("mandatory")
_AirIRRP100UnitStatusCompressorDriveSpeed_Type = Integer32
_AirIRRP100UnitStatusCompressorDriveSpeed_Object = MibScalar
airIRRP100UnitStatusCompressorDriveSpeed = _AirIRRP100UnitStatusCompressorDriveSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 35),
    _AirIRRP100UnitStatusCompressorDriveSpeed_Type()
)
airIRRP100UnitStatusCompressorDriveSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCompressorDriveSpeed.setStatus("mandatory")
_AirIRRP100UnitStatusCompressorDrivePower_Type = Integer32
_AirIRRP100UnitStatusCompressorDrivePower_Object = MibScalar
airIRRP100UnitStatusCompressorDrivePower = _AirIRRP100UnitStatusCompressorDrivePower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 36),
    _AirIRRP100UnitStatusCompressorDrivePower_Type()
)
airIRRP100UnitStatusCompressorDrivePower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCompressorDrivePower.setStatus("mandatory")
_AirIRRP100UnitStatusCompressorDriveVoltage_Type = Integer32
_AirIRRP100UnitStatusCompressorDriveVoltage_Object = MibScalar
airIRRP100UnitStatusCompressorDriveVoltage = _AirIRRP100UnitStatusCompressorDriveVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 37),
    _AirIRRP100UnitStatusCompressorDriveVoltage_Type()
)
airIRRP100UnitStatusCompressorDriveVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCompressorDriveVoltage.setStatus("mandatory")
_AirIRRP100UnitStatusCompressorDriveCurrent_Type = Integer32
_AirIRRP100UnitStatusCompressorDriveCurrent_Object = MibScalar
airIRRP100UnitStatusCompressorDriveCurrent = _AirIRRP100UnitStatusCompressorDriveCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 38),
    _AirIRRP100UnitStatusCompressorDriveCurrent_Type()
)
airIRRP100UnitStatusCompressorDriveCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCompressorDriveCurrent.setStatus("mandatory")
_AirIRRP100UnitStatusCompressorDriveDCLinkVoltage_Type = Integer32
_AirIRRP100UnitStatusCompressorDriveDCLinkVoltage_Object = MibScalar
airIRRP100UnitStatusCompressorDriveDCLinkVoltage = _AirIRRP100UnitStatusCompressorDriveDCLinkVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 39),
    _AirIRRP100UnitStatusCompressorDriveDCLinkVoltage_Type()
)
airIRRP100UnitStatusCompressorDriveDCLinkVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCompressorDriveDCLinkVoltage.setStatus("mandatory")
_AirIRRP100UnitStatusCompressorDriveHeatSinkTempUS_Type = Integer32
_AirIRRP100UnitStatusCompressorDriveHeatSinkTempUS_Object = MibScalar
airIRRP100UnitStatusCompressorDriveHeatSinkTempUS = _AirIRRP100UnitStatusCompressorDriveHeatSinkTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 40),
    _AirIRRP100UnitStatusCompressorDriveHeatSinkTempUS_Type()
)
airIRRP100UnitStatusCompressorDriveHeatSinkTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCompressorDriveHeatSinkTempUS.setStatus("mandatory")
_AirIRRP100UnitStatusCompressorDriveHeatSinkTempMetric_Type = Integer32
_AirIRRP100UnitStatusCompressorDriveHeatSinkTempMetric_Object = MibScalar
airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric = _AirIRRP100UnitStatusCompressorDriveHeatSinkTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 41),
    _AirIRRP100UnitStatusCompressorDriveHeatSinkTempMetric_Type()
)
airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric.setStatus("mandatory")
_AirIRRP100UnitStatusCompressorDriveControlCardTempUS_Type = Integer32
_AirIRRP100UnitStatusCompressorDriveControlCardTempUS_Object = MibScalar
airIRRP100UnitStatusCompressorDriveControlCardTempUS = _AirIRRP100UnitStatusCompressorDriveControlCardTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 42),
    _AirIRRP100UnitStatusCompressorDriveControlCardTempUS_Type()
)
airIRRP100UnitStatusCompressorDriveControlCardTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCompressorDriveControlCardTempUS.setStatus("mandatory")
_AirIRRP100UnitStatusCompressorDriveControlCardTempMetric_Type = Integer32
_AirIRRP100UnitStatusCompressorDriveControlCardTempMetric_Object = MibScalar
airIRRP100UnitStatusCompressorDriveControlCardTempMetric = _AirIRRP100UnitStatusCompressorDriveControlCardTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 43),
    _AirIRRP100UnitStatusCompressorDriveControlCardTempMetric_Type()
)
airIRRP100UnitStatusCompressorDriveControlCardTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCompressorDriveControlCardTempMetric.setStatus("mandatory")
_AirIRRP100UnitStatusCompressorDriveWarningStatus_Type = Integer32
_AirIRRP100UnitStatusCompressorDriveWarningStatus_Object = MibScalar
airIRRP100UnitStatusCompressorDriveWarningStatus = _AirIRRP100UnitStatusCompressorDriveWarningStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 44),
    _AirIRRP100UnitStatusCompressorDriveWarningStatus_Type()
)
airIRRP100UnitStatusCompressorDriveWarningStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCompressorDriveWarningStatus.setStatus("mandatory")
_AirIRRP100UnitStatusCompressorDriveAlarmStatus_Type = Integer32
_AirIRRP100UnitStatusCompressorDriveAlarmStatus_Object = MibScalar
airIRRP100UnitStatusCompressorDriveAlarmStatus = _AirIRRP100UnitStatusCompressorDriveAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 45),
    _AirIRRP100UnitStatusCompressorDriveAlarmStatus_Type()
)
airIRRP100UnitStatusCompressorDriveAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusCompressorDriveAlarmStatus.setStatus("mandatory")
_AirIRRP100UnitStatusSuctionPressureUS_Type = Integer32
_AirIRRP100UnitStatusSuctionPressureUS_Object = MibScalar
airIRRP100UnitStatusSuctionPressureUS = _AirIRRP100UnitStatusSuctionPressureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 46),
    _AirIRRP100UnitStatusSuctionPressureUS_Type()
)
airIRRP100UnitStatusSuctionPressureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusSuctionPressureUS.setStatus("mandatory")
_AirIRRP100UnitStatusSuctionPressureMetric_Type = Integer32
_AirIRRP100UnitStatusSuctionPressureMetric_Object = MibScalar
airIRRP100UnitStatusSuctionPressureMetric = _AirIRRP100UnitStatusSuctionPressureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 47),
    _AirIRRP100UnitStatusSuctionPressureMetric_Type()
)
airIRRP100UnitStatusSuctionPressureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusSuctionPressureMetric.setStatus("mandatory")
_AirIRRP100UnitStatusDischargePressureUS_Type = Integer32
_AirIRRP100UnitStatusDischargePressureUS_Object = MibScalar
airIRRP100UnitStatusDischargePressureUS = _AirIRRP100UnitStatusDischargePressureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 48),
    _AirIRRP100UnitStatusDischargePressureUS_Type()
)
airIRRP100UnitStatusDischargePressureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusDischargePressureUS.setStatus("mandatory")
_AirIRRP100UnitStatusDischargePressureMetric_Type = Integer32
_AirIRRP100UnitStatusDischargePressureMetric_Object = MibScalar
airIRRP100UnitStatusDischargePressureMetric = _AirIRRP100UnitStatusDischargePressureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 2, 49),
    _AirIRRP100UnitStatusDischargePressureMetric_Type()
)
airIRRP100UnitStatusDischargePressureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitStatusDischargePressureMetric.setStatus("mandatory")
_AirIRRP100UnitRunHours_ObjectIdentity = ObjectIdentity
airIRRP100UnitRunHours = _AirIRRP100UnitRunHours_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3)
)
_AirIRRP100UnitRunHoursAirFilter_Type = Integer32
_AirIRRP100UnitRunHoursAirFilter_Object = MibScalar
airIRRP100UnitRunHoursAirFilter = _AirIRRP100UnitRunHoursAirFilter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 1),
    _AirIRRP100UnitRunHoursAirFilter_Type()
)
airIRRP100UnitRunHoursAirFilter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitRunHoursAirFilter.setStatus("mandatory")
_AirIRRP100UnitRunHoursCondensatePump_Type = Integer32
_AirIRRP100UnitRunHoursCondensatePump_Object = MibScalar
airIRRP100UnitRunHoursCondensatePump = _AirIRRP100UnitRunHoursCondensatePump_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 2),
    _AirIRRP100UnitRunHoursCondensatePump_Type()
)
airIRRP100UnitRunHoursCondensatePump.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitRunHoursCondensatePump.setStatus("mandatory")
_AirIRRP100UnitRunHoursHumidifier_Type = Integer32
_AirIRRP100UnitRunHoursHumidifier_Object = MibScalar
airIRRP100UnitRunHoursHumidifier = _AirIRRP100UnitRunHoursHumidifier_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 3),
    _AirIRRP100UnitRunHoursHumidifier_Type()
)
airIRRP100UnitRunHoursHumidifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitRunHoursHumidifier.setStatus("mandatory")
_AirIRRP100UnitRunHoursFan1_Type = Integer32
_AirIRRP100UnitRunHoursFan1_Object = MibScalar
airIRRP100UnitRunHoursFan1 = _AirIRRP100UnitRunHoursFan1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 4),
    _AirIRRP100UnitRunHoursFan1_Type()
)
airIRRP100UnitRunHoursFan1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitRunHoursFan1.setStatus("mandatory")
_AirIRRP100UnitRunHoursHeater1_Type = Integer32
_AirIRRP100UnitRunHoursHeater1_Object = MibScalar
airIRRP100UnitRunHoursHeater1 = _AirIRRP100UnitRunHoursHeater1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 5),
    _AirIRRP100UnitRunHoursHeater1_Type()
)
airIRRP100UnitRunHoursHeater1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitRunHoursHeater1.setStatus("mandatory")
_AirIRRP100UnitRunHoursFan2_Type = Integer32
_AirIRRP100UnitRunHoursFan2_Object = MibScalar
airIRRP100UnitRunHoursFan2 = _AirIRRP100UnitRunHoursFan2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 6),
    _AirIRRP100UnitRunHoursFan2_Type()
)
airIRRP100UnitRunHoursFan2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitRunHoursFan2.setStatus("mandatory")
_AirIRRP100UnitRunHoursHeater2_Type = Integer32
_AirIRRP100UnitRunHoursHeater2_Object = MibScalar
airIRRP100UnitRunHoursHeater2 = _AirIRRP100UnitRunHoursHeater2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 7),
    _AirIRRP100UnitRunHoursHeater2_Type()
)
airIRRP100UnitRunHoursHeater2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitRunHoursHeater2.setStatus("mandatory")
_AirIRRP100UnitRunHoursCompressor_Type = Integer32
_AirIRRP100UnitRunHoursCompressor_Object = MibScalar
airIRRP100UnitRunHoursCompressor = _AirIRRP100UnitRunHoursCompressor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 3, 8),
    _AirIRRP100UnitRunHoursCompressor_Type()
)
airIRRP100UnitRunHoursCompressor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP100UnitRunHoursCompressor.setStatus("mandatory")
_AirIRRP100UnitServiceIntervals_ObjectIdentity = ObjectIdentity
airIRRP100UnitServiceIntervals = _AirIRRP100UnitServiceIntervals_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4)
)
_AirIRRP100UnitServiceIntervalAirFilter_Type = Integer32
_AirIRRP100UnitServiceIntervalAirFilter_Object = MibScalar
airIRRP100UnitServiceIntervalAirFilter = _AirIRRP100UnitServiceIntervalAirFilter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 1),
    _AirIRRP100UnitServiceIntervalAirFilter_Type()
)
airIRRP100UnitServiceIntervalAirFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitServiceIntervalAirFilter.setStatus("mandatory")


class _AirIRRP100UnitServiceIntervalAirFilterAlarm_Type(Integer32):
    """Custom type airIRRP100UnitServiceIntervalAirFilterAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP100UnitServiceIntervalAirFilterAlarm_Type.__name__ = "Integer32"
_AirIRRP100UnitServiceIntervalAirFilterAlarm_Object = MibScalar
airIRRP100UnitServiceIntervalAirFilterAlarm = _AirIRRP100UnitServiceIntervalAirFilterAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 2),
    _AirIRRP100UnitServiceIntervalAirFilterAlarm_Type()
)
airIRRP100UnitServiceIntervalAirFilterAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitServiceIntervalAirFilterAlarm.setStatus("mandatory")
_AirIRRP100UnitServiceIntervalHumidifier_Type = Integer32
_AirIRRP100UnitServiceIntervalHumidifier_Object = MibScalar
airIRRP100UnitServiceIntervalHumidifier = _AirIRRP100UnitServiceIntervalHumidifier_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 3),
    _AirIRRP100UnitServiceIntervalHumidifier_Type()
)
airIRRP100UnitServiceIntervalHumidifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitServiceIntervalHumidifier.setStatus("mandatory")


class _AirIRRP100UnitServiceIntervalHumidifierAlarm_Type(Integer32):
    """Custom type airIRRP100UnitServiceIntervalHumidifierAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP100UnitServiceIntervalHumidifierAlarm_Type.__name__ = "Integer32"
_AirIRRP100UnitServiceIntervalHumidifierAlarm_Object = MibScalar
airIRRP100UnitServiceIntervalHumidifierAlarm = _AirIRRP100UnitServiceIntervalHumidifierAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 4),
    _AirIRRP100UnitServiceIntervalHumidifierAlarm_Type()
)
airIRRP100UnitServiceIntervalHumidifierAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitServiceIntervalHumidifierAlarm.setStatus("mandatory")
_AirIRRP100UnitServiceIntervalHeater_Type = Integer32
_AirIRRP100UnitServiceIntervalHeater_Object = MibScalar
airIRRP100UnitServiceIntervalHeater = _AirIRRP100UnitServiceIntervalHeater_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 5),
    _AirIRRP100UnitServiceIntervalHeater_Type()
)
airIRRP100UnitServiceIntervalHeater.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitServiceIntervalHeater.setStatus("mandatory")


class _AirIRRP100UnitServiceIntervalHeaterAlarm_Type(Integer32):
    """Custom type airIRRP100UnitServiceIntervalHeaterAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP100UnitServiceIntervalHeaterAlarm_Type.__name__ = "Integer32"
_AirIRRP100UnitServiceIntervalHeaterAlarm_Object = MibScalar
airIRRP100UnitServiceIntervalHeaterAlarm = _AirIRRP100UnitServiceIntervalHeaterAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 6),
    _AirIRRP100UnitServiceIntervalHeaterAlarm_Type()
)
airIRRP100UnitServiceIntervalHeaterAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitServiceIntervalHeaterAlarm.setStatus("mandatory")
_AirIRRP100UnitServiceIntervalCompressor_Type = Integer32
_AirIRRP100UnitServiceIntervalCompressor_Object = MibScalar
airIRRP100UnitServiceIntervalCompressor = _AirIRRP100UnitServiceIntervalCompressor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 7),
    _AirIRRP100UnitServiceIntervalCompressor_Type()
)
airIRRP100UnitServiceIntervalCompressor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitServiceIntervalCompressor.setStatus("mandatory")


class _AirIRRP100UnitServiceIntervalCompressorAlarm_Type(Integer32):
    """Custom type airIRRP100UnitServiceIntervalCompressorAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP100UnitServiceIntervalCompressorAlarm_Type.__name__ = "Integer32"
_AirIRRP100UnitServiceIntervalCompressorAlarm_Object = MibScalar
airIRRP100UnitServiceIntervalCompressorAlarm = _AirIRRP100UnitServiceIntervalCompressorAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 8),
    _AirIRRP100UnitServiceIntervalCompressorAlarm_Type()
)
airIRRP100UnitServiceIntervalCompressorAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitServiceIntervalCompressorAlarm.setStatus("mandatory")
_AirIRRP100UnitServiceIntervalCondensatePump_Type = Integer32
_AirIRRP100UnitServiceIntervalCondensatePump_Object = MibScalar
airIRRP100UnitServiceIntervalCondensatePump = _AirIRRP100UnitServiceIntervalCondensatePump_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 9),
    _AirIRRP100UnitServiceIntervalCondensatePump_Type()
)
airIRRP100UnitServiceIntervalCondensatePump.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitServiceIntervalCondensatePump.setStatus("mandatory")


class _AirIRRP100UnitServiceIntervalCondensatePumpAlarm_Type(Integer32):
    """Custom type airIRRP100UnitServiceIntervalCondensatePumpAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP100UnitServiceIntervalCondensatePumpAlarm_Type.__name__ = "Integer32"
_AirIRRP100UnitServiceIntervalCondensatePumpAlarm_Object = MibScalar
airIRRP100UnitServiceIntervalCondensatePumpAlarm = _AirIRRP100UnitServiceIntervalCondensatePumpAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 10),
    _AirIRRP100UnitServiceIntervalCondensatePumpAlarm_Type()
)
airIRRP100UnitServiceIntervalCondensatePumpAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitServiceIntervalCondensatePumpAlarm.setStatus("mandatory")
_AirIRRP100UnitServiceIntervalFans_Type = Integer32
_AirIRRP100UnitServiceIntervalFans_Object = MibScalar
airIRRP100UnitServiceIntervalFans = _AirIRRP100UnitServiceIntervalFans_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 11),
    _AirIRRP100UnitServiceIntervalFans_Type()
)
airIRRP100UnitServiceIntervalFans.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitServiceIntervalFans.setStatus("mandatory")


class _AirIRRP100UnitServiceIntervalFansAlarm_Type(Integer32):
    """Custom type airIRRP100UnitServiceIntervalFansAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP100UnitServiceIntervalFansAlarm_Type.__name__ = "Integer32"
_AirIRRP100UnitServiceIntervalFansAlarm_Object = MibScalar
airIRRP100UnitServiceIntervalFansAlarm = _AirIRRP100UnitServiceIntervalFansAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 4, 12),
    _AirIRRP100UnitServiceIntervalFansAlarm_Type()
)
airIRRP100UnitServiceIntervalFansAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitServiceIntervalFansAlarm.setStatus("mandatory")
_AirIRRP100UnitThresholds_ObjectIdentity = ObjectIdentity
airIRRP100UnitThresholds = _AirIRRP100UnitThresholds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5)
)
_AirIRRP100UnitThresholdsRackInletHighTempUS_Type = Integer32
_AirIRRP100UnitThresholdsRackInletHighTempUS_Object = MibScalar
airIRRP100UnitThresholdsRackInletHighTempUS = _AirIRRP100UnitThresholdsRackInletHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 1),
    _AirIRRP100UnitThresholdsRackInletHighTempUS_Type()
)
airIRRP100UnitThresholdsRackInletHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitThresholdsRackInletHighTempUS.setStatus("mandatory")
_AirIRRP100UnitThresholdsRackInletHighTempMetric_Type = Integer32
_AirIRRP100UnitThresholdsRackInletHighTempMetric_Object = MibScalar
airIRRP100UnitThresholdsRackInletHighTempMetric = _AirIRRP100UnitThresholdsRackInletHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 2),
    _AirIRRP100UnitThresholdsRackInletHighTempMetric_Type()
)
airIRRP100UnitThresholdsRackInletHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitThresholdsRackInletHighTempMetric.setStatus("mandatory")
_AirIRRP100UnitThresholdsSupplyAirHighTempUS_Type = Integer32
_AirIRRP100UnitThresholdsSupplyAirHighTempUS_Object = MibScalar
airIRRP100UnitThresholdsSupplyAirHighTempUS = _AirIRRP100UnitThresholdsSupplyAirHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 3),
    _AirIRRP100UnitThresholdsSupplyAirHighTempUS_Type()
)
airIRRP100UnitThresholdsSupplyAirHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitThresholdsSupplyAirHighTempUS.setStatus("mandatory")
_AirIRRP100UnitThresholdsSupplyAirHighTempMetric_Type = Integer32
_AirIRRP100UnitThresholdsSupplyAirHighTempMetric_Object = MibScalar
airIRRP100UnitThresholdsSupplyAirHighTempMetric = _AirIRRP100UnitThresholdsSupplyAirHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 4),
    _AirIRRP100UnitThresholdsSupplyAirHighTempMetric_Type()
)
airIRRP100UnitThresholdsSupplyAirHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitThresholdsSupplyAirHighTempMetric.setStatus("mandatory")
_AirIRRP100UnitThresholdsReturnAirHighTempUS_Type = Integer32
_AirIRRP100UnitThresholdsReturnAirHighTempUS_Object = MibScalar
airIRRP100UnitThresholdsReturnAirHighTempUS = _AirIRRP100UnitThresholdsReturnAirHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 5),
    _AirIRRP100UnitThresholdsReturnAirHighTempUS_Type()
)
airIRRP100UnitThresholdsReturnAirHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitThresholdsReturnAirHighTempUS.setStatus("mandatory")
_AirIRRP100UnitThresholdsReturnAirHighTempMetric_Type = Integer32
_AirIRRP100UnitThresholdsReturnAirHighTempMetric_Object = MibScalar
airIRRP100UnitThresholdsReturnAirHighTempMetric = _AirIRRP100UnitThresholdsReturnAirHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 6),
    _AirIRRP100UnitThresholdsReturnAirHighTempMetric_Type()
)
airIRRP100UnitThresholdsReturnAirHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitThresholdsReturnAirHighTempMetric.setStatus("mandatory")
_AirIRRP100UnitThresholdsSupplyHumidityHigh_Type = Integer32
_AirIRRP100UnitThresholdsSupplyHumidityHigh_Object = MibScalar
airIRRP100UnitThresholdsSupplyHumidityHigh = _AirIRRP100UnitThresholdsSupplyHumidityHigh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 7),
    _AirIRRP100UnitThresholdsSupplyHumidityHigh_Type()
)
airIRRP100UnitThresholdsSupplyHumidityHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitThresholdsSupplyHumidityHigh.setStatus("mandatory")
_AirIRRP100UnitThresholdsSupplyHumidityLow_Type = Integer32
_AirIRRP100UnitThresholdsSupplyHumidityLow_Object = MibScalar
airIRRP100UnitThresholdsSupplyHumidityLow = _AirIRRP100UnitThresholdsSupplyHumidityLow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 5, 8),
    _AirIRRP100UnitThresholdsSupplyHumidityLow_Type()
)
airIRRP100UnitThresholdsSupplyHumidityLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitThresholdsSupplyHumidityLow.setStatus("mandatory")
_AirIRRP100UnitConfig_ObjectIdentity = ObjectIdentity
airIRRP100UnitConfig = _AirIRRP100UnitConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6)
)
_AirIRRP100UnitConfigStartupDelay_Type = Integer32
_AirIRRP100UnitConfigStartupDelay_Object = MibScalar
airIRRP100UnitConfigStartupDelay = _AirIRRP100UnitConfigStartupDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 1),
    _AirIRRP100UnitConfigStartupDelay_Type()
)
airIRRP100UnitConfigStartupDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitConfigStartupDelay.setStatus("mandatory")


class _AirIRRP100UnitConfigCoolCapacity_Type(Integer32):
    """Custom type airIRRP100UnitConfigCoolCapacity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("maximum", 2))
    )


_AirIRRP100UnitConfigCoolCapacity_Type.__name__ = "Integer32"
_AirIRRP100UnitConfigCoolCapacity_Object = MibScalar
airIRRP100UnitConfigCoolCapacity = _AirIRRP100UnitConfigCoolCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 2),
    _AirIRRP100UnitConfigCoolCapacity_Type()
)
airIRRP100UnitConfigCoolCapacity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitConfigCoolCapacity.setStatus("mandatory")


class _AirIRRP100UnitConfigIdleOnLeakDetect_Type(Integer32):
    """Custom type airIRRP100UnitConfigIdleOnLeakDetect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_AirIRRP100UnitConfigIdleOnLeakDetect_Type.__name__ = "Integer32"
_AirIRRP100UnitConfigIdleOnLeakDetect_Object = MibScalar
airIRRP100UnitConfigIdleOnLeakDetect = _AirIRRP100UnitConfigIdleOnLeakDetect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 3),
    _AirIRRP100UnitConfigIdleOnLeakDetect_Type()
)
airIRRP100UnitConfigIdleOnLeakDetect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitConfigIdleOnLeakDetect.setStatus("mandatory")


class _AirIRRP100UnitConfigInputNormalState_Type(Integer32):
    """Custom type airIRRP100UnitConfigInputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRRP100UnitConfigInputNormalState_Type.__name__ = "Integer32"
_AirIRRP100UnitConfigInputNormalState_Object = MibScalar
airIRRP100UnitConfigInputNormalState = _AirIRRP100UnitConfigInputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 4),
    _AirIRRP100UnitConfigInputNormalState_Type()
)
airIRRP100UnitConfigInputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitConfigInputNormalState.setStatus("mandatory")


class _AirIRRP100UnitConfigOutputNormalState_Type(Integer32):
    """Custom type airIRRP100UnitConfigOutputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRRP100UnitConfigOutputNormalState_Type.__name__ = "Integer32"
_AirIRRP100UnitConfigOutputNormalState_Object = MibScalar
airIRRP100UnitConfigOutputNormalState = _AirIRRP100UnitConfigOutputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 5),
    _AirIRRP100UnitConfigOutputNormalState_Type()
)
airIRRP100UnitConfigOutputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitConfigOutputNormalState.setStatus("mandatory")


class _AirIRRP100UnitConfigOutputSource_Type(Integer32):
    """Custom type airIRRP100UnitConfigOutputSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("anyAlarm", 1),
          ("criticalAlarm", 2))
    )


_AirIRRP100UnitConfigOutputSource_Type.__name__ = "Integer32"
_AirIRRP100UnitConfigOutputSource_Object = MibScalar
airIRRP100UnitConfigOutputSource = _AirIRRP100UnitConfigOutputSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 6),
    _AirIRRP100UnitConfigOutputSource_Type()
)
airIRRP100UnitConfigOutputSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitConfigOutputSource.setStatus("mandatory")


class _AirIRRP100UnitConfigHumidifyEnable_Type(Integer32):
    """Custom type airIRRP100UnitConfigHumidifyEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP100UnitConfigHumidifyEnable_Type.__name__ = "Integer32"
_AirIRRP100UnitConfigHumidifyEnable_Object = MibScalar
airIRRP100UnitConfigHumidifyEnable = _AirIRRP100UnitConfigHumidifyEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 7),
    _AirIRRP100UnitConfigHumidifyEnable_Type()
)
airIRRP100UnitConfigHumidifyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitConfigHumidifyEnable.setStatus("mandatory")


class _AirIRRP100UnitConfigHumidifierControl_Type(Integer32):
    """Custom type airIRRP100UnitConfigHumidifierControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("drainOff", 2))
    )


_AirIRRP100UnitConfigHumidifierControl_Type.__name__ = "Integer32"
_AirIRRP100UnitConfigHumidifierControl_Object = MibScalar
airIRRP100UnitConfigHumidifierControl = _AirIRRP100UnitConfigHumidifierControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 8),
    _AirIRRP100UnitConfigHumidifierControl_Type()
)
airIRRP100UnitConfigHumidifierControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitConfigHumidifierControl.setStatus("mandatory")


class _AirIRRP100UnitConfigDehumidifyEnable_Type(Integer32):
    """Custom type airIRRP100UnitConfigDehumidifyEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP100UnitConfigDehumidifyEnable_Type.__name__ = "Integer32"
_AirIRRP100UnitConfigDehumidifyEnable_Object = MibScalar
airIRRP100UnitConfigDehumidifyEnable = _AirIRRP100UnitConfigDehumidifyEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 9),
    _AirIRRP100UnitConfigDehumidifyEnable_Type()
)
airIRRP100UnitConfigDehumidifyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitConfigDehumidifyEnable.setStatus("mandatory")


class _AirIRRP100UnitConfigReheatEnable_Type(Integer32):
    """Custom type airIRRP100UnitConfigReheatEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP100UnitConfigReheatEnable_Type.__name__ = "Integer32"
_AirIRRP100UnitConfigReheatEnable_Object = MibScalar
airIRRP100UnitConfigReheatEnable = _AirIRRP100UnitConfigReheatEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 10),
    _AirIRRP100UnitConfigReheatEnable_Type()
)
airIRRP100UnitConfigReheatEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitConfigReheatEnable.setStatus("mandatory")


class _AirIRRP100UnitConfigHeatAssistEnable_Type(Integer32):
    """Custom type airIRRP100UnitConfigHeatAssistEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP100UnitConfigHeatAssistEnable_Type.__name__ = "Integer32"
_AirIRRP100UnitConfigHeatAssistEnable_Object = MibScalar
airIRRP100UnitConfigHeatAssistEnable = _AirIRRP100UnitConfigHeatAssistEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 1, 2, 6, 11),
    _AirIRRP100UnitConfigHeatAssistEnable_Type()
)
airIRRP100UnitConfigHeatAssistEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP100UnitConfigHeatAssistEnable.setStatus("mandatory")
_AirIRRP500_ObjectIdentity = ObjectIdentity
airIRRP500 = _AirIRRP500_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2)
)
_AirIRRP500Group_ObjectIdentity = ObjectIdentity
airIRRP500Group = _AirIRRP500Group_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1)
)
_AirIRRP500GroupStatus_ObjectIdentity = ObjectIdentity
airIRRP500GroupStatus = _AirIRRP500GroupStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1)
)
_AirIRRP500GroupStatusAirFlowUS_Type = Integer32
_AirIRRP500GroupStatusAirFlowUS_Object = MibScalar
airIRRP500GroupStatusAirFlowUS = _AirIRRP500GroupStatusAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 1),
    _AirIRRP500GroupStatusAirFlowUS_Type()
)
airIRRP500GroupStatusAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusAirFlowUS.setStatus("mandatory")
_AirIRRP500GroupStatusAirFlowMetric_Type = Integer32
_AirIRRP500GroupStatusAirFlowMetric_Object = MibScalar
airIRRP500GroupStatusAirFlowMetric = _AirIRRP500GroupStatusAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 2),
    _AirIRRP500GroupStatusAirFlowMetric_Type()
)
airIRRP500GroupStatusAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusAirFlowMetric.setStatus("mandatory")
_AirIRRP500GroupStatusMaxRackInletTempUS_Type = Integer32
_AirIRRP500GroupStatusMaxRackInletTempUS_Object = MibScalar
airIRRP500GroupStatusMaxRackInletTempUS = _AirIRRP500GroupStatusMaxRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 3),
    _AirIRRP500GroupStatusMaxRackInletTempUS_Type()
)
airIRRP500GroupStatusMaxRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusMaxRackInletTempUS.setStatus("mandatory")
_AirIRRP500GroupStatusMaxRackInletTempMetric_Type = Integer32
_AirIRRP500GroupStatusMaxRackInletTempMetric_Object = MibScalar
airIRRP500GroupStatusMaxRackInletTempMetric = _AirIRRP500GroupStatusMaxRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 4),
    _AirIRRP500GroupStatusMaxRackInletTempMetric_Type()
)
airIRRP500GroupStatusMaxRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusMaxRackInletTempMetric.setStatus("mandatory")
_AirIRRP500GroupStatusMinRackInletTempUS_Type = Integer32
_AirIRRP500GroupStatusMinRackInletTempUS_Object = MibScalar
airIRRP500GroupStatusMinRackInletTempUS = _AirIRRP500GroupStatusMinRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 5),
    _AirIRRP500GroupStatusMinRackInletTempUS_Type()
)
airIRRP500GroupStatusMinRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusMinRackInletTempUS.setStatus("mandatory")
_AirIRRP500GroupStatusMinRackInletTempMetric_Type = Integer32
_AirIRRP500GroupStatusMinRackInletTempMetric_Object = MibScalar
airIRRP500GroupStatusMinRackInletTempMetric = _AirIRRP500GroupStatusMinRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 6),
    _AirIRRP500GroupStatusMinRackInletTempMetric_Type()
)
airIRRP500GroupStatusMinRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusMinRackInletTempMetric.setStatus("mandatory")
_AirIRRP500GroupStatusCoolDemand_Type = Integer32
_AirIRRP500GroupStatusCoolDemand_Object = MibScalar
airIRRP500GroupStatusCoolDemand = _AirIRRP500GroupStatusCoolDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 7),
    _AirIRRP500GroupStatusCoolDemand_Type()
)
airIRRP500GroupStatusCoolDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusCoolDemand.setStatus("mandatory")
_AirIRRP500GroupStatusCoolOutput_Type = Integer32
_AirIRRP500GroupStatusCoolOutput_Object = MibScalar
airIRRP500GroupStatusCoolOutput = _AirIRRP500GroupStatusCoolOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 8),
    _AirIRRP500GroupStatusCoolOutput_Type()
)
airIRRP500GroupStatusCoolOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusCoolOutput.setStatus("mandatory")
_AirIRRP500GroupStatusHumidifyDemand_Type = Integer32
_AirIRRP500GroupStatusHumidifyDemand_Object = MibScalar
airIRRP500GroupStatusHumidifyDemand = _AirIRRP500GroupStatusHumidifyDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 9),
    _AirIRRP500GroupStatusHumidifyDemand_Type()
)
airIRRP500GroupStatusHumidifyDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusHumidifyDemand.setStatus("mandatory")
_AirIRRP500GroupStatusHumidifyOutput_Type = Integer32
_AirIRRP500GroupStatusHumidifyOutput_Object = MibScalar
airIRRP500GroupStatusHumidifyOutput = _AirIRRP500GroupStatusHumidifyOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 10),
    _AirIRRP500GroupStatusHumidifyOutput_Type()
)
airIRRP500GroupStatusHumidifyOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusHumidifyOutput.setStatus("mandatory")
_AirIRRP500GroupStatusDehumidifyDemand_Type = Integer32
_AirIRRP500GroupStatusDehumidifyDemand_Object = MibScalar
airIRRP500GroupStatusDehumidifyDemand = _AirIRRP500GroupStatusDehumidifyDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 11),
    _AirIRRP500GroupStatusDehumidifyDemand_Type()
)
airIRRP500GroupStatusDehumidifyDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusDehumidifyDemand.setStatus("mandatory")
_AirIRRP500GroupStatusDehumidifyOutput_Type = Integer32
_AirIRRP500GroupStatusDehumidifyOutput_Object = MibScalar
airIRRP500GroupStatusDehumidifyOutput = _AirIRRP500GroupStatusDehumidifyOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 12),
    _AirIRRP500GroupStatusDehumidifyOutput_Type()
)
airIRRP500GroupStatusDehumidifyOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusDehumidifyOutput.setStatus("mandatory")
_AirIRRP500GroupStatusReheatDemand_Type = Integer32
_AirIRRP500GroupStatusReheatDemand_Object = MibScalar
airIRRP500GroupStatusReheatDemand = _AirIRRP500GroupStatusReheatDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 13),
    _AirIRRP500GroupStatusReheatDemand_Type()
)
airIRRP500GroupStatusReheatDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusReheatDemand.setStatus("mandatory")
_AirIRRP500GroupStatusReheatOutput_Type = Integer32
_AirIRRP500GroupStatusReheatOutput_Object = MibScalar
airIRRP500GroupStatusReheatOutput = _AirIRRP500GroupStatusReheatOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 1, 14),
    _AirIRRP500GroupStatusReheatOutput_Type()
)
airIRRP500GroupStatusReheatOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500GroupStatusReheatOutput.setStatus("mandatory")
_AirIRRP500GroupSetpoints_ObjectIdentity = ObjectIdentity
airIRRP500GroupSetpoints = _AirIRRP500GroupSetpoints_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2)
)
_AirIRRP500GroupSetpointsCoolUS_Type = Integer32
_AirIRRP500GroupSetpointsCoolUS_Object = MibScalar
airIRRP500GroupSetpointsCoolUS = _AirIRRP500GroupSetpointsCoolUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 1),
    _AirIRRP500GroupSetpointsCoolUS_Type()
)
airIRRP500GroupSetpointsCoolUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupSetpointsCoolUS.setStatus("mandatory")
_AirIRRP500GroupSetpointsCoolMetric_Type = Integer32
_AirIRRP500GroupSetpointsCoolMetric_Object = MibScalar
airIRRP500GroupSetpointsCoolMetric = _AirIRRP500GroupSetpointsCoolMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 2),
    _AirIRRP500GroupSetpointsCoolMetric_Type()
)
airIRRP500GroupSetpointsCoolMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupSetpointsCoolMetric.setStatus("mandatory")
_AirIRRP500GroupSetpointsSupplyAirUS_Type = Integer32
_AirIRRP500GroupSetpointsSupplyAirUS_Object = MibScalar
airIRRP500GroupSetpointsSupplyAirUS = _AirIRRP500GroupSetpointsSupplyAirUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 3),
    _AirIRRP500GroupSetpointsSupplyAirUS_Type()
)
airIRRP500GroupSetpointsSupplyAirUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupSetpointsSupplyAirUS.setStatus("mandatory")
_AirIRRP500GroupSetpointsSupplyAirMetric_Type = Integer32
_AirIRRP500GroupSetpointsSupplyAirMetric_Object = MibScalar
airIRRP500GroupSetpointsSupplyAirMetric = _AirIRRP500GroupSetpointsSupplyAirMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 4),
    _AirIRRP500GroupSetpointsSupplyAirMetric_Type()
)
airIRRP500GroupSetpointsSupplyAirMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupSetpointsSupplyAirMetric.setStatus("mandatory")
_AirIRRP500GroupSetpointsHumidify_Type = Integer32
_AirIRRP500GroupSetpointsHumidify_Object = MibScalar
airIRRP500GroupSetpointsHumidify = _AirIRRP500GroupSetpointsHumidify_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 5),
    _AirIRRP500GroupSetpointsHumidify_Type()
)
airIRRP500GroupSetpointsHumidify.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupSetpointsHumidify.setStatus("mandatory")
_AirIRRP500GroupSetpointsDehumidify_Type = Integer32
_AirIRRP500GroupSetpointsDehumidify_Object = MibScalar
airIRRP500GroupSetpointsDehumidify = _AirIRRP500GroupSetpointsDehumidify_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 6),
    _AirIRRP500GroupSetpointsDehumidify_Type()
)
airIRRP500GroupSetpointsDehumidify.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupSetpointsDehumidify.setStatus("mandatory")
_AirIRRP500GroupSetpointsDehumidifyDeadband_Type = Integer32
_AirIRRP500GroupSetpointsDehumidifyDeadband_Object = MibScalar
airIRRP500GroupSetpointsDehumidifyDeadband = _AirIRRP500GroupSetpointsDehumidifyDeadband_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 7),
    _AirIRRP500GroupSetpointsDehumidifyDeadband_Type()
)
airIRRP500GroupSetpointsDehumidifyDeadband.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupSetpointsDehumidifyDeadband.setStatus("mandatory")
_AirIRRP500GroupSetpointsReheatUS_Type = Integer32
_AirIRRP500GroupSetpointsReheatUS_Object = MibScalar
airIRRP500GroupSetpointsReheatUS = _AirIRRP500GroupSetpointsReheatUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 8),
    _AirIRRP500GroupSetpointsReheatUS_Type()
)
airIRRP500GroupSetpointsReheatUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupSetpointsReheatUS.setStatus("mandatory")
_AirIRRP500GroupSetpointsReheatMetric_Type = Integer32
_AirIRRP500GroupSetpointsReheatMetric_Object = MibScalar
airIRRP500GroupSetpointsReheatMetric = _AirIRRP500GroupSetpointsReheatMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 9),
    _AirIRRP500GroupSetpointsReheatMetric_Type()
)
airIRRP500GroupSetpointsReheatMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupSetpointsReheatMetric.setStatus("mandatory")


class _AirIRRP500GroupSetpointsFanSpeedPreference_Type(Integer32):
    """Custom type airIRRP500GroupSetpointsFanSpeedPreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("high", 5),
          ("low", 1),
          ("med", 3),
          ("med-high", 4),
          ("med-low", 2))
    )


_AirIRRP500GroupSetpointsFanSpeedPreference_Type.__name__ = "Integer32"
_AirIRRP500GroupSetpointsFanSpeedPreference_Object = MibScalar
airIRRP500GroupSetpointsFanSpeedPreference = _AirIRRP500GroupSetpointsFanSpeedPreference_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 10),
    _AirIRRP500GroupSetpointsFanSpeedPreference_Type()
)
airIRRP500GroupSetpointsFanSpeedPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupSetpointsFanSpeedPreference.setStatus("mandatory")


class _AirIRRP500GroupSetpointsFanSpeedControl_Type(Integer32):
    """Custom type airIRRP500GroupSetpointsFanSpeedControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("manual", 2))
    )


_AirIRRP500GroupSetpointsFanSpeedControl_Type.__name__ = "Integer32"
_AirIRRP500GroupSetpointsFanSpeedControl_Object = MibScalar
airIRRP500GroupSetpointsFanSpeedControl = _AirIRRP500GroupSetpointsFanSpeedControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 2, 11),
    _AirIRRP500GroupSetpointsFanSpeedControl_Type()
)
airIRRP500GroupSetpointsFanSpeedControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupSetpointsFanSpeedControl.setStatus("mandatory")
_AirIRRP500GroupConfig_ObjectIdentity = ObjectIdentity
airIRRP500GroupConfig = _AirIRRP500GroupConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3)
)
_AirIRRP500GroupConfigNumberofCoolingUnits_Type = Integer32
_AirIRRP500GroupConfigNumberofCoolingUnits_Object = MibScalar
airIRRP500GroupConfigNumberofCoolingUnits = _AirIRRP500GroupConfigNumberofCoolingUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 1),
    _AirIRRP500GroupConfigNumberofCoolingUnits_Type()
)
airIRRP500GroupConfigNumberofCoolingUnits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupConfigNumberofCoolingUnits.setStatus("mandatory")


class _AirIRRP500GroupConfigConfigurationType_Type(Integer32):
    """Custom type airIRRP500GroupConfigConfigurationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hacs", 2),
          ("in-row", 3),
          ("racs", 1))
    )


_AirIRRP500GroupConfigConfigurationType_Type.__name__ = "Integer32"
_AirIRRP500GroupConfigConfigurationType_Object = MibScalar
airIRRP500GroupConfigConfigurationType = _AirIRRP500GroupConfigConfigurationType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 2),
    _AirIRRP500GroupConfigConfigurationType_Type()
)
airIRRP500GroupConfigConfigurationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupConfigConfigurationType.setStatus("mandatory")
_AirIRRP500GroupConfigPercentGlycol_Type = Integer32
_AirIRRP500GroupConfigPercentGlycol_Object = MibScalar
airIRRP500GroupConfigPercentGlycol = _AirIRRP500GroupConfigPercentGlycol_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 3),
    _AirIRRP500GroupConfigPercentGlycol_Type()
)
airIRRP500GroupConfigPercentGlycol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupConfigPercentGlycol.setStatus("mandatory")
_AirIRRP500GroupConfigCoolGainP_Type = Integer32
_AirIRRP500GroupConfigCoolGainP_Object = MibScalar
airIRRP500GroupConfigCoolGainP = _AirIRRP500GroupConfigCoolGainP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 4),
    _AirIRRP500GroupConfigCoolGainP_Type()
)
airIRRP500GroupConfigCoolGainP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupConfigCoolGainP.setStatus("mandatory")
_AirIRRP500GroupConfigCoolResetRateI_Type = Integer32
_AirIRRP500GroupConfigCoolResetRateI_Object = MibScalar
airIRRP500GroupConfigCoolResetRateI = _AirIRRP500GroupConfigCoolResetRateI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 5),
    _AirIRRP500GroupConfigCoolResetRateI_Type()
)
airIRRP500GroupConfigCoolResetRateI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupConfigCoolResetRateI.setStatus("mandatory")
_AirIRRP500GroupConfigCoolDerivativeD_Type = Integer32
_AirIRRP500GroupConfigCoolDerivativeD_Object = MibScalar
airIRRP500GroupConfigCoolDerivativeD = _AirIRRP500GroupConfigCoolDerivativeD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 6),
    _AirIRRP500GroupConfigCoolDerivativeD_Type()
)
airIRRP500GroupConfigCoolDerivativeD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupConfigCoolDerivativeD.setStatus("mandatory")
_AirIRRP500GroupConfigHumidifySensitivityBand_Type = Integer32
_AirIRRP500GroupConfigHumidifySensitivityBand_Object = MibScalar
airIRRP500GroupConfigHumidifySensitivityBand = _AirIRRP500GroupConfigHumidifySensitivityBand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 7),
    _AirIRRP500GroupConfigHumidifySensitivityBand_Type()
)
airIRRP500GroupConfigHumidifySensitivityBand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupConfigHumidifySensitivityBand.setStatus("mandatory")
_AirIRRP500GroupConfigReheatGainP_Type = Integer32
_AirIRRP500GroupConfigReheatGainP_Object = MibScalar
airIRRP500GroupConfigReheatGainP = _AirIRRP500GroupConfigReheatGainP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 8),
    _AirIRRP500GroupConfigReheatGainP_Type()
)
airIRRP500GroupConfigReheatGainP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupConfigReheatGainP.setStatus("mandatory")
_AirIRRP500GroupConfigReheatResetRateI_Type = Integer32
_AirIRRP500GroupConfigReheatResetRateI_Object = MibScalar
airIRRP500GroupConfigReheatResetRateI = _AirIRRP500GroupConfigReheatResetRateI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 9),
    _AirIRRP500GroupConfigReheatResetRateI_Type()
)
airIRRP500GroupConfigReheatResetRateI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupConfigReheatResetRateI.setStatus("mandatory")
_AirIRRP500GroupConfigReheatDerivativeD_Type = Integer32
_AirIRRP500GroupConfigReheatDerivativeD_Object = MibScalar
airIRRP500GroupConfigReheatDerivativeD = _AirIRRP500GroupConfigReheatDerivativeD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 1, 3, 10),
    _AirIRRP500GroupConfigReheatDerivativeD_Type()
)
airIRRP500GroupConfigReheatDerivativeD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500GroupConfigReheatDerivativeD.setStatus("mandatory")
_AirIRRP500Unit_ObjectIdentity = ObjectIdentity
airIRRP500Unit = _AirIRRP500Unit_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2)
)
_AirIRRP500UnitIdent_ObjectIdentity = ObjectIdentity
airIRRP500UnitIdent = _AirIRRP500UnitIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1)
)
_AirIRRP500UnitIdentID_Type = Integer32
_AirIRRP500UnitIdentID_Object = MibScalar
airIRRP500UnitIdentID = _AirIRRP500UnitIdentID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 1),
    _AirIRRP500UnitIdentID_Type()
)
airIRRP500UnitIdentID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitIdentID.setStatus("mandatory")
_AirIRRP500UnitIdentName_Type = DisplayString
_AirIRRP500UnitIdentName_Object = MibScalar
airIRRP500UnitIdentName = _AirIRRP500UnitIdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 2),
    _AirIRRP500UnitIdentName_Type()
)
airIRRP500UnitIdentName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitIdentName.setStatus("mandatory")
_AirIRRP500UnitIdentLocation_Type = DisplayString
_AirIRRP500UnitIdentLocation_Object = MibScalar
airIRRP500UnitIdentLocation = _AirIRRP500UnitIdentLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 3),
    _AirIRRP500UnitIdentLocation_Type()
)
airIRRP500UnitIdentLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitIdentLocation.setStatus("mandatory")
_AirIRRP500UnitIdentModelNumber_Type = DisplayString
_AirIRRP500UnitIdentModelNumber_Object = MibScalar
airIRRP500UnitIdentModelNumber = _AirIRRP500UnitIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 4),
    _AirIRRP500UnitIdentModelNumber_Type()
)
airIRRP500UnitIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitIdentModelNumber.setStatus("mandatory")
_AirIRRP500UnitIdentSerialNumber_Type = DisplayString
_AirIRRP500UnitIdentSerialNumber_Object = MibScalar
airIRRP500UnitIdentSerialNumber = _AirIRRP500UnitIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 5),
    _AirIRRP500UnitIdentSerialNumber_Type()
)
airIRRP500UnitIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitIdentSerialNumber.setStatus("mandatory")
_AirIRRP500UnitIdentFirmwareRevision_Type = DisplayString
_AirIRRP500UnitIdentFirmwareRevision_Object = MibScalar
airIRRP500UnitIdentFirmwareRevision = _AirIRRP500UnitIdentFirmwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 6),
    _AirIRRP500UnitIdentFirmwareRevision_Type()
)
airIRRP500UnitIdentFirmwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitIdentFirmwareRevision.setStatus("mandatory")
_AirIRRP500UnitIdentHardwareRevision_Type = DisplayString
_AirIRRP500UnitIdentHardwareRevision_Object = MibScalar
airIRRP500UnitIdentHardwareRevision = _AirIRRP500UnitIdentHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 7),
    _AirIRRP500UnitIdentHardwareRevision_Type()
)
airIRRP500UnitIdentHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitIdentHardwareRevision.setStatus("mandatory")
_AirIRRP500UnitIdentManufactureDate_Type = DisplayString
_AirIRRP500UnitIdentManufactureDate_Object = MibScalar
airIRRP500UnitIdentManufactureDate = _AirIRRP500UnitIdentManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 1, 8),
    _AirIRRP500UnitIdentManufactureDate_Type()
)
airIRRP500UnitIdentManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitIdentManufactureDate.setStatus("mandatory")
_AirIRRP500UnitStatus_ObjectIdentity = ObjectIdentity
airIRRP500UnitStatus = _AirIRRP500UnitStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2)
)


class _AirIRRP500UnitStatusOperateMode_Type(Integer32):
    """Custom type airIRRP500UnitStatusOperateMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("idle", 3),
          ("on", 2),
          ("standby", 1))
    )


_AirIRRP500UnitStatusOperateMode_Type.__name__ = "Integer32"
_AirIRRP500UnitStatusOperateMode_Object = MibScalar
airIRRP500UnitStatusOperateMode = _AirIRRP500UnitStatusOperateMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 1),
    _AirIRRP500UnitStatusOperateMode_Type()
)
airIRRP500UnitStatusOperateMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusOperateMode.setStatus("mandatory")
_AirIRRP500UnitStatusMaximumRackInletTempUS_Type = Integer32
_AirIRRP500UnitStatusMaximumRackInletTempUS_Object = MibScalar
airIRRP500UnitStatusMaximumRackInletTempUS = _AirIRRP500UnitStatusMaximumRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 2),
    _AirIRRP500UnitStatusMaximumRackInletTempUS_Type()
)
airIRRP500UnitStatusMaximumRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusMaximumRackInletTempUS.setStatus("mandatory")
_AirIRRP500UnitStatusMaximumRackInletTempMetric_Type = Integer32
_AirIRRP500UnitStatusMaximumRackInletTempMetric_Object = MibScalar
airIRRP500UnitStatusMaximumRackInletTempMetric = _AirIRRP500UnitStatusMaximumRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 3),
    _AirIRRP500UnitStatusMaximumRackInletTempMetric_Type()
)
airIRRP500UnitStatusMaximumRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusMaximumRackInletTempMetric.setStatus("mandatory")
_AirIRRP500UnitStatusSupplyAirTempUS_Type = Integer32
_AirIRRP500UnitStatusSupplyAirTempUS_Object = MibScalar
airIRRP500UnitStatusSupplyAirTempUS = _AirIRRP500UnitStatusSupplyAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 4),
    _AirIRRP500UnitStatusSupplyAirTempUS_Type()
)
airIRRP500UnitStatusSupplyAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusSupplyAirTempUS.setStatus("mandatory")
_AirIRRP500UnitStatusSupplyAirTempMetric_Type = Integer32
_AirIRRP500UnitStatusSupplyAirTempMetric_Object = MibScalar
airIRRP500UnitStatusSupplyAirTempMetric = _AirIRRP500UnitStatusSupplyAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 5),
    _AirIRRP500UnitStatusSupplyAirTempMetric_Type()
)
airIRRP500UnitStatusSupplyAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusSupplyAirTempMetric.setStatus("mandatory")
_AirIRRP500UnitStatusReturnAirTempUS_Type = Integer32
_AirIRRP500UnitStatusReturnAirTempUS_Object = MibScalar
airIRRP500UnitStatusReturnAirTempUS = _AirIRRP500UnitStatusReturnAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 6),
    _AirIRRP500UnitStatusReturnAirTempUS_Type()
)
airIRRP500UnitStatusReturnAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusReturnAirTempUS.setStatus("mandatory")
_AirIRRP500UnitStatusReturnAirTempMetric_Type = Integer32
_AirIRRP500UnitStatusReturnAirTempMetric_Object = MibScalar
airIRRP500UnitStatusReturnAirTempMetric = _AirIRRP500UnitStatusReturnAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 7),
    _AirIRRP500UnitStatusReturnAirTempMetric_Type()
)
airIRRP500UnitStatusReturnAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusReturnAirTempMetric.setStatus("mandatory")
_AirIRRP500UnitStatusSupplyHumidity_Type = Integer32
_AirIRRP500UnitStatusSupplyHumidity_Object = MibScalar
airIRRP500UnitStatusSupplyHumidity = _AirIRRP500UnitStatusSupplyHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 8),
    _AirIRRP500UnitStatusSupplyHumidity_Type()
)
airIRRP500UnitStatusSupplyHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusSupplyHumidity.setStatus("mandatory")
_AirIRRP500UnitStatusReturnHumidity_Type = Integer32
_AirIRRP500UnitStatusReturnHumidity_Object = MibScalar
airIRRP500UnitStatusReturnHumidity = _AirIRRP500UnitStatusReturnHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 9),
    _AirIRRP500UnitStatusReturnHumidity_Type()
)
airIRRP500UnitStatusReturnHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusReturnHumidity.setStatus("mandatory")
_AirIRRP500UnitStatusAirFlowUS_Type = Integer32
_AirIRRP500UnitStatusAirFlowUS_Object = MibScalar
airIRRP500UnitStatusAirFlowUS = _AirIRRP500UnitStatusAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 10),
    _AirIRRP500UnitStatusAirFlowUS_Type()
)
airIRRP500UnitStatusAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusAirFlowUS.setStatus("mandatory")
_AirIRRP500UnitStatusAirFlowMetric_Type = Integer32
_AirIRRP500UnitStatusAirFlowMetric_Object = MibScalar
airIRRP500UnitStatusAirFlowMetric = _AirIRRP500UnitStatusAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 11),
    _AirIRRP500UnitStatusAirFlowMetric_Type()
)
airIRRP500UnitStatusAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusAirFlowMetric.setStatus("mandatory")
_AirIRRP500UnitStatusFanSpeed_Type = Integer32
_AirIRRP500UnitStatusFanSpeed_Object = MibScalar
airIRRP500UnitStatusFanSpeed = _AirIRRP500UnitStatusFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 12),
    _AirIRRP500UnitStatusFanSpeed_Type()
)
airIRRP500UnitStatusFanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusFanSpeed.setStatus("mandatory")
_AirIRRP500UnitStatusCoolDemand_Type = Integer32
_AirIRRP500UnitStatusCoolDemand_Object = MibScalar
airIRRP500UnitStatusCoolDemand = _AirIRRP500UnitStatusCoolDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 13),
    _AirIRRP500UnitStatusCoolDemand_Type()
)
airIRRP500UnitStatusCoolDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusCoolDemand.setStatus("mandatory")
_AirIRRP500UnitStatusCoolOutput_Type = Integer32
_AirIRRP500UnitStatusCoolOutput_Object = MibScalar
airIRRP500UnitStatusCoolOutput = _AirIRRP500UnitStatusCoolOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 14),
    _AirIRRP500UnitStatusCoolOutput_Type()
)
airIRRP500UnitStatusCoolOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusCoolOutput.setStatus("mandatory")
_AirIRRP500UnitStatusHumidifyDemand_Type = Integer32
_AirIRRP500UnitStatusHumidifyDemand_Object = MibScalar
airIRRP500UnitStatusHumidifyDemand = _AirIRRP500UnitStatusHumidifyDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 15),
    _AirIRRP500UnitStatusHumidifyDemand_Type()
)
airIRRP500UnitStatusHumidifyDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusHumidifyDemand.setStatus("mandatory")
_AirIRRP500UnitStatusHumidifyOutput_Type = Integer32
_AirIRRP500UnitStatusHumidifyOutput_Object = MibScalar
airIRRP500UnitStatusHumidifyOutput = _AirIRRP500UnitStatusHumidifyOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 16),
    _AirIRRP500UnitStatusHumidifyOutput_Type()
)
airIRRP500UnitStatusHumidifyOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusHumidifyOutput.setStatus("mandatory")
_AirIRRP500UnitStatusDehumidifyDemand_Type = Integer32
_AirIRRP500UnitStatusDehumidifyDemand_Object = MibScalar
airIRRP500UnitStatusDehumidifyDemand = _AirIRRP500UnitStatusDehumidifyDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 17),
    _AirIRRP500UnitStatusDehumidifyDemand_Type()
)
airIRRP500UnitStatusDehumidifyDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusDehumidifyDemand.setStatus("mandatory")
_AirIRRP500UnitStatusDehumidifyOutput_Type = Integer32
_AirIRRP500UnitStatusDehumidifyOutput_Object = MibScalar
airIRRP500UnitStatusDehumidifyOutput = _AirIRRP500UnitStatusDehumidifyOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 18),
    _AirIRRP500UnitStatusDehumidifyOutput_Type()
)
airIRRP500UnitStatusDehumidifyOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusDehumidifyOutput.setStatus("mandatory")
_AirIRRP500UnitStatusReheatDemand_Type = Integer32
_AirIRRP500UnitStatusReheatDemand_Object = MibScalar
airIRRP500UnitStatusReheatDemand = _AirIRRP500UnitStatusReheatDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 19),
    _AirIRRP500UnitStatusReheatDemand_Type()
)
airIRRP500UnitStatusReheatDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusReheatDemand.setStatus("mandatory")
_AirIRRP500UnitStatusReheatOutput_Type = Integer32
_AirIRRP500UnitStatusReheatOutput_Object = MibScalar
airIRRP500UnitStatusReheatOutput = _AirIRRP500UnitStatusReheatOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 20),
    _AirIRRP500UnitStatusReheatOutput_Type()
)
airIRRP500UnitStatusReheatOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusReheatOutput.setStatus("mandatory")


class _AirIRRP500UnitStatusInputState_Type(Integer32):
    """Custom type airIRRP500UnitStatusInputState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRRP500UnitStatusInputState_Type.__name__ = "Integer32"
_AirIRRP500UnitStatusInputState_Object = MibScalar
airIRRP500UnitStatusInputState = _AirIRRP500UnitStatusInputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 21),
    _AirIRRP500UnitStatusInputState_Type()
)
airIRRP500UnitStatusInputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusInputState.setStatus("mandatory")


class _AirIRRP500UnitStatusOutputState_Type(Integer32):
    """Custom type airIRRP500UnitStatusOutputState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRRP500UnitStatusOutputState_Type.__name__ = "Integer32"
_AirIRRP500UnitStatusOutputState_Object = MibScalar
airIRRP500UnitStatusOutputState = _AirIRRP500UnitStatusOutputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 22),
    _AirIRRP500UnitStatusOutputState_Type()
)
airIRRP500UnitStatusOutputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusOutputState.setStatus("mandatory")
_AirIRRP500UnitStatusRackInletTemperature1US_Type = Integer32
_AirIRRP500UnitStatusRackInletTemperature1US_Object = MibScalar
airIRRP500UnitStatusRackInletTemperature1US = _AirIRRP500UnitStatusRackInletTemperature1US_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 23),
    _AirIRRP500UnitStatusRackInletTemperature1US_Type()
)
airIRRP500UnitStatusRackInletTemperature1US.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusRackInletTemperature1US.setStatus("mandatory")
_AirIRRP500UnitStatusRackInletTemperature1Metric_Type = Integer32
_AirIRRP500UnitStatusRackInletTemperature1Metric_Object = MibScalar
airIRRP500UnitStatusRackInletTemperature1Metric = _AirIRRP500UnitStatusRackInletTemperature1Metric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 24),
    _AirIRRP500UnitStatusRackInletTemperature1Metric_Type()
)
airIRRP500UnitStatusRackInletTemperature1Metric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusRackInletTemperature1Metric.setStatus("mandatory")
_AirIRRP500UnitStatusRackInletTemperature2US_Type = Integer32
_AirIRRP500UnitStatusRackInletTemperature2US_Object = MibScalar
airIRRP500UnitStatusRackInletTemperature2US = _AirIRRP500UnitStatusRackInletTemperature2US_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 25),
    _AirIRRP500UnitStatusRackInletTemperature2US_Type()
)
airIRRP500UnitStatusRackInletTemperature2US.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusRackInletTemperature2US.setStatus("mandatory")
_AirIRRP500UnitStatusRackInletTemperature2Metric_Type = Integer32
_AirIRRP500UnitStatusRackInletTemperature2Metric_Object = MibScalar
airIRRP500UnitStatusRackInletTemperature2Metric = _AirIRRP500UnitStatusRackInletTemperature2Metric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 26),
    _AirIRRP500UnitStatusRackInletTemperature2Metric_Type()
)
airIRRP500UnitStatusRackInletTemperature2Metric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusRackInletTemperature2Metric.setStatus("mandatory")
_AirIRRP500UnitStatusRackInletTemperature3US_Type = Integer32
_AirIRRP500UnitStatusRackInletTemperature3US_Object = MibScalar
airIRRP500UnitStatusRackInletTemperature3US = _AirIRRP500UnitStatusRackInletTemperature3US_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 27),
    _AirIRRP500UnitStatusRackInletTemperature3US_Type()
)
airIRRP500UnitStatusRackInletTemperature3US.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusRackInletTemperature3US.setStatus("mandatory")
_AirIRRP500UnitStatusRackInletTemperature3Metric_Type = Integer32
_AirIRRP500UnitStatusRackInletTemperature3Metric_Object = MibScalar
airIRRP500UnitStatusRackInletTemperature3Metric = _AirIRRP500UnitStatusRackInletTemperature3Metric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 28),
    _AirIRRP500UnitStatusRackInletTemperature3Metric_Type()
)
airIRRP500UnitStatusRackInletTemperature3Metric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusRackInletTemperature3Metric.setStatus("mandatory")
_AirIRRP500UnitStatusContainmtDPUS_Type = Integer32
_AirIRRP500UnitStatusContainmtDPUS_Object = MibScalar
airIRRP500UnitStatusContainmtDPUS = _AirIRRP500UnitStatusContainmtDPUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 29),
    _AirIRRP500UnitStatusContainmtDPUS_Type()
)
airIRRP500UnitStatusContainmtDPUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusContainmtDPUS.setStatus("mandatory")
_AirIRRP500UnitStatusContainmtDPMetric_Type = Integer32
_AirIRRP500UnitStatusContainmtDPMetric_Object = MibScalar
airIRRP500UnitStatusContainmtDPMetric = _AirIRRP500UnitStatusContainmtDPMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 30),
    _AirIRRP500UnitStatusContainmtDPMetric_Type()
)
airIRRP500UnitStatusContainmtDPMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusContainmtDPMetric.setStatus("mandatory")
_AirIRRP500UnitStatusFilterDPUS_Type = Integer32
_AirIRRP500UnitStatusFilterDPUS_Object = MibScalar
airIRRP500UnitStatusFilterDPUS = _AirIRRP500UnitStatusFilterDPUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 31),
    _AirIRRP500UnitStatusFilterDPUS_Type()
)
airIRRP500UnitStatusFilterDPUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusFilterDPUS.setStatus("mandatory")
_AirIRRP500UnitStatusFilterDPMetric_Type = Integer32
_AirIRRP500UnitStatusFilterDPMetric_Object = MibScalar
airIRRP500UnitStatusFilterDPMetric = _AirIRRP500UnitStatusFilterDPMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 32),
    _AirIRRP500UnitStatusFilterDPMetric_Type()
)
airIRRP500UnitStatusFilterDPMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusFilterDPMetric.setStatus("mandatory")
_AirIRRP500UnitStatusHumidifierCurrent_Type = Integer32
_AirIRRP500UnitStatusHumidifierCurrent_Object = MibScalar
airIRRP500UnitStatusHumidifierCurrent = _AirIRRP500UnitStatusHumidifierCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 33),
    _AirIRRP500UnitStatusHumidifierCurrent_Type()
)
airIRRP500UnitStatusHumidifierCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusHumidifierCurrent.setStatus("mandatory")
_AirIRRP500UnitStatusHumidifierWaterConductivity_Type = Integer32
_AirIRRP500UnitStatusHumidifierWaterConductivity_Object = MibScalar
airIRRP500UnitStatusHumidifierWaterConductivity = _AirIRRP500UnitStatusHumidifierWaterConductivity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 34),
    _AirIRRP500UnitStatusHumidifierWaterConductivity_Type()
)
airIRRP500UnitStatusHumidifierWaterConductivity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusHumidifierWaterConductivity.setStatus("mandatory")


class _AirIRRP500UnitStatusActivePowerSource_Type(Integer32):
    """Custom type airIRRP500UnitStatusActivePowerSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sourceA", 1),
          ("sourceB", 2))
    )


_AirIRRP500UnitStatusActivePowerSource_Type.__name__ = "Integer32"
_AirIRRP500UnitStatusActivePowerSource_Object = MibScalar
airIRRP500UnitStatusActivePowerSource = _AirIRRP500UnitStatusActivePowerSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 35),
    _AirIRRP500UnitStatusActivePowerSource_Type()
)
airIRRP500UnitStatusActivePowerSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusActivePowerSource.setStatus("mandatory")
_AirIRRP500UnitStatusFluidValvePosition_Type = Integer32
_AirIRRP500UnitStatusFluidValvePosition_Object = MibScalar
airIRRP500UnitStatusFluidValvePosition = _AirIRRP500UnitStatusFluidValvePosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 36),
    _AirIRRP500UnitStatusFluidValvePosition_Type()
)
airIRRP500UnitStatusFluidValvePosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusFluidValvePosition.setStatus("mandatory")
_AirIRRP500UnitStatusFluidFlowUS_Type = Integer32
_AirIRRP500UnitStatusFluidFlowUS_Object = MibScalar
airIRRP500UnitStatusFluidFlowUS = _AirIRRP500UnitStatusFluidFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 37),
    _AirIRRP500UnitStatusFluidFlowUS_Type()
)
airIRRP500UnitStatusFluidFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusFluidFlowUS.setStatus("mandatory")
_AirIRRP500UnitStatusFluidFlowMetric_Type = Integer32
_AirIRRP500UnitStatusFluidFlowMetric_Object = MibScalar
airIRRP500UnitStatusFluidFlowMetric = _AirIRRP500UnitStatusFluidFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 38),
    _AirIRRP500UnitStatusFluidFlowMetric_Type()
)
airIRRP500UnitStatusFluidFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusFluidFlowMetric.setStatus("mandatory")
_AirIRRP500UnitStatusEnteringFluidTemperatureUS_Type = Integer32
_AirIRRP500UnitStatusEnteringFluidTemperatureUS_Object = MibScalar
airIRRP500UnitStatusEnteringFluidTemperatureUS = _AirIRRP500UnitStatusEnteringFluidTemperatureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 39),
    _AirIRRP500UnitStatusEnteringFluidTemperatureUS_Type()
)
airIRRP500UnitStatusEnteringFluidTemperatureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusEnteringFluidTemperatureUS.setStatus("mandatory")
_AirIRRP500UnitStatusEnteringFluidTemperatureMetric_Type = Integer32
_AirIRRP500UnitStatusEnteringFluidTemperatureMetric_Object = MibScalar
airIRRP500UnitStatusEnteringFluidTemperatureMetric = _AirIRRP500UnitStatusEnteringFluidTemperatureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 40),
    _AirIRRP500UnitStatusEnteringFluidTemperatureMetric_Type()
)
airIRRP500UnitStatusEnteringFluidTemperatureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusEnteringFluidTemperatureMetric.setStatus("mandatory")
_AirIRRP500UnitStatusLeavingFluidTemperatureUS_Type = Integer32
_AirIRRP500UnitStatusLeavingFluidTemperatureUS_Object = MibScalar
airIRRP500UnitStatusLeavingFluidTemperatureUS = _AirIRRP500UnitStatusLeavingFluidTemperatureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 41),
    _AirIRRP500UnitStatusLeavingFluidTemperatureUS_Type()
)
airIRRP500UnitStatusLeavingFluidTemperatureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusLeavingFluidTemperatureUS.setStatus("mandatory")
_AirIRRP500UnitStatusLeavingFluidTemperatureMetric_Type = Integer32
_AirIRRP500UnitStatusLeavingFluidTemperatureMetric_Object = MibScalar
airIRRP500UnitStatusLeavingFluidTemperatureMetric = _AirIRRP500UnitStatusLeavingFluidTemperatureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 2, 42),
    _AirIRRP500UnitStatusLeavingFluidTemperatureMetric_Type()
)
airIRRP500UnitStatusLeavingFluidTemperatureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitStatusLeavingFluidTemperatureMetric.setStatus("mandatory")
_AirIRRP500UnitRunHours_ObjectIdentity = ObjectIdentity
airIRRP500UnitRunHours = _AirIRRP500UnitRunHours_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3)
)
_AirIRRP500UnitRunHoursAirFilter_Type = Integer32
_AirIRRP500UnitRunHoursAirFilter_Object = MibScalar
airIRRP500UnitRunHoursAirFilter = _AirIRRP500UnitRunHoursAirFilter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 1),
    _AirIRRP500UnitRunHoursAirFilter_Type()
)
airIRRP500UnitRunHoursAirFilter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitRunHoursAirFilter.setStatus("mandatory")
_AirIRRP500UnitRunHoursCondensatePump_Type = Integer32
_AirIRRP500UnitRunHoursCondensatePump_Object = MibScalar
airIRRP500UnitRunHoursCondensatePump = _AirIRRP500UnitRunHoursCondensatePump_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 2),
    _AirIRRP500UnitRunHoursCondensatePump_Type()
)
airIRRP500UnitRunHoursCondensatePump.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitRunHoursCondensatePump.setStatus("mandatory")
_AirIRRP500UnitRunHoursHumidifier_Type = Integer32
_AirIRRP500UnitRunHoursHumidifier_Object = MibScalar
airIRRP500UnitRunHoursHumidifier = _AirIRRP500UnitRunHoursHumidifier_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 3),
    _AirIRRP500UnitRunHoursHumidifier_Type()
)
airIRRP500UnitRunHoursHumidifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitRunHoursHumidifier.setStatus("mandatory")
_AirIRRP500UnitRunHoursFan1_Type = Integer32
_AirIRRP500UnitRunHoursFan1_Object = MibScalar
airIRRP500UnitRunHoursFan1 = _AirIRRP500UnitRunHoursFan1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 4),
    _AirIRRP500UnitRunHoursFan1_Type()
)
airIRRP500UnitRunHoursFan1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitRunHoursFan1.setStatus("mandatory")
_AirIRRP500UnitRunHoursHeater1_Type = Integer32
_AirIRRP500UnitRunHoursHeater1_Object = MibScalar
airIRRP500UnitRunHoursHeater1 = _AirIRRP500UnitRunHoursHeater1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 5),
    _AirIRRP500UnitRunHoursHeater1_Type()
)
airIRRP500UnitRunHoursHeater1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitRunHoursHeater1.setStatus("mandatory")
_AirIRRP500UnitRunHoursFan2_Type = Integer32
_AirIRRP500UnitRunHoursFan2_Object = MibScalar
airIRRP500UnitRunHoursFan2 = _AirIRRP500UnitRunHoursFan2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 6),
    _AirIRRP500UnitRunHoursFan2_Type()
)
airIRRP500UnitRunHoursFan2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitRunHoursFan2.setStatus("mandatory")
_AirIRRP500UnitRunHoursHeater2_Type = Integer32
_AirIRRP500UnitRunHoursHeater2_Object = MibScalar
airIRRP500UnitRunHoursHeater2 = _AirIRRP500UnitRunHoursHeater2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 7),
    _AirIRRP500UnitRunHoursHeater2_Type()
)
airIRRP500UnitRunHoursHeater2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitRunHoursHeater2.setStatus("mandatory")
_AirIRRP500UnitRunHoursFan3_Type = Integer32
_AirIRRP500UnitRunHoursFan3_Object = MibScalar
airIRRP500UnitRunHoursFan3 = _AirIRRP500UnitRunHoursFan3_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 8),
    _AirIRRP500UnitRunHoursFan3_Type()
)
airIRRP500UnitRunHoursFan3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitRunHoursFan3.setStatus("mandatory")
_AirIRRP500UnitRunHoursHeater3_Type = Integer32
_AirIRRP500UnitRunHoursHeater3_Object = MibScalar
airIRRP500UnitRunHoursHeater3 = _AirIRRP500UnitRunHoursHeater3_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 3, 9),
    _AirIRRP500UnitRunHoursHeater3_Type()
)
airIRRP500UnitRunHoursHeater3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRRP500UnitRunHoursHeater3.setStatus("mandatory")
_AirIRRP500UnitServiceIntervals_ObjectIdentity = ObjectIdentity
airIRRP500UnitServiceIntervals = _AirIRRP500UnitServiceIntervals_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4)
)
_AirIRRP500UnitServiceIntervalAirFilter_Type = Integer32
_AirIRRP500UnitServiceIntervalAirFilter_Object = MibScalar
airIRRP500UnitServiceIntervalAirFilter = _AirIRRP500UnitServiceIntervalAirFilter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 1),
    _AirIRRP500UnitServiceIntervalAirFilter_Type()
)
airIRRP500UnitServiceIntervalAirFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitServiceIntervalAirFilter.setStatus("mandatory")


class _AirIRRP500UnitServiceIntervalAirFilterAlarm_Type(Integer32):
    """Custom type airIRRP500UnitServiceIntervalAirFilterAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP500UnitServiceIntervalAirFilterAlarm_Type.__name__ = "Integer32"
_AirIRRP500UnitServiceIntervalAirFilterAlarm_Object = MibScalar
airIRRP500UnitServiceIntervalAirFilterAlarm = _AirIRRP500UnitServiceIntervalAirFilterAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 2),
    _AirIRRP500UnitServiceIntervalAirFilterAlarm_Type()
)
airIRRP500UnitServiceIntervalAirFilterAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitServiceIntervalAirFilterAlarm.setStatus("mandatory")
_AirIRRP500UnitServiceIntervalHumidifier_Type = Integer32
_AirIRRP500UnitServiceIntervalHumidifier_Object = MibScalar
airIRRP500UnitServiceIntervalHumidifier = _AirIRRP500UnitServiceIntervalHumidifier_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 3),
    _AirIRRP500UnitServiceIntervalHumidifier_Type()
)
airIRRP500UnitServiceIntervalHumidifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitServiceIntervalHumidifier.setStatus("mandatory")


class _AirIRRP500UnitServiceIntervalHumidifierAlarm_Type(Integer32):
    """Custom type airIRRP500UnitServiceIntervalHumidifierAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP500UnitServiceIntervalHumidifierAlarm_Type.__name__ = "Integer32"
_AirIRRP500UnitServiceIntervalHumidifierAlarm_Object = MibScalar
airIRRP500UnitServiceIntervalHumidifierAlarm = _AirIRRP500UnitServiceIntervalHumidifierAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 4),
    _AirIRRP500UnitServiceIntervalHumidifierAlarm_Type()
)
airIRRP500UnitServiceIntervalHumidifierAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitServiceIntervalHumidifierAlarm.setStatus("mandatory")
_AirIRRP500UnitServiceIntervalHeater_Type = Integer32
_AirIRRP500UnitServiceIntervalHeater_Object = MibScalar
airIRRP500UnitServiceIntervalHeater = _AirIRRP500UnitServiceIntervalHeater_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 5),
    _AirIRRP500UnitServiceIntervalHeater_Type()
)
airIRRP500UnitServiceIntervalHeater.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitServiceIntervalHeater.setStatus("mandatory")


class _AirIRRP500UnitServiceIntervalHeaterAlarm_Type(Integer32):
    """Custom type airIRRP500UnitServiceIntervalHeaterAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP500UnitServiceIntervalHeaterAlarm_Type.__name__ = "Integer32"
_AirIRRP500UnitServiceIntervalHeaterAlarm_Object = MibScalar
airIRRP500UnitServiceIntervalHeaterAlarm = _AirIRRP500UnitServiceIntervalHeaterAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 6),
    _AirIRRP500UnitServiceIntervalHeaterAlarm_Type()
)
airIRRP500UnitServiceIntervalHeaterAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitServiceIntervalHeaterAlarm.setStatus("mandatory")
_AirIRRP500UnitServiceIntervalCondensatePump_Type = Integer32
_AirIRRP500UnitServiceIntervalCondensatePump_Object = MibScalar
airIRRP500UnitServiceIntervalCondensatePump = _AirIRRP500UnitServiceIntervalCondensatePump_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 7),
    _AirIRRP500UnitServiceIntervalCondensatePump_Type()
)
airIRRP500UnitServiceIntervalCondensatePump.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitServiceIntervalCondensatePump.setStatus("mandatory")


class _AirIRRP500UnitServiceIntervalCondensatePumpAlarm_Type(Integer32):
    """Custom type airIRRP500UnitServiceIntervalCondensatePumpAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP500UnitServiceIntervalCondensatePumpAlarm_Type.__name__ = "Integer32"
_AirIRRP500UnitServiceIntervalCondensatePumpAlarm_Object = MibScalar
airIRRP500UnitServiceIntervalCondensatePumpAlarm = _AirIRRP500UnitServiceIntervalCondensatePumpAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 8),
    _AirIRRP500UnitServiceIntervalCondensatePumpAlarm_Type()
)
airIRRP500UnitServiceIntervalCondensatePumpAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitServiceIntervalCondensatePumpAlarm.setStatus("mandatory")
_AirIRRP500UnitServiceIntervalFans_Type = Integer32
_AirIRRP500UnitServiceIntervalFans_Object = MibScalar
airIRRP500UnitServiceIntervalFans = _AirIRRP500UnitServiceIntervalFans_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 9),
    _AirIRRP500UnitServiceIntervalFans_Type()
)
airIRRP500UnitServiceIntervalFans.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitServiceIntervalFans.setStatus("mandatory")


class _AirIRRP500UnitServiceIntervalFansAlarm_Type(Integer32):
    """Custom type airIRRP500UnitServiceIntervalFansAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP500UnitServiceIntervalFansAlarm_Type.__name__ = "Integer32"
_AirIRRP500UnitServiceIntervalFansAlarm_Object = MibScalar
airIRRP500UnitServiceIntervalFansAlarm = _AirIRRP500UnitServiceIntervalFansAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 4, 10),
    _AirIRRP500UnitServiceIntervalFansAlarm_Type()
)
airIRRP500UnitServiceIntervalFansAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitServiceIntervalFansAlarm.setStatus("mandatory")
_AirIRRP500UnitThresholds_ObjectIdentity = ObjectIdentity
airIRRP500UnitThresholds = _AirIRRP500UnitThresholds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5)
)
_AirIRRP500UnitThresholdsRackInletHighTempUS_Type = Integer32
_AirIRRP500UnitThresholdsRackInletHighTempUS_Object = MibScalar
airIRRP500UnitThresholdsRackInletHighTempUS = _AirIRRP500UnitThresholdsRackInletHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 1),
    _AirIRRP500UnitThresholdsRackInletHighTempUS_Type()
)
airIRRP500UnitThresholdsRackInletHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitThresholdsRackInletHighTempUS.setStatus("mandatory")
_AirIRRP500UnitThresholdsRackInletHighTempMetric_Type = Integer32
_AirIRRP500UnitThresholdsRackInletHighTempMetric_Object = MibScalar
airIRRP500UnitThresholdsRackInletHighTempMetric = _AirIRRP500UnitThresholdsRackInletHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 2),
    _AirIRRP500UnitThresholdsRackInletHighTempMetric_Type()
)
airIRRP500UnitThresholdsRackInletHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitThresholdsRackInletHighTempMetric.setStatus("mandatory")
_AirIRRP500UnitThresholdsSupplyAirHighTempUS_Type = Integer32
_AirIRRP500UnitThresholdsSupplyAirHighTempUS_Object = MibScalar
airIRRP500UnitThresholdsSupplyAirHighTempUS = _AirIRRP500UnitThresholdsSupplyAirHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 3),
    _AirIRRP500UnitThresholdsSupplyAirHighTempUS_Type()
)
airIRRP500UnitThresholdsSupplyAirHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitThresholdsSupplyAirHighTempUS.setStatus("mandatory")
_AirIRRP500UnitThresholdsSupplyAirHighTempMetric_Type = Integer32
_AirIRRP500UnitThresholdsSupplyAirHighTempMetric_Object = MibScalar
airIRRP500UnitThresholdsSupplyAirHighTempMetric = _AirIRRP500UnitThresholdsSupplyAirHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 4),
    _AirIRRP500UnitThresholdsSupplyAirHighTempMetric_Type()
)
airIRRP500UnitThresholdsSupplyAirHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitThresholdsSupplyAirHighTempMetric.setStatus("mandatory")
_AirIRRP500UnitThresholdsReturnAirHighTempUS_Type = Integer32
_AirIRRP500UnitThresholdsReturnAirHighTempUS_Object = MibScalar
airIRRP500UnitThresholdsReturnAirHighTempUS = _AirIRRP500UnitThresholdsReturnAirHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 5),
    _AirIRRP500UnitThresholdsReturnAirHighTempUS_Type()
)
airIRRP500UnitThresholdsReturnAirHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitThresholdsReturnAirHighTempUS.setStatus("mandatory")
_AirIRRP500UnitThresholdsReturnAirHighTempMetric_Type = Integer32
_AirIRRP500UnitThresholdsReturnAirHighTempMetric_Object = MibScalar
airIRRP500UnitThresholdsReturnAirHighTempMetric = _AirIRRP500UnitThresholdsReturnAirHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 6),
    _AirIRRP500UnitThresholdsReturnAirHighTempMetric_Type()
)
airIRRP500UnitThresholdsReturnAirHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitThresholdsReturnAirHighTempMetric.setStatus("mandatory")
_AirIRRP500UnitThresholdsSupplyHumidityHigh_Type = Integer32
_AirIRRP500UnitThresholdsSupplyHumidityHigh_Object = MibScalar
airIRRP500UnitThresholdsSupplyHumidityHigh = _AirIRRP500UnitThresholdsSupplyHumidityHigh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 7),
    _AirIRRP500UnitThresholdsSupplyHumidityHigh_Type()
)
airIRRP500UnitThresholdsSupplyHumidityHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitThresholdsSupplyHumidityHigh.setStatus("mandatory")
_AirIRRP500UnitThresholdsSupplyHumidityLow_Type = Integer32
_AirIRRP500UnitThresholdsSupplyHumidityLow_Object = MibScalar
airIRRP500UnitThresholdsSupplyHumidityLow = _AirIRRP500UnitThresholdsSupplyHumidityLow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 8),
    _AirIRRP500UnitThresholdsSupplyHumidityLow_Type()
)
airIRRP500UnitThresholdsSupplyHumidityLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitThresholdsSupplyHumidityLow.setStatus("mandatory")
_AirIRRP500UnitThresholdsEnteringFluidHighTempUS_Type = Integer32
_AirIRRP500UnitThresholdsEnteringFluidHighTempUS_Object = MibScalar
airIRRP500UnitThresholdsEnteringFluidHighTempUS = _AirIRRP500UnitThresholdsEnteringFluidHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 9),
    _AirIRRP500UnitThresholdsEnteringFluidHighTempUS_Type()
)
airIRRP500UnitThresholdsEnteringFluidHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitThresholdsEnteringFluidHighTempUS.setStatus("mandatory")
_AirIRRP500UnitThresholdsEnteringFluidHighTempMetric_Type = Integer32
_AirIRRP500UnitThresholdsEnteringFluidHighTempMetric_Object = MibScalar
airIRRP500UnitThresholdsEnteringFluidHighTempMetric = _AirIRRP500UnitThresholdsEnteringFluidHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 5, 10),
    _AirIRRP500UnitThresholdsEnteringFluidHighTempMetric_Type()
)
airIRRP500UnitThresholdsEnteringFluidHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitThresholdsEnteringFluidHighTempMetric.setStatus("mandatory")
_AirIRRP500UnitConfig_ObjectIdentity = ObjectIdentity
airIRRP500UnitConfig = _AirIRRP500UnitConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6)
)
_AirIRRP500UnitConfigStartupDelay_Type = Integer32
_AirIRRP500UnitConfigStartupDelay_Object = MibScalar
airIRRP500UnitConfigStartupDelay = _AirIRRP500UnitConfigStartupDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 1),
    _AirIRRP500UnitConfigStartupDelay_Type()
)
airIRRP500UnitConfigStartupDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitConfigStartupDelay.setStatus("mandatory")


class _AirIRRP500UnitConfigCoolCapacity_Type(Integer32):
    """Custom type airIRRP500UnitConfigCoolCapacity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("maximum", 2))
    )


_AirIRRP500UnitConfigCoolCapacity_Type.__name__ = "Integer32"
_AirIRRP500UnitConfigCoolCapacity_Object = MibScalar
airIRRP500UnitConfigCoolCapacity = _AirIRRP500UnitConfigCoolCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 2),
    _AirIRRP500UnitConfigCoolCapacity_Type()
)
airIRRP500UnitConfigCoolCapacity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitConfigCoolCapacity.setStatus("mandatory")


class _AirIRRP500UnitConfigIdleOnLeakDetect_Type(Integer32):
    """Custom type airIRRP500UnitConfigIdleOnLeakDetect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_AirIRRP500UnitConfigIdleOnLeakDetect_Type.__name__ = "Integer32"
_AirIRRP500UnitConfigIdleOnLeakDetect_Object = MibScalar
airIRRP500UnitConfigIdleOnLeakDetect = _AirIRRP500UnitConfigIdleOnLeakDetect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 3),
    _AirIRRP500UnitConfigIdleOnLeakDetect_Type()
)
airIRRP500UnitConfigIdleOnLeakDetect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitConfigIdleOnLeakDetect.setStatus("mandatory")


class _AirIRRP500UnitConfigInputNormalState_Type(Integer32):
    """Custom type airIRRP500UnitConfigInputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRRP500UnitConfigInputNormalState_Type.__name__ = "Integer32"
_AirIRRP500UnitConfigInputNormalState_Object = MibScalar
airIRRP500UnitConfigInputNormalState = _AirIRRP500UnitConfigInputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 4),
    _AirIRRP500UnitConfigInputNormalState_Type()
)
airIRRP500UnitConfigInputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitConfigInputNormalState.setStatus("mandatory")


class _AirIRRP500UnitConfigOutputNormalState_Type(Integer32):
    """Custom type airIRRP500UnitConfigOutputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRRP500UnitConfigOutputNormalState_Type.__name__ = "Integer32"
_AirIRRP500UnitConfigOutputNormalState_Object = MibScalar
airIRRP500UnitConfigOutputNormalState = _AirIRRP500UnitConfigOutputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 5),
    _AirIRRP500UnitConfigOutputNormalState_Type()
)
airIRRP500UnitConfigOutputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitConfigOutputNormalState.setStatus("mandatory")


class _AirIRRP500UnitConfigOutputSource_Type(Integer32):
    """Custom type airIRRP500UnitConfigOutputSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("anyAlarm", 1),
          ("criticalAlarm", 2))
    )


_AirIRRP500UnitConfigOutputSource_Type.__name__ = "Integer32"
_AirIRRP500UnitConfigOutputSource_Object = MibScalar
airIRRP500UnitConfigOutputSource = _AirIRRP500UnitConfigOutputSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 6),
    _AirIRRP500UnitConfigOutputSource_Type()
)
airIRRP500UnitConfigOutputSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitConfigOutputSource.setStatus("mandatory")


class _AirIRRP500UnitConfigHumidifyEnable_Type(Integer32):
    """Custom type airIRRP500UnitConfigHumidifyEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP500UnitConfigHumidifyEnable_Type.__name__ = "Integer32"
_AirIRRP500UnitConfigHumidifyEnable_Object = MibScalar
airIRRP500UnitConfigHumidifyEnable = _AirIRRP500UnitConfigHumidifyEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 7),
    _AirIRRP500UnitConfigHumidifyEnable_Type()
)
airIRRP500UnitConfigHumidifyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitConfigHumidifyEnable.setStatus("mandatory")


class _AirIRRP500UnitConfigHumidifierControl_Type(Integer32):
    """Custom type airIRRP500UnitConfigHumidifierControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("drainOff", 2))
    )


_AirIRRP500UnitConfigHumidifierControl_Type.__name__ = "Integer32"
_AirIRRP500UnitConfigHumidifierControl_Object = MibScalar
airIRRP500UnitConfigHumidifierControl = _AirIRRP500UnitConfigHumidifierControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 8),
    _AirIRRP500UnitConfigHumidifierControl_Type()
)
airIRRP500UnitConfigHumidifierControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitConfigHumidifierControl.setStatus("mandatory")


class _AirIRRP500UnitConfigDehumidifyEnable_Type(Integer32):
    """Custom type airIRRP500UnitConfigDehumidifyEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP500UnitConfigDehumidifyEnable_Type.__name__ = "Integer32"
_AirIRRP500UnitConfigDehumidifyEnable_Object = MibScalar
airIRRP500UnitConfigDehumidifyEnable = _AirIRRP500UnitConfigDehumidifyEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 9),
    _AirIRRP500UnitConfigDehumidifyEnable_Type()
)
airIRRP500UnitConfigDehumidifyEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitConfigDehumidifyEnable.setStatus("mandatory")


class _AirIRRP500UnitConfigReheatEnable_Type(Integer32):
    """Custom type airIRRP500UnitConfigReheatEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP500UnitConfigReheatEnable_Type.__name__ = "Integer32"
_AirIRRP500UnitConfigReheatEnable_Object = MibScalar
airIRRP500UnitConfigReheatEnable = _AirIRRP500UnitConfigReheatEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 10),
    _AirIRRP500UnitConfigReheatEnable_Type()
)
airIRRP500UnitConfigReheatEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitConfigReheatEnable.setStatus("mandatory")


class _AirIRRP500UnitConfigHeatAssistEnable_Type(Integer32):
    """Custom type airIRRP500UnitConfigHeatAssistEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRRP500UnitConfigHeatAssistEnable_Type.__name__ = "Integer32"
_AirIRRP500UnitConfigHeatAssistEnable_Object = MibScalar
airIRRP500UnitConfigHeatAssistEnable = _AirIRRP500UnitConfigHeatAssistEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 3, 2, 2, 6, 11),
    _AirIRRP500UnitConfigHeatAssistEnable_Type()
)
airIRRP500UnitConfigHeatAssistEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRRP500UnitConfigHeatAssistEnable.setStatus("mandatory")
_AirIRSC_ObjectIdentity = ObjectIdentity
airIRSC = _AirIRSC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4)
)
_AirIRSCUnit_ObjectIdentity = ObjectIdentity
airIRSCUnit = _AirIRSCUnit_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1)
)
_AirIRSCUnitIdent_ObjectIdentity = ObjectIdentity
airIRSCUnitIdent = _AirIRSCUnitIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1)
)
_AirIRSCUnitIdentName_Type = DisplayString
_AirIRSCUnitIdentName_Object = MibScalar
airIRSCUnitIdentName = _AirIRSCUnitIdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 1),
    _AirIRSCUnitIdentName_Type()
)
airIRSCUnitIdentName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitIdentName.setStatus("mandatory")
_AirIRSCUnitIdentLocation_Type = DisplayString
_AirIRSCUnitIdentLocation_Object = MibScalar
airIRSCUnitIdentLocation = _AirIRSCUnitIdentLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 2),
    _AirIRSCUnitIdentLocation_Type()
)
airIRSCUnitIdentLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitIdentLocation.setStatus("mandatory")
_AirIRSCUnitIdentModelNumber_Type = DisplayString
_AirIRSCUnitIdentModelNumber_Object = MibScalar
airIRSCUnitIdentModelNumber = _AirIRSCUnitIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 3),
    _AirIRSCUnitIdentModelNumber_Type()
)
airIRSCUnitIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitIdentModelNumber.setStatus("mandatory")
_AirIRSCUnitIdentSerialNumber_Type = DisplayString
_AirIRSCUnitIdentSerialNumber_Object = MibScalar
airIRSCUnitIdentSerialNumber = _AirIRSCUnitIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 4),
    _AirIRSCUnitIdentSerialNumber_Type()
)
airIRSCUnitIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitIdentSerialNumber.setStatus("mandatory")
_AirIRSCUnitIdentFirmwareRevision_Type = DisplayString
_AirIRSCUnitIdentFirmwareRevision_Object = MibScalar
airIRSCUnitIdentFirmwareRevision = _AirIRSCUnitIdentFirmwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 5),
    _AirIRSCUnitIdentFirmwareRevision_Type()
)
airIRSCUnitIdentFirmwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitIdentFirmwareRevision.setStatus("mandatory")
_AirIRSCUnitIdentHardwareRevision_Type = DisplayString
_AirIRSCUnitIdentHardwareRevision_Object = MibScalar
airIRSCUnitIdentHardwareRevision = _AirIRSCUnitIdentHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 6),
    _AirIRSCUnitIdentHardwareRevision_Type()
)
airIRSCUnitIdentHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitIdentHardwareRevision.setStatus("mandatory")
_AirIRSCUnitIdentManufactureDate_Type = DisplayString
_AirIRSCUnitIdentManufactureDate_Object = MibScalar
airIRSCUnitIdentManufactureDate = _AirIRSCUnitIdentManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 1, 7),
    _AirIRSCUnitIdentManufactureDate_Type()
)
airIRSCUnitIdentManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitIdentManufactureDate.setStatus("mandatory")
_AirIRSCUnitStatus_ObjectIdentity = ObjectIdentity
airIRSCUnitStatus = _AirIRSCUnitStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2)
)


class _AirIRSCUnitStatusOperateMode_Type(Integer32):
    """Custom type airIRSCUnitStatusOperateMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("idle", 3),
          ("on", 2),
          ("standby", 1))
    )


_AirIRSCUnitStatusOperateMode_Type.__name__ = "Integer32"
_AirIRSCUnitStatusOperateMode_Object = MibScalar
airIRSCUnitStatusOperateMode = _AirIRSCUnitStatusOperateMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 1),
    _AirIRSCUnitStatusOperateMode_Type()
)
airIRSCUnitStatusOperateMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusOperateMode.setStatus("mandatory")
_AirIRSCUnitStatusCoolOutput_Type = Integer32
_AirIRSCUnitStatusCoolOutput_Object = MibScalar
airIRSCUnitStatusCoolOutput = _AirIRSCUnitStatusCoolOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 2),
    _AirIRSCUnitStatusCoolOutput_Type()
)
airIRSCUnitStatusCoolOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusCoolOutput.setStatus("mandatory")
_AirIRSCUnitStatusCoolDemand_Type = Integer32
_AirIRSCUnitStatusCoolDemand_Object = MibScalar
airIRSCUnitStatusCoolDemand = _AirIRSCUnitStatusCoolDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 3),
    _AirIRSCUnitStatusCoolDemand_Type()
)
airIRSCUnitStatusCoolDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusCoolDemand.setStatus("mandatory")
_AirIRSCUnitStatusAirFlowUS_Type = Integer32
_AirIRSCUnitStatusAirFlowUS_Object = MibScalar
airIRSCUnitStatusAirFlowUS = _AirIRSCUnitStatusAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 4),
    _AirIRSCUnitStatusAirFlowUS_Type()
)
airIRSCUnitStatusAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusAirFlowUS.setStatus("mandatory")
_AirIRSCUnitStatusAirFlowMetric_Type = Integer32
_AirIRSCUnitStatusAirFlowMetric_Object = MibScalar
airIRSCUnitStatusAirFlowMetric = _AirIRSCUnitStatusAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 5),
    _AirIRSCUnitStatusAirFlowMetric_Type()
)
airIRSCUnitStatusAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusAirFlowMetric.setStatus("mandatory")
_AirIRSCUnitStatusRackInletTempUS_Type = Integer32
_AirIRSCUnitStatusRackInletTempUS_Object = MibScalar
airIRSCUnitStatusRackInletTempUS = _AirIRSCUnitStatusRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 6),
    _AirIRSCUnitStatusRackInletTempUS_Type()
)
airIRSCUnitStatusRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusRackInletTempUS.setStatus("mandatory")
_AirIRSCUnitStatusRackInletTempMetric_Type = Integer32
_AirIRSCUnitStatusRackInletTempMetric_Object = MibScalar
airIRSCUnitStatusRackInletTempMetric = _AirIRSCUnitStatusRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 7),
    _AirIRSCUnitStatusRackInletTempMetric_Type()
)
airIRSCUnitStatusRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusRackInletTempMetric.setStatus("mandatory")
_AirIRSCUnitStatusSupplyAirTempUS_Type = Integer32
_AirIRSCUnitStatusSupplyAirTempUS_Object = MibScalar
airIRSCUnitStatusSupplyAirTempUS = _AirIRSCUnitStatusSupplyAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 8),
    _AirIRSCUnitStatusSupplyAirTempUS_Type()
)
airIRSCUnitStatusSupplyAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusSupplyAirTempUS.setStatus("mandatory")
_AirIRSCUnitStatusSupplyAirTempMetric_Type = Integer32
_AirIRSCUnitStatusSupplyAirTempMetric_Object = MibScalar
airIRSCUnitStatusSupplyAirTempMetric = _AirIRSCUnitStatusSupplyAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 9),
    _AirIRSCUnitStatusSupplyAirTempMetric_Type()
)
airIRSCUnitStatusSupplyAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusSupplyAirTempMetric.setStatus("mandatory")
_AirIRSCUnitStatusReturnAirTempUS_Type = Integer32
_AirIRSCUnitStatusReturnAirTempUS_Object = MibScalar
airIRSCUnitStatusReturnAirTempUS = _AirIRSCUnitStatusReturnAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 10),
    _AirIRSCUnitStatusReturnAirTempUS_Type()
)
airIRSCUnitStatusReturnAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusReturnAirTempUS.setStatus("mandatory")
_AirIRSCUnitStatusReturnAirTempMetric_Type = Integer32
_AirIRSCUnitStatusReturnAirTempMetric_Object = MibScalar
airIRSCUnitStatusReturnAirTempMetric = _AirIRSCUnitStatusReturnAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 11),
    _AirIRSCUnitStatusReturnAirTempMetric_Type()
)
airIRSCUnitStatusReturnAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusReturnAirTempMetric.setStatus("mandatory")
_AirIRSCUnitStatusSuctionTempUS_Type = Integer32
_AirIRSCUnitStatusSuctionTempUS_Object = MibScalar
airIRSCUnitStatusSuctionTempUS = _AirIRSCUnitStatusSuctionTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 12),
    _AirIRSCUnitStatusSuctionTempUS_Type()
)
airIRSCUnitStatusSuctionTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusSuctionTempUS.setStatus("mandatory")
_AirIRSCUnitStatusSuctionTempMetric_Type = Integer32
_AirIRSCUnitStatusSuctionTempMetric_Object = MibScalar
airIRSCUnitStatusSuctionTempMetric = _AirIRSCUnitStatusSuctionTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 13),
    _AirIRSCUnitStatusSuctionTempMetric_Type()
)
airIRSCUnitStatusSuctionTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusSuctionTempMetric.setStatus("mandatory")
_AirIRSCUnitStatusSuperheatTempUS_Type = Integer32
_AirIRSCUnitStatusSuperheatTempUS_Object = MibScalar
airIRSCUnitStatusSuperheatTempUS = _AirIRSCUnitStatusSuperheatTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 14),
    _AirIRSCUnitStatusSuperheatTempUS_Type()
)
airIRSCUnitStatusSuperheatTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusSuperheatTempUS.setStatus("mandatory")
_AirIRSCUnitStatusSuperheatTempMetric_Type = Integer32
_AirIRSCUnitStatusSuperheatTempMetric_Object = MibScalar
airIRSCUnitStatusSuperheatTempMetric = _AirIRSCUnitStatusSuperheatTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 15),
    _AirIRSCUnitStatusSuperheatTempMetric_Type()
)
airIRSCUnitStatusSuperheatTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusSuperheatTempMetric.setStatus("mandatory")
_AirIRSCUnitStatusContainmtDPUS_Type = Integer32
_AirIRSCUnitStatusContainmtDPUS_Object = MibScalar
airIRSCUnitStatusContainmtDPUS = _AirIRSCUnitStatusContainmtDPUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 16),
    _AirIRSCUnitStatusContainmtDPUS_Type()
)
airIRSCUnitStatusContainmtDPUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusContainmtDPUS.setStatus("mandatory")
_AirIRSCUnitStatusContainmtDPMetric_Type = Integer32
_AirIRSCUnitStatusContainmtDPMetric_Object = MibScalar
airIRSCUnitStatusContainmtDPMetric = _AirIRSCUnitStatusContainmtDPMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 17),
    _AirIRSCUnitStatusContainmtDPMetric_Type()
)
airIRSCUnitStatusContainmtDPMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusContainmtDPMetric.setStatus("mandatory")
_AirIRSCUnitStatusFilterDPUS_Type = Integer32
_AirIRSCUnitStatusFilterDPUS_Object = MibScalar
airIRSCUnitStatusFilterDPUS = _AirIRSCUnitStatusFilterDPUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 18),
    _AirIRSCUnitStatusFilterDPUS_Type()
)
airIRSCUnitStatusFilterDPUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusFilterDPUS.setStatus("mandatory")
_AirIRSCUnitStatusFilterDPMetric_Type = Integer32
_AirIRSCUnitStatusFilterDPMetric_Object = MibScalar
airIRSCUnitStatusFilterDPMetric = _AirIRSCUnitStatusFilterDPMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 19),
    _AirIRSCUnitStatusFilterDPMetric_Type()
)
airIRSCUnitStatusFilterDPMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusFilterDPMetric.setStatus("mandatory")
_AirIRSCUnitStatusSuctionPressureUS_Type = Integer32
_AirIRSCUnitStatusSuctionPressureUS_Object = MibScalar
airIRSCUnitStatusSuctionPressureUS = _AirIRSCUnitStatusSuctionPressureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 20),
    _AirIRSCUnitStatusSuctionPressureUS_Type()
)
airIRSCUnitStatusSuctionPressureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusSuctionPressureUS.setStatus("mandatory")
_AirIRSCUnitStatusSuctionPressureMetric_Type = Integer32
_AirIRSCUnitStatusSuctionPressureMetric_Object = MibScalar
airIRSCUnitStatusSuctionPressureMetric = _AirIRSCUnitStatusSuctionPressureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 21),
    _AirIRSCUnitStatusSuctionPressureMetric_Type()
)
airIRSCUnitStatusSuctionPressureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusSuctionPressureMetric.setStatus("mandatory")
_AirIRSCUnitStatusDischargePressureUS_Type = Integer32
_AirIRSCUnitStatusDischargePressureUS_Object = MibScalar
airIRSCUnitStatusDischargePressureUS = _AirIRSCUnitStatusDischargePressureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 22),
    _AirIRSCUnitStatusDischargePressureUS_Type()
)
airIRSCUnitStatusDischargePressureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusDischargePressureUS.setStatus("mandatory")
_AirIRSCUnitStatusDischargePressureMetric_Type = Integer32
_AirIRSCUnitStatusDischargePressureMetric_Object = MibScalar
airIRSCUnitStatusDischargePressureMetric = _AirIRSCUnitStatusDischargePressureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 23),
    _AirIRSCUnitStatusDischargePressureMetric_Type()
)
airIRSCUnitStatusDischargePressureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusDischargePressureMetric.setStatus("mandatory")
_AirIRSCUnitStatusEvaporatorFanSpeed_Type = Integer32
_AirIRSCUnitStatusEvaporatorFanSpeed_Object = MibScalar
airIRSCUnitStatusEvaporatorFanSpeed = _AirIRSCUnitStatusEvaporatorFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 24),
    _AirIRSCUnitStatusEvaporatorFanSpeed_Type()
)
airIRSCUnitStatusEvaporatorFanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusEvaporatorFanSpeed.setStatus("mandatory")
_AirIRSCUnitStatusCondenserFanSpeed_Type = Integer32
_AirIRSCUnitStatusCondenserFanSpeed_Object = MibScalar
airIRSCUnitStatusCondenserFanSpeed = _AirIRSCUnitStatusCondenserFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 25),
    _AirIRSCUnitStatusCondenserFanSpeed_Type()
)
airIRSCUnitStatusCondenserFanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusCondenserFanSpeed.setStatus("mandatory")


class _AirIRSCUnitStatusInputState_Type(Integer32):
    """Custom type airIRSCUnitStatusInputState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRSCUnitStatusInputState_Type.__name__ = "Integer32"
_AirIRSCUnitStatusInputState_Object = MibScalar
airIRSCUnitStatusInputState = _AirIRSCUnitStatusInputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 26),
    _AirIRSCUnitStatusInputState_Type()
)
airIRSCUnitStatusInputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusInputState.setStatus("mandatory")


class _AirIRSCUnitStatusOutputState_Type(Integer32):
    """Custom type airIRSCUnitStatusOutputState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRSCUnitStatusOutputState_Type.__name__ = "Integer32"
_AirIRSCUnitStatusOutputState_Object = MibScalar
airIRSCUnitStatusOutputState = _AirIRSCUnitStatusOutputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 27),
    _AirIRSCUnitStatusOutputState_Type()
)
airIRSCUnitStatusOutputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusOutputState.setStatus("mandatory")
_AirIRSCUnitStatusCondOutletTempUS_Type = Integer32
_AirIRSCUnitStatusCondOutletTempUS_Object = MibScalar
airIRSCUnitStatusCondOutletTempUS = _AirIRSCUnitStatusCondOutletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 28),
    _AirIRSCUnitStatusCondOutletTempUS_Type()
)
airIRSCUnitStatusCondOutletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusCondOutletTempUS.setStatus("mandatory")
_AirIRSCUnitStatusCondOutletTempMetric_Type = Integer32
_AirIRSCUnitStatusCondOutletTempMetric_Object = MibScalar
airIRSCUnitStatusCondOutletTempMetric = _AirIRSCUnitStatusCondOutletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 29),
    _AirIRSCUnitStatusCondOutletTempMetric_Type()
)
airIRSCUnitStatusCondOutletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusCondOutletTempMetric.setStatus("mandatory")
_AirIRSCUnitStatusCondInletTempUS_Type = Integer32
_AirIRSCUnitStatusCondInletTempUS_Object = MibScalar
airIRSCUnitStatusCondInletTempUS = _AirIRSCUnitStatusCondInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 30),
    _AirIRSCUnitStatusCondInletTempUS_Type()
)
airIRSCUnitStatusCondInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusCondInletTempUS.setStatus("mandatory")
_AirIRSCUnitStatusCondInletTempMetric_Type = Integer32
_AirIRSCUnitStatusCondInletTempMetric_Object = MibScalar
airIRSCUnitStatusCondInletTempMetric = _AirIRSCUnitStatusCondInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 31),
    _AirIRSCUnitStatusCondInletTempMetric_Type()
)
airIRSCUnitStatusCondInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusCondInletTempMetric.setStatus("mandatory")


class _AirIRSCUnitStatusCompressor_Type(Integer32):
    """Custom type airIRSCUnitStatusCompressor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AirIRSCUnitStatusCompressor_Type.__name__ = "Integer32"
_AirIRSCUnitStatusCompressor_Object = MibScalar
airIRSCUnitStatusCompressor = _AirIRSCUnitStatusCompressor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 2, 32),
    _AirIRSCUnitStatusCompressor_Type()
)
airIRSCUnitStatusCompressor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitStatusCompressor.setStatus("mandatory")
_AirIRSCUnitRunHours_ObjectIdentity = ObjectIdentity
airIRSCUnitRunHours = _AirIRSCUnitRunHours_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3)
)
_AirIRSCUnitRunHoursAirFilter_Type = Integer32
_AirIRSCUnitRunHoursAirFilter_Object = MibScalar
airIRSCUnitRunHoursAirFilter = _AirIRSCUnitRunHoursAirFilter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 1),
    _AirIRSCUnitRunHoursAirFilter_Type()
)
airIRSCUnitRunHoursAirFilter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitRunHoursAirFilter.setStatus("mandatory")
_AirIRSCUnitRunHoursEvaporatorFan1_Type = Integer32
_AirIRSCUnitRunHoursEvaporatorFan1_Object = MibScalar
airIRSCUnitRunHoursEvaporatorFan1 = _AirIRSCUnitRunHoursEvaporatorFan1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 2),
    _AirIRSCUnitRunHoursEvaporatorFan1_Type()
)
airIRSCUnitRunHoursEvaporatorFan1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitRunHoursEvaporatorFan1.setStatus("mandatory")
_AirIRSCUnitRunHoursEvaporatorFan2_Type = Integer32
_AirIRSCUnitRunHoursEvaporatorFan2_Object = MibScalar
airIRSCUnitRunHoursEvaporatorFan2 = _AirIRSCUnitRunHoursEvaporatorFan2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 3),
    _AirIRSCUnitRunHoursEvaporatorFan2_Type()
)
airIRSCUnitRunHoursEvaporatorFan2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitRunHoursEvaporatorFan2.setStatus("mandatory")
_AirIRSCUnitRunHoursEvaporatorFan3_Type = Integer32
_AirIRSCUnitRunHoursEvaporatorFan3_Object = MibScalar
airIRSCUnitRunHoursEvaporatorFan3 = _AirIRSCUnitRunHoursEvaporatorFan3_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 4),
    _AirIRSCUnitRunHoursEvaporatorFan3_Type()
)
airIRSCUnitRunHoursEvaporatorFan3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitRunHoursEvaporatorFan3.setStatus("mandatory")
_AirIRSCUnitRunHoursCondenserFan1_Type = Integer32
_AirIRSCUnitRunHoursCondenserFan1_Object = MibScalar
airIRSCUnitRunHoursCondenserFan1 = _AirIRSCUnitRunHoursCondenserFan1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 5),
    _AirIRSCUnitRunHoursCondenserFan1_Type()
)
airIRSCUnitRunHoursCondenserFan1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitRunHoursCondenserFan1.setStatus("mandatory")
_AirIRSCUnitRunHoursCondenserFan2_Type = Integer32
_AirIRSCUnitRunHoursCondenserFan2_Object = MibScalar
airIRSCUnitRunHoursCondenserFan2 = _AirIRSCUnitRunHoursCondenserFan2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 6),
    _AirIRSCUnitRunHoursCondenserFan2_Type()
)
airIRSCUnitRunHoursCondenserFan2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitRunHoursCondenserFan2.setStatus("mandatory")
_AirIRSCUnitRunHoursCondenserFan3_Type = Integer32
_AirIRSCUnitRunHoursCondenserFan3_Object = MibScalar
airIRSCUnitRunHoursCondenserFan3 = _AirIRSCUnitRunHoursCondenserFan3_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 7),
    _AirIRSCUnitRunHoursCondenserFan3_Type()
)
airIRSCUnitRunHoursCondenserFan3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitRunHoursCondenserFan3.setStatus("mandatory")
_AirIRSCUnitRunHoursFanPowerSupplyLeft_Type = Integer32
_AirIRSCUnitRunHoursFanPowerSupplyLeft_Object = MibScalar
airIRSCUnitRunHoursFanPowerSupplyLeft = _AirIRSCUnitRunHoursFanPowerSupplyLeft_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 8),
    _AirIRSCUnitRunHoursFanPowerSupplyLeft_Type()
)
airIRSCUnitRunHoursFanPowerSupplyLeft.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitRunHoursFanPowerSupplyLeft.setStatus("mandatory")
_AirIRSCUnitRunHoursFanPowerSupplyRight_Type = Integer32
_AirIRSCUnitRunHoursFanPowerSupplyRight_Object = MibScalar
airIRSCUnitRunHoursFanPowerSupplyRight = _AirIRSCUnitRunHoursFanPowerSupplyRight_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 9),
    _AirIRSCUnitRunHoursFanPowerSupplyRight_Type()
)
airIRSCUnitRunHoursFanPowerSupplyRight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitRunHoursFanPowerSupplyRight.setStatus("mandatory")
_AirIRSCUnitRunHoursCondensatePump_Type = Integer32
_AirIRSCUnitRunHoursCondensatePump_Object = MibScalar
airIRSCUnitRunHoursCondensatePump = _AirIRSCUnitRunHoursCondensatePump_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 10),
    _AirIRSCUnitRunHoursCondensatePump_Type()
)
airIRSCUnitRunHoursCondensatePump.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitRunHoursCondensatePump.setStatus("mandatory")
_AirIRSCUnitRunHoursCompressor_Type = Integer32
_AirIRSCUnitRunHoursCompressor_Object = MibScalar
airIRSCUnitRunHoursCompressor = _AirIRSCUnitRunHoursCompressor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 3, 11),
    _AirIRSCUnitRunHoursCompressor_Type()
)
airIRSCUnitRunHoursCompressor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCUnitRunHoursCompressor.setStatus("mandatory")
_AirIRSCUnitServiceIntervals_ObjectIdentity = ObjectIdentity
airIRSCUnitServiceIntervals = _AirIRSCUnitServiceIntervals_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4)
)
_AirIRSCUnitServiceIntervalsAirFilter_Type = Integer32
_AirIRSCUnitServiceIntervalsAirFilter_Object = MibScalar
airIRSCUnitServiceIntervalsAirFilter = _AirIRSCUnitServiceIntervalsAirFilter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4, 1),
    _AirIRSCUnitServiceIntervalsAirFilter_Type()
)
airIRSCUnitServiceIntervalsAirFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitServiceIntervalsAirFilter.setStatus("mandatory")


class _AirIRSCUnitServiceIntervalsAirFilterAlarm_Type(Integer32):
    """Custom type airIRSCUnitServiceIntervalsAirFilterAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRSCUnitServiceIntervalsAirFilterAlarm_Type.__name__ = "Integer32"
_AirIRSCUnitServiceIntervalsAirFilterAlarm_Object = MibScalar
airIRSCUnitServiceIntervalsAirFilterAlarm = _AirIRSCUnitServiceIntervalsAirFilterAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 4, 2),
    _AirIRSCUnitServiceIntervalsAirFilterAlarm_Type()
)
airIRSCUnitServiceIntervalsAirFilterAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitServiceIntervalsAirFilterAlarm.setStatus("mandatory")
_AirIRSCUnitThresholds_ObjectIdentity = ObjectIdentity
airIRSCUnitThresholds = _AirIRSCUnitThresholds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5)
)
_AirIRSCUnitThresholdsRackInletHighTempUS_Type = Integer32
_AirIRSCUnitThresholdsRackInletHighTempUS_Object = MibScalar
airIRSCUnitThresholdsRackInletHighTempUS = _AirIRSCUnitThresholdsRackInletHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 1),
    _AirIRSCUnitThresholdsRackInletHighTempUS_Type()
)
airIRSCUnitThresholdsRackInletHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitThresholdsRackInletHighTempUS.setStatus("mandatory")
_AirIRSCUnitThresholdsRackInletHighTempMetric_Type = Integer32
_AirIRSCUnitThresholdsRackInletHighTempMetric_Object = MibScalar
airIRSCUnitThresholdsRackInletHighTempMetric = _AirIRSCUnitThresholdsRackInletHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 2),
    _AirIRSCUnitThresholdsRackInletHighTempMetric_Type()
)
airIRSCUnitThresholdsRackInletHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitThresholdsRackInletHighTempMetric.setStatus("mandatory")
_AirIRSCUnitThresholdsSupplyAirHighTempUS_Type = Integer32
_AirIRSCUnitThresholdsSupplyAirHighTempUS_Object = MibScalar
airIRSCUnitThresholdsSupplyAirHighTempUS = _AirIRSCUnitThresholdsSupplyAirHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 3),
    _AirIRSCUnitThresholdsSupplyAirHighTempUS_Type()
)
airIRSCUnitThresholdsSupplyAirHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitThresholdsSupplyAirHighTempUS.setStatus("mandatory")
_AirIRSCUnitThresholdsSupplyAirHighTempMetric_Type = Integer32
_AirIRSCUnitThresholdsSupplyAirHighTempMetric_Object = MibScalar
airIRSCUnitThresholdsSupplyAirHighTempMetric = _AirIRSCUnitThresholdsSupplyAirHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 4),
    _AirIRSCUnitThresholdsSupplyAirHighTempMetric_Type()
)
airIRSCUnitThresholdsSupplyAirHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitThresholdsSupplyAirHighTempMetric.setStatus("mandatory")
_AirIRSCUnitThresholdsReturnAirHighTempUS_Type = Integer32
_AirIRSCUnitThresholdsReturnAirHighTempUS_Object = MibScalar
airIRSCUnitThresholdsReturnAirHighTempUS = _AirIRSCUnitThresholdsReturnAirHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 5),
    _AirIRSCUnitThresholdsReturnAirHighTempUS_Type()
)
airIRSCUnitThresholdsReturnAirHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitThresholdsReturnAirHighTempUS.setStatus("mandatory")
_AirIRSCUnitThresholdsReturnAirHighTempMetric_Type = Integer32
_AirIRSCUnitThresholdsReturnAirHighTempMetric_Object = MibScalar
airIRSCUnitThresholdsReturnAirHighTempMetric = _AirIRSCUnitThresholdsReturnAirHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 5, 6),
    _AirIRSCUnitThresholdsReturnAirHighTempMetric_Type()
)
airIRSCUnitThresholdsReturnAirHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitThresholdsReturnAirHighTempMetric.setStatus("mandatory")
_AirIRSCUnitSetpoints_ObjectIdentity = ObjectIdentity
airIRSCUnitSetpoints = _AirIRSCUnitSetpoints_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6)
)
_AirIRSCUnitSetptsCoolSetpointUS_Type = Integer32
_AirIRSCUnitSetptsCoolSetpointUS_Object = MibScalar
airIRSCUnitSetptsCoolSetpointUS = _AirIRSCUnitSetptsCoolSetpointUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 1),
    _AirIRSCUnitSetptsCoolSetpointUS_Type()
)
airIRSCUnitSetptsCoolSetpointUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitSetptsCoolSetpointUS.setStatus("mandatory")
_AirIRSCUnitSetptsCoolSetpointMetric_Type = Integer32
_AirIRSCUnitSetptsCoolSetpointMetric_Object = MibScalar
airIRSCUnitSetptsCoolSetpointMetric = _AirIRSCUnitSetptsCoolSetpointMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 2),
    _AirIRSCUnitSetptsCoolSetpointMetric_Type()
)
airIRSCUnitSetptsCoolSetpointMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitSetptsCoolSetpointMetric.setStatus("mandatory")
_AirIRSCUnitSetptsCoolDeadbandUS_Type = Integer32
_AirIRSCUnitSetptsCoolDeadbandUS_Object = MibScalar
airIRSCUnitSetptsCoolDeadbandUS = _AirIRSCUnitSetptsCoolDeadbandUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 3),
    _AirIRSCUnitSetptsCoolDeadbandUS_Type()
)
airIRSCUnitSetptsCoolDeadbandUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitSetptsCoolDeadbandUS.setStatus("mandatory")
_AirIRSCUnitSetptsCoolDeadbandMetric_Type = Integer32
_AirIRSCUnitSetptsCoolDeadbandMetric_Object = MibScalar
airIRSCUnitSetptsCoolDeadbandMetric = _AirIRSCUnitSetptsCoolDeadbandMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 4),
    _AirIRSCUnitSetptsCoolDeadbandMetric_Type()
)
airIRSCUnitSetptsCoolDeadbandMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitSetptsCoolDeadbandMetric.setStatus("mandatory")
_AirIRSCUnitSetptsFanSpeedPreference_Type = AirIRSCFanSpeedPreference
_AirIRSCUnitSetptsFanSpeedPreference_Object = MibScalar
airIRSCUnitSetptsFanSpeedPreference = _AirIRSCUnitSetptsFanSpeedPreference_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 5),
    _AirIRSCUnitSetptsFanSpeedPreference_Type()
)
airIRSCUnitSetptsFanSpeedPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitSetptsFanSpeedPreference.setStatus("mandatory")
_AirIRSCUnitSetptsSupplyAirSetpointUS_Type = Integer32
_AirIRSCUnitSetptsSupplyAirSetpointUS_Object = MibScalar
airIRSCUnitSetptsSupplyAirSetpointUS = _AirIRSCUnitSetptsSupplyAirSetpointUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 6),
    _AirIRSCUnitSetptsSupplyAirSetpointUS_Type()
)
airIRSCUnitSetptsSupplyAirSetpointUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitSetptsSupplyAirSetpointUS.setStatus("mandatory")
_AirIRSCUnitSetptsSupplyAirSetpointMetric_Type = Integer32
_AirIRSCUnitSetptsSupplyAirSetpointMetric_Object = MibScalar
airIRSCUnitSetptsSupplyAirSetpointMetric = _AirIRSCUnitSetptsSupplyAirSetpointMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 6, 7),
    _AirIRSCUnitSetptsSupplyAirSetpointMetric_Type()
)
airIRSCUnitSetptsSupplyAirSetpointMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitSetptsSupplyAirSetpointMetric.setStatus("mandatory")
_AirIRSCUnitConfig_ObjectIdentity = ObjectIdentity
airIRSCUnitConfig = _AirIRSCUnitConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7)
)
_AirIRSCUnitConfigConfigurationType_Type = AirIRSCConfigType
_AirIRSCUnitConfigConfigurationType_Object = MibScalar
airIRSCUnitConfigConfigurationType = _AirIRSCUnitConfigConfigurationType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 1),
    _AirIRSCUnitConfigConfigurationType_Type()
)
airIRSCUnitConfigConfigurationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitConfigConfigurationType.setStatus("mandatory")
_AirIRSCUnitConfigCapacityControlType_Type = AirIRSCCapacityControlType
_AirIRSCUnitConfigCapacityControlType_Object = MibScalar
airIRSCUnitConfigCapacityControlType = _AirIRSCUnitConfigCapacityControlType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 2),
    _AirIRSCUnitConfigCapacityControlType_Type()
)
airIRSCUnitConfigCapacityControlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitConfigCapacityControlType.setStatus("mandatory")
_AirIRSCUnitConfigStartupDelay_Type = Integer32
_AirIRSCUnitConfigStartupDelay_Object = MibScalar
airIRSCUnitConfigStartupDelay = _AirIRSCUnitConfigStartupDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 3),
    _AirIRSCUnitConfigStartupDelay_Type()
)
airIRSCUnitConfigStartupDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitConfigStartupDelay.setStatus("mandatory")


class _AirIRSCUnitConfigIdleOnLeakDetect_Type(Integer32):
    """Custom type airIRSCUnitConfigIdleOnLeakDetect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_AirIRSCUnitConfigIdleOnLeakDetect_Type.__name__ = "Integer32"
_AirIRSCUnitConfigIdleOnLeakDetect_Object = MibScalar
airIRSCUnitConfigIdleOnLeakDetect = _AirIRSCUnitConfigIdleOnLeakDetect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 4),
    _AirIRSCUnitConfigIdleOnLeakDetect_Type()
)
airIRSCUnitConfigIdleOnLeakDetect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitConfigIdleOnLeakDetect.setStatus("mandatory")


class _AirIRSCUnitConfigInputNormalState_Type(Integer32):
    """Custom type airIRSCUnitConfigInputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRSCUnitConfigInputNormalState_Type.__name__ = "Integer32"
_AirIRSCUnitConfigInputNormalState_Object = MibScalar
airIRSCUnitConfigInputNormalState = _AirIRSCUnitConfigInputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 5),
    _AirIRSCUnitConfigInputNormalState_Type()
)
airIRSCUnitConfigInputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitConfigInputNormalState.setStatus("mandatory")


class _AirIRSCUnitConfigOutputNormalState_Type(Integer32):
    """Custom type airIRSCUnitConfigOutputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRSCUnitConfigOutputNormalState_Type.__name__ = "Integer32"
_AirIRSCUnitConfigOutputNormalState_Object = MibScalar
airIRSCUnitConfigOutputNormalState = _AirIRSCUnitConfigOutputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 6),
    _AirIRSCUnitConfigOutputNormalState_Type()
)
airIRSCUnitConfigOutputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitConfigOutputNormalState.setStatus("mandatory")


class _AirIRSCUnitConfigOutputSource_Type(Integer32):
    """Custom type airIRSCUnitConfigOutputSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("anyAlarm", 1),
          ("criticalAlarm", 2))
    )


_AirIRSCUnitConfigOutputSource_Type.__name__ = "Integer32"
_AirIRSCUnitConfigOutputSource_Object = MibScalar
airIRSCUnitConfigOutputSource = _AirIRSCUnitConfigOutputSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 7),
    _AirIRSCUnitConfigOutputSource_Type()
)
airIRSCUnitConfigOutputSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitConfigOutputSource.setStatus("mandatory")
_AirIRSCUnitConfigAltitudeUS_Type = Integer32
_AirIRSCUnitConfigAltitudeUS_Object = MibScalar
airIRSCUnitConfigAltitudeUS = _AirIRSCUnitConfigAltitudeUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 8),
    _AirIRSCUnitConfigAltitudeUS_Type()
)
airIRSCUnitConfigAltitudeUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitConfigAltitudeUS.setStatus("mandatory")
_AirIRSCUnitConfigAltitudeMetric_Type = Integer32
_AirIRSCUnitConfigAltitudeMetric_Object = MibScalar
airIRSCUnitConfigAltitudeMetric = _AirIRSCUnitConfigAltitudeMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 9),
    _AirIRSCUnitConfigAltitudeMetric_Type()
)
airIRSCUnitConfigAltitudeMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitConfigAltitudeMetric.setStatus("mandatory")


class _AirIRSCUnitConfigOpControl_Type(Integer32):
    """Custom type airIRSCUnitConfigOpControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("standby", 1))
    )


_AirIRSCUnitConfigOpControl_Type.__name__ = "Integer32"
_AirIRSCUnitConfigOpControl_Object = MibScalar
airIRSCUnitConfigOpControl = _AirIRSCUnitConfigOpControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 1, 7, 10),
    _AirIRSCUnitConfigOpControl_Type()
)
airIRSCUnitConfigOpControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCUnitConfigOpControl.setStatus("mandatory")
_AirIRSCGroup_ObjectIdentity = ObjectIdentity
airIRSCGroup = _AirIRSCGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2)
)
_AirIRSCGroupStatus_ObjectIdentity = ObjectIdentity
airIRSCGroupStatus = _AirIRSCGroupStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1)
)
_AirIRSCGroupStatusCoolOutput_Type = Integer32
_AirIRSCGroupStatusCoolOutput_Object = MibScalar
airIRSCGroupStatusCoolOutput = _AirIRSCGroupStatusCoolOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 1),
    _AirIRSCGroupStatusCoolOutput_Type()
)
airIRSCGroupStatusCoolOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCGroupStatusCoolOutput.setStatus("mandatory")
_AirIRSCGroupStatusCoolDemand_Type = Integer32
_AirIRSCGroupStatusCoolDemand_Object = MibScalar
airIRSCGroupStatusCoolDemand = _AirIRSCGroupStatusCoolDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 2),
    _AirIRSCGroupStatusCoolDemand_Type()
)
airIRSCGroupStatusCoolDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCGroupStatusCoolDemand.setStatus("mandatory")
_AirIRSCGroupStatusAirFlowUS_Type = Integer32
_AirIRSCGroupStatusAirFlowUS_Object = MibScalar
airIRSCGroupStatusAirFlowUS = _AirIRSCGroupStatusAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 3),
    _AirIRSCGroupStatusAirFlowUS_Type()
)
airIRSCGroupStatusAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCGroupStatusAirFlowUS.setStatus("mandatory")
_AirIRSCGroupStatusAirFlowMetric_Type = Integer32
_AirIRSCGroupStatusAirFlowMetric_Object = MibScalar
airIRSCGroupStatusAirFlowMetric = _AirIRSCGroupStatusAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 4),
    _AirIRSCGroupStatusAirFlowMetric_Type()
)
airIRSCGroupStatusAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCGroupStatusAirFlowMetric.setStatus("mandatory")
_AirIRSCGroupStatusMaxRackInletTempUS_Type = Integer32
_AirIRSCGroupStatusMaxRackInletTempUS_Object = MibScalar
airIRSCGroupStatusMaxRackInletTempUS = _AirIRSCGroupStatusMaxRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 5),
    _AirIRSCGroupStatusMaxRackInletTempUS_Type()
)
airIRSCGroupStatusMaxRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCGroupStatusMaxRackInletTempUS.setStatus("mandatory")
_AirIRSCGroupStatusMaxRackInletTempMetric_Type = Integer32
_AirIRSCGroupStatusMaxRackInletTempMetric_Object = MibScalar
airIRSCGroupStatusMaxRackInletTempMetric = _AirIRSCGroupStatusMaxRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 6),
    _AirIRSCGroupStatusMaxRackInletTempMetric_Type()
)
airIRSCGroupStatusMaxRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCGroupStatusMaxRackInletTempMetric.setStatus("mandatory")
_AirIRSCGroupStatusMinRackInletTempUS_Type = Integer32
_AirIRSCGroupStatusMinRackInletTempUS_Object = MibScalar
airIRSCGroupStatusMinRackInletTempUS = _AirIRSCGroupStatusMinRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 7),
    _AirIRSCGroupStatusMinRackInletTempUS_Type()
)
airIRSCGroupStatusMinRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCGroupStatusMinRackInletTempUS.setStatus("mandatory")
_AirIRSCGroupStatusMinRackInletTempMetric_Type = Integer32
_AirIRSCGroupStatusMinRackInletTempMetric_Object = MibScalar
airIRSCGroupStatusMinRackInletTempMetric = _AirIRSCGroupStatusMinRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 8),
    _AirIRSCGroupStatusMinRackInletTempMetric_Type()
)
airIRSCGroupStatusMinRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCGroupStatusMinRackInletTempMetric.setStatus("mandatory")
_AirIRSCGroupStatusMaxReturnAirTempUS_Type = Integer32
_AirIRSCGroupStatusMaxReturnAirTempUS_Object = MibScalar
airIRSCGroupStatusMaxReturnAirTempUS = _AirIRSCGroupStatusMaxReturnAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 9),
    _AirIRSCGroupStatusMaxReturnAirTempUS_Type()
)
airIRSCGroupStatusMaxReturnAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCGroupStatusMaxReturnAirTempUS.setStatus("mandatory")
_AirIRSCGroupStatusMaxReturnAirTempMetric_Type = Integer32
_AirIRSCGroupStatusMaxReturnAirTempMetric_Object = MibScalar
airIRSCGroupStatusMaxReturnAirTempMetric = _AirIRSCGroupStatusMaxReturnAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 10),
    _AirIRSCGroupStatusMaxReturnAirTempMetric_Type()
)
airIRSCGroupStatusMaxReturnAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCGroupStatusMaxReturnAirTempMetric.setStatus("mandatory")
_AirIRSCGroupStatusMinReturnAirTempUS_Type = Integer32
_AirIRSCGroupStatusMinReturnAirTempUS_Object = MibScalar
airIRSCGroupStatusMinReturnAirTempUS = _AirIRSCGroupStatusMinReturnAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 11),
    _AirIRSCGroupStatusMinReturnAirTempUS_Type()
)
airIRSCGroupStatusMinReturnAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCGroupStatusMinReturnAirTempUS.setStatus("mandatory")
_AirIRSCGroupStatusMinReturnAirTempMetric_Type = Integer32
_AirIRSCGroupStatusMinReturnAirTempMetric_Object = MibScalar
airIRSCGroupStatusMinReturnAirTempMetric = _AirIRSCGroupStatusMinReturnAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 1, 12),
    _AirIRSCGroupStatusMinReturnAirTempMetric_Type()
)
airIRSCGroupStatusMinReturnAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRSCGroupStatusMinReturnAirTempMetric.setStatus("mandatory")
_AirIRSCGroupSetpoints_ObjectIdentity = ObjectIdentity
airIRSCGroupSetpoints = _AirIRSCGroupSetpoints_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2)
)
_AirIRSCGroupSetptsCoolSetpointUS_Type = Integer32
_AirIRSCGroupSetptsCoolSetpointUS_Object = MibScalar
airIRSCGroupSetptsCoolSetpointUS = _AirIRSCGroupSetptsCoolSetpointUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 1),
    _AirIRSCGroupSetptsCoolSetpointUS_Type()
)
airIRSCGroupSetptsCoolSetpointUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupSetptsCoolSetpointUS.setStatus("mandatory")
_AirIRSCGroupSetptsCoolSetpointMetric_Type = Integer32
_AirIRSCGroupSetptsCoolSetpointMetric_Object = MibScalar
airIRSCGroupSetptsCoolSetpointMetric = _AirIRSCGroupSetptsCoolSetpointMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 2),
    _AirIRSCGroupSetptsCoolSetpointMetric_Type()
)
airIRSCGroupSetptsCoolSetpointMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupSetptsCoolSetpointMetric.setStatus("mandatory")
_AirIRSCGroupSetptsCoolDeadbandUS_Type = Integer32
_AirIRSCGroupSetptsCoolDeadbandUS_Object = MibScalar
airIRSCGroupSetptsCoolDeadbandUS = _AirIRSCGroupSetptsCoolDeadbandUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 3),
    _AirIRSCGroupSetptsCoolDeadbandUS_Type()
)
airIRSCGroupSetptsCoolDeadbandUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupSetptsCoolDeadbandUS.setStatus("mandatory")
_AirIRSCGroupSetptsCoolDeadbandMetric_Type = Integer32
_AirIRSCGroupSetptsCoolDeadbandMetric_Object = MibScalar
airIRSCGroupSetptsCoolDeadbandMetric = _AirIRSCGroupSetptsCoolDeadbandMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 4),
    _AirIRSCGroupSetptsCoolDeadbandMetric_Type()
)
airIRSCGroupSetptsCoolDeadbandMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupSetptsCoolDeadbandMetric.setStatus("mandatory")
_AirIRSCGroupSetptsFanSpeedPreference_Type = AirIRSCFanSpeedPreference
_AirIRSCGroupSetptsFanSpeedPreference_Object = MibScalar
airIRSCGroupSetptsFanSpeedPreference = _AirIRSCGroupSetptsFanSpeedPreference_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 5),
    _AirIRSCGroupSetptsFanSpeedPreference_Type()
)
airIRSCGroupSetptsFanSpeedPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupSetptsFanSpeedPreference.setStatus("mandatory")
_AirIRSCGroupSetptsSupplyAirSetpointUS_Type = Integer32
_AirIRSCGroupSetptsSupplyAirSetpointUS_Object = MibScalar
airIRSCGroupSetptsSupplyAirSetpointUS = _AirIRSCGroupSetptsSupplyAirSetpointUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 6),
    _AirIRSCGroupSetptsSupplyAirSetpointUS_Type()
)
airIRSCGroupSetptsSupplyAirSetpointUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupSetptsSupplyAirSetpointUS.setStatus("mandatory")
_AirIRSCGroupSetptsSupplyAirSetpointMetric_Type = Integer32
_AirIRSCGroupSetptsSupplyAirSetpointMetric_Object = MibScalar
airIRSCGroupSetptsSupplyAirSetpointMetric = _AirIRSCGroupSetptsSupplyAirSetpointMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 2, 7),
    _AirIRSCGroupSetptsSupplyAirSetpointMetric_Type()
)
airIRSCGroupSetptsSupplyAirSetpointMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupSetptsSupplyAirSetpointMetric.setStatus("mandatory")
_AirIRSCGroupConfig_ObjectIdentity = ObjectIdentity
airIRSCGroupConfig = _AirIRSCGroupConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3)
)
_AirIRSCGroupConfigNumberofCoolingUnits_Type = Integer32
_AirIRSCGroupConfigNumberofCoolingUnits_Object = MibScalar
airIRSCGroupConfigNumberofCoolingUnits = _AirIRSCGroupConfigNumberofCoolingUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 1),
    _AirIRSCGroupConfigNumberofCoolingUnits_Type()
)
airIRSCGroupConfigNumberofCoolingUnits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupConfigNumberofCoolingUnits.setStatus("mandatory")
_AirIRSCGroupConfigConfigurationType_Type = AirIRSCConfigType
_AirIRSCGroupConfigConfigurationType_Object = MibScalar
airIRSCGroupConfigConfigurationType = _AirIRSCGroupConfigConfigurationType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 2),
    _AirIRSCGroupConfigConfigurationType_Type()
)
airIRSCGroupConfigConfigurationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupConfigConfigurationType.setStatus("mandatory")
_AirIRSCGroupConfigCapacityControlType_Type = AirIRSCCapacityControlType
_AirIRSCGroupConfigCapacityControlType_Object = MibScalar
airIRSCGroupConfigCapacityControlType = _AirIRSCGroupConfigCapacityControlType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 3),
    _AirIRSCGroupConfigCapacityControlType_Type()
)
airIRSCGroupConfigCapacityControlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupConfigCapacityControlType.setStatus("mandatory")
_AirIRSCGroupConfigAltitudeUS_Type = Integer32
_AirIRSCGroupConfigAltitudeUS_Object = MibScalar
airIRSCGroupConfigAltitudeUS = _AirIRSCGroupConfigAltitudeUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 4),
    _AirIRSCGroupConfigAltitudeUS_Type()
)
airIRSCGroupConfigAltitudeUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupConfigAltitudeUS.setStatus("mandatory")
_AirIRSCGroupConfigAltitudeMetric_Type = Integer32
_AirIRSCGroupConfigAltitudeMetric_Object = MibScalar
airIRSCGroupConfigAltitudeMetric = _AirIRSCGroupConfigAltitudeMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 5),
    _AirIRSCGroupConfigAltitudeMetric_Type()
)
airIRSCGroupConfigAltitudeMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupConfigAltitudeMetric.setStatus("mandatory")
_AirIRSCGroupConfigFanSpeedControl_Type = AirIRSCFanSpeedControl
_AirIRSCGroupConfigFanSpeedControl_Object = MibScalar
airIRSCGroupConfigFanSpeedControl = _AirIRSCGroupConfigFanSpeedControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 3, 4, 2, 3, 6),
    _AirIRSCGroupConfigFanSpeedControl_Type()
)
airIRSCGroupConfigFanSpeedControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRSCGroupConfigFanSpeedControl.setStatus("mandatory")
_AirIRGen2_ObjectIdentity = ObjectIdentity
airIRGen2 = _AirIRGen2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4)
)
_AirIRG2Ident_ObjectIdentity = ObjectIdentity
airIRG2Ident = _AirIRG2Ident_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1)
)
_AirIRG2IdentName_Type = DisplayString
_AirIRG2IdentName_Object = MibScalar
airIRG2IdentName = _AirIRG2IdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 1),
    _AirIRG2IdentName_Type()
)
airIRG2IdentName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2IdentName.setStatus("mandatory")
_AirIRG2IdentLocation_Type = DisplayString
_AirIRG2IdentLocation_Object = MibScalar
airIRG2IdentLocation = _AirIRG2IdentLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 2),
    _AirIRG2IdentLocation_Type()
)
airIRG2IdentLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2IdentLocation.setStatus("mandatory")
_AirIRG2IdentModelNumber_Type = DisplayString
_AirIRG2IdentModelNumber_Object = MibScalar
airIRG2IdentModelNumber = _AirIRG2IdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 3),
    _AirIRG2IdentModelNumber_Type()
)
airIRG2IdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2IdentModelNumber.setStatus("mandatory")
_AirIRG2IdentSerialNumber_Type = DisplayString
_AirIRG2IdentSerialNumber_Object = MibScalar
airIRG2IdentSerialNumber = _AirIRG2IdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 4),
    _AirIRG2IdentSerialNumber_Type()
)
airIRG2IdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2IdentSerialNumber.setStatus("mandatory")
_AirIRG2IdentFirmwareRevision_Type = DisplayString
_AirIRG2IdentFirmwareRevision_Object = MibScalar
airIRG2IdentFirmwareRevision = _AirIRG2IdentFirmwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 5),
    _AirIRG2IdentFirmwareRevision_Type()
)
airIRG2IdentFirmwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2IdentFirmwareRevision.setStatus("mandatory")
_AirIRG2IdentHardwareRevision_Type = DisplayString
_AirIRG2IdentHardwareRevision_Object = MibScalar
airIRG2IdentHardwareRevision = _AirIRG2IdentHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 6),
    _AirIRG2IdentHardwareRevision_Type()
)
airIRG2IdentHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2IdentHardwareRevision.setStatus("mandatory")
_AirIRG2IdentManufactureDate_Type = DisplayString
_AirIRG2IdentManufactureDate_Object = MibScalar
airIRG2IdentManufactureDate = _AirIRG2IdentManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 7),
    _AirIRG2IdentManufactureDate_Type()
)
airIRG2IdentManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2IdentManufactureDate.setStatus("mandatory")
_AirIRG2IdentUnitSysOID_Type = ObjectIdentifier
_AirIRG2IdentUnitSysOID_Object = MibScalar
airIRG2IdentUnitSysOID = _AirIRG2IdentUnitSysOID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 8),
    _AirIRG2IdentUnitSysOID_Type()
)
airIRG2IdentUnitSysOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2IdentUnitSysOID.setStatus("mandatory")
_AirIRG2IdentGroupSysOID_Type = ObjectIdentifier
_AirIRG2IdentGroupSysOID_Object = MibScalar
airIRG2IdentGroupSysOID = _AirIRG2IdentGroupSysOID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 1, 9),
    _AirIRG2IdentGroupSysOID_Type()
)
airIRG2IdentGroupSysOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2IdentGroupSysOID.setStatus("mandatory")
_AirIRG2Group_ObjectIdentity = ObjectIdentity
airIRG2Group = _AirIRG2Group_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2)
)
_AirIRG2GroupStatus_ObjectIdentity = ObjectIdentity
airIRG2GroupStatus = _AirIRG2GroupStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1)
)
_AirIRG2GroupStatusCoolOutput_Type = Integer32
_AirIRG2GroupStatusCoolOutput_Object = MibScalar
airIRG2GroupStatusCoolOutput = _AirIRG2GroupStatusCoolOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 1),
    _AirIRG2GroupStatusCoolOutput_Type()
)
airIRG2GroupStatusCoolOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2GroupStatusCoolOutput.setStatus("mandatory")
_AirIRG2GroupStatusCoolDemand_Type = Integer32
_AirIRG2GroupStatusCoolDemand_Object = MibScalar
airIRG2GroupStatusCoolDemand = _AirIRG2GroupStatusCoolDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 2),
    _AirIRG2GroupStatusCoolDemand_Type()
)
airIRG2GroupStatusCoolDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2GroupStatusCoolDemand.setStatus("mandatory")
_AirIRG2GroupStatusAirFlowUS_Type = Integer32
_AirIRG2GroupStatusAirFlowUS_Object = MibScalar
airIRG2GroupStatusAirFlowUS = _AirIRG2GroupStatusAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 3),
    _AirIRG2GroupStatusAirFlowUS_Type()
)
airIRG2GroupStatusAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2GroupStatusAirFlowUS.setStatus("mandatory")
_AirIRG2GroupStatusAirFlowMetric_Type = Integer32
_AirIRG2GroupStatusAirFlowMetric_Object = MibScalar
airIRG2GroupStatusAirFlowMetric = _AirIRG2GroupStatusAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 4),
    _AirIRG2GroupStatusAirFlowMetric_Type()
)
airIRG2GroupStatusAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2GroupStatusAirFlowMetric.setStatus("mandatory")
_AirIRG2GroupStatusMaxRackInletTempUS_Type = Integer32
_AirIRG2GroupStatusMaxRackInletTempUS_Object = MibScalar
airIRG2GroupStatusMaxRackInletTempUS = _AirIRG2GroupStatusMaxRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 5),
    _AirIRG2GroupStatusMaxRackInletTempUS_Type()
)
airIRG2GroupStatusMaxRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2GroupStatusMaxRackInletTempUS.setStatus("mandatory")
_AirIRG2GroupStatusMaxRackInletTempMetric_Type = Integer32
_AirIRG2GroupStatusMaxRackInletTempMetric_Object = MibScalar
airIRG2GroupStatusMaxRackInletTempMetric = _AirIRG2GroupStatusMaxRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 6),
    _AirIRG2GroupStatusMaxRackInletTempMetric_Type()
)
airIRG2GroupStatusMaxRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2GroupStatusMaxRackInletTempMetric.setStatus("mandatory")
_AirIRG2GroupStatusMinRackInletTempUS_Type = Integer32
_AirIRG2GroupStatusMinRackInletTempUS_Object = MibScalar
airIRG2GroupStatusMinRackInletTempUS = _AirIRG2GroupStatusMinRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 7),
    _AirIRG2GroupStatusMinRackInletTempUS_Type()
)
airIRG2GroupStatusMinRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2GroupStatusMinRackInletTempUS.setStatus("mandatory")
_AirIRG2GroupStatusMinRackInletTempMetric_Type = Integer32
_AirIRG2GroupStatusMinRackInletTempMetric_Object = MibScalar
airIRG2GroupStatusMinRackInletTempMetric = _AirIRG2GroupStatusMinRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 8),
    _AirIRG2GroupStatusMinRackInletTempMetric_Type()
)
airIRG2GroupStatusMinRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2GroupStatusMinRackInletTempMetric.setStatus("mandatory")
_AirIRG2GroupStatusMaxReturnAirTempUS_Type = Integer32
_AirIRG2GroupStatusMaxReturnAirTempUS_Object = MibScalar
airIRG2GroupStatusMaxReturnAirTempUS = _AirIRG2GroupStatusMaxReturnAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 9),
    _AirIRG2GroupStatusMaxReturnAirTempUS_Type()
)
airIRG2GroupStatusMaxReturnAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2GroupStatusMaxReturnAirTempUS.setStatus("mandatory")
_AirIRG2GroupStatusMaxReturnAirTempMetric_Type = Integer32
_AirIRG2GroupStatusMaxReturnAirTempMetric_Object = MibScalar
airIRG2GroupStatusMaxReturnAirTempMetric = _AirIRG2GroupStatusMaxReturnAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 10),
    _AirIRG2GroupStatusMaxReturnAirTempMetric_Type()
)
airIRG2GroupStatusMaxReturnAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2GroupStatusMaxReturnAirTempMetric.setStatus("mandatory")
_AirIRG2GroupStatusMinReturnAirTempUS_Type = Integer32
_AirIRG2GroupStatusMinReturnAirTempUS_Object = MibScalar
airIRG2GroupStatusMinReturnAirTempUS = _AirIRG2GroupStatusMinReturnAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 11),
    _AirIRG2GroupStatusMinReturnAirTempUS_Type()
)
airIRG2GroupStatusMinReturnAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2GroupStatusMinReturnAirTempUS.setStatus("mandatory")
_AirIRG2GroupStatusMinReturnAirTempMetric_Type = Integer32
_AirIRG2GroupStatusMinReturnAirTempMetric_Object = MibScalar
airIRG2GroupStatusMinReturnAirTempMetric = _AirIRG2GroupStatusMinReturnAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 1, 12),
    _AirIRG2GroupStatusMinReturnAirTempMetric_Type()
)
airIRG2GroupStatusMinReturnAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2GroupStatusMinReturnAirTempMetric.setStatus("mandatory")
_AirIRG2GroupSetpoints_ObjectIdentity = ObjectIdentity
airIRG2GroupSetpoints = _AirIRG2GroupSetpoints_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2)
)
_AirIRG2GroupSetptsCoolSetpointUS_Type = Integer32
_AirIRG2GroupSetptsCoolSetpointUS_Object = MibScalar
airIRG2GroupSetptsCoolSetpointUS = _AirIRG2GroupSetptsCoolSetpointUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 1),
    _AirIRG2GroupSetptsCoolSetpointUS_Type()
)
airIRG2GroupSetptsCoolSetpointUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupSetptsCoolSetpointUS.setStatus("mandatory")
_AirIRG2GroupSetptsCoolSetpointMetric_Type = Integer32
_AirIRG2GroupSetptsCoolSetpointMetric_Object = MibScalar
airIRG2GroupSetptsCoolSetpointMetric = _AirIRG2GroupSetptsCoolSetpointMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 2),
    _AirIRG2GroupSetptsCoolSetpointMetric_Type()
)
airIRG2GroupSetptsCoolSetpointMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupSetptsCoolSetpointMetric.setStatus("mandatory")
_AirIRG2GroupSetptsCoolDeadbandUS_Type = Integer32
_AirIRG2GroupSetptsCoolDeadbandUS_Object = MibScalar
airIRG2GroupSetptsCoolDeadbandUS = _AirIRG2GroupSetptsCoolDeadbandUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 3),
    _AirIRG2GroupSetptsCoolDeadbandUS_Type()
)
airIRG2GroupSetptsCoolDeadbandUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupSetptsCoolDeadbandUS.setStatus("mandatory")
_AirIRG2GroupSetptsCoolDeadbandMetric_Type = Integer32
_AirIRG2GroupSetptsCoolDeadbandMetric_Object = MibScalar
airIRG2GroupSetptsCoolDeadbandMetric = _AirIRG2GroupSetptsCoolDeadbandMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 4),
    _AirIRG2GroupSetptsCoolDeadbandMetric_Type()
)
airIRG2GroupSetptsCoolDeadbandMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupSetptsCoolDeadbandMetric.setStatus("mandatory")


class _AirIRG2GroupSetptsFanSpeedPreference_Type(Integer32):
    """Custom type airIRG2GroupSetptsFanSpeedPreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("high", 5),
          ("low", 1),
          ("med", 3),
          ("med-high", 4),
          ("med-low", 2))
    )


_AirIRG2GroupSetptsFanSpeedPreference_Type.__name__ = "Integer32"
_AirIRG2GroupSetptsFanSpeedPreference_Object = MibScalar
airIRG2GroupSetptsFanSpeedPreference = _AirIRG2GroupSetptsFanSpeedPreference_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 5),
    _AirIRG2GroupSetptsFanSpeedPreference_Type()
)
airIRG2GroupSetptsFanSpeedPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupSetptsFanSpeedPreference.setStatus("mandatory")
_AirIRG2GroupSetptsSupplyAirSetpointUS_Type = Integer32
_AirIRG2GroupSetptsSupplyAirSetpointUS_Object = MibScalar
airIRG2GroupSetptsSupplyAirSetpointUS = _AirIRG2GroupSetptsSupplyAirSetpointUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 6),
    _AirIRG2GroupSetptsSupplyAirSetpointUS_Type()
)
airIRG2GroupSetptsSupplyAirSetpointUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupSetptsSupplyAirSetpointUS.setStatus("mandatory")
_AirIRG2GroupSetptsSupplyAirSetpointMetric_Type = Integer32
_AirIRG2GroupSetptsSupplyAirSetpointMetric_Object = MibScalar
airIRG2GroupSetptsSupplyAirSetpointMetric = _AirIRG2GroupSetptsSupplyAirSetpointMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 2, 7),
    _AirIRG2GroupSetptsSupplyAirSetpointMetric_Type()
)
airIRG2GroupSetptsSupplyAirSetpointMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupSetptsSupplyAirSetpointMetric.setStatus("mandatory")
_AirIRG2GroupConfig_ObjectIdentity = ObjectIdentity
airIRG2GroupConfig = _AirIRG2GroupConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3)
)
_AirIRG2GroupConfigNumberofCoolingUnits_Type = Integer32
_AirIRG2GroupConfigNumberofCoolingUnits_Object = MibScalar
airIRG2GroupConfigNumberofCoolingUnits = _AirIRG2GroupConfigNumberofCoolingUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 1),
    _AirIRG2GroupConfigNumberofCoolingUnits_Type()
)
airIRG2GroupConfigNumberofCoolingUnits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupConfigNumberofCoolingUnits.setStatus("mandatory")


class _AirIRG2GroupConfigConfigurationType_Type(Integer32):
    """Custom type airIRG2GroupConfigConfigurationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("hacs", 4),
          ("in-row", 3),
          ("racs", 1),
          ("spot", 2))
    )


_AirIRG2GroupConfigConfigurationType_Type.__name__ = "Integer32"
_AirIRG2GroupConfigConfigurationType_Object = MibScalar
airIRG2GroupConfigConfigurationType = _AirIRG2GroupConfigConfigurationType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 2),
    _AirIRG2GroupConfigConfigurationType_Type()
)
airIRG2GroupConfigConfigurationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupConfigConfigurationType.setStatus("mandatory")


class _AirIRG2GroupConfigCapacityControlType_Type(Integer32):
    """Custom type airIRG2GroupConfigCapacityControlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("discrete", 1),
          ("proportional", 2))
    )


_AirIRG2GroupConfigCapacityControlType_Type.__name__ = "Integer32"
_AirIRG2GroupConfigCapacityControlType_Object = MibScalar
airIRG2GroupConfigCapacityControlType = _AirIRG2GroupConfigCapacityControlType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 3),
    _AirIRG2GroupConfigCapacityControlType_Type()
)
airIRG2GroupConfigCapacityControlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupConfigCapacityControlType.setStatus("mandatory")


class _AirIRG2GroupConfigFanSpeedControl_Type(Integer32):
    """Custom type airIRG2GroupConfigFanSpeedControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("manual", 2))
    )


_AirIRG2GroupConfigFanSpeedControl_Type.__name__ = "Integer32"
_AirIRG2GroupConfigFanSpeedControl_Object = MibScalar
airIRG2GroupConfigFanSpeedControl = _AirIRG2GroupConfigFanSpeedControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 4),
    _AirIRG2GroupConfigFanSpeedControl_Type()
)
airIRG2GroupConfigFanSpeedControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupConfigFanSpeedControl.setStatus("mandatory")
_AirIRG2GroupConfigCoolGainP_Type = Integer32
_AirIRG2GroupConfigCoolGainP_Object = MibScalar
airIRG2GroupConfigCoolGainP = _AirIRG2GroupConfigCoolGainP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 5),
    _AirIRG2GroupConfigCoolGainP_Type()
)
airIRG2GroupConfigCoolGainP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupConfigCoolGainP.setStatus("mandatory")
_AirIRG2GroupConfigCoolResetRateI_Type = Integer32
_AirIRG2GroupConfigCoolResetRateI_Object = MibScalar
airIRG2GroupConfigCoolResetRateI = _AirIRG2GroupConfigCoolResetRateI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 6),
    _AirIRG2GroupConfigCoolResetRateI_Type()
)
airIRG2GroupConfigCoolResetRateI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupConfigCoolResetRateI.setStatus("mandatory")
_AirIRG2GroupConfigCoolDerivativeD_Type = Integer32
_AirIRG2GroupConfigCoolDerivativeD_Object = MibScalar
airIRG2GroupConfigCoolDerivativeD = _AirIRG2GroupConfigCoolDerivativeD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 7),
    _AirIRG2GroupConfigCoolDerivativeD_Type()
)
airIRG2GroupConfigCoolDerivativeD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupConfigCoolDerivativeD.setStatus("mandatory")


class _AirIRG2GroupConfigCoolPIDReset_Type(Integer32):
    """Custom type airIRG2GroupConfigCoolPIDReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("readBack", 1),
          ("reset", 2))
    )


_AirIRG2GroupConfigCoolPIDReset_Type.__name__ = "Integer32"
_AirIRG2GroupConfigCoolPIDReset_Object = MibScalar
airIRG2GroupConfigCoolPIDReset = _AirIRG2GroupConfigCoolPIDReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 8),
    _AirIRG2GroupConfigCoolPIDReset_Type()
)
airIRG2GroupConfigCoolPIDReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupConfigCoolPIDReset.setStatus("mandatory")
_AirIRG2GroupConfigNumberofBackupUnits_Type = Integer32
_AirIRG2GroupConfigNumberofBackupUnits_Object = MibScalar
airIRG2GroupConfigNumberofBackupUnits = _AirIRG2GroupConfigNumberofBackupUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 9),
    _AirIRG2GroupConfigNumberofBackupUnits_Type()
)
airIRG2GroupConfigNumberofBackupUnits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupConfigNumberofBackupUnits.setStatus("mandatory")


class _AirIRG2GroupConfigRuntimeBalancingEnable_Type(Integer32):
    """Custom type airIRG2GroupConfigRuntimeBalancingEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirIRG2GroupConfigRuntimeBalancingEnable_Type.__name__ = "Integer32"
_AirIRG2GroupConfigRuntimeBalancingEnable_Object = MibScalar
airIRG2GroupConfigRuntimeBalancingEnable = _AirIRG2GroupConfigRuntimeBalancingEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 10),
    _AirIRG2GroupConfigRuntimeBalancingEnable_Type()
)
airIRG2GroupConfigRuntimeBalancingEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupConfigRuntimeBalancingEnable.setStatus("mandatory")


class _AirIRG2GroupConfigLoadAssistEnable_Type(Integer32):
    """Custom type airIRG2GroupConfigLoadAssistEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirIRG2GroupConfigLoadAssistEnable_Type.__name__ = "Integer32"
_AirIRG2GroupConfigLoadAssistEnable_Object = MibScalar
airIRG2GroupConfigLoadAssistEnable = _AirIRG2GroupConfigLoadAssistEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 2, 3, 11),
    _AirIRG2GroupConfigLoadAssistEnable_Type()
)
airIRG2GroupConfigLoadAssistEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2GroupConfigLoadAssistEnable.setStatus("mandatory")
_AirIRG2Alarms_ObjectIdentity = ObjectIdentity
airIRG2Alarms = _AirIRG2Alarms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3)
)
_AirIRG2AlarmsTableSize_Type = Integer32
_AirIRG2AlarmsTableSize_Object = MibScalar
airIRG2AlarmsTableSize = _AirIRG2AlarmsTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 1),
    _AirIRG2AlarmsTableSize_Type()
)
airIRG2AlarmsTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2AlarmsTableSize.setStatus("mandatory")
_AirIRG2AlarmsTable_Object = MibTable
airIRG2AlarmsTable = _AirIRG2AlarmsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2)
)
if mibBuilder.loadTexts:
    airIRG2AlarmsTable.setStatus("mandatory")
_AirIRG2AlarmsEntry_Object = MibTableRow
airIRG2AlarmsEntry = _AirIRG2AlarmsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1)
)
airIRG2AlarmsEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG2AlarmsIndex"),
)
if mibBuilder.loadTexts:
    airIRG2AlarmsEntry.setStatus("mandatory")
_AirIRG2AlarmsIndex_Type = Integer32
_AirIRG2AlarmsIndex_Object = MibTableColumn
airIRG2AlarmsIndex = _AirIRG2AlarmsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1, 1),
    _AirIRG2AlarmsIndex_Type()
)
airIRG2AlarmsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2AlarmsIndex.setStatus("mandatory")
_AirIRG2AlarmsEventCode_Type = Integer32
_AirIRG2AlarmsEventCode_Object = MibTableColumn
airIRG2AlarmsEventCode = _AirIRG2AlarmsEventCode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1, 2),
    _AirIRG2AlarmsEventCode_Type()
)
airIRG2AlarmsEventCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2AlarmsEventCode.setStatus("mandatory")


class _AirIRG2AlarmsDescription_Type(DisplayString):
    """Custom type airIRG2AlarmsDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_AirIRG2AlarmsDescription_Type.__name__ = "DisplayString"
_AirIRG2AlarmsDescription_Object = MibTableColumn
airIRG2AlarmsDescription = _AirIRG2AlarmsDescription_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 3, 2, 1, 3),
    _AirIRG2AlarmsDescription_Type()
)
airIRG2AlarmsDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2AlarmsDescription.setStatus("mandatory")
_AirIRG2RC_ObjectIdentity = ObjectIdentity
airIRG2RC = _AirIRG2RC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 4)
)
_AirIRG2RD_ObjectIdentity = ObjectIdentity
airIRG2RD = _AirIRG2RD_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5)
)
_AirIRG2RDType1_ObjectIdentity = ObjectIdentity
airIRG2RDType1 = _AirIRG2RDType1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 1)
)
_AirIRG2RDType2_ObjectIdentity = ObjectIdentity
airIRG2RDType2 = _AirIRG2RDType2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2)
)
_AirIRG2RDT2Status_ObjectIdentity = ObjectIdentity
airIRG2RDT2Status = _AirIRG2RDT2Status_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1)
)


class _AirIRG2RDT2StatusOperateMode_Type(Integer32):
    """Custom type airIRG2RDT2StatusOperateMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("idle", 3),
          ("on", 2),
          ("reserved", 4),
          ("service", 5),
          ("standby", 1))
    )


_AirIRG2RDT2StatusOperateMode_Type.__name__ = "Integer32"
_AirIRG2RDT2StatusOperateMode_Object = MibScalar
airIRG2RDT2StatusOperateMode = _AirIRG2RDT2StatusOperateMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 1),
    _AirIRG2RDT2StatusOperateMode_Type()
)
airIRG2RDT2StatusOperateMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusOperateMode.setStatus("mandatory")
_AirIRG2RDT2StatusCoolOutput_Type = Integer32
_AirIRG2RDT2StatusCoolOutput_Object = MibScalar
airIRG2RDT2StatusCoolOutput = _AirIRG2RDT2StatusCoolOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 2),
    _AirIRG2RDT2StatusCoolOutput_Type()
)
airIRG2RDT2StatusCoolOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusCoolOutput.setStatus("mandatory")
_AirIRG2RDT2StatusCoolDemand_Type = Integer32
_AirIRG2RDT2StatusCoolDemand_Object = MibScalar
airIRG2RDT2StatusCoolDemand = _AirIRG2RDT2StatusCoolDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 3),
    _AirIRG2RDT2StatusCoolDemand_Type()
)
airIRG2RDT2StatusCoolDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusCoolDemand.setStatus("mandatory")
_AirIRG2RDT2StatusAirFlowUS_Type = Integer32
_AirIRG2RDT2StatusAirFlowUS_Object = MibScalar
airIRG2RDT2StatusAirFlowUS = _AirIRG2RDT2StatusAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 4),
    _AirIRG2RDT2StatusAirFlowUS_Type()
)
airIRG2RDT2StatusAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusAirFlowUS.setStatus("mandatory")
_AirIRG2RDT2StatusAirFlowMetric_Type = Integer32
_AirIRG2RDT2StatusAirFlowMetric_Object = MibScalar
airIRG2RDT2StatusAirFlowMetric = _AirIRG2RDT2StatusAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 5),
    _AirIRG2RDT2StatusAirFlowMetric_Type()
)
airIRG2RDT2StatusAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusAirFlowMetric.setStatus("mandatory")
_AirIRG2RDT2StatusRackInletTempUS_Type = Integer32
_AirIRG2RDT2StatusRackInletTempUS_Object = MibScalar
airIRG2RDT2StatusRackInletTempUS = _AirIRG2RDT2StatusRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 6),
    _AirIRG2RDT2StatusRackInletTempUS_Type()
)
airIRG2RDT2StatusRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusRackInletTempUS.setStatus("mandatory")
_AirIRG2RDT2StatusRackInletTempMetric_Type = Integer32
_AirIRG2RDT2StatusRackInletTempMetric_Object = MibScalar
airIRG2RDT2StatusRackInletTempMetric = _AirIRG2RDT2StatusRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 7),
    _AirIRG2RDT2StatusRackInletTempMetric_Type()
)
airIRG2RDT2StatusRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusRackInletTempMetric.setStatus("mandatory")
_AirIRG2RDT2StatusSupplyAirTempUS_Type = Integer32
_AirIRG2RDT2StatusSupplyAirTempUS_Object = MibScalar
airIRG2RDT2StatusSupplyAirTempUS = _AirIRG2RDT2StatusSupplyAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 8),
    _AirIRG2RDT2StatusSupplyAirTempUS_Type()
)
airIRG2RDT2StatusSupplyAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusSupplyAirTempUS.setStatus("mandatory")
_AirIRG2RDT2StatusSupplyAirTempMetric_Type = Integer32
_AirIRG2RDT2StatusSupplyAirTempMetric_Object = MibScalar
airIRG2RDT2StatusSupplyAirTempMetric = _AirIRG2RDT2StatusSupplyAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 9),
    _AirIRG2RDT2StatusSupplyAirTempMetric_Type()
)
airIRG2RDT2StatusSupplyAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusSupplyAirTempMetric.setStatus("mandatory")
_AirIRG2RDT2StatusReturnAirTempUS_Type = Integer32
_AirIRG2RDT2StatusReturnAirTempUS_Object = MibScalar
airIRG2RDT2StatusReturnAirTempUS = _AirIRG2RDT2StatusReturnAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 10),
    _AirIRG2RDT2StatusReturnAirTempUS_Type()
)
airIRG2RDT2StatusReturnAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusReturnAirTempUS.setStatus("mandatory")
_AirIRG2RDT2StatusReturnAirTempMetric_Type = Integer32
_AirIRG2RDT2StatusReturnAirTempMetric_Object = MibScalar
airIRG2RDT2StatusReturnAirTempMetric = _AirIRG2RDT2StatusReturnAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 11),
    _AirIRG2RDT2StatusReturnAirTempMetric_Type()
)
airIRG2RDT2StatusReturnAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusReturnAirTempMetric.setStatus("mandatory")
_AirIRG2RDT2StatusSuctionTempUS_Type = Integer32
_AirIRG2RDT2StatusSuctionTempUS_Object = MibScalar
airIRG2RDT2StatusSuctionTempUS = _AirIRG2RDT2StatusSuctionTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 12),
    _AirIRG2RDT2StatusSuctionTempUS_Type()
)
airIRG2RDT2StatusSuctionTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusSuctionTempUS.setStatus("mandatory")
_AirIRG2RDT2StatusSuctionTempMetric_Type = Integer32
_AirIRG2RDT2StatusSuctionTempMetric_Object = MibScalar
airIRG2RDT2StatusSuctionTempMetric = _AirIRG2RDT2StatusSuctionTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 13),
    _AirIRG2RDT2StatusSuctionTempMetric_Type()
)
airIRG2RDT2StatusSuctionTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusSuctionTempMetric.setStatus("mandatory")
_AirIRG2RDT2StatusSuperheatTempUS_Type = Integer32
_AirIRG2RDT2StatusSuperheatTempUS_Object = MibScalar
airIRG2RDT2StatusSuperheatTempUS = _AirIRG2RDT2StatusSuperheatTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 14),
    _AirIRG2RDT2StatusSuperheatTempUS_Type()
)
airIRG2RDT2StatusSuperheatTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusSuperheatTempUS.setStatus("mandatory")
_AirIRG2RDT2StatusSuperheatTempMetric_Type = Integer32
_AirIRG2RDT2StatusSuperheatTempMetric_Object = MibScalar
airIRG2RDT2StatusSuperheatTempMetric = _AirIRG2RDT2StatusSuperheatTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 15),
    _AirIRG2RDT2StatusSuperheatTempMetric_Type()
)
airIRG2RDT2StatusSuperheatTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusSuperheatTempMetric.setStatus("mandatory")
_AirIRG2RDT2StatusFilterDPUS_Type = Integer32
_AirIRG2RDT2StatusFilterDPUS_Object = MibScalar
airIRG2RDT2StatusFilterDPUS = _AirIRG2RDT2StatusFilterDPUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 16),
    _AirIRG2RDT2StatusFilterDPUS_Type()
)
airIRG2RDT2StatusFilterDPUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusFilterDPUS.setStatus("mandatory")
_AirIRG2RDT2StatusFilterDPMetric_Type = Integer32
_AirIRG2RDT2StatusFilterDPMetric_Object = MibScalar
airIRG2RDT2StatusFilterDPMetric = _AirIRG2RDT2StatusFilterDPMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 17),
    _AirIRG2RDT2StatusFilterDPMetric_Type()
)
airIRG2RDT2StatusFilterDPMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusFilterDPMetric.setStatus("mandatory")
_AirIRG2RDT2StatusSuctionPressureUS_Type = Integer32
_AirIRG2RDT2StatusSuctionPressureUS_Object = MibScalar
airIRG2RDT2StatusSuctionPressureUS = _AirIRG2RDT2StatusSuctionPressureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 18),
    _AirIRG2RDT2StatusSuctionPressureUS_Type()
)
airIRG2RDT2StatusSuctionPressureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusSuctionPressureUS.setStatus("mandatory")
_AirIRG2RDT2StatusSuctionPressureMetric_Type = Integer32
_AirIRG2RDT2StatusSuctionPressureMetric_Object = MibScalar
airIRG2RDT2StatusSuctionPressureMetric = _AirIRG2RDT2StatusSuctionPressureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 19),
    _AirIRG2RDT2StatusSuctionPressureMetric_Type()
)
airIRG2RDT2StatusSuctionPressureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusSuctionPressureMetric.setStatus("mandatory")
_AirIRG2RDT2StatusDischargePressureUS_Type = Integer32
_AirIRG2RDT2StatusDischargePressureUS_Object = MibScalar
airIRG2RDT2StatusDischargePressureUS = _AirIRG2RDT2StatusDischargePressureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 20),
    _AirIRG2RDT2StatusDischargePressureUS_Type()
)
airIRG2RDT2StatusDischargePressureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusDischargePressureUS.setStatus("mandatory")
_AirIRG2RDT2StatusDischargePressureMetric_Type = Integer32
_AirIRG2RDT2StatusDischargePressureMetric_Object = MibScalar
airIRG2RDT2StatusDischargePressureMetric = _AirIRG2RDT2StatusDischargePressureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 21),
    _AirIRG2RDT2StatusDischargePressureMetric_Type()
)
airIRG2RDT2StatusDischargePressureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusDischargePressureMetric.setStatus("mandatory")
_AirIRG2RDT2StatusEvaporatorFanSpeed_Type = Integer32
_AirIRG2RDT2StatusEvaporatorFanSpeed_Object = MibScalar
airIRG2RDT2StatusEvaporatorFanSpeed = _AirIRG2RDT2StatusEvaporatorFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 22),
    _AirIRG2RDT2StatusEvaporatorFanSpeed_Type()
)
airIRG2RDT2StatusEvaporatorFanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusEvaporatorFanSpeed.setStatus("mandatory")
_AirIRG2RDT2StatusInputState_Type = AirIRG2RDType2IOState
_AirIRG2RDT2StatusInputState_Object = MibScalar
airIRG2RDT2StatusInputState = _AirIRG2RDT2StatusInputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 23),
    _AirIRG2RDT2StatusInputState_Type()
)
airIRG2RDT2StatusInputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusInputState.setStatus("mandatory")
_AirIRG2RDT2StatusOutputState_Type = AirIRG2RDType2IOState
_AirIRG2RDT2StatusOutputState_Object = MibScalar
airIRG2RDT2StatusOutputState = _AirIRG2RDT2StatusOutputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 24),
    _AirIRG2RDT2StatusOutputState_Type()
)
airIRG2RDT2StatusOutputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusOutputState.setStatus("mandatory")
_AirIRG2RDT2StatusOHEInputState_Type = AirIRG2RDType2IOState
_AirIRG2RDT2StatusOHEInputState_Object = MibScalar
airIRG2RDT2StatusOHEInputState = _AirIRG2RDT2StatusOHEInputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 25),
    _AirIRG2RDT2StatusOHEInputState_Type()
)
airIRG2RDT2StatusOHEInputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusOHEInputState.setStatus("mandatory")
_AirIRG2RDT2StatusOHEOutputState_Type = AirIRG2RDType2IOState
_AirIRG2RDT2StatusOHEOutputState_Object = MibScalar
airIRG2RDT2StatusOHEOutputState = _AirIRG2RDT2StatusOHEOutputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 26),
    _AirIRG2RDT2StatusOHEOutputState_Type()
)
airIRG2RDT2StatusOHEOutputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusOHEOutputState.setStatus("mandatory")


class _AirIRG2RDT2StatusCompressor_Type(Integer32):
    """Custom type airIRG2RDT2StatusCompressor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AirIRG2RDT2StatusCompressor_Type.__name__ = "Integer32"
_AirIRG2RDT2StatusCompressor_Object = MibScalar
airIRG2RDT2StatusCompressor = _AirIRG2RDT2StatusCompressor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 27),
    _AirIRG2RDT2StatusCompressor_Type()
)
airIRG2RDT2StatusCompressor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusCompressor.setStatus("mandatory")
_AirIRG2RDT2StatusFluidValvePos_Type = Integer32
_AirIRG2RDT2StatusFluidValvePos_Object = MibScalar
airIRG2RDT2StatusFluidValvePos = _AirIRG2RDT2StatusFluidValvePos_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 28),
    _AirIRG2RDT2StatusFluidValvePos_Type()
)
airIRG2RDT2StatusFluidValvePos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusFluidValvePos.setStatus("mandatory")
_AirIRG2RDT2StatusHotGasBypassValvePos_Type = Integer32
_AirIRG2RDT2StatusHotGasBypassValvePos_Object = MibScalar
airIRG2RDT2StatusHotGasBypassValvePos = _AirIRG2RDT2StatusHotGasBypassValvePos_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 1, 29),
    _AirIRG2RDT2StatusHotGasBypassValvePos_Type()
)
airIRG2RDT2StatusHotGasBypassValvePos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2StatusHotGasBypassValvePos.setStatus("mandatory")
_AirIRG2RDT2RunHours_ObjectIdentity = ObjectIdentity
airIRG2RDT2RunHours = _AirIRG2RDT2RunHours_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2)
)
_AirIRG2RDT2RunHoursAirFilter_Type = Integer32
_AirIRG2RDT2RunHoursAirFilter_Object = MibScalar
airIRG2RDT2RunHoursAirFilter = _AirIRG2RDT2RunHoursAirFilter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 1),
    _AirIRG2RDT2RunHoursAirFilter_Type()
)
airIRG2RDT2RunHoursAirFilter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursAirFilter.setStatus("mandatory")
_AirIRG2RDT2RunHoursCondensatePump_Type = Integer32
_AirIRG2RDT2RunHoursCondensatePump_Object = MibScalar
airIRG2RDT2RunHoursCondensatePump = _AirIRG2RDT2RunHoursCondensatePump_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 2),
    _AirIRG2RDT2RunHoursCondensatePump_Type()
)
airIRG2RDT2RunHoursCondensatePump.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursCondensatePump.setStatus("mandatory")
_AirIRG2RDT2RunHoursCompressor_Type = Integer32
_AirIRG2RDT2RunHoursCompressor_Object = MibScalar
airIRG2RDT2RunHoursCompressor = _AirIRG2RDT2RunHoursCompressor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 3),
    _AirIRG2RDT2RunHoursCompressor_Type()
)
airIRG2RDT2RunHoursCompressor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursCompressor.setStatus("mandatory")
_AirIRG2RDT2RunHoursFanPSTableSize_Type = Integer32
_AirIRG2RDT2RunHoursFanPSTableSize_Object = MibScalar
airIRG2RDT2RunHoursFanPSTableSize = _AirIRG2RDT2RunHoursFanPSTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 4),
    _AirIRG2RDT2RunHoursFanPSTableSize_Type()
)
airIRG2RDT2RunHoursFanPSTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursFanPSTableSize.setStatus("mandatory")
_AirIRG2RDT2RunHoursFanPSTable_Object = MibTable
airIRG2RDT2RunHoursFanPSTable = _AirIRG2RDT2RunHoursFanPSTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5)
)
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursFanPSTable.setStatus("mandatory")
_AirIRG2RDT2RunHoursFanPSEntry_Object = MibTableRow
airIRG2RDT2RunHoursFanPSEntry = _AirIRG2RDT2RunHoursFanPSEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1)
)
airIRG2RDT2RunHoursFanPSEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG2RDT2RunHoursFanPSIndex"),
)
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursFanPSEntry.setStatus("mandatory")
_AirIRG2RDT2RunHoursFanPSIndex_Type = Integer32
_AirIRG2RDT2RunHoursFanPSIndex_Object = MibTableColumn
airIRG2RDT2RunHoursFanPSIndex = _AirIRG2RDT2RunHoursFanPSIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1, 1),
    _AirIRG2RDT2RunHoursFanPSIndex_Type()
)
airIRG2RDT2RunHoursFanPSIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursFanPSIndex.setStatus("mandatory")
_AirIRG2RDT2RunHoursFanPSHours_Type = Integer32
_AirIRG2RDT2RunHoursFanPSHours_Object = MibTableColumn
airIRG2RDT2RunHoursFanPSHours = _AirIRG2RDT2RunHoursFanPSHours_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1, 2),
    _AirIRG2RDT2RunHoursFanPSHours_Type()
)
airIRG2RDT2RunHoursFanPSHours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursFanPSHours.setStatus("mandatory")


class _AirIRG2RDT2RunHoursFanPSPosition_Type(Integer32):
    """Custom type airIRG2RDT2RunHoursFanPSPosition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("left", 3),
          ("lower", 2),
          ("right", 4),
          ("upper", 1))
    )


_AirIRG2RDT2RunHoursFanPSPosition_Type.__name__ = "Integer32"
_AirIRG2RDT2RunHoursFanPSPosition_Object = MibTableColumn
airIRG2RDT2RunHoursFanPSPosition = _AirIRG2RDT2RunHoursFanPSPosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 5, 1, 3),
    _AirIRG2RDT2RunHoursFanPSPosition_Type()
)
airIRG2RDT2RunHoursFanPSPosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursFanPSPosition.setStatus("mandatory")
_AirIRG2RDT2RunHoursEvapFanTableSize_Type = Integer32
_AirIRG2RDT2RunHoursEvapFanTableSize_Object = MibScalar
airIRG2RDT2RunHoursEvapFanTableSize = _AirIRG2RDT2RunHoursEvapFanTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 6),
    _AirIRG2RDT2RunHoursEvapFanTableSize_Type()
)
airIRG2RDT2RunHoursEvapFanTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursEvapFanTableSize.setStatus("mandatory")
_AirIRG2RDT2RunHoursEvapFanTable_Object = MibTable
airIRG2RDT2RunHoursEvapFanTable = _AirIRG2RDT2RunHoursEvapFanTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7)
)
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursEvapFanTable.setStatus("mandatory")
_AirIRG2RDT2RunHoursEvapFanEntry_Object = MibTableRow
airIRG2RDT2RunHoursEvapFanEntry = _AirIRG2RDT2RunHoursEvapFanEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7, 1)
)
airIRG2RDT2RunHoursEvapFanEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG2RDT2RunHoursEvapFanIndex"),
)
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursEvapFanEntry.setStatus("mandatory")
_AirIRG2RDT2RunHoursEvapFanIndex_Type = Integer32
_AirIRG2RDT2RunHoursEvapFanIndex_Object = MibTableColumn
airIRG2RDT2RunHoursEvapFanIndex = _AirIRG2RDT2RunHoursEvapFanIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7, 1, 1),
    _AirIRG2RDT2RunHoursEvapFanIndex_Type()
)
airIRG2RDT2RunHoursEvapFanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursEvapFanIndex.setStatus("mandatory")
_AirIRG2RDT2RunHoursEvapFanHours_Type = Integer32
_AirIRG2RDT2RunHoursEvapFanHours_Object = MibTableColumn
airIRG2RDT2RunHoursEvapFanHours = _AirIRG2RDT2RunHoursEvapFanHours_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 7, 1, 2),
    _AirIRG2RDT2RunHoursEvapFanHours_Type()
)
airIRG2RDT2RunHoursEvapFanHours.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursEvapFanHours.setStatus("mandatory")
_AirIRG2RDT2RunHoursUnit_Type = Integer32
_AirIRG2RDT2RunHoursUnit_Object = MibScalar
airIRG2RDT2RunHoursUnit = _AirIRG2RDT2RunHoursUnit_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 2, 8),
    _AirIRG2RDT2RunHoursUnit_Type()
)
airIRG2RDT2RunHoursUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2RunHoursUnit.setStatus("mandatory")
_AirIRG2RDT2ServiceIntervals_ObjectIdentity = ObjectIdentity
airIRG2RDT2ServiceIntervals = _AirIRG2RDT2ServiceIntervals_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 3)
)
_AirIRG2RDT2ServiceIntervalsAirFilter_Type = Integer32
_AirIRG2RDT2ServiceIntervalsAirFilter_Object = MibScalar
airIRG2RDT2ServiceIntervalsAirFilter = _AirIRG2RDT2ServiceIntervalsAirFilter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 3, 1),
    _AirIRG2RDT2ServiceIntervalsAirFilter_Type()
)
airIRG2RDT2ServiceIntervalsAirFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ServiceIntervalsAirFilter.setStatus("mandatory")


class _AirIRG2RDT2ServiceIntervalsAirFilterAlarm_Type(Integer32):
    """Custom type airIRG2RDT2ServiceIntervalsAirFilterAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRG2RDT2ServiceIntervalsAirFilterAlarm_Type.__name__ = "Integer32"
_AirIRG2RDT2ServiceIntervalsAirFilterAlarm_Object = MibScalar
airIRG2RDT2ServiceIntervalsAirFilterAlarm = _AirIRG2RDT2ServiceIntervalsAirFilterAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 3, 2),
    _AirIRG2RDT2ServiceIntervalsAirFilterAlarm_Type()
)
airIRG2RDT2ServiceIntervalsAirFilterAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ServiceIntervalsAirFilterAlarm.setStatus("mandatory")
_AirIRG2RDT2Thresholds_ObjectIdentity = ObjectIdentity
airIRG2RDT2Thresholds = _AirIRG2RDT2Thresholds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4)
)
_AirIRG2RDT2ThresholdsRackInletHighTempUS_Type = Integer32
_AirIRG2RDT2ThresholdsRackInletHighTempUS_Object = MibScalar
airIRG2RDT2ThresholdsRackInletHighTempUS = _AirIRG2RDT2ThresholdsRackInletHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 1),
    _AirIRG2RDT2ThresholdsRackInletHighTempUS_Type()
)
airIRG2RDT2ThresholdsRackInletHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ThresholdsRackInletHighTempUS.setStatus("mandatory")
_AirIRG2RDT2ThresholdsRackInletHighTempMetric_Type = Integer32
_AirIRG2RDT2ThresholdsRackInletHighTempMetric_Object = MibScalar
airIRG2RDT2ThresholdsRackInletHighTempMetric = _AirIRG2RDT2ThresholdsRackInletHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 2),
    _AirIRG2RDT2ThresholdsRackInletHighTempMetric_Type()
)
airIRG2RDT2ThresholdsRackInletHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ThresholdsRackInletHighTempMetric.setStatus("mandatory")
_AirIRG2RDT2ThresholdsSupplyAirHighTempUS_Type = Integer32
_AirIRG2RDT2ThresholdsSupplyAirHighTempUS_Object = MibScalar
airIRG2RDT2ThresholdsSupplyAirHighTempUS = _AirIRG2RDT2ThresholdsSupplyAirHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 3),
    _AirIRG2RDT2ThresholdsSupplyAirHighTempUS_Type()
)
airIRG2RDT2ThresholdsSupplyAirHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ThresholdsSupplyAirHighTempUS.setStatus("mandatory")
_AirIRG2RDT2ThresholdsSupplyAirHighTempMetric_Type = Integer32
_AirIRG2RDT2ThresholdsSupplyAirHighTempMetric_Object = MibScalar
airIRG2RDT2ThresholdsSupplyAirHighTempMetric = _AirIRG2RDT2ThresholdsSupplyAirHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 4),
    _AirIRG2RDT2ThresholdsSupplyAirHighTempMetric_Type()
)
airIRG2RDT2ThresholdsSupplyAirHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ThresholdsSupplyAirHighTempMetric.setStatus("mandatory")
_AirIRG2RDT2ThresholdsReturnAirHighTempUS_Type = Integer32
_AirIRG2RDT2ThresholdsReturnAirHighTempUS_Object = MibScalar
airIRG2RDT2ThresholdsReturnAirHighTempUS = _AirIRG2RDT2ThresholdsReturnAirHighTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 5),
    _AirIRG2RDT2ThresholdsReturnAirHighTempUS_Type()
)
airIRG2RDT2ThresholdsReturnAirHighTempUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ThresholdsReturnAirHighTempUS.setStatus("mandatory")
_AirIRG2RDT2ThresholdsReturnAirHighTempMetric_Type = Integer32
_AirIRG2RDT2ThresholdsReturnAirHighTempMetric_Object = MibScalar
airIRG2RDT2ThresholdsReturnAirHighTempMetric = _AirIRG2RDT2ThresholdsReturnAirHighTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 4, 6),
    _AirIRG2RDT2ThresholdsReturnAirHighTempMetric_Type()
)
airIRG2RDT2ThresholdsReturnAirHighTempMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ThresholdsReturnAirHighTempMetric.setStatus("mandatory")
_AirIRG2RDT2Setpoints_ObjectIdentity = ObjectIdentity
airIRG2RDT2Setpoints = _AirIRG2RDT2Setpoints_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 5)
)
_AirIRG2RDT2Config_ObjectIdentity = ObjectIdentity
airIRG2RDT2Config = _AirIRG2RDT2Config_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6)
)


class _AirIRG2RDT2ConfigUnitType_Type(Integer32):
    """Custom type airIRG2RDT2ConfigUnitType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("airCooled", 2),
          ("fluidCooled", 1))
    )


_AirIRG2RDT2ConfigUnitType_Type.__name__ = "Integer32"
_AirIRG2RDT2ConfigUnitType_Object = MibScalar
airIRG2RDT2ConfigUnitType = _AirIRG2RDT2ConfigUnitType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 1),
    _AirIRG2RDT2ConfigUnitType_Type()
)
airIRG2RDT2ConfigUnitType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG2RDT2ConfigUnitType.setStatus("mandatory")
_AirIRG2RDT2ConfigStartupDelay_Type = Integer32
_AirIRG2RDT2ConfigStartupDelay_Object = MibScalar
airIRG2RDT2ConfigStartupDelay = _AirIRG2RDT2ConfigStartupDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 2),
    _AirIRG2RDT2ConfigStartupDelay_Type()
)
airIRG2RDT2ConfigStartupDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ConfigStartupDelay.setStatus("mandatory")


class _AirIRG2RDT2ConfigIdleOnLeakDetect_Type(Integer32):
    """Custom type airIRG2RDT2ConfigIdleOnLeakDetect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_AirIRG2RDT2ConfigIdleOnLeakDetect_Type.__name__ = "Integer32"
_AirIRG2RDT2ConfigIdleOnLeakDetect_Object = MibScalar
airIRG2RDT2ConfigIdleOnLeakDetect = _AirIRG2RDT2ConfigIdleOnLeakDetect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 3),
    _AirIRG2RDT2ConfigIdleOnLeakDetect_Type()
)
airIRG2RDT2ConfigIdleOnLeakDetect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ConfigIdleOnLeakDetect.setStatus("mandatory")
_AirIRG2RDT2ConfigInputNormalState_Type = AirIRG2RDType2IOState
_AirIRG2RDT2ConfigInputNormalState_Object = MibScalar
airIRG2RDT2ConfigInputNormalState = _AirIRG2RDT2ConfigInputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 4),
    _AirIRG2RDT2ConfigInputNormalState_Type()
)
airIRG2RDT2ConfigInputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ConfigInputNormalState.setStatus("mandatory")
_AirIRG2RDT2ConfigOutputNormalState_Type = AirIRG2RDType2IOState
_AirIRG2RDT2ConfigOutputNormalState_Object = MibScalar
airIRG2RDT2ConfigOutputNormalState = _AirIRG2RDT2ConfigOutputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 5),
    _AirIRG2RDT2ConfigOutputNormalState_Type()
)
airIRG2RDT2ConfigOutputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ConfigOutputNormalState.setStatus("mandatory")


class _AirIRG2RDT2ConfigOutputSource_Type(Integer32):
    """Custom type airIRG2RDT2ConfigOutputSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("anyAlarm", 1),
          ("criticalAlarm", 2))
    )


_AirIRG2RDT2ConfigOutputSource_Type.__name__ = "Integer32"
_AirIRG2RDT2ConfigOutputSource_Object = MibScalar
airIRG2RDT2ConfigOutputSource = _AirIRG2RDT2ConfigOutputSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 6),
    _AirIRG2RDT2ConfigOutputSource_Type()
)
airIRG2RDT2ConfigOutputSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ConfigOutputSource.setStatus("mandatory")
_AirIRG2RDT2ConfigOHEInputNormalState_Type = AirIRG2RDType2IOState
_AirIRG2RDT2ConfigOHEInputNormalState_Object = MibScalar
airIRG2RDT2ConfigOHEInputNormalState = _AirIRG2RDT2ConfigOHEInputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 7),
    _AirIRG2RDT2ConfigOHEInputNormalState_Type()
)
airIRG2RDT2ConfigOHEInputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ConfigOHEInputNormalState.setStatus("mandatory")


class _AirIRG2RDT2ConfigUnitRoleOverride_Type(Integer32):
    """Custom type airIRG2RDT2ConfigUnitRoleOverride based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("forcedOn", 2))
    )


_AirIRG2RDT2ConfigUnitRoleOverride_Type.__name__ = "Integer32"
_AirIRG2RDT2ConfigUnitRoleOverride_Object = MibScalar
airIRG2RDT2ConfigUnitRoleOverride = _AirIRG2RDT2ConfigUnitRoleOverride_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 8),
    _AirIRG2RDT2ConfigUnitRoleOverride_Type()
)
airIRG2RDT2ConfigUnitRoleOverride.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ConfigUnitRoleOverride.setStatus("mandatory")


class _AirIRG2RDT2ConfigUnitIdleOnCoolFail_Type(Integer32):
    """Custom type airIRG2RDT2ConfigUnitIdleOnCoolFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_AirIRG2RDT2ConfigUnitIdleOnCoolFail_Type.__name__ = "Integer32"
_AirIRG2RDT2ConfigUnitIdleOnCoolFail_Object = MibScalar
airIRG2RDT2ConfigUnitIdleOnCoolFail = _AirIRG2RDT2ConfigUnitIdleOnCoolFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 5, 2, 6, 9),
    _AirIRG2RDT2ConfigUnitIdleOnCoolFail_Type()
)
airIRG2RDT2ConfigUnitIdleOnCoolFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG2RDT2ConfigUnitIdleOnCoolFail.setStatus("mandatory")
_AirIRG2SC_ObjectIdentity = ObjectIdentity
airIRG2SC = _AirIRG2SC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 6)
)
_AirIRG2RA_ObjectIdentity = ObjectIdentity
airIRG2RA = _AirIRG2RA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 4, 7)
)
_AirInRoom_ObjectIdentity = ObjectIdentity
airInRoom = _AirInRoom_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5)
)
_AirIRmIdent_ObjectIdentity = ObjectIdentity
airIRmIdent = _AirIRmIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1)
)
_AirIRmIdentName_Type = DisplayString
_AirIRmIdentName_Object = MibScalar
airIRmIdentName = _AirIRmIdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 1),
    _AirIRmIdentName_Type()
)
airIRmIdentName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmIdentName.setStatus("mandatory")
_AirIRmIdentLocation_Type = DisplayString
_AirIRmIdentLocation_Object = MibScalar
airIRmIdentLocation = _AirIRmIdentLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 2),
    _AirIRmIdentLocation_Type()
)
airIRmIdentLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmIdentLocation.setStatus("mandatory")
_AirIRmIdentModelNumber_Type = DisplayString
_AirIRmIdentModelNumber_Object = MibScalar
airIRmIdentModelNumber = _AirIRmIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 3),
    _AirIRmIdentModelNumber_Type()
)
airIRmIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmIdentModelNumber.setStatus("mandatory")
_AirIRmIdentSerialNumber_Type = DisplayString
_AirIRmIdentSerialNumber_Object = MibScalar
airIRmIdentSerialNumber = _AirIRmIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 4),
    _AirIRmIdentSerialNumber_Type()
)
airIRmIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmIdentSerialNumber.setStatus("mandatory")
_AirIRmIdentFirmwareRevision_Type = DisplayString
_AirIRmIdentFirmwareRevision_Object = MibScalar
airIRmIdentFirmwareRevision = _AirIRmIdentFirmwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 5),
    _AirIRmIdentFirmwareRevision_Type()
)
airIRmIdentFirmwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmIdentFirmwareRevision.setStatus("mandatory")
_AirIRmIdentHardwareRevision_Type = DisplayString
_AirIRmIdentHardwareRevision_Object = MibScalar
airIRmIdentHardwareRevision = _AirIRmIdentHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 6),
    _AirIRmIdentHardwareRevision_Type()
)
airIRmIdentHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmIdentHardwareRevision.setStatus("mandatory")
_AirIRmIdentManufactureDate_Type = DisplayString
_AirIRmIdentManufactureDate_Object = MibScalar
airIRmIdentManufactureDate = _AirIRmIdentManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 7),
    _AirIRmIdentManufactureDate_Type()
)
airIRmIdentManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmIdentManufactureDate.setStatus("mandatory")
_AirIRmIdentSysOID_Type = ObjectIdentifier
_AirIRmIdentSysOID_Object = MibScalar
airIRmIdentSysOID = _AirIRmIdentSysOID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 1, 8),
    _AirIRmIdentSysOID_Type()
)
airIRmIdentSysOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmIdentSysOID.setStatus("mandatory")
_AirIRmAlarms_ObjectIdentity = ObjectIdentity
airIRmAlarms = _AirIRmAlarms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2)
)
_AirIRmAlarmsTableSize_Type = Integer32
_AirIRmAlarmsTableSize_Object = MibScalar
airIRmAlarmsTableSize = _AirIRmAlarmsTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 1),
    _AirIRmAlarmsTableSize_Type()
)
airIRmAlarmsTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmAlarmsTableSize.setStatus("mandatory")
_AirIRmAlarmsTable_Object = MibTable
airIRmAlarmsTable = _AirIRmAlarmsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2)
)
if mibBuilder.loadTexts:
    airIRmAlarmsTable.setStatus("mandatory")
_AirIRmAlarmsEntry_Object = MibTableRow
airIRmAlarmsEntry = _AirIRmAlarmsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1)
)
airIRmAlarmsEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRmAlarmsIndex"),
)
if mibBuilder.loadTexts:
    airIRmAlarmsEntry.setStatus("mandatory")
_AirIRmAlarmsIndex_Type = Integer32
_AirIRmAlarmsIndex_Object = MibTableColumn
airIRmAlarmsIndex = _AirIRmAlarmsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1, 1),
    _AirIRmAlarmsIndex_Type()
)
airIRmAlarmsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmAlarmsIndex.setStatus("mandatory")
_AirIRmAlarmsEventCode_Type = Integer32
_AirIRmAlarmsEventCode_Object = MibTableColumn
airIRmAlarmsEventCode = _AirIRmAlarmsEventCode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1, 2),
    _AirIRmAlarmsEventCode_Type()
)
airIRmAlarmsEventCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmAlarmsEventCode.setStatus("mandatory")


class _AirIRmAlarmsDescription_Type(DisplayString):
    """Custom type airIRmAlarmsDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_AirIRmAlarmsDescription_Type.__name__ = "DisplayString"
_AirIRmAlarmsDescription_Object = MibTableColumn
airIRmAlarmsDescription = _AirIRmAlarmsDescription_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 2, 2, 1, 3),
    _AirIRmAlarmsDescription_Type()
)
airIRmAlarmsDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmAlarmsDescription.setStatus("mandatory")
_AirIRmPerimeter_ObjectIdentity = ObjectIdentity
airIRmPerimeter = _AirIRmPerimeter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3)
)
_AirIRmPmCommon1_ObjectIdentity = ObjectIdentity
airIRmPmCommon1 = _AirIRmPmCommon1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2)
)


class _AirIRmPmUnitType_Type(Integer32):
    """Custom type airIRmPmUnitType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              256)
        )
    )
    namedValues = NamedValues(
        *(("ch", 4),
          ("cw", 3),
          ("cw2", 10),
          ("dualFluid", 9),
          ("dx", 2),
          ("ecoCool", 5),
          ("ge1", 7),
          ("ge2", 8),
          ("mc", 1),
          ("msc", 6),
          ("unknown", 256))
    )


_AirIRmPmUnitType_Type.__name__ = "Integer32"
_AirIRmPmUnitType_Object = MibScalar
airIRmPmUnitType = _AirIRmPmUnitType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 1),
    _AirIRmPmUnitType_Type()
)
airIRmPmUnitType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitType.setStatus("mandatory")
_AirIRmPmSwVersion_Type = DisplayString
_AirIRmPmSwVersion_Object = MibScalar
airIRmPmSwVersion = _AirIRmPmSwVersion_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 3),
    _AirIRmPmSwVersion_Type()
)
airIRmPmSwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSwVersion.setStatus("mandatory")


class _AirIRmPmBusAddress_Type(Integer32):
    """Custom type airIRmPmBusAddress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AirIRmPmBusAddress_Type.__name__ = "Integer32"
_AirIRmPmBusAddress_Object = MibScalar
airIRmPmBusAddress = _AirIRmPmBusAddress_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 5),
    _AirIRmPmBusAddress_Type()
)
airIRmPmBusAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmBusAddress.setStatus("mandatory")


class _AirIRmPmControllerType_Type(Integer32):
    """Custom type airIRmPmControllerType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("c1001", 3),
          ("c1002", 4),
          ("c1010", 7),
          ("c4000", 2),
          ("c5000", 5),
          ("c5MSC", 11),
          ("c6000", 6),
          ("c7000AT", 9),
          ("c7000IOC", 8),
          ("c7000PT", 10),
          ("c7000PT2", 12),
          ("unknown", 1))
    )


_AirIRmPmControllerType_Type.__name__ = "Integer32"
_AirIRmPmControllerType_Object = MibScalar
airIRmPmControllerType = _AirIRmPmControllerType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 7),
    _AirIRmPmControllerType_Type()
)
airIRmPmControllerType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmControllerType.setStatus("mandatory")
_AirIRmPmGeneralError_Type = AirIRmAlarmState
_AirIRmPmGeneralError_Object = MibScalar
airIRmPmGeneralError = _AirIRmPmGeneralError_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 8),
    _AirIRmPmGeneralError_Type()
)
airIRmPmGeneralError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmGeneralError.setStatus("mandatory")
_AirIRmPmErrorOnBus_Type = AirIRmAlarmState
_AirIRmPmErrorOnBus_Object = MibScalar
airIRmPmErrorOnBus = _AirIRmPmErrorOnBus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 2, 9),
    _AirIRmPmErrorOnBus_Type()
)
airIRmPmErrorOnBus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmErrorOnBus.setStatus("mandatory")
_AirIRmPmCommon2_ObjectIdentity = ObjectIdentity
airIRmPmCommon2 = _AirIRmPmCommon2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3)
)
_AirIRmPmPCStop_Type = AirIRmStopState
_AirIRmPmPCStop_Object = MibScalar
airIRmPmPCStop = _AirIRmPmPCStop_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 1),
    _AirIRmPmPCStop_Type()
)
airIRmPmPCStop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPCStop.setStatus("mandatory")
_AirIRmPmRemoteStop_Type = AirIRmStopState
_AirIRmPmRemoteStop_Object = MibScalar
airIRmPmRemoteStop = _AirIRmPmRemoteStop_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 2),
    _AirIRmPmRemoteStop_Type()
)
airIRmPmRemoteStop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmRemoteStop.setStatus("mandatory")
_AirIRmPmLocalStop_Type = AirIRmStopState
_AirIRmPmLocalStop_Object = MibScalar
airIRmPmLocalStop = _AirIRmPmLocalStop_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 3),
    _AirIRmPmLocalStop_Type()
)
airIRmPmLocalStop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLocalStop.setStatus("mandatory")
_AirIRmPmTimerStop_Type = AirIRmStopState
_AirIRmPmTimerStop_Object = MibScalar
airIRmPmTimerStop = _AirIRmPmTimerStop_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 4),
    _AirIRmPmTimerStop_Type()
)
airIRmPmTimerStop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmTimerStop.setStatus("mandatory")
_AirIRmPmSeqStop_Type = AirIRmStopState
_AirIRmPmSeqStop_Object = MibScalar
airIRmPmSeqStop = _AirIRmPmSeqStop_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 5),
    _AirIRmPmSeqStop_Type()
)
airIRmPmSeqStop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSeqStop.setStatus("mandatory")


class _AirIRmPmRemoteUPS_Type(Integer32):
    """Custom type airIRmPmRemoteUPS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AirIRmPmRemoteUPS_Type.__name__ = "Integer32"
_AirIRmPmRemoteUPS_Object = MibScalar
airIRmPmRemoteUPS = _AirIRmPmRemoteUPS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 7),
    _AirIRmPmRemoteUPS_Type()
)
airIRmPmRemoteUPS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmRemoteUPS.setStatus("mandatory")
_AirIRmPmLocalUPS_Type = AirIRmActivityState
_AirIRmPmLocalUPS_Object = MibScalar
airIRmPmLocalUPS = _AirIRmPmLocalUPS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 8),
    _AirIRmPmLocalUPS_Type()
)
airIRmPmLocalUPS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLocalUPS.setStatus("mandatory")
_AirIRmPmCommonAlarm_Type = AirIRmAlarmState
_AirIRmPmCommonAlarm_Object = MibScalar
airIRmPmCommonAlarm = _AirIRmPmCommonAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 11),
    _AirIRmPmCommonAlarm_Type()
)
airIRmPmCommonAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCommonAlarm.setStatus("mandatory")


class _AirIRmPmResetAllAlarms_Type(Integer32):
    """Custom type airIRmPmResetAllAlarms based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("doNothing", 1),
          ("reset", 2))
    )


_AirIRmPmResetAllAlarms_Type.__name__ = "Integer32"
_AirIRmPmResetAllAlarms_Object = MibScalar
airIRmPmResetAllAlarms = _AirIRmPmResetAllAlarms_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 12),
    _AirIRmPmResetAllAlarms_Type()
)
airIRmPmResetAllAlarms.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmResetAllAlarms.setStatus("mandatory")
_AirIRmPmUnitOnOff_Type = AirIRmControlState
_AirIRmPmUnitOnOff_Object = MibScalar
airIRmPmUnitOnOff = _AirIRmPmUnitOnOff_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 14),
    _AirIRmPmUnitOnOff_Type()
)
airIRmPmUnitOnOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitOnOff.setStatus("mandatory")


class _AirIRmPmMaintenance_Type(Integer32):
    """Custom type airIRmPmMaintenance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("necessary", 2),
          ("notNecessary", 1))
    )


_AirIRmPmMaintenance_Type.__name__ = "Integer32"
_AirIRmPmMaintenance_Object = MibScalar
airIRmPmMaintenance = _AirIRmPmMaintenance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 15),
    _AirIRmPmMaintenance_Type()
)
airIRmPmMaintenance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMaintenance.setStatus("mandatory")


class _AirIRmPmUnitTemperatureScale_Type(Integer32):
    """Custom type airIRmPmUnitTemperatureScale based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("celsius", 1),
          ("fahrenheit", 2))
    )


_AirIRmPmUnitTemperatureScale_Type.__name__ = "Integer32"
_AirIRmPmUnitTemperatureScale_Object = MibScalar
airIRmPmUnitTemperatureScale = _AirIRmPmUnitTemperatureScale_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 23),
    _AirIRmPmUnitTemperatureScale_Type()
)
airIRmPmUnitTemperatureScale.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitTemperatureScale.setStatus("mandatory")


class _AirIRmPmUnitWinterMode_Type(Integer32):
    """Custom type airIRmPmUnitWinterMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("summer", 1),
          ("winter", 2))
    )


_AirIRmPmUnitWinterMode_Type.__name__ = "Integer32"
_AirIRmPmUnitWinterMode_Object = MibScalar
airIRmPmUnitWinterMode = _AirIRmPmUnitWinterMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 24),
    _AirIRmPmUnitWinterMode_Type()
)
airIRmPmUnitWinterMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitWinterMode.setStatus("mandatory")


class _AirIRmPmDayNightMode_Type(Integer32):
    """Custom type airIRmPmDayNightMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("day", 1),
          ("night", 2))
    )


_AirIRmPmDayNightMode_Type.__name__ = "Integer32"
_AirIRmPmDayNightMode_Object = MibScalar
airIRmPmDayNightMode = _AirIRmPmDayNightMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 3, 25),
    _AirIRmPmDayNightMode_Type()
)
airIRmPmDayNightMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDayNightMode.setStatus("mandatory")
_AirIRmPmCommon3_ObjectIdentity = ObjectIdentity
airIRmPmCommon3 = _AirIRmPmCommon3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4)
)
_AirIRmPmLastMaintenanceYear_Type = Integer32
_AirIRmPmLastMaintenanceYear_Object = MibScalar
airIRmPmLastMaintenanceYear = _AirIRmPmLastMaintenanceYear_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 1),
    _AirIRmPmLastMaintenanceYear_Type()
)
airIRmPmLastMaintenanceYear.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLastMaintenanceYear.setStatus("mandatory")


class _AirIRmPmLastMaintenanceMonth_Type(Integer32):
    """Custom type airIRmPmLastMaintenanceMonth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 12),
    )


_AirIRmPmLastMaintenanceMonth_Type.__name__ = "Integer32"
_AirIRmPmLastMaintenanceMonth_Object = MibScalar
airIRmPmLastMaintenanceMonth = _AirIRmPmLastMaintenanceMonth_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 2),
    _AirIRmPmLastMaintenanceMonth_Type()
)
airIRmPmLastMaintenanceMonth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLastMaintenanceMonth.setStatus("mandatory")


class _AirIRmPmLastMaintenanceDay_Type(Integer32):
    """Custom type airIRmPmLastMaintenanceDay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_AirIRmPmLastMaintenanceDay_Type.__name__ = "Integer32"
_AirIRmPmLastMaintenanceDay_Object = MibScalar
airIRmPmLastMaintenanceDay = _AirIRmPmLastMaintenanceDay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 3),
    _AirIRmPmLastMaintenanceDay_Type()
)
airIRmPmLastMaintenanceDay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLastMaintenanceDay.setStatus("mandatory")


class _AirIRmPmUnitMaintenanceInterval_Type(Integer32):
    """Custom type airIRmPmUnitMaintenanceInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AirIRmPmUnitMaintenanceInterval_Type.__name__ = "Integer32"
_AirIRmPmUnitMaintenanceInterval_Object = MibScalar
airIRmPmUnitMaintenanceInterval = _AirIRmPmUnitMaintenanceInterval_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 4),
    _AirIRmPmUnitMaintenanceInterval_Type()
)
airIRmPmUnitMaintenanceInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitMaintenanceInterval.setStatus("mandatory")
_AirIRmPmRuntimeUnit_Type = Integer32
_AirIRmPmRuntimeUnit_Object = MibScalar
airIRmPmRuntimeUnit = _AirIRmPmRuntimeUnit_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 5),
    _AirIRmPmRuntimeUnit_Type()
)
airIRmPmRuntimeUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmRuntimeUnit.setStatus("mandatory")
_AirIRmPmStoptimeUnit_Type = Integer32
_AirIRmPmStoptimeUnit_Object = MibScalar
airIRmPmStoptimeUnit = _AirIRmPmStoptimeUnit_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 6),
    _AirIRmPmStoptimeUnit_Type()
)
airIRmPmStoptimeUnit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmStoptimeUnit.setStatus("mandatory")
_AirIRmPmRuntimeCooling_Type = Integer32
_AirIRmPmRuntimeCooling_Object = MibScalar
airIRmPmRuntimeCooling = _AirIRmPmRuntimeCooling_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 7),
    _AirIRmPmRuntimeCooling_Type()
)
airIRmPmRuntimeCooling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmRuntimeCooling.setStatus("mandatory")
_AirIRmPmRuntimeHeating_Type = Integer32
_AirIRmPmRuntimeHeating_Object = MibScalar
airIRmPmRuntimeHeating = _AirIRmPmRuntimeHeating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 8),
    _AirIRmPmRuntimeHeating_Type()
)
airIRmPmRuntimeHeating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmRuntimeHeating.setStatus("mandatory")
_AirIRmPmRuntimeHumidification_Type = Integer32
_AirIRmPmRuntimeHumidification_Object = MibScalar
airIRmPmRuntimeHumidification = _AirIRmPmRuntimeHumidification_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 9),
    _AirIRmPmRuntimeHumidification_Type()
)
airIRmPmRuntimeHumidification.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmRuntimeHumidification.setStatus("mandatory")
_AirIRmPmRuntimeDehumidification_Type = Integer32
_AirIRmPmRuntimeDehumidification_Object = MibScalar
airIRmPmRuntimeDehumidification = _AirIRmPmRuntimeDehumidification_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 10),
    _AirIRmPmRuntimeDehumidification_Type()
)
airIRmPmRuntimeDehumidification.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmRuntimeDehumidification.setStatus("mandatory")
_AirIRmPmUnitTemperature_ObjectIdentity = ObjectIdentity
airIRmPmUnitTemperature = _AirIRmPmUnitTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 11)
)
_AirIRmPmUnitTemperatureC_Type = Integer32
_AirIRmPmUnitTemperatureC_Object = MibScalar
airIRmPmUnitTemperatureC = _AirIRmPmUnitTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 11, 1),
    _AirIRmPmUnitTemperatureC_Type()
)
airIRmPmUnitTemperatureC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitTemperatureC.setStatus("mandatory")
_AirIRmPmUnitTemperatureF_Type = Integer32
_AirIRmPmUnitTemperatureF_Object = MibScalar
airIRmPmUnitTemperatureF = _AirIRmPmUnitTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 11, 2),
    _AirIRmPmUnitTemperatureF_Type()
)
airIRmPmUnitTemperatureF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitTemperatureF.setStatus("mandatory")
_AirIRmPmUnitHumidity_Type = Integer32
_AirIRmPmUnitHumidity_Object = MibScalar
airIRmPmUnitHumidity = _AirIRmPmUnitHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 12),
    _AirIRmPmUnitHumidity_Type()
)
airIRmPmUnitHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitHumidity.setStatus("mandatory")
_AirIRmPmSetpointTemperatureDay_ObjectIdentity = ObjectIdentity
airIRmPmSetpointTemperatureDay = _AirIRmPmSetpointTemperatureDay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 14)
)
_AirIRmPmSetpointTemperatureDayC_Type = Integer32
_AirIRmPmSetpointTemperatureDayC_Object = MibScalar
airIRmPmSetpointTemperatureDayC = _AirIRmPmSetpointTemperatureDayC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 14, 1),
    _AirIRmPmSetpointTemperatureDayC_Type()
)
airIRmPmSetpointTemperatureDayC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmSetpointTemperatureDayC.setStatus("mandatory")
_AirIRmPmSetpointTemperatureDayF_Type = Integer32
_AirIRmPmSetpointTemperatureDayF_Object = MibScalar
airIRmPmSetpointTemperatureDayF = _AirIRmPmSetpointTemperatureDayF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 14, 2),
    _AirIRmPmSetpointTemperatureDayF_Type()
)
airIRmPmSetpointTemperatureDayF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmSetpointTemperatureDayF.setStatus("mandatory")
_AirIRmPmSetpointTemperatureNight_ObjectIdentity = ObjectIdentity
airIRmPmSetpointTemperatureNight = _AirIRmPmSetpointTemperatureNight_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 15)
)
_AirIRmPmSetpointTemperatureNightC_Type = Integer32
_AirIRmPmSetpointTemperatureNightC_Object = MibScalar
airIRmPmSetpointTemperatureNightC = _AirIRmPmSetpointTemperatureNightC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 15, 1),
    _AirIRmPmSetpointTemperatureNightC_Type()
)
airIRmPmSetpointTemperatureNightC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmSetpointTemperatureNightC.setStatus("mandatory")
_AirIRmPmSetpointTemperatureNightF_Type = Integer32
_AirIRmPmSetpointTemperatureNightF_Object = MibScalar
airIRmPmSetpointTemperatureNightF = _AirIRmPmSetpointTemperatureNightF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 15, 2),
    _AirIRmPmSetpointTemperatureNightF_Type()
)
airIRmPmSetpointTemperatureNightF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmSetpointTemperatureNightF.setStatus("mandatory")
_AirIRmPmSetpointHumidity_Type = Integer32
_AirIRmPmSetpointHumidity_Object = MibScalar
airIRmPmSetpointHumidity = _AirIRmPmSetpointHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 17),
    _AirIRmPmSetpointHumidity_Type()
)
airIRmPmSetpointHumidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmSetpointHumidity.setStatus("mandatory")


class _AirIRmPmUnitControlType_Type(Integer32):
    """Custom type airIRmPmUnitControlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("room", 1),
          ("room-SupplyLimit", 3),
          ("supply", 2),
          ("supply-RoomLimit", 4))
    )


_AirIRmPmUnitControlType_Type.__name__ = "Integer32"
_AirIRmPmUnitControlType_Object = MibScalar
airIRmPmUnitControlType = _AirIRmPmUnitControlType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 24),
    _AirIRmPmUnitControlType_Type()
)
airIRmPmUnitControlType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitControlType.setStatus("mandatory")
_AirIRmPmWinterModeStartTemp_ObjectIdentity = ObjectIdentity
airIRmPmWinterModeStartTemp = _AirIRmPmWinterModeStartTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 29)
)
_AirIRmPmWinterModeStartTempC_Type = Integer32
_AirIRmPmWinterModeStartTempC_Object = MibScalar
airIRmPmWinterModeStartTempC = _AirIRmPmWinterModeStartTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 29, 1),
    _AirIRmPmWinterModeStartTempC_Type()
)
airIRmPmWinterModeStartTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmWinterModeStartTempC.setStatus("mandatory")
_AirIRmPmWinterModeStartTempF_Type = Integer32
_AirIRmPmWinterModeStartTempF_Object = MibScalar
airIRmPmWinterModeStartTempF = _AirIRmPmWinterModeStartTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 29, 2),
    _AirIRmPmWinterModeStartTempF_Type()
)
airIRmPmWinterModeStartTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmWinterModeStartTempF.setStatus("mandatory")
_AirIRmPmWinterModeHysteresis_ObjectIdentity = ObjectIdentity
airIRmPmWinterModeHysteresis = _AirIRmPmWinterModeHysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 30)
)
_AirIRmPmWinterModeHysteresisK_Type = Integer32
_AirIRmPmWinterModeHysteresisK_Object = MibScalar
airIRmPmWinterModeHysteresisK = _AirIRmPmWinterModeHysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 30, 1),
    _AirIRmPmWinterModeHysteresisK_Type()
)
airIRmPmWinterModeHysteresisK.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmWinterModeHysteresisK.setStatus("mandatory")
_AirIRmPmWinterModeHysteresisF_Type = Integer32
_AirIRmPmWinterModeHysteresisF_Object = MibScalar
airIRmPmWinterModeHysteresisF = _AirIRmPmWinterModeHysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 30, 2),
    _AirIRmPmWinterModeHysteresisF_Type()
)
airIRmPmWinterModeHysteresisF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmWinterModeHysteresisF.setStatus("mandatory")
_AirIRmPmWaterTemperature_ObjectIdentity = ObjectIdentity
airIRmPmWaterTemperature = _AirIRmPmWaterTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 32)
)
_AirIRmPmWaterTemperatureC_Type = Integer32
_AirIRmPmWaterTemperatureC_Object = MibScalar
airIRmPmWaterTemperatureC = _AirIRmPmWaterTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 32, 1),
    _AirIRmPmWaterTemperatureC_Type()
)
airIRmPmWaterTemperatureC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmWaterTemperatureC.setStatus("mandatory")
_AirIRmPmWaterTemperatureF_Type = Integer32
_AirIRmPmWaterTemperatureF_Object = MibScalar
airIRmPmWaterTemperatureF = _AirIRmPmWaterTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 32, 2),
    _AirIRmPmWaterTemperatureF_Type()
)
airIRmPmWaterTemperatureF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmWaterTemperatureF.setStatus("mandatory")
_AirIRmPmReturnAirTemperature_ObjectIdentity = ObjectIdentity
airIRmPmReturnAirTemperature = _AirIRmPmReturnAirTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 33)
)
_AirIRmPmReturnAirTemperatureC_Type = Integer32
_AirIRmPmReturnAirTemperatureC_Object = MibScalar
airIRmPmReturnAirTemperatureC = _AirIRmPmReturnAirTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 33, 1),
    _AirIRmPmReturnAirTemperatureC_Type()
)
airIRmPmReturnAirTemperatureC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmReturnAirTemperatureC.setStatus("mandatory")
_AirIRmPmReturnAirTemperatureF_Type = Integer32
_AirIRmPmReturnAirTemperatureF_Object = MibScalar
airIRmPmReturnAirTemperatureF = _AirIRmPmReturnAirTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 33, 2),
    _AirIRmPmReturnAirTemperatureF_Type()
)
airIRmPmReturnAirTemperatureF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmReturnAirTemperatureF.setStatus("mandatory")
_AirIRmPmSupplyAirTemperature_ObjectIdentity = ObjectIdentity
airIRmPmSupplyAirTemperature = _AirIRmPmSupplyAirTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 34)
)
_AirIRmPmSupplyAirTemperatureC_Type = Integer32
_AirIRmPmSupplyAirTemperatureC_Object = MibScalar
airIRmPmSupplyAirTemperatureC = _AirIRmPmSupplyAirTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 34, 1),
    _AirIRmPmSupplyAirTemperatureC_Type()
)
airIRmPmSupplyAirTemperatureC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSupplyAirTemperatureC.setStatus("mandatory")
_AirIRmPmSupplyAirTemperatureF_Type = Integer32
_AirIRmPmSupplyAirTemperatureF_Object = MibScalar
airIRmPmSupplyAirTemperatureF = _AirIRmPmSupplyAirTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 34, 2),
    _AirIRmPmSupplyAirTemperatureF_Type()
)
airIRmPmSupplyAirTemperatureF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSupplyAirTemperatureF.setStatus("mandatory")
_AirIRmPmReturnAirHumidity_Type = Integer32
_AirIRmPmReturnAirHumidity_Object = MibScalar
airIRmPmReturnAirHumidity = _AirIRmPmReturnAirHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 35),
    _AirIRmPmReturnAirHumidity_Type()
)
airIRmPmReturnAirHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmReturnAirHumidity.setStatus("mandatory")
_AirIRmPmSupplyAirHumidity_Type = Integer32
_AirIRmPmSupplyAirHumidity_Object = MibScalar
airIRmPmSupplyAirHumidity = _AirIRmPmSupplyAirHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 36),
    _AirIRmPmSupplyAirHumidity_Type()
)
airIRmPmSupplyAirHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSupplyAirHumidity.setStatus("mandatory")
_AirIRmPmOutsideAirTemperature_ObjectIdentity = ObjectIdentity
airIRmPmOutsideAirTemperature = _AirIRmPmOutsideAirTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 37)
)
_AirIRmPmOutsideAirTemperatureC_Type = Integer32
_AirIRmPmOutsideAirTemperatureC_Object = MibScalar
airIRmPmOutsideAirTemperatureC = _AirIRmPmOutsideAirTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 37, 1),
    _AirIRmPmOutsideAirTemperatureC_Type()
)
airIRmPmOutsideAirTemperatureC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmOutsideAirTemperatureC.setStatus("mandatory")
_AirIRmPmOutsideAirTemperatureF_Type = Integer32
_AirIRmPmOutsideAirTemperatureF_Object = MibScalar
airIRmPmOutsideAirTemperatureF = _AirIRmPmOutsideAirTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 37, 2),
    _AirIRmPmOutsideAirTemperatureF_Type()
)
airIRmPmOutsideAirTemperatureF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmOutsideAirTemperatureF.setStatus("mandatory")
_AirIRmPmOutsideAirHumidity_Type = Integer32
_AirIRmPmOutsideAirHumidity_Object = MibScalar
airIRmPmOutsideAirHumidity = _AirIRmPmOutsideAirHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 38),
    _AirIRmPmOutsideAirHumidity_Type()
)
airIRmPmOutsideAirHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmOutsideAirHumidity.setStatus("mandatory")


class _AirIRmPmCoolingPriority_Type(Integer32):
    """Custom type airIRmPmCoolingPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("cw", 2),
          ("dx", 3),
          ("ge", 1))
    )


_AirIRmPmCoolingPriority_Type.__name__ = "Integer32"
_AirIRmPmCoolingPriority_Object = MibScalar
airIRmPmCoolingPriority = _AirIRmPmCoolingPriority_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 39),
    _AirIRmPmCoolingPriority_Type()
)
airIRmPmCoolingPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCoolingPriority.setStatus("mandatory")
_AirIRmPmWaterTemperature2_ObjectIdentity = ObjectIdentity
airIRmPmWaterTemperature2 = _AirIRmPmWaterTemperature2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 43)
)
_AirIRmPmWaterTemperature2C_Type = Integer32
_AirIRmPmWaterTemperature2C_Object = MibScalar
airIRmPmWaterTemperature2C = _AirIRmPmWaterTemperature2C_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 43, 1),
    _AirIRmPmWaterTemperature2C_Type()
)
airIRmPmWaterTemperature2C.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmWaterTemperature2C.setStatus("mandatory")
_AirIRmPmWaterTemperature2F_Type = Integer32
_AirIRmPmWaterTemperature2F_Object = MibScalar
airIRmPmWaterTemperature2F = _AirIRmPmWaterTemperature2F_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 43, 2),
    _AirIRmPmWaterTemperature2F_Type()
)
airIRmPmWaterTemperature2F.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmWaterTemperature2F.setStatus("mandatory")
_AirIRmPmRuntimeFreeCooling_Type = Integer32
_AirIRmPmRuntimeFreeCooling_Object = MibScalar
airIRmPmRuntimeFreeCooling = _AirIRmPmRuntimeFreeCooling_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 44),
    _AirIRmPmRuntimeFreeCooling_Type()
)
airIRmPmRuntimeFreeCooling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmRuntimeFreeCooling.setStatus("mandatory")
_AirIRmPmRuntimeMixedModeFreeCooling_Type = Integer32
_AirIRmPmRuntimeMixedModeFreeCooling_Object = MibScalar
airIRmPmRuntimeMixedModeFreeCooling = _AirIRmPmRuntimeMixedModeFreeCooling_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 4, 45),
    _AirIRmPmRuntimeMixedModeFreeCooling_Type()
)
airIRmPmRuntimeMixedModeFreeCooling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmRuntimeMixedModeFreeCooling.setStatus("mandatory")
_AirIRmPmCommon4_ObjectIdentity = ObjectIdentity
airIRmPmCommon4 = _AirIRmPmCommon4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5)
)
_AirIRmPmNumberOfCompressors_Type = Integer32
_AirIRmPmNumberOfCompressors_Object = MibScalar
airIRmPmNumberOfCompressors = _AirIRmPmNumberOfCompressors_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 4),
    _AirIRmPmNumberOfCompressors_Type()
)
airIRmPmNumberOfCompressors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfCompressors.setStatus("mandatory")
_AirIRmPmNumberOfSuctionValves_Type = Integer32
_AirIRmPmNumberOfSuctionValves_Object = MibScalar
airIRmPmNumberOfSuctionValves = _AirIRmPmNumberOfSuctionValves_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 5),
    _AirIRmPmNumberOfSuctionValves_Type()
)
airIRmPmNumberOfSuctionValves.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfSuctionValves.setStatus("mandatory")
_AirIRmPmNumberOfDryCoolers_Type = Integer32
_AirIRmPmNumberOfDryCoolers_Object = MibScalar
airIRmPmNumberOfDryCoolers = _AirIRmPmNumberOfDryCoolers_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 6),
    _AirIRmPmNumberOfDryCoolers_Type()
)
airIRmPmNumberOfDryCoolers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfDryCoolers.setStatus("mandatory")
_AirIRmPmNumberOfPumps_Type = Integer32
_AirIRmPmNumberOfPumps_Object = MibScalar
airIRmPmNumberOfPumps = _AirIRmPmNumberOfPumps_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 7),
    _AirIRmPmNumberOfPumps_Type()
)
airIRmPmNumberOfPumps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfPumps.setStatus("mandatory")
_AirIRmPmNumberOfElectricHeaters_Type = Integer32
_AirIRmPmNumberOfElectricHeaters_Object = MibScalar
airIRmPmNumberOfElectricHeaters = _AirIRmPmNumberOfElectricHeaters_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 8),
    _AirIRmPmNumberOfElectricHeaters_Type()
)
airIRmPmNumberOfElectricHeaters.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfElectricHeaters.setStatus("mandatory")
_AirIRmPmNumberOfHumidifiers_Type = Integer32
_AirIRmPmNumberOfHumidifiers_Object = MibScalar
airIRmPmNumberOfHumidifiers = _AirIRmPmNumberOfHumidifiers_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 9),
    _AirIRmPmNumberOfHumidifiers_Type()
)
airIRmPmNumberOfHumidifiers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfHumidifiers.setStatus("mandatory")
_AirIRmPmNumberOfFans_Type = Integer32
_AirIRmPmNumberOfFans_Object = MibScalar
airIRmPmNumberOfFans = _AirIRmPmNumberOfFans_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 10),
    _AirIRmPmNumberOfFans_Type()
)
airIRmPmNumberOfFans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfFans.setStatus("mandatory")
_AirIRmPmNumberOfLouvers_Type = Integer32
_AirIRmPmNumberOfLouvers_Object = MibScalar
airIRmPmNumberOfLouvers = _AirIRmPmNumberOfLouvers_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 11),
    _AirIRmPmNumberOfLouvers_Type()
)
airIRmPmNumberOfLouvers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfLouvers.setStatus("mandatory")
_AirIRmPmNumberOfSensors_Type = Integer32
_AirIRmPmNumberOfSensors_Object = MibScalar
airIRmPmNumberOfSensors = _AirIRmPmNumberOfSensors_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 12),
    _AirIRmPmNumberOfSensors_Type()
)
airIRmPmNumberOfSensors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfSensors.setStatus("mandatory")
_AirIRmPmNumberOfExternalAlarmInputs_Type = Integer32
_AirIRmPmNumberOfExternalAlarmInputs_Object = MibScalar
airIRmPmNumberOfExternalAlarmInputs = _AirIRmPmNumberOfExternalAlarmInputs_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 13),
    _AirIRmPmNumberOfExternalAlarmInputs_Type()
)
airIRmPmNumberOfExternalAlarmInputs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfExternalAlarmInputs.setStatus("mandatory")
_AirIRmPmNumberOfGECWValves_Type = Integer32
_AirIRmPmNumberOfGECWValves_Object = MibScalar
airIRmPmNumberOfGECWValves = _AirIRmPmNumberOfGECWValves_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 14),
    _AirIRmPmNumberOfGECWValves_Type()
)
airIRmPmNumberOfGECWValves.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfGECWValves.setStatus("mandatory")
_AirIRmPmNumberOfHotGasReheat_Type = Integer32
_AirIRmPmNumberOfHotGasReheat_Object = MibScalar
airIRmPmNumberOfHotGasReheat = _AirIRmPmNumberOfHotGasReheat_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 15),
    _AirIRmPmNumberOfHotGasReheat_Type()
)
airIRmPmNumberOfHotGasReheat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfHotGasReheat.setStatus("mandatory")
_AirIRmPmNumberOfPWWReheat_Type = Integer32
_AirIRmPmNumberOfPWWReheat_Object = MibScalar
airIRmPmNumberOfPWWReheat = _AirIRmPmNumberOfPWWReheat_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 16),
    _AirIRmPmNumberOfPWWReheat_Type()
)
airIRmPmNumberOfPWWReheat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfPWWReheat.setStatus("mandatory")
_AirIRmPmNumberOfDehumidifiers_Type = Integer32
_AirIRmPmNumberOfDehumidifiers_Object = MibScalar
airIRmPmNumberOfDehumidifiers = _AirIRmPmNumberOfDehumidifiers_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 5, 17),
    _AirIRmPmNumberOfDehumidifiers_Type()
)
airIRmPmNumberOfDehumidifiers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmNumberOfDehumidifiers.setStatus("mandatory")
_AirIRmPmCommon5_ObjectIdentity = ObjectIdentity
airIRmPmCommon5 = _AirIRmPmCommon5_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6)
)
_AirIRmPmUnitEvaporationTemperature1_ObjectIdentity = ObjectIdentity
airIRmPmUnitEvaporationTemperature1 = _AirIRmPmUnitEvaporationTemperature1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 1)
)
_AirIRmPmUnitEvaporationTemperature1C_Type = Integer32
_AirIRmPmUnitEvaporationTemperature1C_Object = MibScalar
airIRmPmUnitEvaporationTemperature1C = _AirIRmPmUnitEvaporationTemperature1C_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 1, 1),
    _AirIRmPmUnitEvaporationTemperature1C_Type()
)
airIRmPmUnitEvaporationTemperature1C.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitEvaporationTemperature1C.setStatus("mandatory")
_AirIRmPmUnitEvaporationTemperature1F_Type = Integer32
_AirIRmPmUnitEvaporationTemperature1F_Object = MibScalar
airIRmPmUnitEvaporationTemperature1F = _AirIRmPmUnitEvaporationTemperature1F_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 1, 2),
    _AirIRmPmUnitEvaporationTemperature1F_Type()
)
airIRmPmUnitEvaporationTemperature1F.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitEvaporationTemperature1F.setStatus("mandatory")
_AirIRmPmUnitEvaporationPressure1_Type = Integer32
_AirIRmPmUnitEvaporationPressure1_Object = MibScalar
airIRmPmUnitEvaporationPressure1 = _AirIRmPmUnitEvaporationPressure1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 2),
    _AirIRmPmUnitEvaporationPressure1_Type()
)
airIRmPmUnitEvaporationPressure1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitEvaporationPressure1.setStatus("mandatory")
_AirIRmPmUnitCondensationTemperature1_ObjectIdentity = ObjectIdentity
airIRmPmUnitCondensationTemperature1 = _AirIRmPmUnitCondensationTemperature1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 3)
)
_AirIRmPmUnitCondensationTemperature1C_Type = Integer32
_AirIRmPmUnitCondensationTemperature1C_Object = MibScalar
airIRmPmUnitCondensationTemperature1C = _AirIRmPmUnitCondensationTemperature1C_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 3, 1),
    _AirIRmPmUnitCondensationTemperature1C_Type()
)
airIRmPmUnitCondensationTemperature1C.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitCondensationTemperature1C.setStatus("mandatory")
_AirIRmPmUnitCondensationTemperature1F_Type = Integer32
_AirIRmPmUnitCondensationTemperature1F_Object = MibScalar
airIRmPmUnitCondensationTemperature1F = _AirIRmPmUnitCondensationTemperature1F_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 3, 2),
    _AirIRmPmUnitCondensationTemperature1F_Type()
)
airIRmPmUnitCondensationTemperature1F.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitCondensationTemperature1F.setStatus("mandatory")
_AirIRmPmUnitCondensationPressure1_Type = Integer32
_AirIRmPmUnitCondensationPressure1_Object = MibScalar
airIRmPmUnitCondensationPressure1 = _AirIRmPmUnitCondensationPressure1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 4),
    _AirIRmPmUnitCondensationPressure1_Type()
)
airIRmPmUnitCondensationPressure1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitCondensationPressure1.setStatus("mandatory")
_AirIRmPmMaxLimitReturnAirTemperature_ObjectIdentity = ObjectIdentity
airIRmPmMaxLimitReturnAirTemperature = _AirIRmPmMaxLimitReturnAirTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 8)
)
_AirIRmPmMaxLimitReturnAirTemperatureC_Type = Integer32
_AirIRmPmMaxLimitReturnAirTemperatureC_Object = MibScalar
airIRmPmMaxLimitReturnAirTemperatureC = _AirIRmPmMaxLimitReturnAirTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 8, 1),
    _AirIRmPmMaxLimitReturnAirTemperatureC_Type()
)
airIRmPmMaxLimitReturnAirTemperatureC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMaxLimitReturnAirTemperatureC.setStatus("mandatory")
_AirIRmPmMaxLimitReturnAirTemperatureF_Type = Integer32
_AirIRmPmMaxLimitReturnAirTemperatureF_Object = MibScalar
airIRmPmMaxLimitReturnAirTemperatureF = _AirIRmPmMaxLimitReturnAirTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 8, 2),
    _AirIRmPmMaxLimitReturnAirTemperatureF_Type()
)
airIRmPmMaxLimitReturnAirTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMaxLimitReturnAirTemperatureF.setStatus("mandatory")
_AirIRmPmMinLimitReturnAirTemperature_ObjectIdentity = ObjectIdentity
airIRmPmMinLimitReturnAirTemperature = _AirIRmPmMinLimitReturnAirTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 9)
)
_AirIRmPmMinLimitReturnAirTemperatureC_Type = Integer32
_AirIRmPmMinLimitReturnAirTemperatureC_Object = MibScalar
airIRmPmMinLimitReturnAirTemperatureC = _AirIRmPmMinLimitReturnAirTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 9, 1),
    _AirIRmPmMinLimitReturnAirTemperatureC_Type()
)
airIRmPmMinLimitReturnAirTemperatureC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMinLimitReturnAirTemperatureC.setStatus("mandatory")
_AirIRmPmMinLimitReturnAirTemperatureF_Type = Integer32
_AirIRmPmMinLimitReturnAirTemperatureF_Object = MibScalar
airIRmPmMinLimitReturnAirTemperatureF = _AirIRmPmMinLimitReturnAirTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 9, 2),
    _AirIRmPmMinLimitReturnAirTemperatureF_Type()
)
airIRmPmMinLimitReturnAirTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMinLimitReturnAirTemperatureF.setStatus("mandatory")
_AirIRmPmMaxLimitSupplyAirTemperature_ObjectIdentity = ObjectIdentity
airIRmPmMaxLimitSupplyAirTemperature = _AirIRmPmMaxLimitSupplyAirTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 10)
)
_AirIRmPmMaxLimitSupplyAirTemperatureC_Type = Integer32
_AirIRmPmMaxLimitSupplyAirTemperatureC_Object = MibScalar
airIRmPmMaxLimitSupplyAirTemperatureC = _AirIRmPmMaxLimitSupplyAirTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 10, 1),
    _AirIRmPmMaxLimitSupplyAirTemperatureC_Type()
)
airIRmPmMaxLimitSupplyAirTemperatureC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMaxLimitSupplyAirTemperatureC.setStatus("mandatory")
_AirIRmPmMaxLimitSupplyAirTemperatureF_Type = Integer32
_AirIRmPmMaxLimitSupplyAirTemperatureF_Object = MibScalar
airIRmPmMaxLimitSupplyAirTemperatureF = _AirIRmPmMaxLimitSupplyAirTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 10, 2),
    _AirIRmPmMaxLimitSupplyAirTemperatureF_Type()
)
airIRmPmMaxLimitSupplyAirTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMaxLimitSupplyAirTemperatureF.setStatus("mandatory")
_AirIRmPmMinLimitSupplyAirTemperature_ObjectIdentity = ObjectIdentity
airIRmPmMinLimitSupplyAirTemperature = _AirIRmPmMinLimitSupplyAirTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 11)
)
_AirIRmPmMinLimitSupplyAirTemperatureC_Type = Integer32
_AirIRmPmMinLimitSupplyAirTemperatureC_Object = MibScalar
airIRmPmMinLimitSupplyAirTemperatureC = _AirIRmPmMinLimitSupplyAirTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 11, 1),
    _AirIRmPmMinLimitSupplyAirTemperatureC_Type()
)
airIRmPmMinLimitSupplyAirTemperatureC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMinLimitSupplyAirTemperatureC.setStatus("mandatory")
_AirIRmPmMinLimitSupplyAirTemperatureF_Type = Integer32
_AirIRmPmMinLimitSupplyAirTemperatureF_Object = MibScalar
airIRmPmMinLimitSupplyAirTemperatureF = _AirIRmPmMinLimitSupplyAirTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 11, 2),
    _AirIRmPmMinLimitSupplyAirTemperatureF_Type()
)
airIRmPmMinLimitSupplyAirTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMinLimitSupplyAirTemperatureF.setStatus("mandatory")
_AirIRmPmMaxLimitWaterTemperature_ObjectIdentity = ObjectIdentity
airIRmPmMaxLimitWaterTemperature = _AirIRmPmMaxLimitWaterTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 12)
)
_AirIRmPmMaxLimitWaterTemperatureC_Type = Integer32
_AirIRmPmMaxLimitWaterTemperatureC_Object = MibScalar
airIRmPmMaxLimitWaterTemperatureC = _AirIRmPmMaxLimitWaterTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 12, 1),
    _AirIRmPmMaxLimitWaterTemperatureC_Type()
)
airIRmPmMaxLimitWaterTemperatureC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMaxLimitWaterTemperatureC.setStatus("mandatory")
_AirIRmPmMaxLimitWaterTemperatureF_Type = Integer32
_AirIRmPmMaxLimitWaterTemperatureF_Object = MibScalar
airIRmPmMaxLimitWaterTemperatureF = _AirIRmPmMaxLimitWaterTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 12, 2),
    _AirIRmPmMaxLimitWaterTemperatureF_Type()
)
airIRmPmMaxLimitWaterTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMaxLimitWaterTemperatureF.setStatus("mandatory")
_AirIRmPmMinLimitWaterTemperature_ObjectIdentity = ObjectIdentity
airIRmPmMinLimitWaterTemperature = _AirIRmPmMinLimitWaterTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 13)
)
_AirIRmPmMinLimitWaterTemperatureC_Type = Integer32
_AirIRmPmMinLimitWaterTemperatureC_Object = MibScalar
airIRmPmMinLimitWaterTemperatureC = _AirIRmPmMinLimitWaterTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 13, 1),
    _AirIRmPmMinLimitWaterTemperatureC_Type()
)
airIRmPmMinLimitWaterTemperatureC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMinLimitWaterTemperatureC.setStatus("mandatory")
_AirIRmPmMinLimitWaterTemperatureF_Type = Integer32
_AirIRmPmMinLimitWaterTemperatureF_Object = MibScalar
airIRmPmMinLimitWaterTemperatureF = _AirIRmPmMinLimitWaterTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 13, 2),
    _AirIRmPmMinLimitWaterTemperatureF_Type()
)
airIRmPmMinLimitWaterTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMinLimitWaterTemperatureF.setStatus("mandatory")
_AirIRmPmMaxLimitReturnAirHumidity_Type = Integer32
_AirIRmPmMaxLimitReturnAirHumidity_Object = MibScalar
airIRmPmMaxLimitReturnAirHumidity = _AirIRmPmMaxLimitReturnAirHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 14),
    _AirIRmPmMaxLimitReturnAirHumidity_Type()
)
airIRmPmMaxLimitReturnAirHumidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMaxLimitReturnAirHumidity.setStatus("mandatory")
_AirIRmPmMinLimitReturnAirHumidity_Type = Integer32
_AirIRmPmMinLimitReturnAirHumidity_Object = MibScalar
airIRmPmMinLimitReturnAirHumidity = _AirIRmPmMinLimitReturnAirHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 15),
    _AirIRmPmMinLimitReturnAirHumidity_Type()
)
airIRmPmMinLimitReturnAirHumidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMinLimitReturnAirHumidity.setStatus("mandatory")
_AirIRmPmMaxLimitSupplyAirHumidity_Type = Integer32
_AirIRmPmMaxLimitSupplyAirHumidity_Object = MibScalar
airIRmPmMaxLimitSupplyAirHumidity = _AirIRmPmMaxLimitSupplyAirHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 16),
    _AirIRmPmMaxLimitSupplyAirHumidity_Type()
)
airIRmPmMaxLimitSupplyAirHumidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMaxLimitSupplyAirHumidity.setStatus("mandatory")
_AirIRmPmMinLimitSupplyAirHumidity_Type = Integer32
_AirIRmPmMinLimitSupplyAirHumidity_Object = MibScalar
airIRmPmMinLimitSupplyAirHumidity = _AirIRmPmMinLimitSupplyAirHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 17),
    _AirIRmPmMinLimitSupplyAirHumidity_Type()
)
airIRmPmMinLimitSupplyAirHumidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmMinLimitSupplyAirHumidity.setStatus("mandatory")
_AirIRmPmLowPressureWinterDelay_Type = Integer32
_AirIRmPmLowPressureWinterDelay_Object = MibScalar
airIRmPmLowPressureWinterDelay = _AirIRmPmLowPressureWinterDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 18),
    _AirIRmPmLowPressureWinterDelay_Type()
)
airIRmPmLowPressureWinterDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLowPressureWinterDelay.setStatus("mandatory")
_AirIRmPmUnitCondensationPressure2_Type = Integer32
_AirIRmPmUnitCondensationPressure2_Object = MibScalar
airIRmPmUnitCondensationPressure2 = _AirIRmPmUnitCondensationPressure2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 19),
    _AirIRmPmUnitCondensationPressure2_Type()
)
airIRmPmUnitCondensationPressure2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitCondensationPressure2.setStatus("mandatory")
_AirIRmPmUnitOverloadSwitch_Type = Integer32
_AirIRmPmUnitOverloadSwitch_Object = MibScalar
airIRmPmUnitOverloadSwitch = _AirIRmPmUnitOverloadSwitch_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 20),
    _AirIRmPmUnitOverloadSwitch_Type()
)
airIRmPmUnitOverloadSwitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitOverloadSwitch.setStatus("mandatory")
_AirIRmPmUnitCondensationTemperature2_ObjectIdentity = ObjectIdentity
airIRmPmUnitCondensationTemperature2 = _AirIRmPmUnitCondensationTemperature2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 41)
)
_AirIRmPmUnitCondensationTemperature2C_Type = Integer32
_AirIRmPmUnitCondensationTemperature2C_Object = MibScalar
airIRmPmUnitCondensationTemperature2C = _AirIRmPmUnitCondensationTemperature2C_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 41, 1),
    _AirIRmPmUnitCondensationTemperature2C_Type()
)
airIRmPmUnitCondensationTemperature2C.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitCondensationTemperature2C.setStatus("mandatory")
_AirIRmPmUnitCondensationTemperature2F_Type = Integer32
_AirIRmPmUnitCondensationTemperature2F_Object = MibScalar
airIRmPmUnitCondensationTemperature2F = _AirIRmPmUnitCondensationTemperature2F_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 41, 2),
    _AirIRmPmUnitCondensationTemperature2F_Type()
)
airIRmPmUnitCondensationTemperature2F.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitCondensationTemperature2F.setStatus("mandatory")
_AirIRmPmUnitEvaporationPressure2_Type = Integer32
_AirIRmPmUnitEvaporationPressure2_Object = MibScalar
airIRmPmUnitEvaporationPressure2 = _AirIRmPmUnitEvaporationPressure2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 42),
    _AirIRmPmUnitEvaporationPressure2_Type()
)
airIRmPmUnitEvaporationPressure2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitEvaporationPressure2.setStatus("mandatory")
_AirIRmPmUnitEvaporationTemperature2_ObjectIdentity = ObjectIdentity
airIRmPmUnitEvaporationTemperature2 = _AirIRmPmUnitEvaporationTemperature2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 43)
)
_AirIRmPmUnitEvaporationTemperature2C_Type = Integer32
_AirIRmPmUnitEvaporationTemperature2C_Object = MibScalar
airIRmPmUnitEvaporationTemperature2C = _AirIRmPmUnitEvaporationTemperature2C_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 43, 1),
    _AirIRmPmUnitEvaporationTemperature2C_Type()
)
airIRmPmUnitEvaporationTemperature2C.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitEvaporationTemperature2C.setStatus("mandatory")
_AirIRmPmUnitEvaporationTemperature2F_Type = Integer32
_AirIRmPmUnitEvaporationTemperature2F_Object = MibScalar
airIRmPmUnitEvaporationTemperature2F = _AirIRmPmUnitEvaporationTemperature2F_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 6, 43, 2),
    _AirIRmPmUnitEvaporationTemperature2F_Type()
)
airIRmPmUnitEvaporationTemperature2F.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmUnitEvaporationTemperature2F.setStatus("mandatory")
_AirIRmPmCompressor1_ObjectIdentity = ObjectIdentity
airIRmPmCompressor1 = _AirIRmPmCompressor1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7)
)


class _AirIRmPmCmp1ManOperationActive_Type(Integer32):
    """Custom type airIRmPmCmp1ManOperationActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("manual", 2))
    )


_AirIRmPmCmp1ManOperationActive_Type.__name__ = "Integer32"
_AirIRmPmCmp1ManOperationActive_Object = MibScalar
airIRmPmCmp1ManOperationActive = _AirIRmPmCmp1ManOperationActive_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 2),
    _AirIRmPmCmp1ManOperationActive_Type()
)
airIRmPmCmp1ManOperationActive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCmp1ManOperationActive.setStatus("mandatory")
_AirIRmPmCmp1ManOperationState_Type = AirIRmControlState
_AirIRmPmCmp1ManOperationState_Object = MibScalar
airIRmPmCmp1ManOperationState = _AirIRmPmCmp1ManOperationState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 3),
    _AirIRmPmCmp1ManOperationState_Type()
)
airIRmPmCmp1ManOperationState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCmp1ManOperationState.setStatus("mandatory")
_AirIRmPmCmp1Running_Type = AirIRmActivityState
_AirIRmPmCmp1Running_Object = MibScalar
airIRmPmCmp1Running = _AirIRmPmCmp1Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 4),
    _AirIRmPmCmp1Running_Type()
)
airIRmPmCmp1Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCmp1Running.setStatus("mandatory")
_AirIRmPmCmp1StartTempSummer_ObjectIdentity = ObjectIdentity
airIRmPmCmp1StartTempSummer = _AirIRmPmCmp1StartTempSummer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 17)
)
_AirIRmPmCmp1StartTempSummerK_Type = Integer32
_AirIRmPmCmp1StartTempSummerK_Object = MibScalar
airIRmPmCmp1StartTempSummerK = _AirIRmPmCmp1StartTempSummerK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 17, 1),
    _AirIRmPmCmp1StartTempSummerK_Type()
)
airIRmPmCmp1StartTempSummerK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp1StartTempSummerK.setStatus("mandatory")
_AirIRmPmCmp1StartTempSummerF_Type = Integer32
_AirIRmPmCmp1StartTempSummerF_Object = MibScalar
airIRmPmCmp1StartTempSummerF = _AirIRmPmCmp1StartTempSummerF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 17, 2),
    _AirIRmPmCmp1StartTempSummerF_Type()
)
airIRmPmCmp1StartTempSummerF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp1StartTempSummerF.setStatus("mandatory")
_AirIRmPmCmp1HysteresisSummer_ObjectIdentity = ObjectIdentity
airIRmPmCmp1HysteresisSummer = _AirIRmPmCmp1HysteresisSummer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 18)
)
_AirIRmPmCmp1HysteresisSummerK_Type = Integer32
_AirIRmPmCmp1HysteresisSummerK_Object = MibScalar
airIRmPmCmp1HysteresisSummerK = _AirIRmPmCmp1HysteresisSummerK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 18, 1),
    _AirIRmPmCmp1HysteresisSummerK_Type()
)
airIRmPmCmp1HysteresisSummerK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp1HysteresisSummerK.setStatus("mandatory")
_AirIRmPmCmp1HysteresisSummerF_Type = Integer32
_AirIRmPmCmp1HysteresisSummerF_Object = MibScalar
airIRmPmCmp1HysteresisSummerF = _AirIRmPmCmp1HysteresisSummerF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 18, 2),
    _AirIRmPmCmp1HysteresisSummerF_Type()
)
airIRmPmCmp1HysteresisSummerF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp1HysteresisSummerF.setStatus("mandatory")
_AirIRmPmCmp1StartTempWinter_ObjectIdentity = ObjectIdentity
airIRmPmCmp1StartTempWinter = _AirIRmPmCmp1StartTempWinter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 19)
)
_AirIRmPmCmp1StartTempWinterK_Type = Integer32
_AirIRmPmCmp1StartTempWinterK_Object = MibScalar
airIRmPmCmp1StartTempWinterK = _AirIRmPmCmp1StartTempWinterK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 19, 1),
    _AirIRmPmCmp1StartTempWinterK_Type()
)
airIRmPmCmp1StartTempWinterK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp1StartTempWinterK.setStatus("mandatory")
_AirIRmPmCmp1StartTempWinterF_Type = Integer32
_AirIRmPmCmp1StartTempWinterF_Object = MibScalar
airIRmPmCmp1StartTempWinterF = _AirIRmPmCmp1StartTempWinterF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 19, 2),
    _AirIRmPmCmp1StartTempWinterF_Type()
)
airIRmPmCmp1StartTempWinterF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp1StartTempWinterF.setStatus("mandatory")
_AirIRmPmCmp1HysteresisWinter_ObjectIdentity = ObjectIdentity
airIRmPmCmp1HysteresisWinter = _AirIRmPmCmp1HysteresisWinter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 20)
)
_AirIRmPmCmp1HysteresisWinterK_Type = Integer32
_AirIRmPmCmp1HysteresisWinterK_Object = MibScalar
airIRmPmCmp1HysteresisWinterK = _AirIRmPmCmp1HysteresisWinterK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 20, 1),
    _AirIRmPmCmp1HysteresisWinterK_Type()
)
airIRmPmCmp1HysteresisWinterK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp1HysteresisWinterK.setStatus("mandatory")
_AirIRmPmCmp1HysteresisWinterF_Type = Integer32
_AirIRmPmCmp1HysteresisWinterF_Object = MibScalar
airIRmPmCmp1HysteresisWinterF = _AirIRmPmCmp1HysteresisWinterF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 20, 2),
    _AirIRmPmCmp1HysteresisWinterF_Type()
)
airIRmPmCmp1HysteresisWinterF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp1HysteresisWinterF.setStatus("mandatory")
_AirIRmPmCmp1Runtime_Type = Integer32
_AirIRmPmCmp1Runtime_Object = MibScalar
airIRmPmCmp1Runtime = _AirIRmPmCmp1Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 7, 29),
    _AirIRmPmCmp1Runtime_Type()
)
airIRmPmCmp1Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCmp1Runtime.setStatus("mandatory")
_AirIRmPmCompressor2_ObjectIdentity = ObjectIdentity
airIRmPmCompressor2 = _AirIRmPmCompressor2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8)
)


class _AirIRmPmCmp2ManOperationActive_Type(Integer32):
    """Custom type airIRmPmCmp2ManOperationActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("manual", 2))
    )


_AirIRmPmCmp2ManOperationActive_Type.__name__ = "Integer32"
_AirIRmPmCmp2ManOperationActive_Object = MibScalar
airIRmPmCmp2ManOperationActive = _AirIRmPmCmp2ManOperationActive_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 2),
    _AirIRmPmCmp2ManOperationActive_Type()
)
airIRmPmCmp2ManOperationActive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCmp2ManOperationActive.setStatus("mandatory")
_AirIRmPmCmp2ManOperationState_Type = AirIRmControlState
_AirIRmPmCmp2ManOperationState_Object = MibScalar
airIRmPmCmp2ManOperationState = _AirIRmPmCmp2ManOperationState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 3),
    _AirIRmPmCmp2ManOperationState_Type()
)
airIRmPmCmp2ManOperationState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCmp2ManOperationState.setStatus("mandatory")
_AirIRmPmCmp2Running_Type = AirIRmActivityState
_AirIRmPmCmp2Running_Object = MibScalar
airIRmPmCmp2Running = _AirIRmPmCmp2Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 4),
    _AirIRmPmCmp2Running_Type()
)
airIRmPmCmp2Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCmp2Running.setStatus("mandatory")
_AirIRmPmCmp2StartTempSummer_ObjectIdentity = ObjectIdentity
airIRmPmCmp2StartTempSummer = _AirIRmPmCmp2StartTempSummer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 17)
)
_AirIRmPmCmp2StartTempSummerK_Type = Integer32
_AirIRmPmCmp2StartTempSummerK_Object = MibScalar
airIRmPmCmp2StartTempSummerK = _AirIRmPmCmp2StartTempSummerK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 17, 1),
    _AirIRmPmCmp2StartTempSummerK_Type()
)
airIRmPmCmp2StartTempSummerK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp2StartTempSummerK.setStatus("mandatory")
_AirIRmPmCmp2StartTempSummerF_Type = Integer32
_AirIRmPmCmp2StartTempSummerF_Object = MibScalar
airIRmPmCmp2StartTempSummerF = _AirIRmPmCmp2StartTempSummerF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 17, 2),
    _AirIRmPmCmp2StartTempSummerF_Type()
)
airIRmPmCmp2StartTempSummerF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp2StartTempSummerF.setStatus("mandatory")
_AirIRmPmCmp2HysteresisSummer_ObjectIdentity = ObjectIdentity
airIRmPmCmp2HysteresisSummer = _AirIRmPmCmp2HysteresisSummer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 18)
)
_AirIRmPmCmp2HysteresisSummerK_Type = Integer32
_AirIRmPmCmp2HysteresisSummerK_Object = MibScalar
airIRmPmCmp2HysteresisSummerK = _AirIRmPmCmp2HysteresisSummerK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 18, 1),
    _AirIRmPmCmp2HysteresisSummerK_Type()
)
airIRmPmCmp2HysteresisSummerK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp2HysteresisSummerK.setStatus("mandatory")
_AirIRmPmCmp2HysteresisSummerF_Type = Integer32
_AirIRmPmCmp2HysteresisSummerF_Object = MibScalar
airIRmPmCmp2HysteresisSummerF = _AirIRmPmCmp2HysteresisSummerF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 18, 2),
    _AirIRmPmCmp2HysteresisSummerF_Type()
)
airIRmPmCmp2HysteresisSummerF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp2HysteresisSummerF.setStatus("mandatory")
_AirIRmPmCmp2StartTempWinter_ObjectIdentity = ObjectIdentity
airIRmPmCmp2StartTempWinter = _AirIRmPmCmp2StartTempWinter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 19)
)
_AirIRmPmCmp2StartTempWinterK_Type = Integer32
_AirIRmPmCmp2StartTempWinterK_Object = MibScalar
airIRmPmCmp2StartTempWinterK = _AirIRmPmCmp2StartTempWinterK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 19, 1),
    _AirIRmPmCmp2StartTempWinterK_Type()
)
airIRmPmCmp2StartTempWinterK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp2StartTempWinterK.setStatus("mandatory")
_AirIRmPmCmp2StartTempWinterF_Type = Integer32
_AirIRmPmCmp2StartTempWinterF_Object = MibScalar
airIRmPmCmp2StartTempWinterF = _AirIRmPmCmp2StartTempWinterF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 19, 2),
    _AirIRmPmCmp2StartTempWinterF_Type()
)
airIRmPmCmp2StartTempWinterF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp2StartTempWinterF.setStatus("mandatory")
_AirIRmPmCmp2HysteresisWinter_ObjectIdentity = ObjectIdentity
airIRmPmCmp2HysteresisWinter = _AirIRmPmCmp2HysteresisWinter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 20)
)
_AirIRmPmCmp2HysteresisWinterK_Type = Integer32
_AirIRmPmCmp2HysteresisWinterK_Object = MibScalar
airIRmPmCmp2HysteresisWinterK = _AirIRmPmCmp2HysteresisWinterK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 20, 1),
    _AirIRmPmCmp2HysteresisWinterK_Type()
)
airIRmPmCmp2HysteresisWinterK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp2HysteresisWinterK.setStatus("mandatory")
_AirIRmPmCmp2HysteresisWinterF_Type = Integer32
_AirIRmPmCmp2HysteresisWinterF_Object = MibScalar
airIRmPmCmp2HysteresisWinterF = _AirIRmPmCmp2HysteresisWinterF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 20, 2),
    _AirIRmPmCmp2HysteresisWinterF_Type()
)
airIRmPmCmp2HysteresisWinterF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmCmp2HysteresisWinterF.setStatus("mandatory")
_AirIRmPmCmp2Runtime_Type = Integer32
_AirIRmPmCmp2Runtime_Object = MibScalar
airIRmPmCmp2Runtime = _AirIRmPmCmp2Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 8, 29),
    _AirIRmPmCmp2Runtime_Type()
)
airIRmPmCmp2Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCmp2Runtime.setStatus("mandatory")
_AirIRmPmSuctionValve1_ObjectIdentity = ObjectIdentity
airIRmPmSuctionValve1 = _AirIRmPmSuctionValve1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 9)
)
_AirIRmPmSuctionValve2_ObjectIdentity = ObjectIdentity
airIRmPmSuctionValve2 = _AirIRmPmSuctionValve2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 10)
)
_AirIRmPmEheating1_ObjectIdentity = ObjectIdentity
airIRmPmEheating1 = _AirIRmPmEheating1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11)
)
_AirIRmPmEheating1ManOpEnable_Type = AirIRmActivityState
_AirIRmPmEheating1ManOpEnable_Object = MibScalar
airIRmPmEheating1ManOpEnable = _AirIRmPmEheating1ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 2),
    _AirIRmPmEheating1ManOpEnable_Type()
)
airIRmPmEheating1ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating1ManOpEnable.setStatus("mandatory")
_AirIRmPmEheating1Running_Type = AirIRmControlState
_AirIRmPmEheating1Running_Object = MibScalar
airIRmPmEheating1Running = _AirIRmPmEheating1Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 4),
    _AirIRmPmEheating1Running_Type()
)
airIRmPmEheating1Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating1Running.setStatus("mandatory")
_AirIRmPmEheating1ManOpRunning_Type = AirIRmActivityState
_AirIRmPmEheating1ManOpRunning_Object = MibScalar
airIRmPmEheating1ManOpRunning = _AirIRmPmEheating1ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 5),
    _AirIRmPmEheating1ManOpRunning_Type()
)
airIRmPmEheating1ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating1ManOpRunning.setStatus("mandatory")


class _AirIRmPmEheating1Type_Type(Integer32):
    """Custom type airIRmPmEheating1Type based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("direct", 1),
          ("pwm", 2))
    )


_AirIRmPmEheating1Type_Type.__name__ = "Integer32"
_AirIRmPmEheating1Type_Object = MibScalar
airIRmPmEheating1Type = _AirIRmPmEheating1Type_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 9),
    _AirIRmPmEheating1Type_Type()
)
airIRmPmEheating1Type.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating1Type.setStatus("mandatory")
_AirIRmPmEheating1StartTemperature_ObjectIdentity = ObjectIdentity
airIRmPmEheating1StartTemperature = _AirIRmPmEheating1StartTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 10)
)
_AirIRmPmEheating1StartTemperatureK_Type = Integer32
_AirIRmPmEheating1StartTemperatureK_Object = MibScalar
airIRmPmEheating1StartTemperatureK = _AirIRmPmEheating1StartTemperatureK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 10, 1),
    _AirIRmPmEheating1StartTemperatureK_Type()
)
airIRmPmEheating1StartTemperatureK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating1StartTemperatureK.setStatus("mandatory")
_AirIRmPmEheating1StartTemperatureF_Type = Integer32
_AirIRmPmEheating1StartTemperatureF_Object = MibScalar
airIRmPmEheating1StartTemperatureF = _AirIRmPmEheating1StartTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 10, 2),
    _AirIRmPmEheating1StartTemperatureF_Type()
)
airIRmPmEheating1StartTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating1StartTemperatureF.setStatus("mandatory")
_AirIRmPmEheating1Hysteresis_ObjectIdentity = ObjectIdentity
airIRmPmEheating1Hysteresis = _AirIRmPmEheating1Hysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 11)
)
_AirIRmPmEheating1HysteresisK_Type = Integer32
_AirIRmPmEheating1HysteresisK_Object = MibScalar
airIRmPmEheating1HysteresisK = _AirIRmPmEheating1HysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 11, 1),
    _AirIRmPmEheating1HysteresisK_Type()
)
airIRmPmEheating1HysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating1HysteresisK.setStatus("mandatory")
_AirIRmPmEheating1HysteresisF_Type = Integer32
_AirIRmPmEheating1HysteresisF_Object = MibScalar
airIRmPmEheating1HysteresisF = _AirIRmPmEheating1HysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 11, 2),
    _AirIRmPmEheating1HysteresisF_Type()
)
airIRmPmEheating1HysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating1HysteresisF.setStatus("mandatory")
_AirIRmPmEheating1Runtime_Type = Integer32
_AirIRmPmEheating1Runtime_Object = MibScalar
airIRmPmEheating1Runtime = _AirIRmPmEheating1Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 11, 17),
    _AirIRmPmEheating1Runtime_Type()
)
airIRmPmEheating1Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating1Runtime.setStatus("mandatory")
_AirIRmPmEheating2_ObjectIdentity = ObjectIdentity
airIRmPmEheating2 = _AirIRmPmEheating2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12)
)
_AirIRmPmEheating2ManOpEnable_Type = AirIRmActivityState
_AirIRmPmEheating2ManOpEnable_Object = MibScalar
airIRmPmEheating2ManOpEnable = _AirIRmPmEheating2ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 2),
    _AirIRmPmEheating2ManOpEnable_Type()
)
airIRmPmEheating2ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating2ManOpEnable.setStatus("mandatory")
_AirIRmPmEheating2Running_Type = AirIRmControlState
_AirIRmPmEheating2Running_Object = MibScalar
airIRmPmEheating2Running = _AirIRmPmEheating2Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 4),
    _AirIRmPmEheating2Running_Type()
)
airIRmPmEheating2Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating2Running.setStatus("mandatory")
_AirIRmPmEheating2ManOpRunning_Type = AirIRmActivityState
_AirIRmPmEheating2ManOpRunning_Object = MibScalar
airIRmPmEheating2ManOpRunning = _AirIRmPmEheating2ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 5),
    _AirIRmPmEheating2ManOpRunning_Type()
)
airIRmPmEheating2ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating2ManOpRunning.setStatus("mandatory")


class _AirIRmPmEheating2Type_Type(Integer32):
    """Custom type airIRmPmEheating2Type based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("direct", 1),
          ("pwm", 2))
    )


_AirIRmPmEheating2Type_Type.__name__ = "Integer32"
_AirIRmPmEheating2Type_Object = MibScalar
airIRmPmEheating2Type = _AirIRmPmEheating2Type_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 9),
    _AirIRmPmEheating2Type_Type()
)
airIRmPmEheating2Type.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating2Type.setStatus("mandatory")
_AirIRmPmEheating2StartTemperature_ObjectIdentity = ObjectIdentity
airIRmPmEheating2StartTemperature = _AirIRmPmEheating2StartTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 10)
)
_AirIRmPmEheating2StartTemperatureK_Type = Integer32
_AirIRmPmEheating2StartTemperatureK_Object = MibScalar
airIRmPmEheating2StartTemperatureK = _AirIRmPmEheating2StartTemperatureK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 10, 1),
    _AirIRmPmEheating2StartTemperatureK_Type()
)
airIRmPmEheating2StartTemperatureK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating2StartTemperatureK.setStatus("mandatory")
_AirIRmPmEheating2StartTemperatureF_Type = Integer32
_AirIRmPmEheating2StartTemperatureF_Object = MibScalar
airIRmPmEheating2StartTemperatureF = _AirIRmPmEheating2StartTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 10, 2),
    _AirIRmPmEheating2StartTemperatureF_Type()
)
airIRmPmEheating2StartTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating2StartTemperatureF.setStatus("mandatory")
_AirIRmPmEheating2Hysteresis_ObjectIdentity = ObjectIdentity
airIRmPmEheating2Hysteresis = _AirIRmPmEheating2Hysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 11)
)
_AirIRmPmEheating2HysteresisK_Type = Integer32
_AirIRmPmEheating2HysteresisK_Object = MibScalar
airIRmPmEheating2HysteresisK = _AirIRmPmEheating2HysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 11, 1),
    _AirIRmPmEheating2HysteresisK_Type()
)
airIRmPmEheating2HysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating2HysteresisK.setStatus("mandatory")
_AirIRmPmEheating2HysteresisF_Type = Integer32
_AirIRmPmEheating2HysteresisF_Object = MibScalar
airIRmPmEheating2HysteresisF = _AirIRmPmEheating2HysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 11, 2),
    _AirIRmPmEheating2HysteresisF_Type()
)
airIRmPmEheating2HysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating2HysteresisF.setStatus("mandatory")
_AirIRmPmEheating2Runtime_Type = Integer32
_AirIRmPmEheating2Runtime_Object = MibScalar
airIRmPmEheating2Runtime = _AirIRmPmEheating2Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 12, 17),
    _AirIRmPmEheating2Runtime_Type()
)
airIRmPmEheating2Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating2Runtime.setStatus("mandatory")
_AirIRmPmEheating3_ObjectIdentity = ObjectIdentity
airIRmPmEheating3 = _AirIRmPmEheating3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13)
)
_AirIRmPmEheating3ManOpEnable_Type = AirIRmActivityState
_AirIRmPmEheating3ManOpEnable_Object = MibScalar
airIRmPmEheating3ManOpEnable = _AirIRmPmEheating3ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 2),
    _AirIRmPmEheating3ManOpEnable_Type()
)
airIRmPmEheating3ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating3ManOpEnable.setStatus("mandatory")
_AirIRmPmEheating3Running_Type = AirIRmControlState
_AirIRmPmEheating3Running_Object = MibScalar
airIRmPmEheating3Running = _AirIRmPmEheating3Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 4),
    _AirIRmPmEheating3Running_Type()
)
airIRmPmEheating3Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating3Running.setStatus("mandatory")
_AirIRmPmEheating3ManOpRunning_Type = AirIRmActivityState
_AirIRmPmEheating3ManOpRunning_Object = MibScalar
airIRmPmEheating3ManOpRunning = _AirIRmPmEheating3ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 5),
    _AirIRmPmEheating3ManOpRunning_Type()
)
airIRmPmEheating3ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating3ManOpRunning.setStatus("mandatory")


class _AirIRmPmEheating3Type_Type(Integer32):
    """Custom type airIRmPmEheating3Type based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("direct", 1),
          ("pwm", 2))
    )


_AirIRmPmEheating3Type_Type.__name__ = "Integer32"
_AirIRmPmEheating3Type_Object = MibScalar
airIRmPmEheating3Type = _AirIRmPmEheating3Type_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 9),
    _AirIRmPmEheating3Type_Type()
)
airIRmPmEheating3Type.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating3Type.setStatus("mandatory")
_AirIRmPmEheating3StartTemperature_ObjectIdentity = ObjectIdentity
airIRmPmEheating3StartTemperature = _AirIRmPmEheating3StartTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 10)
)
_AirIRmPmEheating3StartTemperatureK_Type = Integer32
_AirIRmPmEheating3StartTemperatureK_Object = MibScalar
airIRmPmEheating3StartTemperatureK = _AirIRmPmEheating3StartTemperatureK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 10, 1),
    _AirIRmPmEheating3StartTemperatureK_Type()
)
airIRmPmEheating3StartTemperatureK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating3StartTemperatureK.setStatus("mandatory")
_AirIRmPmEheating3StartTemperatureF_Type = Integer32
_AirIRmPmEheating3StartTemperatureF_Object = MibScalar
airIRmPmEheating3StartTemperatureF = _AirIRmPmEheating3StartTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 10, 2),
    _AirIRmPmEheating3StartTemperatureF_Type()
)
airIRmPmEheating3StartTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating3StartTemperatureF.setStatus("mandatory")
_AirIRmPmEheating3Hysteresis_ObjectIdentity = ObjectIdentity
airIRmPmEheating3Hysteresis = _AirIRmPmEheating3Hysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 11)
)
_AirIRmPmEheating3HysteresisK_Type = Integer32
_AirIRmPmEheating3HysteresisK_Object = MibScalar
airIRmPmEheating3HysteresisK = _AirIRmPmEheating3HysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 11, 1),
    _AirIRmPmEheating3HysteresisK_Type()
)
airIRmPmEheating3HysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating3HysteresisK.setStatus("mandatory")
_AirIRmPmEheating3HysteresisF_Type = Integer32
_AirIRmPmEheating3HysteresisF_Object = MibScalar
airIRmPmEheating3HysteresisF = _AirIRmPmEheating3HysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 11, 2),
    _AirIRmPmEheating3HysteresisF_Type()
)
airIRmPmEheating3HysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating3HysteresisF.setStatus("mandatory")
_AirIRmPmEheating3Runtime_Type = Integer32
_AirIRmPmEheating3Runtime_Object = MibScalar
airIRmPmEheating3Runtime = _AirIRmPmEheating3Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 13, 17),
    _AirIRmPmEheating3Runtime_Type()
)
airIRmPmEheating3Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating3Runtime.setStatus("mandatory")
_AirIRmPmEheating4_ObjectIdentity = ObjectIdentity
airIRmPmEheating4 = _AirIRmPmEheating4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14)
)
_AirIRmPmEheating4ManOpEnable_Type = AirIRmActivityState
_AirIRmPmEheating4ManOpEnable_Object = MibScalar
airIRmPmEheating4ManOpEnable = _AirIRmPmEheating4ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 2),
    _AirIRmPmEheating4ManOpEnable_Type()
)
airIRmPmEheating4ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating4ManOpEnable.setStatus("mandatory")
_AirIRmPmEheating4Running_Type = AirIRmControlState
_AirIRmPmEheating4Running_Object = MibScalar
airIRmPmEheating4Running = _AirIRmPmEheating4Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 4),
    _AirIRmPmEheating4Running_Type()
)
airIRmPmEheating4Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating4Running.setStatus("mandatory")
_AirIRmPmEheating4ManOpRunning_Type = AirIRmActivityState
_AirIRmPmEheating4ManOpRunning_Object = MibScalar
airIRmPmEheating4ManOpRunning = _AirIRmPmEheating4ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 5),
    _AirIRmPmEheating4ManOpRunning_Type()
)
airIRmPmEheating4ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating4ManOpRunning.setStatus("mandatory")


class _AirIRmPmEheating4Type_Type(Integer32):
    """Custom type airIRmPmEheating4Type based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("direct", 1),
          ("pwm", 2))
    )


_AirIRmPmEheating4Type_Type.__name__ = "Integer32"
_AirIRmPmEheating4Type_Object = MibScalar
airIRmPmEheating4Type = _AirIRmPmEheating4Type_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 9),
    _AirIRmPmEheating4Type_Type()
)
airIRmPmEheating4Type.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating4Type.setStatus("mandatory")
_AirIRmPmEheating4StartTemperature_ObjectIdentity = ObjectIdentity
airIRmPmEheating4StartTemperature = _AirIRmPmEheating4StartTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 10)
)
_AirIRmPmEheating4StartTemperatureK_Type = Integer32
_AirIRmPmEheating4StartTemperatureK_Object = MibScalar
airIRmPmEheating4StartTemperatureK = _AirIRmPmEheating4StartTemperatureK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 10, 1),
    _AirIRmPmEheating4StartTemperatureK_Type()
)
airIRmPmEheating4StartTemperatureK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating4StartTemperatureK.setStatus("mandatory")
_AirIRmPmEheating4StartTemperatureF_Type = Integer32
_AirIRmPmEheating4StartTemperatureF_Object = MibScalar
airIRmPmEheating4StartTemperatureF = _AirIRmPmEheating4StartTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 10, 2),
    _AirIRmPmEheating4StartTemperatureF_Type()
)
airIRmPmEheating4StartTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating4StartTemperatureF.setStatus("mandatory")
_AirIRmPmEheating4Hysteresis_ObjectIdentity = ObjectIdentity
airIRmPmEheating4Hysteresis = _AirIRmPmEheating4Hysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 11)
)
_AirIRmPmEheating4HysteresisK_Type = Integer32
_AirIRmPmEheating4HysteresisK_Object = MibScalar
airIRmPmEheating4HysteresisK = _AirIRmPmEheating4HysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 11, 1),
    _AirIRmPmEheating4HysteresisK_Type()
)
airIRmPmEheating4HysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating4HysteresisK.setStatus("mandatory")
_AirIRmPmEheating4HysteresisF_Type = Integer32
_AirIRmPmEheating4HysteresisF_Object = MibScalar
airIRmPmEheating4HysteresisF = _AirIRmPmEheating4HysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 11, 2),
    _AirIRmPmEheating4HysteresisF_Type()
)
airIRmPmEheating4HysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmEheating4HysteresisF.setStatus("mandatory")
_AirIRmPmEheating4Runtime_Type = Integer32
_AirIRmPmEheating4Runtime_Object = MibScalar
airIRmPmEheating4Runtime = _AirIRmPmEheating4Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 14, 17),
    _AirIRmPmEheating4Runtime_Type()
)
airIRmPmEheating4Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEheating4Runtime.setStatus("mandatory")
_AirIRmPmGECWvalve_ObjectIdentity = ObjectIdentity
airIRmPmGECWvalve = _AirIRmPmGECWvalve_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15)
)
_AirIRmPmGECWvalveManOpEnable_Type = Integer32
_AirIRmPmGECWvalveManOpEnable_Object = MibScalar
airIRmPmGECWvalveManOpEnable = _AirIRmPmGECWvalveManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 2),
    _AirIRmPmGECWvalveManOpEnable_Type()
)
airIRmPmGECWvalveManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmGECWvalveManOpEnable.setStatus("mandatory")
_AirIRmPmGECWvalveStartTemperature_ObjectIdentity = ObjectIdentity
airIRmPmGECWvalveStartTemperature = _AirIRmPmGECWvalveStartTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 9)
)
_AirIRmPmGECWvalveStartTemperatureK_Type = Integer32
_AirIRmPmGECWvalveStartTemperatureK_Object = MibScalar
airIRmPmGECWvalveStartTemperatureK = _AirIRmPmGECWvalveStartTemperatureK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 9, 1),
    _AirIRmPmGECWvalveStartTemperatureK_Type()
)
airIRmPmGECWvalveStartTemperatureK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmGECWvalveStartTemperatureK.setStatus("mandatory")
_AirIRmPmGECWvalveStartTemperatureF_Type = Integer32
_AirIRmPmGECWvalveStartTemperatureF_Object = MibScalar
airIRmPmGECWvalveStartTemperatureF = _AirIRmPmGECWvalveStartTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 9, 2),
    _AirIRmPmGECWvalveStartTemperatureF_Type()
)
airIRmPmGECWvalveStartTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmGECWvalveStartTemperatureF.setStatus("mandatory")
_AirIRmPmGECWvalveLinearRange_ObjectIdentity = ObjectIdentity
airIRmPmGECWvalveLinearRange = _AirIRmPmGECWvalveLinearRange_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 10)
)
_AirIRmPmGECWvalveLinearRangeK_Type = Integer32
_AirIRmPmGECWvalveLinearRangeK_Object = MibScalar
airIRmPmGECWvalveLinearRangeK = _AirIRmPmGECWvalveLinearRangeK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 10, 1),
    _AirIRmPmGECWvalveLinearRangeK_Type()
)
airIRmPmGECWvalveLinearRangeK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmGECWvalveLinearRangeK.setStatus("mandatory")
_AirIRmPmGECWvalveLinearRangeF_Type = Integer32
_AirIRmPmGECWvalveLinearRangeF_Object = MibScalar
airIRmPmGECWvalveLinearRangeF = _AirIRmPmGECWvalveLinearRangeF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 10, 2),
    _AirIRmPmGECWvalveLinearRangeF_Type()
)
airIRmPmGECWvalveLinearRangeF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmGECWvalveLinearRangeF.setStatus("mandatory")
_AirIRmPmGECWvalveGEOffTemp_ObjectIdentity = ObjectIdentity
airIRmPmGECWvalveGEOffTemp = _AirIRmPmGECWvalveGEOffTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 12)
)
_AirIRmPmGECWvalveGEOffTempC_Type = Integer32
_AirIRmPmGECWvalveGEOffTempC_Object = MibScalar
airIRmPmGECWvalveGEOffTempC = _AirIRmPmGECWvalveGEOffTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 12, 1),
    _AirIRmPmGECWvalveGEOffTempC_Type()
)
airIRmPmGECWvalveGEOffTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmGECWvalveGEOffTempC.setStatus("mandatory")
_AirIRmPmGECWvalveGEOffTempF_Type = Integer32
_AirIRmPmGECWvalveGEOffTempF_Object = MibScalar
airIRmPmGECWvalveGEOffTempF = _AirIRmPmGECWvalveGEOffTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 12, 2),
    _AirIRmPmGECWvalveGEOffTempF_Type()
)
airIRmPmGECWvalveGEOffTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmGECWvalveGEOffTempF.setStatus("mandatory")
_AirIRmPmGECWvalveOpeningGrade_Type = Integer32
_AirIRmPmGECWvalveOpeningGrade_Object = MibScalar
airIRmPmGECWvalveOpeningGrade = _AirIRmPmGECWvalveOpeningGrade_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 15),
    _AirIRmPmGECWvalveOpeningGrade_Type()
)
airIRmPmGECWvalveOpeningGrade.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmGECWvalveOpeningGrade.setStatus("mandatory")
_AirIRmPmGECWvalveManOpOpeningGrade_Type = Integer32
_AirIRmPmGECWvalveManOpOpeningGrade_Object = MibScalar
airIRmPmGECWvalveManOpOpeningGrade = _AirIRmPmGECWvalveManOpOpeningGrade_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 15, 16),
    _AirIRmPmGECWvalveManOpOpeningGrade_Type()
)
airIRmPmGECWvalveManOpOpeningGrade.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmGECWvalveManOpOpeningGrade.setStatus("mandatory")
_AirIRmPmGvalve_ObjectIdentity = ObjectIdentity
airIRmPmGvalve = _AirIRmPmGvalve_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16)
)
_AirIRmPmGvalveManOperationEnable_Type = AirIRmActivityState
_AirIRmPmGvalveManOperationEnable_Object = MibScalar
airIRmPmGvalveManOperationEnable = _AirIRmPmGvalveManOperationEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 2),
    _AirIRmPmGvalveManOperationEnable_Type()
)
airIRmPmGvalveManOperationEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmGvalveManOperationEnable.setStatus("mandatory")
_AirIRmPmGvalvePreOpeningTime_Type = Integer32
_AirIRmPmGvalvePreOpeningTime_Object = MibScalar
airIRmPmGvalvePreOpeningTime = _AirIRmPmGvalvePreOpeningTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 11),
    _AirIRmPmGvalvePreOpeningTime_Type()
)
airIRmPmGvalvePreOpeningTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmGvalvePreOpeningTime.setStatus("mandatory")
_AirIRmPmGvalvePreOpeningGrade_Type = Integer32
_AirIRmPmGvalvePreOpeningGrade_Object = MibScalar
airIRmPmGvalvePreOpeningGrade = _AirIRmPmGvalvePreOpeningGrade_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 12),
    _AirIRmPmGvalvePreOpeningGrade_Type()
)
airIRmPmGvalvePreOpeningGrade.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmGvalvePreOpeningGrade.setStatus("mandatory")
_AirIRmPmGvalveOpeningGrade_Type = Integer32
_AirIRmPmGvalveOpeningGrade_Object = MibScalar
airIRmPmGvalveOpeningGrade = _AirIRmPmGvalveOpeningGrade_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 13),
    _AirIRmPmGvalveOpeningGrade_Type()
)
airIRmPmGvalveOpeningGrade.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmGvalveOpeningGrade.setStatus("mandatory")
_AirIRmPmGvalveManOpOpeningGrade_Type = Integer32
_AirIRmPmGvalveManOpOpeningGrade_Object = MibScalar
airIRmPmGvalveManOpOpeningGrade = _AirIRmPmGvalveManOpOpeningGrade_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 16, 14),
    _AirIRmPmGvalveManOpOpeningGrade_Type()
)
airIRmPmGvalveManOpOpeningGrade.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmGvalveManOpOpeningGrade.setStatus("mandatory")
_AirIRmPmDrycooler1_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler1 = _AirIRmPmDrycooler1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17)
)
_AirIRmPmDrycooler1ManOpEnable_Type = AirIRmActivityState
_AirIRmPmDrycooler1ManOpEnable_Object = MibScalar
airIRmPmDrycooler1ManOpEnable = _AirIRmPmDrycooler1ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 2),
    _AirIRmPmDrycooler1ManOpEnable_Type()
)
airIRmPmDrycooler1ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler1ManOpEnable.setStatus("mandatory")
_AirIRmPmDrycooler1Running_Type = AirIRmActivityState
_AirIRmPmDrycooler1Running_Object = MibScalar
airIRmPmDrycooler1Running = _AirIRmPmDrycooler1Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 3),
    _AirIRmPmDrycooler1Running_Type()
)
airIRmPmDrycooler1Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler1Running.setStatus("mandatory")
_AirIRmPmDrycooler1ManOpRunning_Type = AirIRmActivityState
_AirIRmPmDrycooler1ManOpRunning_Object = MibScalar
airIRmPmDrycooler1ManOpRunning = _AirIRmPmDrycooler1ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 5),
    _AirIRmPmDrycooler1ManOpRunning_Type()
)
airIRmPmDrycooler1ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler1ManOpRunning.setStatus("mandatory")
_AirIRmPmDrycooler1WinterStartTemp_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler1WinterStartTemp = _AirIRmPmDrycooler1WinterStartTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 9)
)
_AirIRmPmDrycooler1WinterStartTempC_Type = Integer32
_AirIRmPmDrycooler1WinterStartTempC_Object = MibScalar
airIRmPmDrycooler1WinterStartTempC = _AirIRmPmDrycooler1WinterStartTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 9, 1),
    _AirIRmPmDrycooler1WinterStartTempC_Type()
)
airIRmPmDrycooler1WinterStartTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler1WinterStartTempC.setStatus("mandatory")
_AirIRmPmDrycooler1WinterStartTempF_Type = Integer32
_AirIRmPmDrycooler1WinterStartTempF_Object = MibScalar
airIRmPmDrycooler1WinterStartTempF = _AirIRmPmDrycooler1WinterStartTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 9, 2),
    _AirIRmPmDrycooler1WinterStartTempF_Type()
)
airIRmPmDrycooler1WinterStartTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler1WinterStartTempF.setStatus("mandatory")
_AirIRmPmDrycooler1SummerStartTemp_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler1SummerStartTemp = _AirIRmPmDrycooler1SummerStartTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 10)
)
_AirIRmPmDrycooler1SummerStartTempC_Type = Integer32
_AirIRmPmDrycooler1SummerStartTempC_Object = MibScalar
airIRmPmDrycooler1SummerStartTempC = _AirIRmPmDrycooler1SummerStartTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 10, 1),
    _AirIRmPmDrycooler1SummerStartTempC_Type()
)
airIRmPmDrycooler1SummerStartTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler1SummerStartTempC.setStatus("mandatory")
_AirIRmPmDrycooler1SummerStartTempF_Type = Integer32
_AirIRmPmDrycooler1SummerStartTempF_Object = MibScalar
airIRmPmDrycooler1SummerStartTempF = _AirIRmPmDrycooler1SummerStartTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 10, 2),
    _AirIRmPmDrycooler1SummerStartTempF_Type()
)
airIRmPmDrycooler1SummerStartTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler1SummerStartTempF.setStatus("mandatory")
_AirIRmPmDrycooler1Hysteresis_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler1Hysteresis = _AirIRmPmDrycooler1Hysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 11)
)
_AirIRmPmDrycooler1HysteresisK_Type = Integer32
_AirIRmPmDrycooler1HysteresisK_Object = MibScalar
airIRmPmDrycooler1HysteresisK = _AirIRmPmDrycooler1HysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 11, 1),
    _AirIRmPmDrycooler1HysteresisK_Type()
)
airIRmPmDrycooler1HysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler1HysteresisK.setStatus("mandatory")
_AirIRmPmDrycooler1HysteresisF_Type = Integer32
_AirIRmPmDrycooler1HysteresisF_Object = MibScalar
airIRmPmDrycooler1HysteresisF = _AirIRmPmDrycooler1HysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 11, 2),
    _AirIRmPmDrycooler1HysteresisF_Type()
)
airIRmPmDrycooler1HysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler1HysteresisF.setStatus("mandatory")
_AirIRmPmDrycooler1Runtime_Type = Integer32
_AirIRmPmDrycooler1Runtime_Object = MibScalar
airIRmPmDrycooler1Runtime = _AirIRmPmDrycooler1Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 17, 16),
    _AirIRmPmDrycooler1Runtime_Type()
)
airIRmPmDrycooler1Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler1Runtime.setStatus("mandatory")
_AirIRmPmDrycooler2_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler2 = _AirIRmPmDrycooler2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18)
)
_AirIRmPmDrycooler2ManOpEnable_Type = AirIRmActivityState
_AirIRmPmDrycooler2ManOpEnable_Object = MibScalar
airIRmPmDrycooler2ManOpEnable = _AirIRmPmDrycooler2ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 2),
    _AirIRmPmDrycooler2ManOpEnable_Type()
)
airIRmPmDrycooler2ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler2ManOpEnable.setStatus("mandatory")
_AirIRmPmDrycooler2Running_Type = AirIRmActivityState
_AirIRmPmDrycooler2Running_Object = MibScalar
airIRmPmDrycooler2Running = _AirIRmPmDrycooler2Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 3),
    _AirIRmPmDrycooler2Running_Type()
)
airIRmPmDrycooler2Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler2Running.setStatus("mandatory")
_AirIRmPmDrycooler2ManOpRunning_Type = AirIRmActivityState
_AirIRmPmDrycooler2ManOpRunning_Object = MibScalar
airIRmPmDrycooler2ManOpRunning = _AirIRmPmDrycooler2ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 5),
    _AirIRmPmDrycooler2ManOpRunning_Type()
)
airIRmPmDrycooler2ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler2ManOpRunning.setStatus("mandatory")
_AirIRmPmDrycooler2WinterStartTemp_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler2WinterStartTemp = _AirIRmPmDrycooler2WinterStartTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 9)
)
_AirIRmPmDrycooler2WinterStartTempC_Type = Integer32
_AirIRmPmDrycooler2WinterStartTempC_Object = MibScalar
airIRmPmDrycooler2WinterStartTempC = _AirIRmPmDrycooler2WinterStartTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 9, 1),
    _AirIRmPmDrycooler2WinterStartTempC_Type()
)
airIRmPmDrycooler2WinterStartTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler2WinterStartTempC.setStatus("mandatory")
_AirIRmPmDrycooler2WinterStartTempF_Type = Integer32
_AirIRmPmDrycooler2WinterStartTempF_Object = MibScalar
airIRmPmDrycooler2WinterStartTempF = _AirIRmPmDrycooler2WinterStartTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 9, 2),
    _AirIRmPmDrycooler2WinterStartTempF_Type()
)
airIRmPmDrycooler2WinterStartTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler2WinterStartTempF.setStatus("mandatory")
_AirIRmPmDrycooler2SummerStartTemp_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler2SummerStartTemp = _AirIRmPmDrycooler2SummerStartTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 10)
)
_AirIRmPmDrycooler2SummerStartTempC_Type = Integer32
_AirIRmPmDrycooler2SummerStartTempC_Object = MibScalar
airIRmPmDrycooler2SummerStartTempC = _AirIRmPmDrycooler2SummerStartTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 10, 1),
    _AirIRmPmDrycooler2SummerStartTempC_Type()
)
airIRmPmDrycooler2SummerStartTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler2SummerStartTempC.setStatus("mandatory")
_AirIRmPmDrycooler2SummerStartTempF_Type = Integer32
_AirIRmPmDrycooler2SummerStartTempF_Object = MibScalar
airIRmPmDrycooler2SummerStartTempF = _AirIRmPmDrycooler2SummerStartTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 10, 2),
    _AirIRmPmDrycooler2SummerStartTempF_Type()
)
airIRmPmDrycooler2SummerStartTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler2SummerStartTempF.setStatus("mandatory")
_AirIRmPmDrycooler2Hysteresis_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler2Hysteresis = _AirIRmPmDrycooler2Hysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 11)
)
_AirIRmPmDrycooler2HysteresisK_Type = Integer32
_AirIRmPmDrycooler2HysteresisK_Object = MibScalar
airIRmPmDrycooler2HysteresisK = _AirIRmPmDrycooler2HysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 11, 1),
    _AirIRmPmDrycooler2HysteresisK_Type()
)
airIRmPmDrycooler2HysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler2HysteresisK.setStatus("mandatory")
_AirIRmPmDrycooler2HysteresisF_Type = Integer32
_AirIRmPmDrycooler2HysteresisF_Object = MibScalar
airIRmPmDrycooler2HysteresisF = _AirIRmPmDrycooler2HysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 11, 2),
    _AirIRmPmDrycooler2HysteresisF_Type()
)
airIRmPmDrycooler2HysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler2HysteresisF.setStatus("mandatory")
_AirIRmPmDrycooler2Runtime_Type = Integer32
_AirIRmPmDrycooler2Runtime_Object = MibScalar
airIRmPmDrycooler2Runtime = _AirIRmPmDrycooler2Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 18, 16),
    _AirIRmPmDrycooler2Runtime_Type()
)
airIRmPmDrycooler2Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler2Runtime.setStatus("mandatory")
_AirIRmPmDrycooler3_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler3 = _AirIRmPmDrycooler3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19)
)
_AirIRmPmDrycooler3ManOpEnable_Type = AirIRmActivityState
_AirIRmPmDrycooler3ManOpEnable_Object = MibScalar
airIRmPmDrycooler3ManOpEnable = _AirIRmPmDrycooler3ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 2),
    _AirIRmPmDrycooler3ManOpEnable_Type()
)
airIRmPmDrycooler3ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler3ManOpEnable.setStatus("mandatory")
_AirIRmPmDrycooler3Running_Type = AirIRmActivityState
_AirIRmPmDrycooler3Running_Object = MibScalar
airIRmPmDrycooler3Running = _AirIRmPmDrycooler3Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 3),
    _AirIRmPmDrycooler3Running_Type()
)
airIRmPmDrycooler3Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler3Running.setStatus("mandatory")
_AirIRmPmDrycooler3ManOpRunning_Type = AirIRmActivityState
_AirIRmPmDrycooler3ManOpRunning_Object = MibScalar
airIRmPmDrycooler3ManOpRunning = _AirIRmPmDrycooler3ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 5),
    _AirIRmPmDrycooler3ManOpRunning_Type()
)
airIRmPmDrycooler3ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler3ManOpRunning.setStatus("mandatory")
_AirIRmPmDrycooler3WinterStartTemp_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler3WinterStartTemp = _AirIRmPmDrycooler3WinterStartTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 9)
)
_AirIRmPmDrycooler3WinterStartTempC_Type = Integer32
_AirIRmPmDrycooler3WinterStartTempC_Object = MibScalar
airIRmPmDrycooler3WinterStartTempC = _AirIRmPmDrycooler3WinterStartTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 9, 1),
    _AirIRmPmDrycooler3WinterStartTempC_Type()
)
airIRmPmDrycooler3WinterStartTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler3WinterStartTempC.setStatus("mandatory")
_AirIRmPmDrycooler3WinterStartTempF_Type = Integer32
_AirIRmPmDrycooler3WinterStartTempF_Object = MibScalar
airIRmPmDrycooler3WinterStartTempF = _AirIRmPmDrycooler3WinterStartTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 9, 2),
    _AirIRmPmDrycooler3WinterStartTempF_Type()
)
airIRmPmDrycooler3WinterStartTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler3WinterStartTempF.setStatus("mandatory")
_AirIRmPmDrycooler3SummerStartTemp_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler3SummerStartTemp = _AirIRmPmDrycooler3SummerStartTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 10)
)
_AirIRmPmDrycooler3SummerStartTempC_Type = Integer32
_AirIRmPmDrycooler3SummerStartTempC_Object = MibScalar
airIRmPmDrycooler3SummerStartTempC = _AirIRmPmDrycooler3SummerStartTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 10, 1),
    _AirIRmPmDrycooler3SummerStartTempC_Type()
)
airIRmPmDrycooler3SummerStartTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler3SummerStartTempC.setStatus("mandatory")
_AirIRmPmDrycooler3SummerStartTempF_Type = Integer32
_AirIRmPmDrycooler3SummerStartTempF_Object = MibScalar
airIRmPmDrycooler3SummerStartTempF = _AirIRmPmDrycooler3SummerStartTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 10, 2),
    _AirIRmPmDrycooler3SummerStartTempF_Type()
)
airIRmPmDrycooler3SummerStartTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler3SummerStartTempF.setStatus("mandatory")
_AirIRmPmDrycooler3Hysteresis_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler3Hysteresis = _AirIRmPmDrycooler3Hysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 11)
)
_AirIRmPmDrycooler3HysteresisK_Type = Integer32
_AirIRmPmDrycooler3HysteresisK_Object = MibScalar
airIRmPmDrycooler3HysteresisK = _AirIRmPmDrycooler3HysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 11, 1),
    _AirIRmPmDrycooler3HysteresisK_Type()
)
airIRmPmDrycooler3HysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler3HysteresisK.setStatus("mandatory")
_AirIRmPmDrycooler3HysteresisF_Type = Integer32
_AirIRmPmDrycooler3HysteresisF_Object = MibScalar
airIRmPmDrycooler3HysteresisF = _AirIRmPmDrycooler3HysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 11, 2),
    _AirIRmPmDrycooler3HysteresisF_Type()
)
airIRmPmDrycooler3HysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler3HysteresisF.setStatus("mandatory")
_AirIRmPmDrycooler3Runtime_Type = Integer32
_AirIRmPmDrycooler3Runtime_Object = MibScalar
airIRmPmDrycooler3Runtime = _AirIRmPmDrycooler3Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 19, 16),
    _AirIRmPmDrycooler3Runtime_Type()
)
airIRmPmDrycooler3Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler3Runtime.setStatus("mandatory")
_AirIRmPmDrycooler4_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler4 = _AirIRmPmDrycooler4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20)
)
_AirIRmPmDrycooler4ManOpEnable_Type = AirIRmActivityState
_AirIRmPmDrycooler4ManOpEnable_Object = MibScalar
airIRmPmDrycooler4ManOpEnable = _AirIRmPmDrycooler4ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 2),
    _AirIRmPmDrycooler4ManOpEnable_Type()
)
airIRmPmDrycooler4ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler4ManOpEnable.setStatus("mandatory")
_AirIRmPmDrycooler4Running_Type = AirIRmActivityState
_AirIRmPmDrycooler4Running_Object = MibScalar
airIRmPmDrycooler4Running = _AirIRmPmDrycooler4Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 3),
    _AirIRmPmDrycooler4Running_Type()
)
airIRmPmDrycooler4Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler4Running.setStatus("mandatory")
_AirIRmPmDrycooler4ManOpRunning_Type = AirIRmActivityState
_AirIRmPmDrycooler4ManOpRunning_Object = MibScalar
airIRmPmDrycooler4ManOpRunning = _AirIRmPmDrycooler4ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 5),
    _AirIRmPmDrycooler4ManOpRunning_Type()
)
airIRmPmDrycooler4ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler4ManOpRunning.setStatus("mandatory")
_AirIRmPmDrycooler4WinterStartTemp_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler4WinterStartTemp = _AirIRmPmDrycooler4WinterStartTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 9)
)
_AirIRmPmDrycooler4WinterStartTempC_Type = Integer32
_AirIRmPmDrycooler4WinterStartTempC_Object = MibScalar
airIRmPmDrycooler4WinterStartTempC = _AirIRmPmDrycooler4WinterStartTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 9, 1),
    _AirIRmPmDrycooler4WinterStartTempC_Type()
)
airIRmPmDrycooler4WinterStartTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler4WinterStartTempC.setStatus("mandatory")
_AirIRmPmDrycooler4WinterStartTempF_Type = Integer32
_AirIRmPmDrycooler4WinterStartTempF_Object = MibScalar
airIRmPmDrycooler4WinterStartTempF = _AirIRmPmDrycooler4WinterStartTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 9, 2),
    _AirIRmPmDrycooler4WinterStartTempF_Type()
)
airIRmPmDrycooler4WinterStartTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler4WinterStartTempF.setStatus("mandatory")
_AirIRmPmDrycooler4SummerStartTemp_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler4SummerStartTemp = _AirIRmPmDrycooler4SummerStartTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 10)
)
_AirIRmPmDrycooler4SummerStartTempC_Type = Integer32
_AirIRmPmDrycooler4SummerStartTempC_Object = MibScalar
airIRmPmDrycooler4SummerStartTempC = _AirIRmPmDrycooler4SummerStartTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 10, 1),
    _AirIRmPmDrycooler4SummerStartTempC_Type()
)
airIRmPmDrycooler4SummerStartTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler4SummerStartTempC.setStatus("mandatory")
_AirIRmPmDrycooler4SummerStartTempF_Type = Integer32
_AirIRmPmDrycooler4SummerStartTempF_Object = MibScalar
airIRmPmDrycooler4SummerStartTempF = _AirIRmPmDrycooler4SummerStartTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 10, 2),
    _AirIRmPmDrycooler4SummerStartTempF_Type()
)
airIRmPmDrycooler4SummerStartTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler4SummerStartTempF.setStatus("mandatory")
_AirIRmPmDrycooler4Hysteresis_ObjectIdentity = ObjectIdentity
airIRmPmDrycooler4Hysteresis = _AirIRmPmDrycooler4Hysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 11)
)
_AirIRmPmDrycooler4HysteresisK_Type = Integer32
_AirIRmPmDrycooler4HysteresisK_Object = MibScalar
airIRmPmDrycooler4HysteresisK = _AirIRmPmDrycooler4HysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 11, 1),
    _AirIRmPmDrycooler4HysteresisK_Type()
)
airIRmPmDrycooler4HysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler4HysteresisK.setStatus("mandatory")
_AirIRmPmDrycooler4HysteresisF_Type = Integer32
_AirIRmPmDrycooler4HysteresisF_Object = MibScalar
airIRmPmDrycooler4HysteresisF = _AirIRmPmDrycooler4HysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 11, 2),
    _AirIRmPmDrycooler4HysteresisF_Type()
)
airIRmPmDrycooler4HysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDrycooler4HysteresisF.setStatus("mandatory")
_AirIRmPmDrycooler4Runtime_Type = Integer32
_AirIRmPmDrycooler4Runtime_Object = MibScalar
airIRmPmDrycooler4Runtime = _AirIRmPmDrycooler4Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 20, 16),
    _AirIRmPmDrycooler4Runtime_Type()
)
airIRmPmDrycooler4Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler4Runtime.setStatus("mandatory")
_AirIRmPmPump1_ObjectIdentity = ObjectIdentity
airIRmPmPump1 = _AirIRmPmPump1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21)
)
_AirIRmPmPump1ManOpEnable_Type = AirIRmActivityState
_AirIRmPmPump1ManOpEnable_Object = MibScalar
airIRmPmPump1ManOpEnable = _AirIRmPmPump1ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 2),
    _AirIRmPmPump1ManOpEnable_Type()
)
airIRmPmPump1ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump1ManOpEnable.setStatus("mandatory")
_AirIRmPmPump1Running_Type = AirIRmActivityState
_AirIRmPmPump1Running_Object = MibScalar
airIRmPmPump1Running = _AirIRmPmPump1Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 3),
    _AirIRmPmPump1Running_Type()
)
airIRmPmPump1Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump1Running.setStatus("mandatory")
_AirIRmPmPump1ManOpRunning_Type = AirIRmActivityState
_AirIRmPmPump1ManOpRunning_Object = MibScalar
airIRmPmPump1ManOpRunning = _AirIRmPmPump1ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 6),
    _AirIRmPmPump1ManOpRunning_Type()
)
airIRmPmPump1ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump1ManOpRunning.setStatus("mandatory")
_AirIRmPmPump1StartTemperature_ObjectIdentity = ObjectIdentity
airIRmPmPump1StartTemperature = _AirIRmPmPump1StartTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 10)
)
_AirIRmPmPump1StartTemperatureK_Type = Integer32
_AirIRmPmPump1StartTemperatureK_Object = MibScalar
airIRmPmPump1StartTemperatureK = _AirIRmPmPump1StartTemperatureK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 10, 1),
    _AirIRmPmPump1StartTemperatureK_Type()
)
airIRmPmPump1StartTemperatureK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump1StartTemperatureK.setStatus("mandatory")
_AirIRmPmPump1StartTemperatureF_Type = Integer32
_AirIRmPmPump1StartTemperatureF_Object = MibScalar
airIRmPmPump1StartTemperatureF = _AirIRmPmPump1StartTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 10, 2),
    _AirIRmPmPump1StartTemperatureF_Type()
)
airIRmPmPump1StartTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump1StartTemperatureF.setStatus("mandatory")
_AirIRmPmPump1Hysteresis_ObjectIdentity = ObjectIdentity
airIRmPmPump1Hysteresis = _AirIRmPmPump1Hysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 11)
)
_AirIRmPmPump1HysteresisK_Type = Integer32
_AirIRmPmPump1HysteresisK_Object = MibScalar
airIRmPmPump1HysteresisK = _AirIRmPmPump1HysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 11, 1),
    _AirIRmPmPump1HysteresisK_Type()
)
airIRmPmPump1HysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump1HysteresisK.setStatus("mandatory")
_AirIRmPmPump1HysteresisF_Type = Integer32
_AirIRmPmPump1HysteresisF_Object = MibScalar
airIRmPmPump1HysteresisF = _AirIRmPmPump1HysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 11, 2),
    _AirIRmPmPump1HysteresisF_Type()
)
airIRmPmPump1HysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump1HysteresisF.setStatus("mandatory")
_AirIRmPmPump1LinearRange_ObjectIdentity = ObjectIdentity
airIRmPmPump1LinearRange = _AirIRmPmPump1LinearRange_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 12)
)
_AirIRmPmPump1LinearRangeK_Type = Integer32
_AirIRmPmPump1LinearRangeK_Object = MibScalar
airIRmPmPump1LinearRangeK = _AirIRmPmPump1LinearRangeK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 12, 1),
    _AirIRmPmPump1LinearRangeK_Type()
)
airIRmPmPump1LinearRangeK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump1LinearRangeK.setStatus("mandatory")
_AirIRmPmPump1LinearRangeF_Type = Integer32
_AirIRmPmPump1LinearRangeF_Object = MibScalar
airIRmPmPump1LinearRangeF = _AirIRmPmPump1LinearRangeF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 12, 2),
    _AirIRmPmPump1LinearRangeF_Type()
)
airIRmPmPump1LinearRangeF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump1LinearRangeF.setStatus("mandatory")
_AirIRmPmPump1PressureSetpoint_Type = Integer32
_AirIRmPmPump1PressureSetpoint_Object = MibScalar
airIRmPmPump1PressureSetpoint = _AirIRmPmPump1PressureSetpoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 13),
    _AirIRmPmPump1PressureSetpoint_Type()
)
airIRmPmPump1PressureSetpoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump1PressureSetpoint.setStatus("mandatory")
_AirIRmPmPump1Runtime_Type = Integer32
_AirIRmPmPump1Runtime_Object = MibScalar
airIRmPmPump1Runtime = _AirIRmPmPump1Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 21),
    _AirIRmPmPump1Runtime_Type()
)
airIRmPmPump1Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump1Runtime.setStatus("mandatory")
_AirIRmPmPump1Speed_Type = Integer32
_AirIRmPmPump1Speed_Object = MibScalar
airIRmPmPump1Speed = _AirIRmPmPump1Speed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 22),
    _AirIRmPmPump1Speed_Type()
)
airIRmPmPump1Speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump1Speed.setStatus("mandatory")
_AirIRmPmPump1ControlCycle_Type = Integer32
_AirIRmPmPump1ControlCycle_Object = MibScalar
airIRmPmPump1ControlCycle = _AirIRmPmPump1ControlCycle_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 28),
    _AirIRmPmPump1ControlCycle_Type()
)
airIRmPmPump1ControlCycle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump1ControlCycle.setStatus("mandatory")
_AirIRmPmPump1MaxAdjust_Type = Integer32
_AirIRmPmPump1MaxAdjust_Object = MibScalar
airIRmPmPump1MaxAdjust = _AirIRmPmPump1MaxAdjust_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 29),
    _AirIRmPmPump1MaxAdjust_Type()
)
airIRmPmPump1MaxAdjust.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump1MaxAdjust.setStatus("mandatory")
_AirIRmPmPump1ControlFactor_Type = Integer32
_AirIRmPmPump1ControlFactor_Object = MibScalar
airIRmPmPump1ControlFactor = _AirIRmPmPump1ControlFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 21, 30),
    _AirIRmPmPump1ControlFactor_Type()
)
airIRmPmPump1ControlFactor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump1ControlFactor.setStatus("mandatory")
_AirIRmPmPump2_ObjectIdentity = ObjectIdentity
airIRmPmPump2 = _AirIRmPmPump2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22)
)
_AirIRmPmPump2ManOpEnable_Type = AirIRmActivityState
_AirIRmPmPump2ManOpEnable_Object = MibScalar
airIRmPmPump2ManOpEnable = _AirIRmPmPump2ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 2),
    _AirIRmPmPump2ManOpEnable_Type()
)
airIRmPmPump2ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump2ManOpEnable.setStatus("mandatory")
_AirIRmPmPump2Running_Type = AirIRmActivityState
_AirIRmPmPump2Running_Object = MibScalar
airIRmPmPump2Running = _AirIRmPmPump2Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 3),
    _AirIRmPmPump2Running_Type()
)
airIRmPmPump2Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump2Running.setStatus("mandatory")
_AirIRmPmPump2ManOpRunning_Type = AirIRmActivityState
_AirIRmPmPump2ManOpRunning_Object = MibScalar
airIRmPmPump2ManOpRunning = _AirIRmPmPump2ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 6),
    _AirIRmPmPump2ManOpRunning_Type()
)
airIRmPmPump2ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump2ManOpRunning.setStatus("mandatory")
_AirIRmPmPump2StartTemperature_ObjectIdentity = ObjectIdentity
airIRmPmPump2StartTemperature = _AirIRmPmPump2StartTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 10)
)
_AirIRmPmPump2StartTemperatureK_Type = Integer32
_AirIRmPmPump2StartTemperatureK_Object = MibScalar
airIRmPmPump2StartTemperatureK = _AirIRmPmPump2StartTemperatureK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 10, 1),
    _AirIRmPmPump2StartTemperatureK_Type()
)
airIRmPmPump2StartTemperatureK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump2StartTemperatureK.setStatus("mandatory")
_AirIRmPmPump2StartTemperatureF_Type = Integer32
_AirIRmPmPump2StartTemperatureF_Object = MibScalar
airIRmPmPump2StartTemperatureF = _AirIRmPmPump2StartTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 10, 2),
    _AirIRmPmPump2StartTemperatureF_Type()
)
airIRmPmPump2StartTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump2StartTemperatureF.setStatus("mandatory")
_AirIRmPmPump2Hysteresis_ObjectIdentity = ObjectIdentity
airIRmPmPump2Hysteresis = _AirIRmPmPump2Hysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 11)
)
_AirIRmPmPump2HysteresisK_Type = Integer32
_AirIRmPmPump2HysteresisK_Object = MibScalar
airIRmPmPump2HysteresisK = _AirIRmPmPump2HysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 11, 1),
    _AirIRmPmPump2HysteresisK_Type()
)
airIRmPmPump2HysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump2HysteresisK.setStatus("mandatory")
_AirIRmPmPump2HysteresisF_Type = Integer32
_AirIRmPmPump2HysteresisF_Object = MibScalar
airIRmPmPump2HysteresisF = _AirIRmPmPump2HysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 11, 2),
    _AirIRmPmPump2HysteresisF_Type()
)
airIRmPmPump2HysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump2HysteresisF.setStatus("mandatory")
_AirIRmPmPump2LinearRange_ObjectIdentity = ObjectIdentity
airIRmPmPump2LinearRange = _AirIRmPmPump2LinearRange_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 12)
)
_AirIRmPmPump2LinearRangeK_Type = Integer32
_AirIRmPmPump2LinearRangeK_Object = MibScalar
airIRmPmPump2LinearRangeK = _AirIRmPmPump2LinearRangeK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 12, 1),
    _AirIRmPmPump2LinearRangeK_Type()
)
airIRmPmPump2LinearRangeK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump2LinearRangeK.setStatus("mandatory")
_AirIRmPmPump2LinearRangeF_Type = Integer32
_AirIRmPmPump2LinearRangeF_Object = MibScalar
airIRmPmPump2LinearRangeF = _AirIRmPmPump2LinearRangeF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 12, 2),
    _AirIRmPmPump2LinearRangeF_Type()
)
airIRmPmPump2LinearRangeF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump2LinearRangeF.setStatus("mandatory")
_AirIRmPmPump2PressureSetpoint_Type = Integer32
_AirIRmPmPump2PressureSetpoint_Object = MibScalar
airIRmPmPump2PressureSetpoint = _AirIRmPmPump2PressureSetpoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 13),
    _AirIRmPmPump2PressureSetpoint_Type()
)
airIRmPmPump2PressureSetpoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump2PressureSetpoint.setStatus("mandatory")
_AirIRmPmPump2Runtime_Type = Integer32
_AirIRmPmPump2Runtime_Object = MibScalar
airIRmPmPump2Runtime = _AirIRmPmPump2Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 21),
    _AirIRmPmPump2Runtime_Type()
)
airIRmPmPump2Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump2Runtime.setStatus("mandatory")
_AirIRmPmPump2Speed_Type = Integer32
_AirIRmPmPump2Speed_Object = MibScalar
airIRmPmPump2Speed = _AirIRmPmPump2Speed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 22),
    _AirIRmPmPump2Speed_Type()
)
airIRmPmPump2Speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump2Speed.setStatus("mandatory")
_AirIRmPmPump2ControlCycle_Type = Integer32
_AirIRmPmPump2ControlCycle_Object = MibScalar
airIRmPmPump2ControlCycle = _AirIRmPmPump2ControlCycle_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 28),
    _AirIRmPmPump2ControlCycle_Type()
)
airIRmPmPump2ControlCycle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump2ControlCycle.setStatus("mandatory")
_AirIRmPmPump2MaxAdjust_Type = Integer32
_AirIRmPmPump2MaxAdjust_Object = MibScalar
airIRmPmPump2MaxAdjust = _AirIRmPmPump2MaxAdjust_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 29),
    _AirIRmPmPump2MaxAdjust_Type()
)
airIRmPmPump2MaxAdjust.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump2MaxAdjust.setStatus("mandatory")
_AirIRmPmPump2ControlFactor_Type = Integer32
_AirIRmPmPump2ControlFactor_Object = MibScalar
airIRmPmPump2ControlFactor = _AirIRmPmPump2ControlFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 22, 30),
    _AirIRmPmPump2ControlFactor_Type()
)
airIRmPmPump2ControlFactor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump2ControlFactor.setStatus("mandatory")
_AirIRmPmPump3_ObjectIdentity = ObjectIdentity
airIRmPmPump3 = _AirIRmPmPump3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23)
)
_AirIRmPmPump3ManOpEnable_Type = AirIRmActivityState
_AirIRmPmPump3ManOpEnable_Object = MibScalar
airIRmPmPump3ManOpEnable = _AirIRmPmPump3ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 2),
    _AirIRmPmPump3ManOpEnable_Type()
)
airIRmPmPump3ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump3ManOpEnable.setStatus("mandatory")
_AirIRmPmPump3Running_Type = AirIRmActivityState
_AirIRmPmPump3Running_Object = MibScalar
airIRmPmPump3Running = _AirIRmPmPump3Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 3),
    _AirIRmPmPump3Running_Type()
)
airIRmPmPump3Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump3Running.setStatus("mandatory")
_AirIRmPmPump3ManOpRunning_Type = AirIRmActivityState
_AirIRmPmPump3ManOpRunning_Object = MibScalar
airIRmPmPump3ManOpRunning = _AirIRmPmPump3ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 6),
    _AirIRmPmPump3ManOpRunning_Type()
)
airIRmPmPump3ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump3ManOpRunning.setStatus("mandatory")
_AirIRmPmPump3StartTemperature_ObjectIdentity = ObjectIdentity
airIRmPmPump3StartTemperature = _AirIRmPmPump3StartTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 10)
)
_AirIRmPmPump3StartTemperatureK_Type = Integer32
_AirIRmPmPump3StartTemperatureK_Object = MibScalar
airIRmPmPump3StartTemperatureK = _AirIRmPmPump3StartTemperatureK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 10, 1),
    _AirIRmPmPump3StartTemperatureK_Type()
)
airIRmPmPump3StartTemperatureK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump3StartTemperatureK.setStatus("mandatory")
_AirIRmPmPump3StartTemperatureF_Type = Integer32
_AirIRmPmPump3StartTemperatureF_Object = MibScalar
airIRmPmPump3StartTemperatureF = _AirIRmPmPump3StartTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 10, 2),
    _AirIRmPmPump3StartTemperatureF_Type()
)
airIRmPmPump3StartTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump3StartTemperatureF.setStatus("mandatory")
_AirIRmPmPump3Hysteresis_ObjectIdentity = ObjectIdentity
airIRmPmPump3Hysteresis = _AirIRmPmPump3Hysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 11)
)
_AirIRmPmPump3HysteresisK_Type = Integer32
_AirIRmPmPump3HysteresisK_Object = MibScalar
airIRmPmPump3HysteresisK = _AirIRmPmPump3HysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 11, 1),
    _AirIRmPmPump3HysteresisK_Type()
)
airIRmPmPump3HysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump3HysteresisK.setStatus("mandatory")
_AirIRmPmPump3HysteresisF_Type = Integer32
_AirIRmPmPump3HysteresisF_Object = MibScalar
airIRmPmPump3HysteresisF = _AirIRmPmPump3HysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 11, 2),
    _AirIRmPmPump3HysteresisF_Type()
)
airIRmPmPump3HysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump3HysteresisF.setStatus("mandatory")
_AirIRmPmPump3LinearRange_ObjectIdentity = ObjectIdentity
airIRmPmPump3LinearRange = _AirIRmPmPump3LinearRange_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 12)
)
_AirIRmPmPump3LinearRangeK_Type = Integer32
_AirIRmPmPump3LinearRangeK_Object = MibScalar
airIRmPmPump3LinearRangeK = _AirIRmPmPump3LinearRangeK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 12, 1),
    _AirIRmPmPump3LinearRangeK_Type()
)
airIRmPmPump3LinearRangeK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump3LinearRangeK.setStatus("mandatory")
_AirIRmPmPump3LinearRangeF_Type = Integer32
_AirIRmPmPump3LinearRangeF_Object = MibScalar
airIRmPmPump3LinearRangeF = _AirIRmPmPump3LinearRangeF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 12, 2),
    _AirIRmPmPump3LinearRangeF_Type()
)
airIRmPmPump3LinearRangeF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump3LinearRangeF.setStatus("mandatory")
_AirIRmPmPump3PressureSetpoint_Type = Integer32
_AirIRmPmPump3PressureSetpoint_Object = MibScalar
airIRmPmPump3PressureSetpoint = _AirIRmPmPump3PressureSetpoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 13),
    _AirIRmPmPump3PressureSetpoint_Type()
)
airIRmPmPump3PressureSetpoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump3PressureSetpoint.setStatus("mandatory")
_AirIRmPmPump3Runtime_Type = Integer32
_AirIRmPmPump3Runtime_Object = MibScalar
airIRmPmPump3Runtime = _AirIRmPmPump3Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 21),
    _AirIRmPmPump3Runtime_Type()
)
airIRmPmPump3Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump3Runtime.setStatus("mandatory")
_AirIRmPmPump3Speed_Type = Integer32
_AirIRmPmPump3Speed_Object = MibScalar
airIRmPmPump3Speed = _AirIRmPmPump3Speed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 22),
    _AirIRmPmPump3Speed_Type()
)
airIRmPmPump3Speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump3Speed.setStatus("mandatory")
_AirIRmPmPump3ControlCycle_Type = Integer32
_AirIRmPmPump3ControlCycle_Object = MibScalar
airIRmPmPump3ControlCycle = _AirIRmPmPump3ControlCycle_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 28),
    _AirIRmPmPump3ControlCycle_Type()
)
airIRmPmPump3ControlCycle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump3ControlCycle.setStatus("mandatory")
_AirIRmPmPump3MaxAdjust_Type = Integer32
_AirIRmPmPump3MaxAdjust_Object = MibScalar
airIRmPmPump3MaxAdjust = _AirIRmPmPump3MaxAdjust_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 29),
    _AirIRmPmPump3MaxAdjust_Type()
)
airIRmPmPump3MaxAdjust.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump3MaxAdjust.setStatus("mandatory")
_AirIRmPmPump3ControlFactor_Type = Integer32
_AirIRmPmPump3ControlFactor_Object = MibScalar
airIRmPmPump3ControlFactor = _AirIRmPmPump3ControlFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 23, 30),
    _AirIRmPmPump3ControlFactor_Type()
)
airIRmPmPump3ControlFactor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump3ControlFactor.setStatus("mandatory")
_AirIRmPmPump4_ObjectIdentity = ObjectIdentity
airIRmPmPump4 = _AirIRmPmPump4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24)
)
_AirIRmPmPump4ManOpEnable_Type = AirIRmActivityState
_AirIRmPmPump4ManOpEnable_Object = MibScalar
airIRmPmPump4ManOpEnable = _AirIRmPmPump4ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 2),
    _AirIRmPmPump4ManOpEnable_Type()
)
airIRmPmPump4ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump4ManOpEnable.setStatus("mandatory")
_AirIRmPmPump4Running_Type = AirIRmActivityState
_AirIRmPmPump4Running_Object = MibScalar
airIRmPmPump4Running = _AirIRmPmPump4Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 3),
    _AirIRmPmPump4Running_Type()
)
airIRmPmPump4Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump4Running.setStatus("mandatory")
_AirIRmPmPump4ManOpRunning_Type = AirIRmActivityState
_AirIRmPmPump4ManOpRunning_Object = MibScalar
airIRmPmPump4ManOpRunning = _AirIRmPmPump4ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 6),
    _AirIRmPmPump4ManOpRunning_Type()
)
airIRmPmPump4ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump4ManOpRunning.setStatus("mandatory")
_AirIRmPmPump4StartTemperature_ObjectIdentity = ObjectIdentity
airIRmPmPump4StartTemperature = _AirIRmPmPump4StartTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 10)
)
_AirIRmPmPump4StartTemperatureK_Type = Integer32
_AirIRmPmPump4StartTemperatureK_Object = MibScalar
airIRmPmPump4StartTemperatureK = _AirIRmPmPump4StartTemperatureK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 10, 1),
    _AirIRmPmPump4StartTemperatureK_Type()
)
airIRmPmPump4StartTemperatureK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump4StartTemperatureK.setStatus("mandatory")
_AirIRmPmPump4StartTemperatureF_Type = Integer32
_AirIRmPmPump4StartTemperatureF_Object = MibScalar
airIRmPmPump4StartTemperatureF = _AirIRmPmPump4StartTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 10, 2),
    _AirIRmPmPump4StartTemperatureF_Type()
)
airIRmPmPump4StartTemperatureF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump4StartTemperatureF.setStatus("mandatory")
_AirIRmPmPump4Hysteresis_ObjectIdentity = ObjectIdentity
airIRmPmPump4Hysteresis = _AirIRmPmPump4Hysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 11)
)
_AirIRmPmPump4HysteresisK_Type = Integer32
_AirIRmPmPump4HysteresisK_Object = MibScalar
airIRmPmPump4HysteresisK = _AirIRmPmPump4HysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 11, 1),
    _AirIRmPmPump4HysteresisK_Type()
)
airIRmPmPump4HysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump4HysteresisK.setStatus("mandatory")
_AirIRmPmPump4HysteresisF_Type = Integer32
_AirIRmPmPump4HysteresisF_Object = MibScalar
airIRmPmPump4HysteresisF = _AirIRmPmPump4HysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 11, 2),
    _AirIRmPmPump4HysteresisF_Type()
)
airIRmPmPump4HysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump4HysteresisF.setStatus("mandatory")
_AirIRmPmPump4LinearRange_ObjectIdentity = ObjectIdentity
airIRmPmPump4LinearRange = _AirIRmPmPump4LinearRange_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 12)
)
_AirIRmPmPump4LinearRangeK_Type = Integer32
_AirIRmPmPump4LinearRangeK_Object = MibScalar
airIRmPmPump4LinearRangeK = _AirIRmPmPump4LinearRangeK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 12, 1),
    _AirIRmPmPump4LinearRangeK_Type()
)
airIRmPmPump4LinearRangeK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump4LinearRangeK.setStatus("mandatory")
_AirIRmPmPump4LinearRangeF_Type = Integer32
_AirIRmPmPump4LinearRangeF_Object = MibScalar
airIRmPmPump4LinearRangeF = _AirIRmPmPump4LinearRangeF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 12, 2),
    _AirIRmPmPump4LinearRangeF_Type()
)
airIRmPmPump4LinearRangeF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump4LinearRangeF.setStatus("mandatory")
_AirIRmPmPump4PressureSetpoint_Type = Integer32
_AirIRmPmPump4PressureSetpoint_Object = MibScalar
airIRmPmPump4PressureSetpoint = _AirIRmPmPump4PressureSetpoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 13),
    _AirIRmPmPump4PressureSetpoint_Type()
)
airIRmPmPump4PressureSetpoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump4PressureSetpoint.setStatus("mandatory")
_AirIRmPmPump4Runtime_Type = Integer32
_AirIRmPmPump4Runtime_Object = MibScalar
airIRmPmPump4Runtime = _AirIRmPmPump4Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 21),
    _AirIRmPmPump4Runtime_Type()
)
airIRmPmPump4Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump4Runtime.setStatus("mandatory")
_AirIRmPmPump4Speed_Type = Integer32
_AirIRmPmPump4Speed_Object = MibScalar
airIRmPmPump4Speed = _AirIRmPmPump4Speed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 22),
    _AirIRmPmPump4Speed_Type()
)
airIRmPmPump4Speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump4Speed.setStatus("mandatory")
_AirIRmPmPump4ControlCycle_Type = Integer32
_AirIRmPmPump4ControlCycle_Object = MibScalar
airIRmPmPump4ControlCycle = _AirIRmPmPump4ControlCycle_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 28),
    _AirIRmPmPump4ControlCycle_Type()
)
airIRmPmPump4ControlCycle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump4ControlCycle.setStatus("mandatory")
_AirIRmPmPump4MaxAdjust_Type = Integer32
_AirIRmPmPump4MaxAdjust_Object = MibScalar
airIRmPmPump4MaxAdjust = _AirIRmPmPump4MaxAdjust_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 29),
    _AirIRmPmPump4MaxAdjust_Type()
)
airIRmPmPump4MaxAdjust.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump4MaxAdjust.setStatus("mandatory")
_AirIRmPmPump4ControlFactor_Type = Integer32
_AirIRmPmPump4ControlFactor_Object = MibScalar
airIRmPmPump4ControlFactor = _AirIRmPmPump4ControlFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 24, 30),
    _AirIRmPmPump4ControlFactor_Type()
)
airIRmPmPump4ControlFactor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPump4ControlFactor.setStatus("mandatory")
_AirIRmPmHotgasHeating_ObjectIdentity = ObjectIdentity
airIRmPmHotgasHeating = _AirIRmPmHotgasHeating_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 25)
)
_AirIRmPmHotgasHeatRunning_Type = AirIRmControlState
_AirIRmPmHotgasHeatRunning_Object = MibScalar
airIRmPmHotgasHeatRunning = _AirIRmPmHotgasHeatRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 25, 3),
    _AirIRmPmHotgasHeatRunning_Type()
)
airIRmPmHotgasHeatRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHotgasHeatRunning.setStatus("mandatory")
_AirIRmPmPWWHeating_ObjectIdentity = ObjectIdentity
airIRmPmPWWHeating = _AirIRmPmPWWHeating_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26)
)
_AirIRmPmPWWHeatingManOpEnable_Type = AirIRmActivityState
_AirIRmPmPWWHeatingManOpEnable_Object = MibScalar
airIRmPmPWWHeatingManOpEnable = _AirIRmPmPWWHeatingManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 2),
    _AirIRmPmPWWHeatingManOpEnable_Type()
)
airIRmPmPWWHeatingManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPWWHeatingManOpEnable.setStatus("mandatory")
_AirIRmPmPWWHeatingRunning_Type = AirIRmActivityState
_AirIRmPmPWWHeatingRunning_Object = MibScalar
airIRmPmPWWHeatingRunning = _AirIRmPmPWWHeatingRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 3),
    _AirIRmPmPWWHeatingRunning_Type()
)
airIRmPmPWWHeatingRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPWWHeatingRunning.setStatus("mandatory")
_AirIRmPmPWWHeatingManOpRunning_Type = AirIRmActivityState
_AirIRmPmPWWHeatingManOpRunning_Object = MibScalar
airIRmPmPWWHeatingManOpRunning = _AirIRmPmPWWHeatingManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 4),
    _AirIRmPmPWWHeatingManOpRunning_Type()
)
airIRmPmPWWHeatingManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPWWHeatingManOpRunning.setStatus("mandatory")


class _AirIRmPmPWWHeatingType_Type(Integer32):
    """Custom type airIRmPmPWWHeatingType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("direct", 1),
          ("undefined", 2))
    )


_AirIRmPmPWWHeatingType_Type.__name__ = "Integer32"
_AirIRmPmPWWHeatingType_Object = MibScalar
airIRmPmPWWHeatingType = _AirIRmPmPWWHeatingType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 9),
    _AirIRmPmPWWHeatingType_Type()
)
airIRmPmPWWHeatingType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPWWHeatingType.setStatus("mandatory")
_AirIRmPmPWWHeatingStartTemp_ObjectIdentity = ObjectIdentity
airIRmPmPWWHeatingStartTemp = _AirIRmPmPWWHeatingStartTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 10)
)
_AirIRmPmPWWHeatingStartTempK_Type = Integer32
_AirIRmPmPWWHeatingStartTempK_Object = MibScalar
airIRmPmPWWHeatingStartTempK = _AirIRmPmPWWHeatingStartTempK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 10, 1),
    _AirIRmPmPWWHeatingStartTempK_Type()
)
airIRmPmPWWHeatingStartTempK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPWWHeatingStartTempK.setStatus("mandatory")
_AirIRmPmPWWHeatingStartTempF_Type = Integer32
_AirIRmPmPWWHeatingStartTempF_Object = MibScalar
airIRmPmPWWHeatingStartTempF = _AirIRmPmPWWHeatingStartTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 10, 2),
    _AirIRmPmPWWHeatingStartTempF_Type()
)
airIRmPmPWWHeatingStartTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPWWHeatingStartTempF.setStatus("mandatory")
_AirIRmPmPWWHeatingHysteresis_ObjectIdentity = ObjectIdentity
airIRmPmPWWHeatingHysteresis = _AirIRmPmPWWHeatingHysteresis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 12)
)
_AirIRmPmPWWHeatingHysteresisK_Type = Integer32
_AirIRmPmPWWHeatingHysteresisK_Object = MibScalar
airIRmPmPWWHeatingHysteresisK = _AirIRmPmPWWHeatingHysteresisK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 12, 1),
    _AirIRmPmPWWHeatingHysteresisK_Type()
)
airIRmPmPWWHeatingHysteresisK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPWWHeatingHysteresisK.setStatus("mandatory")
_AirIRmPmPWWHeatingHysteresisF_Type = Integer32
_AirIRmPmPWWHeatingHysteresisF_Object = MibScalar
airIRmPmPWWHeatingHysteresisF = _AirIRmPmPWWHeatingHysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 12, 2),
    _AirIRmPmPWWHeatingHysteresisF_Type()
)
airIRmPmPWWHeatingHysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPWWHeatingHysteresisF.setStatus("mandatory")
_AirIRmPmPWWHeatingLinearRange_ObjectIdentity = ObjectIdentity
airIRmPmPWWHeatingLinearRange = _AirIRmPmPWWHeatingLinearRange_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 13)
)
_AirIRmPmPWWHeatingLinearRangeK_Type = Integer32
_AirIRmPmPWWHeatingLinearRangeK_Object = MibScalar
airIRmPmPWWHeatingLinearRangeK = _AirIRmPmPWWHeatingLinearRangeK_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 13, 1),
    _AirIRmPmPWWHeatingLinearRangeK_Type()
)
airIRmPmPWWHeatingLinearRangeK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPWWHeatingLinearRangeK.setStatus("mandatory")
_AirIRmPmPWWHeatingLinearRangeF_Type = Integer32
_AirIRmPmPWWHeatingLinearRangeF_Object = MibScalar
airIRmPmPWWHeatingLinearRangeF = _AirIRmPmPWWHeatingLinearRangeF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 13, 2),
    _AirIRmPmPWWHeatingLinearRangeF_Type()
)
airIRmPmPWWHeatingLinearRangeF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPWWHeatingLinearRangeF.setStatus("mandatory")
_AirIRmPmPWWHeatingCurrentValue_Type = Integer32
_AirIRmPmPWWHeatingCurrentValue_Object = MibScalar
airIRmPmPWWHeatingCurrentValue = _AirIRmPmPWWHeatingCurrentValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 16),
    _AirIRmPmPWWHeatingCurrentValue_Type()
)
airIRmPmPWWHeatingCurrentValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPWWHeatingCurrentValue.setStatus("mandatory")
_AirIRmPmPWWHeatingManOpValue_Type = Integer32
_AirIRmPmPWWHeatingManOpValue_Object = MibScalar
airIRmPmPWWHeatingManOpValue = _AirIRmPmPWWHeatingManOpValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 26, 17),
    _AirIRmPmPWWHeatingManOpValue_Type()
)
airIRmPmPWWHeatingManOpValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmPWWHeatingManOpValue.setStatus("mandatory")
_AirIRmPmHumidifier1_ObjectIdentity = ObjectIdentity
airIRmPmHumidifier1 = _AirIRmPmHumidifier1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27)
)
_AirIRmPmHumidifier1ManOpEnable_Type = AirIRmActivityState
_AirIRmPmHumidifier1ManOpEnable_Object = MibScalar
airIRmPmHumidifier1ManOpEnable = _AirIRmPmHumidifier1ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 2),
    _AirIRmPmHumidifier1ManOpEnable_Type()
)
airIRmPmHumidifier1ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1ManOpEnable.setStatus("mandatory")
_AirIRmPmHumidifier1Running_Type = AirIRmControlState
_AirIRmPmHumidifier1Running_Object = MibScalar
airIRmPmHumidifier1Running = _AirIRmPmHumidifier1Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 3),
    _AirIRmPmHumidifier1Running_Type()
)
airIRmPmHumidifier1Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1Running.setStatus("mandatory")
_AirIRmPmHumidifier1ManOpRunning_Type = AirIRmActivityState
_AirIRmPmHumidifier1ManOpRunning_Object = MibScalar
airIRmPmHumidifier1ManOpRunning = _AirIRmPmHumidifier1ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 5),
    _AirIRmPmHumidifier1ManOpRunning_Type()
)
airIRmPmHumidifier1ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1ManOpRunning.setStatus("mandatory")


class _AirIRmPmHumidifier1Type_Type(Integer32):
    """Custom type airIRmPmHumidifier1Type based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("direct", 1),
          ("proportional", 2))
    )


_AirIRmPmHumidifier1Type_Type.__name__ = "Integer32"
_AirIRmPmHumidifier1Type_Object = MibScalar
airIRmPmHumidifier1Type = _AirIRmPmHumidifier1Type_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 17),
    _AirIRmPmHumidifier1Type_Type()
)
airIRmPmHumidifier1Type.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1Type.setStatus("mandatory")
_AirIRmPmHumidifier1StartHumidity_Type = Integer32
_AirIRmPmHumidifier1StartHumidity_Object = MibScalar
airIRmPmHumidifier1StartHumidity = _AirIRmPmHumidifier1StartHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 18),
    _AirIRmPmHumidifier1StartHumidity_Type()
)
airIRmPmHumidifier1StartHumidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1StartHumidity.setStatus("mandatory")
_AirIRmPmHumidifier1Hysteresis_Type = Integer32
_AirIRmPmHumidifier1Hysteresis_Object = MibScalar
airIRmPmHumidifier1Hysteresis = _AirIRmPmHumidifier1Hysteresis_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 20),
    _AirIRmPmHumidifier1Hysteresis_Type()
)
airIRmPmHumidifier1Hysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1Hysteresis.setStatus("mandatory")
_AirIRmPmHumidifier1LinearRange_Type = Integer32
_AirIRmPmHumidifier1LinearRange_Object = MibScalar
airIRmPmHumidifier1LinearRange = _AirIRmPmHumidifier1LinearRange_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 21),
    _AirIRmPmHumidifier1LinearRange_Type()
)
airIRmPmHumidifier1LinearRange.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1LinearRange.setStatus("mandatory")
_AirIRmPmHumidifier1Runtime_Type = Integer32
_AirIRmPmHumidifier1Runtime_Object = MibScalar
airIRmPmHumidifier1Runtime = _AirIRmPmHumidifier1Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 27),
    _AirIRmPmHumidifier1Runtime_Type()
)
airIRmPmHumidifier1Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1Runtime.setStatus("mandatory")
_AirIRmPmHumidifier1CurrentValue_Type = Integer32
_AirIRmPmHumidifier1CurrentValue_Object = MibScalar
airIRmPmHumidifier1CurrentValue = _AirIRmPmHumidifier1CurrentValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 28),
    _AirIRmPmHumidifier1CurrentValue_Type()
)
airIRmPmHumidifier1CurrentValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1CurrentValue.setStatus("mandatory")
_AirIRmPmHumidifier1ManOpValue_Type = Integer32
_AirIRmPmHumidifier1ManOpValue_Object = MibScalar
airIRmPmHumidifier1ManOpValue = _AirIRmPmHumidifier1ManOpValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 27, 29),
    _AirIRmPmHumidifier1ManOpValue_Type()
)
airIRmPmHumidifier1ManOpValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1ManOpValue.setStatus("mandatory")
_AirIRmPmHumidifier2_ObjectIdentity = ObjectIdentity
airIRmPmHumidifier2 = _AirIRmPmHumidifier2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28)
)
_AirIRmPmHumidifier2ManOpEnable_Type = AirIRmActivityState
_AirIRmPmHumidifier2ManOpEnable_Object = MibScalar
airIRmPmHumidifier2ManOpEnable = _AirIRmPmHumidifier2ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 2),
    _AirIRmPmHumidifier2ManOpEnable_Type()
)
airIRmPmHumidifier2ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2ManOpEnable.setStatus("mandatory")
_AirIRmPmHumidifier2Running_Type = AirIRmControlState
_AirIRmPmHumidifier2Running_Object = MibScalar
airIRmPmHumidifier2Running = _AirIRmPmHumidifier2Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 3),
    _AirIRmPmHumidifier2Running_Type()
)
airIRmPmHumidifier2Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2Running.setStatus("mandatory")
_AirIRmPmHumidifier2ManOpRunning_Type = AirIRmActivityState
_AirIRmPmHumidifier2ManOpRunning_Object = MibScalar
airIRmPmHumidifier2ManOpRunning = _AirIRmPmHumidifier2ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 5),
    _AirIRmPmHumidifier2ManOpRunning_Type()
)
airIRmPmHumidifier2ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2ManOpRunning.setStatus("mandatory")


class _AirIRmPmHumidifier2Type_Type(Integer32):
    """Custom type airIRmPmHumidifier2Type based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("direct", 1),
          ("proportional", 2))
    )


_AirIRmPmHumidifier2Type_Type.__name__ = "Integer32"
_AirIRmPmHumidifier2Type_Object = MibScalar
airIRmPmHumidifier2Type = _AirIRmPmHumidifier2Type_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 17),
    _AirIRmPmHumidifier2Type_Type()
)
airIRmPmHumidifier2Type.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2Type.setStatus("mandatory")
_AirIRmPmHumidifier2StartHumidity_Type = Integer32
_AirIRmPmHumidifier2StartHumidity_Object = MibScalar
airIRmPmHumidifier2StartHumidity = _AirIRmPmHumidifier2StartHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 18),
    _AirIRmPmHumidifier2StartHumidity_Type()
)
airIRmPmHumidifier2StartHumidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2StartHumidity.setStatus("mandatory")
_AirIRmPmHumidifier2Hysteresis_Type = Integer32
_AirIRmPmHumidifier2Hysteresis_Object = MibScalar
airIRmPmHumidifier2Hysteresis = _AirIRmPmHumidifier2Hysteresis_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 20),
    _AirIRmPmHumidifier2Hysteresis_Type()
)
airIRmPmHumidifier2Hysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2Hysteresis.setStatus("mandatory")
_AirIRmPmHumidifier2LinearRange_Type = Integer32
_AirIRmPmHumidifier2LinearRange_Object = MibScalar
airIRmPmHumidifier2LinearRange = _AirIRmPmHumidifier2LinearRange_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 21),
    _AirIRmPmHumidifier2LinearRange_Type()
)
airIRmPmHumidifier2LinearRange.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2LinearRange.setStatus("mandatory")
_AirIRmPmHumidifier2Runtime_Type = Integer32
_AirIRmPmHumidifier2Runtime_Object = MibScalar
airIRmPmHumidifier2Runtime = _AirIRmPmHumidifier2Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 27),
    _AirIRmPmHumidifier2Runtime_Type()
)
airIRmPmHumidifier2Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2Runtime.setStatus("mandatory")
_AirIRmPmHumidifier2CurrentValue_Type = Integer32
_AirIRmPmHumidifier2CurrentValue_Object = MibScalar
airIRmPmHumidifier2CurrentValue = _AirIRmPmHumidifier2CurrentValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 28),
    _AirIRmPmHumidifier2CurrentValue_Type()
)
airIRmPmHumidifier2CurrentValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2CurrentValue.setStatus("mandatory")
_AirIRmPmHumidifier2ManOpValue_Type = Integer32
_AirIRmPmHumidifier2ManOpValue_Object = MibScalar
airIRmPmHumidifier2ManOpValue = _AirIRmPmHumidifier2ManOpValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 28, 29),
    _AirIRmPmHumidifier2ManOpValue_Type()
)
airIRmPmHumidifier2ManOpValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2ManOpValue.setStatus("mandatory")
_AirIRmPmDehumidification_ObjectIdentity = ObjectIdentity
airIRmPmDehumidification = _AirIRmPmDehumidification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31)
)
_AirIRmPmDehumidificManOpEnable_Type = AirIRmActivityState
_AirIRmPmDehumidificManOpEnable_Object = MibScalar
airIRmPmDehumidificManOpEnable = _AirIRmPmDehumidificManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 2),
    _AirIRmPmDehumidificManOpEnable_Type()
)
airIRmPmDehumidificManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDehumidificManOpEnable.setStatus("mandatory")
_AirIRmPmDehumidificRunning_Type = AirIRmControlState
_AirIRmPmDehumidificRunning_Object = MibScalar
airIRmPmDehumidificRunning = _AirIRmPmDehumidificRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 3),
    _AirIRmPmDehumidificRunning_Type()
)
airIRmPmDehumidificRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDehumidificRunning.setStatus("mandatory")
_AirIRmPmDehumidificManOpRunning_Type = AirIRmActivityState
_AirIRmPmDehumidificManOpRunning_Object = MibScalar
airIRmPmDehumidificManOpRunning = _AirIRmPmDehumidificManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 5),
    _AirIRmPmDehumidificManOpRunning_Type()
)
airIRmPmDehumidificManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDehumidificManOpRunning.setStatus("mandatory")
_AirIRmPmDehumidificStartHumidity_Type = Integer32
_AirIRmPmDehumidificStartHumidity_Object = MibScalar
airIRmPmDehumidificStartHumidity = _AirIRmPmDehumidificStartHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 10),
    _AirIRmPmDehumidificStartHumidity_Type()
)
airIRmPmDehumidificStartHumidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDehumidificStartHumidity.setStatus("mandatory")
_AirIRmPmDehumidificHysteresis_Type = Integer32
_AirIRmPmDehumidificHysteresis_Object = MibScalar
airIRmPmDehumidificHysteresis = _AirIRmPmDehumidificHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 12),
    _AirIRmPmDehumidificHysteresis_Type()
)
airIRmPmDehumidificHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDehumidificHysteresis.setStatus("mandatory")
_AirIRmPmDehumidificMinWaterTemp_ObjectIdentity = ObjectIdentity
airIRmPmDehumidificMinWaterTemp = _AirIRmPmDehumidificMinWaterTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 18)
)
_AirIRmPmDehumidificMinWaterTempC_Type = Integer32
_AirIRmPmDehumidificMinWaterTempC_Object = MibScalar
airIRmPmDehumidificMinWaterTempC = _AirIRmPmDehumidificMinWaterTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 18, 1),
    _AirIRmPmDehumidificMinWaterTempC_Type()
)
airIRmPmDehumidificMinWaterTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDehumidificMinWaterTempC.setStatus("mandatory")
_AirIRmPmDehumidificMinWaterTempF_Type = Integer32
_AirIRmPmDehumidificMinWaterTempF_Object = MibScalar
airIRmPmDehumidificMinWaterTempF = _AirIRmPmDehumidificMinWaterTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 18, 2),
    _AirIRmPmDehumidificMinWaterTempF_Type()
)
airIRmPmDehumidificMinWaterTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDehumidificMinWaterTempF.setStatus("mandatory")
_AirIRmPmDehumidificMaxWaterTemp_ObjectIdentity = ObjectIdentity
airIRmPmDehumidificMaxWaterTemp = _AirIRmPmDehumidificMaxWaterTemp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 19)
)
_AirIRmPmDehumidificMaxWaterTempC_Type = Integer32
_AirIRmPmDehumidificMaxWaterTempC_Object = MibScalar
airIRmPmDehumidificMaxWaterTempC = _AirIRmPmDehumidificMaxWaterTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 19, 1),
    _AirIRmPmDehumidificMaxWaterTempC_Type()
)
airIRmPmDehumidificMaxWaterTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDehumidificMaxWaterTempC.setStatus("mandatory")
_AirIRmPmDehumidificMaxWaterTempF_Type = Integer32
_AirIRmPmDehumidificMaxWaterTempF_Object = MibScalar
airIRmPmDehumidificMaxWaterTempF = _AirIRmPmDehumidificMaxWaterTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 19, 2),
    _AirIRmPmDehumidificMaxWaterTempF_Type()
)
airIRmPmDehumidificMaxWaterTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDehumidificMaxWaterTempF.setStatus("mandatory")
_AirIRmPmDehumidificRuntime_Type = Integer32
_AirIRmPmDehumidificRuntime_Object = MibScalar
airIRmPmDehumidificRuntime = _AirIRmPmDehumidificRuntime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 31, 21),
    _AirIRmPmDehumidificRuntime_Type()
)
airIRmPmDehumidificRuntime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRmPmDehumidificRuntime.setStatus("mandatory")
_AirIRmPmFan1_ObjectIdentity = ObjectIdentity
airIRmPmFan1 = _AirIRmPmFan1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32)
)
_AirIRmPmFan1ManOpEnable_Type = AirIRmActivityState
_AirIRmPmFan1ManOpEnable_Object = MibScalar
airIRmPmFan1ManOpEnable = _AirIRmPmFan1ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 2),
    _AirIRmPmFan1ManOpEnable_Type()
)
airIRmPmFan1ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan1ManOpEnable.setStatus("mandatory")
_AirIRmPmFan1Running_Type = AirIRmActivityState
_AirIRmPmFan1Running_Object = MibScalar
airIRmPmFan1Running = _AirIRmPmFan1Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 3),
    _AirIRmPmFan1Running_Type()
)
airIRmPmFan1Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan1Running.setStatus("mandatory")
_AirIRmPmFan1ManOpRunning_Type = AirIRmActivityState
_AirIRmPmFan1ManOpRunning_Object = MibScalar
airIRmPmFan1ManOpRunning = _AirIRmPmFan1ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 6),
    _AirIRmPmFan1ManOpRunning_Type()
)
airIRmPmFan1ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan1ManOpRunning.setStatus("mandatory")


class _AirIRmPmFan1Type_Type(Integer32):
    """Custom type airIRmPmFan1Type based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("direct", 1),
          ("proportional", 2))
    )


_AirIRmPmFan1Type_Type.__name__ = "Integer32"
_AirIRmPmFan1Type_Object = MibScalar
airIRmPmFan1Type = _AirIRmPmFan1Type_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 9),
    _AirIRmPmFan1Type_Type()
)
airIRmPmFan1Type.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan1Type.setStatus("mandatory")
_AirIRmPmFan1Runtime_Type = Integer32
_AirIRmPmFan1Runtime_Object = MibScalar
airIRmPmFan1Runtime = _AirIRmPmFan1Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 32),
    _AirIRmPmFan1Runtime_Type()
)
airIRmPmFan1Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan1Runtime.setStatus("mandatory")
_AirIRmPmFan1Speed_Type = Integer32
_AirIRmPmFan1Speed_Object = MibScalar
airIRmPmFan1Speed = _AirIRmPmFan1Speed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 33),
    _AirIRmPmFan1Speed_Type()
)
airIRmPmFan1Speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan1Speed.setStatus("mandatory")
_AirIRmPmFan1ManOpSpeed_Type = Integer32
_AirIRmPmFan1ManOpSpeed_Object = MibScalar
airIRmPmFan1ManOpSpeed = _AirIRmPmFan1ManOpSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 32, 34),
    _AirIRmPmFan1ManOpSpeed_Type()
)
airIRmPmFan1ManOpSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan1ManOpSpeed.setStatus("mandatory")
_AirIRmPmFan2_ObjectIdentity = ObjectIdentity
airIRmPmFan2 = _AirIRmPmFan2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33)
)
_AirIRmPmFan2ManOpEnable_Type = AirIRmActivityState
_AirIRmPmFan2ManOpEnable_Object = MibScalar
airIRmPmFan2ManOpEnable = _AirIRmPmFan2ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 2),
    _AirIRmPmFan2ManOpEnable_Type()
)
airIRmPmFan2ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan2ManOpEnable.setStatus("mandatory")
_AirIRmPmFan2Running_Type = AirIRmActivityState
_AirIRmPmFan2Running_Object = MibScalar
airIRmPmFan2Running = _AirIRmPmFan2Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 3),
    _AirIRmPmFan2Running_Type()
)
airIRmPmFan2Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan2Running.setStatus("mandatory")
_AirIRmPmFan2ManOpRunning_Type = AirIRmActivityState
_AirIRmPmFan2ManOpRunning_Object = MibScalar
airIRmPmFan2ManOpRunning = _AirIRmPmFan2ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 6),
    _AirIRmPmFan2ManOpRunning_Type()
)
airIRmPmFan2ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan2ManOpRunning.setStatus("mandatory")


class _AirIRmPmFan2Type_Type(Integer32):
    """Custom type airIRmPmFan2Type based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("direct", 1),
          ("proportional", 2))
    )


_AirIRmPmFan2Type_Type.__name__ = "Integer32"
_AirIRmPmFan2Type_Object = MibScalar
airIRmPmFan2Type = _AirIRmPmFan2Type_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 9),
    _AirIRmPmFan2Type_Type()
)
airIRmPmFan2Type.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan2Type.setStatus("mandatory")
_AirIRmPmFan2Runtime_Type = Integer32
_AirIRmPmFan2Runtime_Object = MibScalar
airIRmPmFan2Runtime = _AirIRmPmFan2Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 32),
    _AirIRmPmFan2Runtime_Type()
)
airIRmPmFan2Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan2Runtime.setStatus("mandatory")
_AirIRmPmFan2Speed_Type = Integer32
_AirIRmPmFan2Speed_Object = MibScalar
airIRmPmFan2Speed = _AirIRmPmFan2Speed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 33),
    _AirIRmPmFan2Speed_Type()
)
airIRmPmFan2Speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan2Speed.setStatus("mandatory")
_AirIRmPmFan2ManOpSpeed_Type = Integer32
_AirIRmPmFan2ManOpSpeed_Object = MibScalar
airIRmPmFan2ManOpSpeed = _AirIRmPmFan2ManOpSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 33, 34),
    _AirIRmPmFan2ManOpSpeed_Type()
)
airIRmPmFan2ManOpSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan2ManOpSpeed.setStatus("mandatory")
_AirIRmPmFan3_ObjectIdentity = ObjectIdentity
airIRmPmFan3 = _AirIRmPmFan3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34)
)
_AirIRmPmFan3ManOpEnable_Type = AirIRmActivityState
_AirIRmPmFan3ManOpEnable_Object = MibScalar
airIRmPmFan3ManOpEnable = _AirIRmPmFan3ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 2),
    _AirIRmPmFan3ManOpEnable_Type()
)
airIRmPmFan3ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan3ManOpEnable.setStatus("mandatory")
_AirIRmPmFan3Running_Type = AirIRmActivityState
_AirIRmPmFan3Running_Object = MibScalar
airIRmPmFan3Running = _AirIRmPmFan3Running_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 3),
    _AirIRmPmFan3Running_Type()
)
airIRmPmFan3Running.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan3Running.setStatus("mandatory")
_AirIRmPmFan3ManOpRunning_Type = AirIRmActivityState
_AirIRmPmFan3ManOpRunning_Object = MibScalar
airIRmPmFan3ManOpRunning = _AirIRmPmFan3ManOpRunning_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 6),
    _AirIRmPmFan3ManOpRunning_Type()
)
airIRmPmFan3ManOpRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan3ManOpRunning.setStatus("mandatory")


class _AirIRmPmFan3Type_Type(Integer32):
    """Custom type airIRmPmFan3Type based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("direct", 1),
          ("proportional", 2))
    )


_AirIRmPmFan3Type_Type.__name__ = "Integer32"
_AirIRmPmFan3Type_Object = MibScalar
airIRmPmFan3Type = _AirIRmPmFan3Type_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 9),
    _AirIRmPmFan3Type_Type()
)
airIRmPmFan3Type.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan3Type.setStatus("mandatory")
_AirIRmPmFan3Runtime_Type = Integer32
_AirIRmPmFan3Runtime_Object = MibScalar
airIRmPmFan3Runtime = _AirIRmPmFan3Runtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 32),
    _AirIRmPmFan3Runtime_Type()
)
airIRmPmFan3Runtime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan3Runtime.setStatus("mandatory")
_AirIRmPmFan3Speed_Type = Integer32
_AirIRmPmFan3Speed_Object = MibScalar
airIRmPmFan3Speed = _AirIRmPmFan3Speed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 33),
    _AirIRmPmFan3Speed_Type()
)
airIRmPmFan3Speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan3Speed.setStatus("mandatory")
_AirIRmPmFan3ManOpSpeed_Type = Integer32
_AirIRmPmFan3ManOpSpeed_Object = MibScalar
airIRmPmFan3ManOpSpeed = _AirIRmPmFan3ManOpSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 34, 34),
    _AirIRmPmFan3ManOpSpeed_Type()
)
airIRmPmFan3ManOpSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan3ManOpSpeed.setStatus("mandatory")
_AirIRmPmLouver1_ObjectIdentity = ObjectIdentity
airIRmPmLouver1 = _AirIRmPmLouver1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35)
)
_AirIRmPmLouver1ManOpEnable_Type = AirIRmActivityState
_AirIRmPmLouver1ManOpEnable_Object = MibScalar
airIRmPmLouver1ManOpEnable = _AirIRmPmLouver1ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35, 2),
    _AirIRmPmLouver1ManOpEnable_Type()
)
airIRmPmLouver1ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLouver1ManOpEnable.setStatus("mandatory")


class _AirIRmPmLouver1Position_Type(Integer32):
    """Custom type airIRmPmLouver1Position based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 1),
          ("open", 2))
    )


_AirIRmPmLouver1Position_Type.__name__ = "Integer32"
_AirIRmPmLouver1Position_Object = MibScalar
airIRmPmLouver1Position = _AirIRmPmLouver1Position_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35, 3),
    _AirIRmPmLouver1Position_Type()
)
airIRmPmLouver1Position.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLouver1Position.setStatus("mandatory")


class _AirIRmPmLouver1ManOpPosition_Type(Integer32):
    """Custom type airIRmPmLouver1ManOpPosition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 1),
          ("open", 2))
    )


_AirIRmPmLouver1ManOpPosition_Type.__name__ = "Integer32"
_AirIRmPmLouver1ManOpPosition_Object = MibScalar
airIRmPmLouver1ManOpPosition = _AirIRmPmLouver1ManOpPosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 35, 4),
    _AirIRmPmLouver1ManOpPosition_Type()
)
airIRmPmLouver1ManOpPosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLouver1ManOpPosition.setStatus("mandatory")
_AirIRmPmLouver2_ObjectIdentity = ObjectIdentity
airIRmPmLouver2 = _AirIRmPmLouver2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36)
)
_AirIRmPmLouver2ManOpEnable_Type = AirIRmActivityState
_AirIRmPmLouver2ManOpEnable_Object = MibScalar
airIRmPmLouver2ManOpEnable = _AirIRmPmLouver2ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36, 2),
    _AirIRmPmLouver2ManOpEnable_Type()
)
airIRmPmLouver2ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLouver2ManOpEnable.setStatus("mandatory")


class _AirIRmPmLouver2Position_Type(Integer32):
    """Custom type airIRmPmLouver2Position based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 1),
          ("open", 2))
    )


_AirIRmPmLouver2Position_Type.__name__ = "Integer32"
_AirIRmPmLouver2Position_Object = MibScalar
airIRmPmLouver2Position = _AirIRmPmLouver2Position_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36, 3),
    _AirIRmPmLouver2Position_Type()
)
airIRmPmLouver2Position.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLouver2Position.setStatus("mandatory")


class _AirIRmPmLouver2ManOpPosition_Type(Integer32):
    """Custom type airIRmPmLouver2ManOpPosition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 1),
          ("open", 2))
    )


_AirIRmPmLouver2ManOpPosition_Type.__name__ = "Integer32"
_AirIRmPmLouver2ManOpPosition_Object = MibScalar
airIRmPmLouver2ManOpPosition = _AirIRmPmLouver2ManOpPosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 36, 4),
    _AirIRmPmLouver2ManOpPosition_Type()
)
airIRmPmLouver2ManOpPosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLouver2ManOpPosition.setStatus("mandatory")
_AirIRmPmLouver3_ObjectIdentity = ObjectIdentity
airIRmPmLouver3 = _AirIRmPmLouver3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37)
)
_AirIRmPmLouver3ManOpEnable_Type = AirIRmActivityState
_AirIRmPmLouver3ManOpEnable_Object = MibScalar
airIRmPmLouver3ManOpEnable = _AirIRmPmLouver3ManOpEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37, 2),
    _AirIRmPmLouver3ManOpEnable_Type()
)
airIRmPmLouver3ManOpEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLouver3ManOpEnable.setStatus("mandatory")


class _AirIRmPmLouver3Position_Type(Integer32):
    """Custom type airIRmPmLouver3Position based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 1),
          ("open", 2))
    )


_AirIRmPmLouver3Position_Type.__name__ = "Integer32"
_AirIRmPmLouver3Position_Object = MibScalar
airIRmPmLouver3Position = _AirIRmPmLouver3Position_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37, 3),
    _AirIRmPmLouver3Position_Type()
)
airIRmPmLouver3Position.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLouver3Position.setStatus("mandatory")


class _AirIRmPmLouver3ManOpPosition_Type(Integer32):
    """Custom type airIRmPmLouver3ManOpPosition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 1),
          ("open", 2))
    )


_AirIRmPmLouver3ManOpPosition_Type.__name__ = "Integer32"
_AirIRmPmLouver3ManOpPosition_Object = MibScalar
airIRmPmLouver3ManOpPosition = _AirIRmPmLouver3ManOpPosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 37, 4),
    _AirIRmPmLouver3ManOpPosition_Type()
)
airIRmPmLouver3ManOpPosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmLouver3ManOpPosition.setStatus("mandatory")
_AirIRmPmAuxAlarm1_ObjectIdentity = ObjectIdentity
airIRmPmAuxAlarm1 = _AirIRmPmAuxAlarm1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 38)
)
_AirIRmPmAuxAlarm2_ObjectIdentity = ObjectIdentity
airIRmPmAuxAlarm2 = _AirIRmPmAuxAlarm2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 39)
)
_AirIRmPmAuxAlarm3_ObjectIdentity = ObjectIdentity
airIRmPmAuxAlarm3 = _AirIRmPmAuxAlarm3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 40)
)
_AirIRmPmAuxAlarm4_ObjectIdentity = ObjectIdentity
airIRmPmAuxAlarm4 = _AirIRmPmAuxAlarm4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 41)
)
_AirIRmPmAuxAlarm5_ObjectIdentity = ObjectIdentity
airIRmPmAuxAlarm5 = _AirIRmPmAuxAlarm5_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 42)
)
_AirIRmPmAlarmBits_ObjectIdentity = ObjectIdentity
airIRmPmAlarmBits = _AirIRmPmAlarmBits_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43)
)
_AirIRmPmFan1Failure_Type = AirIRmAlarmState
_AirIRmPmFan1Failure_Object = MibScalar
airIRmPmFan1Failure = _AirIRmPmFan1Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 1),
    _AirIRmPmFan1Failure_Type()
)
airIRmPmFan1Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan1Failure.setStatus("mandatory")
_AirIRmPmFan2Failure_Type = AirIRmAlarmState
_AirIRmPmFan2Failure_Object = MibScalar
airIRmPmFan2Failure = _AirIRmPmFan2Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 2),
    _AirIRmPmFan2Failure_Type()
)
airIRmPmFan2Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan2Failure.setStatus("mandatory")
_AirIRmPmFan3Failure_Type = AirIRmAlarmState
_AirIRmPmFan3Failure_Object = MibScalar
airIRmPmFan3Failure = _AirIRmPmFan3Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 3),
    _AirIRmPmFan3Failure_Type()
)
airIRmPmFan3Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan3Failure.setStatus("mandatory")
_AirIRmPmCompressor1Failure_Type = AirIRmAlarmState
_AirIRmPmCompressor1Failure_Object = MibScalar
airIRmPmCompressor1Failure = _AirIRmPmCompressor1Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 4),
    _AirIRmPmCompressor1Failure_Type()
)
airIRmPmCompressor1Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCompressor1Failure.setStatus("mandatory")
_AirIRmPmCompressor2Failure_Type = AirIRmAlarmState
_AirIRmPmCompressor2Failure_Object = MibScalar
airIRmPmCompressor2Failure = _AirIRmPmCompressor2Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 5),
    _AirIRmPmCompressor2Failure_Type()
)
airIRmPmCompressor2Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCompressor2Failure.setStatus("mandatory")
_AirIRmPmWaterDetector_Type = AirIRmAlarmState
_AirIRmPmWaterDetector_Object = MibScalar
airIRmPmWaterDetector = _AirIRmPmWaterDetector_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 6),
    _AirIRmPmWaterDetector_Type()
)
airIRmPmWaterDetector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmWaterDetector.setStatus("mandatory")
_AirIRmPmPhaseFailure_Type = AirIRmAlarmState
_AirIRmPmPhaseFailure_Object = MibScalar
airIRmPmPhaseFailure = _AirIRmPmPhaseFailure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 7),
    _AirIRmPmPhaseFailure_Type()
)
airIRmPmPhaseFailure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPhaseFailure.setStatus("mandatory")
_AirIRmPmFireSmokeDetector_Type = AirIRmAlarmState
_AirIRmPmFireSmokeDetector_Object = MibScalar
airIRmPmFireSmokeDetector = _AirIRmPmFireSmokeDetector_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 8),
    _AirIRmPmFireSmokeDetector_Type()
)
airIRmPmFireSmokeDetector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFireSmokeDetector.setStatus("mandatory")
_AirIRmPmReturnAirTemperatureTooHigh_Type = AirIRmAlarmState
_AirIRmPmReturnAirTemperatureTooHigh_Object = MibScalar
airIRmPmReturnAirTemperatureTooHigh = _AirIRmPmReturnAirTemperatureTooHigh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 9),
    _AirIRmPmReturnAirTemperatureTooHigh_Type()
)
airIRmPmReturnAirTemperatureTooHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmReturnAirTemperatureTooHigh.setStatus("mandatory")
_AirIRmPmReturnAirHumidityTooHigh_Type = AirIRmAlarmState
_AirIRmPmReturnAirHumidityTooHigh_Object = MibScalar
airIRmPmReturnAirHumidityTooHigh = _AirIRmPmReturnAirHumidityTooHigh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 10),
    _AirIRmPmReturnAirHumidityTooHigh_Type()
)
airIRmPmReturnAirHumidityTooHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmReturnAirHumidityTooHigh.setStatus("mandatory")
_AirIRmPmSupplyAirTemperatureTooHigh_Type = AirIRmAlarmState
_AirIRmPmSupplyAirTemperatureTooHigh_Object = MibScalar
airIRmPmSupplyAirTemperatureTooHigh = _AirIRmPmSupplyAirTemperatureTooHigh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 11),
    _AirIRmPmSupplyAirTemperatureTooHigh_Type()
)
airIRmPmSupplyAirTemperatureTooHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSupplyAirTemperatureTooHigh.setStatus("mandatory")
_AirIRmPmSupplyAirHumidityTooHigh_Type = AirIRmAlarmState
_AirIRmPmSupplyAirHumidityTooHigh_Object = MibScalar
airIRmPmSupplyAirHumidityTooHigh = _AirIRmPmSupplyAirHumidityTooHigh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 12),
    _AirIRmPmSupplyAirHumidityTooHigh_Type()
)
airIRmPmSupplyAirHumidityTooHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSupplyAirHumidityTooHigh.setStatus("mandatory")
_AirIRmPmWaterTemperatureTooHigh_Type = AirIRmAlarmState
_AirIRmPmWaterTemperatureTooHigh_Object = MibScalar
airIRmPmWaterTemperatureTooHigh = _AirIRmPmWaterTemperatureTooHigh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 13),
    _AirIRmPmWaterTemperatureTooHigh_Type()
)
airIRmPmWaterTemperatureTooHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmWaterTemperatureTooHigh.setStatus("mandatory")
_AirIRmPmReturnAirTemperatureTooLow_Type = AirIRmAlarmState
_AirIRmPmReturnAirTemperatureTooLow_Object = MibScalar
airIRmPmReturnAirTemperatureTooLow = _AirIRmPmReturnAirTemperatureTooLow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 14),
    _AirIRmPmReturnAirTemperatureTooLow_Type()
)
airIRmPmReturnAirTemperatureTooLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmReturnAirTemperatureTooLow.setStatus("mandatory")
_AirIRmPmReturnAirHumidityTooLow_Type = AirIRmAlarmState
_AirIRmPmReturnAirHumidityTooLow_Object = MibScalar
airIRmPmReturnAirHumidityTooLow = _AirIRmPmReturnAirHumidityTooLow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 15),
    _AirIRmPmReturnAirHumidityTooLow_Type()
)
airIRmPmReturnAirHumidityTooLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmReturnAirHumidityTooLow.setStatus("mandatory")
_AirIRmPmSupplyAirTemperatureTooLow_Type = AirIRmAlarmState
_AirIRmPmSupplyAirTemperatureTooLow_Object = MibScalar
airIRmPmSupplyAirTemperatureTooLow = _AirIRmPmSupplyAirTemperatureTooLow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 16),
    _AirIRmPmSupplyAirTemperatureTooLow_Type()
)
airIRmPmSupplyAirTemperatureTooLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSupplyAirTemperatureTooLow.setStatus("mandatory")
_AirIRmPmSupplyAirHumidityTooLow_Type = AirIRmAlarmState
_AirIRmPmSupplyAirHumidityTooLow_Object = MibScalar
airIRmPmSupplyAirHumidityTooLow = _AirIRmPmSupplyAirHumidityTooLow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 17),
    _AirIRmPmSupplyAirHumidityTooLow_Type()
)
airIRmPmSupplyAirHumidityTooLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSupplyAirHumidityTooLow.setStatus("mandatory")
_AirIRmPmWaterTemperatureTooLow_Type = AirIRmAlarmState
_AirIRmPmWaterTemperatureTooLow_Object = MibScalar
airIRmPmWaterTemperatureTooLow = _AirIRmPmWaterTemperatureTooLow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 18),
    _AirIRmPmWaterTemperatureTooLow_Type()
)
airIRmPmWaterTemperatureTooLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmWaterTemperatureTooLow.setStatus("mandatory")
_AirIRmPmSensor1Failure_Type = AirIRmAlarmState
_AirIRmPmSensor1Failure_Object = MibScalar
airIRmPmSensor1Failure = _AirIRmPmSensor1Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 19),
    _AirIRmPmSensor1Failure_Type()
)
airIRmPmSensor1Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor1Failure.setStatus("mandatory")
_AirIRmPmSensor2Failure_Type = AirIRmAlarmState
_AirIRmPmSensor2Failure_Object = MibScalar
airIRmPmSensor2Failure = _AirIRmPmSensor2Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 20),
    _AirIRmPmSensor2Failure_Type()
)
airIRmPmSensor2Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor2Failure.setStatus("mandatory")
_AirIRmPmSensor3Failure_Type = AirIRmAlarmState
_AirIRmPmSensor3Failure_Object = MibScalar
airIRmPmSensor3Failure = _AirIRmPmSensor3Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 21),
    _AirIRmPmSensor3Failure_Type()
)
airIRmPmSensor3Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor3Failure.setStatus("mandatory")
_AirIRmPmSensor4Failure_Type = AirIRmAlarmState
_AirIRmPmSensor4Failure_Object = MibScalar
airIRmPmSensor4Failure = _AirIRmPmSensor4Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 22),
    _AirIRmPmSensor4Failure_Type()
)
airIRmPmSensor4Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor4Failure.setStatus("mandatory")
_AirIRmPmSensor5Failure_Type = AirIRmAlarmState
_AirIRmPmSensor5Failure_Object = MibScalar
airIRmPmSensor5Failure = _AirIRmPmSensor5Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 23),
    _AirIRmPmSensor5Failure_Type()
)
airIRmPmSensor5Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor5Failure.setStatus("mandatory")
_AirIRmPmSensor6Failure_Type = AirIRmAlarmState
_AirIRmPmSensor6Failure_Object = MibScalar
airIRmPmSensor6Failure = _AirIRmPmSensor6Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 24),
    _AirIRmPmSensor6Failure_Type()
)
airIRmPmSensor6Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor6Failure.setStatus("mandatory")
_AirIRmPmSensor7Failure_Type = AirIRmAlarmState
_AirIRmPmSensor7Failure_Object = MibScalar
airIRmPmSensor7Failure = _AirIRmPmSensor7Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 25),
    _AirIRmPmSensor7Failure_Type()
)
airIRmPmSensor7Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor7Failure.setStatus("mandatory")
_AirIRmPmSensor8Failure_Type = AirIRmAlarmState
_AirIRmPmSensor8Failure_Object = MibScalar
airIRmPmSensor8Failure = _AirIRmPmSensor8Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 26),
    _AirIRmPmSensor8Failure_Type()
)
airIRmPmSensor8Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor8Failure.setStatus("mandatory")
_AirIRmPmSensor9Failure_Type = AirIRmAlarmState
_AirIRmPmSensor9Failure_Object = MibScalar
airIRmPmSensor9Failure = _AirIRmPmSensor9Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 27),
    _AirIRmPmSensor9Failure_Type()
)
airIRmPmSensor9Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor9Failure.setStatus("mandatory")
_AirIRmPmSensor10Failure_Type = AirIRmAlarmState
_AirIRmPmSensor10Failure_Object = MibScalar
airIRmPmSensor10Failure = _AirIRmPmSensor10Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 28),
    _AirIRmPmSensor10Failure_Type()
)
airIRmPmSensor10Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor10Failure.setStatus("mandatory")
_AirIRmPmSensor11Failure_Type = AirIRmAlarmState
_AirIRmPmSensor11Failure_Object = MibScalar
airIRmPmSensor11Failure = _AirIRmPmSensor11Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 29),
    _AirIRmPmSensor11Failure_Type()
)
airIRmPmSensor11Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor11Failure.setStatus("mandatory")
_AirIRmPmSensor12Failure_Type = AirIRmAlarmState
_AirIRmPmSensor12Failure_Object = MibScalar
airIRmPmSensor12Failure = _AirIRmPmSensor12Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 30),
    _AirIRmPmSensor12Failure_Type()
)
airIRmPmSensor12Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor12Failure.setStatus("mandatory")
_AirIRmPmSensor13Failure_Type = AirIRmAlarmState
_AirIRmPmSensor13Failure_Object = MibScalar
airIRmPmSensor13Failure = _AirIRmPmSensor13Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 31),
    _AirIRmPmSensor13Failure_Type()
)
airIRmPmSensor13Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor13Failure.setStatus("mandatory")
_AirIRmPmSensor14Failure_Type = AirIRmAlarmState
_AirIRmPmSensor14Failure_Object = MibScalar
airIRmPmSensor14Failure = _AirIRmPmSensor14Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 32),
    _AirIRmPmSensor14Failure_Type()
)
airIRmPmSensor14Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor14Failure.setStatus("mandatory")
_AirIRmPmSensor15Failure_Type = AirIRmAlarmState
_AirIRmPmSensor15Failure_Object = MibScalar
airIRmPmSensor15Failure = _AirIRmPmSensor15Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 33),
    _AirIRmPmSensor15Failure_Type()
)
airIRmPmSensor15Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor15Failure.setStatus("mandatory")
_AirIRmPmSensor16Failure_Type = AirIRmAlarmState
_AirIRmPmSensor16Failure_Object = MibScalar
airIRmPmSensor16Failure = _AirIRmPmSensor16Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 34),
    _AirIRmPmSensor16Failure_Type()
)
airIRmPmSensor16Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor16Failure.setStatus("mandatory")
_AirIRmPmSensor17Failure_Type = AirIRmAlarmState
_AirIRmPmSensor17Failure_Object = MibScalar
airIRmPmSensor17Failure = _AirIRmPmSensor17Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 35),
    _AirIRmPmSensor17Failure_Type()
)
airIRmPmSensor17Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor17Failure.setStatus("mandatory")
_AirIRmPmSensor18Failure_Type = AirIRmAlarmState
_AirIRmPmSensor18Failure_Object = MibScalar
airIRmPmSensor18Failure = _AirIRmPmSensor18Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 36),
    _AirIRmPmSensor18Failure_Type()
)
airIRmPmSensor18Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor18Failure.setStatus("mandatory")
_AirIRmPmSensor19Failure_Type = AirIRmAlarmState
_AirIRmPmSensor19Failure_Object = MibScalar
airIRmPmSensor19Failure = _AirIRmPmSensor19Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 37),
    _AirIRmPmSensor19Failure_Type()
)
airIRmPmSensor19Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor19Failure.setStatus("mandatory")
_AirIRmPmSensor20Failure_Type = AirIRmAlarmState
_AirIRmPmSensor20Failure_Object = MibScalar
airIRmPmSensor20Failure = _AirIRmPmSensor20Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 38),
    _AirIRmPmSensor20Failure_Type()
)
airIRmPmSensor20Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor20Failure.setStatus("mandatory")
_AirIRmPmSensor21Failure_Type = AirIRmAlarmState
_AirIRmPmSensor21Failure_Object = MibScalar
airIRmPmSensor21Failure = _AirIRmPmSensor21Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 39),
    _AirIRmPmSensor21Failure_Type()
)
airIRmPmSensor21Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor21Failure.setStatus("mandatory")
_AirIRmPmSensor1Defect_Type = AirIRmAlarmState
_AirIRmPmSensor1Defect_Object = MibScalar
airIRmPmSensor1Defect = _AirIRmPmSensor1Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 40),
    _AirIRmPmSensor1Defect_Type()
)
airIRmPmSensor1Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor1Defect.setStatus("mandatory")
_AirIRmPmSensor2Defect_Type = AirIRmAlarmState
_AirIRmPmSensor2Defect_Object = MibScalar
airIRmPmSensor2Defect = _AirIRmPmSensor2Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 41),
    _AirIRmPmSensor2Defect_Type()
)
airIRmPmSensor2Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor2Defect.setStatus("mandatory")
_AirIRmPmSensor3Defect_Type = AirIRmAlarmState
_AirIRmPmSensor3Defect_Object = MibScalar
airIRmPmSensor3Defect = _AirIRmPmSensor3Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 42),
    _AirIRmPmSensor3Defect_Type()
)
airIRmPmSensor3Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor3Defect.setStatus("mandatory")
_AirIRmPmSensor4Defect_Type = AirIRmAlarmState
_AirIRmPmSensor4Defect_Object = MibScalar
airIRmPmSensor4Defect = _AirIRmPmSensor4Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 43),
    _AirIRmPmSensor4Defect_Type()
)
airIRmPmSensor4Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor4Defect.setStatus("mandatory")
_AirIRmPmSensor5Defect_Type = AirIRmAlarmState
_AirIRmPmSensor5Defect_Object = MibScalar
airIRmPmSensor5Defect = _AirIRmPmSensor5Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 44),
    _AirIRmPmSensor5Defect_Type()
)
airIRmPmSensor5Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor5Defect.setStatus("mandatory")
_AirIRmPmSensor6Defect_Type = AirIRmAlarmState
_AirIRmPmSensor6Defect_Object = MibScalar
airIRmPmSensor6Defect = _AirIRmPmSensor6Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 45),
    _AirIRmPmSensor6Defect_Type()
)
airIRmPmSensor6Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor6Defect.setStatus("mandatory")
_AirIRmPmSensor7Defect_Type = AirIRmAlarmState
_AirIRmPmSensor7Defect_Object = MibScalar
airIRmPmSensor7Defect = _AirIRmPmSensor7Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 46),
    _AirIRmPmSensor7Defect_Type()
)
airIRmPmSensor7Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor7Defect.setStatus("mandatory")
_AirIRmPmSensor8Defect_Type = AirIRmAlarmState
_AirIRmPmSensor8Defect_Object = MibScalar
airIRmPmSensor8Defect = _AirIRmPmSensor8Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 47),
    _AirIRmPmSensor8Defect_Type()
)
airIRmPmSensor8Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor8Defect.setStatus("mandatory")
_AirIRmPmSensor9Defect_Type = AirIRmAlarmState
_AirIRmPmSensor9Defect_Object = MibScalar
airIRmPmSensor9Defect = _AirIRmPmSensor9Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 48),
    _AirIRmPmSensor9Defect_Type()
)
airIRmPmSensor9Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor9Defect.setStatus("mandatory")
_AirIRmPmSensor10Defect_Type = AirIRmAlarmState
_AirIRmPmSensor10Defect_Object = MibScalar
airIRmPmSensor10Defect = _AirIRmPmSensor10Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 49),
    _AirIRmPmSensor10Defect_Type()
)
airIRmPmSensor10Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor10Defect.setStatus("mandatory")
_AirIRmPmSensor11Defect_Type = AirIRmAlarmState
_AirIRmPmSensor11Defect_Object = MibScalar
airIRmPmSensor11Defect = _AirIRmPmSensor11Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 50),
    _AirIRmPmSensor11Defect_Type()
)
airIRmPmSensor11Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor11Defect.setStatus("mandatory")
_AirIRmPmSensor12Defect_Type = AirIRmAlarmState
_AirIRmPmSensor12Defect_Object = MibScalar
airIRmPmSensor12Defect = _AirIRmPmSensor12Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 51),
    _AirIRmPmSensor12Defect_Type()
)
airIRmPmSensor12Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor12Defect.setStatus("mandatory")
_AirIRmPmSensor13Defect_Type = AirIRmAlarmState
_AirIRmPmSensor13Defect_Object = MibScalar
airIRmPmSensor13Defect = _AirIRmPmSensor13Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 52),
    _AirIRmPmSensor13Defect_Type()
)
airIRmPmSensor13Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor13Defect.setStatus("mandatory")
_AirIRmPmSensor14Defect_Type = AirIRmAlarmState
_AirIRmPmSensor14Defect_Object = MibScalar
airIRmPmSensor14Defect = _AirIRmPmSensor14Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 53),
    _AirIRmPmSensor14Defect_Type()
)
airIRmPmSensor14Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor14Defect.setStatus("mandatory")
_AirIRmPmSensor15Defect_Type = AirIRmAlarmState
_AirIRmPmSensor15Defect_Object = MibScalar
airIRmPmSensor15Defect = _AirIRmPmSensor15Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 54),
    _AirIRmPmSensor15Defect_Type()
)
airIRmPmSensor15Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor15Defect.setStatus("mandatory")
_AirIRmPmSensor16Defect_Type = AirIRmAlarmState
_AirIRmPmSensor16Defect_Object = MibScalar
airIRmPmSensor16Defect = _AirIRmPmSensor16Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 55),
    _AirIRmPmSensor16Defect_Type()
)
airIRmPmSensor16Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor16Defect.setStatus("mandatory")
_AirIRmPmSensor17Defect_Type = AirIRmAlarmState
_AirIRmPmSensor17Defect_Object = MibScalar
airIRmPmSensor17Defect = _AirIRmPmSensor17Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 56),
    _AirIRmPmSensor17Defect_Type()
)
airIRmPmSensor17Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor17Defect.setStatus("mandatory")
_AirIRmPmSensor18Defect_Type = AirIRmAlarmState
_AirIRmPmSensor18Defect_Object = MibScalar
airIRmPmSensor18Defect = _AirIRmPmSensor18Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 57),
    _AirIRmPmSensor18Defect_Type()
)
airIRmPmSensor18Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor18Defect.setStatus("mandatory")
_AirIRmPmSensor19Defect_Type = AirIRmAlarmState
_AirIRmPmSensor19Defect_Object = MibScalar
airIRmPmSensor19Defect = _AirIRmPmSensor19Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 58),
    _AirIRmPmSensor19Defect_Type()
)
airIRmPmSensor19Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor19Defect.setStatus("mandatory")
_AirIRmPmSensor20Defect_Type = AirIRmAlarmState
_AirIRmPmSensor20Defect_Object = MibScalar
airIRmPmSensor20Defect = _AirIRmPmSensor20Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 59),
    _AirIRmPmSensor20Defect_Type()
)
airIRmPmSensor20Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor20Defect.setStatus("mandatory")
_AirIRmPmSensor21Defect_Type = AirIRmAlarmState
_AirIRmPmSensor21Defect_Object = MibScalar
airIRmPmSensor21Defect = _AirIRmPmSensor21Defect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 60),
    _AirIRmPmSensor21Defect_Type()
)
airIRmPmSensor21Defect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmSensor21Defect.setStatus("mandatory")
_AirIRmPmCompressor1Alarm_Type = AirIRmAlarmState
_AirIRmPmCompressor1Alarm_Object = MibScalar
airIRmPmCompressor1Alarm = _AirIRmPmCompressor1Alarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 61),
    _AirIRmPmCompressor1Alarm_Type()
)
airIRmPmCompressor1Alarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCompressor1Alarm.setStatus("mandatory")
_AirIRmPmCompressor2Alarm_Type = AirIRmAlarmState
_AirIRmPmCompressor2Alarm_Object = MibScalar
airIRmPmCompressor2Alarm = _AirIRmPmCompressor2Alarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 62),
    _AirIRmPmCompressor2Alarm_Type()
)
airIRmPmCompressor2Alarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCompressor2Alarm.setStatus("mandatory")
_AirIRmPmCompressor1LowPressure_Type = AirIRmAlarmState
_AirIRmPmCompressor1LowPressure_Object = MibScalar
airIRmPmCompressor1LowPressure = _AirIRmPmCompressor1LowPressure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 63),
    _AirIRmPmCompressor1LowPressure_Type()
)
airIRmPmCompressor1LowPressure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCompressor1LowPressure.setStatus("mandatory")
_AirIRmPmCompressor2LowPressure_Type = AirIRmAlarmState
_AirIRmPmCompressor2LowPressure_Object = MibScalar
airIRmPmCompressor2LowPressure = _AirIRmPmCompressor2LowPressure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 64),
    _AirIRmPmCompressor2LowPressure_Type()
)
airIRmPmCompressor2LowPressure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmCompressor2LowPressure.setStatus("mandatory")
_AirIRmPmReheat1Failure_Type = AirIRmAlarmState
_AirIRmPmReheat1Failure_Object = MibScalar
airIRmPmReheat1Failure = _AirIRmPmReheat1Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 65),
    _AirIRmPmReheat1Failure_Type()
)
airIRmPmReheat1Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmReheat1Failure.setStatus("mandatory")
_AirIRmPmReheat2Failure_Type = AirIRmAlarmState
_AirIRmPmReheat2Failure_Object = MibScalar
airIRmPmReheat2Failure = _AirIRmPmReheat2Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 66),
    _AirIRmPmReheat2Failure_Type()
)
airIRmPmReheat2Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmReheat2Failure.setStatus("mandatory")
_AirIRmPmReheat3Failure_Type = AirIRmAlarmState
_AirIRmPmReheat3Failure_Object = MibScalar
airIRmPmReheat3Failure = _AirIRmPmReheat3Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 67),
    _AirIRmPmReheat3Failure_Type()
)
airIRmPmReheat3Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmReheat3Failure.setStatus("mandatory")
_AirIRmPmReheat4Failure_Type = AirIRmAlarmState
_AirIRmPmReheat4Failure_Object = MibScalar
airIRmPmReheat4Failure = _AirIRmPmReheat4Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 68),
    _AirIRmPmReheat4Failure_Type()
)
airIRmPmReheat4Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmReheat4Failure.setStatus("mandatory")
_AirIRmPmDrycooler1Failure_Type = AirIRmAlarmState
_AirIRmPmDrycooler1Failure_Object = MibScalar
airIRmPmDrycooler1Failure = _AirIRmPmDrycooler1Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 69),
    _AirIRmPmDrycooler1Failure_Type()
)
airIRmPmDrycooler1Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler1Failure.setStatus("mandatory")
_AirIRmPmDrycooler2Failure_Type = AirIRmAlarmState
_AirIRmPmDrycooler2Failure_Object = MibScalar
airIRmPmDrycooler2Failure = _AirIRmPmDrycooler2Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 70),
    _AirIRmPmDrycooler2Failure_Type()
)
airIRmPmDrycooler2Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler2Failure.setStatus("mandatory")
_AirIRmPmDrycooler3Failure_Type = AirIRmAlarmState
_AirIRmPmDrycooler3Failure_Object = MibScalar
airIRmPmDrycooler3Failure = _AirIRmPmDrycooler3Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 71),
    _AirIRmPmDrycooler3Failure_Type()
)
airIRmPmDrycooler3Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler3Failure.setStatus("mandatory")
_AirIRmPmDrycooler4Failure_Type = AirIRmAlarmState
_AirIRmPmDrycooler4Failure_Object = MibScalar
airIRmPmDrycooler4Failure = _AirIRmPmDrycooler4Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 72),
    _AirIRmPmDrycooler4Failure_Type()
)
airIRmPmDrycooler4Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmDrycooler4Failure.setStatus("mandatory")
_AirIRmPmPump1Failure_Type = AirIRmAlarmState
_AirIRmPmPump1Failure_Object = MibScalar
airIRmPmPump1Failure = _AirIRmPmPump1Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 73),
    _AirIRmPmPump1Failure_Type()
)
airIRmPmPump1Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump1Failure.setStatus("mandatory")
_AirIRmPmPump2Failure_Type = AirIRmAlarmState
_AirIRmPmPump2Failure_Object = MibScalar
airIRmPmPump2Failure = _AirIRmPmPump2Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 74),
    _AirIRmPmPump2Failure_Type()
)
airIRmPmPump2Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump2Failure.setStatus("mandatory")
_AirIRmPmPump3Failure_Type = AirIRmAlarmState
_AirIRmPmPump3Failure_Object = MibScalar
airIRmPmPump3Failure = _AirIRmPmPump3Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 75),
    _AirIRmPmPump3Failure_Type()
)
airIRmPmPump3Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump3Failure.setStatus("mandatory")
_AirIRmPmPump4Failure_Type = AirIRmAlarmState
_AirIRmPmPump4Failure_Object = MibScalar
airIRmPmPump4Failure = _AirIRmPmPump4Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 76),
    _AirIRmPmPump4Failure_Type()
)
airIRmPmPump4Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmPump4Failure.setStatus("mandatory")
_AirIRmPmHumidifier1Failure_Type = AirIRmAlarmState
_AirIRmPmHumidifier1Failure_Object = MibScalar
airIRmPmHumidifier1Failure = _AirIRmPmHumidifier1Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 77),
    _AirIRmPmHumidifier1Failure_Type()
)
airIRmPmHumidifier1Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1Failure.setStatus("mandatory")
_AirIRmPmHumidifier2Failure_Type = AirIRmAlarmState
_AirIRmPmHumidifier2Failure_Object = MibScalar
airIRmPmHumidifier2Failure = _AirIRmPmHumidifier2Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 78),
    _AirIRmPmHumidifier2Failure_Type()
)
airIRmPmHumidifier2Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2Failure.setStatus("mandatory")
_AirIRmPmHumidifier3Failure_Type = AirIRmAlarmState
_AirIRmPmHumidifier3Failure_Object = MibScalar
airIRmPmHumidifier3Failure = _AirIRmPmHumidifier3Failure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 79),
    _AirIRmPmHumidifier3Failure_Type()
)
airIRmPmHumidifier3Failure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier3Failure.setStatus("mandatory")
_AirIRmPmHumidifier1Alarm5us_Type = AirIRmAlarmState
_AirIRmPmHumidifier1Alarm5us_Object = MibScalar
airIRmPmHumidifier1Alarm5us = _AirIRmPmHumidifier1Alarm5us_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 80),
    _AirIRmPmHumidifier1Alarm5us_Type()
)
airIRmPmHumidifier1Alarm5us.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1Alarm5us.setStatus("mandatory")
_AirIRmPmHumidifier2Alarm5us_Type = AirIRmAlarmState
_AirIRmPmHumidifier2Alarm5us_Object = MibScalar
airIRmPmHumidifier2Alarm5us = _AirIRmPmHumidifier2Alarm5us_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 81),
    _AirIRmPmHumidifier2Alarm5us_Type()
)
airIRmPmHumidifier2Alarm5us.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2Alarm5us.setStatus("mandatory")
_AirIRmPmHumidifier3Alarm5us_Type = AirIRmAlarmState
_AirIRmPmHumidifier3Alarm5us_Object = MibScalar
airIRmPmHumidifier3Alarm5us = _AirIRmPmHumidifier3Alarm5us_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 82),
    _AirIRmPmHumidifier3Alarm5us_Type()
)
airIRmPmHumidifier3Alarm5us.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier3Alarm5us.setStatus("mandatory")
_AirIRmPmHumidifier1Alarm20us_Type = AirIRmAlarmState
_AirIRmPmHumidifier1Alarm20us_Object = MibScalar
airIRmPmHumidifier1Alarm20us = _AirIRmPmHumidifier1Alarm20us_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 83),
    _AirIRmPmHumidifier1Alarm20us_Type()
)
airIRmPmHumidifier1Alarm20us.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier1Alarm20us.setStatus("mandatory")
_AirIRmPmHumidifier2Alarm20us_Type = AirIRmAlarmState
_AirIRmPmHumidifier2Alarm20us_Object = MibScalar
airIRmPmHumidifier2Alarm20us = _AirIRmPmHumidifier2Alarm20us_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 84),
    _AirIRmPmHumidifier2Alarm20us_Type()
)
airIRmPmHumidifier2Alarm20us.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier2Alarm20us.setStatus("mandatory")
_AirIRmPmHumidifier3Alarm20us_Type = AirIRmAlarmState
_AirIRmPmHumidifier3Alarm20us_Object = MibScalar
airIRmPmHumidifier3Alarm20us = _AirIRmPmHumidifier3Alarm20us_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 85),
    _AirIRmPmHumidifier3Alarm20us_Type()
)
airIRmPmHumidifier3Alarm20us.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHumidifier3Alarm20us.setStatus("mandatory")
_AirIRmPmFan1Alarm_Type = AirIRmAlarmState
_AirIRmPmFan1Alarm_Object = MibScalar
airIRmPmFan1Alarm = _AirIRmPmFan1Alarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 86),
    _AirIRmPmFan1Alarm_Type()
)
airIRmPmFan1Alarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan1Alarm.setStatus("mandatory")
_AirIRmPmFan2Alarm_Type = AirIRmAlarmState
_AirIRmPmFan2Alarm_Object = MibScalar
airIRmPmFan2Alarm = _AirIRmPmFan2Alarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 87),
    _AirIRmPmFan2Alarm_Type()
)
airIRmPmFan2Alarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan2Alarm.setStatus("mandatory")
_AirIRmPmFan3Alarm_Type = AirIRmAlarmState
_AirIRmPmFan3Alarm_Object = MibScalar
airIRmPmFan3Alarm = _AirIRmPmFan3Alarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 88),
    _AirIRmPmFan3Alarm_Type()
)
airIRmPmFan3Alarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFan3Alarm.setStatus("mandatory")
_AirIRmPmFilter1Clogged_Type = AirIRmAlarmState
_AirIRmPmFilter1Clogged_Object = MibScalar
airIRmPmFilter1Clogged = _AirIRmPmFilter1Clogged_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 89),
    _AirIRmPmFilter1Clogged_Type()
)
airIRmPmFilter1Clogged.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFilter1Clogged.setStatus("mandatory")
_AirIRmPmFilter2Clogged_Type = AirIRmAlarmState
_AirIRmPmFilter2Clogged_Object = MibScalar
airIRmPmFilter2Clogged = _AirIRmPmFilter2Clogged_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 90),
    _AirIRmPmFilter2Clogged_Type()
)
airIRmPmFilter2Clogged.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFilter2Clogged.setStatus("mandatory")
_AirIRmPmFilter3Clogged_Type = AirIRmAlarmState
_AirIRmPmFilter3Clogged_Object = MibScalar
airIRmPmFilter3Clogged = _AirIRmPmFilter3Clogged_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 91),
    _AirIRmPmFilter3Clogged_Type()
)
airIRmPmFilter3Clogged.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmFilter3Clogged.setStatus("mandatory")
_AirIRmPmAuxiliaryAlarm1_Type = AirIRmAlarmState
_AirIRmPmAuxiliaryAlarm1_Object = MibScalar
airIRmPmAuxiliaryAlarm1 = _AirIRmPmAuxiliaryAlarm1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 92),
    _AirIRmPmAuxiliaryAlarm1_Type()
)
airIRmPmAuxiliaryAlarm1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmAuxiliaryAlarm1.setStatus("mandatory")
_AirIRmPmAuxiliaryAlarm2_Type = AirIRmAlarmState
_AirIRmPmAuxiliaryAlarm2_Object = MibScalar
airIRmPmAuxiliaryAlarm2 = _AirIRmPmAuxiliaryAlarm2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 93),
    _AirIRmPmAuxiliaryAlarm2_Type()
)
airIRmPmAuxiliaryAlarm2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmAuxiliaryAlarm2.setStatus("mandatory")
_AirIRmPmAuxiliaryAlarm3_Type = AirIRmAlarmState
_AirIRmPmAuxiliaryAlarm3_Object = MibScalar
airIRmPmAuxiliaryAlarm3 = _AirIRmPmAuxiliaryAlarm3_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 94),
    _AirIRmPmAuxiliaryAlarm3_Type()
)
airIRmPmAuxiliaryAlarm3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmAuxiliaryAlarm3.setStatus("mandatory")
_AirIRmPmAuxiliaryAlarm4_Type = AirIRmAlarmState
_AirIRmPmAuxiliaryAlarm4_Object = MibScalar
airIRmPmAuxiliaryAlarm4 = _AirIRmPmAuxiliaryAlarm4_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 95),
    _AirIRmPmAuxiliaryAlarm4_Type()
)
airIRmPmAuxiliaryAlarm4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmAuxiliaryAlarm4.setStatus("mandatory")
_AirIRmPmAuxiliaryAlarm5_Type = AirIRmAlarmState
_AirIRmPmAuxiliaryAlarm5_Object = MibScalar
airIRmPmAuxiliaryAlarm5 = _AirIRmPmAuxiliaryAlarm5_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 96),
    _AirIRmPmAuxiliaryAlarm5_Type()
)
airIRmPmAuxiliaryAlarm5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmAuxiliaryAlarm5.setStatus("mandatory")
_AirIRmPmAuxiliaryAlarm6_Type = AirIRmAlarmState
_AirIRmPmAuxiliaryAlarm6_Object = MibScalar
airIRmPmAuxiliaryAlarm6 = _AirIRmPmAuxiliaryAlarm6_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 97),
    _AirIRmPmAuxiliaryAlarm6_Type()
)
airIRmPmAuxiliaryAlarm6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmAuxiliaryAlarm6.setStatus("mandatory")
_AirIRmPmAuxiliaryAlarm7_Type = AirIRmAlarmState
_AirIRmPmAuxiliaryAlarm7_Object = MibScalar
airIRmPmAuxiliaryAlarm7 = _AirIRmPmAuxiliaryAlarm7_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 98),
    _AirIRmPmAuxiliaryAlarm7_Type()
)
airIRmPmAuxiliaryAlarm7.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmAuxiliaryAlarm7.setStatus("mandatory")
_AirIRmPmAuxiliaryAlarm8_Type = AirIRmAlarmState
_AirIRmPmAuxiliaryAlarm8_Object = MibScalar
airIRmPmAuxiliaryAlarm8 = _AirIRmPmAuxiliaryAlarm8_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 99),
    _AirIRmPmAuxiliaryAlarm8_Type()
)
airIRmPmAuxiliaryAlarm8.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmAuxiliaryAlarm8.setStatus("mandatory")
_AirIRmPmAuxiliaryAlarm9_Type = AirIRmAlarmState
_AirIRmPmAuxiliaryAlarm9_Object = MibScalar
airIRmPmAuxiliaryAlarm9 = _AirIRmPmAuxiliaryAlarm9_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 100),
    _AirIRmPmAuxiliaryAlarm9_Type()
)
airIRmPmAuxiliaryAlarm9.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmAuxiliaryAlarm9.setStatus("mandatory")
_AirIRmPmAuxiliaryAlarm10_Type = AirIRmAlarmState
_AirIRmPmAuxiliaryAlarm10_Object = MibScalar
airIRmPmAuxiliaryAlarm10 = _AirIRmPmAuxiliaryAlarm10_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 101),
    _AirIRmPmAuxiliaryAlarm10_Type()
)
airIRmPmAuxiliaryAlarm10.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmAuxiliaryAlarm10.setStatus("mandatory")
_AirIRmPmHotGasHeatingAlarm_Type = AirIRmAlarmState
_AirIRmPmHotGasHeatingAlarm_Object = MibScalar
airIRmPmHotGasHeatingAlarm = _AirIRmPmHotGasHeatingAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 102),
    _AirIRmPmHotGasHeatingAlarm_Type()
)
airIRmPmHotGasHeatingAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmHotGasHeatingAlarm.setStatus("mandatory")
_AirIRmPmEEV1PressureSensorError_Type = AirIRmAlarmState
_AirIRmPmEEV1PressureSensorError_Object = MibScalar
airIRmPmEEV1PressureSensorError = _AirIRmPmEEV1PressureSensorError_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 103),
    _AirIRmPmEEV1PressureSensorError_Type()
)
airIRmPmEEV1PressureSensorError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEEV1PressureSensorError.setStatus("mandatory")
_AirIRmPmEEV1TemperatureSensorError_Type = AirIRmAlarmState
_AirIRmPmEEV1TemperatureSensorError_Object = MibScalar
airIRmPmEEV1TemperatureSensorError = _AirIRmPmEEV1TemperatureSensorError_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 104),
    _AirIRmPmEEV1TemperatureSensorError_Type()
)
airIRmPmEEV1TemperatureSensorError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEEV1TemperatureSensorError.setStatus("mandatory")
_AirIRmPmEEV1StepperMotorError_Type = AirIRmAlarmState
_AirIRmPmEEV1StepperMotorError_Object = MibScalar
airIRmPmEEV1StepperMotorError = _AirIRmPmEEV1StepperMotorError_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 105),
    _AirIRmPmEEV1StepperMotorError_Type()
)
airIRmPmEEV1StepperMotorError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEEV1StepperMotorError.setStatus("mandatory")
_AirIRmPmEEV2PressureSensorError_Type = AirIRmAlarmState
_AirIRmPmEEV2PressureSensorError_Object = MibScalar
airIRmPmEEV2PressureSensorError = _AirIRmPmEEV2PressureSensorError_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 106),
    _AirIRmPmEEV2PressureSensorError_Type()
)
airIRmPmEEV2PressureSensorError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEEV2PressureSensorError.setStatus("mandatory")
_AirIRmPmEEV2TemperatureSensorError_Type = AirIRmAlarmState
_AirIRmPmEEV2TemperatureSensorError_Object = MibScalar
airIRmPmEEV2TemperatureSensorError = _AirIRmPmEEV2TemperatureSensorError_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 107),
    _AirIRmPmEEV2TemperatureSensorError_Type()
)
airIRmPmEEV2TemperatureSensorError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEEV2TemperatureSensorError.setStatus("mandatory")
_AirIRmPmEEV2StepperMotorError_Type = AirIRmAlarmState
_AirIRmPmEEV2StepperMotorError_Object = MibScalar
airIRmPmEEV2StepperMotorError = _AirIRmPmEEV2StepperMotorError_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 43, 108),
    _AirIRmPmEEV2StepperMotorError_Type()
)
airIRmPmEEV2StepperMotorError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmEEV2StepperMotorError.setStatus("mandatory")
_AirIRmPmMyZone_ObjectIdentity = ObjectIdentity
airIRmPmMyZone = _AirIRmPmMyZone_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44)
)
_AirIRmPmMyZoneNumber_Type = Integer32
_AirIRmPmMyZoneNumber_Object = MibScalar
airIRmPmMyZoneNumber = _AirIRmPmMyZoneNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 1),
    _AirIRmPmMyZoneNumber_Type()
)
airIRmPmMyZoneNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMyZoneNumber.setStatus("mandatory")
_AirIRmPmMyZoneRoomTemperature_ObjectIdentity = ObjectIdentity
airIRmPmMyZoneRoomTemperature = _AirIRmPmMyZoneRoomTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 2)
)
_AirIRmPmMyZoneRoomTemperatureC_Type = Integer32
_AirIRmPmMyZoneRoomTemperatureC_Object = MibScalar
airIRmPmMyZoneRoomTemperatureC = _AirIRmPmMyZoneRoomTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 2, 1),
    _AirIRmPmMyZoneRoomTemperatureC_Type()
)
airIRmPmMyZoneRoomTemperatureC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMyZoneRoomTemperatureC.setStatus("mandatory")
_AirIRmPmMyZoneRoomTemperatureF_Type = Integer32
_AirIRmPmMyZoneRoomTemperatureF_Object = MibScalar
airIRmPmMyZoneRoomTemperatureF = _AirIRmPmMyZoneRoomTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 2, 2),
    _AirIRmPmMyZoneRoomTemperatureF_Type()
)
airIRmPmMyZoneRoomTemperatureF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMyZoneRoomTemperatureF.setStatus("mandatory")
_AirIRmPmMyZoneRoomHumidity_Type = Integer32
_AirIRmPmMyZoneRoomHumidity_Object = MibScalar
airIRmPmMyZoneRoomHumidity = _AirIRmPmMyZoneRoomHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 3),
    _AirIRmPmMyZoneRoomHumidity_Type()
)
airIRmPmMyZoneRoomHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMyZoneRoomHumidity.setStatus("mandatory")
_AirIRmPmMyZoneSupplyTemperature_ObjectIdentity = ObjectIdentity
airIRmPmMyZoneSupplyTemperature = _AirIRmPmMyZoneSupplyTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 4)
)
_AirIRmPmMyZoneSupplyTemperatureC_Type = Integer32
_AirIRmPmMyZoneSupplyTemperatureC_Object = MibScalar
airIRmPmMyZoneSupplyTemperatureC = _AirIRmPmMyZoneSupplyTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 4, 1),
    _AirIRmPmMyZoneSupplyTemperatureC_Type()
)
airIRmPmMyZoneSupplyTemperatureC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMyZoneSupplyTemperatureC.setStatus("mandatory")
_AirIRmPmMyZoneSupplyTemperatureF_Type = Integer32
_AirIRmPmMyZoneSupplyTemperatureF_Object = MibScalar
airIRmPmMyZoneSupplyTemperatureF = _AirIRmPmMyZoneSupplyTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 4, 2),
    _AirIRmPmMyZoneSupplyTemperatureF_Type()
)
airIRmPmMyZoneSupplyTemperatureF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMyZoneSupplyTemperatureF.setStatus("mandatory")
_AirIRmPmMyZoneSupplyHumidity_Type = Integer32
_AirIRmPmMyZoneSupplyHumidity_Object = MibScalar
airIRmPmMyZoneSupplyHumidity = _AirIRmPmMyZoneSupplyHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 5),
    _AirIRmPmMyZoneSupplyHumidity_Type()
)
airIRmPmMyZoneSupplyHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMyZoneSupplyHumidity.setStatus("mandatory")
_AirIRmPmMyZoneSequencingTime_Type = Integer32
_AirIRmPmMyZoneSequencingTime_Object = MibScalar
airIRmPmMyZoneSequencingTime = _AirIRmPmMyZoneSequencingTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 6),
    _AirIRmPmMyZoneSequencingTime_Type()
)
airIRmPmMyZoneSequencingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMyZoneSequencingTime.setStatus("mandatory")
_AirIRmPmMyZoneNumberOfErrorUnits_Type = Integer32
_AirIRmPmMyZoneNumberOfErrorUnits_Object = MibScalar
airIRmPmMyZoneNumberOfErrorUnits = _AirIRmPmMyZoneNumberOfErrorUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 7),
    _AirIRmPmMyZoneNumberOfErrorUnits_Type()
)
airIRmPmMyZoneNumberOfErrorUnits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMyZoneNumberOfErrorUnits.setStatus("mandatory")
_AirIRmPmMyZoneEmergencyTemperature_ObjectIdentity = ObjectIdentity
airIRmPmMyZoneEmergencyTemperature = _AirIRmPmMyZoneEmergencyTemperature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 8)
)
_AirIRmPmMyZoneEmergencyTemperatureC_Type = Integer32
_AirIRmPmMyZoneEmergencyTemperatureC_Object = MibScalar
airIRmPmMyZoneEmergencyTemperatureC = _AirIRmPmMyZoneEmergencyTemperatureC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 8, 1),
    _AirIRmPmMyZoneEmergencyTemperatureC_Type()
)
airIRmPmMyZoneEmergencyTemperatureC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMyZoneEmergencyTemperatureC.setStatus("mandatory")
_AirIRmPmMyZoneEmergencyTemperatureF_Type = Integer32
_AirIRmPmMyZoneEmergencyTemperatureF_Object = MibScalar
airIRmPmMyZoneEmergencyTemperatureF = _AirIRmPmMyZoneEmergencyTemperatureF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 8, 2),
    _AirIRmPmMyZoneEmergencyTemperatureF_Type()
)
airIRmPmMyZoneEmergencyTemperatureF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMyZoneEmergencyTemperatureF.setStatus("mandatory")
_AirIRmPmMyZoneCWEnergySaveMode_Type = AirIRmActivityState
_AirIRmPmMyZoneCWEnergySaveMode_Object = MibScalar
airIRmPmMyZoneCWEnergySaveMode = _AirIRmPmMyZoneCWEnergySaveMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 44, 9),
    _AirIRmPmMyZoneCWEnergySaveMode_Type()
)
airIRmPmMyZoneCWEnergySaveMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmMyZoneCWEnergySaveMode.setStatus("mandatory")
_AirIRmPmGlobalZoneData_ObjectIdentity = ObjectIdentity
airIRmPmGlobalZoneData = _AirIRmPmGlobalZoneData_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 45)
)
_AirIRmPmGlobalZoneDataEmergencyOpMode_Type = AirIRmActivityState
_AirIRmPmGlobalZoneDataEmergencyOpMode_Object = MibScalar
airIRmPmGlobalZoneDataEmergencyOpMode = _AirIRmPmGlobalZoneDataEmergencyOpMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 5, 3, 45, 1),
    _AirIRmPmGlobalZoneDataEmergencyOpMode_Type()
)
airIRmPmGlobalZoneDataEmergencyOpMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRmPmGlobalZoneDataEmergencyOpMode.setStatus("mandatory")
_AirIRGen3_ObjectIdentity = ObjectIdentity
airIRGen3 = _AirIRGen3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6)
)
_AirIRG3Ident_ObjectIdentity = ObjectIdentity
airIRG3Ident = _AirIRG3Ident_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1)
)
_AirIRG3IdentTableSize_Type = Integer32
_AirIRG3IdentTableSize_Object = MibScalar
airIRG3IdentTableSize = _AirIRG3IdentTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 1),
    _AirIRG3IdentTableSize_Type()
)
airIRG3IdentTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3IdentTableSize.setStatus("mandatory")
_AirIRG3IdentTable_Object = MibTable
airIRG3IdentTable = _AirIRG3IdentTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2)
)
if mibBuilder.loadTexts:
    airIRG3IdentTable.setStatus("mandatory")
_AirIRG3IdentEntry_Object = MibTableRow
airIRG3IdentEntry = _AirIRG3IdentEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1)
)
airIRG3IdentEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3IdentIndex"),
)
if mibBuilder.loadTexts:
    airIRG3IdentEntry.setStatus("mandatory")
_AirIRG3IdentIndex_Type = Integer32
_AirIRG3IdentIndex_Object = MibTableColumn
airIRG3IdentIndex = _AirIRG3IdentIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 1),
    _AirIRG3IdentIndex_Type()
)
airIRG3IdentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3IdentIndex.setStatus("mandatory")
_AirIRG3IdentName_Type = DisplayString
_AirIRG3IdentName_Object = MibTableColumn
airIRG3IdentName = _AirIRG3IdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 2),
    _AirIRG3IdentName_Type()
)
airIRG3IdentName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3IdentName.setStatus("mandatory")
_AirIRG3IdentLocation_Type = DisplayString
_AirIRG3IdentLocation_Object = MibTableColumn
airIRG3IdentLocation = _AirIRG3IdentLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 3),
    _AirIRG3IdentLocation_Type()
)
airIRG3IdentLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3IdentLocation.setStatus("mandatory")
_AirIRG3IdentModelNumber_Type = DisplayString
_AirIRG3IdentModelNumber_Object = MibTableColumn
airIRG3IdentModelNumber = _AirIRG3IdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 4),
    _AirIRG3IdentModelNumber_Type()
)
airIRG3IdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3IdentModelNumber.setStatus("mandatory")
_AirIRG3IdentSerialNumber_Type = DisplayString
_AirIRG3IdentSerialNumber_Object = MibTableColumn
airIRG3IdentSerialNumber = _AirIRG3IdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 5),
    _AirIRG3IdentSerialNumber_Type()
)
airIRG3IdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3IdentSerialNumber.setStatus("mandatory")
_AirIRG3IdentFirmwareRevision_Type = DisplayString
_AirIRG3IdentFirmwareRevision_Object = MibTableColumn
airIRG3IdentFirmwareRevision = _AirIRG3IdentFirmwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 6),
    _AirIRG3IdentFirmwareRevision_Type()
)
airIRG3IdentFirmwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3IdentFirmwareRevision.setStatus("mandatory")
_AirIRG3IdentHardwareRevision_Type = DisplayString
_AirIRG3IdentHardwareRevision_Object = MibTableColumn
airIRG3IdentHardwareRevision = _AirIRG3IdentHardwareRevision_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 7),
    _AirIRG3IdentHardwareRevision_Type()
)
airIRG3IdentHardwareRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3IdentHardwareRevision.setStatus("mandatory")
_AirIRG3IdentManufactureDate_Type = DisplayString
_AirIRG3IdentManufactureDate_Object = MibTableColumn
airIRG3IdentManufactureDate = _AirIRG3IdentManufactureDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 8),
    _AirIRG3IdentManufactureDate_Type()
)
airIRG3IdentManufactureDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3IdentManufactureDate.setStatus("mandatory")
_AirIRG3IdentRDUSysOID_Type = ObjectIdentifier
_AirIRG3IdentRDUSysOID_Object = MibTableColumn
airIRG3IdentRDUSysOID = _AirIRG3IdentRDUSysOID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 9),
    _AirIRG3IdentRDUSysOID_Type()
)
airIRG3IdentRDUSysOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3IdentRDUSysOID.setStatus("mandatory")
_AirIRG3IdentCMSysOID_Type = ObjectIdentifier
_AirIRG3IdentCMSysOID_Object = MibTableColumn
airIRG3IdentCMSysOID = _AirIRG3IdentCMSysOID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 10),
    _AirIRG3IdentCMSysOID_Type()
)
airIRG3IdentCMSysOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3IdentCMSysOID.setStatus("mandatory")
_AirIRG3IdentGroupSysOID_Type = ObjectIdentifier
_AirIRG3IdentGroupSysOID_Object = MibTableColumn
airIRG3IdentGroupSysOID = _AirIRG3IdentGroupSysOID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 1, 2, 1, 11),
    _AirIRG3IdentGroupSysOID_Type()
)
airIRG3IdentGroupSysOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3IdentGroupSysOID.setStatus("mandatory")
_AirIRG3Group_ObjectIdentity = ObjectIdentity
airIRG3Group = _AirIRG3Group_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2)
)
_AirIRG3GroupTableSize_Type = Integer32
_AirIRG3GroupTableSize_Object = MibScalar
airIRG3GroupTableSize = _AirIRG3GroupTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 1),
    _AirIRG3GroupTableSize_Type()
)
airIRG3GroupTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupTableSize.setStatus("mandatory")
_AirIRG3GroupStatusTable_Object = MibTable
airIRG3GroupStatusTable = _AirIRG3GroupStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2)
)
if mibBuilder.loadTexts:
    airIRG3GroupStatusTable.setStatus("mandatory")
_AirIRG3GroupStatusEntry_Object = MibTableRow
airIRG3GroupStatusEntry = _AirIRG3GroupStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1)
)
airIRG3GroupStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3GroupStatusIndex"),
)
if mibBuilder.loadTexts:
    airIRG3GroupStatusEntry.setStatus("mandatory")
_AirIRG3GroupStatusIndex_Type = Integer32
_AirIRG3GroupStatusIndex_Object = MibTableColumn
airIRG3GroupStatusIndex = _AirIRG3GroupStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 1),
    _AirIRG3GroupStatusIndex_Type()
)
airIRG3GroupStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusIndex.setStatus("mandatory")
_AirIRG3GroupStatusCoolOutput_Type = Integer32
_AirIRG3GroupStatusCoolOutput_Object = MibTableColumn
airIRG3GroupStatusCoolOutput = _AirIRG3GroupStatusCoolOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 2),
    _AirIRG3GroupStatusCoolOutput_Type()
)
airIRG3GroupStatusCoolOutput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusCoolOutput.setStatus("mandatory")
_AirIRG3GroupStatusCoolDemand_Type = Integer32
_AirIRG3GroupStatusCoolDemand_Object = MibTableColumn
airIRG3GroupStatusCoolDemand = _AirIRG3GroupStatusCoolDemand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 3),
    _AirIRG3GroupStatusCoolDemand_Type()
)
airIRG3GroupStatusCoolDemand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusCoolDemand.setStatus("mandatory")
_AirIRG3GroupStatusAirFlowUS_Type = Integer32
_AirIRG3GroupStatusAirFlowUS_Object = MibTableColumn
airIRG3GroupStatusAirFlowUS = _AirIRG3GroupStatusAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 4),
    _AirIRG3GroupStatusAirFlowUS_Type()
)
airIRG3GroupStatusAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusAirFlowUS.setStatus("mandatory")
_AirIRG3GroupStatusAirFlowMetric_Type = Integer32
_AirIRG3GroupStatusAirFlowMetric_Object = MibTableColumn
airIRG3GroupStatusAirFlowMetric = _AirIRG3GroupStatusAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 5),
    _AirIRG3GroupStatusAirFlowMetric_Type()
)
airIRG3GroupStatusAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusAirFlowMetric.setStatus("mandatory")
_AirIRG3GroupStatusMaxRackInletTempUS_Type = Integer32
_AirIRG3GroupStatusMaxRackInletTempUS_Object = MibTableColumn
airIRG3GroupStatusMaxRackInletTempUS = _AirIRG3GroupStatusMaxRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 6),
    _AirIRG3GroupStatusMaxRackInletTempUS_Type()
)
airIRG3GroupStatusMaxRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusMaxRackInletTempUS.setStatus("mandatory")
_AirIRG3GroupStatusMaxRackInletTempMetric_Type = Integer32
_AirIRG3GroupStatusMaxRackInletTempMetric_Object = MibTableColumn
airIRG3GroupStatusMaxRackInletTempMetric = _AirIRG3GroupStatusMaxRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 7),
    _AirIRG3GroupStatusMaxRackInletTempMetric_Type()
)
airIRG3GroupStatusMaxRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusMaxRackInletTempMetric.setStatus("mandatory")
_AirIRG3GroupStatusMinRackInletTempUS_Type = Integer32
_AirIRG3GroupStatusMinRackInletTempUS_Object = MibTableColumn
airIRG3GroupStatusMinRackInletTempUS = _AirIRG3GroupStatusMinRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 8),
    _AirIRG3GroupStatusMinRackInletTempUS_Type()
)
airIRG3GroupStatusMinRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusMinRackInletTempUS.setStatus("mandatory")
_AirIRG3GroupStatusMinRackInletTempMetric_Type = Integer32
_AirIRG3GroupStatusMinRackInletTempMetric_Object = MibTableColumn
airIRG3GroupStatusMinRackInletTempMetric = _AirIRG3GroupStatusMinRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 9),
    _AirIRG3GroupStatusMinRackInletTempMetric_Type()
)
airIRG3GroupStatusMinRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusMinRackInletTempMetric.setStatus("mandatory")
_AirIRG3GroupStatusMaxReturnAirTempUS_Type = Integer32
_AirIRG3GroupStatusMaxReturnAirTempUS_Object = MibTableColumn
airIRG3GroupStatusMaxReturnAirTempUS = _AirIRG3GroupStatusMaxReturnAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 10),
    _AirIRG3GroupStatusMaxReturnAirTempUS_Type()
)
airIRG3GroupStatusMaxReturnAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusMaxReturnAirTempUS.setStatus("mandatory")
_AirIRG3GroupStatusMaxReturnAirTempMetric_Type = Integer32
_AirIRG3GroupStatusMaxReturnAirTempMetric_Object = MibTableColumn
airIRG3GroupStatusMaxReturnAirTempMetric = _AirIRG3GroupStatusMaxReturnAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 11),
    _AirIRG3GroupStatusMaxReturnAirTempMetric_Type()
)
airIRG3GroupStatusMaxReturnAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusMaxReturnAirTempMetric.setStatus("mandatory")
_AirIRG3GroupStatusMinReturnAirTempUS_Type = Integer32
_AirIRG3GroupStatusMinReturnAirTempUS_Object = MibTableColumn
airIRG3GroupStatusMinReturnAirTempUS = _AirIRG3GroupStatusMinReturnAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 12),
    _AirIRG3GroupStatusMinReturnAirTempUS_Type()
)
airIRG3GroupStatusMinReturnAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusMinReturnAirTempUS.setStatus("mandatory")
_AirIRG3GroupStatusMinReturnAirTempMetric_Type = Integer32
_AirIRG3GroupStatusMinReturnAirTempMetric_Object = MibTableColumn
airIRG3GroupStatusMinReturnAirTempMetric = _AirIRG3GroupStatusMinReturnAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 13),
    _AirIRG3GroupStatusMinReturnAirTempMetric_Type()
)
airIRG3GroupStatusMinReturnAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusMinReturnAirTempMetric.setStatus("mandatory")
_AirIRG3GroupStatusAvgSupplyTempUS_Type = Integer32
_AirIRG3GroupStatusAvgSupplyTempUS_Object = MibTableColumn
airIRG3GroupStatusAvgSupplyTempUS = _AirIRG3GroupStatusAvgSupplyTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 14),
    _AirIRG3GroupStatusAvgSupplyTempUS_Type()
)
airIRG3GroupStatusAvgSupplyTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusAvgSupplyTempUS.setStatus("mandatory")
_AirIRG3GroupStatusAvgSupplyTempMetric_Type = Integer32
_AirIRG3GroupStatusAvgSupplyTempMetric_Object = MibTableColumn
airIRG3GroupStatusAvgSupplyTempMetric = _AirIRG3GroupStatusAvgSupplyTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 15),
    _AirIRG3GroupStatusAvgSupplyTempMetric_Type()
)
airIRG3GroupStatusAvgSupplyTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusAvgSupplyTempMetric.setStatus("mandatory")
_AirIRG3GroupStatusAvgReturnTempUS_Type = Integer32
_AirIRG3GroupStatusAvgReturnTempUS_Object = MibTableColumn
airIRG3GroupStatusAvgReturnTempUS = _AirIRG3GroupStatusAvgReturnTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 16),
    _AirIRG3GroupStatusAvgReturnTempUS_Type()
)
airIRG3GroupStatusAvgReturnTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusAvgReturnTempUS.setStatus("mandatory")
_AirIRG3GroupStatusAvgReturnTempMetric_Type = Integer32
_AirIRG3GroupStatusAvgReturnTempMetric_Object = MibTableColumn
airIRG3GroupStatusAvgReturnTempMetric = _AirIRG3GroupStatusAvgReturnTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 17),
    _AirIRG3GroupStatusAvgReturnTempMetric_Type()
)
airIRG3GroupStatusAvgReturnTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusAvgReturnTempMetric.setStatus("mandatory")
_AirIRG3GroupStatusAvgFanSpeed_Type = Integer32
_AirIRG3GroupStatusAvgFanSpeed_Object = MibTableColumn
airIRG3GroupStatusAvgFanSpeed = _AirIRG3GroupStatusAvgFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 18),
    _AirIRG3GroupStatusAvgFanSpeed_Type()
)
airIRG3GroupStatusAvgFanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusAvgFanSpeed.setStatus("mandatory")
_AirIRG3GroupStatusAvgAirFlowUS_Type = Integer32
_AirIRG3GroupStatusAvgAirFlowUS_Object = MibTableColumn
airIRG3GroupStatusAvgAirFlowUS = _AirIRG3GroupStatusAvgAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 19),
    _AirIRG3GroupStatusAvgAirFlowUS_Type()
)
airIRG3GroupStatusAvgAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusAvgAirFlowUS.setStatus("mandatory")
_AirIRG3GroupStatusAvgAirFlowMetric_Type = Integer32
_AirIRG3GroupStatusAvgAirFlowMetric_Object = MibTableColumn
airIRG3GroupStatusAvgAirFlowMetric = _AirIRG3GroupStatusAvgAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 20),
    _AirIRG3GroupStatusAvgAirFlowMetric_Type()
)
airIRG3GroupStatusAvgAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusAvgAirFlowMetric.setStatus("mandatory")
_AirIRG3GroupStatusTotalAirFlowUS_Type = Integer32
_AirIRG3GroupStatusTotalAirFlowUS_Object = MibTableColumn
airIRG3GroupStatusTotalAirFlowUS = _AirIRG3GroupStatusTotalAirFlowUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 21),
    _AirIRG3GroupStatusTotalAirFlowUS_Type()
)
airIRG3GroupStatusTotalAirFlowUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusTotalAirFlowUS.setStatus("mandatory")
_AirIRG3GroupStatusTotalAirFlowMetric_Type = Integer32
_AirIRG3GroupStatusTotalAirFlowMetric_Object = MibTableColumn
airIRG3GroupStatusTotalAirFlowMetric = _AirIRG3GroupStatusTotalAirFlowMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 2, 1, 22),
    _AirIRG3GroupStatusTotalAirFlowMetric_Type()
)
airIRG3GroupStatusTotalAirFlowMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupStatusTotalAirFlowMetric.setStatus("mandatory")
_AirIRG3GroupSetpointsTable_Object = MibTable
airIRG3GroupSetpointsTable = _AirIRG3GroupSetpointsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3)
)
if mibBuilder.loadTexts:
    airIRG3GroupSetpointsTable.setStatus("mandatory")
_AirIRG3GroupSetpointsEntry_Object = MibTableRow
airIRG3GroupSetpointsEntry = _AirIRG3GroupSetpointsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1)
)
airIRG3GroupSetpointsEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3GroupSetpointsIndex"),
)
if mibBuilder.loadTexts:
    airIRG3GroupSetpointsEntry.setStatus("mandatory")
_AirIRG3GroupSetpointsIndex_Type = Integer32
_AirIRG3GroupSetpointsIndex_Object = MibTableColumn
airIRG3GroupSetpointsIndex = _AirIRG3GroupSetpointsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 1),
    _AirIRG3GroupSetpointsIndex_Type()
)
airIRG3GroupSetpointsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupSetpointsIndex.setStatus("mandatory")
_AirIRG3GroupSetpointsCoolSetpointUS_Type = Integer32
_AirIRG3GroupSetpointsCoolSetpointUS_Object = MibTableColumn
airIRG3GroupSetpointsCoolSetpointUS = _AirIRG3GroupSetpointsCoolSetpointUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 2),
    _AirIRG3GroupSetpointsCoolSetpointUS_Type()
)
airIRG3GroupSetpointsCoolSetpointUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupSetpointsCoolSetpointUS.setStatus("mandatory")
_AirIRG3GroupSetpointsCoolSetpointMetric_Type = Integer32
_AirIRG3GroupSetpointsCoolSetpointMetric_Object = MibTableColumn
airIRG3GroupSetpointsCoolSetpointMetric = _AirIRG3GroupSetpointsCoolSetpointMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 3),
    _AirIRG3GroupSetpointsCoolSetpointMetric_Type()
)
airIRG3GroupSetpointsCoolSetpointMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupSetpointsCoolSetpointMetric.setStatus("mandatory")
_AirIRG3GroupSetpointsCoolDeadbandUS_Type = Integer32
_AirIRG3GroupSetpointsCoolDeadbandUS_Object = MibTableColumn
airIRG3GroupSetpointsCoolDeadbandUS = _AirIRG3GroupSetpointsCoolDeadbandUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 4),
    _AirIRG3GroupSetpointsCoolDeadbandUS_Type()
)
airIRG3GroupSetpointsCoolDeadbandUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupSetpointsCoolDeadbandUS.setStatus("mandatory")
_AirIRG3GroupSetpointsCoolDeadbandMetric_Type = Integer32
_AirIRG3GroupSetpointsCoolDeadbandMetric_Object = MibTableColumn
airIRG3GroupSetpointsCoolDeadbandMetric = _AirIRG3GroupSetpointsCoolDeadbandMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 5),
    _AirIRG3GroupSetpointsCoolDeadbandMetric_Type()
)
airIRG3GroupSetpointsCoolDeadbandMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupSetpointsCoolDeadbandMetric.setStatus("mandatory")


class _AirIRG3GroupSetpointsFanSpeedPreference_Type(Integer32):
    """Custom type airIRG3GroupSetpointsFanSpeedPreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("high", 5),
          ("low", 1),
          ("med", 3),
          ("med-high", 4),
          ("med-low", 2))
    )


_AirIRG3GroupSetpointsFanSpeedPreference_Type.__name__ = "Integer32"
_AirIRG3GroupSetpointsFanSpeedPreference_Object = MibTableColumn
airIRG3GroupSetpointsFanSpeedPreference = _AirIRG3GroupSetpointsFanSpeedPreference_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 6),
    _AirIRG3GroupSetpointsFanSpeedPreference_Type()
)
airIRG3GroupSetpointsFanSpeedPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupSetpointsFanSpeedPreference.setStatus("mandatory")
_AirIRG3GroupSetpointsSupplyAirSetpointUS_Type = Integer32
_AirIRG3GroupSetpointsSupplyAirSetpointUS_Object = MibTableColumn
airIRG3GroupSetpointsSupplyAirSetpointUS = _AirIRG3GroupSetpointsSupplyAirSetpointUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 7),
    _AirIRG3GroupSetpointsSupplyAirSetpointUS_Type()
)
airIRG3GroupSetpointsSupplyAirSetpointUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupSetpointsSupplyAirSetpointUS.setStatus("mandatory")
_AirIRG3GroupSetpointsSupplyAirSetpointMetric_Type = Integer32
_AirIRG3GroupSetpointsSupplyAirSetpointMetric_Object = MibTableColumn
airIRG3GroupSetpointsSupplyAirSetpointMetric = _AirIRG3GroupSetpointsSupplyAirSetpointMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 8),
    _AirIRG3GroupSetpointsSupplyAirSetpointMetric_Type()
)
airIRG3GroupSetpointsSupplyAirSetpointMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupSetpointsSupplyAirSetpointMetric.setStatus("mandatory")


class _AirIRG3GroupSetpointsAirFlowControl_Type(Integer32):
    """Custom type airIRG3GroupSetpointsAirFlowControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("manual", 2))
    )


_AirIRG3GroupSetpointsAirFlowControl_Type.__name__ = "Integer32"
_AirIRG3GroupSetpointsAirFlowControl_Object = MibTableColumn
airIRG3GroupSetpointsAirFlowControl = _AirIRG3GroupSetpointsAirFlowControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 9),
    _AirIRG3GroupSetpointsAirFlowControl_Type()
)
airIRG3GroupSetpointsAirFlowControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupSetpointsAirFlowControl.setStatus("mandatory")
_AirIRG3GroupSetpointsLightingOnTime_Type = Integer32
_AirIRG3GroupSetpointsLightingOnTime_Object = MibTableColumn
airIRG3GroupSetpointsLightingOnTime = _AirIRG3GroupSetpointsLightingOnTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 3, 1, 10),
    _AirIRG3GroupSetpointsLightingOnTime_Type()
)
airIRG3GroupSetpointsLightingOnTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupSetpointsLightingOnTime.setStatus("mandatory")
_AirIRG3GroupConfigTable_Object = MibTable
airIRG3GroupConfigTable = _AirIRG3GroupConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4)
)
if mibBuilder.loadTexts:
    airIRG3GroupConfigTable.setStatus("mandatory")
_AirIRG3GroupConfigEntry_Object = MibTableRow
airIRG3GroupConfigEntry = _AirIRG3GroupConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1)
)
airIRG3GroupConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3GroupConfigIndex"),
)
if mibBuilder.loadTexts:
    airIRG3GroupConfigEntry.setStatus("mandatory")
_AirIRG3GroupConfigIndex_Type = Integer32
_AirIRG3GroupConfigIndex_Object = MibTableColumn
airIRG3GroupConfigIndex = _AirIRG3GroupConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 1),
    _AirIRG3GroupConfigIndex_Type()
)
airIRG3GroupConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3GroupConfigIndex.setStatus("mandatory")
_AirIRG3GroupConfigNumberofCoolingUnits_Type = Integer32
_AirIRG3GroupConfigNumberofCoolingUnits_Object = MibTableColumn
airIRG3GroupConfigNumberofCoolingUnits = _AirIRG3GroupConfigNumberofCoolingUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 2),
    _AirIRG3GroupConfigNumberofCoolingUnits_Type()
)
airIRG3GroupConfigNumberofCoolingUnits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupConfigNumberofCoolingUnits.setStatus("mandatory")


class _AirIRG3GroupConfigConfigurationType_Type(Integer32):
    """Custom type airIRG3GroupConfigConfigurationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("hacs", 4),
          ("in-row", 3),
          ("racs", 1),
          ("spot", 2))
    )


_AirIRG3GroupConfigConfigurationType_Type.__name__ = "Integer32"
_AirIRG3GroupConfigConfigurationType_Object = MibTableColumn
airIRG3GroupConfigConfigurationType = _AirIRG3GroupConfigConfigurationType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 3),
    _AirIRG3GroupConfigConfigurationType_Type()
)
airIRG3GroupConfigConfigurationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupConfigConfigurationType.setStatus("mandatory")


class _AirIRG3GroupConfigCapacityControlType_Type(Integer32):
    """Custom type airIRG3GroupConfigCapacityControlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("discrete", 1),
          ("proportional", 2))
    )


_AirIRG3GroupConfigCapacityControlType_Type.__name__ = "Integer32"
_AirIRG3GroupConfigCapacityControlType_Object = MibTableColumn
airIRG3GroupConfigCapacityControlType = _AirIRG3GroupConfigCapacityControlType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 4),
    _AirIRG3GroupConfigCapacityControlType_Type()
)
airIRG3GroupConfigCapacityControlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupConfigCapacityControlType.setStatus("mandatory")


class _AirIRG3GroupConfigFanSpeedControl_Type(Integer32):
    """Custom type airIRG3GroupConfigFanSpeedControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("manual", 2))
    )


_AirIRG3GroupConfigFanSpeedControl_Type.__name__ = "Integer32"
_AirIRG3GroupConfigFanSpeedControl_Object = MibTableColumn
airIRG3GroupConfigFanSpeedControl = _AirIRG3GroupConfigFanSpeedControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 5),
    _AirIRG3GroupConfigFanSpeedControl_Type()
)
airIRG3GroupConfigFanSpeedControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupConfigFanSpeedControl.setStatus("mandatory")
_AirIRG3GroupConfigCoolGainP_Type = Integer32
_AirIRG3GroupConfigCoolGainP_Object = MibTableColumn
airIRG3GroupConfigCoolGainP = _AirIRG3GroupConfigCoolGainP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 6),
    _AirIRG3GroupConfigCoolGainP_Type()
)
airIRG3GroupConfigCoolGainP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupConfigCoolGainP.setStatus("mandatory")
_AirIRG3GroupConfigCoolResetRateI_Type = Integer32
_AirIRG3GroupConfigCoolResetRateI_Object = MibTableColumn
airIRG3GroupConfigCoolResetRateI = _AirIRG3GroupConfigCoolResetRateI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 7),
    _AirIRG3GroupConfigCoolResetRateI_Type()
)
airIRG3GroupConfigCoolResetRateI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupConfigCoolResetRateI.setStatus("mandatory")
_AirIRG3GroupConfigCoolDerivativeD_Type = Integer32
_AirIRG3GroupConfigCoolDerivativeD_Object = MibTableColumn
airIRG3GroupConfigCoolDerivativeD = _AirIRG3GroupConfigCoolDerivativeD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 8),
    _AirIRG3GroupConfigCoolDerivativeD_Type()
)
airIRG3GroupConfigCoolDerivativeD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupConfigCoolDerivativeD.setStatus("mandatory")


class _AirIRG3GroupConfigCoolPIDReset_Type(Integer32):
    """Custom type airIRG3GroupConfigCoolPIDReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("readBack", 1),
          ("reset", 2))
    )


_AirIRG3GroupConfigCoolPIDReset_Type.__name__ = "Integer32"
_AirIRG3GroupConfigCoolPIDReset_Object = MibTableColumn
airIRG3GroupConfigCoolPIDReset = _AirIRG3GroupConfigCoolPIDReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 9),
    _AirIRG3GroupConfigCoolPIDReset_Type()
)
airIRG3GroupConfigCoolPIDReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupConfigCoolPIDReset.setStatus("mandatory")
_AirIRG3GroupConfigNumberofBackupUnits_Type = Integer32
_AirIRG3GroupConfigNumberofBackupUnits_Object = MibTableColumn
airIRG3GroupConfigNumberofBackupUnits = _AirIRG3GroupConfigNumberofBackupUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 10),
    _AirIRG3GroupConfigNumberofBackupUnits_Type()
)
airIRG3GroupConfigNumberofBackupUnits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupConfigNumberofBackupUnits.setStatus("mandatory")


class _AirIRG3GroupConfigRuntimeBalancingEnable_Type(Integer32):
    """Custom type airIRG3GroupConfigRuntimeBalancingEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirIRG3GroupConfigRuntimeBalancingEnable_Type.__name__ = "Integer32"
_AirIRG3GroupConfigRuntimeBalancingEnable_Object = MibTableColumn
airIRG3GroupConfigRuntimeBalancingEnable = _AirIRG3GroupConfigRuntimeBalancingEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 11),
    _AirIRG3GroupConfigRuntimeBalancingEnable_Type()
)
airIRG3GroupConfigRuntimeBalancingEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupConfigRuntimeBalancingEnable.setStatus("mandatory")


class _AirIRG3GroupConfigLoadAssistEnable_Type(Integer32):
    """Custom type airIRG3GroupConfigLoadAssistEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirIRG3GroupConfigLoadAssistEnable_Type.__name__ = "Integer32"
_AirIRG3GroupConfigLoadAssistEnable_Object = MibTableColumn
airIRG3GroupConfigLoadAssistEnable = _AirIRG3GroupConfigLoadAssistEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 2, 4, 1, 12),
    _AirIRG3GroupConfigLoadAssistEnable_Type()
)
airIRG3GroupConfigLoadAssistEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3GroupConfigLoadAssistEnable.setStatus("mandatory")
_AirIRG3Alarms_ObjectIdentity = ObjectIdentity
airIRG3Alarms = _AirIRG3Alarms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3)
)
_AirIRG3AlarmsTableSize_Type = Integer32
_AirIRG3AlarmsTableSize_Object = MibScalar
airIRG3AlarmsTableSize = _AirIRG3AlarmsTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 1),
    _AirIRG3AlarmsTableSize_Type()
)
airIRG3AlarmsTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3AlarmsTableSize.setStatus("mandatory")
_AirIRG3AlarmsTable_Object = MibTable
airIRG3AlarmsTable = _AirIRG3AlarmsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2)
)
if mibBuilder.loadTexts:
    airIRG3AlarmsTable.setStatus("mandatory")
_AirIRG3AlarmsEntry_Object = MibTableRow
airIRG3AlarmsEntry = _AirIRG3AlarmsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1)
)
airIRG3AlarmsEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3AlarmsIndex"),
)
if mibBuilder.loadTexts:
    airIRG3AlarmsEntry.setStatus("mandatory")
_AirIRG3AlarmsIndex_Type = Integer32
_AirIRG3AlarmsIndex_Object = MibTableColumn
airIRG3AlarmsIndex = _AirIRG3AlarmsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1, 1),
    _AirIRG3AlarmsIndex_Type()
)
airIRG3AlarmsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3AlarmsIndex.setStatus("mandatory")
_AirIRG3AlarmsEventCode_Type = Integer32
_AirIRG3AlarmsEventCode_Object = MibTableColumn
airIRG3AlarmsEventCode = _AirIRG3AlarmsEventCode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1, 2),
    _AirIRG3AlarmsEventCode_Type()
)
airIRG3AlarmsEventCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3AlarmsEventCode.setStatus("mandatory")


class _AirIRG3AlarmsDescription_Type(DisplayString):
    """Custom type airIRG3AlarmsDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_AirIRG3AlarmsDescription_Type.__name__ = "DisplayString"
_AirIRG3AlarmsDescription_Object = MibTableColumn
airIRG3AlarmsDescription = _AirIRG3AlarmsDescription_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 3, 2, 1, 3),
    _AirIRG3AlarmsDescription_Type()
)
airIRG3AlarmsDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3AlarmsDescription.setStatus("mandatory")
_AirIRG3RDU_ObjectIdentity = ObjectIdentity
airIRG3RDU = _AirIRG3RDU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4)
)
_AirIRG3RDUTableSize_Type = Integer32
_AirIRG3RDUTableSize_Object = MibScalar
airIRG3RDUTableSize = _AirIRG3RDUTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 1),
    _AirIRG3RDUTableSize_Type()
)
airIRG3RDUTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUTableSize.setStatus("mandatory")
_AirIRG3RDUStatusTable_Object = MibTable
airIRG3RDUStatusTable = _AirIRG3RDUStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2)
)
if mibBuilder.loadTexts:
    airIRG3RDUStatusTable.setStatus("mandatory")
_AirIRG3RDUStatusEntry_Object = MibTableRow
airIRG3RDUStatusEntry = _AirIRG3RDUStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1)
)
airIRG3RDUStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3RDUStatusDeviceIndex"),
)
if mibBuilder.loadTexts:
    airIRG3RDUStatusEntry.setStatus("mandatory")
_AirIRG3RDUStatusDeviceIndex_Type = Integer32
_AirIRG3RDUStatusDeviceIndex_Object = MibTableColumn
airIRG3RDUStatusDeviceIndex = _AirIRG3RDUStatusDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 1),
    _AirIRG3RDUStatusDeviceIndex_Type()
)
airIRG3RDUStatusDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusDeviceIndex.setStatus("mandatory")
_AirIRG3RDUID_Type = DisplayString
_AirIRG3RDUID_Object = MibTableColumn
airIRG3RDUID = _AirIRG3RDUID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 2),
    _AirIRG3RDUID_Type()
)
airIRG3RDUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUID.setStatus("mandatory")


class _AirIRG3RDUStatusOnReadyStandby_Type(Integer32):
    """Custom type airIRG3RDUStatusOnReadyStandby based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 3),
          ("ready", 2),
          ("standby", 1))
    )


_AirIRG3RDUStatusOnReadyStandby_Type.__name__ = "Integer32"
_AirIRG3RDUStatusOnReadyStandby_Object = MibTableColumn
airIRG3RDUStatusOnReadyStandby = _AirIRG3RDUStatusOnReadyStandby_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 3),
    _AirIRG3RDUStatusOnReadyStandby_Type()
)
airIRG3RDUStatusOnReadyStandby.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusOnReadyStandby.setStatus("mandatory")


class _AirIRG3RDUStatusOperatingMode_Type(Integer32):
    """Custom type airIRG3RDUStatusOperatingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("maintenancemode", 5),
          ("on", 3),
          ("ready", 2),
          ("standby", 1),
          ("stop", 4))
    )


_AirIRG3RDUStatusOperatingMode_Type.__name__ = "Integer32"
_AirIRG3RDUStatusOperatingMode_Object = MibTableColumn
airIRG3RDUStatusOperatingMode = _AirIRG3RDUStatusOperatingMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 4),
    _AirIRG3RDUStatusOperatingMode_Type()
)
airIRG3RDUStatusOperatingMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusOperatingMode.setStatus("mandatory")


class _AirIRG3RDUStatusLeadPump_Type(Integer32):
    """Custom type airIRG3RDUStatusLeadPump based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("pump1", 1),
          ("pump2", 2))
    )


_AirIRG3RDUStatusLeadPump_Type.__name__ = "Integer32"
_AirIRG3RDUStatusLeadPump_Object = MibTableColumn
airIRG3RDUStatusLeadPump = _AirIRG3RDUStatusLeadPump_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 5),
    _AirIRG3RDUStatusLeadPump_Type()
)
airIRG3RDUStatusLeadPump.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusLeadPump.setStatus("mandatory")
_AirIRG3RDUStatusStartupDelay_Type = Integer32
_AirIRG3RDUStatusStartupDelay_Object = MibTableColumn
airIRG3RDUStatusStartupDelay = _AirIRG3RDUStatusStartupDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 6),
    _AirIRG3RDUStatusStartupDelay_Type()
)
airIRG3RDUStatusStartupDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusStartupDelay.setStatus("mandatory")
_AirIRG3RDUStatusPumpChangeOverInterval_Type = Integer32
_AirIRG3RDUStatusPumpChangeOverInterval_Object = MibTableColumn
airIRG3RDUStatusPumpChangeOverInterval = _AirIRG3RDUStatusPumpChangeOverInterval_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 7),
    _AirIRG3RDUStatusPumpChangeOverInterval_Type()
)
airIRG3RDUStatusPumpChangeOverInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusPumpChangeOverInterval.setStatus("mandatory")


class _AirIRG3RDUStatusStopOnLeakDetect_Type(Integer32):
    """Custom type airIRG3RDUStatusStopOnLeakDetect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_AirIRG3RDUStatusStopOnLeakDetect_Type.__name__ = "Integer32"
_AirIRG3RDUStatusStopOnLeakDetect_Object = MibTableColumn
airIRG3RDUStatusStopOnLeakDetect = _AirIRG3RDUStatusStopOnLeakDetect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 8),
    _AirIRG3RDUStatusStopOnLeakDetect_Type()
)
airIRG3RDUStatusStopOnLeakDetect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusStopOnLeakDetect.setStatus("mandatory")


class _AirIRG3RDUStatusPowerSource_Type(Integer32):
    """Custom type airIRG3RDUStatusPowerSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dualFeed", 2),
          ("singleFeed", 1))
    )


_AirIRG3RDUStatusPowerSource_Type.__name__ = "Integer32"
_AirIRG3RDUStatusPowerSource_Object = MibTableColumn
airIRG3RDUStatusPowerSource = _AirIRG3RDUStatusPowerSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 9),
    _AirIRG3RDUStatusPowerSource_Type()
)
airIRG3RDUStatusPowerSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusPowerSource.setStatus("mandatory")
_AirIRG3RDUStatusTotalRDUOutputPower_Type = Integer32
_AirIRG3RDUStatusTotalRDUOutputPower_Object = MibTableColumn
airIRG3RDUStatusTotalRDUOutputPower = _AirIRG3RDUStatusTotalRDUOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 10),
    _AirIRG3RDUStatusTotalRDUOutputPower_Type()
)
airIRG3RDUStatusTotalRDUOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusTotalRDUOutputPower.setStatus("mandatory")
_AirIRG3RDUStatusInletWaterTempUS_Type = Integer32
_AirIRG3RDUStatusInletWaterTempUS_Object = MibTableColumn
airIRG3RDUStatusInletWaterTempUS = _AirIRG3RDUStatusInletWaterTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 11),
    _AirIRG3RDUStatusInletWaterTempUS_Type()
)
airIRG3RDUStatusInletWaterTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusInletWaterTempUS.setStatus("mandatory")
_AirIRG3RDUStatusInletWaterTempMetric_Type = Integer32
_AirIRG3RDUStatusInletWaterTempMetric_Object = MibTableColumn
airIRG3RDUStatusInletWaterTempMetric = _AirIRG3RDUStatusInletWaterTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 12),
    _AirIRG3RDUStatusInletWaterTempMetric_Type()
)
airIRG3RDUStatusInletWaterTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusInletWaterTempMetric.setStatus("mandatory")
_AirIRG3RDUStatusOutletWaterTempUS_Type = Integer32
_AirIRG3RDUStatusOutletWaterTempUS_Object = MibTableColumn
airIRG3RDUStatusOutletWaterTempUS = _AirIRG3RDUStatusOutletWaterTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 13),
    _AirIRG3RDUStatusOutletWaterTempUS_Type()
)
airIRG3RDUStatusOutletWaterTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusOutletWaterTempUS.setStatus("mandatory")
_AirIRG3RDUStatusOutletWaterTempMetric_Type = Integer32
_AirIRG3RDUStatusOutletWaterTempMetric_Object = MibTableColumn
airIRG3RDUStatusOutletWaterTempMetric = _AirIRG3RDUStatusOutletWaterTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 14),
    _AirIRG3RDUStatusOutletWaterTempMetric_Type()
)
airIRG3RDUStatusOutletWaterTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusOutletWaterTempMetric.setStatus("mandatory")
_AirIRG3RDUStatusCondenserSaturationTempUS_Type = Integer32
_AirIRG3RDUStatusCondenserSaturationTempUS_Object = MibTableColumn
airIRG3RDUStatusCondenserSaturationTempUS = _AirIRG3RDUStatusCondenserSaturationTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 15),
    _AirIRG3RDUStatusCondenserSaturationTempUS_Type()
)
airIRG3RDUStatusCondenserSaturationTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusCondenserSaturationTempUS.setStatus("mandatory")
_AirIRG3RDUStatusCondenserSaturationTempMetric_Type = Integer32
_AirIRG3RDUStatusCondenserSaturationTempMetric_Object = MibTableColumn
airIRG3RDUStatusCondenserSaturationTempMetric = _AirIRG3RDUStatusCondenserSaturationTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 16),
    _AirIRG3RDUStatusCondenserSaturationTempMetric_Type()
)
airIRG3RDUStatusCondenserSaturationTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusCondenserSaturationTempMetric.setStatus("mandatory")
_AirIRG3RDUStatusDewPointTempUS_Type = Integer32
_AirIRG3RDUStatusDewPointTempUS_Object = MibTableColumn
airIRG3RDUStatusDewPointTempUS = _AirIRG3RDUStatusDewPointTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 17),
    _AirIRG3RDUStatusDewPointTempUS_Type()
)
airIRG3RDUStatusDewPointTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusDewPointTempUS.setStatus("mandatory")
_AirIRG3RDUStatusDewPointTempMetric_Type = Integer32
_AirIRG3RDUStatusDewPointTempMetric_Object = MibTableColumn
airIRG3RDUStatusDewPointTempMetric = _AirIRG3RDUStatusDewPointTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 18),
    _AirIRG3RDUStatusDewPointTempMetric_Type()
)
airIRG3RDUStatusDewPointTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusDewPointTempMetric.setStatus("mandatory")
_AirIRG3RDUStatusPumpOutletTempUS_Type = Integer32
_AirIRG3RDUStatusPumpOutletTempUS_Object = MibTableColumn
airIRG3RDUStatusPumpOutletTempUS = _AirIRG3RDUStatusPumpOutletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 19),
    _AirIRG3RDUStatusPumpOutletTempUS_Type()
)
airIRG3RDUStatusPumpOutletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusPumpOutletTempUS.setStatus("mandatory")
_AirIRG3RDUStatusPumpOutletTempMetric_Type = Integer32
_AirIRG3RDUStatusPumpOutletTempMetric_Object = MibTableColumn
airIRG3RDUStatusPumpOutletTempMetric = _AirIRG3RDUStatusPumpOutletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 20),
    _AirIRG3RDUStatusPumpOutletTempMetric_Type()
)
airIRG3RDUStatusPumpOutletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusPumpOutletTempMetric.setStatus("mandatory")
_AirIRG3RDUStatusSubcoolerOutletTempUS_Type = Integer32
_AirIRG3RDUStatusSubcoolerOutletTempUS_Object = MibTableColumn
airIRG3RDUStatusSubcoolerOutletTempUS = _AirIRG3RDUStatusSubcoolerOutletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 21),
    _AirIRG3RDUStatusSubcoolerOutletTempUS_Type()
)
airIRG3RDUStatusSubcoolerOutletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusSubcoolerOutletTempUS.setStatus("mandatory")
_AirIRG3RDUStatusSubcoolerOutletTempMetric_Type = Integer32
_AirIRG3RDUStatusSubcoolerOutletTempMetric_Object = MibTableColumn
airIRG3RDUStatusSubcoolerOutletTempMetric = _AirIRG3RDUStatusSubcoolerOutletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 22),
    _AirIRG3RDUStatusSubcoolerOutletTempMetric_Type()
)
airIRG3RDUStatusSubcoolerOutletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusSubcoolerOutletTempMetric.setStatus("mandatory")
_AirIRG3RDUStatusCondenserOutletTempUS_Type = Integer32
_AirIRG3RDUStatusCondenserOutletTempUS_Object = MibTableColumn
airIRG3RDUStatusCondenserOutletTempUS = _AirIRG3RDUStatusCondenserOutletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 23),
    _AirIRG3RDUStatusCondenserOutletTempUS_Type()
)
airIRG3RDUStatusCondenserOutletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusCondenserOutletTempUS.setStatus("mandatory")
_AirIRG3RDUStatusCondenserOutletTempMetric_Type = Integer32
_AirIRG3RDUStatusCondenserOutletTempMetric_Object = MibTableColumn
airIRG3RDUStatusCondenserOutletTempMetric = _AirIRG3RDUStatusCondenserOutletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 24),
    _AirIRG3RDUStatusCondenserOutletTempMetric_Type()
)
airIRG3RDUStatusCondenserOutletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusCondenserOutletTempMetric.setStatus("mandatory")
_AirIRG3RDUStatusCondenserInletTempUS_Type = Integer32
_AirIRG3RDUStatusCondenserInletTempUS_Object = MibTableColumn
airIRG3RDUStatusCondenserInletTempUS = _AirIRG3RDUStatusCondenserInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 25),
    _AirIRG3RDUStatusCondenserInletTempUS_Type()
)
airIRG3RDUStatusCondenserInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusCondenserInletTempUS.setStatus("mandatory")
_AirIRG3RDUStatusCondenserInletTempMetric_Type = Integer32
_AirIRG3RDUStatusCondenserInletTempMetric_Object = MibTableColumn
airIRG3RDUStatusCondenserInletTempMetric = _AirIRG3RDUStatusCondenserInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 26),
    _AirIRG3RDUStatusCondenserInletTempMetric_Type()
)
airIRG3RDUStatusCondenserInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusCondenserInletTempMetric.setStatus("mandatory")
_AirIRG3RDUStatusCondenserOutletPressureUS_Type = Integer32
_AirIRG3RDUStatusCondenserOutletPressureUS_Object = MibTableColumn
airIRG3RDUStatusCondenserOutletPressureUS = _AirIRG3RDUStatusCondenserOutletPressureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 27),
    _AirIRG3RDUStatusCondenserOutletPressureUS_Type()
)
airIRG3RDUStatusCondenserOutletPressureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusCondenserOutletPressureUS.setStatus("mandatory")
_AirIRG3RDUStatusCondenserOutletPressureMetric_Type = Integer32
_AirIRG3RDUStatusCondenserOutletPressureMetric_Object = MibTableColumn
airIRG3RDUStatusCondenserOutletPressureMetric = _AirIRG3RDUStatusCondenserOutletPressureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 28),
    _AirIRG3RDUStatusCondenserOutletPressureMetric_Type()
)
airIRG3RDUStatusCondenserOutletPressureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusCondenserOutletPressureMetric.setStatus("mandatory")
_AirIRG3RDUStatusPump1HeadPressureUS_Type = Integer32
_AirIRG3RDUStatusPump1HeadPressureUS_Object = MibTableColumn
airIRG3RDUStatusPump1HeadPressureUS = _AirIRG3RDUStatusPump1HeadPressureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 29),
    _AirIRG3RDUStatusPump1HeadPressureUS_Type()
)
airIRG3RDUStatusPump1HeadPressureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusPump1HeadPressureUS.setStatus("mandatory")
_AirIRG3RDUStatusPump1HeadPressureMetric_Type = Integer32
_AirIRG3RDUStatusPump1HeadPressureMetric_Object = MibTableColumn
airIRG3RDUStatusPump1HeadPressureMetric = _AirIRG3RDUStatusPump1HeadPressureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 30),
    _AirIRG3RDUStatusPump1HeadPressureMetric_Type()
)
airIRG3RDUStatusPump1HeadPressureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusPump1HeadPressureMetric.setStatus("mandatory")
_AirIRG3RDUStatusPump2HeadPressureUS_Type = Integer32
_AirIRG3RDUStatusPump2HeadPressureUS_Object = MibTableColumn
airIRG3RDUStatusPump2HeadPressureUS = _AirIRG3RDUStatusPump2HeadPressureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 31),
    _AirIRG3RDUStatusPump2HeadPressureUS_Type()
)
airIRG3RDUStatusPump2HeadPressureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusPump2HeadPressureUS.setStatus("mandatory")
_AirIRG3RDUStatusPump2HeadPressureMetric_Type = Integer32
_AirIRG3RDUStatusPump2HeadPressureMetric_Object = MibTableColumn
airIRG3RDUStatusPump2HeadPressureMetric = _AirIRG3RDUStatusPump2HeadPressureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 32),
    _AirIRG3RDUStatusPump2HeadPressureMetric_Type()
)
airIRG3RDUStatusPump2HeadPressureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusPump2HeadPressureMetric.setStatus("mandatory")
_AirIRG3RDUStatusPump1Speed_Type = Integer32
_AirIRG3RDUStatusPump1Speed_Object = MibTableColumn
airIRG3RDUStatusPump1Speed = _AirIRG3RDUStatusPump1Speed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 33),
    _AirIRG3RDUStatusPump1Speed_Type()
)
airIRG3RDUStatusPump1Speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusPump1Speed.setStatus("mandatory")
_AirIRG3RDUStatusPump2Speed_Type = Integer32
_AirIRG3RDUStatusPump2Speed_Object = MibTableColumn
airIRG3RDUStatusPump2Speed = _AirIRG3RDUStatusPump2Speed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 34),
    _AirIRG3RDUStatusPump2Speed_Type()
)
airIRG3RDUStatusPump2Speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusPump2Speed.setStatus("mandatory")
_AirIRG3RDUStatusCWValvePosition_Type = Integer32
_AirIRG3RDUStatusCWValvePosition_Object = MibTableColumn
airIRG3RDUStatusCWValvePosition = _AirIRG3RDUStatusCWValvePosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 35),
    _AirIRG3RDUStatusCWValvePosition_Type()
)
airIRG3RDUStatusCWValvePosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusCWValvePosition.setStatus("mandatory")
_AirIRG3RDUStatusReceiverLiquidLevel_Type = Integer32
_AirIRG3RDUStatusReceiverLiquidLevel_Object = MibTableColumn
airIRG3RDUStatusReceiverLiquidLevel = _AirIRG3RDUStatusReceiverLiquidLevel_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 36),
    _AirIRG3RDUStatusReceiverLiquidLevel_Type()
)
airIRG3RDUStatusReceiverLiquidLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusReceiverLiquidLevel.setStatus("mandatory")
_AirIRG3RDUStatusDCPowerSupply1Current_Type = Integer32
_AirIRG3RDUStatusDCPowerSupply1Current_Object = MibTableColumn
airIRG3RDUStatusDCPowerSupply1Current = _AirIRG3RDUStatusDCPowerSupply1Current_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 37),
    _AirIRG3RDUStatusDCPowerSupply1Current_Type()
)
airIRG3RDUStatusDCPowerSupply1Current.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusDCPowerSupply1Current.setStatus("mandatory")
_AirIRG3RDUStatusDCPowerSupply2Current_Type = Integer32
_AirIRG3RDUStatusDCPowerSupply2Current_Object = MibTableColumn
airIRG3RDUStatusDCPowerSupply2Current = _AirIRG3RDUStatusDCPowerSupply2Current_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 38),
    _AirIRG3RDUStatusDCPowerSupply2Current_Type()
)
airIRG3RDUStatusDCPowerSupply2Current.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusDCPowerSupply2Current.setStatus("mandatory")
_AirIRG3RDUStatusTotalDCPowerSupplyCurrent_Type = Integer32
_AirIRG3RDUStatusTotalDCPowerSupplyCurrent_Object = MibTableColumn
airIRG3RDUStatusTotalDCPowerSupplyCurrent = _AirIRG3RDUStatusTotalDCPowerSupplyCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 39),
    _AirIRG3RDUStatusTotalDCPowerSupplyCurrent_Type()
)
airIRG3RDUStatusTotalDCPowerSupplyCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusTotalDCPowerSupplyCurrent.setStatus("mandatory")


class _AirIRG3RDUStatusInputState_Type(Integer32):
    """Custom type airIRG3RDUStatusInputState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRG3RDUStatusInputState_Type.__name__ = "Integer32"
_AirIRG3RDUStatusInputState_Object = MibTableColumn
airIRG3RDUStatusInputState = _AirIRG3RDUStatusInputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 40),
    _AirIRG3RDUStatusInputState_Type()
)
airIRG3RDUStatusInputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusInputState.setStatus("mandatory")


class _AirIRG3RDUStatusOutputState_Type(Integer32):
    """Custom type airIRG3RDUStatusOutputState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRG3RDUStatusOutputState_Type.__name__ = "Integer32"
_AirIRG3RDUStatusOutputState_Object = MibTableColumn
airIRG3RDUStatusOutputState = _AirIRG3RDUStatusOutputState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 41),
    _AirIRG3RDUStatusOutputState_Type()
)
airIRG3RDUStatusOutputState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusOutputState.setStatus("mandatory")
_AirIRG3RDUStatusByPassValvePosition_Type = Integer32
_AirIRG3RDUStatusByPassValvePosition_Object = MibTableColumn
airIRG3RDUStatusByPassValvePosition = _AirIRG3RDUStatusByPassValvePosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 42),
    _AirIRG3RDUStatusByPassValvePosition_Type()
)
airIRG3RDUStatusByPassValvePosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusByPassValvePosition.setStatus("mandatory")


class _AirIRG3RDUStatusRefrigerantLeakDetector_Type(Integer32):
    """Custom type airIRG3RDUStatusRefrigerantLeakDetector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calibrating", 2),
          ("disabled", 4),
          ("operating", 3),
          ("suspended", 1))
    )


_AirIRG3RDUStatusRefrigerantLeakDetector_Type.__name__ = "Integer32"
_AirIRG3RDUStatusRefrigerantLeakDetector_Object = MibTableColumn
airIRG3RDUStatusRefrigerantLeakDetector = _AirIRG3RDUStatusRefrigerantLeakDetector_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 2, 1, 43),
    _AirIRG3RDUStatusRefrigerantLeakDetector_Type()
)
airIRG3RDUStatusRefrigerantLeakDetector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUStatusRefrigerantLeakDetector.setStatus("mandatory")
_AirIRG3RDURunHoursTable_Object = MibTable
airIRG3RDURunHoursTable = _AirIRG3RDURunHoursTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3)
)
if mibBuilder.loadTexts:
    airIRG3RDURunHoursTable.setStatus("mandatory")
_AirIRG3RDURunHoursEntry_Object = MibTableRow
airIRG3RDURunHoursEntry = _AirIRG3RDURunHoursEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1)
)
airIRG3RDURunHoursEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3RDURunHoursDeviceIndex"),
)
if mibBuilder.loadTexts:
    airIRG3RDURunHoursEntry.setStatus("mandatory")
_AirIRG3RDURunHoursDeviceIndex_Type = Integer32
_AirIRG3RDURunHoursDeviceIndex_Object = MibTableColumn
airIRG3RDURunHoursDeviceIndex = _AirIRG3RDURunHoursDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 1),
    _AirIRG3RDURunHoursDeviceIndex_Type()
)
airIRG3RDURunHoursDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDURunHoursDeviceIndex.setStatus("mandatory")
_AirIRG3RDURunHoursRDUID_Type = DisplayString
_AirIRG3RDURunHoursRDUID_Object = MibTableColumn
airIRG3RDURunHoursRDUID = _AirIRG3RDURunHoursRDUID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 2),
    _AirIRG3RDURunHoursRDUID_Type()
)
airIRG3RDURunHoursRDUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDURunHoursRDUID.setStatus("mandatory")
_AirIRG3RDURunHoursPump1_Type = Integer32
_AirIRG3RDURunHoursPump1_Object = MibTableColumn
airIRG3RDURunHoursPump1 = _AirIRG3RDURunHoursPump1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 3),
    _AirIRG3RDURunHoursPump1_Type()
)
airIRG3RDURunHoursPump1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDURunHoursPump1.setStatus("mandatory")
_AirIRG3RDURunHoursPump2_Type = Integer32
_AirIRG3RDURunHoursPump2_Object = MibTableColumn
airIRG3RDURunHoursPump2 = _AirIRG3RDURunHoursPump2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 4),
    _AirIRG3RDURunHoursPump2_Type()
)
airIRG3RDURunHoursPump2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDURunHoursPump2.setStatus("mandatory")
_AirIRG3RDURunHoursPowerSupply1_Type = Integer32
_AirIRG3RDURunHoursPowerSupply1_Object = MibTableColumn
airIRG3RDURunHoursPowerSupply1 = _AirIRG3RDURunHoursPowerSupply1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 5),
    _AirIRG3RDURunHoursPowerSupply1_Type()
)
airIRG3RDURunHoursPowerSupply1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDURunHoursPowerSupply1.setStatus("mandatory")
_AirIRG3RDURunHoursPowerSupply2_Type = Integer32
_AirIRG3RDURunHoursPowerSupply2_Object = MibTableColumn
airIRG3RDURunHoursPowerSupply2 = _AirIRG3RDURunHoursPowerSupply2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 3, 1, 6),
    _AirIRG3RDURunHoursPowerSupply2_Type()
)
airIRG3RDURunHoursPowerSupply2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDURunHoursPowerSupply2.setStatus("mandatory")
_AirIRG3RDUServiceIntervalsTable_Object = MibTable
airIRG3RDUServiceIntervalsTable = _AirIRG3RDUServiceIntervalsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4)
)
if mibBuilder.loadTexts:
    airIRG3RDUServiceIntervalsTable.setStatus("mandatory")
_AirIRG3RDUServiceIntervalsEntry_Object = MibTableRow
airIRG3RDUServiceIntervalsEntry = _AirIRG3RDUServiceIntervalsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1)
)
airIRG3RDUServiceIntervalsEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3RDUServiceIntervalsDeviceIndex"),
)
if mibBuilder.loadTexts:
    airIRG3RDUServiceIntervalsEntry.setStatus("mandatory")
_AirIRG3RDUServiceIntervalsDeviceIndex_Type = Integer32
_AirIRG3RDUServiceIntervalsDeviceIndex_Object = MibTableColumn
airIRG3RDUServiceIntervalsDeviceIndex = _AirIRG3RDUServiceIntervalsDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 1),
    _AirIRG3RDUServiceIntervalsDeviceIndex_Type()
)
airIRG3RDUServiceIntervalsDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUServiceIntervalsDeviceIndex.setStatus("mandatory")
_AirIRG3RDUServiceIntervalsRDUID_Type = DisplayString
_AirIRG3RDUServiceIntervalsRDUID_Object = MibTableColumn
airIRG3RDUServiceIntervalsRDUID = _AirIRG3RDUServiceIntervalsRDUID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 2),
    _AirIRG3RDUServiceIntervalsRDUID_Type()
)
airIRG3RDUServiceIntervalsRDUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUServiceIntervalsRDUID.setStatus("mandatory")
_AirIRG3RDUServiceIntervalsAirFilterInterval_Type = Integer32
_AirIRG3RDUServiceIntervalsAirFilterInterval_Object = MibTableColumn
airIRG3RDUServiceIntervalsAirFilterInterval = _AirIRG3RDUServiceIntervalsAirFilterInterval_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 3),
    _AirIRG3RDUServiceIntervalsAirFilterInterval_Type()
)
airIRG3RDUServiceIntervalsAirFilterInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUServiceIntervalsAirFilterInterval.setStatus("mandatory")


class _AirIRG3RDUServiceIntervalsAirFilterAlarm_Type(Integer32):
    """Custom type airIRG3RDUServiceIntervalsAirFilterAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AirIRG3RDUServiceIntervalsAirFilterAlarm_Type.__name__ = "Integer32"
_AirIRG3RDUServiceIntervalsAirFilterAlarm_Object = MibTableColumn
airIRG3RDUServiceIntervalsAirFilterAlarm = _AirIRG3RDUServiceIntervalsAirFilterAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 4, 1, 4),
    _AirIRG3RDUServiceIntervalsAirFilterAlarm_Type()
)
airIRG3RDUServiceIntervalsAirFilterAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUServiceIntervalsAirFilterAlarm.setStatus("mandatory")
_AirIRG3RDUThresholdsTable_Object = MibTable
airIRG3RDUThresholdsTable = _AirIRG3RDUThresholdsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5)
)
if mibBuilder.loadTexts:
    airIRG3RDUThresholdsTable.setStatus("mandatory")
_AirIRG3RDUThresholdsEntry_Object = MibTableRow
airIRG3RDUThresholdsEntry = _AirIRG3RDUThresholdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1)
)
airIRG3RDUThresholdsEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3RDUThresholdsDeviceIndex"),
)
if mibBuilder.loadTexts:
    airIRG3RDUThresholdsEntry.setStatus("mandatory")
_AirIRG3RDUThresholdsDeviceIndex_Type = Integer32
_AirIRG3RDUThresholdsDeviceIndex_Object = MibTableColumn
airIRG3RDUThresholdsDeviceIndex = _AirIRG3RDUThresholdsDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 1),
    _AirIRG3RDUThresholdsDeviceIndex_Type()
)
airIRG3RDUThresholdsDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUThresholdsDeviceIndex.setStatus("mandatory")
_AirIRG3RDUThresholdsRDUID_Type = DisplayString
_AirIRG3RDUThresholdsRDUID_Object = MibTableColumn
airIRG3RDUThresholdsRDUID = _AirIRG3RDUThresholdsRDUID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 2),
    _AirIRG3RDUThresholdsRDUID_Type()
)
airIRG3RDUThresholdsRDUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUThresholdsRDUID.setStatus("mandatory")
_AirIRG3RDUThresholdsEnteringFluidTempHighUS_Type = Integer32
_AirIRG3RDUThresholdsEnteringFluidTempHighUS_Object = MibTableColumn
airIRG3RDUThresholdsEnteringFluidTempHighUS = _AirIRG3RDUThresholdsEnteringFluidTempHighUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 3),
    _AirIRG3RDUThresholdsEnteringFluidTempHighUS_Type()
)
airIRG3RDUThresholdsEnteringFluidTempHighUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUThresholdsEnteringFluidTempHighUS.setStatus("mandatory")
_AirIRG3RDUThresholdsEnteringFluidTempHighMetric_Type = Integer32
_AirIRG3RDUThresholdsEnteringFluidTempHighMetric_Object = MibTableColumn
airIRG3RDUThresholdsEnteringFluidTempHighMetric = _AirIRG3RDUThresholdsEnteringFluidTempHighMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 5, 1, 4),
    _AirIRG3RDUThresholdsEnteringFluidTempHighMetric_Type()
)
airIRG3RDUThresholdsEnteringFluidTempHighMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUThresholdsEnteringFluidTempHighMetric.setStatus("mandatory")
_AirIRG3RDUSetpointsTable_Object = MibTable
airIRG3RDUSetpointsTable = _AirIRG3RDUSetpointsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 6)
)
if mibBuilder.loadTexts:
    airIRG3RDUSetpointsTable.setStatus("mandatory")
_AirIRG3RDUSetpointsEntry_Object = MibTableRow
airIRG3RDUSetpointsEntry = _AirIRG3RDUSetpointsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 6, 1)
)
airIRG3RDUSetpointsEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3RDUSetpointsDeviceIndex"),
)
if mibBuilder.loadTexts:
    airIRG3RDUSetpointsEntry.setStatus("mandatory")
_AirIRG3RDUSetpointsDeviceIndex_Type = Integer32
_AirIRG3RDUSetpointsDeviceIndex_Object = MibTableColumn
airIRG3RDUSetpointsDeviceIndex = _AirIRG3RDUSetpointsDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 6, 1, 1),
    _AirIRG3RDUSetpointsDeviceIndex_Type()
)
airIRG3RDUSetpointsDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUSetpointsDeviceIndex.setStatus("mandatory")
_AirIRG3RDUConfigTable_Object = MibTable
airIRG3RDUConfigTable = _AirIRG3RDUConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7)
)
if mibBuilder.loadTexts:
    airIRG3RDUConfigTable.setStatus("mandatory")
_AirIRG3RDUConfigEntry_Object = MibTableRow
airIRG3RDUConfigEntry = _AirIRG3RDUConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1)
)
airIRG3RDUConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3RDUConfigDeviceIndex"),
)
if mibBuilder.loadTexts:
    airIRG3RDUConfigEntry.setStatus("mandatory")
_AirIRG3RDUConfigDeviceIndex_Type = Integer32
_AirIRG3RDUConfigDeviceIndex_Object = MibTableColumn
airIRG3RDUConfigDeviceIndex = _AirIRG3RDUConfigDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 1),
    _AirIRG3RDUConfigDeviceIndex_Type()
)
airIRG3RDUConfigDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUConfigDeviceIndex.setStatus("mandatory")
_AirIRG3RDUConfigRDUID_Type = DisplayString
_AirIRG3RDUConfigRDUID_Object = MibTableColumn
airIRG3RDUConfigRDUID = _AirIRG3RDUConfigRDUID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 2),
    _AirIRG3RDUConfigRDUID_Type()
)
airIRG3RDUConfigRDUID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3RDUConfigRDUID.setStatus("mandatory")


class _AirIRG3RDUConfigStopOnLeakDetect_Type(Integer32):
    """Custom type airIRG3RDUConfigStopOnLeakDetect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_AirIRG3RDUConfigStopOnLeakDetect_Type.__name__ = "Integer32"
_AirIRG3RDUConfigStopOnLeakDetect_Object = MibTableColumn
airIRG3RDUConfigStopOnLeakDetect = _AirIRG3RDUConfigStopOnLeakDetect_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 3),
    _AirIRG3RDUConfigStopOnLeakDetect_Type()
)
airIRG3RDUConfigStopOnLeakDetect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUConfigStopOnLeakDetect.setStatus("mandatory")
_AirIRG3RDUConfigStartupDelay_Type = Integer32
_AirIRG3RDUConfigStartupDelay_Object = MibTableColumn
airIRG3RDUConfigStartupDelay = _AirIRG3RDUConfigStartupDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 4),
    _AirIRG3RDUConfigStartupDelay_Type()
)
airIRG3RDUConfigStartupDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUConfigStartupDelay.setStatus("mandatory")
_AirIRG3RDUConfigPumpChangeOverInterval_Type = Integer32
_AirIRG3RDUConfigPumpChangeOverInterval_Object = MibTableColumn
airIRG3RDUConfigPumpChangeOverInterval = _AirIRG3RDUConfigPumpChangeOverInterval_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 5),
    _AirIRG3RDUConfigPumpChangeOverInterval_Type()
)
airIRG3RDUConfigPumpChangeOverInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUConfigPumpChangeOverInterval.setStatus("mandatory")


class _AirIRG3RDUConfigPowerSource_Type(Integer32):
    """Custom type airIRG3RDUConfigPowerSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dualFeed", 2),
          ("singleFeed", 1))
    )


_AirIRG3RDUConfigPowerSource_Type.__name__ = "Integer32"
_AirIRG3RDUConfigPowerSource_Object = MibTableColumn
airIRG3RDUConfigPowerSource = _AirIRG3RDUConfigPowerSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 6),
    _AirIRG3RDUConfigPowerSource_Type()
)
airIRG3RDUConfigPowerSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUConfigPowerSource.setStatus("mandatory")


class _AirIRG3RDUConfigOutputSource_Type(Integer32):
    """Custom type airIRG3RDUConfigOutputSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("anyalarm", 1),
          ("onlycriticalalarms", 2))
    )


_AirIRG3RDUConfigOutputSource_Type.__name__ = "Integer32"
_AirIRG3RDUConfigOutputSource_Object = MibTableColumn
airIRG3RDUConfigOutputSource = _AirIRG3RDUConfigOutputSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 7),
    _AirIRG3RDUConfigOutputSource_Type()
)
airIRG3RDUConfigOutputSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUConfigOutputSource.setStatus("mandatory")


class _AirIRG3RDUConfigInputNormalState_Type(Integer32):
    """Custom type airIRG3RDUConfigInputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRG3RDUConfigInputNormalState_Type.__name__ = "Integer32"
_AirIRG3RDUConfigInputNormalState_Object = MibTableColumn
airIRG3RDUConfigInputNormalState = _AirIRG3RDUConfigInputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 8),
    _AirIRG3RDUConfigInputNormalState_Type()
)
airIRG3RDUConfigInputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUConfigInputNormalState.setStatus("mandatory")


class _AirIRG3RDUConfigOutputNormalState_Type(Integer32):
    """Custom type airIRG3RDUConfigOutputNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_AirIRG3RDUConfigOutputNormalState_Type.__name__ = "Integer32"
_AirIRG3RDUConfigOutputNormalState_Object = MibTableColumn
airIRG3RDUConfigOutputNormalState = _AirIRG3RDUConfigOutputNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 9),
    _AirIRG3RDUConfigOutputNormalState_Type()
)
airIRG3RDUConfigOutputNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUConfigOutputNormalState.setStatus("mandatory")


class _AirIRG3RDUConfigByPassValveEnabled_Type(Integer32):
    """Custom type airIRG3RDUConfigByPassValveEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_AirIRG3RDUConfigByPassValveEnabled_Type.__name__ = "Integer32"
_AirIRG3RDUConfigByPassValveEnabled_Object = MibTableColumn
airIRG3RDUConfigByPassValveEnabled = _AirIRG3RDUConfigByPassValveEnabled_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 10),
    _AirIRG3RDUConfigByPassValveEnabled_Type()
)
airIRG3RDUConfigByPassValveEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUConfigByPassValveEnabled.setStatus("mandatory")


class _AirIRG3RDUConfigRefrigerantLeakDetectorEnabled_Type(Integer32):
    """Custom type airIRG3RDUConfigRefrigerantLeakDetectorEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_AirIRG3RDUConfigRefrigerantLeakDetectorEnabled_Type.__name__ = "Integer32"
_AirIRG3RDUConfigRefrigerantLeakDetectorEnabled_Object = MibTableColumn
airIRG3RDUConfigRefrigerantLeakDetectorEnabled = _AirIRG3RDUConfigRefrigerantLeakDetectorEnabled_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 11),
    _AirIRG3RDUConfigRefrigerantLeakDetectorEnabled_Type()
)
airIRG3RDUConfigRefrigerantLeakDetectorEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUConfigRefrigerantLeakDetectorEnabled.setStatus("mandatory")


class _AirIRG3RDUConfigCalibrateRefrigerantLeakDetector_Type(Integer32):
    """Custom type airIRG3RDUConfigCalibrateRefrigerantLeakDetector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_AirIRG3RDUConfigCalibrateRefrigerantLeakDetector_Type.__name__ = "Integer32"
_AirIRG3RDUConfigCalibrateRefrigerantLeakDetector_Object = MibTableColumn
airIRG3RDUConfigCalibrateRefrigerantLeakDetector = _AirIRG3RDUConfigCalibrateRefrigerantLeakDetector_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 12),
    _AirIRG3RDUConfigCalibrateRefrigerantLeakDetector_Type()
)
airIRG3RDUConfigCalibrateRefrigerantLeakDetector.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUConfigCalibrateRefrigerantLeakDetector.setStatus("mandatory")


class _AirIRG3RDUConfigOnReadyStandby_Type(Integer32):
    """Custom type airIRG3RDUConfigOnReadyStandby based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("on", 3),
          ("ready", 2),
          ("standby", 1))
    )


_AirIRG3RDUConfigOnReadyStandby_Type.__name__ = "Integer32"
_AirIRG3RDUConfigOnReadyStandby_Object = MibTableColumn
airIRG3RDUConfigOnReadyStandby = _AirIRG3RDUConfigOnReadyStandby_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 4, 7, 1, 13),
    _AirIRG3RDUConfigOnReadyStandby_Type()
)
airIRG3RDUConfigOnReadyStandby.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3RDUConfigOnReadyStandby.setStatus("mandatory")
_AirIRG3CM_ObjectIdentity = ObjectIdentity
airIRG3CM = _AirIRG3CM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5)
)
_AirIRG3CMTableSize_Type = Integer32
_AirIRG3CMTableSize_Object = MibScalar
airIRG3CMTableSize = _AirIRG3CMTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 1),
    _AirIRG3CMTableSize_Type()
)
airIRG3CMTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMTableSize.setStatus("mandatory")
_AirIRG3CMStatusTable_Object = MibTable
airIRG3CMStatusTable = _AirIRG3CMStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2)
)
if mibBuilder.loadTexts:
    airIRG3CMStatusTable.setStatus("mandatory")
_AirIRG3CMStatusEntry_Object = MibTableRow
airIRG3CMStatusEntry = _AirIRG3CMStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1)
)
airIRG3CMStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3CMStatusDeviceIndex"),
)
if mibBuilder.loadTexts:
    airIRG3CMStatusEntry.setStatus("mandatory")
_AirIRG3CMStatusDeviceIndex_Type = Integer32
_AirIRG3CMStatusDeviceIndex_Object = MibTableColumn
airIRG3CMStatusDeviceIndex = _AirIRG3CMStatusDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 1),
    _AirIRG3CMStatusDeviceIndex_Type()
)
airIRG3CMStatusDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusDeviceIndex.setStatus("mandatory")
_AirIRG3CMStatusCMID_Type = DisplayString
_AirIRG3CMStatusCMID_Object = MibTableColumn
airIRG3CMStatusCMID = _AirIRG3CMStatusCMID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 2),
    _AirIRG3CMStatusCMID_Type()
)
airIRG3CMStatusCMID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusCMID.setStatus("mandatory")


class _AirIRG3CMStatusOperatingMode_Type(Integer32):
    """Custom type airIRG3CMStatusOperatingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("idle", 3),
          ("on", 2),
          ("standBy", 1))
    )


_AirIRG3CMStatusOperatingMode_Type.__name__ = "Integer32"
_AirIRG3CMStatusOperatingMode_Object = MibTableColumn
airIRG3CMStatusOperatingMode = _AirIRG3CMStatusOperatingMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 3),
    _AirIRG3CMStatusOperatingMode_Type()
)
airIRG3CMStatusOperatingMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusOperatingMode.setStatus("mandatory")


class _AirIRG3CMStatusUnitType_Type(Integer32):
    """Custom type airIRG3CMStatusUnitType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("oa", 2),
          ("ra", 3),
          ("unconfigured", 1))
    )


_AirIRG3CMStatusUnitType_Type.__name__ = "Integer32"
_AirIRG3CMStatusUnitType_Object = MibTableColumn
airIRG3CMStatusUnitType = _AirIRG3CMStatusUnitType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 4),
    _AirIRG3CMStatusUnitType_Type()
)
airIRG3CMStatusUnitType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusUnitType.setStatus("mandatory")
_AirIRG3CMStatusRackInletTempUS_Type = Integer32
_AirIRG3CMStatusRackInletTempUS_Object = MibTableColumn
airIRG3CMStatusRackInletTempUS = _AirIRG3CMStatusRackInletTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 5),
    _AirIRG3CMStatusRackInletTempUS_Type()
)
airIRG3CMStatusRackInletTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusRackInletTempUS.setStatus("mandatory")
_AirIRG3CMStatusRackInletTempMetric_Type = Integer32
_AirIRG3CMStatusRackInletTempMetric_Object = MibTableColumn
airIRG3CMStatusRackInletTempMetric = _AirIRG3CMStatusRackInletTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 6),
    _AirIRG3CMStatusRackInletTempMetric_Type()
)
airIRG3CMStatusRackInletTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusRackInletTempMetric.setStatus("mandatory")
_AirIRG3CMStatusReturnAirTempUS_Type = Integer32
_AirIRG3CMStatusReturnAirTempUS_Object = MibTableColumn
airIRG3CMStatusReturnAirTempUS = _AirIRG3CMStatusReturnAirTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 7),
    _AirIRG3CMStatusReturnAirTempUS_Type()
)
airIRG3CMStatusReturnAirTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusReturnAirTempUS.setStatus("mandatory")
_AirIRG3CMStatusReturnAirTempMetric_Type = Integer32
_AirIRG3CMStatusReturnAirTempMetric_Object = MibTableColumn
airIRG3CMStatusReturnAirTempMetric = _AirIRG3CMStatusReturnAirTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 8),
    _AirIRG3CMStatusReturnAirTempMetric_Type()
)
airIRG3CMStatusReturnAirTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusReturnAirTempMetric.setStatus("mandatory")
_AirIRG3CMStatusLiquidTempUS_Type = Integer32
_AirIRG3CMStatusLiquidTempUS_Object = MibTableColumn
airIRG3CMStatusLiquidTempUS = _AirIRG3CMStatusLiquidTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 9),
    _AirIRG3CMStatusLiquidTempUS_Type()
)
airIRG3CMStatusLiquidTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusLiquidTempUS.setStatus("mandatory")
_AirIRG3CMStatusLiquidTempMetric_Type = Integer32
_AirIRG3CMStatusLiquidTempMetric_Object = MibTableColumn
airIRG3CMStatusLiquidTempMetric = _AirIRG3CMStatusLiquidTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 10),
    _AirIRG3CMStatusLiquidTempMetric_Type()
)
airIRG3CMStatusLiquidTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusLiquidTempMetric.setStatus("mandatory")
_AirIRG3CMStatusVaporTempUS_Type = Integer32
_AirIRG3CMStatusVaporTempUS_Object = MibTableColumn
airIRG3CMStatusVaporTempUS = _AirIRG3CMStatusVaporTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 11),
    _AirIRG3CMStatusVaporTempUS_Type()
)
airIRG3CMStatusVaporTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusVaporTempUS.setStatus("mandatory")
_AirIRG3CMStatusVaporTempMetric_Type = Integer32
_AirIRG3CMStatusVaporTempMetric_Object = MibTableColumn
airIRG3CMStatusVaporTempMetric = _AirIRG3CMStatusVaporTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 12),
    _AirIRG3CMStatusVaporTempMetric_Type()
)
airIRG3CMStatusVaporTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusVaporTempMetric.setStatus("mandatory")
_AirIRG3CMStatusEvaporatorTempUS_Type = Integer32
_AirIRG3CMStatusEvaporatorTempUS_Object = MibTableColumn
airIRG3CMStatusEvaporatorTempUS = _AirIRG3CMStatusEvaporatorTempUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 13),
    _AirIRG3CMStatusEvaporatorTempUS_Type()
)
airIRG3CMStatusEvaporatorTempUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusEvaporatorTempUS.setStatus("mandatory")
_AirIRG3CMStatusEvaporatorTempMetric_Type = Integer32
_AirIRG3CMStatusEvaporatorTempMetric_Object = MibTableColumn
airIRG3CMStatusEvaporatorTempMetric = _AirIRG3CMStatusEvaporatorTempMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 14),
    _AirIRG3CMStatusEvaporatorTempMetric_Type()
)
airIRG3CMStatusEvaporatorTempMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusEvaporatorTempMetric.setStatus("mandatory")
_AirIRG3CMStatusLiquidInletPressureUS_Type = Integer32
_AirIRG3CMStatusLiquidInletPressureUS_Object = MibTableColumn
airIRG3CMStatusLiquidInletPressureUS = _AirIRG3CMStatusLiquidInletPressureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 15),
    _AirIRG3CMStatusLiquidInletPressureUS_Type()
)
airIRG3CMStatusLiquidInletPressureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusLiquidInletPressureUS.setStatus("mandatory")
_AirIRG3CMStatusLiquidInletPressureMetric_Type = Integer32
_AirIRG3CMStatusLiquidInletPressureMetric_Object = MibTableColumn
airIRG3CMStatusLiquidInletPressureMetric = _AirIRG3CMStatusLiquidInletPressureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 16),
    _AirIRG3CMStatusLiquidInletPressureMetric_Type()
)
airIRG3CMStatusLiquidInletPressureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusLiquidInletPressureMetric.setStatus("mandatory")
_AirIRG3CMStatusVaporOutletPressureUS_Type = Integer32
_AirIRG3CMStatusVaporOutletPressureUS_Object = MibTableColumn
airIRG3CMStatusVaporOutletPressureUS = _AirIRG3CMStatusVaporOutletPressureUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 17),
    _AirIRG3CMStatusVaporOutletPressureUS_Type()
)
airIRG3CMStatusVaporOutletPressureUS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusVaporOutletPressureUS.setStatus("mandatory")
_AirIRG3CMStatusVaporOutletPressureMetric_Type = Integer32
_AirIRG3CMStatusVaporOutletPressureMetric_Object = MibTableColumn
airIRG3CMStatusVaporOutletPressureMetric = _AirIRG3CMStatusVaporOutletPressureMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 18),
    _AirIRG3CMStatusVaporOutletPressureMetric_Type()
)
airIRG3CMStatusVaporOutletPressureMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusVaporOutletPressureMetric.setStatus("mandatory")
_AirIRG3CMStatusExpansionValvePosition_Type = Integer32
_AirIRG3CMStatusExpansionValvePosition_Object = MibTableColumn
airIRG3CMStatusExpansionValvePosition = _AirIRG3CMStatusExpansionValvePosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 19),
    _AirIRG3CMStatusExpansionValvePosition_Type()
)
airIRG3CMStatusExpansionValvePosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusExpansionValvePosition.setStatus("mandatory")
_AirIRG3CMStatusEPRValvePosition_Type = Integer32
_AirIRG3CMStatusEPRValvePosition_Object = MibTableColumn
airIRG3CMStatusEPRValvePosition = _AirIRG3CMStatusEPRValvePosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 20),
    _AirIRG3CMStatusEPRValvePosition_Type()
)
airIRG3CMStatusEPRValvePosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusEPRValvePosition.setStatus("mandatory")


class _AirIRG3CMStatusLocalDisplayOnOffEnabled_Type(Integer32):
    """Custom type airIRG3CMStatusLocalDisplayOnOffEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_AirIRG3CMStatusLocalDisplayOnOffEnabled_Type.__name__ = "Integer32"
_AirIRG3CMStatusLocalDisplayOnOffEnabled_Object = MibTableColumn
airIRG3CMStatusLocalDisplayOnOffEnabled = _AirIRG3CMStatusLocalDisplayOnOffEnabled_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 21),
    _AirIRG3CMStatusLocalDisplayOnOffEnabled_Type()
)
airIRG3CMStatusLocalDisplayOnOffEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusLocalDisplayOnOffEnabled.setStatus("mandatory")
_AirIRG3CMStatusAverageFanSpeed_Type = Integer32
_AirIRG3CMStatusAverageFanSpeed_Object = MibTableColumn
airIRG3CMStatusAverageFanSpeed = _AirIRG3CMStatusAverageFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 2, 1, 22),
    _AirIRG3CMStatusAverageFanSpeed_Type()
)
airIRG3CMStatusAverageFanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMStatusAverageFanSpeed.setStatus("mandatory")
_AirIRG3CMRunHoursTable_Object = MibTable
airIRG3CMRunHoursTable = _AirIRG3CMRunHoursTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3)
)
if mibBuilder.loadTexts:
    airIRG3CMRunHoursTable.setStatus("mandatory")
_AirIRG3CMRunHoursEntry_Object = MibTableRow
airIRG3CMRunHoursEntry = _AirIRG3CMRunHoursEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1)
)
airIRG3CMRunHoursEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3CMRunHoursDeviceIndex"),
)
if mibBuilder.loadTexts:
    airIRG3CMRunHoursEntry.setStatus("mandatory")
_AirIRG3CMRunHoursDeviceIndex_Type = Integer32
_AirIRG3CMRunHoursDeviceIndex_Object = MibTableColumn
airIRG3CMRunHoursDeviceIndex = _AirIRG3CMRunHoursDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 1),
    _AirIRG3CMRunHoursDeviceIndex_Type()
)
airIRG3CMRunHoursDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMRunHoursDeviceIndex.setStatus("mandatory")
_AirIRG3CMRunHoursCMID_Type = DisplayString
_AirIRG3CMRunHoursCMID_Object = MibTableColumn
airIRG3CMRunHoursCMID = _AirIRG3CMRunHoursCMID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 2),
    _AirIRG3CMRunHoursCMID_Type()
)
airIRG3CMRunHoursCMID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMRunHoursCMID.setStatus("mandatory")
_AirIRG3CMRunHoursFan1_Type = Integer32
_AirIRG3CMRunHoursFan1_Object = MibTableColumn
airIRG3CMRunHoursFan1 = _AirIRG3CMRunHoursFan1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 3),
    _AirIRG3CMRunHoursFan1_Type()
)
airIRG3CMRunHoursFan1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMRunHoursFan1.setStatus("mandatory")
_AirIRG3CMRunHoursFan2_Type = Integer32
_AirIRG3CMRunHoursFan2_Object = MibTableColumn
airIRG3CMRunHoursFan2 = _AirIRG3CMRunHoursFan2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 4),
    _AirIRG3CMRunHoursFan2_Type()
)
airIRG3CMRunHoursFan2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMRunHoursFan2.setStatus("mandatory")
_AirIRG3CMRunHoursFan3_Type = Integer32
_AirIRG3CMRunHoursFan3_Object = MibTableColumn
airIRG3CMRunHoursFan3 = _AirIRG3CMRunHoursFan3_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 5),
    _AirIRG3CMRunHoursFan3_Type()
)
airIRG3CMRunHoursFan3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMRunHoursFan3.setStatus("mandatory")
_AirIRG3CMRunHoursFan4_Type = Integer32
_AirIRG3CMRunHoursFan4_Object = MibTableColumn
airIRG3CMRunHoursFan4 = _AirIRG3CMRunHoursFan4_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 6),
    _AirIRG3CMRunHoursFan4_Type()
)
airIRG3CMRunHoursFan4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMRunHoursFan4.setStatus("mandatory")
_AirIRG3CMRunHoursFan5_Type = Integer32
_AirIRG3CMRunHoursFan5_Object = MibTableColumn
airIRG3CMRunHoursFan5 = _AirIRG3CMRunHoursFan5_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 7),
    _AirIRG3CMRunHoursFan5_Type()
)
airIRG3CMRunHoursFan5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMRunHoursFan5.setStatus("mandatory")
_AirIRG3CMRunHoursAirFilter_Type = Integer32
_AirIRG3CMRunHoursAirFilter_Object = MibTableColumn
airIRG3CMRunHoursAirFilter = _AirIRG3CMRunHoursAirFilter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 3, 1, 8),
    _AirIRG3CMRunHoursAirFilter_Type()
)
airIRG3CMRunHoursAirFilter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMRunHoursAirFilter.setStatus("mandatory")
_AirIRG3CMServiceIntervalsTable_Object = MibTable
airIRG3CMServiceIntervalsTable = _AirIRG3CMServiceIntervalsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4)
)
if mibBuilder.loadTexts:
    airIRG3CMServiceIntervalsTable.setStatus("mandatory")
_AirIRG3CMServiceIntervalsEntry_Object = MibTableRow
airIRG3CMServiceIntervalsEntry = _AirIRG3CMServiceIntervalsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1)
)
airIRG3CMServiceIntervalsEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3CMServiceIntervalsDeviceIndex"),
)
if mibBuilder.loadTexts:
    airIRG3CMServiceIntervalsEntry.setStatus("mandatory")
_AirIRG3CMServiceIntervalsDeviceIndex_Type = Integer32
_AirIRG3CMServiceIntervalsDeviceIndex_Object = MibTableColumn
airIRG3CMServiceIntervalsDeviceIndex = _AirIRG3CMServiceIntervalsDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 1),
    _AirIRG3CMServiceIntervalsDeviceIndex_Type()
)
airIRG3CMServiceIntervalsDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMServiceIntervalsDeviceIndex.setStatus("mandatory")
_AirIRG3CMServiceIntervalsCMID_Type = DisplayString
_AirIRG3CMServiceIntervalsCMID_Object = MibTableColumn
airIRG3CMServiceIntervalsCMID = _AirIRG3CMServiceIntervalsCMID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 2),
    _AirIRG3CMServiceIntervalsCMID_Type()
)
airIRG3CMServiceIntervalsCMID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMServiceIntervalsCMID.setStatus("mandatory")
_AirIRG3CMServiceIntervalsAirFilterInterval_Type = Integer32
_AirIRG3CMServiceIntervalsAirFilterInterval_Object = MibTableColumn
airIRG3CMServiceIntervalsAirFilterInterval = _AirIRG3CMServiceIntervalsAirFilterInterval_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 3),
    _AirIRG3CMServiceIntervalsAirFilterInterval_Type()
)
airIRG3CMServiceIntervalsAirFilterInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3CMServiceIntervalsAirFilterInterval.setStatus("mandatory")


class _AirIRG3CMServiceIntervalsAirFilterAlarm_Type(Integer32):
    """Custom type airIRG3CMServiceIntervalsAirFilterAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AirIRG3CMServiceIntervalsAirFilterAlarm_Type.__name__ = "Integer32"
_AirIRG3CMServiceIntervalsAirFilterAlarm_Object = MibTableColumn
airIRG3CMServiceIntervalsAirFilterAlarm = _AirIRG3CMServiceIntervalsAirFilterAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 4, 1, 4),
    _AirIRG3CMServiceIntervalsAirFilterAlarm_Type()
)
airIRG3CMServiceIntervalsAirFilterAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3CMServiceIntervalsAirFilterAlarm.setStatus("mandatory")
_AirIRG3CMThresholdsTable_Object = MibTable
airIRG3CMThresholdsTable = _AirIRG3CMThresholdsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5)
)
if mibBuilder.loadTexts:
    airIRG3CMThresholdsTable.setStatus("mandatory")
_AirIRG3CMThresholdsEntry_Object = MibTableRow
airIRG3CMThresholdsEntry = _AirIRG3CMThresholdsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1)
)
airIRG3CMThresholdsEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3CMThresholdsDeviceIndex"),
)
if mibBuilder.loadTexts:
    airIRG3CMThresholdsEntry.setStatus("mandatory")
_AirIRG3CMThresholdsDeviceIndex_Type = Integer32
_AirIRG3CMThresholdsDeviceIndex_Object = MibTableColumn
airIRG3CMThresholdsDeviceIndex = _AirIRG3CMThresholdsDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 1),
    _AirIRG3CMThresholdsDeviceIndex_Type()
)
airIRG3CMThresholdsDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMThresholdsDeviceIndex.setStatus("mandatory")
_AirIRG3CMThresholdsCMID_Type = DisplayString
_AirIRG3CMThresholdsCMID_Object = MibTableColumn
airIRG3CMThresholdsCMID = _AirIRG3CMThresholdsCMID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 2),
    _AirIRG3CMThresholdsCMID_Type()
)
airIRG3CMThresholdsCMID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMThresholdsCMID.setStatus("mandatory")
_AirIRG3CMThresholdsRackInletTempHighUS_Type = Integer32
_AirIRG3CMThresholdsRackInletTempHighUS_Object = MibTableColumn
airIRG3CMThresholdsRackInletTempHighUS = _AirIRG3CMThresholdsRackInletTempHighUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 3),
    _AirIRG3CMThresholdsRackInletTempHighUS_Type()
)
airIRG3CMThresholdsRackInletTempHighUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3CMThresholdsRackInletTempHighUS.setStatus("mandatory")
_AirIRG3CMThresholdsRackInletTempHighMetric_Type = Integer32
_AirIRG3CMThresholdsRackInletTempHighMetric_Object = MibTableColumn
airIRG3CMThresholdsRackInletTempHighMetric = _AirIRG3CMThresholdsRackInletTempHighMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 4),
    _AirIRG3CMThresholdsRackInletTempHighMetric_Type()
)
airIRG3CMThresholdsRackInletTempHighMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3CMThresholdsRackInletTempHighMetric.setStatus("mandatory")
_AirIRG3CMThresholdsSupplyAirTempHighUS_Type = Integer32
_AirIRG3CMThresholdsSupplyAirTempHighUS_Object = MibTableColumn
airIRG3CMThresholdsSupplyAirTempHighUS = _AirIRG3CMThresholdsSupplyAirTempHighUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 5),
    _AirIRG3CMThresholdsSupplyAirTempHighUS_Type()
)
airIRG3CMThresholdsSupplyAirTempHighUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3CMThresholdsSupplyAirTempHighUS.setStatus("mandatory")
_AirIRG3CMThresholdsSupplyAirTempHighMetric_Type = Integer32
_AirIRG3CMThresholdsSupplyAirTempHighMetric_Object = MibTableColumn
airIRG3CMThresholdsSupplyAirTempHighMetric = _AirIRG3CMThresholdsSupplyAirTempHighMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 6),
    _AirIRG3CMThresholdsSupplyAirTempHighMetric_Type()
)
airIRG3CMThresholdsSupplyAirTempHighMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3CMThresholdsSupplyAirTempHighMetric.setStatus("mandatory")
_AirIRG3CMThresholdsReturnAirTempHighUS_Type = Integer32
_AirIRG3CMThresholdsReturnAirTempHighUS_Object = MibTableColumn
airIRG3CMThresholdsReturnAirTempHighUS = _AirIRG3CMThresholdsReturnAirTempHighUS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 7),
    _AirIRG3CMThresholdsReturnAirTempHighUS_Type()
)
airIRG3CMThresholdsReturnAirTempHighUS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3CMThresholdsReturnAirTempHighUS.setStatus("mandatory")
_AirIRG3CMThresholdsReturnAirTempHighMetric_Type = Integer32
_AirIRG3CMThresholdsReturnAirTempHighMetric_Object = MibTableColumn
airIRG3CMThresholdsReturnAirTempHighMetric = _AirIRG3CMThresholdsReturnAirTempHighMetric_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 5, 1, 8),
    _AirIRG3CMThresholdsReturnAirTempHighMetric_Type()
)
airIRG3CMThresholdsReturnAirTempHighMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3CMThresholdsReturnAirTempHighMetric.setStatus("mandatory")
_AirIRG3CMSetpointsTable_Object = MibTable
airIRG3CMSetpointsTable = _AirIRG3CMSetpointsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 6)
)
if mibBuilder.loadTexts:
    airIRG3CMSetpointsTable.setStatus("mandatory")
_AirIRG3CMSetpointsEntry_Object = MibTableRow
airIRG3CMSetpointsEntry = _AirIRG3CMSetpointsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 6, 1)
)
airIRG3CMSetpointsEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3CMSetpointsDeviceIndex"),
)
if mibBuilder.loadTexts:
    airIRG3CMSetpointsEntry.setStatus("mandatory")
_AirIRG3CMSetpointsDeviceIndex_Type = Integer32
_AirIRG3CMSetpointsDeviceIndex_Object = MibTableColumn
airIRG3CMSetpointsDeviceIndex = _AirIRG3CMSetpointsDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 6, 1, 1),
    _AirIRG3CMSetpointsDeviceIndex_Type()
)
airIRG3CMSetpointsDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMSetpointsDeviceIndex.setStatus("mandatory")
_AirIRG3CMConfigTable_Object = MibTable
airIRG3CMConfigTable = _AirIRG3CMConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7)
)
if mibBuilder.loadTexts:
    airIRG3CMConfigTable.setStatus("mandatory")
_AirIRG3CMConfigEntry_Object = MibTableRow
airIRG3CMConfigEntry = _AirIRG3CMConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1)
)
airIRG3CMConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "airIRG3CMConfigDeviceIndex"),
)
if mibBuilder.loadTexts:
    airIRG3CMConfigEntry.setStatus("mandatory")
_AirIRG3CMConfigDeviceIndex_Type = Integer32
_AirIRG3CMConfigDeviceIndex_Object = MibTableColumn
airIRG3CMConfigDeviceIndex = _AirIRG3CMConfigDeviceIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 1),
    _AirIRG3CMConfigDeviceIndex_Type()
)
airIRG3CMConfigDeviceIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMConfigDeviceIndex.setStatus("mandatory")
_AirIRG3CMConfigCMID_Type = DisplayString
_AirIRG3CMConfigCMID_Object = MibTableColumn
airIRG3CMConfigCMID = _AirIRG3CMConfigCMID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 2),
    _AirIRG3CMConfigCMID_Type()
)
airIRG3CMConfigCMID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    airIRG3CMConfigCMID.setStatus("mandatory")


class _AirIRG3CMConfigStopOnCoolFail_Type(Integer32):
    """Custom type airIRG3CMConfigStopOnCoolFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_AirIRG3CMConfigStopOnCoolFail_Type.__name__ = "Integer32"
_AirIRG3CMConfigStopOnCoolFail_Object = MibTableColumn
airIRG3CMConfigStopOnCoolFail = _AirIRG3CMConfigStopOnCoolFail_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 3),
    _AirIRG3CMConfigStopOnCoolFail_Type()
)
airIRG3CMConfigStopOnCoolFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3CMConfigStopOnCoolFail.setStatus("mandatory")
_AirIRG3CMConfigStartupDelay_Type = Integer32
_AirIRG3CMConfigStartupDelay_Object = MibTableColumn
airIRG3CMConfigStartupDelay = _AirIRG3CMConfigStartupDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 4),
    _AirIRG3CMConfigStartupDelay_Type()
)
airIRG3CMConfigStartupDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3CMConfigStartupDelay.setStatus("mandatory")


class _AirIRG3CMConfigRemoteOnStandby_Type(Integer32):
    """Custom type airIRG3CMConfigRemoteOnStandby based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("standBy", 1))
    )


_AirIRG3CMConfigRemoteOnStandby_Type.__name__ = "Integer32"
_AirIRG3CMConfigRemoteOnStandby_Object = MibTableColumn
airIRG3CMConfigRemoteOnStandby = _AirIRG3CMConfigRemoteOnStandby_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 5),
    _AirIRG3CMConfigRemoteOnStandby_Type()
)
airIRG3CMConfigRemoteOnStandby.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3CMConfigRemoteOnStandby.setStatus("mandatory")


class _AirIRG3CMConfigPowerSource_Type(Integer32):
    """Custom type airIRG3CMConfigPowerSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dualFeed", 2),
          ("singleFeed", 1))
    )


_AirIRG3CMConfigPowerSource_Type.__name__ = "Integer32"
_AirIRG3CMConfigPowerSource_Object = MibTableColumn
airIRG3CMConfigPowerSource = _AirIRG3CMConfigPowerSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 13, 6, 5, 7, 1, 6),
    _AirIRG3CMConfigPowerSource_Type()
)
airIRG3CMConfigPowerSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    airIRG3CMConfigPowerSource.setStatus("mandatory")
_RARU_ObjectIdentity = ObjectIdentity
rARU = _RARU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14)
)
_RARUIdent_ObjectIdentity = ObjectIdentity
rARUIdent = _RARUIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1)
)
_RARUIdentTable_Object = MibTable
rARUIdentTable = _RARUIdentTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1)
)
if mibBuilder.loadTexts:
    rARUIdentTable.setStatus("mandatory")
_RARUIdentEntry_Object = MibTableRow
rARUIdentEntry = _RARUIdentEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1)
)
rARUIdentEntry.setIndexNames(
    (0, "POWERNET-MIB", "rARUIdentAruIndex"),
)
if mibBuilder.loadTexts:
    rARUIdentEntry.setStatus("mandatory")
_RARUIdentAruIndex_Type = Integer32
_RARUIdentAruIndex_Object = MibTableColumn
rARUIdentAruIndex = _RARUIdentAruIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1, 1),
    _RARUIdentAruIndex_Type()
)
rARUIdentAruIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUIdentAruIndex.setStatus("mandatory")
_RARUIdentName_Type = DisplayString
_RARUIdentName_Object = MibTableColumn
rARUIdentName = _RARUIdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 1, 1, 1, 2),
    _RARUIdentName_Type()
)
rARUIdentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUIdentName.setStatus("mandatory")
_RARUConfig_ObjectIdentity = ObjectIdentity
rARUConfig = _RARUConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2)
)
_RARUConfigTable_Object = MibTable
rARUConfigTable = _RARUConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1)
)
if mibBuilder.loadTexts:
    rARUConfigTable.setStatus("mandatory")
_RARUConfigEntry_Object = MibTableRow
rARUConfigEntry = _RARUConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1)
)
rARUConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "rARUConfigAruIndex"),
)
if mibBuilder.loadTexts:
    rARUConfigEntry.setStatus("mandatory")
_RARUConfigAruIndex_Type = Integer32
_RARUConfigAruIndex_Object = MibTableColumn
rARUConfigAruIndex = _RARUConfigAruIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 1),
    _RARUConfigAruIndex_Type()
)
rARUConfigAruIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUConfigAruIndex.setStatus("mandatory")
_RARUConfigAruName_Type = DisplayString
_RARUConfigAruName_Object = MibTableColumn
rARUConfigAruName = _RARUConfigAruName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 2),
    _RARUConfigAruName_Type()
)
rARUConfigAruName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUConfigAruName.setStatus("mandatory")


class _RARUConfigAruRemoteSetpoint_Type(Integer32):
    """Custom type rARUConfigAruRemoteSetpoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18)
        )
    )
    namedValues = NamedValues(
        *(("aru1000cfm", 14),
          ("aru100F-38C", 5),
          ("aru1400cfm", 15),
          ("aru1600cfm", 16),
          ("aru1800cfm", 17),
          ("aru2000cfm", 18),
          ("aru2kW-300cfm", 9),
          ("aru3kW-500cfm", 8),
          ("aru400cfm", 10),
          ("aru5kW-800cfm", 7),
          ("aru600cfm", 11),
          ("aru700cfm", 12),
          ("aru7kW-1200cfm", 6),
          ("aru85F-29C", 2),
          ("aru900cfm", 13),
          ("aru90F-32C", 3),
          ("aru95F-35C", 4),
          ("aruOff", 1))
    )


_RARUConfigAruRemoteSetpoint_Type.__name__ = "Integer32"
_RARUConfigAruRemoteSetpoint_Object = MibTableColumn
rARUConfigAruRemoteSetpoint = _RARUConfigAruRemoteSetpoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 3),
    _RARUConfigAruRemoteSetpoint_Type()
)
rARUConfigAruRemoteSetpoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUConfigAruRemoteSetpoint.setStatus("mandatory")


class _RARUConfigAruTempOvrdEnableDisable_Type(Integer32):
    """Custom type rARUConfigAruTempOvrdEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_RARUConfigAruTempOvrdEnableDisable_Type.__name__ = "Integer32"
_RARUConfigAruTempOvrdEnableDisable_Object = MibTableColumn
rARUConfigAruTempOvrdEnableDisable = _RARUConfigAruTempOvrdEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 4),
    _RARUConfigAruTempOvrdEnableDisable_Type()
)
rARUConfigAruTempOvrdEnableDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUConfigAruTempOvrdEnableDisable.setStatus("mandatory")
_RARUConfigAruTempOvrdSetpoint_Type = Integer32
_RARUConfigAruTempOvrdSetpoint_Object = MibTableColumn
rARUConfigAruTempOvrdSetpoint = _RARUConfigAruTempOvrdSetpoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 5),
    _RARUConfigAruTempOvrdSetpoint_Type()
)
rARUConfigAruTempOvrdSetpoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUConfigAruTempOvrdSetpoint.setStatus("mandatory")


class _RARUConfigAruMasterControl_Type(Integer32):
    """Custom type rARUConfigAruMasterControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aruOff", 2),
          ("aruOn", 1))
    )


_RARUConfigAruMasterControl_Type.__name__ = "Integer32"
_RARUConfigAruMasterControl_Object = MibTableColumn
rARUConfigAruMasterControl = _RARUConfigAruMasterControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 2, 1, 1, 6),
    _RARUConfigAruMasterControl_Type()
)
rARUConfigAruMasterControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUConfigAruMasterControl.setStatus("mandatory")
_RARUStatus_ObjectIdentity = ObjectIdentity
rARUStatus = _RARUStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3)
)
_RARUStatusAruDeviceCount_Type = Integer32
_RARUStatusAruDeviceCount_Object = MibScalar
rARUStatusAruDeviceCount = _RARUStatusAruDeviceCount_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 1),
    _RARUStatusAruDeviceCount_Type()
)
rARUStatusAruDeviceCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruDeviceCount.setStatus("mandatory")


class _RARUStatusSysTempUnits_Type(Integer32):
    """Custom type rARUStatusSysTempUnits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("celsius", 1),
          ("fahrenheit", 2))
    )


_RARUStatusSysTempUnits_Type.__name__ = "Integer32"
_RARUStatusSysTempUnits_Object = MibScalar
rARUStatusSysTempUnits = _RARUStatusSysTempUnits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 2),
    _RARUStatusSysTempUnits_Type()
)
rARUStatusSysTempUnits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusSysTempUnits.setStatus("mandatory")
_RARUStatusTable_Object = MibTable
rARUStatusTable = _RARUStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3)
)
if mibBuilder.loadTexts:
    rARUStatusTable.setStatus("mandatory")
_RARUStatusEntry_Object = MibTableRow
rARUStatusEntry = _RARUStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1)
)
rARUStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "rARUStatusAruIndex"),
)
if mibBuilder.loadTexts:
    rARUStatusEntry.setStatus("mandatory")
_RARUStatusAruIndex_Type = Integer32
_RARUStatusAruIndex_Object = MibTableColumn
rARUStatusAruIndex = _RARUStatusAruIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 1),
    _RARUStatusAruIndex_Type()
)
rARUStatusAruIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruIndex.setStatus("mandatory")
_RARUStatusAruName_Type = DisplayString
_RARUStatusAruName_Object = MibTableColumn
rARUStatusAruName = _RARUStatusAruName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 2),
    _RARUStatusAruName_Type()
)
rARUStatusAruName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruName.setStatus("mandatory")


class _RARUStatusAruRemoteSetpoint_Type(Integer32):
    """Custom type rARUStatusAruRemoteSetpoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18)
        )
    )
    namedValues = NamedValues(
        *(("aru1000cfm", 14),
          ("aru100F-38C", 5),
          ("aru1400cfm", 15),
          ("aru1600cfm", 16),
          ("aru1800cfm", 17),
          ("aru2000cfm", 18),
          ("aru2kW-300cfm", 9),
          ("aru3kW-500cfm", 8),
          ("aru400cfm", 10),
          ("aru5kW-800cfm", 7),
          ("aru600cfm", 11),
          ("aru700cfm", 12),
          ("aru7kW-1200cfm", 6),
          ("aru85F-29C", 2),
          ("aru900cfm", 13),
          ("aru90F-32C", 3),
          ("aru95F-35C", 4),
          ("aruOff", 1))
    )


_RARUStatusAruRemoteSetpoint_Type.__name__ = "Integer32"
_RARUStatusAruRemoteSetpoint_Object = MibTableColumn
rARUStatusAruRemoteSetpoint = _RARUStatusAruRemoteSetpoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 3),
    _RARUStatusAruRemoteSetpoint_Type()
)
rARUStatusAruRemoteSetpoint.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruRemoteSetpoint.setStatus("mandatory")


class _RARUStatusAruManualSetpoint_Type(Integer32):
    """Custom type rARUStatusAruManualSetpoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("aru100F-38C", 5),
          ("aru2kW", 9),
          ("aru3kW", 8),
          ("aru5kW", 7),
          ("aru7kW", 6),
          ("aru85F-29C", 2),
          ("aru90F-32C", 3),
          ("aru95F-35C", 4),
          ("aruOff", 1),
          ("aruRem", 10))
    )


_RARUStatusAruManualSetpoint_Type.__name__ = "Integer32"
_RARUStatusAruManualSetpoint_Object = MibTableColumn
rARUStatusAruManualSetpoint = _RARUStatusAruManualSetpoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 4),
    _RARUStatusAruManualSetpoint_Type()
)
rARUStatusAruManualSetpoint.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruManualSetpoint.setStatus("mandatory")
_RARUStatusAruTemp1_Type = Integer32
_RARUStatusAruTemp1_Object = MibTableColumn
rARUStatusAruTemp1 = _RARUStatusAruTemp1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 5),
    _RARUStatusAruTemp1_Type()
)
rARUStatusAruTemp1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruTemp1.setStatus("mandatory")
_RARUStatusAruTemp2_Type = Integer32
_RARUStatusAruTemp2_Object = MibTableColumn
rARUStatusAruTemp2 = _RARUStatusAruTemp2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 6),
    _RARUStatusAruTemp2_Type()
)
rARUStatusAruTemp2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruTemp2.setStatus("mandatory")
_RARUStatusAruTemp3_Type = Integer32
_RARUStatusAruTemp3_Object = MibTableColumn
rARUStatusAruTemp3 = _RARUStatusAruTemp3_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 7),
    _RARUStatusAruTemp3_Type()
)
rARUStatusAruTemp3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruTemp3.setStatus("mandatory")


class _RARUStatusAruTempOvrdEnableDisable_Type(Integer32):
    """Custom type rARUStatusAruTempOvrdEnableDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_RARUStatusAruTempOvrdEnableDisable_Type.__name__ = "Integer32"
_RARUStatusAruTempOvrdEnableDisable_Object = MibTableColumn
rARUStatusAruTempOvrdEnableDisable = _RARUStatusAruTempOvrdEnableDisable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 8),
    _RARUStatusAruTempOvrdEnableDisable_Type()
)
rARUStatusAruTempOvrdEnableDisable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruTempOvrdEnableDisable.setStatus("mandatory")
_RARUStatusAruTempOvrdSetpoint_Type = Integer32
_RARUStatusAruTempOvrdSetpoint_Object = MibTableColumn
rARUStatusAruTempOvrdSetpoint = _RARUStatusAruTempOvrdSetpoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 9),
    _RARUStatusAruTempOvrdSetpoint_Type()
)
rARUStatusAruTempOvrdSetpoint.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruTempOvrdSetpoint.setStatus("mandatory")
_RARUStatusAruAlarmState_Type = DisplayString
_RARUStatusAruAlarmState_Object = MibTableColumn
rARUStatusAruAlarmState = _RARUStatusAruAlarmState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 10),
    _RARUStatusAruAlarmState_Type()
)
rARUStatusAruAlarmState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruAlarmState.setStatus("mandatory")


class _RARUStatusAruCommStatus_Type(Integer32):
    """Custom type rARUStatusAruCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("commsEstablished", 2),
          ("commsLost", 3),
          ("commsNeverDiscovered", 1))
    )


_RARUStatusAruCommStatus_Type.__name__ = "Integer32"
_RARUStatusAruCommStatus_Object = MibTableColumn
rARUStatusAruCommStatus = _RARUStatusAruCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 11),
    _RARUStatusAruCommStatus_Type()
)
rARUStatusAruCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruCommStatus.setStatus("mandatory")


class _RARUStatusAruTempOvrdStatus_Type(Integer32):
    """Custom type rARUStatusAruTempOvrdStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("inactive", 1))
    )


_RARUStatusAruTempOvrdStatus_Type.__name__ = "Integer32"
_RARUStatusAruTempOvrdStatus_Object = MibTableColumn
rARUStatusAruTempOvrdStatus = _RARUStatusAruTempOvrdStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 12),
    _RARUStatusAruTempOvrdStatus_Type()
)
rARUStatusAruTempOvrdStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruTempOvrdStatus.setStatus("mandatory")


class _RARUStatusAruMasterControl_Type(Integer32):
    """Custom type rARUStatusAruMasterControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aruOff", 2),
          ("aruOn", 1))
    )


_RARUStatusAruMasterControl_Type.__name__ = "Integer32"
_RARUStatusAruMasterControl_Object = MibTableColumn
rARUStatusAruMasterControl = _RARUStatusAruMasterControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 13),
    _RARUStatusAruMasterControl_Type()
)
rARUStatusAruMasterControl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruMasterControl.setStatus("mandatory")
_RARUStatusAruTotalAirflow_Type = Integer32
_RARUStatusAruTotalAirflow_Object = MibTableColumn
rARUStatusAruTotalAirflow = _RARUStatusAruTotalAirflow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 3, 3, 1, 14),
    _RARUStatusAruTotalAirflow_Type()
)
rARUStatusAruTotalAirflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUStatusAruTotalAirflow.setStatus("mandatory")
_RARUFanStatus_ObjectIdentity = ObjectIdentity
rARUFanStatus = _RARUFanStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4)
)
_RARUFanStatusTable_Object = MibTable
rARUFanStatusTable = _RARUFanStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1)
)
if mibBuilder.loadTexts:
    rARUFanStatusTable.setStatus("mandatory")
_RARUFanStatusEntry_Object = MibTableRow
rARUFanStatusEntry = _RARUFanStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1)
)
rARUFanStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "rARUFanStatusAruIndex"),
    (0, "POWERNET-MIB", "rARUFanStatusFanIndex"),
)
if mibBuilder.loadTexts:
    rARUFanStatusEntry.setStatus("mandatory")
_RARUFanStatusAruIndex_Type = Integer32
_RARUFanStatusAruIndex_Object = MibTableColumn
rARUFanStatusAruIndex = _RARUFanStatusAruIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 1),
    _RARUFanStatusAruIndex_Type()
)
rARUFanStatusAruIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUFanStatusAruIndex.setStatus("mandatory")
_RARUFanStatusNominalFanSpeed_Type = Integer32
_RARUFanStatusNominalFanSpeed_Object = MibTableColumn
rARUFanStatusNominalFanSpeed = _RARUFanStatusNominalFanSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 2),
    _RARUFanStatusNominalFanSpeed_Type()
)
rARUFanStatusNominalFanSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUFanStatusNominalFanSpeed.setStatus("mandatory")
_RARUFanStatusSelectedFanLevel_Type = Integer32
_RARUFanStatusSelectedFanLevel_Object = MibTableColumn
rARUFanStatusSelectedFanLevel = _RARUFanStatusSelectedFanLevel_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 3),
    _RARUFanStatusSelectedFanLevel_Type()
)
rARUFanStatusSelectedFanLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUFanStatusSelectedFanLevel.setStatus("mandatory")


class _RARUFanStatusReplacementThreshold_Type(Integer32):
    """Custom type rARUFanStatusReplacementThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("khr20", 2),
          ("khr25", 3),
          ("khr30", 4),
          ("khr35", 5),
          ("khr40", 6),
          ("khr50", 7))
    )


_RARUFanStatusReplacementThreshold_Type.__name__ = "Integer32"
_RARUFanStatusReplacementThreshold_Object = MibTableColumn
rARUFanStatusReplacementThreshold = _RARUFanStatusReplacementThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 4),
    _RARUFanStatusReplacementThreshold_Type()
)
rARUFanStatusReplacementThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUFanStatusReplacementThreshold.setStatus("mandatory")
_RARUFanStatusFanIndex_Type = Integer32
_RARUFanStatusFanIndex_Object = MibTableColumn
rARUFanStatusFanIndex = _RARUFanStatusFanIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 5),
    _RARUFanStatusFanIndex_Type()
)
rARUFanStatusFanIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUFanStatusFanIndex.setStatus("mandatory")


class _RARUFanStatusFanOperatingStatus_Type(Integer32):
    """Custom type rARUFanStatusFanOperatingStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("offFailed", 5),
          ("onDegraded", 4),
          ("onOk", 3),
          ("unknown", 1))
    )


_RARUFanStatusFanOperatingStatus_Type.__name__ = "Integer32"
_RARUFanStatusFanOperatingStatus_Object = MibTableColumn
rARUFanStatusFanOperatingStatus = _RARUFanStatusFanOperatingStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 6),
    _RARUFanStatusFanOperatingStatus_Type()
)
rARUFanStatusFanOperatingStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUFanStatusFanOperatingStatus.setStatus("mandatory")
_RARUFanStatusFanRpmSpeed_Type = Integer32
_RARUFanStatusFanRpmSpeed_Object = MibTableColumn
rARUFanStatusFanRpmSpeed = _RARUFanStatusFanRpmSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 7),
    _RARUFanStatusFanRpmSpeed_Type()
)
rARUFanStatusFanRpmSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUFanStatusFanRpmSpeed.setStatus("mandatory")
_RARUFanStatusFanFlowRate_Type = Integer32
_RARUFanStatusFanFlowRate_Object = MibTableColumn
rARUFanStatusFanFlowRate = _RARUFanStatusFanFlowRate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 8),
    _RARUFanStatusFanFlowRate_Type()
)
rARUFanStatusFanFlowRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUFanStatusFanFlowRate.setStatus("mandatory")
_RARUFanStatusFanInServiceDate_Type = DisplayString
_RARUFanStatusFanInServiceDate_Object = MibTableColumn
rARUFanStatusFanInServiceDate = _RARUFanStatusFanInServiceDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 9),
    _RARUFanStatusFanInServiceDate_Type()
)
rARUFanStatusFanInServiceDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUFanStatusFanInServiceDate.setStatus("mandatory")
_RARUFanStatusFanRunhourCounter_Type = Integer32
_RARUFanStatusFanRunhourCounter_Object = MibTableColumn
rARUFanStatusFanRunhourCounter = _RARUFanStatusFanRunhourCounter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 10),
    _RARUFanStatusFanRunhourCounter_Type()
)
rARUFanStatusFanRunhourCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUFanStatusFanRunhourCounter.setStatus("mandatory")


class _RARUFanStatusFanRunhourReset_Type(Integer32):
    """Custom type rARUFanStatusFanRunhourReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_RARUFanStatusFanRunhourReset_Type.__name__ = "Integer32"
_RARUFanStatusFanRunhourReset_Object = MibTableColumn
rARUFanStatusFanRunhourReset = _RARUFanStatusFanRunhourReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 4, 1, 1, 11),
    _RARUFanStatusFanRunhourReset_Type()
)
rARUFanStatusFanRunhourReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUFanStatusFanRunhourReset.setStatus("mandatory")
_RARUPower_ObjectIdentity = ObjectIdentity
rARUPower = _RARUPower_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5)
)
_RARUPowerStatusTable_Object = MibTable
rARUPowerStatusTable = _RARUPowerStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1)
)
if mibBuilder.loadTexts:
    rARUPowerStatusTable.setStatus("mandatory")
_RARUPowerStatusEntry_Object = MibTableRow
rARUPowerStatusEntry = _RARUPowerStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1)
)
rARUPowerStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "rARUPowerStatusAruIndex"),
)
if mibBuilder.loadTexts:
    rARUPowerStatusEntry.setStatus("mandatory")
_RARUPowerStatusAruIndex_Type = Integer32
_RARUPowerStatusAruIndex_Object = MibTableColumn
rARUPowerStatusAruIndex = _RARUPowerStatusAruIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 1),
    _RARUPowerStatusAruIndex_Type()
)
rARUPowerStatusAruIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUPowerStatusAruIndex.setStatus("mandatory")


class _RARUPowerStatusPrimaryAcPresent_Type(Integer32):
    """Custom type rARUPowerStatusPrimaryAcPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_RARUPowerStatusPrimaryAcPresent_Type.__name__ = "Integer32"
_RARUPowerStatusPrimaryAcPresent_Object = MibTableColumn
rARUPowerStatusPrimaryAcPresent = _RARUPowerStatusPrimaryAcPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 2),
    _RARUPowerStatusPrimaryAcPresent_Type()
)
rARUPowerStatusPrimaryAcPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUPowerStatusPrimaryAcPresent.setStatus("mandatory")


class _RARUPowerStatusAuxiliaryAcPresent_Type(Integer32):
    """Custom type rARUPowerStatusAuxiliaryAcPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_RARUPowerStatusAuxiliaryAcPresent_Type.__name__ = "Integer32"
_RARUPowerStatusAuxiliaryAcPresent_Object = MibTableColumn
rARUPowerStatusAuxiliaryAcPresent = _RARUPowerStatusAuxiliaryAcPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 3),
    _RARUPowerStatusAuxiliaryAcPresent_Type()
)
rARUPowerStatusAuxiliaryAcPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUPowerStatusAuxiliaryAcPresent.setStatus("mandatory")


class _RARUPowerStatusRedundantAcConfig_Type(Integer32):
    """Custom type rARUPowerStatusRedundantAcConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dualCord", 2),
          ("singleCord", 1))
    )


_RARUPowerStatusRedundantAcConfig_Type.__name__ = "Integer32"
_RARUPowerStatusRedundantAcConfig_Object = MibTableColumn
rARUPowerStatusRedundantAcConfig = _RARUPowerStatusRedundantAcConfig_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 5, 1, 1, 4),
    _RARUPowerStatusRedundantAcConfig_Type()
)
rARUPowerStatusRedundantAcConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUPowerStatusRedundantAcConfig.setStatus("mandatory")
_RARUSensors_ObjectIdentity = ObjectIdentity
rARUSensors = _RARUSensors_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6)
)
_RARUSensorsStatusTableSize_Type = Integer32
_RARUSensorsStatusTableSize_Object = MibScalar
rARUSensorsStatusTableSize = _RARUSensorsStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 1),
    _RARUSensorsStatusTableSize_Type()
)
rARUSensorsStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUSensorsStatusTableSize.setStatus("mandatory")
_RARUSensorsStatusTable_Object = MibTable
rARUSensorsStatusTable = _RARUSensorsStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2)
)
if mibBuilder.loadTexts:
    rARUSensorsStatusTable.setStatus("mandatory")
_RARUSensorsStatusEntry_Object = MibTableRow
rARUSensorsStatusEntry = _RARUSensorsStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1)
)
rARUSensorsStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "rARUSensorsStatusAruIndex"),
    (0, "POWERNET-MIB", "rARUSensorsStatusSensorNumber"),
)
if mibBuilder.loadTexts:
    rARUSensorsStatusEntry.setStatus("mandatory")
_RARUSensorsStatusAruIndex_Type = Integer32
_RARUSensorsStatusAruIndex_Object = MibTableColumn
rARUSensorsStatusAruIndex = _RARUSensorsStatusAruIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 1),
    _RARUSensorsStatusAruIndex_Type()
)
rARUSensorsStatusAruIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUSensorsStatusAruIndex.setStatus("mandatory")
_RARUSensorsStatusSensorNumber_Type = Integer32
_RARUSensorsStatusSensorNumber_Object = MibTableColumn
rARUSensorsStatusSensorNumber = _RARUSensorsStatusSensorNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 2),
    _RARUSensorsStatusSensorNumber_Type()
)
rARUSensorsStatusSensorNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUSensorsStatusSensorNumber.setStatus("mandatory")
_RARUSensorsTemperature_Type = Integer32
_RARUSensorsTemperature_Object = MibTableColumn
rARUSensorsTemperature = _RARUSensorsTemperature_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 2, 1, 3),
    _RARUSensorsTemperature_Type()
)
rARUSensorsTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUSensorsTemperature.setStatus("mandatory")
_RARUSensorsConfigTableSize_Type = Integer32
_RARUSensorsConfigTableSize_Object = MibScalar
rARUSensorsConfigTableSize = _RARUSensorsConfigTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 3),
    _RARUSensorsConfigTableSize_Type()
)
rARUSensorsConfigTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUSensorsConfigTableSize.setStatus("mandatory")
_RARUSensorsConfigTable_Object = MibTable
rARUSensorsConfigTable = _RARUSensorsConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4)
)
if mibBuilder.loadTexts:
    rARUSensorsConfigTable.setStatus("mandatory")
_RARUSensorsConfigEntry_Object = MibTableRow
rARUSensorsConfigEntry = _RARUSensorsConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1)
)
rARUSensorsConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "rARUSensorsConfigAruIndex"),
    (0, "POWERNET-MIB", "rARUSensorsConfigSensorNumber"),
)
if mibBuilder.loadTexts:
    rARUSensorsConfigEntry.setStatus("mandatory")
_RARUSensorsConfigAruIndex_Type = Integer32
_RARUSensorsConfigAruIndex_Object = MibTableColumn
rARUSensorsConfigAruIndex = _RARUSensorsConfigAruIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 1),
    _RARUSensorsConfigAruIndex_Type()
)
rARUSensorsConfigAruIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUSensorsConfigAruIndex.setStatus("mandatory")
_RARUSensorsConfigSensorNumber_Type = Integer32
_RARUSensorsConfigSensorNumber_Object = MibTableColumn
rARUSensorsConfigSensorNumber = _RARUSensorsConfigSensorNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 2),
    _RARUSensorsConfigSensorNumber_Type()
)
rARUSensorsConfigSensorNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rARUSensorsConfigSensorNumber.setStatus("mandatory")
_RARUSensorsName_Type = DisplayString
_RARUSensorsName_Object = MibTableColumn
rARUSensorsName = _RARUSensorsName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 3),
    _RARUSensorsName_Type()
)
rARUSensorsName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsName.setStatus("mandatory")
_RARUSensorsLocation_Type = DisplayString
_RARUSensorsLocation_Object = MibTableColumn
rARUSensorsLocation = _RARUSensorsLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 4),
    _RARUSensorsLocation_Type()
)
rARUSensorsLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsLocation.setStatus("mandatory")
_RARUSensorsTempMaxThresh_Type = Integer32
_RARUSensorsTempMaxThresh_Object = MibTableColumn
rARUSensorsTempMaxThresh = _RARUSensorsTempMaxThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 5),
    _RARUSensorsTempMaxThresh_Type()
)
rARUSensorsTempMaxThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempMaxThresh.setStatus("mandatory")
_RARUSensorsTempHighThresh_Type = Integer32
_RARUSensorsTempHighThresh_Object = MibTableColumn
rARUSensorsTempHighThresh = _RARUSensorsTempHighThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 6),
    _RARUSensorsTempHighThresh_Type()
)
rARUSensorsTempHighThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempHighThresh.setStatus("mandatory")
_RARUSensorsTempLowThresh_Type = Integer32
_RARUSensorsTempLowThresh_Object = MibTableColumn
rARUSensorsTempLowThresh = _RARUSensorsTempLowThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 7),
    _RARUSensorsTempLowThresh_Type()
)
rARUSensorsTempLowThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempLowThresh.setStatus("mandatory")
_RARUSensorsTempMinThresh_Type = Integer32
_RARUSensorsTempMinThresh_Object = MibTableColumn
rARUSensorsTempMinThresh = _RARUSensorsTempMinThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 8),
    _RARUSensorsTempMinThresh_Type()
)
rARUSensorsTempMinThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempMinThresh.setStatus("mandatory")
_RARUSensorsTempThreshHysteresis_Type = Integer32
_RARUSensorsTempThreshHysteresis_Object = MibTableColumn
rARUSensorsTempThreshHysteresis = _RARUSensorsTempThreshHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 9),
    _RARUSensorsTempThreshHysteresis_Type()
)
rARUSensorsTempThreshHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempThreshHysteresis.setStatus("mandatory")
_RARUSensorsTempShortDecRateThreshValue_Type = Integer32
_RARUSensorsTempShortDecRateThreshValue_Object = MibTableColumn
rARUSensorsTempShortDecRateThreshValue = _RARUSensorsTempShortDecRateThreshValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 10),
    _RARUSensorsTempShortDecRateThreshValue_Type()
)
rARUSensorsTempShortDecRateThreshValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempShortDecRateThreshValue.setStatus("mandatory")
_RARUSensorsTempShortDecRateThreshTime_Type = Integer32
_RARUSensorsTempShortDecRateThreshTime_Object = MibTableColumn
rARUSensorsTempShortDecRateThreshTime = _RARUSensorsTempShortDecRateThreshTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 11),
    _RARUSensorsTempShortDecRateThreshTime_Type()
)
rARUSensorsTempShortDecRateThreshTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempShortDecRateThreshTime.setStatus("mandatory")
_RARUSensorsTempShortIncRateThreshValue_Type = Integer32
_RARUSensorsTempShortIncRateThreshValue_Object = MibTableColumn
rARUSensorsTempShortIncRateThreshValue = _RARUSensorsTempShortIncRateThreshValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 12),
    _RARUSensorsTempShortIncRateThreshValue_Type()
)
rARUSensorsTempShortIncRateThreshValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempShortIncRateThreshValue.setStatus("mandatory")
_RARUSensorsTempShortIncRateThreshTime_Type = Integer32
_RARUSensorsTempShortIncRateThreshTime_Object = MibTableColumn
rARUSensorsTempShortIncRateThreshTime = _RARUSensorsTempShortIncRateThreshTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 13),
    _RARUSensorsTempShortIncRateThreshTime_Type()
)
rARUSensorsTempShortIncRateThreshTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempShortIncRateThreshTime.setStatus("mandatory")
_RARUSensorsTempLongDecRateThreshValue_Type = Integer32
_RARUSensorsTempLongDecRateThreshValue_Object = MibTableColumn
rARUSensorsTempLongDecRateThreshValue = _RARUSensorsTempLongDecRateThreshValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 14),
    _RARUSensorsTempLongDecRateThreshValue_Type()
)
rARUSensorsTempLongDecRateThreshValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempLongDecRateThreshValue.setStatus("mandatory")
_RARUSensorsTempLongDecRateThreshTime_Type = Integer32
_RARUSensorsTempLongDecRateThreshTime_Object = MibTableColumn
rARUSensorsTempLongDecRateThreshTime = _RARUSensorsTempLongDecRateThreshTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 15),
    _RARUSensorsTempLongDecRateThreshTime_Type()
)
rARUSensorsTempLongDecRateThreshTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempLongDecRateThreshTime.setStatus("mandatory")
_RARUSensorsTempLongIncRateThreshValue_Type = Integer32
_RARUSensorsTempLongIncRateThreshValue_Object = MibTableColumn
rARUSensorsTempLongIncRateThreshValue = _RARUSensorsTempLongIncRateThreshValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 16),
    _RARUSensorsTempLongIncRateThreshValue_Type()
)
rARUSensorsTempLongIncRateThreshValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempLongIncRateThreshValue.setStatus("mandatory")
_RARUSensorsTempLongIncRateThreshTime_Type = Integer32
_RARUSensorsTempLongIncRateThreshTime_Object = MibTableColumn
rARUSensorsTempLongIncRateThreshTime = _RARUSensorsTempLongIncRateThreshTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 14, 6, 4, 1, 17),
    _RARUSensorsTempLongIncRateThreshTime_Type()
)
rARUSensorsTempLongIncRateThreshTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rARUSensorsTempLongIncRateThreshTime.setStatus("mandatory")
_XPDU_ObjectIdentity = ObjectIdentity
xPDU = _XPDU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15)
)
_XPDUIdent_ObjectIdentity = ObjectIdentity
xPDUIdent = _XPDUIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1)
)
_XPDUIdentProductName_Type = DisplayString
_XPDUIdentProductName_Object = MibScalar
xPDUIdentProductName = _XPDUIdentProductName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 1),
    _XPDUIdentProductName_Type()
)
xPDUIdentProductName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUIdentProductName.setStatus("mandatory")
_XPDUIdentHardwareRev_Type = DisplayString
_XPDUIdentHardwareRev_Object = MibScalar
xPDUIdentHardwareRev = _XPDUIdentHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 2),
    _XPDUIdentHardwareRev_Type()
)
xPDUIdentHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUIdentHardwareRev.setStatus("mandatory")
_XPDUIdentFirmwareAppRev_Type = DisplayString
_XPDUIdentFirmwareAppRev_Object = MibScalar
xPDUIdentFirmwareAppRev = _XPDUIdentFirmwareAppRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 3),
    _XPDUIdentFirmwareAppRev_Type()
)
xPDUIdentFirmwareAppRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUIdentFirmwareAppRev.setStatus("mandatory")
_XPDUIdentFirmwareAppOSRev_Type = DisplayString
_XPDUIdentFirmwareAppOSRev_Object = MibScalar
xPDUIdentFirmwareAppOSRev = _XPDUIdentFirmwareAppOSRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 4),
    _XPDUIdentFirmwareAppOSRev_Type()
)
xPDUIdentFirmwareAppOSRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUIdentFirmwareAppOSRev.setStatus("mandatory")
_XPDUIdentFirmwareControllerRev_Type = DisplayString
_XPDUIdentFirmwareControllerRev_Object = MibScalar
xPDUIdentFirmwareControllerRev = _XPDUIdentFirmwareControllerRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 5),
    _XPDUIdentFirmwareControllerRev_Type()
)
xPDUIdentFirmwareControllerRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUIdentFirmwareControllerRev.setStatus("mandatory")
_XPDUIdentDateOfManufacture_Type = DisplayString
_XPDUIdentDateOfManufacture_Object = MibScalar
xPDUIdentDateOfManufacture = _XPDUIdentDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 6),
    _XPDUIdentDateOfManufacture_Type()
)
xPDUIdentDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUIdentDateOfManufacture.setStatus("mandatory")
_XPDUIdentModelNumber_Type = DisplayString
_XPDUIdentModelNumber_Object = MibScalar
xPDUIdentModelNumber = _XPDUIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 7),
    _XPDUIdentModelNumber_Type()
)
xPDUIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUIdentModelNumber.setStatus("mandatory")
_XPDUIdentSerialNumber_Type = DisplayString
_XPDUIdentSerialNumber_Object = MibScalar
xPDUIdentSerialNumber = _XPDUIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 1, 8),
    _XPDUIdentSerialNumber_Type()
)
xPDUIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUIdentSerialNumber.setStatus("mandatory")
_XPDUDevice_ObjectIdentity = ObjectIdentity
xPDUDevice = _XPDUDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2)
)
_XPDUDeviceNominalMainInputVoltage_Type = Integer32
_XPDUDeviceNominalMainInputVoltage_Object = MibScalar
xPDUDeviceNominalMainInputVoltage = _XPDUDeviceNominalMainInputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 1),
    _XPDUDeviceNominalMainInputVoltage_Type()
)
xPDUDeviceNominalMainInputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceNominalMainInputVoltage.setStatus("mandatory")


class _XPDUDeviceServiceType_Type(Integer32):
    """Custom type xPDUDeviceServiceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fourWire", 2),
          ("threeWire", 1))
    )


_XPDUDeviceServiceType_Type.__name__ = "Integer32"
_XPDUDeviceServiceType_Object = MibScalar
xPDUDeviceServiceType = _XPDUDeviceServiceType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 2),
    _XPDUDeviceServiceType_Type()
)
xPDUDeviceServiceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceServiceType.setStatus("mandatory")
_XPDUDeviceNominalOutputVoltage_Type = Integer32
_XPDUDeviceNominalOutputVoltage_Object = MibScalar
xPDUDeviceNominalOutputVoltage = _XPDUDeviceNominalOutputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 3),
    _XPDUDeviceNominalOutputVoltage_Type()
)
xPDUDeviceNominalOutputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceNominalOutputVoltage.setStatus("mandatory")
_XPDUDeviceMainInputBreakerRating_Type = Integer32
_XPDUDeviceMainInputBreakerRating_Object = MibScalar
xPDUDeviceMainInputBreakerRating = _XPDUDeviceMainInputBreakerRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 4),
    _XPDUDeviceMainInputBreakerRating_Type()
)
xPDUDeviceMainInputBreakerRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceMainInputBreakerRating.setStatus("mandatory")
_XPDUDevicePanelBreakerRating_Type = Integer32
_XPDUDevicePanelBreakerRating_Object = MibScalar
xPDUDevicePanelBreakerRating = _XPDUDevicePanelBreakerRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 5),
    _XPDUDevicePanelBreakerRating_Type()
)
xPDUDevicePanelBreakerRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDevicePanelBreakerRating.setStatus("mandatory")


class _XPDUDeviceTransformerPresent_Type(Integer32):
    """Custom type xPDUDeviceTransformerPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_XPDUDeviceTransformerPresent_Type.__name__ = "Integer32"
_XPDUDeviceTransformerPresent_Object = MibScalar
xPDUDeviceTransformerPresent = _XPDUDeviceTransformerPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 6),
    _XPDUDeviceTransformerPresent_Type()
)
xPDUDeviceTransformerPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceTransformerPresent.setStatus("mandatory")


class _XPDUDeviceLoadTieBreakerPresent_Type(Integer32):
    """Custom type xPDUDeviceLoadTieBreakerPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_XPDUDeviceLoadTieBreakerPresent_Type.__name__ = "Integer32"
_XPDUDeviceLoadTieBreakerPresent_Object = MibScalar
xPDUDeviceLoadTieBreakerPresent = _XPDUDeviceLoadTieBreakerPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 7),
    _XPDUDeviceLoadTieBreakerPresent_Type()
)
xPDUDeviceLoadTieBreakerPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceLoadTieBreakerPresent.setStatus("mandatory")


class _XPDUDeviceLoadTestPortPresent_Type(Integer32):
    """Custom type xPDUDeviceLoadTestPortPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_XPDUDeviceLoadTestPortPresent_Type.__name__ = "Integer32"
_XPDUDeviceLoadTestPortPresent_Object = MibScalar
xPDUDeviceLoadTestPortPresent = _XPDUDeviceLoadTestPortPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 8),
    _XPDUDeviceLoadTestPortPresent_Type()
)
xPDUDeviceLoadTestPortPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceLoadTestPortPresent.setStatus("mandatory")


class _XPDUDeviceFusesPresent_Type(Integer32):
    """Custom type xPDUDeviceFusesPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_XPDUDeviceFusesPresent_Type.__name__ = "Integer32"
_XPDUDeviceFusesPresent_Object = MibScalar
xPDUDeviceFusesPresent = _XPDUDeviceFusesPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 9),
    _XPDUDeviceFusesPresent_Type()
)
xPDUDeviceFusesPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceFusesPresent.setStatus("mandatory")


class _XPDUDeviceFansPresent_Type(Integer32):
    """Custom type xPDUDeviceFansPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_XPDUDeviceFansPresent_Type.__name__ = "Integer32"
_XPDUDeviceFansPresent_Object = MibScalar
xPDUDeviceFansPresent = _XPDUDeviceFansPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 10),
    _XPDUDeviceFansPresent_Type()
)
xPDUDeviceFansPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceFansPresent.setStatus("mandatory")


class _XPDUDeviceBypassInputPresent_Type(Integer32):
    """Custom type xPDUDeviceBypassInputPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_XPDUDeviceBypassInputPresent_Type.__name__ = "Integer32"
_XPDUDeviceBypassInputPresent_Object = MibScalar
xPDUDeviceBypassInputPresent = _XPDUDeviceBypassInputPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 11),
    _XPDUDeviceBypassInputPresent_Type()
)
xPDUDeviceBypassInputPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceBypassInputPresent.setStatus("mandatory")


class _XPDUDeviceCrossTieOutputPresent_Type(Integer32):
    """Custom type xPDUDeviceCrossTieOutputPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_XPDUDeviceCrossTieOutputPresent_Type.__name__ = "Integer32"
_XPDUDeviceCrossTieOutputPresent_Object = MibScalar
xPDUDeviceCrossTieOutputPresent = _XPDUDeviceCrossTieOutputPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 12),
    _XPDUDeviceCrossTieOutputPresent_Type()
)
xPDUDeviceCrossTieOutputPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceCrossTieOutputPresent.setStatus("mandatory")


class _XPDUDeviceEarthGroundMonitorPresent_Type(Integer32):
    """Custom type xPDUDeviceEarthGroundMonitorPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_XPDUDeviceEarthGroundMonitorPresent_Type.__name__ = "Integer32"
_XPDUDeviceEarthGroundMonitorPresent_Object = MibScalar
xPDUDeviceEarthGroundMonitorPresent = _XPDUDeviceEarthGroundMonitorPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 13),
    _XPDUDeviceEarthGroundMonitorPresent_Type()
)
xPDUDeviceEarthGroundMonitorPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceEarthGroundMonitorPresent.setStatus("mandatory")


class _XPDUDeviceInfraStruXureType_Type(Integer32):
    """Custom type xPDUDeviceInfraStruXureType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("typeB", 1),
          ("typeC", 2))
    )


_XPDUDeviceInfraStruXureType_Type.__name__ = "Integer32"
_XPDUDeviceInfraStruXureType_Object = MibScalar
xPDUDeviceInfraStruXureType = _XPDUDeviceInfraStruXureType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 2, 14),
    _XPDUDeviceInfraStruXureType_Type()
)
xPDUDeviceInfraStruXureType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUDeviceInfraStruXureType.setStatus("mandatory")
_XPDUACMonitoringPoint_ObjectIdentity = ObjectIdentity
xPDUACMonitoringPoint = _XPDUACMonitoringPoint_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3)
)
_XPDUMainInput_ObjectIdentity = ObjectIdentity
xPDUMainInput = _XPDUMainInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1)
)


class _XPDUMainInputOverVoltThreshold_Type(Integer32):
    """Custom type xPDUMainInputOverVoltThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_XPDUMainInputOverVoltThreshold_Type.__name__ = "Integer32"
_XPDUMainInputOverVoltThreshold_Object = MibScalar
xPDUMainInputOverVoltThreshold = _XPDUMainInputOverVoltThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 1),
    _XPDUMainInputOverVoltThreshold_Type()
)
xPDUMainInputOverVoltThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUMainInputOverVoltThreshold.setStatus("mandatory")


class _XPDUMainInputUnderVoltThreshold_Type(Integer32):
    """Custom type xPDUMainInputUnderVoltThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_XPDUMainInputUnderVoltThreshold_Type.__name__ = "Integer32"
_XPDUMainInputUnderVoltThreshold_Object = MibScalar
xPDUMainInputUnderVoltThreshold = _XPDUMainInputUnderVoltThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 2),
    _XPDUMainInputUnderVoltThreshold_Type()
)
xPDUMainInputUnderVoltThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUMainInputUnderVoltThreshold.setStatus("mandatory")
_XPDUMainInputVoltageTableSize_Type = Integer32
_XPDUMainInputVoltageTableSize_Object = MibScalar
xPDUMainInputVoltageTableSize = _XPDUMainInputVoltageTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 3),
    _XPDUMainInputVoltageTableSize_Type()
)
xPDUMainInputVoltageTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUMainInputVoltageTableSize.setStatus("mandatory")
_XPDUMainInputVoltagePhaseTable_Object = MibTable
xPDUMainInputVoltagePhaseTable = _XPDUMainInputVoltagePhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4)
)
if mibBuilder.loadTexts:
    xPDUMainInputVoltagePhaseTable.setStatus("mandatory")
_XPDUMainInputVoltagePhaseEntry_Object = MibTableRow
xPDUMainInputVoltagePhaseEntry = _XPDUMainInputVoltagePhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1)
)
xPDUMainInputVoltagePhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "xPDUMainInputVoltagePhaseIndex"),
)
if mibBuilder.loadTexts:
    xPDUMainInputVoltagePhaseEntry.setStatus("mandatory")


class _XPDUMainInputVoltagePhaseIndex_Type(Integer32):
    """Custom type xPDUMainInputVoltagePhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_XPDUMainInputVoltagePhaseIndex_Type.__name__ = "Integer32"
_XPDUMainInputVoltagePhaseIndex_Object = MibTableColumn
xPDUMainInputVoltagePhaseIndex = _XPDUMainInputVoltagePhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 1),
    _XPDUMainInputVoltagePhaseIndex_Type()
)
xPDUMainInputVoltagePhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUMainInputVoltagePhaseIndex.setStatus("mandatory")
_XPDUMainInputVoltageLtoL_Type = Integer32
_XPDUMainInputVoltageLtoL_Object = MibTableColumn
xPDUMainInputVoltageLtoL = _XPDUMainInputVoltageLtoL_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 2),
    _XPDUMainInputVoltageLtoL_Type()
)
xPDUMainInputVoltageLtoL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUMainInputVoltageLtoL.setStatus("mandatory")
_XPDUMainInputVoltageLtoN_Type = Integer32
_XPDUMainInputVoltageLtoN_Object = MibTableColumn
xPDUMainInputVoltageLtoN = _XPDUMainInputVoltageLtoN_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 1, 4, 1, 3),
    _XPDUMainInputVoltageLtoN_Type()
)
xPDUMainInputVoltageLtoN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUMainInputVoltageLtoN.setStatus("mandatory")
_XPDUBypassInput_ObjectIdentity = ObjectIdentity
xPDUBypassInput = _XPDUBypassInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2)
)


class _XPDUBypassInputOverVoltThreshold_Type(Integer32):
    """Custom type xPDUBypassInputOverVoltThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_XPDUBypassInputOverVoltThreshold_Type.__name__ = "Integer32"
_XPDUBypassInputOverVoltThreshold_Object = MibScalar
xPDUBypassInputOverVoltThreshold = _XPDUBypassInputOverVoltThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 1),
    _XPDUBypassInputOverVoltThreshold_Type()
)
xPDUBypassInputOverVoltThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUBypassInputOverVoltThreshold.setStatus("mandatory")


class _XPDUBypassInputUnderVoltThreshold_Type(Integer32):
    """Custom type xPDUBypassInputUnderVoltThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_XPDUBypassInputUnderVoltThreshold_Type.__name__ = "Integer32"
_XPDUBypassInputUnderVoltThreshold_Object = MibScalar
xPDUBypassInputUnderVoltThreshold = _XPDUBypassInputUnderVoltThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 2),
    _XPDUBypassInputUnderVoltThreshold_Type()
)
xPDUBypassInputUnderVoltThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUBypassInputUnderVoltThreshold.setStatus("mandatory")
_XPDUBypassInputVoltagePhaseTableSize_Type = Integer32
_XPDUBypassInputVoltagePhaseTableSize_Object = MibScalar
xPDUBypassInputVoltagePhaseTableSize = _XPDUBypassInputVoltagePhaseTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 3),
    _XPDUBypassInputVoltagePhaseTableSize_Type()
)
xPDUBypassInputVoltagePhaseTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUBypassInputVoltagePhaseTableSize.setStatus("mandatory")
_XPDUBypassInputVoltagePhaseTable_Object = MibTable
xPDUBypassInputVoltagePhaseTable = _XPDUBypassInputVoltagePhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4)
)
if mibBuilder.loadTexts:
    xPDUBypassInputVoltagePhaseTable.setStatus("mandatory")
_XPDUBypassInputVoltagePhaseEntry_Object = MibTableRow
xPDUBypassInputVoltagePhaseEntry = _XPDUBypassInputVoltagePhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1)
)
xPDUBypassInputVoltagePhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "xPDUBypassInputVoltagePhaseIndex"),
)
if mibBuilder.loadTexts:
    xPDUBypassInputVoltagePhaseEntry.setStatus("mandatory")


class _XPDUBypassInputVoltagePhaseIndex_Type(Integer32):
    """Custom type xPDUBypassInputVoltagePhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_XPDUBypassInputVoltagePhaseIndex_Type.__name__ = "Integer32"
_XPDUBypassInputVoltagePhaseIndex_Object = MibTableColumn
xPDUBypassInputVoltagePhaseIndex = _XPDUBypassInputVoltagePhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 1),
    _XPDUBypassInputVoltagePhaseIndex_Type()
)
xPDUBypassInputVoltagePhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUBypassInputVoltagePhaseIndex.setStatus("mandatory")
_XPDUBypassInputVoltageLtoL_Type = Integer32
_XPDUBypassInputVoltageLtoL_Object = MibTableColumn
xPDUBypassInputVoltageLtoL = _XPDUBypassInputVoltageLtoL_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 2),
    _XPDUBypassInputVoltageLtoL_Type()
)
xPDUBypassInputVoltageLtoL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUBypassInputVoltageLtoL.setStatus("mandatory")
_XPDUBypassInputVoltageLtoN_Type = Integer32
_XPDUBypassInputVoltageLtoN_Object = MibTableColumn
xPDUBypassInputVoltageLtoN = _XPDUBypassInputVoltageLtoN_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 2, 4, 1, 3),
    _XPDUBypassInputVoltageLtoN_Type()
)
xPDUBypassInputVoltageLtoN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUBypassInputVoltageLtoN.setStatus("mandatory")
_XPDUUPSInput_ObjectIdentity = ObjectIdentity
xPDUUPSInput = _XPDUUPSInput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3)
)
_XPDUUPSInputVoltagePhaseTableSize_Type = Integer32
_XPDUUPSInputVoltagePhaseTableSize_Object = MibScalar
xPDUUPSInputVoltagePhaseTableSize = _XPDUUPSInputVoltagePhaseTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 1),
    _XPDUUPSInputVoltagePhaseTableSize_Type()
)
xPDUUPSInputVoltagePhaseTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUUPSInputVoltagePhaseTableSize.setStatus("mandatory")
_XPDUUPSInputVoltagePhaseTable_Object = MibTable
xPDUUPSInputVoltagePhaseTable = _XPDUUPSInputVoltagePhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2)
)
if mibBuilder.loadTexts:
    xPDUUPSInputVoltagePhaseTable.setStatus("mandatory")
_XPDUUPSInputVoltagePhaseEntry_Object = MibTableRow
xPDUUPSInputVoltagePhaseEntry = _XPDUUPSInputVoltagePhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1)
)
xPDUUPSInputVoltagePhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "xPDUUPSInputVoltagePhaseIndex"),
)
if mibBuilder.loadTexts:
    xPDUUPSInputVoltagePhaseEntry.setStatus("mandatory")


class _XPDUUPSInputVoltagePhaseIndex_Type(Integer32):
    """Custom type xPDUUPSInputVoltagePhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_XPDUUPSInputVoltagePhaseIndex_Type.__name__ = "Integer32"
_XPDUUPSInputVoltagePhaseIndex_Object = MibTableColumn
xPDUUPSInputVoltagePhaseIndex = _XPDUUPSInputVoltagePhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1, 1),
    _XPDUUPSInputVoltagePhaseIndex_Type()
)
xPDUUPSInputVoltagePhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUUPSInputVoltagePhaseIndex.setStatus("mandatory")


class _XPDUUPSInputVoltageLtoNPresent_Type(Integer32):
    """Custom type xPDUUPSInputVoltageLtoNPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2),
          ("unknown", 3))
    )


_XPDUUPSInputVoltageLtoNPresent_Type.__name__ = "Integer32"
_XPDUUPSInputVoltageLtoNPresent_Object = MibTableColumn
xPDUUPSInputVoltageLtoNPresent = _XPDUUPSInputVoltageLtoNPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 3, 2, 1, 2),
    _XPDUUPSInputVoltageLtoNPresent_Type()
)
xPDUUPSInputVoltageLtoNPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUUPSInputVoltageLtoNPresent.setStatus("mandatory")
_XPDUSystemOutput_ObjectIdentity = ObjectIdentity
xPDUSystemOutput = _XPDUSystemOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4)
)
_XPDUSystemOutputFrequency_Type = Integer32
_XPDUSystemOutputFrequency_Object = MibScalar
xPDUSystemOutputFrequency = _XPDUSystemOutputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 1),
    _XPDUSystemOutputFrequency_Type()
)
xPDUSystemOutputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputFrequency.setStatus("mandatory")
_XPDUSystemOutputNeutralCurrent_Type = Integer32
_XPDUSystemOutputNeutralCurrent_Object = MibScalar
xPDUSystemOutputNeutralCurrent = _XPDUSystemOutputNeutralCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 2),
    _XPDUSystemOutputNeutralCurrent_Type()
)
xPDUSystemOutputNeutralCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputNeutralCurrent.setStatus("mandatory")
_XPDUSystemOutputTotalPower_Type = Integer32
_XPDUSystemOutputTotalPower_Object = MibScalar
xPDUSystemOutputTotalPower = _XPDUSystemOutputTotalPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 3),
    _XPDUSystemOutputTotalPower_Type()
)
xPDUSystemOutputTotalPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputTotalPower.setStatus("mandatory")
_XPDUSystemOutputTotalApparentPower_Type = Integer32
_XPDUSystemOutputTotalApparentPower_Object = MibScalar
xPDUSystemOutputTotalApparentPower = _XPDUSystemOutputTotalApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 4),
    _XPDUSystemOutputTotalApparentPower_Type()
)
xPDUSystemOutputTotalApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputTotalApparentPower.setStatus("mandatory")
_XPDUSystemOutputTotalPowerFactor_Type = Integer32
_XPDUSystemOutputTotalPowerFactor_Object = MibScalar
xPDUSystemOutputTotalPowerFactor = _XPDUSystemOutputTotalPowerFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 5),
    _XPDUSystemOutputTotalPowerFactor_Type()
)
xPDUSystemOutputTotalPowerFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputTotalPowerFactor.setStatus("mandatory")


class _XPDUSystemOutputFrequencyTolerance_Type(Integer32):
    """Custom type xPDUSystemOutputFrequencyTolerance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("freqToleranceFive", 9),
          ("freqToleranceFour", 8),
          ("freqToleranceNine", 10),
          ("freqToleranceOff", 1),
          ("freqToleranceOne", 4),
          ("freqToleranceOnePointFive", 5),
          ("freqTolerancePointFive", 3),
          ("freqTolerancePointTwo", 2),
          ("freqToleranceThree", 7),
          ("freqToleranceTwo", 6))
    )


_XPDUSystemOutputFrequencyTolerance_Type.__name__ = "Integer32"
_XPDUSystemOutputFrequencyTolerance_Object = MibScalar
xPDUSystemOutputFrequencyTolerance = _XPDUSystemOutputFrequencyTolerance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 6),
    _XPDUSystemOutputFrequencyTolerance_Type()
)
xPDUSystemOutputFrequencyTolerance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUSystemOutputFrequencyTolerance.setStatus("mandatory")
_XPDUSystemOutputMaxKWPower_Type = Integer32
_XPDUSystemOutputMaxKWPower_Object = MibScalar
xPDUSystemOutputMaxKWPower = _XPDUSystemOutputMaxKWPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 7),
    _XPDUSystemOutputMaxKWPower_Type()
)
xPDUSystemOutputMaxKWPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUSystemOutputMaxKWPower.setStatus("mandatory")


class _XPDUSystemOutputOverVoltThreshold_Type(Integer32):
    """Custom type xPDUSystemOutputOverVoltThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_XPDUSystemOutputOverVoltThreshold_Type.__name__ = "Integer32"
_XPDUSystemOutputOverVoltThreshold_Object = MibScalar
xPDUSystemOutputOverVoltThreshold = _XPDUSystemOutputOverVoltThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 8),
    _XPDUSystemOutputOverVoltThreshold_Type()
)
xPDUSystemOutputOverVoltThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUSystemOutputOverVoltThreshold.setStatus("mandatory")


class _XPDUSystemOutputUnderVoltThreshold_Type(Integer32):
    """Custom type xPDUSystemOutputUnderVoltThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_XPDUSystemOutputUnderVoltThreshold_Type.__name__ = "Integer32"
_XPDUSystemOutputUnderVoltThreshold_Object = MibScalar
xPDUSystemOutputUnderVoltThreshold = _XPDUSystemOutputUnderVoltThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 9),
    _XPDUSystemOutputUnderVoltThreshold_Type()
)
xPDUSystemOutputUnderVoltThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUSystemOutputUnderVoltThreshold.setStatus("mandatory")


class _XPDUSystemOutputOverCurrentThreshold_Type(Integer32):
    """Custom type xPDUSystemOutputOverCurrentThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XPDUSystemOutputOverCurrentThreshold_Type.__name__ = "Integer32"
_XPDUSystemOutputOverCurrentThreshold_Object = MibScalar
xPDUSystemOutputOverCurrentThreshold = _XPDUSystemOutputOverCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 10),
    _XPDUSystemOutputOverCurrentThreshold_Type()
)
xPDUSystemOutputOverCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUSystemOutputOverCurrentThreshold.setStatus("mandatory")


class _XPDUSystemOutputOverCurrentNeutralThreshold_Type(Integer32):
    """Custom type xPDUSystemOutputOverCurrentNeutralThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XPDUSystemOutputOverCurrentNeutralThreshold_Type.__name__ = "Integer32"
_XPDUSystemOutputOverCurrentNeutralThreshold_Object = MibScalar
xPDUSystemOutputOverCurrentNeutralThreshold = _XPDUSystemOutputOverCurrentNeutralThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 11),
    _XPDUSystemOutputOverCurrentNeutralThreshold_Type()
)
xPDUSystemOutputOverCurrentNeutralThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUSystemOutputOverCurrentNeutralThreshold.setStatus("mandatory")


class _XPDUSystemOutputUnderCurrentThreshold_Type(Integer32):
    """Custom type xPDUSystemOutputUnderCurrentThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XPDUSystemOutputUnderCurrentThreshold_Type.__name__ = "Integer32"
_XPDUSystemOutputUnderCurrentThreshold_Object = MibScalar
xPDUSystemOutputUnderCurrentThreshold = _XPDUSystemOutputUnderCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 12),
    _XPDUSystemOutputUnderCurrentThreshold_Type()
)
xPDUSystemOutputUnderCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUSystemOutputUnderCurrentThreshold.setStatus("mandatory")
_XPDUSystemOutputTableSize_Type = Integer32
_XPDUSystemOutputTableSize_Object = MibScalar
xPDUSystemOutputTableSize = _XPDUSystemOutputTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 13),
    _XPDUSystemOutputTableSize_Type()
)
xPDUSystemOutputTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputTableSize.setStatus("mandatory")
_XPDUSystemOutputPhaseTable_Object = MibTable
xPDUSystemOutputPhaseTable = _XPDUSystemOutputPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14)
)
if mibBuilder.loadTexts:
    xPDUSystemOutputPhaseTable.setStatus("mandatory")
_XPDUSystemOutputPhaseEntry_Object = MibTableRow
xPDUSystemOutputPhaseEntry = _XPDUSystemOutputPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1)
)
xPDUSystemOutputPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "xPDUSystemOutputPhaseIndex"),
)
if mibBuilder.loadTexts:
    xPDUSystemOutputPhaseEntry.setStatus("mandatory")


class _XPDUSystemOutputPhaseIndex_Type(Integer32):
    """Custom type xPDUSystemOutputPhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_XPDUSystemOutputPhaseIndex_Type.__name__ = "Integer32"
_XPDUSystemOutputPhaseIndex_Object = MibTableColumn
xPDUSystemOutputPhaseIndex = _XPDUSystemOutputPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 1),
    _XPDUSystemOutputPhaseIndex_Type()
)
xPDUSystemOutputPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputPhaseIndex.setStatus("mandatory")
_XPDUSystemOutputVoltageLtoL_Type = Integer32
_XPDUSystemOutputVoltageLtoL_Object = MibTableColumn
xPDUSystemOutputVoltageLtoL = _XPDUSystemOutputVoltageLtoL_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 2),
    _XPDUSystemOutputVoltageLtoL_Type()
)
xPDUSystemOutputVoltageLtoL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputVoltageLtoL.setStatus("mandatory")
_XPDUSystemOutputVoltageLtoN_Type = Integer32
_XPDUSystemOutputVoltageLtoN_Object = MibTableColumn
xPDUSystemOutputVoltageLtoN = _XPDUSystemOutputVoltageLtoN_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 3),
    _XPDUSystemOutputVoltageLtoN_Type()
)
xPDUSystemOutputVoltageLtoN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputVoltageLtoN.setStatus("mandatory")
_XPDUSystemOutputPhaseCurrent_Type = Integer32
_XPDUSystemOutputPhaseCurrent_Object = MibTableColumn
xPDUSystemOutputPhaseCurrent = _XPDUSystemOutputPhaseCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 4),
    _XPDUSystemOutputPhaseCurrent_Type()
)
xPDUSystemOutputPhaseCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputPhaseCurrent.setStatus("mandatory")
_XPDUSystemOutputPower_Type = Integer32
_XPDUSystemOutputPower_Object = MibTableColumn
xPDUSystemOutputPower = _XPDUSystemOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 5),
    _XPDUSystemOutputPower_Type()
)
xPDUSystemOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputPower.setStatus("mandatory")
_XPDUSystemOutputApparentPower_Type = Integer32
_XPDUSystemOutputApparentPower_Object = MibTableColumn
xPDUSystemOutputApparentPower = _XPDUSystemOutputApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 6),
    _XPDUSystemOutputApparentPower_Type()
)
xPDUSystemOutputApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputApparentPower.setStatus("mandatory")
_XPDUSystemOutputPowerFactor_Type = Integer32
_XPDUSystemOutputPowerFactor_Object = MibTableColumn
xPDUSystemOutputPowerFactor = _XPDUSystemOutputPowerFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 4, 14, 1, 7),
    _XPDUSystemOutputPowerFactor_Type()
)
xPDUSystemOutputPowerFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemOutputPowerFactor.setStatus("mandatory")
_XPDUGroundMonitorPoint_ObjectIdentity = ObjectIdentity
xPDUGroundMonitorPoint = _XPDUGroundMonitorPoint_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5)
)
_XPDUGroundCurrent_Type = Integer32
_XPDUGroundCurrent_Object = MibScalar
xPDUGroundCurrent = _XPDUGroundCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5, 1),
    _XPDUGroundCurrent_Type()
)
xPDUGroundCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUGroundCurrent.setStatus("mandatory")


class _XPDUGroundCurrentThreshold_Type(Integer32):
    """Custom type xPDUGroundCurrentThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 50),
    )


_XPDUGroundCurrentThreshold_Type.__name__ = "Integer32"
_XPDUGroundCurrentThreshold_Object = MibScalar
xPDUGroundCurrentThreshold = _XPDUGroundCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 3, 5, 2),
    _XPDUGroundCurrentThreshold_Type()
)
xPDUGroundCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUGroundCurrentThreshold.setStatus("mandatory")
_XPDUCircuitBreakers_ObjectIdentity = ObjectIdentity
xPDUCircuitBreakers = _XPDUCircuitBreakers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4)
)
_XPDUSystemBreakers_ObjectIdentity = ObjectIdentity
xPDUSystemBreakers = _XPDUSystemBreakers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1)
)
_XPDUSystemBreakerTableSize_Type = Integer32
_XPDUSystemBreakerTableSize_Object = MibScalar
xPDUSystemBreakerTableSize = _XPDUSystemBreakerTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 1),
    _XPDUSystemBreakerTableSize_Type()
)
xPDUSystemBreakerTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemBreakerTableSize.setStatus("mandatory")
_XPDUSystemBreakerTable_Object = MibTable
xPDUSystemBreakerTable = _XPDUSystemBreakerTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2)
)
if mibBuilder.loadTexts:
    xPDUSystemBreakerTable.setStatus("mandatory")
_XPDUSystemBreakerEntry_Object = MibTableRow
xPDUSystemBreakerEntry = _XPDUSystemBreakerEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1)
)
xPDUSystemBreakerEntry.setIndexNames(
    (0, "POWERNET-MIB", "xPDUSystemBreakerTableIndex"),
)
if mibBuilder.loadTexts:
    xPDUSystemBreakerEntry.setStatus("mandatory")
_XPDUSystemBreakerTableIndex_Type = Integer32
_XPDUSystemBreakerTableIndex_Object = MibTableColumn
xPDUSystemBreakerTableIndex = _XPDUSystemBreakerTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 1),
    _XPDUSystemBreakerTableIndex_Type()
)
xPDUSystemBreakerTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemBreakerTableIndex.setStatus("mandatory")


class _XPDUSystemBreakerDescription_Type(DisplayString):
    """Custom type xPDUSystemBreakerDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 79),
    )


_XPDUSystemBreakerDescription_Type.__name__ = "DisplayString"
_XPDUSystemBreakerDescription_Object = MibTableColumn
xPDUSystemBreakerDescription = _XPDUSystemBreakerDescription_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 2),
    _XPDUSystemBreakerDescription_Type()
)
xPDUSystemBreakerDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemBreakerDescription.setStatus("mandatory")


class _XPDUSystemBreakerPosition_Type(Integer32):
    """Custom type xPDUSystemBreakerPosition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1),
          ("unknown", 3))
    )


_XPDUSystemBreakerPosition_Type.__name__ = "Integer32"
_XPDUSystemBreakerPosition_Object = MibTableColumn
xPDUSystemBreakerPosition = _XPDUSystemBreakerPosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 1, 2, 1, 3),
    _XPDUSystemBreakerPosition_Type()
)
xPDUSystemBreakerPosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUSystemBreakerPosition.setStatus("mandatory")
_XPDUBranchBreakers_ObjectIdentity = ObjectIdentity
xPDUBranchBreakers = _XPDUBranchBreakers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2)
)
_XPDUNumOfBranchBreakers_Type = Integer32
_XPDUNumOfBranchBreakers_Object = MibScalar
xPDUNumOfBranchBreakers = _XPDUNumOfBranchBreakers_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 1),
    _XPDUNumOfBranchBreakers_Type()
)
xPDUNumOfBranchBreakers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUNumOfBranchBreakers.setStatus("mandatory")
_XPDUBranchBreakerTableSize_Type = Integer32
_XPDUBranchBreakerTableSize_Object = MibScalar
xPDUBranchBreakerTableSize = _XPDUBranchBreakerTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 2),
    _XPDUBranchBreakerTableSize_Type()
)
xPDUBranchBreakerTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUBranchBreakerTableSize.setStatus("mandatory")
_XPDUBranchBreakerTable_Object = MibTable
xPDUBranchBreakerTable = _XPDUBranchBreakerTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3)
)
if mibBuilder.loadTexts:
    xPDUBranchBreakerTable.setStatus("mandatory")
_XPDUBranchBreakerEntry_Object = MibTableRow
xPDUBranchBreakerEntry = _XPDUBranchBreakerEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1)
)
xPDUBranchBreakerEntry.setIndexNames(
    (0, "POWERNET-MIB", "xPDUBranchBreakerTableIndex"),
)
if mibBuilder.loadTexts:
    xPDUBranchBreakerEntry.setStatus("mandatory")
_XPDUBranchBreakerTableIndex_Type = Integer32
_XPDUBranchBreakerTableIndex_Object = MibTableColumn
xPDUBranchBreakerTableIndex = _XPDUBranchBreakerTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 1),
    _XPDUBranchBreakerTableIndex_Type()
)
xPDUBranchBreakerTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUBranchBreakerTableIndex.setStatus("mandatory")


class _XPDUBranchBreakerRating_Type(Integer32):
    """Custom type xPDUBranchBreakerRating based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XPDUBranchBreakerRating_Type.__name__ = "Integer32"
_XPDUBranchBreakerRating_Object = MibTableColumn
xPDUBranchBreakerRating = _XPDUBranchBreakerRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 2),
    _XPDUBranchBreakerRating_Type()
)
xPDUBranchBreakerRating.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUBranchBreakerRating.setStatus("mandatory")


class _XPDUBranchBreakerRDPFeed_Type(Integer32):
    """Custom type xPDUBranchBreakerRDPFeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noRemoteDistribution", 2),
          ("remoteDistribution", 1))
    )


_XPDUBranchBreakerRDPFeed_Type.__name__ = "Integer32"
_XPDUBranchBreakerRDPFeed_Object = MibTableColumn
xPDUBranchBreakerRDPFeed = _XPDUBranchBreakerRDPFeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 3),
    _XPDUBranchBreakerRDPFeed_Type()
)
xPDUBranchBreakerRDPFeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUBranchBreakerRDPFeed.setStatus("mandatory")


class _XPDUBranchBreakerTieIndicator_Type(Integer32):
    """Custom type xPDUBranchBreakerTieIndicator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("breakerTied", 2),
          ("breakerUnTied", 1))
    )


_XPDUBranchBreakerTieIndicator_Type.__name__ = "Integer32"
_XPDUBranchBreakerTieIndicator_Object = MibTableColumn
xPDUBranchBreakerTieIndicator = _XPDUBranchBreakerTieIndicator_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 4),
    _XPDUBranchBreakerTieIndicator_Type()
)
xPDUBranchBreakerTieIndicator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUBranchBreakerTieIndicator.setStatus("mandatory")
_XPDUBranchBreakerCurrent_Type = Integer32
_XPDUBranchBreakerCurrent_Object = MibTableColumn
xPDUBranchBreakerCurrent = _XPDUBranchBreakerCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 5),
    _XPDUBranchBreakerCurrent_Type()
)
xPDUBranchBreakerCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUBranchBreakerCurrent.setStatus("mandatory")


class _XPDUBranchBreakerOverCurrentThreshold_Type(Integer32):
    """Custom type xPDUBranchBreakerOverCurrentThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XPDUBranchBreakerOverCurrentThreshold_Type.__name__ = "Integer32"
_XPDUBranchBreakerOverCurrentThreshold_Object = MibTableColumn
xPDUBranchBreakerOverCurrentThreshold = _XPDUBranchBreakerOverCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 6),
    _XPDUBranchBreakerOverCurrentThreshold_Type()
)
xPDUBranchBreakerOverCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUBranchBreakerOverCurrentThreshold.setStatus("mandatory")


class _XPDUBranchBreakerUnderCurrentThreshold_Type(Integer32):
    """Custom type xPDUBranchBreakerUnderCurrentThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XPDUBranchBreakerUnderCurrentThreshold_Type.__name__ = "Integer32"
_XPDUBranchBreakerUnderCurrentThreshold_Object = MibTableColumn
xPDUBranchBreakerUnderCurrentThreshold = _XPDUBranchBreakerUnderCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 7),
    _XPDUBranchBreakerUnderCurrentThreshold_Type()
)
xPDUBranchBreakerUnderCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUBranchBreakerUnderCurrentThreshold.setStatus("mandatory")


class _XPDUBranchBreakerMaxCurrentThreshold_Type(Integer32):
    """Custom type xPDUBranchBreakerMaxCurrentThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XPDUBranchBreakerMaxCurrentThreshold_Type.__name__ = "Integer32"
_XPDUBranchBreakerMaxCurrentThreshold_Object = MibTableColumn
xPDUBranchBreakerMaxCurrentThreshold = _XPDUBranchBreakerMaxCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 8),
    _XPDUBranchBreakerMaxCurrentThreshold_Type()
)
xPDUBranchBreakerMaxCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUBranchBreakerMaxCurrentThreshold.setStatus("mandatory")


class _XPDUBranchBreakerMinCurrentThreshold_Type(Integer32):
    """Custom type xPDUBranchBreakerMinCurrentThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XPDUBranchBreakerMinCurrentThreshold_Type.__name__ = "Integer32"
_XPDUBranchBreakerMinCurrentThreshold_Object = MibTableColumn
xPDUBranchBreakerMinCurrentThreshold = _XPDUBranchBreakerMinCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 9),
    _XPDUBranchBreakerMinCurrentThreshold_Type()
)
xPDUBranchBreakerMinCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUBranchBreakerMinCurrentThreshold.setStatus("mandatory")
_XPDUBranchBreakerName_Type = DisplayString
_XPDUBranchBreakerName_Object = MibTableColumn
xPDUBranchBreakerName = _XPDUBranchBreakerName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 10),
    _XPDUBranchBreakerName_Type()
)
xPDUBranchBreakerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUBranchBreakerName.setStatus("mandatory")
_XPDUBranchBreakerLocation_Type = DisplayString
_XPDUBranchBreakerLocation_Object = MibTableColumn
xPDUBranchBreakerLocation = _XPDUBranchBreakerLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 4, 2, 3, 1, 11),
    _XPDUBranchBreakerLocation_Type()
)
xPDUBranchBreakerLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUBranchBreakerLocation.setStatus("mandatory")
_XPDUInputContacts_ObjectIdentity = ObjectIdentity
xPDUInputContacts = _XPDUInputContacts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5)
)
_XPDUInputContactNumContacts_Type = Integer32
_XPDUInputContactNumContacts_Object = MibScalar
xPDUInputContactNumContacts = _XPDUInputContactNumContacts_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 1),
    _XPDUInputContactNumContacts_Type()
)
xPDUInputContactNumContacts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUInputContactNumContacts.setStatus("mandatory")
_XPDUInputContactTableSize_Type = Integer32
_XPDUInputContactTableSize_Object = MibScalar
xPDUInputContactTableSize = _XPDUInputContactTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 2),
    _XPDUInputContactTableSize_Type()
)
xPDUInputContactTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUInputContactTableSize.setStatus("mandatory")
_XPDUInputContactTable_Object = MibTable
xPDUInputContactTable = _XPDUInputContactTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3)
)
if mibBuilder.loadTexts:
    xPDUInputContactTable.setStatus("mandatory")
_XPDUInputContactEntry_Object = MibTableRow
xPDUInputContactEntry = _XPDUInputContactEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1)
)
xPDUInputContactEntry.setIndexNames(
    (0, "POWERNET-MIB", "xPDUInputContactNumber"),
)
if mibBuilder.loadTexts:
    xPDUInputContactEntry.setStatus("mandatory")
_XPDUInputContactNumber_Type = Integer32
_XPDUInputContactNumber_Object = MibTableColumn
xPDUInputContactNumber = _XPDUInputContactNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 1),
    _XPDUInputContactNumber_Type()
)
xPDUInputContactNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUInputContactNumber.setStatus("mandatory")
_XPDUInputContactName_Type = DisplayString
_XPDUInputContactName_Object = MibTableColumn
xPDUInputContactName = _XPDUInputContactName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 2),
    _XPDUInputContactName_Type()
)
xPDUInputContactName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUInputContactName.setStatus("mandatory")


class _XPDUInputContactNormalState_Type(Integer32):
    """Custom type xPDUInputContactNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_XPDUInputContactNormalState_Type.__name__ = "Integer32"
_XPDUInputContactNormalState_Object = MibTableColumn
xPDUInputContactNormalState = _XPDUInputContactNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 3),
    _XPDUInputContactNormalState_Type()
)
xPDUInputContactNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUInputContactNormalState.setStatus("mandatory")


class _XPDUInputContactCurrentState_Type(Integer32):
    """Custom type xPDUInputContactCurrentState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1),
          ("unknown", 3))
    )


_XPDUInputContactCurrentState_Type.__name__ = "Integer32"
_XPDUInputContactCurrentState_Object = MibTableColumn
xPDUInputContactCurrentState = _XPDUInputContactCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 5, 3, 1, 4),
    _XPDUInputContactCurrentState_Type()
)
xPDUInputContactCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUInputContactCurrentState.setStatus("mandatory")
_XPDUOutputRelays_ObjectIdentity = ObjectIdentity
xPDUOutputRelays = _XPDUOutputRelays_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6)
)
_XPDUOutputRelaysNumRelays_Type = Integer32
_XPDUOutputRelaysNumRelays_Object = MibScalar
xPDUOutputRelaysNumRelays = _XPDUOutputRelaysNumRelays_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 1),
    _XPDUOutputRelaysNumRelays_Type()
)
xPDUOutputRelaysNumRelays.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUOutputRelaysNumRelays.setStatus("mandatory")
_XPDUOutputRelaysTableSize_Type = Integer32
_XPDUOutputRelaysTableSize_Object = MibScalar
xPDUOutputRelaysTableSize = _XPDUOutputRelaysTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 2),
    _XPDUOutputRelaysTableSize_Type()
)
xPDUOutputRelaysTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUOutputRelaysTableSize.setStatus("mandatory")
_XPDUOutputRelayTable_Object = MibTable
xPDUOutputRelayTable = _XPDUOutputRelayTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3)
)
if mibBuilder.loadTexts:
    xPDUOutputRelayTable.setStatus("mandatory")
_XPDUOutputRelayEntry_Object = MibTableRow
xPDUOutputRelayEntry = _XPDUOutputRelayEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1)
)
xPDUOutputRelayEntry.setIndexNames(
    (0, "POWERNET-MIB", "xPDUOutputRelayNumber"),
)
if mibBuilder.loadTexts:
    xPDUOutputRelayEntry.setStatus("mandatory")
_XPDUOutputRelayNumber_Type = Integer32
_XPDUOutputRelayNumber_Object = MibTableColumn
xPDUOutputRelayNumber = _XPDUOutputRelayNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 1),
    _XPDUOutputRelayNumber_Type()
)
xPDUOutputRelayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUOutputRelayNumber.setStatus("mandatory")
_XPDUOutputRelayName_Type = DisplayString
_XPDUOutputRelayName_Object = MibTableColumn
xPDUOutputRelayName = _XPDUOutputRelayName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 2),
    _XPDUOutputRelayName_Type()
)
xPDUOutputRelayName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUOutputRelayName.setStatus("mandatory")


class _XPDUOutputRelayNormalState_Type(Integer32):
    """Custom type xPDUOutputRelayNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_XPDUOutputRelayNormalState_Type.__name__ = "Integer32"
_XPDUOutputRelayNormalState_Object = MibTableColumn
xPDUOutputRelayNormalState = _XPDUOutputRelayNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 3),
    _XPDUOutputRelayNormalState_Type()
)
xPDUOutputRelayNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xPDUOutputRelayNormalState.setStatus("mandatory")


class _XPDUOutputRelayCurrentState_Type(Integer32):
    """Custom type xPDUOutputRelayCurrentState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1),
          ("unknown", 3))
    )


_XPDUOutputRelayCurrentState_Type.__name__ = "Integer32"
_XPDUOutputRelayCurrentState_Object = MibTableColumn
xPDUOutputRelayCurrentState = _XPDUOutputRelayCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 6, 3, 1, 4),
    _XPDUOutputRelayCurrentState_Type()
)
xPDUOutputRelayCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUOutputRelayCurrentState.setStatus("mandatory")
_XPDUMiscGroup_ObjectIdentity = ObjectIdentity
xPDUMiscGroup = _XPDUMiscGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7)
)


class _XPDUEPOMode_Type(Integer32):
    """Custom type xPDUEPOMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("armed", 1),
          ("disarmed", 2),
          ("unknown", 3))
    )


_XPDUEPOMode_Type.__name__ = "Integer32"
_XPDUEPOMode_Object = MibScalar
xPDUEPOMode = _XPDUEPOMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 1),
    _XPDUEPOMode_Type()
)
xPDUEPOMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUEPOMode.setStatus("mandatory")


class _XPDUTransformTempStatus_Type(Integer32):
    """Custom type xPDUTransformTempStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noTransformerPresent", 3),
          ("normal", 1),
          ("overtemp", 2),
          ("unknown", 4))
    )


_XPDUTransformTempStatus_Type.__name__ = "Integer32"
_XPDUTransformTempStatus_Object = MibScalar
xPDUTransformTempStatus = _XPDUTransformTempStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 2),
    _XPDUTransformTempStatus_Type()
)
xPDUTransformTempStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUTransformTempStatus.setStatus("mandatory")


class _XPDUCoolingFanStatus_Type(Integer32):
    """Custom type xPDUCoolingFanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("noCoolingFansPresent", 3),
          ("normal", 1),
          ("unknown", 4))
    )


_XPDUCoolingFanStatus_Type.__name__ = "Integer32"
_XPDUCoolingFanStatus_Object = MibScalar
xPDUCoolingFanStatus = _XPDUCoolingFanStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 15, 7, 3),
    _XPDUCoolingFanStatus_Type()
)
xPDUCoolingFanStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xPDUCoolingFanStatus.setStatus("mandatory")
_BattMan_ObjectIdentity = ObjectIdentity
battMan = _BattMan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16)
)
_BattManIdent_ObjectIdentity = ObjectIdentity
battManIdent = _BattManIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1)
)
_BattManIdentProductName_Type = DisplayString
_BattManIdentProductName_Object = MibScalar
battManIdentProductName = _BattManIdentProductName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 1),
    _BattManIdentProductName_Type()
)
battManIdentProductName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManIdentProductName.setStatus("mandatory")
_BattManIdentHardwareRev_Type = DisplayString
_BattManIdentHardwareRev_Object = MibScalar
battManIdentHardwareRev = _BattManIdentHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 2),
    _BattManIdentHardwareRev_Type()
)
battManIdentHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManIdentHardwareRev.setStatus("mandatory")
_BattManIdentFirmwareRev_Type = DisplayString
_BattManIdentFirmwareRev_Object = MibScalar
battManIdentFirmwareRev = _BattManIdentFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 3),
    _BattManIdentFirmwareRev_Type()
)
battManIdentFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManIdentFirmwareRev.setStatus("mandatory")
_BattManIdentDateOfManufacture_Type = DisplayString
_BattManIdentDateOfManufacture_Object = MibScalar
battManIdentDateOfManufacture = _BattManIdentDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 4),
    _BattManIdentDateOfManufacture_Type()
)
battManIdentDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManIdentDateOfManufacture.setStatus("mandatory")
_BattManIdentModelNumber_Type = DisplayString
_BattManIdentModelNumber_Object = MibScalar
battManIdentModelNumber = _BattManIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 5),
    _BattManIdentModelNumber_Type()
)
battManIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManIdentModelNumber.setStatus("mandatory")
_BattManIdentSerialNumber_Type = DisplayString
_BattManIdentSerialNumber_Object = MibScalar
battManIdentSerialNumber = _BattManIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 1, 6),
    _BattManIdentSerialNumber_Type()
)
battManIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManIdentSerialNumber.setStatus("mandatory")
_BattManSystemCalib_ObjectIdentity = ObjectIdentity
battManSystemCalib = _BattManSystemCalib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 2)
)
_BattManOhmicValueCorrectionFactor_Type = Integer32
_BattManOhmicValueCorrectionFactor_Object = MibScalar
battManOhmicValueCorrectionFactor = _BattManOhmicValueCorrectionFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 2, 1),
    _BattManOhmicValueCorrectionFactor_Type()
)
battManOhmicValueCorrectionFactor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManOhmicValueCorrectionFactor.setStatus("mandatory")
_BattManUnitCalib_ObjectIdentity = ObjectIdentity
battManUnitCalib = _BattManUnitCalib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3)
)
_BattManUnitCalibTableSize_Type = Integer32
_BattManUnitCalibTableSize_Object = MibScalar
battManUnitCalibTableSize = _BattManUnitCalibTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 1),
    _BattManUnitCalibTableSize_Type()
)
battManUnitCalibTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManUnitCalibTableSize.setStatus("mandatory")
_BattManUnitCalibTable_Object = MibTable
battManUnitCalibTable = _BattManUnitCalibTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2)
)
if mibBuilder.loadTexts:
    battManUnitCalibTable.setStatus("mandatory")
_BattManUnitCalibEntry_Object = MibTableRow
battManUnitCalibEntry = _BattManUnitCalibEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1)
)
battManUnitCalibEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManUnitCalibIndex"),
)
if mibBuilder.loadTexts:
    battManUnitCalibEntry.setStatus("mandatory")
_BattManUnitCalibIndex_Type = Integer32
_BattManUnitCalibIndex_Object = MibTableColumn
battManUnitCalibIndex = _BattManUnitCalibIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 1),
    _BattManUnitCalibIndex_Type()
)
battManUnitCalibIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManUnitCalibIndex.setStatus("mandatory")
_BattManUnitSerialNumber_Type = DisplayString
_BattManUnitSerialNumber_Object = MibTableColumn
battManUnitSerialNumber = _BattManUnitSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 2),
    _BattManUnitSerialNumber_Type()
)
battManUnitSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManUnitSerialNumber.setStatus("mandatory")
_BattManBatteryVoltageZeroCalib_Type = Integer32
_BattManBatteryVoltageZeroCalib_Object = MibTableColumn
battManBatteryVoltageZeroCalib = _BattManBatteryVoltageZeroCalib_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 3),
    _BattManBatteryVoltageZeroCalib_Type()
)
battManBatteryVoltageZeroCalib.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManBatteryVoltageZeroCalib.setStatus("mandatory")
_BattManBatteryVoltageSpanCalib_Type = Integer32
_BattManBatteryVoltageSpanCalib_Object = MibTableColumn
battManBatteryVoltageSpanCalib = _BattManBatteryVoltageSpanCalib_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 3, 2, 1, 4),
    _BattManBatteryVoltageSpanCalib_Type()
)
battManBatteryVoltageSpanCalib.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManBatteryVoltageSpanCalib.setStatus("mandatory")
_BattManStringCalib_ObjectIdentity = ObjectIdentity
battManStringCalib = _BattManStringCalib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4)
)
_BattManStringCalibTableSize_Type = Integer32
_BattManStringCalibTableSize_Object = MibScalar
battManStringCalibTableSize = _BattManStringCalibTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 1),
    _BattManStringCalibTableSize_Type()
)
battManStringCalibTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringCalibTableSize.setStatus("mandatory")
_BattManStringCalibTable_Object = MibTable
battManStringCalibTable = _BattManStringCalibTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2)
)
if mibBuilder.loadTexts:
    battManStringCalibTable.setStatus("mandatory")
_BattManStringCalibEntry_Object = MibTableRow
battManStringCalibEntry = _BattManStringCalibEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1)
)
battManStringCalibEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManStringCalibIndex"),
)
if mibBuilder.loadTexts:
    battManStringCalibEntry.setStatus("mandatory")
_BattManStringCalibIndex_Type = Integer32
_BattManStringCalibIndex_Object = MibTableColumn
battManStringCalibIndex = _BattManStringCalibIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 1),
    _BattManStringCalibIndex_Type()
)
battManStringCalibIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringCalibIndex.setStatus("mandatory")
_BattManDCCurrentZeroCalib_Type = Integer32
_BattManDCCurrentZeroCalib_Object = MibTableColumn
battManDCCurrentZeroCalib = _BattManDCCurrentZeroCalib_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 2),
    _BattManDCCurrentZeroCalib_Type()
)
battManDCCurrentZeroCalib.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManDCCurrentZeroCalib.setStatus("mandatory")
_BattManACCurrentZeroCalib_Type = Integer32
_BattManACCurrentZeroCalib_Object = MibTableColumn
battManACCurrentZeroCalib = _BattManACCurrentZeroCalib_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 3),
    _BattManACCurrentZeroCalib_Type()
)
battManACCurrentZeroCalib.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManACCurrentZeroCalib.setStatus("mandatory")


class _BattManProbeRange_Type(Integer32):
    """Custom type battManProbeRange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("amps100", 3),
          ("amps1000", 1),
          ("amps200", 4),
          ("amps2000", 5),
          ("amps500", 2))
    )


_BattManProbeRange_Type.__name__ = "Integer32"
_BattManProbeRange_Object = MibTableColumn
battManProbeRange = _BattManProbeRange_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 4, 2, 1, 4),
    _BattManProbeRange_Type()
)
battManProbeRange.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManProbeRange.setStatus("mandatory")
_BattManBatteryCalib_ObjectIdentity = ObjectIdentity
battManBatteryCalib = _BattManBatteryCalib_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5)
)
_BattManString1BatteryCalibTableSize_Type = Integer32
_BattManString1BatteryCalibTableSize_Object = MibScalar
battManString1BatteryCalibTableSize = _BattManString1BatteryCalibTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 1),
    _BattManString1BatteryCalibTableSize_Type()
)
battManString1BatteryCalibTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryCalibTableSize.setStatus("mandatory")
_BattManString1BatteryCalibTable_Object = MibTable
battManString1BatteryCalibTable = _BattManString1BatteryCalibTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2)
)
if mibBuilder.loadTexts:
    battManString1BatteryCalibTable.setStatus("mandatory")
_BattManString1BatteryCalibEntry_Object = MibTableRow
battManString1BatteryCalibEntry = _BattManString1BatteryCalibEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1)
)
battManString1BatteryCalibEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManString1BatteryCalibIndex"),
)
if mibBuilder.loadTexts:
    battManString1BatteryCalibEntry.setStatus("mandatory")
_BattManString1BatteryCalibIndex_Type = Integer32
_BattManString1BatteryCalibIndex_Object = MibTableColumn
battManString1BatteryCalibIndex = _BattManString1BatteryCalibIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1, 1),
    _BattManString1BatteryCalibIndex_Type()
)
battManString1BatteryCalibIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryCalibIndex.setStatus("mandatory")
_BattManString1BatteryInterTierOhmicValue_Type = Integer32
_BattManString1BatteryInterTierOhmicValue_Object = MibTableColumn
battManString1BatteryInterTierOhmicValue = _BattManString1BatteryInterTierOhmicValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 2, 1, 2),
    _BattManString1BatteryInterTierOhmicValue_Type()
)
battManString1BatteryInterTierOhmicValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManString1BatteryInterTierOhmicValue.setStatus("mandatory")
_BattManString2BatteryCalibTableSize_Type = Integer32
_BattManString2BatteryCalibTableSize_Object = MibScalar
battManString2BatteryCalibTableSize = _BattManString2BatteryCalibTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 3),
    _BattManString2BatteryCalibTableSize_Type()
)
battManString2BatteryCalibTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryCalibTableSize.setStatus("mandatory")
_BattManString2BatteryCalibTable_Object = MibTable
battManString2BatteryCalibTable = _BattManString2BatteryCalibTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4)
)
if mibBuilder.loadTexts:
    battManString2BatteryCalibTable.setStatus("mandatory")
_BattManString2BatteryCalibEntry_Object = MibTableRow
battManString2BatteryCalibEntry = _BattManString2BatteryCalibEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1)
)
battManString2BatteryCalibEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManString2BatteryCalibIndex"),
)
if mibBuilder.loadTexts:
    battManString2BatteryCalibEntry.setStatus("mandatory")
_BattManString2BatteryCalibIndex_Type = Integer32
_BattManString2BatteryCalibIndex_Object = MibTableColumn
battManString2BatteryCalibIndex = _BattManString2BatteryCalibIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1, 1),
    _BattManString2BatteryCalibIndex_Type()
)
battManString2BatteryCalibIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryCalibIndex.setStatus("mandatory")
_BattManString2BatteryInterTierOhmicValue_Type = Integer32
_BattManString2BatteryInterTierOhmicValue_Object = MibTableColumn
battManString2BatteryInterTierOhmicValue = _BattManString2BatteryInterTierOhmicValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 5, 4, 1, 2),
    _BattManString2BatteryInterTierOhmicValue_Type()
)
battManString2BatteryInterTierOhmicValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManString2BatteryInterTierOhmicValue.setStatus("mandatory")
_BattManConfig_ObjectIdentity = ObjectIdentity
battManConfig = _BattManConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6)
)


class _BattManConfigApplication_Type(Integer32):
    """Custom type battManConfigApplication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 2),
          ("silcon", 1))
    )


_BattManConfigApplication_Type.__name__ = "Integer32"
_BattManConfigApplication_Object = MibScalar
battManConfigApplication = _BattManConfigApplication_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 1),
    _BattManConfigApplication_Type()
)
battManConfigApplication.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigApplication.setStatus("deprecated")


class _BattManConfigBatteryChemistry_Type(Integer32):
    """Custom type battManConfigBatteryChemistry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("leadAcid", 1),
          ("nickel-Cadmium", 2))
    )


_BattManConfigBatteryChemistry_Type.__name__ = "Integer32"
_BattManConfigBatteryChemistry_Object = MibScalar
battManConfigBatteryChemistry = _BattManConfigBatteryChemistry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 2),
    _BattManConfigBatteryChemistry_Type()
)
battManConfigBatteryChemistry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigBatteryChemistry.setStatus("mandatory")
_BattManConfigBatteryAHCapacity_Type = Integer32
_BattManConfigBatteryAHCapacity_Object = MibScalar
battManConfigBatteryAHCapacity = _BattManConfigBatteryAHCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 3),
    _BattManConfigBatteryAHCapacity_Type()
)
battManConfigBatteryAHCapacity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigBatteryAHCapacity.setStatus("mandatory")
_BattManConfigNumberofStrings_Type = Integer32
_BattManConfigNumberofStrings_Object = MibScalar
battManConfigNumberofStrings = _BattManConfigNumberofStrings_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 4),
    _BattManConfigNumberofStrings_Type()
)
battManConfigNumberofStrings.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigNumberofStrings.setStatus("mandatory")
_BattManConfigBatteriesperString_Type = Integer32
_BattManConfigBatteriesperString_Object = MibScalar
battManConfigBatteriesperString = _BattManConfigBatteriesperString_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 5),
    _BattManConfigBatteriesperString_Type()
)
battManConfigBatteriesperString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigBatteriesperString.setStatus("mandatory")
_BattManConfigCellsperBattery_Type = Integer32
_BattManConfigCellsperBattery_Object = MibScalar
battManConfigCellsperBattery = _BattManConfigCellsperBattery_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 6),
    _BattManConfigCellsperBattery_Type()
)
battManConfigCellsperBattery.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigCellsperBattery.setStatus("mandatory")
_BattManConfigMinCellVoltage_Type = Integer32
_BattManConfigMinCellVoltage_Object = MibScalar
battManConfigMinCellVoltage = _BattManConfigMinCellVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 7),
    _BattManConfigMinCellVoltage_Type()
)
battManConfigMinCellVoltage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigMinCellVoltage.setStatus("mandatory")
_BattManConfigMaxCellVoltage_Type = Integer32
_BattManConfigMaxCellVoltage_Object = MibScalar
battManConfigMaxCellVoltage = _BattManConfigMaxCellVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 8),
    _BattManConfigMaxCellVoltage_Type()
)
battManConfigMaxCellVoltage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigMaxCellVoltage.setStatus("mandatory")
_BattManConfigMaxPilotTempF_Type = Integer32
_BattManConfigMaxPilotTempF_Object = MibScalar
battManConfigMaxPilotTempF = _BattManConfigMaxPilotTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 9),
    _BattManConfigMaxPilotTempF_Type()
)
battManConfigMaxPilotTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigMaxPilotTempF.setStatus("mandatory")
_BattManConfigMaxPilotTempC_Type = Integer32
_BattManConfigMaxPilotTempC_Object = MibScalar
battManConfigMaxPilotTempC = _BattManConfigMaxPilotTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 10),
    _BattManConfigMaxPilotTempC_Type()
)
battManConfigMaxPilotTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigMaxPilotTempC.setStatus("mandatory")
_BattManConfigMaxAmbientTempF_Type = Integer32
_BattManConfigMaxAmbientTempF_Object = MibScalar
battManConfigMaxAmbientTempF = _BattManConfigMaxAmbientTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 11),
    _BattManConfigMaxAmbientTempF_Type()
)
battManConfigMaxAmbientTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigMaxAmbientTempF.setStatus("mandatory")
_BattManConfigMaxAmbientTempC_Type = Integer32
_BattManConfigMaxAmbientTempC_Object = MibScalar
battManConfigMaxAmbientTempC = _BattManConfigMaxAmbientTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 12),
    _BattManConfigMaxAmbientTempC_Type()
)
battManConfigMaxAmbientTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigMaxAmbientTempC.setStatus("mandatory")
_BattManConfigMinAmbientTempF_Type = Integer32
_BattManConfigMinAmbientTempF_Object = MibScalar
battManConfigMinAmbientTempF = _BattManConfigMinAmbientTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 13),
    _BattManConfigMinAmbientTempF_Type()
)
battManConfigMinAmbientTempF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigMinAmbientTempF.setStatus("mandatory")
_BattManConfigMinAmbientTempC_Type = Integer32
_BattManConfigMinAmbientTempC_Object = MibScalar
battManConfigMinAmbientTempC = _BattManConfigMinAmbientTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 14),
    _BattManConfigMinAmbientTempC_Type()
)
battManConfigMinAmbientTempC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigMinAmbientTempC.setStatus("mandatory")
_BattManConfigMaxRippleCurrent_Type = Integer32
_BattManConfigMaxRippleCurrent_Object = MibScalar
battManConfigMaxRippleCurrent = _BattManConfigMaxRippleCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 15),
    _BattManConfigMaxRippleCurrent_Type()
)
battManConfigMaxRippleCurrent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigMaxRippleCurrent.setStatus("mandatory")
_BattManConfigMaxCurrentAcceptanceDeviation_Type = Integer32
_BattManConfigMaxCurrentAcceptanceDeviation_Object = MibScalar
battManConfigMaxCurrentAcceptanceDeviation = _BattManConfigMaxCurrentAcceptanceDeviation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 16),
    _BattManConfigMaxCurrentAcceptanceDeviation_Type()
)
battManConfigMaxCurrentAcceptanceDeviation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigMaxCurrentAcceptanceDeviation.setStatus("mandatory")


class _BattManConfigMonitorWireLength_Type(Integer32):
    """Custom type battManConfigMonitorWireLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fiftyFeetOrLess", 1),
          ("moreThanFiftyFeet", 2))
    )


_BattManConfigMonitorWireLength_Type.__name__ = "Integer32"
_BattManConfigMonitorWireLength_Object = MibScalar
battManConfigMonitorWireLength = _BattManConfigMonitorWireLength_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 17),
    _BattManConfigMonitorWireLength_Type()
)
battManConfigMonitorWireLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigMonitorWireLength.setStatus("mandatory")
_BattManConfigDischargeVoltageAlarmLevel_Type = Integer32
_BattManConfigDischargeVoltageAlarmLevel_Object = MibScalar
battManConfigDischargeVoltageAlarmLevel = _BattManConfigDischargeVoltageAlarmLevel_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 18),
    _BattManConfigDischargeVoltageAlarmLevel_Type()
)
battManConfigDischargeVoltageAlarmLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigDischargeVoltageAlarmLevel.setStatus("mandatory")


class _BattManConfigAutoAnnunciatorReset_Type(Integer32):
    """Custom type battManConfigAutoAnnunciatorReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_BattManConfigAutoAnnunciatorReset_Type.__name__ = "Integer32"
_BattManConfigAutoAnnunciatorReset_Object = MibScalar
battManConfigAutoAnnunciatorReset = _BattManConfigAutoAnnunciatorReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 19),
    _BattManConfigAutoAnnunciatorReset_Type()
)
battManConfigAutoAnnunciatorReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigAutoAnnunciatorReset.setStatus("mandatory")
_BattManConfigSuspendCellVoltage_Type = Integer32
_BattManConfigSuspendCellVoltage_Object = MibScalar
battManConfigSuspendCellVoltage = _BattManConfigSuspendCellVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 20),
    _BattManConfigSuspendCellVoltage_Type()
)
battManConfigSuspendCellVoltage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigSuspendCellVoltage.setStatus("mandatory")
_BattManConfigOhmicTestWaitTime_Type = Integer32
_BattManConfigOhmicTestWaitTime_Object = MibScalar
battManConfigOhmicTestWaitTime = _BattManConfigOhmicTestWaitTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 21),
    _BattManConfigOhmicTestWaitTime_Type()
)
battManConfigOhmicTestWaitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigOhmicTestWaitTime.setStatus("mandatory")
_BattManConfigNumberOfBoosts_Type = Integer32
_BattManConfigNumberOfBoosts_Object = MibScalar
battManConfigNumberOfBoosts = _BattManConfigNumberOfBoosts_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 6, 22),
    _BattManConfigNumberOfBoosts_Type()
)
battManConfigNumberOfBoosts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManConfigNumberOfBoosts.setStatus("mandatory")
_BattManAlarm_ObjectIdentity = ObjectIdentity
battManAlarm = _BattManAlarm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7)
)


class _BattManAlarmManagementController_Type(Integer32):
    """Custom type battManAlarmManagementController based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManAlarmManagementController_Type.__name__ = "Integer32"
_BattManAlarmManagementController_Object = MibScalar
battManAlarmManagementController = _BattManAlarmManagementController_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 1),
    _BattManAlarmManagementController_Type()
)
battManAlarmManagementController.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManAlarmManagementController.setStatus("mandatory")


class _BattManAlarmBatteries_Type(Integer32):
    """Custom type battManAlarmBatteries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManAlarmBatteries_Type.__name__ = "Integer32"
_BattManAlarmBatteries_Object = MibScalar
battManAlarmBatteries = _BattManAlarmBatteries_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 2),
    _BattManAlarmBatteries_Type()
)
battManAlarmBatteries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManAlarmBatteries.setStatus("mandatory")


class _BattManAlarmCharger_Type(Integer32):
    """Custom type battManAlarmCharger based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManAlarmCharger_Type.__name__ = "Integer32"
_BattManAlarmCharger_Object = MibScalar
battManAlarmCharger = _BattManAlarmCharger_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 3),
    _BattManAlarmCharger_Type()
)
battManAlarmCharger.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManAlarmCharger.setStatus("mandatory")


class _BattManAlarmEnvironment_Type(Integer32):
    """Custom type battManAlarmEnvironment based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManAlarmEnvironment_Type.__name__ = "Integer32"
_BattManAlarmEnvironment_Object = MibScalar
battManAlarmEnvironment = _BattManAlarmEnvironment_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 7, 4),
    _BattManAlarmEnvironment_Type()
)
battManAlarmEnvironment.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManAlarmEnvironment.setStatus("mandatory")
_BattManSystemStatus_ObjectIdentity = ObjectIdentity
battManSystemStatus = _BattManSystemStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8)
)
_BattManSystemAmbientTempC_Type = Integer32
_BattManSystemAmbientTempC_Object = MibScalar
battManSystemAmbientTempC = _BattManSystemAmbientTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 1),
    _BattManSystemAmbientTempC_Type()
)
battManSystemAmbientTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManSystemAmbientTempC.setStatus("mandatory")
_BattManSystemAmbientTempF_Type = Integer32
_BattManSystemAmbientTempF_Object = MibScalar
battManSystemAmbientTempF = _BattManSystemAmbientTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 2),
    _BattManSystemAmbientTempF_Type()
)
battManSystemAmbientTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManSystemAmbientTempF.setStatus("mandatory")
_BattManSystemPilotTempC_Type = Integer32
_BattManSystemPilotTempC_Object = MibScalar
battManSystemPilotTempC = _BattManSystemPilotTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 3),
    _BattManSystemPilotTempC_Type()
)
battManSystemPilotTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManSystemPilotTempC.setStatus("mandatory")
_BattManSystemPilotTempF_Type = Integer32
_BattManSystemPilotTempF_Object = MibScalar
battManSystemPilotTempF = _BattManSystemPilotTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 4),
    _BattManSystemPilotTempF_Type()
)
battManSystemPilotTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManSystemPilotTempF.setStatus("mandatory")


class _BattManSystemAmbientHighTempAlarm_Type(Integer32):
    """Custom type battManSystemAmbientHighTempAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManSystemAmbientHighTempAlarm_Type.__name__ = "Integer32"
_BattManSystemAmbientHighTempAlarm_Object = MibScalar
battManSystemAmbientHighTempAlarm = _BattManSystemAmbientHighTempAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 5),
    _BattManSystemAmbientHighTempAlarm_Type()
)
battManSystemAmbientHighTempAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManSystemAmbientHighTempAlarm.setStatus("mandatory")


class _BattManSystemAmbientLowTempAlarm_Type(Integer32):
    """Custom type battManSystemAmbientLowTempAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManSystemAmbientLowTempAlarm_Type.__name__ = "Integer32"
_BattManSystemAmbientLowTempAlarm_Object = MibScalar
battManSystemAmbientLowTempAlarm = _BattManSystemAmbientLowTempAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 6),
    _BattManSystemAmbientLowTempAlarm_Type()
)
battManSystemAmbientLowTempAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManSystemAmbientLowTempAlarm.setStatus("mandatory")


class _BattManSystemPilotBatteryHighTempAlarm_Type(Integer32):
    """Custom type battManSystemPilotBatteryHighTempAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManSystemPilotBatteryHighTempAlarm_Type.__name__ = "Integer32"
_BattManSystemPilotBatteryHighTempAlarm_Object = MibScalar
battManSystemPilotBatteryHighTempAlarm = _BattManSystemPilotBatteryHighTempAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 7),
    _BattManSystemPilotBatteryHighTempAlarm_Type()
)
battManSystemPilotBatteryHighTempAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManSystemPilotBatteryHighTempAlarm.setStatus("mandatory")


class _BattManSystemPilotProbeDisconnected_Type(Integer32):
    """Custom type battManSystemPilotProbeDisconnected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManSystemPilotProbeDisconnected_Type.__name__ = "Integer32"
_BattManSystemPilotProbeDisconnected_Object = MibScalar
battManSystemPilotProbeDisconnected = _BattManSystemPilotProbeDisconnected_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 8),
    _BattManSystemPilotProbeDisconnected_Type()
)
battManSystemPilotProbeDisconnected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManSystemPilotProbeDisconnected.setStatus("mandatory")


class _BattManSystemAmbientProbeDisconnected_Type(Integer32):
    """Custom type battManSystemAmbientProbeDisconnected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManSystemAmbientProbeDisconnected_Type.__name__ = "Integer32"
_BattManSystemAmbientProbeDisconnected_Object = MibScalar
battManSystemAmbientProbeDisconnected = _BattManSystemAmbientProbeDisconnected_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 9),
    _BattManSystemAmbientProbeDisconnected_Type()
)
battManSystemAmbientProbeDisconnected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManSystemAmbientProbeDisconnected.setStatus("mandatory")


class _BattManSystemConfigurationInvalid_Type(Integer32):
    """Custom type battManSystemConfigurationInvalid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManSystemConfigurationInvalid_Type.__name__ = "Integer32"
_BattManSystemConfigurationInvalid_Object = MibScalar
battManSystemConfigurationInvalid = _BattManSystemConfigurationInvalid_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 10),
    _BattManSystemConfigurationInvalid_Type()
)
battManSystemConfigurationInvalid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManSystemConfigurationInvalid.setStatus("mandatory")


class _BattManSystemSuspendVoltage_Type(Integer32):
    """Custom type battManSystemSuspendVoltage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManSystemSuspendVoltage_Type.__name__ = "Integer32"
_BattManSystemSuspendVoltage_Object = MibScalar
battManSystemSuspendVoltage = _BattManSystemSuspendVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 8, 11),
    _BattManSystemSuspendVoltage_Type()
)
battManSystemSuspendVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManSystemSuspendVoltage.setStatus("mandatory")
_BattManStringStatus_ObjectIdentity = ObjectIdentity
battManStringStatus = _BattManStringStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9)
)
_BattManStringTableSize_Type = Integer32
_BattManStringTableSize_Object = MibScalar
battManStringTableSize = _BattManStringTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 1),
    _BattManStringTableSize_Type()
)
battManStringTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringTableSize.setStatus("mandatory")
_BattManStringTable_Object = MibTable
battManStringTable = _BattManStringTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2)
)
if mibBuilder.loadTexts:
    battManStringTable.setStatus("mandatory")
_BattManStringEntry_Object = MibTableRow
battManStringEntry = _BattManStringEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1)
)
battManStringEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManStringIndex"),
)
if mibBuilder.loadTexts:
    battManStringEntry.setStatus("mandatory")
_BattManStringIndex_Type = Integer32
_BattManStringIndex_Object = MibTableColumn
battManStringIndex = _BattManStringIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 1),
    _BattManStringIndex_Type()
)
battManStringIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringIndex.setStatus("mandatory")
_BattManStringCurrent_Type = Integer32
_BattManStringCurrent_Object = MibTableColumn
battManStringCurrent = _BattManStringCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 2),
    _BattManStringCurrent_Type()
)
battManStringCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringCurrent.setStatus("mandatory")
_BattManStringRippleCurrent_Type = Integer32
_BattManStringRippleCurrent_Object = MibTableColumn
battManStringRippleCurrent = _BattManStringRippleCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 3),
    _BattManStringRippleCurrent_Type()
)
battManStringRippleCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringRippleCurrent.setStatus("mandatory")


class _BattManStringChargerHighVoltageAlarm_Type(Integer32):
    """Custom type battManStringChargerHighVoltageAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManStringChargerHighVoltageAlarm_Type.__name__ = "Integer32"
_BattManStringChargerHighVoltageAlarm_Object = MibTableColumn
battManStringChargerHighVoltageAlarm = _BattManStringChargerHighVoltageAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 4),
    _BattManStringChargerHighVoltageAlarm_Type()
)
battManStringChargerHighVoltageAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringChargerHighVoltageAlarm.setStatus("mandatory")


class _BattManStringChargerLowVoltageAlarm_Type(Integer32):
    """Custom type battManStringChargerLowVoltageAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManStringChargerLowVoltageAlarm_Type.__name__ = "Integer32"
_BattManStringChargerLowVoltageAlarm_Object = MibTableColumn
battManStringChargerLowVoltageAlarm = _BattManStringChargerLowVoltageAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 5),
    _BattManStringChargerLowVoltageAlarm_Type()
)
battManStringChargerLowVoltageAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringChargerLowVoltageAlarm.setStatus("mandatory")


class _BattManStringCurrentProbeDisconnected_Type(Integer32):
    """Custom type battManStringCurrentProbeDisconnected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManStringCurrentProbeDisconnected_Type.__name__ = "Integer32"
_BattManStringCurrentProbeDisconnected_Object = MibTableColumn
battManStringCurrentProbeDisconnected = _BattManStringCurrentProbeDisconnected_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 6),
    _BattManStringCurrentProbeDisconnected_Type()
)
battManStringCurrentProbeDisconnected.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringCurrentProbeDisconnected.setStatus("mandatory")


class _BattManStringOnBattery_Type(Integer32):
    """Custom type battManStringOnBattery based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManStringOnBattery_Type.__name__ = "Integer32"
_BattManStringOnBattery_Object = MibTableColumn
battManStringOnBattery = _BattManStringOnBattery_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 7),
    _BattManStringOnBattery_Type()
)
battManStringOnBattery.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringOnBattery.setStatus("mandatory")


class _BattManStringHighRippleCurrent_Type(Integer32):
    """Custom type battManStringHighRippleCurrent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManStringHighRippleCurrent_Type.__name__ = "Integer32"
_BattManStringHighRippleCurrent_Object = MibTableColumn
battManStringHighRippleCurrent = _BattManStringHighRippleCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 8),
    _BattManStringHighRippleCurrent_Type()
)
battManStringHighRippleCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringHighRippleCurrent.setStatus("mandatory")
_BattManStringVoltage_Type = Integer32
_BattManStringVoltage_Object = MibTableColumn
battManStringVoltage = _BattManStringVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 9),
    _BattManStringVoltage_Type()
)
battManStringVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringVoltage.setStatus("mandatory")
_BattManStringDischargeLess5Seconds_Type = Integer32
_BattManStringDischargeLess5Seconds_Object = MibTableColumn
battManStringDischargeLess5Seconds = _BattManStringDischargeLess5Seconds_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 10),
    _BattManStringDischargeLess5Seconds_Type()
)
battManStringDischargeLess5Seconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringDischargeLess5Seconds.setStatus("mandatory")
_BattManStringDischarge5to10Seconds_Type = Integer32
_BattManStringDischarge5to10Seconds_Object = MibTableColumn
battManStringDischarge5to10Seconds = _BattManStringDischarge5to10Seconds_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 11),
    _BattManStringDischarge5to10Seconds_Type()
)
battManStringDischarge5to10Seconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringDischarge5to10Seconds.setStatus("mandatory")
_BattManStringDischarge10to60Seconds_Type = Integer32
_BattManStringDischarge10to60Seconds_Object = MibTableColumn
battManStringDischarge10to60Seconds = _BattManStringDischarge10to60Seconds_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 12),
    _BattManStringDischarge10to60Seconds_Type()
)
battManStringDischarge10to60Seconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringDischarge10to60Seconds.setStatus("mandatory")
_BattManStringDischargeMore60Seconds_Type = Integer32
_BattManStringDischargeMore60Seconds_Object = MibTableColumn
battManStringDischargeMore60Seconds = _BattManStringDischargeMore60Seconds_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 9, 2, 1, 13),
    _BattManStringDischargeMore60Seconds_Type()
)
battManStringDischargeMore60Seconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManStringDischargeMore60Seconds.setStatus("mandatory")
_BattManBatteryStatus_ObjectIdentity = ObjectIdentity
battManBatteryStatus = _BattManBatteryStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10)
)
_BattManString1BatteryTableSize_Type = Integer32
_BattManString1BatteryTableSize_Object = MibScalar
battManString1BatteryTableSize = _BattManString1BatteryTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 1),
    _BattManString1BatteryTableSize_Type()
)
battManString1BatteryTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryTableSize.setStatus("mandatory")
_BattManString1BatteryTable_Object = MibTable
battManString1BatteryTable = _BattManString1BatteryTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2)
)
if mibBuilder.loadTexts:
    battManString1BatteryTable.setStatus("mandatory")
_BattManString1BatteryEntry_Object = MibTableRow
battManString1BatteryEntry = _BattManString1BatteryEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1)
)
battManString1BatteryEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManString1BatteryIndex"),
)
if mibBuilder.loadTexts:
    battManString1BatteryEntry.setStatus("mandatory")
_BattManString1BatteryIndex_Type = Integer32
_BattManString1BatteryIndex_Object = MibTableColumn
battManString1BatteryIndex = _BattManString1BatteryIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 1),
    _BattManString1BatteryIndex_Type()
)
battManString1BatteryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryIndex.setStatus("mandatory")
_BattManString1BatteryVoltage_Type = Integer32
_BattManString1BatteryVoltage_Object = MibTableColumn
battManString1BatteryVoltage = _BattManString1BatteryVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 2),
    _BattManString1BatteryVoltage_Type()
)
battManString1BatteryVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryVoltage.setStatus("mandatory")
_BattManString1BatteryLowestVoltage_Type = Integer32
_BattManString1BatteryLowestVoltage_Object = MibTableColumn
battManString1BatteryLowestVoltage = _BattManString1BatteryLowestVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 3),
    _BattManString1BatteryLowestVoltage_Type()
)
battManString1BatteryLowestVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryLowestVoltage.setStatus("mandatory")


class _BattManString1BatteryCellShorted_Type(Integer32):
    """Custom type battManString1BatteryCellShorted based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString1BatteryCellShorted_Type.__name__ = "Integer32"
_BattManString1BatteryCellShorted_Object = MibTableColumn
battManString1BatteryCellShorted = _BattManString1BatteryCellShorted_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 4),
    _BattManString1BatteryCellShorted_Type()
)
battManString1BatteryCellShorted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryCellShorted.setStatus("mandatory")


class _BattManString1BatteryOpenFuseOrConnection_Type(Integer32):
    """Custom type battManString1BatteryOpenFuseOrConnection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString1BatteryOpenFuseOrConnection_Type.__name__ = "Integer32"
_BattManString1BatteryOpenFuseOrConnection_Object = MibTableColumn
battManString1BatteryOpenFuseOrConnection = _BattManString1BatteryOpenFuseOrConnection_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 5),
    _BattManString1BatteryOpenFuseOrConnection_Type()
)
battManString1BatteryOpenFuseOrConnection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryOpenFuseOrConnection.setStatus("mandatory")


class _BattManString1BatteryLowCapacity_Type(Integer32):
    """Custom type battManString1BatteryLowCapacity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString1BatteryLowCapacity_Type.__name__ = "Integer32"
_BattManString1BatteryLowCapacity_Object = MibTableColumn
battManString1BatteryLowCapacity = _BattManString1BatteryLowCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 6),
    _BattManString1BatteryLowCapacity_Type()
)
battManString1BatteryLowCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryLowCapacity.setStatus("mandatory")


class _BattManString1BatteryHighOhmicValue_Type(Integer32):
    """Custom type battManString1BatteryHighOhmicValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString1BatteryHighOhmicValue_Type.__name__ = "Integer32"
_BattManString1BatteryHighOhmicValue_Object = MibTableColumn
battManString1BatteryHighOhmicValue = _BattManString1BatteryHighOhmicValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 7),
    _BattManString1BatteryHighOhmicValue_Type()
)
battManString1BatteryHighOhmicValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryHighOhmicValue.setStatus("mandatory")


class _BattManString1BatteryThermalRunaway_Type(Integer32):
    """Custom type battManString1BatteryThermalRunaway based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString1BatteryThermalRunaway_Type.__name__ = "Integer32"
_BattManString1BatteryThermalRunaway_Object = MibTableColumn
battManString1BatteryThermalRunaway = _BattManString1BatteryThermalRunaway_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 8),
    _BattManString1BatteryThermalRunaway_Type()
)
battManString1BatteryThermalRunaway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryThermalRunaway.setStatus("mandatory")


class _BattManString1BatteryDryout_Type(Integer32):
    """Custom type battManString1BatteryDryout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString1BatteryDryout_Type.__name__ = "Integer32"
_BattManString1BatteryDryout_Object = MibTableColumn
battManString1BatteryDryout = _BattManString1BatteryDryout_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 9),
    _BattManString1BatteryDryout_Type()
)
battManString1BatteryDryout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryDryout.setStatus("mandatory")


class _BattManString1BatteryUserHighVoltageAlarm_Type(Integer32):
    """Custom type battManString1BatteryUserHighVoltageAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString1BatteryUserHighVoltageAlarm_Type.__name__ = "Integer32"
_BattManString1BatteryUserHighVoltageAlarm_Object = MibTableColumn
battManString1BatteryUserHighVoltageAlarm = _BattManString1BatteryUserHighVoltageAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 10),
    _BattManString1BatteryUserHighVoltageAlarm_Type()
)
battManString1BatteryUserHighVoltageAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryUserHighVoltageAlarm.setStatus("mandatory")


class _BattManString1BatteryUserLowVoltageAlarm_Type(Integer32):
    """Custom type battManString1BatteryUserLowVoltageAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString1BatteryUserLowVoltageAlarm_Type.__name__ = "Integer32"
_BattManString1BatteryUserLowVoltageAlarm_Object = MibTableColumn
battManString1BatteryUserLowVoltageAlarm = _BattManString1BatteryUserLowVoltageAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 11),
    _BattManString1BatteryUserLowVoltageAlarm_Type()
)
battManString1BatteryUserLowVoltageAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryUserLowVoltageAlarm.setStatus("mandatory")


class _BattManString1BatteryChemHighVoltageAlarm_Type(Integer32):
    """Custom type battManString1BatteryChemHighVoltageAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString1BatteryChemHighVoltageAlarm_Type.__name__ = "Integer32"
_BattManString1BatteryChemHighVoltageAlarm_Object = MibTableColumn
battManString1BatteryChemHighVoltageAlarm = _BattManString1BatteryChemHighVoltageAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 12),
    _BattManString1BatteryChemHighVoltageAlarm_Type()
)
battManString1BatteryChemHighVoltageAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryChemHighVoltageAlarm.setStatus("mandatory")


class _BattManString1BatteryChemLowVoltageAlarm_Type(Integer32):
    """Custom type battManString1BatteryChemLowVoltageAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString1BatteryChemLowVoltageAlarm_Type.__name__ = "Integer32"
_BattManString1BatteryChemLowVoltageAlarm_Object = MibTableColumn
battManString1BatteryChemLowVoltageAlarm = _BattManString1BatteryChemLowVoltageAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 13),
    _BattManString1BatteryChemLowVoltageAlarm_Type()
)
battManString1BatteryChemLowVoltageAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryChemLowVoltageAlarm.setStatus("mandatory")


class _BattManString1BatteryOpenCell_Type(Integer32):
    """Custom type battManString1BatteryOpenCell based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString1BatteryOpenCell_Type.__name__ = "Integer32"
_BattManString1BatteryOpenCell_Object = MibTableColumn
battManString1BatteryOpenCell = _BattManString1BatteryOpenCell_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 2, 1, 14),
    _BattManString1BatteryOpenCell_Type()
)
battManString1BatteryOpenCell.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1BatteryOpenCell.setStatus("mandatory")
_BattManString2BatteryTableSize_Type = Integer32
_BattManString2BatteryTableSize_Object = MibScalar
battManString2BatteryTableSize = _BattManString2BatteryTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 3),
    _BattManString2BatteryTableSize_Type()
)
battManString2BatteryTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryTableSize.setStatus("mandatory")
_BattManString2BatteryTable_Object = MibTable
battManString2BatteryTable = _BattManString2BatteryTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4)
)
if mibBuilder.loadTexts:
    battManString2BatteryTable.setStatus("mandatory")
_BattManString2BatteryEntry_Object = MibTableRow
battManString2BatteryEntry = _BattManString2BatteryEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1)
)
battManString2BatteryEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManString2BatteryIndex"),
)
if mibBuilder.loadTexts:
    battManString2BatteryEntry.setStatus("mandatory")
_BattManString2BatteryIndex_Type = Integer32
_BattManString2BatteryIndex_Object = MibTableColumn
battManString2BatteryIndex = _BattManString2BatteryIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 1),
    _BattManString2BatteryIndex_Type()
)
battManString2BatteryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryIndex.setStatus("mandatory")
_BattManString2BatteryVoltage_Type = Integer32
_BattManString2BatteryVoltage_Object = MibTableColumn
battManString2BatteryVoltage = _BattManString2BatteryVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 2),
    _BattManString2BatteryVoltage_Type()
)
battManString2BatteryVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryVoltage.setStatus("mandatory")
_BattManString2BatteryLowestVoltage_Type = Integer32
_BattManString2BatteryLowestVoltage_Object = MibTableColumn
battManString2BatteryLowestVoltage = _BattManString2BatteryLowestVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 3),
    _BattManString2BatteryLowestVoltage_Type()
)
battManString2BatteryLowestVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryLowestVoltage.setStatus("mandatory")


class _BattManString2BatteryCellShorted_Type(Integer32):
    """Custom type battManString2BatteryCellShorted based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString2BatteryCellShorted_Type.__name__ = "Integer32"
_BattManString2BatteryCellShorted_Object = MibTableColumn
battManString2BatteryCellShorted = _BattManString2BatteryCellShorted_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 4),
    _BattManString2BatteryCellShorted_Type()
)
battManString2BatteryCellShorted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryCellShorted.setStatus("mandatory")


class _BattManString2BatteryOpenFuseOrConnection_Type(Integer32):
    """Custom type battManString2BatteryOpenFuseOrConnection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString2BatteryOpenFuseOrConnection_Type.__name__ = "Integer32"
_BattManString2BatteryOpenFuseOrConnection_Object = MibTableColumn
battManString2BatteryOpenFuseOrConnection = _BattManString2BatteryOpenFuseOrConnection_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 5),
    _BattManString2BatteryOpenFuseOrConnection_Type()
)
battManString2BatteryOpenFuseOrConnection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryOpenFuseOrConnection.setStatus("mandatory")


class _BattManString2BatteryLowCapacity_Type(Integer32):
    """Custom type battManString2BatteryLowCapacity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString2BatteryLowCapacity_Type.__name__ = "Integer32"
_BattManString2BatteryLowCapacity_Object = MibTableColumn
battManString2BatteryLowCapacity = _BattManString2BatteryLowCapacity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 6),
    _BattManString2BatteryLowCapacity_Type()
)
battManString2BatteryLowCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryLowCapacity.setStatus("mandatory")


class _BattManString2BatteryHighOhmicValue_Type(Integer32):
    """Custom type battManString2BatteryHighOhmicValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString2BatteryHighOhmicValue_Type.__name__ = "Integer32"
_BattManString2BatteryHighOhmicValue_Object = MibTableColumn
battManString2BatteryHighOhmicValue = _BattManString2BatteryHighOhmicValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 7),
    _BattManString2BatteryHighOhmicValue_Type()
)
battManString2BatteryHighOhmicValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryHighOhmicValue.setStatus("mandatory")


class _BattManString2BatteryThermalRunaway_Type(Integer32):
    """Custom type battManString2BatteryThermalRunaway based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString2BatteryThermalRunaway_Type.__name__ = "Integer32"
_BattManString2BatteryThermalRunaway_Object = MibTableColumn
battManString2BatteryThermalRunaway = _BattManString2BatteryThermalRunaway_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 8),
    _BattManString2BatteryThermalRunaway_Type()
)
battManString2BatteryThermalRunaway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryThermalRunaway.setStatus("mandatory")


class _BattManString2BatteryDryout_Type(Integer32):
    """Custom type battManString2BatteryDryout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString2BatteryDryout_Type.__name__ = "Integer32"
_BattManString2BatteryDryout_Object = MibTableColumn
battManString2BatteryDryout = _BattManString2BatteryDryout_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 9),
    _BattManString2BatteryDryout_Type()
)
battManString2BatteryDryout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryDryout.setStatus("mandatory")


class _BattManString2BatteryUserHighVoltageAlarm_Type(Integer32):
    """Custom type battManString2BatteryUserHighVoltageAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString2BatteryUserHighVoltageAlarm_Type.__name__ = "Integer32"
_BattManString2BatteryUserHighVoltageAlarm_Object = MibTableColumn
battManString2BatteryUserHighVoltageAlarm = _BattManString2BatteryUserHighVoltageAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 10),
    _BattManString2BatteryUserHighVoltageAlarm_Type()
)
battManString2BatteryUserHighVoltageAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryUserHighVoltageAlarm.setStatus("mandatory")


class _BattManString2BatteryUserLowVoltageAlarm_Type(Integer32):
    """Custom type battManString2BatteryUserLowVoltageAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString2BatteryUserLowVoltageAlarm_Type.__name__ = "Integer32"
_BattManString2BatteryUserLowVoltageAlarm_Object = MibTableColumn
battManString2BatteryUserLowVoltageAlarm = _BattManString2BatteryUserLowVoltageAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 11),
    _BattManString2BatteryUserLowVoltageAlarm_Type()
)
battManString2BatteryUserLowVoltageAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryUserLowVoltageAlarm.setStatus("mandatory")


class _BattManString2BatteryChemHighVoltageAlarm_Type(Integer32):
    """Custom type battManString2BatteryChemHighVoltageAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString2BatteryChemHighVoltageAlarm_Type.__name__ = "Integer32"
_BattManString2BatteryChemHighVoltageAlarm_Object = MibTableColumn
battManString2BatteryChemHighVoltageAlarm = _BattManString2BatteryChemHighVoltageAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 12),
    _BattManString2BatteryChemHighVoltageAlarm_Type()
)
battManString2BatteryChemHighVoltageAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryChemHighVoltageAlarm.setStatus("mandatory")


class _BattManString2BatteryChemLowVoltageAlarm_Type(Integer32):
    """Custom type battManString2BatteryChemLowVoltageAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString2BatteryChemLowVoltageAlarm_Type.__name__ = "Integer32"
_BattManString2BatteryChemLowVoltageAlarm_Object = MibTableColumn
battManString2BatteryChemLowVoltageAlarm = _BattManString2BatteryChemLowVoltageAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 13),
    _BattManString2BatteryChemLowVoltageAlarm_Type()
)
battManString2BatteryChemLowVoltageAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryChemLowVoltageAlarm.setStatus("mandatory")


class _BattManString2BatteryOpenCell_Type(Integer32):
    """Custom type battManString2BatteryOpenCell based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManString2BatteryOpenCell_Type.__name__ = "Integer32"
_BattManString2BatteryOpenCell_Object = MibTableColumn
battManString2BatteryOpenCell = _BattManString2BatteryOpenCell_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 10, 4, 1, 14),
    _BattManString2BatteryOpenCell_Type()
)
battManString2BatteryOpenCell.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2BatteryOpenCell.setStatus("mandatory")
_BattManInputContactStatus_ObjectIdentity = ObjectIdentity
battManInputContactStatus = _BattManInputContactStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11)
)
_BattManInputContactTableSize_Type = Integer32
_BattManInputContactTableSize_Object = MibScalar
battManInputContactTableSize = _BattManInputContactTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 1),
    _BattManInputContactTableSize_Type()
)
battManInputContactTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManInputContactTableSize.setStatus("mandatory")
_BattManInputContactTable_Object = MibTable
battManInputContactTable = _BattManInputContactTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2)
)
if mibBuilder.loadTexts:
    battManInputContactTable.setStatus("mandatory")
_BattManInputContactEntry_Object = MibTableRow
battManInputContactEntry = _BattManInputContactEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1)
)
battManInputContactEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManInputContactIndex"),
)
if mibBuilder.loadTexts:
    battManInputContactEntry.setStatus("mandatory")
_BattManInputContactIndex_Type = Integer32
_BattManInputContactIndex_Object = MibTableColumn
battManInputContactIndex = _BattManInputContactIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 1),
    _BattManInputContactIndex_Type()
)
battManInputContactIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManInputContactIndex.setStatus("mandatory")
_BattManInputContactName_Type = DisplayString
_BattManInputContactName_Object = MibTableColumn
battManInputContactName = _BattManInputContactName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 2),
    _BattManInputContactName_Type()
)
battManInputContactName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManInputContactName.setStatus("mandatory")


class _BattManInputContactAlarmState_Type(Integer32):
    """Custom type battManInputContactAlarmState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManInputContactAlarmState_Type.__name__ = "Integer32"
_BattManInputContactAlarmState_Object = MibTableColumn
battManInputContactAlarmState = _BattManInputContactAlarmState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 3),
    _BattManInputContactAlarmState_Type()
)
battManInputContactAlarmState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManInputContactAlarmState.setStatus("mandatory")


class _BattManInputContactState_Type(Integer32):
    """Custom type battManInputContactState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_BattManInputContactState_Type.__name__ = "Integer32"
_BattManInputContactState_Object = MibTableColumn
battManInputContactState = _BattManInputContactState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 4),
    _BattManInputContactState_Type()
)
battManInputContactState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManInputContactState.setStatus("mandatory")


class _BattManInputContactNormalState_Type(Integer32):
    """Custom type battManInputContactNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_BattManInputContactNormalState_Type.__name__ = "Integer32"
_BattManInputContactNormalState_Object = MibTableColumn
battManInputContactNormalState = _BattManInputContactNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 5),
    _BattManInputContactNormalState_Type()
)
battManInputContactNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManInputContactNormalState.setStatus("mandatory")
_BattManInputContactAlarmDelay_Type = Integer32
_BattManInputContactAlarmDelay_Object = MibTableColumn
battManInputContactAlarmDelay = _BattManInputContactAlarmDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 11, 2, 1, 6),
    _BattManInputContactAlarmDelay_Type()
)
battManInputContactAlarmDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManInputContactAlarmDelay.setStatus("mandatory")
_BattManControl_ObjectIdentity = ObjectIdentity
battManControl = _BattManControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12)
)


class _BattManRemoteAnnunciatorReset_Type(Integer32):
    """Custom type battManRemoteAnnunciatorReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 1),
          ("reset", 2))
    )


_BattManRemoteAnnunciatorReset_Type.__name__ = "Integer32"
_BattManRemoteAnnunciatorReset_Object = MibScalar
battManRemoteAnnunciatorReset = _BattManRemoteAnnunciatorReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 1),
    _BattManRemoteAnnunciatorReset_Type()
)
battManRemoteAnnunciatorReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManRemoteAnnunciatorReset.setStatus("mandatory")


class _BattManResetChargeCurrentDeviationBenchmark_Type(Integer32):
    """Custom type battManResetChargeCurrentDeviationBenchmark based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 1),
          ("reset", 2))
    )


_BattManResetChargeCurrentDeviationBenchmark_Type.__name__ = "Integer32"
_BattManResetChargeCurrentDeviationBenchmark_Object = MibScalar
battManResetChargeCurrentDeviationBenchmark = _BattManResetChargeCurrentDeviationBenchmark_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 2),
    _BattManResetChargeCurrentDeviationBenchmark_Type()
)
battManResetChargeCurrentDeviationBenchmark.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManResetChargeCurrentDeviationBenchmark.setStatus("mandatory")


class _BattManResetLowestDischargeVoltages_Type(Integer32):
    """Custom type battManResetLowestDischargeVoltages based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 1),
          ("reset", 2))
    )


_BattManResetLowestDischargeVoltages_Type.__name__ = "Integer32"
_BattManResetLowestDischargeVoltages_Object = MibScalar
battManResetLowestDischargeVoltages = _BattManResetLowestDischargeVoltages_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 3),
    _BattManResetLowestDischargeVoltages_Type()
)
battManResetLowestDischargeVoltages.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManResetLowestDischargeVoltages.setStatus("mandatory")


class _BattManResetDischargeCounters_Type(Integer32):
    """Custom type battManResetDischargeCounters based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 1),
          ("reset", 2))
    )


_BattManResetDischargeCounters_Type.__name__ = "Integer32"
_BattManResetDischargeCounters_Object = MibScalar
battManResetDischargeCounters = _BattManResetDischargeCounters_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 12, 4),
    _BattManResetDischargeCounters_Type()
)
battManResetDischargeCounters.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    battManResetDischargeCounters.setStatus("mandatory")
_BattManTestResults_ObjectIdentity = ObjectIdentity
battManTestResults = _BattManTestResults_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13)
)
_BattManString1OhmicValueLastDischargeInfo_Type = DisplayString
_BattManString1OhmicValueLastDischargeInfo_Object = MibScalar
battManString1OhmicValueLastDischargeInfo = _BattManString1OhmicValueLastDischargeInfo_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 1),
    _BattManString1OhmicValueLastDischargeInfo_Type()
)
battManString1OhmicValueLastDischargeInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1OhmicValueLastDischargeInfo.setStatus("mandatory")
_BattManString1OhmicValueTableSize_Type = Integer32
_BattManString1OhmicValueTableSize_Object = MibScalar
battManString1OhmicValueTableSize = _BattManString1OhmicValueTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 2),
    _BattManString1OhmicValueTableSize_Type()
)
battManString1OhmicValueTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1OhmicValueTableSize.setStatus("mandatory")
_BattManString1OhmicValueTable_Object = MibTable
battManString1OhmicValueTable = _BattManString1OhmicValueTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3)
)
if mibBuilder.loadTexts:
    battManString1OhmicValueTable.setStatus("mandatory")
_BattManString1OhmicValueEntry_Object = MibTableRow
battManString1OhmicValueEntry = _BattManString1OhmicValueEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1)
)
battManString1OhmicValueEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManString1OhmicValueIndex"),
)
if mibBuilder.loadTexts:
    battManString1OhmicValueEntry.setStatus("mandatory")
_BattManString1OhmicValueIndex_Type = Integer32
_BattManString1OhmicValueIndex_Object = MibTableColumn
battManString1OhmicValueIndex = _BattManString1OhmicValueIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1, 1),
    _BattManString1OhmicValueIndex_Type()
)
battManString1OhmicValueIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1OhmicValueIndex.setStatus("mandatory")
_BattManString1OhmicValueData_Type = Integer32
_BattManString1OhmicValueData_Object = MibTableColumn
battManString1OhmicValueData = _BattManString1OhmicValueData_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 3, 1, 2),
    _BattManString1OhmicValueData_Type()
)
battManString1OhmicValueData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1OhmicValueData.setStatus("mandatory")
_BattManString1ResponseTestChangeTableSize_Type = Integer32
_BattManString1ResponseTestChangeTableSize_Object = MibScalar
battManString1ResponseTestChangeTableSize = _BattManString1ResponseTestChangeTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 4),
    _BattManString1ResponseTestChangeTableSize_Type()
)
battManString1ResponseTestChangeTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1ResponseTestChangeTableSize.setStatus("mandatory")
_BattManString1ResponseTestChangeTable_Object = MibTable
battManString1ResponseTestChangeTable = _BattManString1ResponseTestChangeTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5)
)
if mibBuilder.loadTexts:
    battManString1ResponseTestChangeTable.setStatus("mandatory")
_BattManString1ResponseTestChangeEntry_Object = MibTableRow
battManString1ResponseTestChangeEntry = _BattManString1ResponseTestChangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1)
)
battManString1ResponseTestChangeEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManString1ResponseTestChangeIndex"),
)
if mibBuilder.loadTexts:
    battManString1ResponseTestChangeEntry.setStatus("mandatory")
_BattManString1ResponseTestChangeIndex_Type = Integer32
_BattManString1ResponseTestChangeIndex_Object = MibTableColumn
battManString1ResponseTestChangeIndex = _BattManString1ResponseTestChangeIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1, 1),
    _BattManString1ResponseTestChangeIndex_Type()
)
battManString1ResponseTestChangeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1ResponseTestChangeIndex.setStatus("mandatory")
_BattManString1ResponseTestChangeData_Type = Integer32
_BattManString1ResponseTestChangeData_Object = MibTableColumn
battManString1ResponseTestChangeData = _BattManString1ResponseTestChangeData_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 5, 1, 2),
    _BattManString1ResponseTestChangeData_Type()
)
battManString1ResponseTestChangeData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString1ResponseTestChangeData.setStatus("mandatory")
_BattManString2OhmicValueLastDischargeInfo_Type = DisplayString
_BattManString2OhmicValueLastDischargeInfo_Object = MibScalar
battManString2OhmicValueLastDischargeInfo = _BattManString2OhmicValueLastDischargeInfo_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 6),
    _BattManString2OhmicValueLastDischargeInfo_Type()
)
battManString2OhmicValueLastDischargeInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2OhmicValueLastDischargeInfo.setStatus("mandatory")
_BattManString2OhmicValueTableSize_Type = Integer32
_BattManString2OhmicValueTableSize_Object = MibScalar
battManString2OhmicValueTableSize = _BattManString2OhmicValueTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 7),
    _BattManString2OhmicValueTableSize_Type()
)
battManString2OhmicValueTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2OhmicValueTableSize.setStatus("mandatory")
_BattManString2OhmicValueTable_Object = MibTable
battManString2OhmicValueTable = _BattManString2OhmicValueTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8)
)
if mibBuilder.loadTexts:
    battManString2OhmicValueTable.setStatus("mandatory")
_BattManString2OhmicValueEntry_Object = MibTableRow
battManString2OhmicValueEntry = _BattManString2OhmicValueEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1)
)
battManString2OhmicValueEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManString2OhmicValueIndex"),
)
if mibBuilder.loadTexts:
    battManString2OhmicValueEntry.setStatus("mandatory")
_BattManString2OhmicValueIndex_Type = Integer32
_BattManString2OhmicValueIndex_Object = MibTableColumn
battManString2OhmicValueIndex = _BattManString2OhmicValueIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1, 1),
    _BattManString2OhmicValueIndex_Type()
)
battManString2OhmicValueIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2OhmicValueIndex.setStatus("mandatory")
_BattManString2OhmicValueData_Type = Integer32
_BattManString2OhmicValueData_Object = MibTableColumn
battManString2OhmicValueData = _BattManString2OhmicValueData_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 8, 1, 2),
    _BattManString2OhmicValueData_Type()
)
battManString2OhmicValueData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2OhmicValueData.setStatus("mandatory")
_BattManString2ResponseTestChangeTableSize_Type = Integer32
_BattManString2ResponseTestChangeTableSize_Object = MibScalar
battManString2ResponseTestChangeTableSize = _BattManString2ResponseTestChangeTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 9),
    _BattManString2ResponseTestChangeTableSize_Type()
)
battManString2ResponseTestChangeTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2ResponseTestChangeTableSize.setStatus("mandatory")
_BattManString2ResponseTestChangeTable_Object = MibTable
battManString2ResponseTestChangeTable = _BattManString2ResponseTestChangeTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10)
)
if mibBuilder.loadTexts:
    battManString2ResponseTestChangeTable.setStatus("mandatory")
_BattManString2ResponseTestChangeEntry_Object = MibTableRow
battManString2ResponseTestChangeEntry = _BattManString2ResponseTestChangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1)
)
battManString2ResponseTestChangeEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManString2ResponseTestChangeIndex"),
)
if mibBuilder.loadTexts:
    battManString2ResponseTestChangeEntry.setStatus("mandatory")
_BattManString2ResponseTestChangeIndex_Type = Integer32
_BattManString2ResponseTestChangeIndex_Object = MibTableColumn
battManString2ResponseTestChangeIndex = _BattManString2ResponseTestChangeIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1, 1),
    _BattManString2ResponseTestChangeIndex_Type()
)
battManString2ResponseTestChangeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2ResponseTestChangeIndex.setStatus("mandatory")
_BattManString2ResponseTestChangeData_Type = Integer32
_BattManString2ResponseTestChangeData_Object = MibTableColumn
battManString2ResponseTestChangeData = _BattManString2ResponseTestChangeData_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 13, 10, 1, 2),
    _BattManString2ResponseTestChangeData_Type()
)
battManString2ResponseTestChangeData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManString2ResponseTestChangeData.setStatus("mandatory")
_BattManUnitStatus_ObjectIdentity = ObjectIdentity
battManUnitStatus = _BattManUnitStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14)
)
_BattManUnitStatusTableSize_Type = Integer32
_BattManUnitStatusTableSize_Object = MibScalar
battManUnitStatusTableSize = _BattManUnitStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 1),
    _BattManUnitStatusTableSize_Type()
)
battManUnitStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManUnitStatusTableSize.setStatus("mandatory")
_BattManUnitStatusTable_Object = MibTable
battManUnitStatusTable = _BattManUnitStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2)
)
if mibBuilder.loadTexts:
    battManUnitStatusTable.setStatus("mandatory")
_BattManUnitStatusEntry_Object = MibTableRow
battManUnitStatusEntry = _BattManUnitStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1)
)
battManUnitStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "battManUnitStatusIndex"),
)
if mibBuilder.loadTexts:
    battManUnitStatusEntry.setStatus("mandatory")
_BattManUnitStatusIndex_Type = Integer32
_BattManUnitStatusIndex_Object = MibTableColumn
battManUnitStatusIndex = _BattManUnitStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 1),
    _BattManUnitStatusIndex_Type()
)
battManUnitStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManUnitStatusIndex.setStatus("mandatory")
_BattManUnitStatusSerialNumber_Type = DisplayString
_BattManUnitStatusSerialNumber_Object = MibTableColumn
battManUnitStatusSerialNumber = _BattManUnitStatusSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 2),
    _BattManUnitStatusSerialNumber_Type()
)
battManUnitStatusSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManUnitStatusSerialNumber.setStatus("mandatory")
_BattManUnitHardwareRev_Type = Integer32
_BattManUnitHardwareRev_Object = MibTableColumn
battManUnitHardwareRev = _BattManUnitHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 3),
    _BattManUnitHardwareRev_Type()
)
battManUnitHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManUnitHardwareRev.setStatus("mandatory")
_BattManUnitFirmwareRev_Type = Integer32
_BattManUnitFirmwareRev_Object = MibTableColumn
battManUnitFirmwareRev = _BattManUnitFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 4),
    _BattManUnitFirmwareRev_Type()
)
battManUnitFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManUnitFirmwareRev.setStatus("mandatory")


class _BattManUnitCommLoss_Type(Integer32):
    """Custom type battManUnitCommLoss based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManUnitCommLoss_Type.__name__ = "Integer32"
_BattManUnitCommLoss_Object = MibTableColumn
battManUnitCommLoss = _BattManUnitCommLoss_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 5),
    _BattManUnitCommLoss_Type()
)
battManUnitCommLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManUnitCommLoss.setStatus("mandatory")


class _BattManUnitRelayStuck_Type(Integer32):
    """Custom type battManUnitRelayStuck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_BattManUnitRelayStuck_Type.__name__ = "Integer32"
_BattManUnitRelayStuck_Object = MibTableColumn
battManUnitRelayStuck = _BattManUnitRelayStuck_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 16, 14, 2, 1, 6),
    _BattManUnitRelayStuck_Type()
)
battManUnitRelayStuck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    battManUnitRelayStuck.setStatus("mandatory")
_XATS_ObjectIdentity = ObjectIdentity
xATS = _XATS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17)
)
_XATSIdent_ObjectIdentity = ObjectIdentity
xATSIdent = _XATSIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1)
)
_XATSIdentProductName_Type = DisplayString
_XATSIdentProductName_Object = MibScalar
xATSIdentProductName = _XATSIdentProductName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 1),
    _XATSIdentProductName_Type()
)
xATSIdentProductName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSIdentProductName.setStatus("mandatory")
_XATSIdentHardwareRev_Type = DisplayString
_XATSIdentHardwareRev_Object = MibScalar
xATSIdentHardwareRev = _XATSIdentHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 2),
    _XATSIdentHardwareRev_Type()
)
xATSIdentHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSIdentHardwareRev.setStatus("mandatory")
_XATSIdentFirmwareAppRev_Type = DisplayString
_XATSIdentFirmwareAppRev_Object = MibScalar
xATSIdentFirmwareAppRev = _XATSIdentFirmwareAppRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 3),
    _XATSIdentFirmwareAppRev_Type()
)
xATSIdentFirmwareAppRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSIdentFirmwareAppRev.setStatus("mandatory")
_XATSIdentFirmwareAppOSRev_Type = DisplayString
_XATSIdentFirmwareAppOSRev_Object = MibScalar
xATSIdentFirmwareAppOSRev = _XATSIdentFirmwareAppOSRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 4),
    _XATSIdentFirmwareAppOSRev_Type()
)
xATSIdentFirmwareAppOSRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSIdentFirmwareAppOSRev.setStatus("mandatory")
_XATSIdentFirmwareControllerRev_Type = DisplayString
_XATSIdentFirmwareControllerRev_Object = MibScalar
xATSIdentFirmwareControllerRev = _XATSIdentFirmwareControllerRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 5),
    _XATSIdentFirmwareControllerRev_Type()
)
xATSIdentFirmwareControllerRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSIdentFirmwareControllerRev.setStatus("mandatory")
_XATSIdentDateOfManufacture_Type = DisplayString
_XATSIdentDateOfManufacture_Object = MibScalar
xATSIdentDateOfManufacture = _XATSIdentDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 6),
    _XATSIdentDateOfManufacture_Type()
)
xATSIdentDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSIdentDateOfManufacture.setStatus("mandatory")
_XATSIdentModelNumber_Type = DisplayString
_XATSIdentModelNumber_Object = MibScalar
xATSIdentModelNumber = _XATSIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 7),
    _XATSIdentModelNumber_Type()
)
xATSIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSIdentModelNumber.setStatus("mandatory")
_XATSIdentSerialNumber_Type = DisplayString
_XATSIdentSerialNumber_Object = MibScalar
xATSIdentSerialNumber = _XATSIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 1, 8),
    _XATSIdentSerialNumber_Type()
)
xATSIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSIdentSerialNumber.setStatus("mandatory")
_XATSDevice_ObjectIdentity = ObjectIdentity
xATSDevice = _XATSDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2)
)


class _XATSDeviceServiceType_Type(Integer32):
    """Custom type xATSDeviceServiceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fourWire", 2),
          ("threeWire", 1))
    )


_XATSDeviceServiceType_Type.__name__ = "Integer32"
_XATSDeviceServiceType_Object = MibScalar
xATSDeviceServiceType = _XATSDeviceServiceType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 1),
    _XATSDeviceServiceType_Type()
)
xATSDeviceServiceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSDeviceServiceType.setStatus("mandatory")
_XATSDeviceNominalVoltage_Type = Integer32
_XATSDeviceNominalVoltage_Object = MibScalar
xATSDeviceNominalVoltage = _XATSDeviceNominalVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 2),
    _XATSDeviceNominalVoltage_Type()
)
xATSDeviceNominalVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSDeviceNominalVoltage.setStatus("mandatory")
_XATSDeviceNominalFrequency_Type = Integer32
_XATSDeviceNominalFrequency_Object = MibScalar
xATSDeviceNominalFrequency = _XATSDeviceNominalFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 3),
    _XATSDeviceNominalFrequency_Type()
)
xATSDeviceNominalFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSDeviceNominalFrequency.setStatus("mandatory")
_XATSDeviceTransferSwitchRating_Type = Integer32
_XATSDeviceTransferSwitchRating_Object = MibScalar
xATSDeviceTransferSwitchRating = _XATSDeviceTransferSwitchRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 4),
    _XATSDeviceTransferSwitchRating_Type()
)
xATSDeviceTransferSwitchRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSDeviceTransferSwitchRating.setStatus("mandatory")


class _XATSDeviceDCBackUpPresent_Type(Integer32):
    """Custom type xATSDeviceDCBackUpPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_XATSDeviceDCBackUpPresent_Type.__name__ = "Integer32"
_XATSDeviceDCBackUpPresent_Object = MibScalar
xATSDeviceDCBackUpPresent = _XATSDeviceDCBackUpPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 2, 5),
    _XATSDeviceDCBackUpPresent_Type()
)
xATSDeviceDCBackUpPresent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSDeviceDCBackUpPresent.setStatus("mandatory")
_XATSSwitch_ObjectIdentity = ObjectIdentity
xATSSwitch = _XATSSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3)
)
_XATSSwitchStatus_ObjectIdentity = ObjectIdentity
xATSSwitchStatus = _XATSSwitchStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1)
)


class _XATSSwitchStatusSelectedSource_Type(Integer32):
    """Custom type xATSSwitchStatusSelectedSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("fault", 4),
          ("none", 1),
          ("source1", 2),
          ("source2", 3),
          ("unknown", 5))
    )


_XATSSwitchStatusSelectedSource_Type.__name__ = "Integer32"
_XATSSwitchStatusSelectedSource_Object = MibScalar
xATSSwitchStatusSelectedSource = _XATSSwitchStatusSelectedSource_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 1),
    _XATSSwitchStatusSelectedSource_Type()
)
xATSSwitchStatusSelectedSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchStatusSelectedSource.setStatus("mandatory")


class _XATSSwitchStatusOperationalMode_Type(Integer32):
    """Custom type xATSSwitchStatusOperationalMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("notInAuto", 3),
          ("notInAutoAbnormal", 2),
          ("unknown", 4))
    )


_XATSSwitchStatusOperationalMode_Type.__name__ = "Integer32"
_XATSSwitchStatusOperationalMode_Object = MibScalar
xATSSwitchStatusOperationalMode = _XATSSwitchStatusOperationalMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 2),
    _XATSSwitchStatusOperationalMode_Type()
)
xATSSwitchStatusOperationalMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchStatusOperationalMode.setStatus("mandatory")


class _XATSSwitchStatusAutomaticOperationSwitch_Type(Integer32):
    """Custom type xATSSwitchStatusAutomaticOperationSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2),
          ("unknown", 3))
    )


_XATSSwitchStatusAutomaticOperationSwitch_Type.__name__ = "Integer32"
_XATSSwitchStatusAutomaticOperationSwitch_Object = MibScalar
xATSSwitchStatusAutomaticOperationSwitch = _XATSSwitchStatusAutomaticOperationSwitch_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 3),
    _XATSSwitchStatusAutomaticOperationSwitch_Type()
)
xATSSwitchStatusAutomaticOperationSwitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchStatusAutomaticOperationSwitch.setStatus("mandatory")


class _XATSSwitchStatusEngineStartSignal_Type(Integer32):
    """Custom type xATSSwitchStatusEngineStartSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("run", 1),
          ("stop", 2),
          ("unknown", 3))
    )


_XATSSwitchStatusEngineStartSignal_Type.__name__ = "Integer32"
_XATSSwitchStatusEngineStartSignal_Object = MibScalar
xATSSwitchStatusEngineStartSignal = _XATSSwitchStatusEngineStartSignal_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 1, 4),
    _XATSSwitchStatusEngineStartSignal_Type()
)
xATSSwitchStatusEngineStartSignal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchStatusEngineStartSignal.setStatus("mandatory")
_XATSSwitchSettings_ObjectIdentity = ObjectIdentity
xATSSwitchSettings = _XATSSwitchSettings_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2)
)
_XATSSwitchSettingsLowVoltageTransferPoint_Type = Integer32
_XATSSwitchSettingsLowVoltageTransferPoint_Object = MibScalar
xATSSwitchSettingsLowVoltageTransferPoint = _XATSSwitchSettingsLowVoltageTransferPoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 1),
    _XATSSwitchSettingsLowVoltageTransferPoint_Type()
)
xATSSwitchSettingsLowVoltageTransferPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchSettingsLowVoltageTransferPoint.setStatus("mandatory")
_XATSSwitchSettingsHighVoltageTransferPoint_Type = Integer32
_XATSSwitchSettingsHighVoltageTransferPoint_Object = MibScalar
xATSSwitchSettingsHighVoltageTransferPoint = _XATSSwitchSettingsHighVoltageTransferPoint_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 2),
    _XATSSwitchSettingsHighVoltageTransferPoint_Type()
)
xATSSwitchSettingsHighVoltageTransferPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchSettingsHighVoltageTransferPoint.setStatus("mandatory")
_XATSSwitchSettingsMaxFrequencyDeviation_Type = Integer32
_XATSSwitchSettingsMaxFrequencyDeviation_Object = MibScalar
xATSSwitchSettingsMaxFrequencyDeviation = _XATSSwitchSettingsMaxFrequencyDeviation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 3),
    _XATSSwitchSettingsMaxFrequencyDeviation_Type()
)
xATSSwitchSettingsMaxFrequencyDeviation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchSettingsMaxFrequencyDeviation.setStatus("mandatory")
_XATSSwitchSettingsMinPhaseBalance_Type = Integer32
_XATSSwitchSettingsMinPhaseBalance_Object = MibScalar
xATSSwitchSettingsMinPhaseBalance = _XATSSwitchSettingsMinPhaseBalance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 4),
    _XATSSwitchSettingsMinPhaseBalance_Type()
)
xATSSwitchSettingsMinPhaseBalance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchSettingsMinPhaseBalance.setStatus("mandatory")


class _XATSSwitchSettingsNominalRotation_Type(Integer32):
    """Custom type xATSSwitchSettingsNominalRotation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("abc", 1),
          ("any", 3),
          ("cba", 2),
          ("unknown", 4))
    )


_XATSSwitchSettingsNominalRotation_Type.__name__ = "Integer32"
_XATSSwitchSettingsNominalRotation_Object = MibScalar
xATSSwitchSettingsNominalRotation = _XATSSwitchSettingsNominalRotation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 5),
    _XATSSwitchSettingsNominalRotation_Type()
)
xATSSwitchSettingsNominalRotation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchSettingsNominalRotation.setStatus("mandatory")


class _XATSSwitchSettingsAllowClosedTransfer_Type(Integer32):
    """Custom type xATSSwitchSettingsAllowClosedTransfer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("unknown", 3),
          ("yes", 1))
    )


_XATSSwitchSettingsAllowClosedTransfer_Type.__name__ = "Integer32"
_XATSSwitchSettingsAllowClosedTransfer_Object = MibScalar
xATSSwitchSettingsAllowClosedTransfer = _XATSSwitchSettingsAllowClosedTransfer_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 6),
    _XATSSwitchSettingsAllowClosedTransfer_Type()
)
xATSSwitchSettingsAllowClosedTransfer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchSettingsAllowClosedTransfer.setStatus("mandatory")
_XATSSwitchSettingsMaxSyncTime_Type = Integer32
_XATSSwitchSettingsMaxSyncTime_Object = MibScalar
xATSSwitchSettingsMaxSyncTime = _XATSSwitchSettingsMaxSyncTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 7),
    _XATSSwitchSettingsMaxSyncTime_Type()
)
xATSSwitchSettingsMaxSyncTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchSettingsMaxSyncTime.setStatus("mandatory")
_XATSSwitchSettingsNeutralTransferTime_Type = Integer32
_XATSSwitchSettingsNeutralTransferTime_Object = MibScalar
xATSSwitchSettingsNeutralTransferTime = _XATSSwitchSettingsNeutralTransferTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 8),
    _XATSSwitchSettingsNeutralTransferTime_Type()
)
xATSSwitchSettingsNeutralTransferTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchSettingsNeutralTransferTime.setStatus("mandatory")


class _XATSSwitchSettingsClearLatchedAlarms_Type(Integer32):
    """Custom type xATSSwitchSettingsClearLatchedAlarms based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_XATSSwitchSettingsClearLatchedAlarms_Type.__name__ = "Integer32"
_XATSSwitchSettingsClearLatchedAlarms_Object = MibScalar
xATSSwitchSettingsClearLatchedAlarms = _XATSSwitchSettingsClearLatchedAlarms_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 9),
    _XATSSwitchSettingsClearLatchedAlarms_Type()
)
xATSSwitchSettingsClearLatchedAlarms.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchSettingsClearLatchedAlarms.setStatus("mandatory")


class _XATSSwitchSettingsSetToFactoryDefaults_Type(Integer32):
    """Custom type xATSSwitchSettingsSetToFactoryDefaults based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_XATSSwitchSettingsSetToFactoryDefaults_Type.__name__ = "Integer32"
_XATSSwitchSettingsSetToFactoryDefaults_Object = MibScalar
xATSSwitchSettingsSetToFactoryDefaults = _XATSSwitchSettingsSetToFactoryDefaults_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 2, 10),
    _XATSSwitchSettingsSetToFactoryDefaults_Type()
)
xATSSwitchSettingsSetToFactoryDefaults.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchSettingsSetToFactoryDefaults.setStatus("mandatory")
_XATSSwitchTimers_ObjectIdentity = ObjectIdentity
xATSSwitchTimers = _XATSSwitchTimers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3)
)
_XATSSwitchTimersTableSize_Type = Integer32
_XATSSwitchTimersTableSize_Object = MibScalar
xATSSwitchTimersTableSize = _XATSSwitchTimersTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 1),
    _XATSSwitchTimersTableSize_Type()
)
xATSSwitchTimersTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchTimersTableSize.setStatus("mandatory")
_XATSSwitchTimersTable_Object = MibTable
xATSSwitchTimersTable = _XATSSwitchTimersTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2)
)
if mibBuilder.loadTexts:
    xATSSwitchTimersTable.setStatus("mandatory")
_XATSSwitchTimersEntry_Object = MibTableRow
xATSSwitchTimersEntry = _XATSSwitchTimersEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1)
)
xATSSwitchTimersEntry.setIndexNames(
    (0, "POWERNET-MIB", "xATSSwitchTimersIndex"),
)
if mibBuilder.loadTexts:
    xATSSwitchTimersEntry.setStatus("mandatory")
_XATSSwitchTimersIndex_Type = Integer32
_XATSSwitchTimersIndex_Object = MibTableColumn
xATSSwitchTimersIndex = _XATSSwitchTimersIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 1),
    _XATSSwitchTimersIndex_Type()
)
xATSSwitchTimersIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchTimersIndex.setStatus("mandatory")
_XATSSwitchTimersName_Type = DisplayString
_XATSSwitchTimersName_Object = MibTableColumn
xATSSwitchTimersName = _XATSSwitchTimersName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 2),
    _XATSSwitchTimersName_Type()
)
xATSSwitchTimersName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchTimersName.setStatus("mandatory")


class _XATSSwitchTimersAbort_Type(Integer32):
    """Custom type xATSSwitchTimersAbort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_XATSSwitchTimersAbort_Type.__name__ = "Integer32"
_XATSSwitchTimersAbort_Object = MibTableColumn
xATSSwitchTimersAbort = _XATSSwitchTimersAbort_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 3),
    _XATSSwitchTimersAbort_Type()
)
xATSSwitchTimersAbort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchTimersAbort.setStatus("mandatory")


class _XATSSwitchTimersStatus_Type(Integer32):
    """Custom type xATSSwitchTimersStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("inactive", 1))
    )


_XATSSwitchTimersStatus_Type.__name__ = "Integer32"
_XATSSwitchTimersStatus_Object = MibTableColumn
xATSSwitchTimersStatus = _XATSSwitchTimersStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 4),
    _XATSSwitchTimersStatus_Type()
)
xATSSwitchTimersStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchTimersStatus.setStatus("mandatory")
_XATSSwitchTimersRemainingTime_Type = Integer32
_XATSSwitchTimersRemainingTime_Object = MibTableColumn
xATSSwitchTimersRemainingTime = _XATSSwitchTimersRemainingTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 5),
    _XATSSwitchTimersRemainingTime_Type()
)
xATSSwitchTimersRemainingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchTimersRemainingTime.setStatus("mandatory")
_XATSSwitchTimersDelaySetting_Type = Integer32
_XATSSwitchTimersDelaySetting_Object = MibTableColumn
xATSSwitchTimersDelaySetting = _XATSSwitchTimersDelaySetting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 3, 2, 1, 6),
    _XATSSwitchTimersDelaySetting_Type()
)
xATSSwitchTimersDelaySetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchTimersDelaySetting.setStatus("mandatory")
_XATSSwitchBlockMap_ObjectIdentity = ObjectIdentity
xATSSwitchBlockMap = _XATSSwitchBlockMap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4)
)
_XATSSwitchBlockMapTableSize_Type = Integer32
_XATSSwitchBlockMapTableSize_Object = MibScalar
xATSSwitchBlockMapTableSize = _XATSSwitchBlockMapTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 1),
    _XATSSwitchBlockMapTableSize_Type()
)
xATSSwitchBlockMapTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchBlockMapTableSize.setStatus("mandatory")
_XATSSwitchBlockMapTable_Object = MibTable
xATSSwitchBlockMapTable = _XATSSwitchBlockMapTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2)
)
if mibBuilder.loadTexts:
    xATSSwitchBlockMapTable.setStatus("mandatory")
_XATSSwitchBlockMapEntry_Object = MibTableRow
xATSSwitchBlockMapEntry = _XATSSwitchBlockMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1)
)
xATSSwitchBlockMapEntry.setIndexNames(
    (0, "POWERNET-MIB", "xATSSwitchBlockMapIndex"),
)
if mibBuilder.loadTexts:
    xATSSwitchBlockMapEntry.setStatus("mandatory")
_XATSSwitchBlockMapIndex_Type = Integer32
_XATSSwitchBlockMapIndex_Object = MibTableColumn
xATSSwitchBlockMapIndex = _XATSSwitchBlockMapIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 1),
    _XATSSwitchBlockMapIndex_Type()
)
xATSSwitchBlockMapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchBlockMapIndex.setStatus("mandatory")
_XATSSwitchBlockMapName_Type = DisplayString
_XATSSwitchBlockMapName_Object = MibTableColumn
xATSSwitchBlockMapName = _XATSSwitchBlockMapName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 2),
    _XATSSwitchBlockMapName_Type()
)
xATSSwitchBlockMapName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchBlockMapName.setStatus("mandatory")
_XATSSwitchBlockMapStatus_Type = Integer32
_XATSSwitchBlockMapStatus_Object = MibTableColumn
xATSSwitchBlockMapStatus = _XATSSwitchBlockMapStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 3),
    _XATSSwitchBlockMapStatus_Type()
)
xATSSwitchBlockMapStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchBlockMapStatus.setStatus("mandatory")
_XATSSwitchBlockMapSetting_Type = Integer32
_XATSSwitchBlockMapSetting_Object = MibTableColumn
xATSSwitchBlockMapSetting = _XATSSwitchBlockMapSetting_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 4, 2, 1, 4),
    _XATSSwitchBlockMapSetting_Type()
)
xATSSwitchBlockMapSetting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchBlockMapSetting.setStatus("mandatory")
_XATSSwitchStatistics_ObjectIdentity = ObjectIdentity
xATSSwitchStatistics = _XATSSwitchStatistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5)
)
_XATSSwitchStatisticsTableSize_Type = Integer32
_XATSSwitchStatisticsTableSize_Object = MibScalar
xATSSwitchStatisticsTableSize = _XATSSwitchStatisticsTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 1),
    _XATSSwitchStatisticsTableSize_Type()
)
xATSSwitchStatisticsTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchStatisticsTableSize.setStatus("mandatory")
_XATSSwitchStatisticsTable_Object = MibTable
xATSSwitchStatisticsTable = _XATSSwitchStatisticsTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2)
)
if mibBuilder.loadTexts:
    xATSSwitchStatisticsTable.setStatus("mandatory")
_XATSSwitchStatisticsEntry_Object = MibTableRow
xATSSwitchStatisticsEntry = _XATSSwitchStatisticsEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1)
)
xATSSwitchStatisticsEntry.setIndexNames(
    (0, "POWERNET-MIB", "xATSSwitchStatisticsIndex"),
)
if mibBuilder.loadTexts:
    xATSSwitchStatisticsEntry.setStatus("mandatory")
_XATSSwitchStatisticsIndex_Type = Integer32
_XATSSwitchStatisticsIndex_Object = MibTableColumn
xATSSwitchStatisticsIndex = _XATSSwitchStatisticsIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 1),
    _XATSSwitchStatisticsIndex_Type()
)
xATSSwitchStatisticsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchStatisticsIndex.setStatus("mandatory")
_XATSSwitchStatisticsName_Type = DisplayString
_XATSSwitchStatisticsName_Object = MibTableColumn
xATSSwitchStatisticsName = _XATSSwitchStatisticsName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 2),
    _XATSSwitchStatisticsName_Type()
)
xATSSwitchStatisticsName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchStatisticsName.setStatus("mandatory")
_XATSSwitchStatisticsValue_Type = DisplayString
_XATSSwitchStatisticsValue_Object = MibTableColumn
xATSSwitchStatisticsValue = _XATSSwitchStatisticsValue_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 3),
    _XATSSwitchStatisticsValue_Type()
)
xATSSwitchStatisticsValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSwitchStatisticsValue.setStatus("mandatory")


class _XATSSwitchStatisticsReset_Type(Integer32):
    """Custom type xATSSwitchStatisticsReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_XATSSwitchStatisticsReset_Type.__name__ = "Integer32"
_XATSSwitchStatisticsReset_Object = MibTableColumn
xATSSwitchStatisticsReset = _XATSSwitchStatisticsReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 3, 5, 2, 1, 4),
    _XATSSwitchStatisticsReset_Type()
)
xATSSwitchStatisticsReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSwitchStatisticsReset.setStatus("mandatory")
_XATSACMonitoringPoint_ObjectIdentity = ObjectIdentity
xATSACMonitoringPoint = _XATSACMonitoringPoint_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4)
)
_XATSSource1_ObjectIdentity = ObjectIdentity
xATSSource1 = _XATSSource1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1)
)
_XATSSource1Name_Type = DisplayString
_XATSSource1Name_Object = MibScalar
xATSSource1Name = _XATSSource1Name_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 1),
    _XATSSource1Name_Type()
)
xATSSource1Name.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSource1Name.setStatus("mandatory")


class _XATSSource1Position_Type(Integer32):
    """Custom type xATSSource1Position based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1),
          ("tripped", 3),
          ("unknown", 4))
    )


_XATSSource1Position_Type.__name__ = "Integer32"
_XATSSource1Position_Object = MibScalar
xATSSource1Position = _XATSSource1Position_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 2),
    _XATSSource1Position_Type()
)
xATSSource1Position.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource1Position.setStatus("mandatory")
_XATSSource1Frequency_Type = Integer32
_XATSSource1Frequency_Object = MibScalar
xATSSource1Frequency = _XATSSource1Frequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 3),
    _XATSSource1Frequency_Type()
)
xATSSource1Frequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource1Frequency.setStatus("mandatory")


class _XATSSource1Quality_Type(Integer32):
    """Custom type xATSSource1Quality based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("badRotation", 6),
          ("freqOutOfRange", 5),
          ("highVoltage", 3),
          ("lowVoltage", 2),
          ("phaseImbalance", 4),
          ("sourceGood", 1),
          ("unknown", 7))
    )


_XATSSource1Quality_Type.__name__ = "Integer32"
_XATSSource1Quality_Object = MibScalar
xATSSource1Quality = _XATSSource1Quality_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 4),
    _XATSSource1Quality_Type()
)
xATSSource1Quality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource1Quality.setStatus("mandatory")


class _XATSSource1Rotation_Type(Integer32):
    """Custom type xATSSource1Rotation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("abc", 1),
          ("cba", 2),
          ("unknown", 3))
    )


_XATSSource1Rotation_Type.__name__ = "Integer32"
_XATSSource1Rotation_Object = MibScalar
xATSSource1Rotation = _XATSSource1Rotation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 5),
    _XATSSource1Rotation_Type()
)
xATSSource1Rotation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource1Rotation.setStatus("mandatory")
_XATSSource1TableSize_Type = Integer32
_XATSSource1TableSize_Object = MibScalar
xATSSource1TableSize = _XATSSource1TableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 6),
    _XATSSource1TableSize_Type()
)
xATSSource1TableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource1TableSize.setStatus("mandatory")
_XATSSource1PhaseTable_Object = MibTable
xATSSource1PhaseTable = _XATSSource1PhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7)
)
if mibBuilder.loadTexts:
    xATSSource1PhaseTable.setStatus("mandatory")
_XATSSource1PhaseEntry_Object = MibTableRow
xATSSource1PhaseEntry = _XATSSource1PhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1)
)
xATSSource1PhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "xATSSource1Index"),
)
if mibBuilder.loadTexts:
    xATSSource1PhaseEntry.setStatus("mandatory")


class _XATSSource1Index_Type(Integer32):
    """Custom type xATSSource1Index based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_XATSSource1Index_Type.__name__ = "Integer32"
_XATSSource1Index_Object = MibTableColumn
xATSSource1Index = _XATSSource1Index_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 1),
    _XATSSource1Index_Type()
)
xATSSource1Index.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource1Index.setStatus("mandatory")
_XATSSource1VoltageLtoL_Type = Integer32
_XATSSource1VoltageLtoL_Object = MibTableColumn
xATSSource1VoltageLtoL = _XATSSource1VoltageLtoL_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 2),
    _XATSSource1VoltageLtoL_Type()
)
xATSSource1VoltageLtoL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource1VoltageLtoL.setStatus("mandatory")
_XATSSource1VoltageLtoN_Type = Integer32
_XATSSource1VoltageLtoN_Object = MibTableColumn
xATSSource1VoltageLtoN = _XATSSource1VoltageLtoN_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 1, 7, 1, 3),
    _XATSSource1VoltageLtoN_Type()
)
xATSSource1VoltageLtoN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource1VoltageLtoN.setStatus("mandatory")
_XATSSource2_ObjectIdentity = ObjectIdentity
xATSSource2 = _XATSSource2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2)
)
_XATSSource2Name_Type = DisplayString
_XATSSource2Name_Object = MibScalar
xATSSource2Name = _XATSSource2Name_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 1),
    _XATSSource2Name_Type()
)
xATSSource2Name.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSource2Name.setStatus("mandatory")


class _XATSSource2Position_Type(Integer32):
    """Custom type xATSSource2Position based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1),
          ("tripped", 3),
          ("unknown", 4))
    )


_XATSSource2Position_Type.__name__ = "Integer32"
_XATSSource2Position_Object = MibScalar
xATSSource2Position = _XATSSource2Position_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 2),
    _XATSSource2Position_Type()
)
xATSSource2Position.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource2Position.setStatus("mandatory")
_XATSSource2Frequency_Type = Integer32
_XATSSource2Frequency_Object = MibScalar
xATSSource2Frequency = _XATSSource2Frequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 3),
    _XATSSource2Frequency_Type()
)
xATSSource2Frequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource2Frequency.setStatus("mandatory")


class _XATSSource2Quality_Type(Integer32):
    """Custom type xATSSource2Quality based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("badRotation", 6),
          ("freqOutOfRange", 5),
          ("highVoltage", 3),
          ("lowVoltage", 2),
          ("phaseImbalance", 4),
          ("sourceGood", 1),
          ("unknown", 7))
    )


_XATSSource2Quality_Type.__name__ = "Integer32"
_XATSSource2Quality_Object = MibScalar
xATSSource2Quality = _XATSSource2Quality_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 4),
    _XATSSource2Quality_Type()
)
xATSSource2Quality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource2Quality.setStatus("mandatory")


class _XATSSource2Rotation_Type(Integer32):
    """Custom type xATSSource2Rotation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("abc", 1),
          ("cba", 2),
          ("unknown", 3))
    )


_XATSSource2Rotation_Type.__name__ = "Integer32"
_XATSSource2Rotation_Object = MibScalar
xATSSource2Rotation = _XATSSource2Rotation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 5),
    _XATSSource2Rotation_Type()
)
xATSSource2Rotation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource2Rotation.setStatus("mandatory")
_XATSSource2TableSize_Type = Integer32
_XATSSource2TableSize_Object = MibScalar
xATSSource2TableSize = _XATSSource2TableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 6),
    _XATSSource2TableSize_Type()
)
xATSSource2TableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource2TableSize.setStatus("mandatory")
_XATSSource2PhaseTable_Object = MibTable
xATSSource2PhaseTable = _XATSSource2PhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7)
)
if mibBuilder.loadTexts:
    xATSSource2PhaseTable.setStatus("mandatory")
_XATSSource2PhaseEntry_Object = MibTableRow
xATSSource2PhaseEntry = _XATSSource2PhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1)
)
xATSSource2PhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "xATSSource2Index"),
)
if mibBuilder.loadTexts:
    xATSSource2PhaseEntry.setStatus("mandatory")


class _XATSSource2Index_Type(Integer32):
    """Custom type xATSSource2Index based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_XATSSource2Index_Type.__name__ = "Integer32"
_XATSSource2Index_Object = MibTableColumn
xATSSource2Index = _XATSSource2Index_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 1),
    _XATSSource2Index_Type()
)
xATSSource2Index.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource2Index.setStatus("mandatory")
_XATSSource2VoltageLtoL_Type = Integer32
_XATSSource2VoltageLtoL_Object = MibTableColumn
xATSSource2VoltageLtoL = _XATSSource2VoltageLtoL_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 2),
    _XATSSource2VoltageLtoL_Type()
)
xATSSource2VoltageLtoL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource2VoltageLtoL.setStatus("mandatory")
_XATSSource2VoltageLtoN_Type = Integer32
_XATSSource2VoltageLtoN_Object = MibTableColumn
xATSSource2VoltageLtoN = _XATSSource2VoltageLtoN_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 2, 7, 1, 3),
    _XATSSource2VoltageLtoN_Type()
)
xATSSource2VoltageLtoN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSource2VoltageLtoN.setStatus("mandatory")
_XATSSystemOutput_ObjectIdentity = ObjectIdentity
xATSSystemOutput = _XATSSystemOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3)
)
_XATSSystemOutputFrequency_Type = Integer32
_XATSSystemOutputFrequency_Object = MibScalar
xATSSystemOutputFrequency = _XATSSystemOutputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 1),
    _XATSSystemOutputFrequency_Type()
)
xATSSystemOutputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSystemOutputFrequency.setStatus("mandatory")
_XATSSystemOutputTotalPower_Type = Integer32
_XATSSystemOutputTotalPower_Object = MibScalar
xATSSystemOutputTotalPower = _XATSSystemOutputTotalPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 2),
    _XATSSystemOutputTotalPower_Type()
)
xATSSystemOutputTotalPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSystemOutputTotalPower.setStatus("mandatory")
_XATSSystemOutputTotalApparentPower_Type = Integer32
_XATSSystemOutputTotalApparentPower_Object = MibScalar
xATSSystemOutputTotalApparentPower = _XATSSystemOutputTotalApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 3),
    _XATSSystemOutputTotalApparentPower_Type()
)
xATSSystemOutputTotalApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSystemOutputTotalApparentPower.setStatus("mandatory")
_XATSSystemOutputTotalPowerFactor_Type = Integer32
_XATSSystemOutputTotalPowerFactor_Object = MibScalar
xATSSystemOutputTotalPowerFactor = _XATSSystemOutputTotalPowerFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 4),
    _XATSSystemOutputTotalPowerFactor_Type()
)
xATSSystemOutputTotalPowerFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSystemOutputTotalPowerFactor.setStatus("mandatory")


class _XATSSystemOutputFrequencyTolerance_Type(Integer32):
    """Custom type xATSSystemOutputFrequencyTolerance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("freqToleranceFive", 9),
          ("freqToleranceFour", 8),
          ("freqToleranceNine", 10),
          ("freqToleranceOff", 1),
          ("freqToleranceOne", 4),
          ("freqToleranceOnePointFive", 5),
          ("freqTolerancePointFive", 3),
          ("freqTolerancePointTwo", 2),
          ("freqToleranceThree", 7),
          ("freqToleranceTwo", 6))
    )


_XATSSystemOutputFrequencyTolerance_Type.__name__ = "Integer32"
_XATSSystemOutputFrequencyTolerance_Object = MibScalar
xATSSystemOutputFrequencyTolerance = _XATSSystemOutputFrequencyTolerance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 5),
    _XATSSystemOutputFrequencyTolerance_Type()
)
xATSSystemOutputFrequencyTolerance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSystemOutputFrequencyTolerance.setStatus("mandatory")
_XATSSystemOutputOverVoltThreshold_Type = Integer32
_XATSSystemOutputOverVoltThreshold_Object = MibScalar
xATSSystemOutputOverVoltThreshold = _XATSSystemOutputOverVoltThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 6),
    _XATSSystemOutputOverVoltThreshold_Type()
)
xATSSystemOutputOverVoltThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSystemOutputOverVoltThreshold.setStatus("mandatory")
_XATSSystemOutputUnderVoltThreshold_Type = Integer32
_XATSSystemOutputUnderVoltThreshold_Object = MibScalar
xATSSystemOutputUnderVoltThreshold = _XATSSystemOutputUnderVoltThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 7),
    _XATSSystemOutputUnderVoltThreshold_Type()
)
xATSSystemOutputUnderVoltThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSystemOutputUnderVoltThreshold.setStatus("mandatory")


class _XATSSystemOutputOverCurrentThreshold_Type(Integer32):
    """Custom type xATSSystemOutputOverCurrentThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XATSSystemOutputOverCurrentThreshold_Type.__name__ = "Integer32"
_XATSSystemOutputOverCurrentThreshold_Object = MibScalar
xATSSystemOutputOverCurrentThreshold = _XATSSystemOutputOverCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 8),
    _XATSSystemOutputOverCurrentThreshold_Type()
)
xATSSystemOutputOverCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSystemOutputOverCurrentThreshold.setStatus("mandatory")


class _XATSSystemOutputUnderCurrentThreshold_Type(Integer32):
    """Custom type xATSSystemOutputUnderCurrentThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XATSSystemOutputUnderCurrentThreshold_Type.__name__ = "Integer32"
_XATSSystemOutputUnderCurrentThreshold_Object = MibScalar
xATSSystemOutputUnderCurrentThreshold = _XATSSystemOutputUnderCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 9),
    _XATSSystemOutputUnderCurrentThreshold_Type()
)
xATSSystemOutputUnderCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSystemOutputUnderCurrentThreshold.setStatus("mandatory")
_XATSSystemOutputAlarmDelayThreshold_Type = Integer32
_XATSSystemOutputAlarmDelayThreshold_Object = MibScalar
xATSSystemOutputAlarmDelayThreshold = _XATSSystemOutputAlarmDelayThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 10),
    _XATSSystemOutputAlarmDelayThreshold_Type()
)
xATSSystemOutputAlarmDelayThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSSystemOutputAlarmDelayThreshold.setStatus("mandatory")
_XATSSystemOutputTableSize_Type = Integer32
_XATSSystemOutputTableSize_Object = MibScalar
xATSSystemOutputTableSize = _XATSSystemOutputTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 11),
    _XATSSystemOutputTableSize_Type()
)
xATSSystemOutputTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSystemOutputTableSize.setStatus("mandatory")
_XATSSystemOutputPhaseTable_Object = MibTable
xATSSystemOutputPhaseTable = _XATSSystemOutputPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12)
)
if mibBuilder.loadTexts:
    xATSSystemOutputPhaseTable.setStatus("mandatory")
_XATSSystemOutputPhaseEntry_Object = MibTableRow
xATSSystemOutputPhaseEntry = _XATSSystemOutputPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1)
)
xATSSystemOutputPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "xATSSystemOutputPhaseIndex"),
)
if mibBuilder.loadTexts:
    xATSSystemOutputPhaseEntry.setStatus("mandatory")


class _XATSSystemOutputPhaseIndex_Type(Integer32):
    """Custom type xATSSystemOutputPhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_XATSSystemOutputPhaseIndex_Type.__name__ = "Integer32"
_XATSSystemOutputPhaseIndex_Object = MibTableColumn
xATSSystemOutputPhaseIndex = _XATSSystemOutputPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 1),
    _XATSSystemOutputPhaseIndex_Type()
)
xATSSystemOutputPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSystemOutputPhaseIndex.setStatus("mandatory")
_XATSSystemOutputVoltageLtoL_Type = Integer32
_XATSSystemOutputVoltageLtoL_Object = MibTableColumn
xATSSystemOutputVoltageLtoL = _XATSSystemOutputVoltageLtoL_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 2),
    _XATSSystemOutputVoltageLtoL_Type()
)
xATSSystemOutputVoltageLtoL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSystemOutputVoltageLtoL.setStatus("mandatory")
_XATSSystemOutputVoltageLtoN_Type = Integer32
_XATSSystemOutputVoltageLtoN_Object = MibTableColumn
xATSSystemOutputVoltageLtoN = _XATSSystemOutputVoltageLtoN_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 3),
    _XATSSystemOutputVoltageLtoN_Type()
)
xATSSystemOutputVoltageLtoN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSystemOutputVoltageLtoN.setStatus("mandatory")
_XATSSystemOutputPhaseCurrent_Type = Integer32
_XATSSystemOutputPhaseCurrent_Object = MibTableColumn
xATSSystemOutputPhaseCurrent = _XATSSystemOutputPhaseCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 4),
    _XATSSystemOutputPhaseCurrent_Type()
)
xATSSystemOutputPhaseCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSystemOutputPhaseCurrent.setStatus("mandatory")
_XATSSystemOutputPower_Type = Integer32
_XATSSystemOutputPower_Object = MibTableColumn
xATSSystemOutputPower = _XATSSystemOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 5),
    _XATSSystemOutputPower_Type()
)
xATSSystemOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSystemOutputPower.setStatus("mandatory")
_XATSSystemOutputApparentPower_Type = Integer32
_XATSSystemOutputApparentPower_Object = MibTableColumn
xATSSystemOutputApparentPower = _XATSSystemOutputApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 6),
    _XATSSystemOutputApparentPower_Type()
)
xATSSystemOutputApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSystemOutputApparentPower.setStatus("mandatory")
_XATSSystemOutputPowerFactor_Type = Integer32
_XATSSystemOutputPowerFactor_Object = MibTableColumn
xATSSystemOutputPowerFactor = _XATSSystemOutputPowerFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 4, 3, 12, 1, 7),
    _XATSSystemOutputPowerFactor_Type()
)
xATSSystemOutputPowerFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSSystemOutputPowerFactor.setStatus("mandatory")
_XATSTesting_ObjectIdentity = ObjectIdentity
xATSTesting = _XATSTesting_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5)
)
_XATSTestingStatus_ObjectIdentity = ObjectIdentity
xATSTestingStatus = _XATSTestingStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1)
)


class _XATSTestingStatusSelectTestProcess_Type(Integer32):
    """Custom type xATSTestingStatusSelectTestProcess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("cancelTest", 4),
          ("engineStartTest", 1),
          ("generatorHoldTest", 3),
          ("systemLoadTest", 2))
    )


_XATSTestingStatusSelectTestProcess_Type.__name__ = "Integer32"
_XATSTestingStatusSelectTestProcess_Object = MibScalar
xATSTestingStatusSelectTestProcess = _XATSTestingStatusSelectTestProcess_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 1),
    _XATSTestingStatusSelectTestProcess_Type()
)
xATSTestingStatusSelectTestProcess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSTestingStatusSelectTestProcess.setStatus("mandatory")


class _XATSTestingStatusTestStatus_Type(Integer32):
    """Custom type xATSTestingStatusTestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("awaitingRetransferToS1", 7),
          ("awaitingTransferToS2", 5),
          ("engineWarmingUp", 4),
          ("holdingOnGenerator", 10),
          ("noTestInProcess", 1),
          ("startingEngine", 3),
          ("stoppingEngine", 9),
          ("testPending", 2),
          ("testingWithLoad", 6),
          ("testingWithoutLoad", 8))
    )


_XATSTestingStatusTestStatus_Type.__name__ = "Integer32"
_XATSTestingStatusTestStatus_Object = MibScalar
xATSTestingStatusTestStatus = _XATSTestingStatusTestStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 2),
    _XATSTestingStatusTestStatus_Type()
)
xATSTestingStatusTestStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSTestingStatusTestStatus.setStatus("mandatory")
_XATSTestingStatusProfileWarmupTime_Type = Integer32
_XATSTestingStatusProfileWarmupTime_Object = MibScalar
xATSTestingStatusProfileWarmupTime = _XATSTestingStatusProfileWarmupTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 3),
    _XATSTestingStatusProfileWarmupTime_Type()
)
xATSTestingStatusProfileWarmupTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSTestingStatusProfileWarmupTime.setStatus("mandatory")
_XATSTestingStatusProfileLoadedTime_Type = Integer32
_XATSTestingStatusProfileLoadedTime_Object = MibScalar
xATSTestingStatusProfileLoadedTime = _XATSTestingStatusProfileLoadedTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 4),
    _XATSTestingStatusProfileLoadedTime_Type()
)
xATSTestingStatusProfileLoadedTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSTestingStatusProfileLoadedTime.setStatus("mandatory")
_XATSTestingStatusProfileUnloadedTime_Type = Integer32
_XATSTestingStatusProfileUnloadedTime_Object = MibScalar
xATSTestingStatusProfileUnloadedTime = _XATSTestingStatusProfileUnloadedTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 1, 5),
    _XATSTestingStatusProfileUnloadedTime_Type()
)
xATSTestingStatusProfileUnloadedTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSTestingStatusProfileUnloadedTime.setStatus("mandatory")
_XATSTestingResults_ObjectIdentity = ObjectIdentity
xATSTestingResults = _XATSTestingResults_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2)
)
_XATSTestingResultsLastDateOfTest_Type = DisplayString
_XATSTestingResultsLastDateOfTest_Object = MibScalar
xATSTestingResultsLastDateOfTest = _XATSTestingResultsLastDateOfTest_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 1),
    _XATSTestingResultsLastDateOfTest_Type()
)
xATSTestingResultsLastDateOfTest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSTestingResultsLastDateOfTest.setStatus("mandatory")


class _XATSTestingResultsLastResult_Type(Integer32):
    """Custom type xATSTestingResultsLastResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19)
        )
    )
    namedValues = NamedValues(
        *(("canceledManualTest", 18),
          ("canceledScheduledTest", 19),
          ("failedAtsInternalFault", 16),
          ("failedAtsNotInAuto", 17),
          ("failedGenDidNotStart", 8),
          ("failedGenEmerStop", 6),
          ("failedGenNotInAuto", 5),
          ("failedGenShutdown", 7),
          ("failedOnCooldown", 14),
          ("failedS2NeverGood", 9),
          ("failureOnRexferToS2", 13),
          ("failureOnXferToS1", 11),
          ("genFailedDuringWarmup", 10),
          ("genFailedLoaded", 12),
          ("genFailedToStop", 15),
          ("loadTestPassed", 3),
          ("noResultsAvailable", 1),
          ("startSignalFailure", 4),
          ("startTestPassed", 2))
    )


_XATSTestingResultsLastResult_Type.__name__ = "Integer32"
_XATSTestingResultsLastResult_Object = MibScalar
xATSTestingResultsLastResult = _XATSTestingResultsLastResult_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 2),
    _XATSTestingResultsLastResult_Type()
)
xATSTestingResultsLastResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSTestingResultsLastResult.setStatus("mandatory")
_XATSTestingResultsTestLastTestTime_Type = DisplayString
_XATSTestingResultsTestLastTestTime_Object = MibScalar
xATSTestingResultsTestLastTestTime = _XATSTestingResultsTestLastTestTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 3),
    _XATSTestingResultsTestLastTestTime_Type()
)
xATSTestingResultsTestLastTestTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSTestingResultsTestLastTestTime.setStatus("mandatory")
_XATSTestingResultsLastCrankDuration_Type = Integer32
_XATSTestingResultsLastCrankDuration_Object = MibScalar
xATSTestingResultsLastCrankDuration = _XATSTestingResultsLastCrankDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 4),
    _XATSTestingResultsLastCrankDuration_Type()
)
xATSTestingResultsLastCrankDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSTestingResultsLastCrankDuration.setStatus("mandatory")
_XATSTestingResultsLastWarmupDuration_Type = Integer32
_XATSTestingResultsLastWarmupDuration_Object = MibScalar
xATSTestingResultsLastWarmupDuration = _XATSTestingResultsLastWarmupDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 5),
    _XATSTestingResultsLastWarmupDuration_Type()
)
xATSTestingResultsLastWarmupDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSTestingResultsLastWarmupDuration.setStatus("mandatory")
_XATSTestingResultsLastLoadedDuration_Type = Integer32
_XATSTestingResultsLastLoadedDuration_Object = MibScalar
xATSTestingResultsLastLoadedDuration = _XATSTestingResultsLastLoadedDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 6),
    _XATSTestingResultsLastLoadedDuration_Type()
)
xATSTestingResultsLastLoadedDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSTestingResultsLastLoadedDuration.setStatus("mandatory")
_XATSTestingResultsLastUnloadedDuration_Type = Integer32
_XATSTestingResultsLastUnloadedDuration_Object = MibScalar
xATSTestingResultsLastUnloadedDuration = _XATSTestingResultsLastUnloadedDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 2, 7),
    _XATSTestingResultsLastUnloadedDuration_Type()
)
xATSTestingResultsLastUnloadedDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSTestingResultsLastUnloadedDuration.setStatus("mandatory")
_XATSTestingSchedule_ObjectIdentity = ObjectIdentity
xATSTestingSchedule = _XATSTestingSchedule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3)
)


class _XATSTestingScheduleFrequency_Type(Integer32):
    """Custom type xATSTestingScheduleFrequency based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("daily", 2),
          ("monthly", 4),
          ("never", 1),
          ("weekly", 3))
    )


_XATSTestingScheduleFrequency_Type.__name__ = "Integer32"
_XATSTestingScheduleFrequency_Object = MibScalar
xATSTestingScheduleFrequency = _XATSTestingScheduleFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 1),
    _XATSTestingScheduleFrequency_Type()
)
xATSTestingScheduleFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSTestingScheduleFrequency.setStatus("mandatory")
_XATSTestingScheduleTestDay_Type = DisplayString
_XATSTestingScheduleTestDay_Object = MibScalar
xATSTestingScheduleTestDay = _XATSTestingScheduleTestDay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 2),
    _XATSTestingScheduleTestDay_Type()
)
xATSTestingScheduleTestDay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSTestingScheduleTestDay.setStatus("mandatory")
_XATSTestingScheduleTestTime_Type = DisplayString
_XATSTestingScheduleTestTime_Object = MibScalar
xATSTestingScheduleTestTime = _XATSTestingScheduleTestTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 3),
    _XATSTestingScheduleTestTime_Type()
)
xATSTestingScheduleTestTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSTestingScheduleTestTime.setStatus("mandatory")


class _XATSTestingScheduleTestWithLoadInterval_Type(Integer32):
    """Custom type xATSTestingScheduleTestWithLoadInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("applyLoadEveryTest", 1),
          ("applyLoadMonthly", 3),
          ("applyLoadMonthlyDetailed", 4),
          ("neverApplyLoad", 2))
    )


_XATSTestingScheduleTestWithLoadInterval_Type.__name__ = "Integer32"
_XATSTestingScheduleTestWithLoadInterval_Object = MibScalar
xATSTestingScheduleTestWithLoadInterval = _XATSTestingScheduleTestWithLoadInterval_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 4),
    _XATSTestingScheduleTestWithLoadInterval_Type()
)
xATSTestingScheduleTestWithLoadInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSTestingScheduleTestWithLoadInterval.setStatus("mandatory")
_XATSTestingScheduleTestWithLoadSelectMonth_Type = DisplayString
_XATSTestingScheduleTestWithLoadSelectMonth_Object = MibScalar
xATSTestingScheduleTestWithLoadSelectMonth = _XATSTestingScheduleTestWithLoadSelectMonth_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 5),
    _XATSTestingScheduleTestWithLoadSelectMonth_Type()
)
xATSTestingScheduleTestWithLoadSelectMonth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSTestingScheduleTestWithLoadSelectMonth.setStatus("mandatory")
_XATSTestingScheduleNextTestDate_Type = DisplayString
_XATSTestingScheduleNextTestDate_Object = MibScalar
xATSTestingScheduleNextTestDate = _XATSTestingScheduleNextTestDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 3, 6),
    _XATSTestingScheduleNextTestDate_Type()
)
xATSTestingScheduleNextTestDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSTestingScheduleNextTestDate.setStatus("mandatory")
_XATSTestingSimulatePowerFail_ObjectIdentity = ObjectIdentity
xATSTestingSimulatePowerFail = _XATSTestingSimulatePowerFail_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4)
)


class _XATSTestingSimulatePowerFailTest_Type(Integer32):
    """Custom type xATSTestingSimulatePowerFailTest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("cancelSimulation", 1),
          ("fiveMinutesSimulation", 7),
          ("fiveSecondsSimulation", 2),
          ("oneMinuteSimulation", 5),
          ("tenMinutesSimulation", 8),
          ("tenSecondsSimulation", 3),
          ("thirtySecondsSimulation", 4),
          ("threeMinutesSimulation", 6))
    )


_XATSTestingSimulatePowerFailTest_Type.__name__ = "Integer32"
_XATSTestingSimulatePowerFailTest_Object = MibScalar
xATSTestingSimulatePowerFailTest = _XATSTestingSimulatePowerFailTest_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4, 1),
    _XATSTestingSimulatePowerFailTest_Type()
)
xATSTestingSimulatePowerFailTest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSTestingSimulatePowerFailTest.setStatus("mandatory")
_XATSTestingSimulatePowerFailTimeRemaining_Type = Integer32
_XATSTestingSimulatePowerFailTimeRemaining_Object = MibScalar
xATSTestingSimulatePowerFailTimeRemaining = _XATSTestingSimulatePowerFailTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 5, 4, 2),
    _XATSTestingSimulatePowerFailTimeRemaining_Type()
)
xATSTestingSimulatePowerFailTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSTestingSimulatePowerFailTimeRemaining.setStatus("mandatory")
_XATSInputContacts_ObjectIdentity = ObjectIdentity
xATSInputContacts = _XATSInputContacts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6)
)
_XATSInputContactNumContacts_Type = Integer32
_XATSInputContactNumContacts_Object = MibScalar
xATSInputContactNumContacts = _XATSInputContactNumContacts_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 1),
    _XATSInputContactNumContacts_Type()
)
xATSInputContactNumContacts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSInputContactNumContacts.setStatus("mandatory")
_XATSInputContactTableSize_Type = Integer32
_XATSInputContactTableSize_Object = MibScalar
xATSInputContactTableSize = _XATSInputContactTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 2),
    _XATSInputContactTableSize_Type()
)
xATSInputContactTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSInputContactTableSize.setStatus("mandatory")
_XATSInputContactTable_Object = MibTable
xATSInputContactTable = _XATSInputContactTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3)
)
if mibBuilder.loadTexts:
    xATSInputContactTable.setStatus("mandatory")
_XATSInputContactEntry_Object = MibTableRow
xATSInputContactEntry = _XATSInputContactEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1)
)
xATSInputContactEntry.setIndexNames(
    (0, "POWERNET-MIB", "xATSInputContactNumber"),
)
if mibBuilder.loadTexts:
    xATSInputContactEntry.setStatus("mandatory")
_XATSInputContactNumber_Type = Integer32
_XATSInputContactNumber_Object = MibTableColumn
xATSInputContactNumber = _XATSInputContactNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 1),
    _XATSInputContactNumber_Type()
)
xATSInputContactNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSInputContactNumber.setStatus("mandatory")
_XATSInputContactName_Type = DisplayString
_XATSInputContactName_Object = MibTableColumn
xATSInputContactName = _XATSInputContactName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 2),
    _XATSInputContactName_Type()
)
xATSInputContactName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSInputContactName.setStatus("mandatory")


class _XATSInputContactNormalState_Type(Integer32):
    """Custom type xATSInputContactNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_XATSInputContactNormalState_Type.__name__ = "Integer32"
_XATSInputContactNormalState_Object = MibTableColumn
xATSInputContactNormalState = _XATSInputContactNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 3),
    _XATSInputContactNormalState_Type()
)
xATSInputContactNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSInputContactNormalState.setStatus("mandatory")


class _XATSInputContactCurrentState_Type(Integer32):
    """Custom type xATSInputContactCurrentState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_XATSInputContactCurrentState_Type.__name__ = "Integer32"
_XATSInputContactCurrentState_Object = MibTableColumn
xATSInputContactCurrentState = _XATSInputContactCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 6, 3, 1, 4),
    _XATSInputContactCurrentState_Type()
)
xATSInputContactCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSInputContactCurrentState.setStatus("mandatory")
_XATSOutputRelays_ObjectIdentity = ObjectIdentity
xATSOutputRelays = _XATSOutputRelays_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7)
)
_XATSOutputRelayNumRelays_Type = Integer32
_XATSOutputRelayNumRelays_Object = MibScalar
xATSOutputRelayNumRelays = _XATSOutputRelayNumRelays_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 1),
    _XATSOutputRelayNumRelays_Type()
)
xATSOutputRelayNumRelays.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSOutputRelayNumRelays.setStatus("mandatory")
_XATSOutputRelayTableSize_Type = Integer32
_XATSOutputRelayTableSize_Object = MibScalar
xATSOutputRelayTableSize = _XATSOutputRelayTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 2),
    _XATSOutputRelayTableSize_Type()
)
xATSOutputRelayTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSOutputRelayTableSize.setStatus("mandatory")
_XATSOutputRelayTable_Object = MibTable
xATSOutputRelayTable = _XATSOutputRelayTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3)
)
if mibBuilder.loadTexts:
    xATSOutputRelayTable.setStatus("mandatory")
_XATSOutputRelayEntry_Object = MibTableRow
xATSOutputRelayEntry = _XATSOutputRelayEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1)
)
xATSOutputRelayEntry.setIndexNames(
    (0, "POWERNET-MIB", "xATSOutputRelayNumber"),
)
if mibBuilder.loadTexts:
    xATSOutputRelayEntry.setStatus("mandatory")
_XATSOutputRelayNumber_Type = Integer32
_XATSOutputRelayNumber_Object = MibTableColumn
xATSOutputRelayNumber = _XATSOutputRelayNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 1),
    _XATSOutputRelayNumber_Type()
)
xATSOutputRelayNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSOutputRelayNumber.setStatus("mandatory")
_XATSOutputRelayName_Type = DisplayString
_XATSOutputRelayName_Object = MibTableColumn
xATSOutputRelayName = _XATSOutputRelayName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 2),
    _XATSOutputRelayName_Type()
)
xATSOutputRelayName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSOutputRelayName.setStatus("mandatory")


class _XATSOutputRelayNormalState_Type(Integer32):
    """Custom type xATSOutputRelayNormalState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_XATSOutputRelayNormalState_Type.__name__ = "Integer32"
_XATSOutputRelayNormalState_Object = MibTableColumn
xATSOutputRelayNormalState = _XATSOutputRelayNormalState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 3),
    _XATSOutputRelayNormalState_Type()
)
xATSOutputRelayNormalState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSOutputRelayNormalState.setStatus("mandatory")


class _XATSOutputRelayCurrentState_Type(Integer32):
    """Custom type xATSOutputRelayCurrentState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_XATSOutputRelayCurrentState_Type.__name__ = "Integer32"
_XATSOutputRelayCurrentState_Object = MibTableColumn
xATSOutputRelayCurrentState = _XATSOutputRelayCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 7, 3, 1, 4),
    _XATSOutputRelayCurrentState_Type()
)
xATSOutputRelayCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSOutputRelayCurrentState.setStatus("mandatory")
_XATSMisc_ObjectIdentity = ObjectIdentity
xATSMisc = _XATSMisc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 17, 8)
)
_Generator_ObjectIdentity = ObjectIdentity
generator = _Generator_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18)
)
_XATSGenerator_ObjectIdentity = ObjectIdentity
xATSGenerator = _XATSGenerator_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1)
)
_XATSGeneratorIdent_ObjectIdentity = ObjectIdentity
xATSGeneratorIdent = _XATSGeneratorIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1)
)
_XATSGeneratorIdentModelNumber_Type = DisplayString
_XATSGeneratorIdentModelNumber_Object = MibScalar
xATSGeneratorIdentModelNumber = _XATSGeneratorIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 1),
    _XATSGeneratorIdentModelNumber_Type()
)
xATSGeneratorIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorIdentModelNumber.setStatus("mandatory")
_XATSGeneratorIdentSerialNumber_Type = DisplayString
_XATSGeneratorIdentSerialNumber_Object = MibScalar
xATSGeneratorIdentSerialNumber = _XATSGeneratorIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 2),
    _XATSGeneratorIdentSerialNumber_Type()
)
xATSGeneratorIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorIdentSerialNumber.setStatus("mandatory")
_XATSGeneratorIdentDateofManufacture_Type = DisplayString
_XATSGeneratorIdentDateofManufacture_Object = MibScalar
xATSGeneratorIdentDateofManufacture = _XATSGeneratorIdentDateofManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 3),
    _XATSGeneratorIdentDateofManufacture_Type()
)
xATSGeneratorIdentDateofManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorIdentDateofManufacture.setStatus("mandatory")
_XATSGeneratorIdentVoltageConfiguration_Type = Integer32
_XATSGeneratorIdentVoltageConfiguration_Object = MibScalar
xATSGeneratorIdentVoltageConfiguration = _XATSGeneratorIdentVoltageConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 4),
    _XATSGeneratorIdentVoltageConfiguration_Type()
)
xATSGeneratorIdentVoltageConfiguration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorIdentVoltageConfiguration.setStatus("mandatory")
_XATSGeneratorIdentMaxPowerRating_Type = Integer32
_XATSGeneratorIdentMaxPowerRating_Object = MibScalar
xATSGeneratorIdentMaxPowerRating = _XATSGeneratorIdentMaxPowerRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 5),
    _XATSGeneratorIdentMaxPowerRating_Type()
)
xATSGeneratorIdentMaxPowerRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorIdentMaxPowerRating.setStatus("mandatory")
_XATSGeneratorIdentAlternatorFrequency_Type = Integer32
_XATSGeneratorIdentAlternatorFrequency_Object = MibScalar
xATSGeneratorIdentAlternatorFrequency = _XATSGeneratorIdentAlternatorFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 1, 6),
    _XATSGeneratorIdentAlternatorFrequency_Type()
)
xATSGeneratorIdentAlternatorFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorIdentAlternatorFrequency.setStatus("mandatory")
_XATSGeneratorStatus_ObjectIdentity = ObjectIdentity
xATSGeneratorStatus = _XATSGeneratorStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2)
)
_XATSGeneratorStatusGeneratorName_Type = DisplayString
_XATSGeneratorStatusGeneratorName_Object = MibScalar
xATSGeneratorStatusGeneratorName = _XATSGeneratorStatusGeneratorName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 1),
    _XATSGeneratorStatusGeneratorName_Type()
)
xATSGeneratorStatusGeneratorName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSGeneratorStatusGeneratorName.setStatus("mandatory")


class _XATSGeneratorStatusOperational_Type(Integer32):
    """Custom type xATSGeneratorStatusOperational based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("emergencyStop", 8),
          ("idle", 5),
          ("nocomm", 1),
          ("normalStop", 7),
          ("notInAuto", 9),
          ("off", 2),
          ("ready", 3),
          ("running", 6),
          ("shutdown", 10),
          ("starting", 4),
          ("unknown", 11))
    )


_XATSGeneratorStatusOperational_Type.__name__ = "Integer32"
_XATSGeneratorStatusOperational_Object = MibScalar
xATSGeneratorStatusOperational = _XATSGeneratorStatusOperational_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 2),
    _XATSGeneratorStatusOperational_Type()
)
xATSGeneratorStatusOperational.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorStatusOperational.setStatus("mandatory")


class _XATSGeneratorStatusModeSwitchPosition_Type(Integer32):
    """Custom type xATSGeneratorStatusModeSwitchPosition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 3),
          ("manual", 2),
          ("off", 1),
          ("unknown", 4))
    )


_XATSGeneratorStatusModeSwitchPosition_Type.__name__ = "Integer32"
_XATSGeneratorStatusModeSwitchPosition_Object = MibScalar
xATSGeneratorStatusModeSwitchPosition = _XATSGeneratorStatusModeSwitchPosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 3),
    _XATSGeneratorStatusModeSwitchPosition_Type()
)
xATSGeneratorStatusModeSwitchPosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorStatusModeSwitchPosition.setStatus("mandatory")


class _XATSGeneratorStatusRemoteStart_Type(Integer32):
    """Custom type xATSGeneratorStatusRemoteStart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("run", 2),
          ("stop", 1),
          ("unknown", 3))
    )


_XATSGeneratorStatusRemoteStart_Type.__name__ = "Integer32"
_XATSGeneratorStatusRemoteStart_Object = MibScalar
xATSGeneratorStatusRemoteStart = _XATSGeneratorStatusRemoteStart_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 2, 4),
    _XATSGeneratorStatusRemoteStart_Type()
)
xATSGeneratorStatusRemoteStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorStatusRemoteStart.setStatus("mandatory")
_XATSGeneratorAdvStatus_ObjectIdentity = ObjectIdentity
xATSGeneratorAdvStatus = _XATSGeneratorAdvStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3)
)
_XATSGeneratorAdvStatusBatteryVoltage_Type = Integer32
_XATSGeneratorAdvStatusBatteryVoltage_Object = MibScalar
xATSGeneratorAdvStatusBatteryVoltage = _XATSGeneratorAdvStatusBatteryVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 1),
    _XATSGeneratorAdvStatusBatteryVoltage_Type()
)
xATSGeneratorAdvStatusBatteryVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorAdvStatusBatteryVoltage.setStatus("mandatory")
_XATSGeneratorAdvStatusOilPressure_Type = Integer32
_XATSGeneratorAdvStatusOilPressure_Object = MibScalar
xATSGeneratorAdvStatusOilPressure = _XATSGeneratorAdvStatusOilPressure_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 2),
    _XATSGeneratorAdvStatusOilPressure_Type()
)
xATSGeneratorAdvStatusOilPressure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorAdvStatusOilPressure.setStatus("mandatory")
_XATSGeneratorAdvStatusCoolantTemperature_Type = Integer32
_XATSGeneratorAdvStatusCoolantTemperature_Object = MibScalar
xATSGeneratorAdvStatusCoolantTemperature = _XATSGeneratorAdvStatusCoolantTemperature_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 3),
    _XATSGeneratorAdvStatusCoolantTemperature_Type()
)
xATSGeneratorAdvStatusCoolantTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorAdvStatusCoolantTemperature.setStatus("mandatory")
_XATSGeneratorAdvStatusEngineRPM_Type = Integer32
_XATSGeneratorAdvStatusEngineRPM_Object = MibScalar
xATSGeneratorAdvStatusEngineRPM = _XATSGeneratorAdvStatusEngineRPM_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 4),
    _XATSGeneratorAdvStatusEngineRPM_Type()
)
xATSGeneratorAdvStatusEngineRPM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorAdvStatusEngineRPM.setStatus("mandatory")


class _XATSGeneratorAdvStatusOilLevel_Type(Integer32):
    """Custom type xATSGeneratorAdvStatusOilLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("low", 2),
          ("ok", 1),
          ("unknown", 3))
    )


_XATSGeneratorAdvStatusOilLevel_Type.__name__ = "Integer32"
_XATSGeneratorAdvStatusOilLevel_Object = MibScalar
xATSGeneratorAdvStatusOilLevel = _XATSGeneratorAdvStatusOilLevel_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 5),
    _XATSGeneratorAdvStatusOilLevel_Type()
)
xATSGeneratorAdvStatusOilLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorAdvStatusOilLevel.setStatus("mandatory")


class _XATSGeneratorAdvStatusCoolantLevel_Type(Integer32):
    """Custom type xATSGeneratorAdvStatusCoolantLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("low", 2),
          ("ok", 1),
          ("unknown", 3))
    )


_XATSGeneratorAdvStatusCoolantLevel_Type.__name__ = "Integer32"
_XATSGeneratorAdvStatusCoolantLevel_Object = MibScalar
xATSGeneratorAdvStatusCoolantLevel = _XATSGeneratorAdvStatusCoolantLevel_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 3, 6),
    _XATSGeneratorAdvStatusCoolantLevel_Type()
)
xATSGeneratorAdvStatusCoolantLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorAdvStatusCoolantLevel.setStatus("mandatory")
_XATSGeneratorOutput_ObjectIdentity = ObjectIdentity
xATSGeneratorOutput = _XATSGeneratorOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4)
)
_XATSGeneratorOutputFrequency_Type = Integer32
_XATSGeneratorOutputFrequency_Object = MibScalar
xATSGeneratorOutputFrequency = _XATSGeneratorOutputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 1),
    _XATSGeneratorOutputFrequency_Type()
)
xATSGeneratorOutputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorOutputFrequency.setStatus("mandatory")
_XATSGeneratorOutputTotalPower_Type = Integer32
_XATSGeneratorOutputTotalPower_Object = MibScalar
xATSGeneratorOutputTotalPower = _XATSGeneratorOutputTotalPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 2),
    _XATSGeneratorOutputTotalPower_Type()
)
xATSGeneratorOutputTotalPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorOutputTotalPower.setStatus("mandatory")
_XATSGeneratorOutputTotalApparentPower_Type = Integer32
_XATSGeneratorOutputTotalApparentPower_Object = MibScalar
xATSGeneratorOutputTotalApparentPower = _XATSGeneratorOutputTotalApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 3),
    _XATSGeneratorOutputTotalApparentPower_Type()
)
xATSGeneratorOutputTotalApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorOutputTotalApparentPower.setStatus("mandatory")
_XATSGeneratorOutputTotalPowerFactor_Type = Integer32
_XATSGeneratorOutputTotalPowerFactor_Object = MibScalar
xATSGeneratorOutputTotalPowerFactor = _XATSGeneratorOutputTotalPowerFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 4),
    _XATSGeneratorOutputTotalPowerFactor_Type()
)
xATSGeneratorOutputTotalPowerFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorOutputTotalPowerFactor.setStatus("mandatory")
_XATSGeneratorOutputTableSize_Type = Integer32
_XATSGeneratorOutputTableSize_Object = MibScalar
xATSGeneratorOutputTableSize = _XATSGeneratorOutputTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 5),
    _XATSGeneratorOutputTableSize_Type()
)
xATSGeneratorOutputTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorOutputTableSize.setStatus("mandatory")
_XATSGeneratorOutputPhaseTable_Object = MibTable
xATSGeneratorOutputPhaseTable = _XATSGeneratorOutputPhaseTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6)
)
if mibBuilder.loadTexts:
    xATSGeneratorOutputPhaseTable.setStatus("mandatory")
_XATSGeneratorOutputPhaseEntry_Object = MibTableRow
xATSGeneratorOutputPhaseEntry = _XATSGeneratorOutputPhaseEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1)
)
xATSGeneratorOutputPhaseEntry.setIndexNames(
    (0, "POWERNET-MIB", "xATSGeneratorOutputPhaseIndex"),
)
if mibBuilder.loadTexts:
    xATSGeneratorOutputPhaseEntry.setStatus("mandatory")


class _XATSGeneratorOutputPhaseIndex_Type(Integer32):
    """Custom type xATSGeneratorOutputPhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_XATSGeneratorOutputPhaseIndex_Type.__name__ = "Integer32"
_XATSGeneratorOutputPhaseIndex_Object = MibTableColumn
xATSGeneratorOutputPhaseIndex = _XATSGeneratorOutputPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 1),
    _XATSGeneratorOutputPhaseIndex_Type()
)
xATSGeneratorOutputPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorOutputPhaseIndex.setStatus("mandatory")
_XATSGeneratorOutputVoltageLtoL_Type = Integer32
_XATSGeneratorOutputVoltageLtoL_Object = MibTableColumn
xATSGeneratorOutputVoltageLtoL = _XATSGeneratorOutputVoltageLtoL_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 2),
    _XATSGeneratorOutputVoltageLtoL_Type()
)
xATSGeneratorOutputVoltageLtoL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorOutputVoltageLtoL.setStatus("mandatory")
_XATSGeneratorOutputVoltageLtoN_Type = Integer32
_XATSGeneratorOutputVoltageLtoN_Object = MibTableColumn
xATSGeneratorOutputVoltageLtoN = _XATSGeneratorOutputVoltageLtoN_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 3),
    _XATSGeneratorOutputVoltageLtoN_Type()
)
xATSGeneratorOutputVoltageLtoN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorOutputVoltageLtoN.setStatus("mandatory")
_XATSGeneratorOutputPhaseCurrent_Type = Integer32
_XATSGeneratorOutputPhaseCurrent_Object = MibTableColumn
xATSGeneratorOutputPhaseCurrent = _XATSGeneratorOutputPhaseCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 4),
    _XATSGeneratorOutputPhaseCurrent_Type()
)
xATSGeneratorOutputPhaseCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorOutputPhaseCurrent.setStatus("mandatory")
_XATSGeneratorOutputPower_Type = Integer32
_XATSGeneratorOutputPower_Object = MibTableColumn
xATSGeneratorOutputPower = _XATSGeneratorOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 5),
    _XATSGeneratorOutputPower_Type()
)
xATSGeneratorOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorOutputPower.setStatus("mandatory")
_XATSGeneratorOutputApparentPower_Type = Integer32
_XATSGeneratorOutputApparentPower_Object = MibTableColumn
xATSGeneratorOutputApparentPower = _XATSGeneratorOutputApparentPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 6),
    _XATSGeneratorOutputApparentPower_Type()
)
xATSGeneratorOutputApparentPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorOutputApparentPower.setStatus("mandatory")
_XATSGeneratorOutputPowerFactor_Type = Integer32
_XATSGeneratorOutputPowerFactor_Object = MibTableColumn
xATSGeneratorOutputPowerFactor = _XATSGeneratorOutputPowerFactor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 4, 6, 1, 7),
    _XATSGeneratorOutputPowerFactor_Type()
)
xATSGeneratorOutputPowerFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorOutputPowerFactor.setStatus("mandatory")
_XATSGeneratorSettings_ObjectIdentity = ObjectIdentity
xATSGeneratorSettings = _XATSGeneratorSettings_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5)
)
_XATSGeneratorSettingsVoltageAdjust_Type = Integer32
_XATSGeneratorSettingsVoltageAdjust_Object = MibScalar
xATSGeneratorSettingsVoltageAdjust = _XATSGeneratorSettingsVoltageAdjust_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 1),
    _XATSGeneratorSettingsVoltageAdjust_Type()
)
xATSGeneratorSettingsVoltageAdjust.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorSettingsVoltageAdjust.setStatus("mandatory")
_XATSGeneratorSettingsFrequencyAdjust_Type = Integer32
_XATSGeneratorSettingsFrequencyAdjust_Object = MibScalar
xATSGeneratorSettingsFrequencyAdjust = _XATSGeneratorSettingsFrequencyAdjust_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 2),
    _XATSGeneratorSettingsFrequencyAdjust_Type()
)
xATSGeneratorSettingsFrequencyAdjust.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorSettingsFrequencyAdjust.setStatus("mandatory")
_XATSGeneratorSettingsStartDelay_Type = Integer32
_XATSGeneratorSettingsStartDelay_Object = MibScalar
xATSGeneratorSettingsStartDelay = _XATSGeneratorSettingsStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 3),
    _XATSGeneratorSettingsStartDelay_Type()
)
xATSGeneratorSettingsStartDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorSettingsStartDelay.setStatus("mandatory")
_XATSGeneratorSettingsStopDelay_Type = Integer32
_XATSGeneratorSettingsStopDelay_Object = MibScalar
xATSGeneratorSettingsStopDelay = _XATSGeneratorSettingsStopDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 4),
    _XATSGeneratorSettingsStopDelay_Type()
)
xATSGeneratorSettingsStopDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorSettingsStopDelay.setStatus("mandatory")


class _XATSGeneratorSettingsCrankCycleEnable_Type(Integer32):
    """Custom type xATSGeneratorSettingsCrankCycleEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2),
          ("unknown", 3))
    )


_XATSGeneratorSettingsCrankCycleEnable_Type.__name__ = "Integer32"
_XATSGeneratorSettingsCrankCycleEnable_Object = MibScalar
xATSGeneratorSettingsCrankCycleEnable = _XATSGeneratorSettingsCrankCycleEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 5),
    _XATSGeneratorSettingsCrankCycleEnable_Type()
)
xATSGeneratorSettingsCrankCycleEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorSettingsCrankCycleEnable.setStatus("mandatory")
_XATSGeneratorSettingsCrankTime_Type = Integer32
_XATSGeneratorSettingsCrankTime_Object = MibScalar
xATSGeneratorSettingsCrankTime = _XATSGeneratorSettingsCrankTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 6),
    _XATSGeneratorSettingsCrankTime_Type()
)
xATSGeneratorSettingsCrankTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorSettingsCrankTime.setStatus("mandatory")
_XATSGeneratorSettingsCrankRestTime_Type = Integer32
_XATSGeneratorSettingsCrankRestTime_Object = MibScalar
xATSGeneratorSettingsCrankRestTime = _XATSGeneratorSettingsCrankRestTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 7),
    _XATSGeneratorSettingsCrankRestTime_Type()
)
xATSGeneratorSettingsCrankRestTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorSettingsCrankRestTime.setStatus("mandatory")
_XATSGeneratorSettingsNumberCrank_Type = Integer32
_XATSGeneratorSettingsNumberCrank_Object = MibScalar
xATSGeneratorSettingsNumberCrank = _XATSGeneratorSettingsNumberCrank_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 8),
    _XATSGeneratorSettingsNumberCrank_Type()
)
xATSGeneratorSettingsNumberCrank.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorSettingsNumberCrank.setStatus("mandatory")


class _XATSGeneratorSettingsMetricUnit_Type(Integer32):
    """Custom type xATSGeneratorSettingsMetricUnit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_XATSGeneratorSettingsMetricUnit_Type.__name__ = "Integer32"
_XATSGeneratorSettingsMetricUnit_Object = MibScalar
xATSGeneratorSettingsMetricUnit = _XATSGeneratorSettingsMetricUnit_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 5, 9),
    _XATSGeneratorSettingsMetricUnit_Type()
)
xATSGeneratorSettingsMetricUnit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSGeneratorSettingsMetricUnit.setStatus("mandatory")
_XATSGeneratorService_ObjectIdentity = ObjectIdentity
xATSGeneratorService = _XATSGeneratorService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6)
)
_XATSGeneratorServiceTotalRunHoursLifetime_Type = Integer32
_XATSGeneratorServiceTotalRunHoursLifetime_Object = MibScalar
xATSGeneratorServiceTotalRunHoursLifetime = _XATSGeneratorServiceTotalRunHoursLifetime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 1),
    _XATSGeneratorServiceTotalRunHoursLifetime_Type()
)
xATSGeneratorServiceTotalRunHoursLifetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorServiceTotalRunHoursLifetime.setStatus("mandatory")
_XATSGeneratorServiceEngineStartsLifetime_Type = Integer32
_XATSGeneratorServiceEngineStartsLifetime_Object = MibScalar
xATSGeneratorServiceEngineStartsLifetime = _XATSGeneratorServiceEngineStartsLifetime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 2),
    _XATSGeneratorServiceEngineStartsLifetime_Type()
)
xATSGeneratorServiceEngineStartsLifetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorServiceEngineStartsLifetime.setStatus("mandatory")
_XATSGeneratorServiceTotalkWhLifetime_Type = Integer32
_XATSGeneratorServiceTotalkWhLifetime_Object = MibScalar
xATSGeneratorServiceTotalkWhLifetime = _XATSGeneratorServiceTotalkWhLifetime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 3),
    _XATSGeneratorServiceTotalkWhLifetime_Type()
)
xATSGeneratorServiceTotalkWhLifetime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorServiceTotalkWhLifetime.setStatus("mandatory")
_XATSGeneratorServiceTotalRunHoursSinceMaintenance_Type = Integer32
_XATSGeneratorServiceTotalRunHoursSinceMaintenance_Object = MibScalar
xATSGeneratorServiceTotalRunHoursSinceMaintenance = _XATSGeneratorServiceTotalRunHoursSinceMaintenance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 4),
    _XATSGeneratorServiceTotalRunHoursSinceMaintenance_Type()
)
xATSGeneratorServiceTotalRunHoursSinceMaintenance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorServiceTotalRunHoursSinceMaintenance.setStatus("mandatory")
_XATSGeneratorServiceEngineStartsSinceMaintenance_Type = Integer32
_XATSGeneratorServiceEngineStartsSinceMaintenance_Object = MibScalar
xATSGeneratorServiceEngineStartsSinceMaintenance = _XATSGeneratorServiceEngineStartsSinceMaintenance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 5),
    _XATSGeneratorServiceEngineStartsSinceMaintenance_Type()
)
xATSGeneratorServiceEngineStartsSinceMaintenance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorServiceEngineStartsSinceMaintenance.setStatus("mandatory")
_XATSGeneratorServiceTotalkWhMaintenance_Type = Integer32
_XATSGeneratorServiceTotalkWhMaintenance_Object = MibScalar
xATSGeneratorServiceTotalkWhMaintenance = _XATSGeneratorServiceTotalkWhMaintenance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 6),
    _XATSGeneratorServiceTotalkWhMaintenance_Type()
)
xATSGeneratorServiceTotalkWhMaintenance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorServiceTotalkWhMaintenance.setStatus("mandatory")


class _XATSGeneratorServiceResetRecord_Type(Integer32):
    """Custom type xATSGeneratorServiceResetRecord based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_XATSGeneratorServiceResetRecord_Type.__name__ = "Integer32"
_XATSGeneratorServiceResetRecord_Object = MibScalar
xATSGeneratorServiceResetRecord = _XATSGeneratorServiceResetRecord_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 7),
    _XATSGeneratorServiceResetRecord_Type()
)
xATSGeneratorServiceResetRecord.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSGeneratorServiceResetRecord.setStatus("mandatory")
_XATSGeneratorServiceRecordResetDate_Type = DisplayString
_XATSGeneratorServiceRecordResetDate_Object = MibScalar
xATSGeneratorServiceRecordResetDate = _XATSGeneratorServiceRecordResetDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 8),
    _XATSGeneratorServiceRecordResetDate_Type()
)
xATSGeneratorServiceRecordResetDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorServiceRecordResetDate.setStatus("mandatory")
_XATSGeneratorServiceNextServiceDate_Type = DisplayString
_XATSGeneratorServiceNextServiceDate_Object = MibScalar
xATSGeneratorServiceNextServiceDate = _XATSGeneratorServiceNextServiceDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 9),
    _XATSGeneratorServiceNextServiceDate_Type()
)
xATSGeneratorServiceNextServiceDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorServiceNextServiceDate.setStatus("mandatory")
_XATSGeneratorServiceRunHoursUntilServiceDate_Type = Integer32
_XATSGeneratorServiceRunHoursUntilServiceDate_Object = MibScalar
xATSGeneratorServiceRunHoursUntilServiceDate = _XATSGeneratorServiceRunHoursUntilServiceDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 10),
    _XATSGeneratorServiceRunHoursUntilServiceDate_Type()
)
xATSGeneratorServiceRunHoursUntilServiceDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorServiceRunHoursUntilServiceDate.setStatus("mandatory")


class _XATSGeneratorServiceRunHoursThreshold_Type(Integer32):
    """Custom type xATSGeneratorServiceRunHoursThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("runThreshold100Hours", 2),
          ("runThreshold150Hours", 3),
          ("runThreshold200Hours", 4),
          ("runThreshold250Hours", 5),
          ("runThreshold300Hours", 6),
          ("runThreshold400Hours", 7),
          ("runThreshold500Hours", 8))
    )


_XATSGeneratorServiceRunHoursThreshold_Type.__name__ = "Integer32"
_XATSGeneratorServiceRunHoursThreshold_Object = MibScalar
xATSGeneratorServiceRunHoursThreshold = _XATSGeneratorServiceRunHoursThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 11),
    _XATSGeneratorServiceRunHoursThreshold_Type()
)
xATSGeneratorServiceRunHoursThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSGeneratorServiceRunHoursThreshold.setStatus("mandatory")


class _XATSGeneratorServiceCalendarIntervalThreshold_Type(Integer32):
    """Custom type xATSGeneratorServiceCalendarIntervalThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("interval1month", 2),
          ("interval2month", 3),
          ("interval3month", 4),
          ("interval6month", 5),
          ("intervalyearly", 6))
    )


_XATSGeneratorServiceCalendarIntervalThreshold_Type.__name__ = "Integer32"
_XATSGeneratorServiceCalendarIntervalThreshold_Object = MibScalar
xATSGeneratorServiceCalendarIntervalThreshold = _XATSGeneratorServiceCalendarIntervalThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 6, 12),
    _XATSGeneratorServiceCalendarIntervalThreshold_Type()
)
xATSGeneratorServiceCalendarIntervalThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSGeneratorServiceCalendarIntervalThreshold.setStatus("mandatory")
_XATSGeneratorFuelSystem_ObjectIdentity = ObjectIdentity
xATSGeneratorFuelSystem = _XATSGeneratorFuelSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7)
)


class _XATSGeneratorFuelSystemType_Type(Integer32):
    """Custom type xATSGeneratorFuelSystemType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("diesel", 1),
          ("naturalGas", 3),
          ("propane", 2),
          ("unknown", 4))
    )


_XATSGeneratorFuelSystemType_Type.__name__ = "Integer32"
_XATSGeneratorFuelSystemType_Object = MibScalar
xATSGeneratorFuelSystemType = _XATSGeneratorFuelSystemType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 1),
    _XATSGeneratorFuelSystemType_Type()
)
xATSGeneratorFuelSystemType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorFuelSystemType.setStatus("mandatory")
_XATSGeneratorFuelSystemTankSize_Type = Integer32
_XATSGeneratorFuelSystemTankSize_Object = MibScalar
xATSGeneratorFuelSystemTankSize = _XATSGeneratorFuelSystemTankSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 2),
    _XATSGeneratorFuelSystemTankSize_Type()
)
xATSGeneratorFuelSystemTankSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorFuelSystemTankSize.setStatus("mandatory")
_XATSGeneratorFuelSystemFuelLevel_Type = Integer32
_XATSGeneratorFuelSystemFuelLevel_Object = MibScalar
xATSGeneratorFuelSystemFuelLevel = _XATSGeneratorFuelSystemFuelLevel_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 3),
    _XATSGeneratorFuelSystemFuelLevel_Type()
)
xATSGeneratorFuelSystemFuelLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorFuelSystemFuelLevel.setStatus("mandatory")
_XATSGeneratorFuelSystemRuntimePower_Type = Integer32
_XATSGeneratorFuelSystemRuntimePower_Object = MibScalar
xATSGeneratorFuelSystemRuntimePower = _XATSGeneratorFuelSystemRuntimePower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 4),
    _XATSGeneratorFuelSystemRuntimePower_Type()
)
xATSGeneratorFuelSystemRuntimePower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorFuelSystemRuntimePower.setStatus("mandatory")
_XATSGeneratorFuelSystemEstimatedRunTime_Type = Integer32
_XATSGeneratorFuelSystemEstimatedRunTime_Object = MibScalar
xATSGeneratorFuelSystemEstimatedRunTime = _XATSGeneratorFuelSystemEstimatedRunTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 5),
    _XATSGeneratorFuelSystemEstimatedRunTime_Type()
)
xATSGeneratorFuelSystemEstimatedRunTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xATSGeneratorFuelSystemEstimatedRunTime.setStatus("mandatory")


class _XATSGeneratorFuelSystemLowRunTimeThreshold_Type(Integer32):
    """Custom type xATSGeneratorFuelSystemLowRunTimeThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("fiveDays", 13),
          ("fiveHours", 6),
          ("fourDays", 12),
          ("fourHours", 5),
          ("oneDay", 9),
          ("oneHour", 2),
          ("sevenDays", 15),
          ("sixDays", 14),
          ("sixHours", 7),
          ("threeDays", 11),
          ("threeHours", 4),
          ("twelveHours", 8),
          ("twoDays", 10),
          ("twoHours", 3))
    )


_XATSGeneratorFuelSystemLowRunTimeThreshold_Type.__name__ = "Integer32"
_XATSGeneratorFuelSystemLowRunTimeThreshold_Object = MibScalar
xATSGeneratorFuelSystemLowRunTimeThreshold = _XATSGeneratorFuelSystemLowRunTimeThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 6),
    _XATSGeneratorFuelSystemLowRunTimeThreshold_Type()
)
xATSGeneratorFuelSystemLowRunTimeThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSGeneratorFuelSystemLowRunTimeThreshold.setStatus("mandatory")


class _XATSGeneratorFuelSystemVeryLowRunTimeThreshold_Type(Integer32):
    """Custom type xATSGeneratorFuelSystemVeryLowRunTimeThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("fiveDays", 13),
          ("fiveHours", 6),
          ("fourDays", 12),
          ("fourHours", 5),
          ("oneDay", 9),
          ("oneHour", 2),
          ("sevenDays", 15),
          ("sixDays", 14),
          ("sixHours", 7),
          ("threeDays", 11),
          ("threeHours", 4),
          ("twelveHours", 8),
          ("twoDays", 10),
          ("twoHours", 3))
    )


_XATSGeneratorFuelSystemVeryLowRunTimeThreshold_Type.__name__ = "Integer32"
_XATSGeneratorFuelSystemVeryLowRunTimeThreshold_Object = MibScalar
xATSGeneratorFuelSystemVeryLowRunTimeThreshold = _XATSGeneratorFuelSystemVeryLowRunTimeThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 7),
    _XATSGeneratorFuelSystemVeryLowRunTimeThreshold_Type()
)
xATSGeneratorFuelSystemVeryLowRunTimeThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSGeneratorFuelSystemVeryLowRunTimeThreshold.setStatus("mandatory")


class _XATSGeneratorFuelSystemLowFuelLevelThreshold_Type(Integer32):
    """Custom type xATSGeneratorFuelSystemLowFuelLevelThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XATSGeneratorFuelSystemLowFuelLevelThreshold_Type.__name__ = "Integer32"
_XATSGeneratorFuelSystemLowFuelLevelThreshold_Object = MibScalar
xATSGeneratorFuelSystemLowFuelLevelThreshold = _XATSGeneratorFuelSystemLowFuelLevelThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 8),
    _XATSGeneratorFuelSystemLowFuelLevelThreshold_Type()
)
xATSGeneratorFuelSystemLowFuelLevelThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSGeneratorFuelSystemLowFuelLevelThreshold.setStatus("mandatory")


class _XATSGeneratorFuelSystemVeryLowFuelLevelThreshold_Type(Integer32):
    """Custom type xATSGeneratorFuelSystemVeryLowFuelLevelThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_XATSGeneratorFuelSystemVeryLowFuelLevelThreshold_Type.__name__ = "Integer32"
_XATSGeneratorFuelSystemVeryLowFuelLevelThreshold_Object = MibScalar
xATSGeneratorFuelSystemVeryLowFuelLevelThreshold = _XATSGeneratorFuelSystemVeryLowFuelLevelThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 18, 1, 7, 9),
    _XATSGeneratorFuelSystemVeryLowFuelLevelThreshold_Type()
)
xATSGeneratorFuelSystemVeryLowFuelLevelThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xATSGeneratorFuelSystemVeryLowFuelLevelThreshold.setStatus("mandatory")
_ConsolePortServer_ObjectIdentity = ObjectIdentity
consolePortServer = _ConsolePortServer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19)
)
_CpsAP930x_ObjectIdentity = ObjectIdentity
cpsAP930x = _CpsAP930x_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1)
)
_CpsAP930xSys_ObjectIdentity = ObjectIdentity
cpsAP930xSys = _CpsAP930xSys_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1)
)
_ApCPSpname_Type = DisplayString
_ApCPSpname_Object = MibScalar
apCPSpname = _ApCPSpname_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 1),
    _ApCPSpname_Type()
)
apCPSpname.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apCPSpname.setStatus("mandatory")
_ApCPSversion_Type = DisplayString
_ApCPSversion_Object = MibScalar
apCPSversion = _ApCPSversion_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 2),
    _ApCPSversion_Type()
)
apCPSversion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apCPSversion.setStatus("mandatory")
_ApCPSPower_ObjectIdentity = ObjectIdentity
apCPSPower = _ApCPSPower_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3)
)
_ApCPSPwNum_Type = Integer32
_ApCPSPwNum_Object = MibScalar
apCPSPwNum = _ApCPSPwNum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 1),
    _ApCPSPwNum_Type()
)
apCPSPwNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apCPSPwNum.setStatus("mandatory")
_ApCPSPw1_Type = Integer32
_ApCPSPw1_Object = MibScalar
apCPSPw1 = _ApCPSPw1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 2),
    _ApCPSPw1_Type()
)
apCPSPw1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apCPSPw1.setStatus("mandatory")
_ApCPSPw2_Type = Integer32
_ApCPSPw2_Object = MibScalar
apCPSPw2 = _ApCPSPw2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 3, 3),
    _ApCPSPw2_Type()
)
apCPSPw2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apCPSPw2.setStatus("mandatory")
_ApCPSPcmcia_ObjectIdentity = ObjectIdentity
apCPSPcmcia = _ApCPSPcmcia_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4)
)
_ApCPSNPcmcia_Type = Integer32
_ApCPSNPcmcia_Object = MibScalar
apCPSNPcmcia = _ApCPSNPcmcia_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 1),
    _ApCPSNPcmcia_Type()
)
apCPSNPcmcia.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apCPSNPcmcia.setStatus("mandatory")
_CpsCardIdentTable_Object = MibTable
cpsCardIdentTable = _CpsCardIdentTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2)
)
if mibBuilder.loadTexts:
    cpsCardIdentTable.setStatus("mandatory")
_CpsCardIdentEntry_Object = MibTableRow
cpsCardIdentEntry = _CpsCardIdentEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1)
)
cpsCardIdentEntry.setIndexNames(
    (0, "POWERNET-MIB", "cpsCardIdentIndex"),
)
if mibBuilder.loadTexts:
    cpsCardIdentEntry.setStatus("mandatory")
_CpsCardIdentIndex_Type = Integer32
_CpsCardIdentIndex_Object = MibTableColumn
cpsCardIdentIndex = _CpsCardIdentIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 1),
    _CpsCardIdentIndex_Type()
)
cpsCardIdentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardIdentIndex.setStatus("mandatory")
_CpsCardIdentProd_Type = DisplayString
_CpsCardIdentProd_Object = MibTableColumn
cpsCardIdentProd = _CpsCardIdentProd_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 2),
    _CpsCardIdentProd_Type()
)
cpsCardIdentProd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardIdentProd.setStatus("mandatory")
_CpsCardIdentMan_Type = DisplayString
_CpsCardIdentMan_Object = MibTableColumn
cpsCardIdentMan = _CpsCardIdentMan_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 3),
    _CpsCardIdentMan_Type()
)
cpsCardIdentMan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardIdentMan.setStatus("mandatory")
_CpsCardIdentFunc_Type = DisplayString
_CpsCardIdentFunc_Object = MibTableColumn
cpsCardIdentFunc = _CpsCardIdentFunc_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 4),
    _CpsCardIdentFunc_Type()
)
cpsCardIdentFunc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardIdentFunc.setStatus("mandatory")
_CpsCardIdentPCI_Type = DisplayString
_CpsCardIdentPCI_Object = MibTableColumn
cpsCardIdentPCI = _CpsCardIdentPCI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 2, 1, 5),
    _CpsCardIdentPCI_Type()
)
cpsCardIdentPCI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardIdentPCI.setStatus("mandatory")
_CpsCardConfTable_Object = MibTable
cpsCardConfTable = _CpsCardConfTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3)
)
if mibBuilder.loadTexts:
    cpsCardConfTable.setStatus("mandatory")
_CpsCardConfEntry_Object = MibTableRow
cpsCardConfEntry = _CpsCardConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1)
)
cpsCardConfEntry.setIndexNames(
    (0, "POWERNET-MIB", "cpsCardConfIndex"),
)
if mibBuilder.loadTexts:
    cpsCardConfEntry.setStatus("mandatory")
_CpsCardConfIndex_Type = Integer32
_CpsCardConfIndex_Object = MibTableColumn
cpsCardConfIndex = _CpsCardConfIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 1),
    _CpsCardConfIndex_Type()
)
cpsCardConfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardConfIndex.setStatus("mandatory")
_CpsCardConfPower_Type = DisplayString
_CpsCardConfPower_Object = MibTableColumn
cpsCardConfPower = _CpsCardConfPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 2),
    _CpsCardConfPower_Type()
)
cpsCardConfPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardConfPower.setStatus("mandatory")
_CpsCardConfType_Type = DisplayString
_CpsCardConfType_Object = MibTableColumn
cpsCardConfType = _CpsCardConfType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 3),
    _CpsCardConfType_Type()
)
cpsCardConfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardConfType.setStatus("mandatory")
_CpsCardConfInter_Type = DisplayString
_CpsCardConfInter_Object = MibTableColumn
cpsCardConfInter = _CpsCardConfInter_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 4),
    _CpsCardConfInter_Type()
)
cpsCardConfInter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardConfInter.setStatus("mandatory")
_CpsCardConfFunc_Type = DisplayString
_CpsCardConfFunc_Object = MibTableColumn
cpsCardConfFunc = _CpsCardConfFunc_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 5),
    _CpsCardConfFunc_Type()
)
cpsCardConfFunc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardConfFunc.setStatus("mandatory")
_CpsCardConfCardv_Type = DisplayString
_CpsCardConfCardv_Object = MibTableColumn
cpsCardConfCardv = _CpsCardConfCardv_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 6),
    _CpsCardConfCardv_Type()
)
cpsCardConfCardv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardConfCardv.setStatus("mandatory")
_CpsCardConfPort1_Type = DisplayString
_CpsCardConfPort1_Object = MibTableColumn
cpsCardConfPort1 = _CpsCardConfPort1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 7),
    _CpsCardConfPort1_Type()
)
cpsCardConfPort1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardConfPort1.setStatus("mandatory")
_CpsCardConfPort2_Type = DisplayString
_CpsCardConfPort2_Object = MibTableColumn
cpsCardConfPort2 = _CpsCardConfPort2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 3, 1, 8),
    _CpsCardConfPort2_Type()
)
cpsCardConfPort2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardConfPort2.setStatus("mandatory")
_CpsCardStatusTable_Object = MibTable
cpsCardStatusTable = _CpsCardStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4)
)
if mibBuilder.loadTexts:
    cpsCardStatusTable.setStatus("mandatory")
_CpsCardStatusEntry_Object = MibTableRow
cpsCardStatusEntry = _CpsCardStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1)
)
cpsCardStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "cpsCardStatusIndex"),
)
if mibBuilder.loadTexts:
    cpsCardStatusEntry.setStatus("mandatory")


class _CpsCardStatusIndex_Type(Integer32):
    """Custom type cpsCardStatusIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_CpsCardStatusIndex_Type.__name__ = "Integer32"
_CpsCardStatusIndex_Object = MibTableColumn
cpsCardStatusIndex = _CpsCardStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 1),
    _CpsCardStatusIndex_Type()
)
cpsCardStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardStatusIndex.setStatus("mandatory")
_CpsCardStatusCard_Type = DisplayString
_CpsCardStatusCard_Object = MibTableColumn
cpsCardStatusCard = _CpsCardStatusCard_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 2),
    _CpsCardStatusCard_Type()
)
cpsCardStatusCard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardStatusCard.setStatus("mandatory")
_CpsCardStatusFunc_Type = DisplayString
_CpsCardStatusFunc_Object = MibTableColumn
cpsCardStatusFunc = _CpsCardStatusFunc_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 4, 4, 1, 3),
    _CpsCardStatusFunc_Type()
)
cpsCardStatusFunc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsCardStatusFunc.setStatus("mandatory")
_ApCPSFlashSize_Type = Integer32
_ApCPSFlashSize_Object = MibScalar
apCPSFlashSize = _ApCPSFlashSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 5),
    _ApCPSFlashSize_Type()
)
apCPSFlashSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apCPSFlashSize.setStatus("mandatory")
_ApCPSRAMSize_Type = Integer32
_ApCPSRAMSize_Object = MibScalar
apCPSRAMSize = _ApCPSRAMSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 6),
    _ApCPSRAMSize_Type()
)
apCPSRAMSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apCPSRAMSize.setStatus("mandatory")
_ApCPSCPUfreq_Type = Integer32
_ApCPSCPUfreq_Object = MibScalar
apCPSCPUfreq = _ApCPSCPUfreq_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 7),
    _ApCPSCPUfreq_Type()
)
apCPSCPUfreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apCPSCPUfreq.setStatus("mandatory")
_ApCPSDevId_Type = DisplayString
_ApCPSDevId_Object = MibScalar
apCPSDevId = _ApCPSDevId_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 1, 8),
    _ApCPSDevId_Type()
)
apCPSDevId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apCPSDevId.setStatus("mandatory")
_CpsAP930xConf_ObjectIdentity = ObjectIdentity
cpsAP930xConf = _CpsAP930xConf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2)
)


class _CpsHostName_Type(DisplayString):
    """Custom type cpsHostName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_CpsHostName_Type.__name__ = "DisplayString"
_CpsHostName_Object = MibScalar
cpsHostName = _CpsHostName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 1),
    _CpsHostName_Type()
)
cpsHostName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsHostName.setStatus("mandatory")


class _CpsConsoleBanner_Type(DisplayString):
    """Custom type cpsConsoleBanner based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_CpsConsoleBanner_Type.__name__ = "DisplayString"
_CpsConsoleBanner_Object = MibScalar
cpsConsoleBanner = _CpsConsoleBanner_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 2),
    _CpsConsoleBanner_Type()
)
cpsConsoleBanner.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsConsoleBanner.setStatus("mandatory")


class _CpsMotd_Type(DisplayString):
    """Custom type cpsMotd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_CpsMotd_Type.__name__ = "DisplayString"
_CpsMotd_Object = MibScalar
cpsMotd = _CpsMotd_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 3),
    _CpsMotd_Type()
)
cpsMotd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsMotd.setStatus("mandatory")
_CpsEthItf_ObjectIdentity = ObjectIdentity
cpsEthItf = _CpsEthItf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4)
)
_CpsEthDhcpc_Type = Integer32
_CpsEthDhcpc_Object = MibScalar
cpsEthDhcpc = _CpsEthDhcpc_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 1),
    _CpsEthDhcpc_Type()
)
cpsEthDhcpc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsEthDhcpc.setStatus("mandatory")
_CpsEthIPaddr_Type = IpAddress
_CpsEthIPaddr_Object = MibScalar
cpsEthIPaddr = _CpsEthIPaddr_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 2),
    _CpsEthIPaddr_Type()
)
cpsEthIPaddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsEthIPaddr.setStatus("mandatory")
_CpsEthIPmask_Type = IpAddress
_CpsEthIPmask_Object = MibScalar
cpsEthIPmask = _CpsEthIPmask_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 3),
    _CpsEthIPmask_Type()
)
cpsEthIPmask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsEthIPmask.setStatus("mandatory")
_CpsEthMTU_Type = Integer32
_CpsEthMTU_Object = MibScalar
cpsEthMTU = _CpsEthMTU_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 4),
    _CpsEthMTU_Type()
)
cpsEthMTU.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsEthMTU.setStatus("mandatory")
_CpsEthIPaddr2_Type = IpAddress
_CpsEthIPaddr2_Object = MibScalar
cpsEthIPaddr2 = _CpsEthIPaddr2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 5),
    _CpsEthIPaddr2_Type()
)
cpsEthIPaddr2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsEthIPaddr2.setStatus("mandatory")
_CpsEthIPmask2_Type = IpAddress
_CpsEthIPmask2_Object = MibScalar
cpsEthIPmask2 = _CpsEthIPmask2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 4, 6),
    _CpsEthIPmask2_Type()
)
cpsEthIPmask2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsEthIPmask2.setStatus("mandatory")
_CpsNameService_ObjectIdentity = ObjectIdentity
cpsNameService = _CpsNameService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5)
)


class _CpsResolverOrder_Type(DisplayString):
    """Custom type cpsResolverOrder based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_CpsResolverOrder_Type.__name__ = "DisplayString"
_CpsResolverOrder_Object = MibScalar
cpsResolverOrder = _CpsResolverOrder_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 1),
    _CpsResolverOrder_Type()
)
cpsResolverOrder.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsResolverOrder.setStatus("mandatory")


class _CpsMultipleIP_Type(DisplayString):
    """Custom type cpsMultipleIP based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 3),
    )


_CpsMultipleIP_Type.__name__ = "DisplayString"
_CpsMultipleIP_Object = MibScalar
cpsMultipleIP = _CpsMultipleIP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 2),
    _CpsMultipleIP_Type()
)
cpsMultipleIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsMultipleIP.setStatus("mandatory")
_CpsDNSserv_ObjectIdentity = ObjectIdentity
cpsDNSserv = _CpsDNSserv_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3)
)
_CpsDNSpriserv_Type = IpAddress
_CpsDNSpriserv_Object = MibScalar
cpsDNSpriserv = _CpsDNSpriserv_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 1),
    _CpsDNSpriserv_Type()
)
cpsDNSpriserv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsDNSpriserv.setStatus("mandatory")
_CpsDNSsecserv_Type = IpAddress
_CpsDNSsecserv_Object = MibScalar
cpsDNSsecserv = _CpsDNSsecserv_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 2),
    _CpsDNSsecserv_Type()
)
cpsDNSsecserv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsDNSsecserv.setStatus("mandatory")


class _CpsDNSdomain_Type(DisplayString):
    """Custom type cpsDNSdomain based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_CpsDNSdomain_Type.__name__ = "DisplayString"
_CpsDNSdomain_Object = MibScalar
cpsDNSdomain = _CpsDNSdomain_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 5, 3, 3),
    _CpsDNSdomain_Type()
)
cpsDNSdomain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsDNSdomain.setStatus("mandatory")
_CpsSerialPortConf_ObjectIdentity = ObjectIdentity
cpsSerialPortConf = _CpsSerialPortConf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6)
)
_CpsSerialGlobal_ObjectIdentity = ObjectIdentity
cpsSerialGlobal = _CpsSerialGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1)
)


class _CpsSerialInclude_Type(DisplayString):
    """Custom type cpsSerialInclude based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_CpsSerialInclude_Type.__name__ = "DisplayString"
_CpsSerialInclude_Object = MibScalar
cpsSerialInclude = _CpsSerialInclude_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 1),
    _CpsSerialInclude_Type()
)
cpsSerialInclude.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialInclude.setStatus("mandatory")


class _CpsSerialNFS_Type(DisplayString):
    """Custom type cpsSerialNFS based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 50),
    )


_CpsSerialNFS_Type.__name__ = "DisplayString"
_CpsSerialNFS_Object = MibScalar
cpsSerialNFS = _CpsSerialNFS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 2),
    _CpsSerialNFS_Type()
)
cpsSerialNFS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialNFS.setStatus("mandatory")


class _CpsSerialLockDir_Type(DisplayString):
    """Custom type cpsSerialLockDir based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 50),
    )


_CpsSerialLockDir_Type.__name__ = "DisplayString"
_CpsSerialLockDir_Object = MibScalar
cpsSerialLockDir = _CpsSerialLockDir_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 3),
    _CpsSerialLockDir_Type()
)
cpsSerialLockDir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialLockDir.setStatus("mandatory")


class _CpsSerialRlogin_Type(DisplayString):
    """Custom type cpsSerialRlogin based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 50),
    )


_CpsSerialRlogin_Type.__name__ = "DisplayString"
_CpsSerialRlogin_Object = MibScalar
cpsSerialRlogin = _CpsSerialRlogin_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 4),
    _CpsSerialRlogin_Type()
)
cpsSerialRlogin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialRlogin.setStatus("mandatory")


class _CpsSerialPppd_Type(DisplayString):
    """Custom type cpsSerialPppd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 50),
    )


_CpsSerialPppd_Type.__name__ = "DisplayString"
_CpsSerialPppd_Object = MibScalar
cpsSerialPppd = _CpsSerialPppd_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 5),
    _CpsSerialPppd_Type()
)
cpsSerialPppd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPppd.setStatus("mandatory")


class _CpsSerialTelnet_Type(DisplayString):
    """Custom type cpsSerialTelnet based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 50),
    )


_CpsSerialTelnet_Type.__name__ = "DisplayString"
_CpsSerialTelnet_Object = MibScalar
cpsSerialTelnet = _CpsSerialTelnet_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 6),
    _CpsSerialTelnet_Type()
)
cpsSerialTelnet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialTelnet.setStatus("mandatory")


class _CpsSerialSsh_Type(DisplayString):
    """Custom type cpsSerialSsh based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 50),
    )


_CpsSerialSsh_Type.__name__ = "DisplayString"
_CpsSerialSsh_Object = MibScalar
cpsSerialSsh = _CpsSerialSsh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 7),
    _CpsSerialSsh_Type()
)
cpsSerialSsh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialSsh.setStatus("mandatory")
_CpsSerialLocalLogins_Type = Integer32
_CpsSerialLocalLogins_Object = MibScalar
cpsSerialLocalLogins = _CpsSerialLocalLogins_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 8),
    _CpsSerialLocalLogins_Type()
)
cpsSerialLocalLogins.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialLocalLogins.setStatus("mandatory")
_CpsSerialFacility_Type = Integer32
_CpsSerialFacility_Object = MibScalar
cpsSerialFacility = _CpsSerialFacility_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 9),
    _CpsSerialFacility_Type()
)
cpsSerialFacility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialFacility.setStatus("mandatory")
_CpsSerialDBFacility_Type = Integer32
_CpsSerialDBFacility_Object = MibScalar
cpsSerialDBFacility = _CpsSerialDBFacility_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 10),
    _CpsSerialDBFacility_Type()
)
cpsSerialDBFacility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialDBFacility.setStatus("mandatory")
_CpsSerialGroupTable_Object = MibTable
cpsSerialGroupTable = _CpsSerialGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11)
)
if mibBuilder.loadTexts:
    cpsSerialGroupTable.setStatus("mandatory")
_CpsSerialGroupEntry_Object = MibTableRow
cpsSerialGroupEntry = _CpsSerialGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1)
)
cpsSerialGroupEntry.setIndexNames(
    (0, "POWERNET-MIB", "cpsSerialGroupIndex"),
)
if mibBuilder.loadTexts:
    cpsSerialGroupEntry.setStatus("mandatory")
_CpsSerialGroupIndex_Type = Integer32
_CpsSerialGroupIndex_Object = MibTableColumn
cpsSerialGroupIndex = _CpsSerialGroupIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 1),
    _CpsSerialGroupIndex_Type()
)
cpsSerialGroupIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsSerialGroupIndex.setStatus("mandatory")


class _CpsSerialGroupName_Type(DisplayString):
    """Custom type cpsSerialGroupName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_CpsSerialGroupName_Type.__name__ = "DisplayString"
_CpsSerialGroupName_Object = MibTableColumn
cpsSerialGroupName = _CpsSerialGroupName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 2),
    _CpsSerialGroupName_Type()
)
cpsSerialGroupName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialGroupName.setStatus("mandatory")


class _CpsSerialGroupUsers_Type(DisplayString):
    """Custom type cpsSerialGroupUsers based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CpsSerialGroupUsers_Type.__name__ = "DisplayString"
_CpsSerialGroupUsers_Object = MibTableColumn
cpsSerialGroupUsers = _CpsSerialGroupUsers_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 1, 11, 1, 3),
    _CpsSerialGroupUsers_Type()
)
cpsSerialGroupUsers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialGroupUsers.setStatus("mandatory")
_CpsSerialSpec_ObjectIdentity = ObjectIdentity
cpsSerialSpec = _CpsSerialSpec_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2)
)
_CpsSerialPortTable_Object = MibTable
cpsSerialPortTable = _CpsSerialPortTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1)
)
if mibBuilder.loadTexts:
    cpsSerialPortTable.setStatus("mandatory")
_CpsSerialPortEntry_Object = MibTableRow
cpsSerialPortEntry = _CpsSerialPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1)
)
cpsSerialPortEntry.setIndexNames(
    (0, "POWERNET-MIB", "cpsSerialPortNumber"),
)
if mibBuilder.loadTexts:
    cpsSerialPortEntry.setStatus("mandatory")
_CpsSerialPortNumber_Type = Integer32
_CpsSerialPortNumber_Object = MibTableColumn
cpsSerialPortNumber = _CpsSerialPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 1),
    _CpsSerialPortNumber_Type()
)
cpsSerialPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsSerialPortNumber.setStatus("mandatory")


class _CpsSerialPortTty_Type(DisplayString):
    """Custom type cpsSerialPortTty based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 25),
    )


_CpsSerialPortTty_Type.__name__ = "DisplayString"
_CpsSerialPortTty_Object = MibTableColumn
cpsSerialPortTty = _CpsSerialPortTty_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 2),
    _CpsSerialPortTty_Type()
)
cpsSerialPortTty.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortTty.setStatus("mandatory")


class _CpsSerialPortName_Type(DisplayString):
    """Custom type cpsSerialPortName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_CpsSerialPortName_Type.__name__ = "DisplayString"
_CpsSerialPortName_Object = MibTableColumn
cpsSerialPortName = _CpsSerialPortName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 3),
    _CpsSerialPortName_Type()
)
cpsSerialPortName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortName.setStatus("mandatory")
_CpsSerialPortSpeed_Type = Integer32
_CpsSerialPortSpeed_Object = MibTableColumn
cpsSerialPortSpeed = _CpsSerialPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 4),
    _CpsSerialPortSpeed_Type()
)
cpsSerialPortSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortSpeed.setStatus("mandatory")


class _CpsSerialPortDataSize_Type(Integer32):
    """Custom type cpsSerialPortDataSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 8),
    )


_CpsSerialPortDataSize_Type.__name__ = "Integer32"
_CpsSerialPortDataSize_Object = MibTableColumn
cpsSerialPortDataSize = _CpsSerialPortDataSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 5),
    _CpsSerialPortDataSize_Type()
)
cpsSerialPortDataSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortDataSize.setStatus("mandatory")


class _CpsSerialPortStopBits_Type(Integer32):
    """Custom type cpsSerialPortStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_CpsSerialPortStopBits_Type.__name__ = "Integer32"
_CpsSerialPortStopBits_Object = MibTableColumn
cpsSerialPortStopBits = _CpsSerialPortStopBits_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 6),
    _CpsSerialPortStopBits_Type()
)
cpsSerialPortStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortStopBits.setStatus("mandatory")


class _CpsSerialPortParity_Type(DisplayString):
    """Custom type cpsSerialPortParity based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 5),
    )


_CpsSerialPortParity_Type.__name__ = "DisplayString"
_CpsSerialPortParity_Object = MibTableColumn
cpsSerialPortParity = _CpsSerialPortParity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 7),
    _CpsSerialPortParity_Type()
)
cpsSerialPortParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortParity.setStatus("mandatory")


class _CpsSerialPortFlowCtrl_Type(DisplayString):
    """Custom type cpsSerialPortFlowCtrl based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 5),
    )


_CpsSerialPortFlowCtrl_Type.__name__ = "DisplayString"
_CpsSerialPortFlowCtrl_Object = MibTableColumn
cpsSerialPortFlowCtrl = _CpsSerialPortFlowCtrl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 8),
    _CpsSerialPortFlowCtrl_Type()
)
cpsSerialPortFlowCtrl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortFlowCtrl.setStatus("mandatory")
_CpsSerialPortDTRdelay_Type = Integer32
_CpsSerialPortDTRdelay_Object = MibTableColumn
cpsSerialPortDTRdelay = _CpsSerialPortDTRdelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 9),
    _CpsSerialPortDTRdelay_Type()
)
cpsSerialPortDTRdelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortDTRdelay.setStatus("mandatory")
_CpsSerialPortDCDCtrl_Type = Integer32
_CpsSerialPortDCDCtrl_Object = MibTableColumn
cpsSerialPortDCDCtrl = _CpsSerialPortDCDCtrl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 10),
    _CpsSerialPortDCDCtrl_Type()
)
cpsSerialPortDCDCtrl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortDCDCtrl.setStatus("mandatory")
_CpsSerialPortLogUtmp_Type = Integer32
_CpsSerialPortLogUtmp_Object = MibTableColumn
cpsSerialPortLogUtmp = _CpsSerialPortLogUtmp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 11),
    _CpsSerialPortLogUtmp_Type()
)
cpsSerialPortLogUtmp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortLogUtmp.setStatus("mandatory")
_CpsSerialPortLogWtmp_Type = Integer32
_CpsSerialPortLogWtmp_Object = MibTableColumn
cpsSerialPortLogWtmp = _CpsSerialPortLogWtmp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 12),
    _CpsSerialPortLogWtmp_Type()
)
cpsSerialPortLogWtmp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortLogWtmp.setStatus("mandatory")


class _CpsSerialPortLogform_Type(DisplayString):
    """Custom type cpsSerialPortLogform based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_CpsSerialPortLogform_Type.__name__ = "DisplayString"
_CpsSerialPortLogform_Object = MibTableColumn
cpsSerialPortLogform = _CpsSerialPortLogform_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 13),
    _CpsSerialPortLogform_Type()
)
cpsSerialPortLogform.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortLogform.setStatus("mandatory")


class _CpsSerialPortAuthtype_Type(DisplayString):
    """Custom type cpsSerialPortAuthtype based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 25),
    )


_CpsSerialPortAuthtype_Type.__name__ = "DisplayString"
_CpsSerialPortAuthtype_Object = MibTableColumn
cpsSerialPortAuthtype = _CpsSerialPortAuthtype_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 14),
    _CpsSerialPortAuthtype_Type()
)
cpsSerialPortAuthtype.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAuthtype.setStatus("mandatory")
_CpsSerialPortAuthSrv1_Type = IpAddress
_CpsSerialPortAuthSrv1_Object = MibTableColumn
cpsSerialPortAuthSrv1 = _CpsSerialPortAuthSrv1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 15),
    _CpsSerialPortAuthSrv1_Type()
)
cpsSerialPortAuthSrv1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAuthSrv1.setStatus("mandatory")
_CpsSerialPortAccSrv1_Type = IpAddress
_CpsSerialPortAccSrv1_Object = MibTableColumn
cpsSerialPortAccSrv1 = _CpsSerialPortAccSrv1_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 16),
    _CpsSerialPortAccSrv1_Type()
)
cpsSerialPortAccSrv1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAccSrv1.setStatus("mandatory")
_CpsSerialPortAuthTmo_Type = Integer32
_CpsSerialPortAuthTmo_Object = MibTableColumn
cpsSerialPortAuthTmo = _CpsSerialPortAuthTmo_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 17),
    _CpsSerialPortAuthTmo_Type()
)
cpsSerialPortAuthTmo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAuthTmo.setStatus("mandatory")
_CpsSerialPortAuthRetr_Type = Integer32
_CpsSerialPortAuthRetr_Object = MibTableColumn
cpsSerialPortAuthRetr = _CpsSerialPortAuthRetr_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 18),
    _CpsSerialPortAuthRetr_Type()
)
cpsSerialPortAuthRetr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAuthRetr.setStatus("mandatory")
_CpsSerialPortAuthSrv2_Type = IpAddress
_CpsSerialPortAuthSrv2_Object = MibTableColumn
cpsSerialPortAuthSrv2 = _CpsSerialPortAuthSrv2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 19),
    _CpsSerialPortAuthSrv2_Type()
)
cpsSerialPortAuthSrv2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAuthSrv2.setStatus("mandatory")
_CpsSerialPortAccSrv2_Type = IpAddress
_CpsSerialPortAccSrv2_Object = MibTableColumn
cpsSerialPortAccSrv2 = _CpsSerialPortAccSrv2_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 20),
    _CpsSerialPortAccSrv2_Type()
)
cpsSerialPortAccSrv2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAccSrv2.setStatus("mandatory")


class _CpsSerialPortAuthSecret_Type(DisplayString):
    """Custom type cpsSerialPortAuthSecret based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_CpsSerialPortAuthSecret_Type.__name__ = "DisplayString"
_CpsSerialPortAuthSecret_Object = MibTableColumn
cpsSerialPortAuthSecret = _CpsSerialPortAuthSecret_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 21),
    _CpsSerialPortAuthSecret_Type()
)
cpsSerialPortAuthSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAuthSecret.setStatus("mandatory")
_CpsSerialPortAuthRadP_Type = Integer32
_CpsSerialPortAuthRadP_Object = MibTableColumn
cpsSerialPortAuthRadP = _CpsSerialPortAuthRadP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 22),
    _CpsSerialPortAuthRadP_Type()
)
cpsSerialPortAuthRadP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAuthRadP.setStatus("mandatory")


class _CpsSerialPortAuthAcc_Type(DisplayString):
    """Custom type cpsSerialPortAuthAcc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_CpsSerialPortAuthAcc_Type.__name__ = "DisplayString"
_CpsSerialPortAuthAcc_Object = MibTableColumn
cpsSerialPortAuthAcc = _CpsSerialPortAuthAcc_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 23),
    _CpsSerialPortAuthAcc_Type()
)
cpsSerialPortAuthAcc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAuthAcc.setStatus("mandatory")


class _CpsSerialPortProtocol_Type(DisplayString):
    """Custom type cpsSerialPortProtocol based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_CpsSerialPortProtocol_Type.__name__ = "DisplayString"
_CpsSerialPortProtocol_Object = MibTableColumn
cpsSerialPortProtocol = _CpsSerialPortProtocol_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 24),
    _CpsSerialPortProtocol_Type()
)
cpsSerialPortProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortProtocol.setStatus("mandatory")


class _CpsSerialPortRemoteIP_Type(DisplayString):
    """Custom type cpsSerialPortRemoteIP based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_CpsSerialPortRemoteIP_Type.__name__ = "DisplayString"
_CpsSerialPortRemoteIP_Object = MibTableColumn
cpsSerialPortRemoteIP = _CpsSerialPortRemoteIP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 25),
    _CpsSerialPortRemoteIP_Type()
)
cpsSerialPortRemoteIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortRemoteIP.setStatus("mandatory")


class _CpsSerialPortSocketPort_Type(DisplayString):
    """Custom type cpsSerialPortSocketPort based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CpsSerialPortSocketPort_Type.__name__ = "DisplayString"
_CpsSerialPortSocketPort_Object = MibTableColumn
cpsSerialPortSocketPort = _CpsSerialPortSocketPort_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 26),
    _CpsSerialPortSocketPort_Type()
)
cpsSerialPortSocketPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortSocketPort.setStatus("mandatory")
_CpsSerialPortRemHost_Type = IpAddress
_CpsSerialPortRemHost_Object = MibTableColumn
cpsSerialPortRemHost = _CpsSerialPortRemHost_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 27),
    _CpsSerialPortRemHost_Type()
)
cpsSerialPortRemHost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortRemHost.setStatus("mandatory")


class _CpsSerialPortBanner_Type(DisplayString):
    """Custom type cpsSerialPortBanner based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 250),
    )


_CpsSerialPortBanner_Type.__name__ = "DisplayString"
_CpsSerialPortBanner_Object = MibTableColumn
cpsSerialPortBanner = _CpsSerialPortBanner_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 28),
    _CpsSerialPortBanner_Type()
)
cpsSerialPortBanner.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortBanner.setStatus("mandatory")


class _CpsSerialPortPrompt_Type(DisplayString):
    """Custom type cpsSerialPortPrompt based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 250),
    )


_CpsSerialPortPrompt_Type.__name__ = "DisplayString"
_CpsSerialPortPrompt_Object = MibTableColumn
cpsSerialPortPrompt = _CpsSerialPortPrompt_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 29),
    _CpsSerialPortPrompt_Type()
)
cpsSerialPortPrompt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortPrompt.setStatus("mandatory")


class _CpsSerialPortTermType_Type(DisplayString):
    """Custom type cpsSerialPortTermType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_CpsSerialPortTermType_Type.__name__ = "DisplayString"
_CpsSerialPortTermType_Object = MibTableColumn
cpsSerialPortTermType = _CpsSerialPortTermType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 30),
    _CpsSerialPortTermType_Type()
)
cpsSerialPortTermType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortTermType.setStatus("mandatory")


class _CpsSerialPortAutomUsr_Type(DisplayString):
    """Custom type cpsSerialPortAutomUsr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_CpsSerialPortAutomUsr_Type.__name__ = "DisplayString"
_CpsSerialPortAutomUsr_Object = MibTableColumn
cpsSerialPortAutomUsr = _CpsSerialPortAutomUsr_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 31),
    _CpsSerialPortAutomUsr_Type()
)
cpsSerialPortAutomUsr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAutomUsr.setStatus("mandatory")
_CpsSerialPortNetMask_Type = IpAddress
_CpsSerialPortNetMask_Object = MibTableColumn
cpsSerialPortNetMask = _CpsSerialPortNetMask_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 32),
    _CpsSerialPortNetMask_Type()
)
cpsSerialPortNetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortNetMask.setStatus("mandatory")
_CpsSerialPortPppMtu_Type = Integer32
_CpsSerialPortPppMtu_Object = MibTableColumn
cpsSerialPortPppMtu = _CpsSerialPortPppMtu_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 33),
    _CpsSerialPortPppMtu_Type()
)
cpsSerialPortPppMtu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortPppMtu.setStatus("mandatory")
_CpsSerialPortPppMru_Type = Integer32
_CpsSerialPortPppMru_Object = MibTableColumn
cpsSerialPortPppMru = _CpsSerialPortPppMru_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 34),
    _CpsSerialPortPppMru_Type()
)
cpsSerialPortPppMru.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortPppMru.setStatus("mandatory")
_CpsSerialPortPppOptions_Type = DisplayString
_CpsSerialPortPppOptions_Object = MibTableColumn
cpsSerialPortPppOptions = _CpsSerialPortPppOptions_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 35),
    _CpsSerialPortPppOptions_Type()
)
cpsSerialPortPppOptions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortPppOptions.setStatus("mandatory")
_CpsSerialPortPppFoption_Type = DisplayString
_CpsSerialPortPppFoption_Object = MibTableColumn
cpsSerialPortPppFoption = _CpsSerialPortPppFoption_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 36),
    _CpsSerialPortPppFoption_Type()
)
cpsSerialPortPppFoption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortPppFoption.setStatus("mandatory")
_CpsSerialPortModemChat_Type = DisplayString
_CpsSerialPortModemChat_Object = MibTableColumn
cpsSerialPortModemChat = _CpsSerialPortModemChat_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 37),
    _CpsSerialPortModemChat_Type()
)
cpsSerialPortModemChat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortModemChat.setStatus("mandatory")


class _CpsSerialPortSttyCmd_Type(DisplayString):
    """Custom type cpsSerialPortSttyCmd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 180),
    )


_CpsSerialPortSttyCmd_Type.__name__ = "DisplayString"
_CpsSerialPortSttyCmd_Object = MibTableColumn
cpsSerialPortSttyCmd = _CpsSerialPortSttyCmd_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 38),
    _CpsSerialPortSttyCmd_Type()
)
cpsSerialPortSttyCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortSttyCmd.setStatus("mandatory")
_CpsSerialPortSockTx_Type = Integer32
_CpsSerialPortSockTx_Object = MibTableColumn
cpsSerialPortSockTx = _CpsSerialPortSockTx_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 39),
    _CpsSerialPortSockTx_Type()
)
cpsSerialPortSockTx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortSockTx.setStatus("mandatory")
_CpsSerialPortSockPoll_Type = Integer32
_CpsSerialPortSockPoll_Object = MibTableColumn
cpsSerialPortSockPoll = _CpsSerialPortSockPoll_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 40),
    _CpsSerialPortSockPoll_Type()
)
cpsSerialPortSockPoll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortSockPoll.setStatus("mandatory")
_CpsSerialPortSockIdle_Type = Integer32
_CpsSerialPortSockIdle_Object = MibTableColumn
cpsSerialPortSockIdle = _CpsSerialPortSockIdle_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 41),
    _CpsSerialPortSockIdle_Type()
)
cpsSerialPortSockIdle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortSockIdle.setStatus("mandatory")
_CpsSerialPortDBsize_Type = Integer32
_CpsSerialPortDBsize_Object = MibTableColumn
cpsSerialPortDBsize = _CpsSerialPortDBsize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 42),
    _CpsSerialPortDBsize_Type()
)
cpsSerialPortDBsize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortDBsize.setStatus("mandatory")
_CpsSerialPortDBtime_Type = Integer32
_CpsSerialPortDBtime_Object = MibTableColumn
cpsSerialPortDBtime = _CpsSerialPortDBtime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 43),
    _CpsSerialPortDBtime_Type()
)
cpsSerialPortDBtime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortDBtime.setStatus("mandatory")


class _CpsSerialPortDBmode_Type(DisplayString):
    """Custom type cpsSerialPortDBmode based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 5),
    )


_CpsSerialPortDBmode_Type.__name__ = "DisplayString"
_CpsSerialPortDBmode_Object = MibTableColumn
cpsSerialPortDBmode = _CpsSerialPortDBmode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 44),
    _CpsSerialPortDBmode_Type()
)
cpsSerialPortDBmode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortDBmode.setStatus("mandatory")
_CpsSerialPortDBsyslog_Type = Integer32
_CpsSerialPortDBsyslog_Object = MibTableColumn
cpsSerialPortDBsyslog = _CpsSerialPortDBsyslog_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 45),
    _CpsSerialPortDBsyslog_Type()
)
cpsSerialPortDBsyslog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortDBsyslog.setStatus("mandatory")
_CpsSerialPortDBmenu_Type = Integer32
_CpsSerialPortDBmenu_Object = MibTableColumn
cpsSerialPortDBmenu = _CpsSerialPortDBmenu_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 46),
    _CpsSerialPortDBmenu_Type()
)
cpsSerialPortDBmenu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortDBmenu.setStatus("mandatory")
_CpsSerialPortDBalarm_Type = Integer32
_CpsSerialPortDBalarm_Object = MibTableColumn
cpsSerialPortDBalarm = _CpsSerialPortDBalarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 47),
    _CpsSerialPortDBalarm_Type()
)
cpsSerialPortDBalarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortDBalarm.setStatus("mandatory")


class _CpsSerialPortSSHbreak_Type(DisplayString):
    """Custom type cpsSerialPortSSHbreak based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_CpsSerialPortSSHbreak_Type.__name__ = "DisplayString"
_CpsSerialPortSSHbreak_Object = MibTableColumn
cpsSerialPortSSHbreak = _CpsSerialPortSSHbreak_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 48),
    _CpsSerialPortSSHbreak_Type()
)
cpsSerialPortSSHbreak.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortSSHbreak.setStatus("mandatory")


class _CpsSerialPortSniffSess_Type(DisplayString):
    """Custom type cpsSerialPortSniffSess based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 5),
    )


_CpsSerialPortSniffSess_Type.__name__ = "DisplayString"
_CpsSerialPortSniffSess_Object = MibTableColumn
cpsSerialPortSniffSess = _CpsSerialPortSniffSess_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 49),
    _CpsSerialPortSniffSess_Type()
)
cpsSerialPortSniffSess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortSniffSess.setStatus("mandatory")


class _CpsSerialPortSniffAdm_Type(DisplayString):
    """Custom type cpsSerialPortSniffAdm based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_CpsSerialPortSniffAdm_Type.__name__ = "DisplayString"
_CpsSerialPortSniffAdm_Object = MibTableColumn
cpsSerialPortSniffAdm = _CpsSerialPortSniffAdm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 50),
    _CpsSerialPortSniffAdm_Type()
)
cpsSerialPortSniffAdm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortSniffAdm.setStatus("mandatory")


class _CpsSerialPortSniffEsc_Type(DisplayString):
    """Custom type cpsSerialPortSniffEsc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_CpsSerialPortSniffEsc_Type.__name__ = "DisplayString"
_CpsSerialPortSniffEsc_Object = MibTableColumn
cpsSerialPortSniffEsc = _CpsSerialPortSniffEsc_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 51),
    _CpsSerialPortSniffEsc_Type()
)
cpsSerialPortSniffEsc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortSniffEsc.setStatus("mandatory")


class _CpsSerialPortSniffMsess_Type(DisplayString):
    """Custom type cpsSerialPortSniffMsess based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_CpsSerialPortSniffMsess_Type.__name__ = "DisplayString"
_CpsSerialPortSniffMsess_Object = MibTableColumn
cpsSerialPortSniffMsess = _CpsSerialPortSniffMsess_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 52),
    _CpsSerialPortSniffMsess_Type()
)
cpsSerialPortSniffMsess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortSniffMsess.setStatus("mandatory")
_CpsSerialPortTelnetMode_Type = Integer32
_CpsSerialPortTelnetMode_Object = MibTableColumn
cpsSerialPortTelnetMode = _CpsSerialPortTelnetMode_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 53),
    _CpsSerialPortTelnetMode_Type()
)
cpsSerialPortTelnetMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortTelnetMode.setStatus("mandatory")
_CpsSerialPortSysBufSess_Type = Integer32
_CpsSerialPortSysBufSess_Object = MibTableColumn
cpsSerialPortSysBufSess = _CpsSerialPortSysBufSess_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 54),
    _CpsSerialPortSysBufSess_Type()
)
cpsSerialPortSysBufSess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortSysBufSess.setStatus("mandatory")
_CpsSerialPortLFSuppress_Type = Integer32
_CpsSerialPortLFSuppress_Object = MibTableColumn
cpsSerialPortLFSuppress = _CpsSerialPortLFSuppress_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 55),
    _CpsSerialPortLFSuppress_Type()
)
cpsSerialPortLFSuppress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortLFSuppress.setStatus("mandatory")


class _CpsSerialPortAutoInput_Type(DisplayString):
    """Custom type cpsSerialPortAutoInput based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_CpsSerialPortAutoInput_Type.__name__ = "DisplayString"
_CpsSerialPortAutoInput_Object = MibTableColumn
cpsSerialPortAutoInput = _CpsSerialPortAutoInput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 56),
    _CpsSerialPortAutoInput_Type()
)
cpsSerialPortAutoInput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAutoInput.setStatus("mandatory")


class _CpsSerialPortAutoOutput_Type(DisplayString):
    """Custom type cpsSerialPortAutoOutput based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_CpsSerialPortAutoOutput_Type.__name__ = "DisplayString"
_CpsSerialPortAutoOutput_Object = MibTableColumn
cpsSerialPortAutoOutput = _CpsSerialPortAutoOutput_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 57),
    _CpsSerialPortAutoOutput_Type()
)
cpsSerialPortAutoOutput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortAutoOutput.setStatus("mandatory")
_CpsSerialPortBreakInterval_Type = Integer32
_CpsSerialPortBreakInterval_Object = MibTableColumn
cpsSerialPortBreakInterval = _CpsSerialPortBreakInterval_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 2, 6, 2, 1, 1, 58),
    _CpsSerialPortBreakInterval_Type()
)
cpsSerialPortBreakInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpsSerialPortBreakInterval.setStatus("mandatory")
_CpsAP930xInfo_ObjectIdentity = ObjectIdentity
cpsAP930xInfo = _CpsAP930xInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3)
)
_CpsInfoSerialPortTable_Object = MibTable
cpsInfoSerialPortTable = _CpsInfoSerialPortTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1)
)
if mibBuilder.loadTexts:
    cpsInfoSerialPortTable.setStatus("mandatory")
_CpsInfoSerialPortEntry_Object = MibTableRow
cpsInfoSerialPortEntry = _CpsInfoSerialPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1)
)
cpsInfoSerialPortEntry.setIndexNames(
    (0, "POWERNET-MIB", "cpsInfoSerialPortNumber"),
)
if mibBuilder.loadTexts:
    cpsInfoSerialPortEntry.setStatus("mandatory")
_CpsInfoSerialPortNumber_Type = Integer32
_CpsInfoSerialPortNumber_Object = MibTableColumn
cpsInfoSerialPortNumber = _CpsInfoSerialPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 1),
    _CpsInfoSerialPortNumber_Type()
)
cpsInfoSerialPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortNumber.setStatus("mandatory")
_CpsInfoSerialPortTty_Type = DisplayString
_CpsInfoSerialPortTty_Object = MibTableColumn
cpsInfoSerialPortTty = _CpsInfoSerialPortTty_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 2),
    _CpsInfoSerialPortTty_Type()
)
cpsInfoSerialPortTty.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortTty.setStatus("mandatory")
_CpsInfoSerialPortName_Type = DisplayString
_CpsInfoSerialPortName_Object = MibTableColumn
cpsInfoSerialPortName = _CpsInfoSerialPortName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 3),
    _CpsInfoSerialPortName_Type()
)
cpsInfoSerialPortName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortName.setStatus("mandatory")
_CpsInfoSerialPortSpeed_Type = Integer32
_CpsInfoSerialPortSpeed_Object = MibTableColumn
cpsInfoSerialPortSpeed = _CpsInfoSerialPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 4),
    _CpsInfoSerialPortSpeed_Type()
)
cpsInfoSerialPortSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortSpeed.setStatus("mandatory")
_CpsInfoSerialPortTxBytes_Type = Integer32
_CpsInfoSerialPortTxBytes_Object = MibTableColumn
cpsInfoSerialPortTxBytes = _CpsInfoSerialPortTxBytes_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 5),
    _CpsInfoSerialPortTxBytes_Type()
)
cpsInfoSerialPortTxBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortTxBytes.setStatus("mandatory")
_CpsInfoSerialPortRXBytes_Type = Integer32
_CpsInfoSerialPortRXBytes_Object = MibTableColumn
cpsInfoSerialPortRXBytes = _CpsInfoSerialPortRXBytes_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 6),
    _CpsInfoSerialPortRXBytes_Type()
)
cpsInfoSerialPortRXBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortRXBytes.setStatus("mandatory")
_CpsInfoSerialPortErrFrame_Type = Integer32
_CpsInfoSerialPortErrFrame_Object = MibTableColumn
cpsInfoSerialPortErrFrame = _CpsInfoSerialPortErrFrame_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 7),
    _CpsInfoSerialPortErrFrame_Type()
)
cpsInfoSerialPortErrFrame.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortErrFrame.setStatus("mandatory")
_CpsInfoSerialPortErrParity_Type = Integer32
_CpsInfoSerialPortErrParity_Object = MibTableColumn
cpsInfoSerialPortErrParity = _CpsInfoSerialPortErrParity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 8),
    _CpsInfoSerialPortErrParity_Type()
)
cpsInfoSerialPortErrParity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortErrParity.setStatus("mandatory")
_CpsInfoSerialPortErrBreaks_Type = Integer32
_CpsInfoSerialPortErrBreaks_Object = MibTableColumn
cpsInfoSerialPortErrBreaks = _CpsInfoSerialPortErrBreaks_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 9),
    _CpsInfoSerialPortErrBreaks_Type()
)
cpsInfoSerialPortErrBreaks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortErrBreaks.setStatus("mandatory")
_CpsInfoSerialPortErrOverrun_Type = Integer32
_CpsInfoSerialPortErrOverrun_Object = MibTableColumn
cpsInfoSerialPortErrOverrun = _CpsInfoSerialPortErrOverrun_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 10),
    _CpsInfoSerialPortErrOverrun_Type()
)
cpsInfoSerialPortErrOverrun.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortErrOverrun.setStatus("mandatory")
_CpsInfoSerialPortSigDTR_Type = Integer32
_CpsInfoSerialPortSigDTR_Object = MibTableColumn
cpsInfoSerialPortSigDTR = _CpsInfoSerialPortSigDTR_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 11),
    _CpsInfoSerialPortSigDTR_Type()
)
cpsInfoSerialPortSigDTR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortSigDTR.setStatus("mandatory")
_CpsInfoSerialPortSigCD_Type = Integer32
_CpsInfoSerialPortSigCD_Object = MibTableColumn
cpsInfoSerialPortSigCD = _CpsInfoSerialPortSigCD_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 12),
    _CpsInfoSerialPortSigCD_Type()
)
cpsInfoSerialPortSigCD.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortSigCD.setStatus("mandatory")
_CpsInfoSerialPortSigDSR_Type = Integer32
_CpsInfoSerialPortSigDSR_Object = MibTableColumn
cpsInfoSerialPortSigDSR = _CpsInfoSerialPortSigDSR_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 13),
    _CpsInfoSerialPortSigDSR_Type()
)
cpsInfoSerialPortSigDSR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortSigDSR.setStatus("mandatory")
_CpsInfoSerialPortSigRTS_Type = Integer32
_CpsInfoSerialPortSigRTS_Object = MibTableColumn
cpsInfoSerialPortSigRTS = _CpsInfoSerialPortSigRTS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 14),
    _CpsInfoSerialPortSigRTS_Type()
)
cpsInfoSerialPortSigRTS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortSigRTS.setStatus("mandatory")
_CpsInfoSerialPortSigCTS_Type = Integer32
_CpsInfoSerialPortSigCTS_Object = MibTableColumn
cpsInfoSerialPortSigCTS = _CpsInfoSerialPortSigCTS_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 15),
    _CpsInfoSerialPortSigCTS_Type()
)
cpsInfoSerialPortSigCTS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortSigCTS.setStatus("mandatory")
_CpsInfoSerialPortSigRI_Type = Integer32
_CpsInfoSerialPortSigRI_Object = MibTableColumn
cpsInfoSerialPortSigRI = _CpsInfoSerialPortSigRI_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 3, 1, 1, 16),
    _CpsInfoSerialPortSigRI_Type()
)
cpsInfoSerialPortSigRI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpsInfoSerialPortSigRI.setStatus("mandatory")
_CpsAP930xAdm_ObjectIdentity = ObjectIdentity
cpsAP930xAdm = _CpsAP930xAdm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4)
)
_ApCPSSave_Type = Integer32
_ApCPSSave_Object = MibScalar
apCPSSave = _ApCPSSave_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4, 1),
    _ApCPSSave_Type()
)
apCPSSave.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    apCPSSave.setStatus("mandatory")
_ApCPSSerialHUP_Type = Integer32
_ApCPSSerialHUP_Object = MibScalar
apCPSSerialHUP = _ApCPSSerialHUP_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 19, 1, 4, 2),
    _ApCPSSerialHUP_Type()
)
apCPSSerialHUP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    apCPSSerialHUP.setStatus("mandatory")
_AccessControl_ObjectIdentity = ObjectIdentity
accessControl = _AccessControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20)
)
_AccessPX_ObjectIdentity = ObjectIdentity
accessPX = _AccessPX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1)
)
_AccessPXIdent_ObjectIdentity = ObjectIdentity
accessPXIdent = _AccessPXIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1)
)
_AccessPXIdentAlarmStatus_Type = Integer32
_AccessPXIdentAlarmStatus_Object = MibScalar
accessPXIdentAlarmStatus = _AccessPXIdentAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 1),
    _AccessPXIdentAlarmStatus_Type()
)
accessPXIdentAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXIdentAlarmStatus.setStatus("mandatory")
_AccessPXIdentProductNumber_Type = DisplayString
_AccessPXIdentProductNumber_Object = MibScalar
accessPXIdentProductNumber = _AccessPXIdentProductNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 2),
    _AccessPXIdentProductNumber_Type()
)
accessPXIdentProductNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXIdentProductNumber.setStatus("mandatory")
_AccessPXIdentHardwareRev_Type = DisplayString
_AccessPXIdentHardwareRev_Object = MibScalar
accessPXIdentHardwareRev = _AccessPXIdentHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 3),
    _AccessPXIdentHardwareRev_Type()
)
accessPXIdentHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXIdentHardwareRev.setStatus("mandatory")
_AccessPXIdentDateOfManufacture_Type = DisplayString
_AccessPXIdentDateOfManufacture_Object = MibScalar
accessPXIdentDateOfManufacture = _AccessPXIdentDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 4),
    _AccessPXIdentDateOfManufacture_Type()
)
accessPXIdentDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXIdentDateOfManufacture.setStatus("mandatory")
_AccessPXIdentSerialNumber_Type = DisplayString
_AccessPXIdentSerialNumber_Object = MibScalar
accessPXIdentSerialNumber = _AccessPXIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 1, 5),
    _AccessPXIdentSerialNumber_Type()
)
accessPXIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXIdentSerialNumber.setStatus("mandatory")
_AccessPXConfig_ObjectIdentity = ObjectIdentity
accessPXConfig = _AccessPXConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2)
)


class _AccessPXConfigCardReaderEnableDisableAction_Type(Integer32):
    """Custom type accessPXConfigCardReaderEnableDisableAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enable", 2))
    )


_AccessPXConfigCardReaderEnableDisableAction_Type.__name__ = "Integer32"
_AccessPXConfigCardReaderEnableDisableAction_Object = MibScalar
accessPXConfigCardReaderEnableDisableAction = _AccessPXConfigCardReaderEnableDisableAction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 1),
    _AccessPXConfigCardReaderEnableDisableAction_Type()
)
accessPXConfigCardReaderEnableDisableAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessPXConfigCardReaderEnableDisableAction.setStatus("mandatory")
_AccessPXConfigAutoRelockTime_Type = Integer32
_AccessPXConfigAutoRelockTime_Object = MibScalar
accessPXConfigAutoRelockTime = _AccessPXConfigAutoRelockTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 2),
    _AccessPXConfigAutoRelockTime_Type()
)
accessPXConfigAutoRelockTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessPXConfigAutoRelockTime.setStatus("mandatory")


class _AccessPXConfigCardFormat_Type(Integer32):
    """Custom type accessPXConfigCardFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("hid37Bit", 2),
          ("hid37BitWithFacility", 3),
          ("hidCorp1000", 4),
          ("hidStd26", 1))
    )


_AccessPXConfigCardFormat_Type.__name__ = "Integer32"
_AccessPXConfigCardFormat_Object = MibScalar
accessPXConfigCardFormat = _AccessPXConfigCardFormat_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 2, 3),
    _AccessPXConfigCardFormat_Type()
)
accessPXConfigCardFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessPXConfigCardFormat.setStatus("mandatory")
_AccessPXConfigFront_ObjectIdentity = ObjectIdentity
accessPXConfigFront = _AccessPXConfigFront_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3)
)


class _AccessPXConfigFrontDoorLockControl_Type(Integer32):
    """Custom type accessPXConfigFrontDoorLockControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disconnectedReadOnly", 4),
          ("lock", 2),
          ("notInstalledReadOnly", 3),
          ("unlock", 1))
    )


_AccessPXConfigFrontDoorLockControl_Type.__name__ = "Integer32"
_AccessPXConfigFrontDoorLockControl_Object = MibScalar
accessPXConfigFrontDoorLockControl = _AccessPXConfigFrontDoorLockControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3, 1),
    _AccessPXConfigFrontDoorLockControl_Type()
)
accessPXConfigFrontDoorLockControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessPXConfigFrontDoorLockControl.setStatus("mandatory")
_AccessPXConfigFrontDoorMaxOpenTime_Type = Integer32
_AccessPXConfigFrontDoorMaxOpenTime_Object = MibScalar
accessPXConfigFrontDoorMaxOpenTime = _AccessPXConfigFrontDoorMaxOpenTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 3, 2),
    _AccessPXConfigFrontDoorMaxOpenTime_Type()
)
accessPXConfigFrontDoorMaxOpenTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessPXConfigFrontDoorMaxOpenTime.setStatus("mandatory")
_AccessPXStatusFront_ObjectIdentity = ObjectIdentity
accessPXStatusFront = _AccessPXStatusFront_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4)
)


class _AccessPXStatusFrontDoorLock_Type(Integer32):
    """Custom type accessPXStatusFrontDoorLock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disconnected", 4),
          ("locked", 2),
          ("notInstalled", 3),
          ("unlocked", 1))
    )


_AccessPXStatusFrontDoorLock_Type.__name__ = "Integer32"
_AccessPXStatusFrontDoorLock_Object = MibScalar
accessPXStatusFrontDoorLock = _AccessPXStatusFrontDoorLock_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 1),
    _AccessPXStatusFrontDoorLock_Type()
)
accessPXStatusFrontDoorLock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusFrontDoorLock.setStatus("mandatory")


class _AccessPXStatusFrontDoor_Type(Integer32):
    """Custom type accessPXStatusFrontDoor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("disconnected", 4),
          ("notInstalled", 3),
          ("open", 1))
    )


_AccessPXStatusFrontDoor_Type.__name__ = "Integer32"
_AccessPXStatusFrontDoor_Object = MibScalar
accessPXStatusFrontDoor = _AccessPXStatusFrontDoor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 2),
    _AccessPXStatusFrontDoor_Type()
)
accessPXStatusFrontDoor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusFrontDoor.setStatus("mandatory")


class _AccessPXStatusFrontDoorHandle_Type(Integer32):
    """Custom type accessPXStatusFrontDoorHandle based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("disconnected", 4),
          ("notInstalled", 3),
          ("open", 1))
    )


_AccessPXStatusFrontDoorHandle_Type.__name__ = "Integer32"
_AccessPXStatusFrontDoorHandle_Object = MibScalar
accessPXStatusFrontDoorHandle = _AccessPXStatusFrontDoorHandle_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 3),
    _AccessPXStatusFrontDoorHandle_Type()
)
accessPXStatusFrontDoorHandle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusFrontDoorHandle.setStatus("mandatory")
_AccessPXStatusFrontDoorMaxOpenTime_Type = Integer32
_AccessPXStatusFrontDoorMaxOpenTime_Object = MibScalar
accessPXStatusFrontDoorMaxOpenTime = _AccessPXStatusFrontDoorMaxOpenTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 4),
    _AccessPXStatusFrontDoorMaxOpenTime_Type()
)
accessPXStatusFrontDoorMaxOpenTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusFrontDoorMaxOpenTime.setStatus("mandatory")
_AccessPXStatusFrontDoorAlarmStatus_Type = Integer32
_AccessPXStatusFrontDoorAlarmStatus_Object = MibScalar
accessPXStatusFrontDoorAlarmStatus = _AccessPXStatusFrontDoorAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 4, 5),
    _AccessPXStatusFrontDoorAlarmStatus_Type()
)
accessPXStatusFrontDoorAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusFrontDoorAlarmStatus.setStatus("mandatory")
_AccessPXConfigRear_ObjectIdentity = ObjectIdentity
accessPXConfigRear = _AccessPXConfigRear_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5)
)


class _AccessPXConfigRearDoorLockControl_Type(Integer32):
    """Custom type accessPXConfigRearDoorLockControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disconnectedReadOnly", 4),
          ("lock", 2),
          ("notInstalledReadOnly", 3),
          ("unlock", 1))
    )


_AccessPXConfigRearDoorLockControl_Type.__name__ = "Integer32"
_AccessPXConfigRearDoorLockControl_Object = MibScalar
accessPXConfigRearDoorLockControl = _AccessPXConfigRearDoorLockControl_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5, 1),
    _AccessPXConfigRearDoorLockControl_Type()
)
accessPXConfigRearDoorLockControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessPXConfigRearDoorLockControl.setStatus("mandatory")
_AccessPXConfigRearDoorMaxOpenTime_Type = Integer32
_AccessPXConfigRearDoorMaxOpenTime_Object = MibScalar
accessPXConfigRearDoorMaxOpenTime = _AccessPXConfigRearDoorMaxOpenTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 5, 2),
    _AccessPXConfigRearDoorMaxOpenTime_Type()
)
accessPXConfigRearDoorMaxOpenTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessPXConfigRearDoorMaxOpenTime.setStatus("mandatory")
_AccessPXStatusRear_ObjectIdentity = ObjectIdentity
accessPXStatusRear = _AccessPXStatusRear_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6)
)


class _AccessPXStatusRearDoorLock_Type(Integer32):
    """Custom type accessPXStatusRearDoorLock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disconnected", 4),
          ("locked", 2),
          ("notInstalled", 3),
          ("unlocked", 1))
    )


_AccessPXStatusRearDoorLock_Type.__name__ = "Integer32"
_AccessPXStatusRearDoorLock_Object = MibScalar
accessPXStatusRearDoorLock = _AccessPXStatusRearDoorLock_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 1),
    _AccessPXStatusRearDoorLock_Type()
)
accessPXStatusRearDoorLock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusRearDoorLock.setStatus("mandatory")


class _AccessPXStatusRearDoor_Type(Integer32):
    """Custom type accessPXStatusRearDoor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("disconnected", 4),
          ("notInstalled", 3),
          ("open", 1))
    )


_AccessPXStatusRearDoor_Type.__name__ = "Integer32"
_AccessPXStatusRearDoor_Object = MibScalar
accessPXStatusRearDoor = _AccessPXStatusRearDoor_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 2),
    _AccessPXStatusRearDoor_Type()
)
accessPXStatusRearDoor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusRearDoor.setStatus("mandatory")


class _AccessPXStatusRearDoorHandle_Type(Integer32):
    """Custom type accessPXStatusRearDoorHandle based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("disconnected", 4),
          ("notInstalled", 3),
          ("open", 1))
    )


_AccessPXStatusRearDoorHandle_Type.__name__ = "Integer32"
_AccessPXStatusRearDoorHandle_Object = MibScalar
accessPXStatusRearDoorHandle = _AccessPXStatusRearDoorHandle_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 3),
    _AccessPXStatusRearDoorHandle_Type()
)
accessPXStatusRearDoorHandle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusRearDoorHandle.setStatus("mandatory")
_AccessPXStatusRearDoorMaxOpenTime_Type = Integer32
_AccessPXStatusRearDoorMaxOpenTime_Object = MibScalar
accessPXStatusRearDoorMaxOpenTime = _AccessPXStatusRearDoorMaxOpenTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 4),
    _AccessPXStatusRearDoorMaxOpenTime_Type()
)
accessPXStatusRearDoorMaxOpenTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusRearDoorMaxOpenTime.setStatus("mandatory")
_AccessPXStatusRearDoorAlarmStatus_Type = Integer32
_AccessPXStatusRearDoorAlarmStatus_Object = MibScalar
accessPXStatusRearDoorAlarmStatus = _AccessPXStatusRearDoorAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 6, 5),
    _AccessPXStatusRearDoorAlarmStatus_Type()
)
accessPXStatusRearDoorAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusRearDoorAlarmStatus.setStatus("mandatory")
_AccessPXConfigBeacon_ObjectIdentity = ObjectIdentity
accessPXConfigBeacon = _AccessPXConfigBeacon_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7)
)
_AccessPXConfigBeaconName_Type = DisplayString
_AccessPXConfigBeaconName_Object = MibScalar
accessPXConfigBeaconName = _AccessPXConfigBeaconName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 1),
    _AccessPXConfigBeaconName_Type()
)
accessPXConfigBeaconName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessPXConfigBeaconName.setStatus("mandatory")
_AccessPXConfigBeaconLocation_Type = DisplayString
_AccessPXConfigBeaconLocation_Object = MibScalar
accessPXConfigBeaconLocation = _AccessPXConfigBeaconLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 2),
    _AccessPXConfigBeaconLocation_Type()
)
accessPXConfigBeaconLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessPXConfigBeaconLocation.setStatus("mandatory")


class _AccessPXConfigBeaconAction_Type(Integer32):
    """Custom type accessPXConfigBeaconAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disconnectedReadOnly", 4),
          ("notInstalledReadOnly", 3),
          ("turnOff", 1),
          ("turnOn", 2))
    )


_AccessPXConfigBeaconAction_Type.__name__ = "Integer32"
_AccessPXConfigBeaconAction_Object = MibScalar
accessPXConfigBeaconAction = _AccessPXConfigBeaconAction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 7, 3),
    _AccessPXConfigBeaconAction_Type()
)
accessPXConfigBeaconAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    accessPXConfigBeaconAction.setStatus("mandatory")
_AccessPXStatusBeacon_ObjectIdentity = ObjectIdentity
accessPXStatusBeacon = _AccessPXStatusBeacon_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8)
)
_AccessPXStatusBeaconName_Type = DisplayString
_AccessPXStatusBeaconName_Object = MibScalar
accessPXStatusBeaconName = _AccessPXStatusBeaconName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 1),
    _AccessPXStatusBeaconName_Type()
)
accessPXStatusBeaconName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusBeaconName.setStatus("mandatory")
_AccessPXStatusBeaconLocation_Type = DisplayString
_AccessPXStatusBeaconLocation_Object = MibScalar
accessPXStatusBeaconLocation = _AccessPXStatusBeaconLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 2),
    _AccessPXStatusBeaconLocation_Type()
)
accessPXStatusBeaconLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusBeaconLocation.setStatus("mandatory")


class _AccessPXStatusBeaconCurrentState_Type(Integer32):
    """Custom type accessPXStatusBeaconCurrentState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disconnected", 4),
          ("notInstalled", 3),
          ("off", 1),
          ("on", 2))
    )


_AccessPXStatusBeaconCurrentState_Type.__name__ = "Integer32"
_AccessPXStatusBeaconCurrentState_Object = MibScalar
accessPXStatusBeaconCurrentState = _AccessPXStatusBeaconCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 20, 1, 8, 3),
    _AccessPXStatusBeaconCurrentState_Type()
)
accessPXStatusBeaconCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    accessPXStatusBeaconCurrentState.setStatus("mandatory")
_ApcLocalDisplay_ObjectIdentity = ObjectIdentity
apcLocalDisplay = _ApcLocalDisplay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21)
)
_ApcLocalDisplayIdent_ObjectIdentity = ObjectIdentity
apcLocalDisplayIdent = _ApcLocalDisplayIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1)
)


class _ApcLocalDisplayIdentDisplayType_Type(Integer32):
    """Custom type apcLocalDisplayIdentDisplayType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noDisplayFound", 1),
          ("powerviewRM", 2),
          ("powerviewWW", 3))
    )


_ApcLocalDisplayIdentDisplayType_Type.__name__ = "Integer32"
_ApcLocalDisplayIdentDisplayType_Object = MibScalar
apcLocalDisplayIdentDisplayType = _ApcLocalDisplayIdentDisplayType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 1),
    _ApcLocalDisplayIdentDisplayType_Type()
)
apcLocalDisplayIdentDisplayType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apcLocalDisplayIdentDisplayType.setStatus("mandatory")
_ApcLocalDisplayIdentModelNumber_Type = DisplayString
_ApcLocalDisplayIdentModelNumber_Object = MibScalar
apcLocalDisplayIdentModelNumber = _ApcLocalDisplayIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 2),
    _ApcLocalDisplayIdentModelNumber_Type()
)
apcLocalDisplayIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apcLocalDisplayIdentModelNumber.setStatus("mandatory")
_ApcLocalDisplayIdentFirmwareRev_Type = DisplayString
_ApcLocalDisplayIdentFirmwareRev_Object = MibScalar
apcLocalDisplayIdentFirmwareRev = _ApcLocalDisplayIdentFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 3),
    _ApcLocalDisplayIdentFirmwareRev_Type()
)
apcLocalDisplayIdentFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apcLocalDisplayIdentFirmwareRev.setStatus("mandatory")
_ApcLocalDisplayIdentOptions_Type = DisplayString
_ApcLocalDisplayIdentOptions_Object = MibScalar
apcLocalDisplayIdentOptions = _ApcLocalDisplayIdentOptions_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 4),
    _ApcLocalDisplayIdentOptions_Type()
)
apcLocalDisplayIdentOptions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apcLocalDisplayIdentOptions.setStatus("mandatory")
_ApcLocalDisplayIdentDateOfManufacture_Type = DisplayString
_ApcLocalDisplayIdentDateOfManufacture_Object = MibScalar
apcLocalDisplayIdentDateOfManufacture = _ApcLocalDisplayIdentDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 5),
    _ApcLocalDisplayIdentDateOfManufacture_Type()
)
apcLocalDisplayIdentDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apcLocalDisplayIdentDateOfManufacture.setStatus("mandatory")
_ApcLocalDisplayIdentSerialNumber_Type = DisplayString
_ApcLocalDisplayIdentSerialNumber_Object = MibScalar
apcLocalDisplayIdentSerialNumber = _ApcLocalDisplayIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 1, 6),
    _ApcLocalDisplayIdentSerialNumber_Type()
)
apcLocalDisplayIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apcLocalDisplayIdentSerialNumber.setStatus("mandatory")
_ApcLocalDisplayConfig_ObjectIdentity = ObjectIdentity
apcLocalDisplayConfig = _ApcLocalDisplayConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2)
)


class _ApcLocalDisplayConfigAlarmBeeper_Type(Integer32):
    """Custom type apcLocalDisplayConfigAlarmBeeper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("beeperDisabled", 1),
          ("beeperEnabled", 2))
    )


_ApcLocalDisplayConfigAlarmBeeper_Type.__name__ = "Integer32"
_ApcLocalDisplayConfigAlarmBeeper_Object = MibScalar
apcLocalDisplayConfigAlarmBeeper = _ApcLocalDisplayConfigAlarmBeeper_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 1),
    _ApcLocalDisplayConfigAlarmBeeper_Type()
)
apcLocalDisplayConfigAlarmBeeper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    apcLocalDisplayConfigAlarmBeeper.setStatus("mandatory")


class _ApcLocalDisplayConfigBeeperVolume_Type(Integer32):
    """Custom type apcLocalDisplayConfigBeeperVolume based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("beeperDisabled", 1),
          ("beeperHigh", 4),
          ("beeperLow", 2),
          ("beeperMedium", 3))
    )


_ApcLocalDisplayConfigBeeperVolume_Type.__name__ = "Integer32"
_ApcLocalDisplayConfigBeeperVolume_Object = MibScalar
apcLocalDisplayConfigBeeperVolume = _ApcLocalDisplayConfigBeeperVolume_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 2),
    _ApcLocalDisplayConfigBeeperVolume_Type()
)
apcLocalDisplayConfigBeeperVolume.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    apcLocalDisplayConfigBeeperVolume.setStatus("mandatory")


class _ApcLocalDisplayConfigCheckLogIndicator_Type(Integer32):
    """Custom type apcLocalDisplayConfigCheckLogIndicator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("checklogCritical", 5),
          ("checklogDisabled", 2),
          ("checklogInformational", 3),
          ("checklogNotPresent", 1),
          ("checklogWarning", 4))
    )


_ApcLocalDisplayConfigCheckLogIndicator_Type.__name__ = "Integer32"
_ApcLocalDisplayConfigCheckLogIndicator_Object = MibScalar
apcLocalDisplayConfigCheckLogIndicator = _ApcLocalDisplayConfigCheckLogIndicator_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 3),
    _ApcLocalDisplayConfigCheckLogIndicator_Type()
)
apcLocalDisplayConfigCheckLogIndicator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    apcLocalDisplayConfigCheckLogIndicator.setStatus("mandatory")


class _ApcLocalDisplayConfigKeyClick_Type(Integer32):
    """Custom type apcLocalDisplayConfigKeyClick based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("keyclickDisabled", 1),
          ("keyclickEnabled", 2))
    )


_ApcLocalDisplayConfigKeyClick_Type.__name__ = "Integer32"
_ApcLocalDisplayConfigKeyClick_Object = MibScalar
apcLocalDisplayConfigKeyClick = _ApcLocalDisplayConfigKeyClick_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 4),
    _ApcLocalDisplayConfigKeyClick_Type()
)
apcLocalDisplayConfigKeyClick.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    apcLocalDisplayConfigKeyClick.setStatus("mandatory")


class _ApcLocalDisplayConfigContrast_Type(Integer32):
    """Custom type apcLocalDisplayConfigContrast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("contrast1", 1),
          ("contrast2", 2),
          ("contrast3", 3),
          ("contrast4", 4),
          ("contrast5", 5),
          ("contrast6", 6),
          ("contrast7", 7),
          ("contrast8", 8))
    )


_ApcLocalDisplayConfigContrast_Type.__name__ = "Integer32"
_ApcLocalDisplayConfigContrast_Object = MibScalar
apcLocalDisplayConfigContrast = _ApcLocalDisplayConfigContrast_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 21, 2, 5),
    _ApcLocalDisplayConfigContrast_Type()
)
apcLocalDisplayConfigContrast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    apcLocalDisplayConfigContrast.setStatus("mandatory")
_IsxModularDistribution_ObjectIdentity = ObjectIdentity
isxModularDistribution = _IsxModularDistribution_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22)
)
_IsxModularDistInfo_ObjectIdentity = ObjectIdentity
isxModularDistInfo = _IsxModularDistInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1)
)
_IsxModularDistInfoTableSize_Type = Integer32
_IsxModularDistInfoTableSize_Object = MibScalar
isxModularDistInfoTableSize = _IsxModularDistInfoTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 1),
    _IsxModularDistInfoTableSize_Type()
)
isxModularDistInfoTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistInfoTableSize.setStatus("mandatory")
_IsxModularDistInfoTable_Object = MibTable
isxModularDistInfoTable = _IsxModularDistInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2)
)
if mibBuilder.loadTexts:
    isxModularDistInfoTable.setStatus("mandatory")
_IsxModularDistInfoEntry_Object = MibTableRow
isxModularDistInfoEntry = _IsxModularDistInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1)
)
isxModularDistInfoEntry.setIndexNames(
    (0, "POWERNET-MIB", "isxModularDistInfoSegmentIndex"),
)
if mibBuilder.loadTexts:
    isxModularDistInfoEntry.setStatus("mandatory")
_IsxModularDistInfoSegmentIndex_Type = Integer32
_IsxModularDistInfoSegmentIndex_Object = MibTableColumn
isxModularDistInfoSegmentIndex = _IsxModularDistInfoSegmentIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 1),
    _IsxModularDistInfoSegmentIndex_Type()
)
isxModularDistInfoSegmentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistInfoSegmentIndex.setStatus("mandatory")
_IsxModularDistInfoMeterModelNumber_Type = DisplayString
_IsxModularDistInfoMeterModelNumber_Object = MibTableColumn
isxModularDistInfoMeterModelNumber = _IsxModularDistInfoMeterModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 2),
    _IsxModularDistInfoMeterModelNumber_Type()
)
isxModularDistInfoMeterModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistInfoMeterModelNumber.setStatus("mandatory")
_IsxModularDistInfoMeterSerialNumber_Type = DisplayString
_IsxModularDistInfoMeterSerialNumber_Object = MibTableColumn
isxModularDistInfoMeterSerialNumber = _IsxModularDistInfoMeterSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 3),
    _IsxModularDistInfoMeterSerialNumber_Type()
)
isxModularDistInfoMeterSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistInfoMeterSerialNumber.setStatus("mandatory")
_IsxModularDistInfoMeterDateOfManufacture_Type = DisplayString
_IsxModularDistInfoMeterDateOfManufacture_Object = MibTableColumn
isxModularDistInfoMeterDateOfManufacture = _IsxModularDistInfoMeterDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 4),
    _IsxModularDistInfoMeterDateOfManufacture_Type()
)
isxModularDistInfoMeterDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistInfoMeterDateOfManufacture.setStatus("mandatory")
_IsxModularDistInfoMeterFirmwareRev_Type = DisplayString
_IsxModularDistInfoMeterFirmwareRev_Object = MibTableColumn
isxModularDistInfoMeterFirmwareRev = _IsxModularDistInfoMeterFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 5),
    _IsxModularDistInfoMeterFirmwareRev_Type()
)
isxModularDistInfoMeterFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistInfoMeterFirmwareRev.setStatus("mandatory")
_IsxModularDistInfoMeterHardwareRev_Type = DisplayString
_IsxModularDistInfoMeterHardwareRev_Object = MibTableColumn
isxModularDistInfoMeterHardwareRev = _IsxModularDistInfoMeterHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 1, 2, 1, 6),
    _IsxModularDistInfoMeterHardwareRev_Type()
)
isxModularDistInfoMeterHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistInfoMeterHardwareRev.setStatus("mandatory")
_IsxModularDistModules_ObjectIdentity = ObjectIdentity
isxModularDistModules = _IsxModularDistModules_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2)
)
_IsxModularDistModuleInfoTableSize_Type = Integer32
_IsxModularDistModuleInfoTableSize_Object = MibScalar
isxModularDistModuleInfoTableSize = _IsxModularDistModuleInfoTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 1),
    _IsxModularDistModuleInfoTableSize_Type()
)
isxModularDistModuleInfoTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleInfoTableSize.setStatus("mandatory")
_IsxModularDistModuleInfoTable_Object = MibTable
isxModularDistModuleInfoTable = _IsxModularDistModuleInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2)
)
if mibBuilder.loadTexts:
    isxModularDistModuleInfoTable.setStatus("mandatory")
_IsxModularDistModuleInfoEntry_Object = MibTableRow
isxModularDistModuleInfoEntry = _IsxModularDistModuleInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1)
)
isxModularDistModuleInfoEntry.setIndexNames(
    (0, "POWERNET-MIB", "isxModularDistModuleInfoModIndex"),
)
if mibBuilder.loadTexts:
    isxModularDistModuleInfoEntry.setStatus("mandatory")
_IsxModularDistModuleInfoModIndex_Type = Integer32
_IsxModularDistModuleInfoModIndex_Object = MibTableColumn
isxModularDistModuleInfoModIndex = _IsxModularDistModuleInfoModIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 1),
    _IsxModularDistModuleInfoModIndex_Type()
)
isxModularDistModuleInfoModIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleInfoModIndex.setStatus("mandatory")


class _IsxModularDistModuleInfoAlarmStatus_Type(Integer32):
    """Custom type isxModularDistModuleInfoAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("critical", 3),
          ("normal", 1),
          ("notPresent", 4),
          ("unknown", 5),
          ("warning", 2))
    )


_IsxModularDistModuleInfoAlarmStatus_Type.__name__ = "Integer32"
_IsxModularDistModuleInfoAlarmStatus_Object = MibTableColumn
isxModularDistModuleInfoAlarmStatus = _IsxModularDistModuleInfoAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 2),
    _IsxModularDistModuleInfoAlarmStatus_Type()
)
isxModularDistModuleInfoAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleInfoAlarmStatus.setStatus("mandatory")
_IsxModularDistModuleInfoModelNumber_Type = DisplayString
_IsxModularDistModuleInfoModelNumber_Object = MibTableColumn
isxModularDistModuleInfoModelNumber = _IsxModularDistModuleInfoModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 3),
    _IsxModularDistModuleInfoModelNumber_Type()
)
isxModularDistModuleInfoModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleInfoModelNumber.setStatus("mandatory")
_IsxModularDistModuleInfoSerialNumber_Type = DisplayString
_IsxModularDistModuleInfoSerialNumber_Object = MibTableColumn
isxModularDistModuleInfoSerialNumber = _IsxModularDistModuleInfoSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 4),
    _IsxModularDistModuleInfoSerialNumber_Type()
)
isxModularDistModuleInfoSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleInfoSerialNumber.setStatus("mandatory")
_IsxModularDistModuleInfoDateOfManufacture_Type = DisplayString
_IsxModularDistModuleInfoDateOfManufacture_Object = MibTableColumn
isxModularDistModuleInfoDateOfManufacture = _IsxModularDistModuleInfoDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 5),
    _IsxModularDistModuleInfoDateOfManufacture_Type()
)
isxModularDistModuleInfoDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleInfoDateOfManufacture.setStatus("mandatory")
_IsxModularDistModuleInfoNumCables_Type = Integer32
_IsxModularDistModuleInfoNumCables_Object = MibTableColumn
isxModularDistModuleInfoNumCables = _IsxModularDistModuleInfoNumCables_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 2, 1, 6),
    _IsxModularDistModuleInfoNumCables_Type()
)
isxModularDistModuleInfoNumCables.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleInfoNumCables.setStatus("mandatory")
_IsxModularDistModuleBreakerTableSize_Type = Integer32
_IsxModularDistModuleBreakerTableSize_Object = MibScalar
isxModularDistModuleBreakerTableSize = _IsxModularDistModuleBreakerTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 3),
    _IsxModularDistModuleBreakerTableSize_Type()
)
isxModularDistModuleBreakerTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerTableSize.setStatus("mandatory")
_IsxModularDistModuleBreakerTable_Object = MibTable
isxModularDistModuleBreakerTable = _IsxModularDistModuleBreakerTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4)
)
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerTable.setStatus("mandatory")
_IsxModularDistModuleBreakerEntry_Object = MibTableRow
isxModularDistModuleBreakerEntry = _IsxModularDistModuleBreakerEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1)
)
isxModularDistModuleBreakerEntry.setIndexNames(
    (0, "POWERNET-MIB", "isxModularDistModuleBreakerModIndex"),
    (0, "POWERNET-MIB", "isxModularDistModuleBreakerPhaseIndex"),
)
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerEntry.setStatus("mandatory")
_IsxModularDistModuleBreakerModIndex_Type = Integer32
_IsxModularDistModuleBreakerModIndex_Object = MibTableColumn
isxModularDistModuleBreakerModIndex = _IsxModularDistModuleBreakerModIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 1),
    _IsxModularDistModuleBreakerModIndex_Type()
)
isxModularDistModuleBreakerModIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerModIndex.setStatus("mandatory")


class _IsxModularDistModuleBreakerPhaseIndex_Type(Integer32):
    """Custom type isxModularDistModuleBreakerPhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phaseL1", 1),
          ("phaseL2", 2),
          ("phaseL3", 3))
    )


_IsxModularDistModuleBreakerPhaseIndex_Type.__name__ = "Integer32"
_IsxModularDistModuleBreakerPhaseIndex_Object = MibTableColumn
isxModularDistModuleBreakerPhaseIndex = _IsxModularDistModuleBreakerPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 2),
    _IsxModularDistModuleBreakerPhaseIndex_Type()
)
isxModularDistModuleBreakerPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerPhaseIndex.setStatus("mandatory")
_IsxModularDistModuleBreakerAlarmStatus_Type = Integer32
_IsxModularDistModuleBreakerAlarmStatus_Object = MibTableColumn
isxModularDistModuleBreakerAlarmStatus = _IsxModularDistModuleBreakerAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 3),
    _IsxModularDistModuleBreakerAlarmStatus_Type()
)
isxModularDistModuleBreakerAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerAlarmStatus.setStatus("mandatory")
_IsxModularDistModuleBreakerRating_Type = Integer32
_IsxModularDistModuleBreakerRating_Object = MibTableColumn
isxModularDistModuleBreakerRating = _IsxModularDistModuleBreakerRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 4),
    _IsxModularDistModuleBreakerRating_Type()
)
isxModularDistModuleBreakerRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerRating.setStatus("mandatory")
_IsxModularDistModuleBreakerPhysicalGroup_Type = Integer32
_IsxModularDistModuleBreakerPhysicalGroup_Object = MibTableColumn
isxModularDistModuleBreakerPhysicalGroup = _IsxModularDistModuleBreakerPhysicalGroup_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 5),
    _IsxModularDistModuleBreakerPhysicalGroup_Type()
)
isxModularDistModuleBreakerPhysicalGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerPhysicalGroup.setStatus("mandatory")
_IsxModularDistModuleBreakerCableNum_Type = Integer32
_IsxModularDistModuleBreakerCableNum_Object = MibTableColumn
isxModularDistModuleBreakerCableNum = _IsxModularDistModuleBreakerCableNum_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 6),
    _IsxModularDistModuleBreakerCableNum_Type()
)
isxModularDistModuleBreakerCableNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerCableNum.setStatus("mandatory")


class _IsxModularDistModuleBreakerPosition_Type(Integer32):
    """Custom type isxModularDistModuleBreakerPosition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_IsxModularDistModuleBreakerPosition_Type.__name__ = "Integer32"
_IsxModularDistModuleBreakerPosition_Object = MibTableColumn
isxModularDistModuleBreakerPosition = _IsxModularDistModuleBreakerPosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 7),
    _IsxModularDistModuleBreakerPosition_Type()
)
isxModularDistModuleBreakerPosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerPosition.setStatus("mandatory")


class _IsxModularDistModuleBreakerPositionAlarms_Type(Integer32):
    """Custom type isxModularDistModuleBreakerPositionAlarms based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistModuleBreakerPositionAlarms_Type.__name__ = "Integer32"
_IsxModularDistModuleBreakerPositionAlarms_Object = MibTableColumn
isxModularDistModuleBreakerPositionAlarms = _IsxModularDistModuleBreakerPositionAlarms_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 8),
    _IsxModularDistModuleBreakerPositionAlarms_Type()
)
isxModularDistModuleBreakerPositionAlarms.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerPositionAlarms.setStatus("mandatory")
_IsxModularDistModuleBreakerCurrent_Type = Integer32
_IsxModularDistModuleBreakerCurrent_Object = MibTableColumn
isxModularDistModuleBreakerCurrent = _IsxModularDistModuleBreakerCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 9),
    _IsxModularDistModuleBreakerCurrent_Type()
)
isxModularDistModuleBreakerCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerCurrent.setStatus("mandatory")
_IsxModularDistModuleBreakerPercent_Type = Integer32
_IsxModularDistModuleBreakerPercent_Object = MibTableColumn
isxModularDistModuleBreakerPercent = _IsxModularDistModuleBreakerPercent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 10),
    _IsxModularDistModuleBreakerPercent_Type()
)
isxModularDistModuleBreakerPercent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerPercent.setStatus("mandatory")
_IsxModularDistModuleBreakerPower_Type = Integer32
_IsxModularDistModuleBreakerPower_Object = MibTableColumn
isxModularDistModuleBreakerPower = _IsxModularDistModuleBreakerPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 4, 1, 11),
    _IsxModularDistModuleBreakerPower_Type()
)
isxModularDistModuleBreakerPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleBreakerPower.setStatus("mandatory")
_IsxModularDistModuleOutputsTableSize_Type = Integer32
_IsxModularDistModuleOutputsTableSize_Object = MibScalar
isxModularDistModuleOutputsTableSize = _IsxModularDistModuleOutputsTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 5),
    _IsxModularDistModuleOutputsTableSize_Type()
)
isxModularDistModuleOutputsTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputsTableSize.setStatus("mandatory")
_IsxModularDistModuleOutputTable_Object = MibTable
isxModularDistModuleOutputTable = _IsxModularDistModuleOutputTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6)
)
if mibBuilder.loadTexts:
    isxModularDistModuleOutputTable.setStatus("mandatory")
_IsxModularDistModuleOutputEntry_Object = MibTableRow
isxModularDistModuleOutputEntry = _IsxModularDistModuleOutputEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1)
)
isxModularDistModuleOutputEntry.setIndexNames(
    (0, "POWERNET-MIB", "isxModularDistModuleOutputModIndex"),
    (0, "POWERNET-MIB", "isxModularDistModuleOutputCordIndex"),
)
if mibBuilder.loadTexts:
    isxModularDistModuleOutputEntry.setStatus("mandatory")
_IsxModularDistModuleOutputModIndex_Type = Integer32
_IsxModularDistModuleOutputModIndex_Object = MibTableColumn
isxModularDistModuleOutputModIndex = _IsxModularDistModuleOutputModIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 1),
    _IsxModularDistModuleOutputModIndex_Type()
)
isxModularDistModuleOutputModIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputModIndex.setStatus("mandatory")
_IsxModularDistModuleOutputNumCables_Type = Integer32
_IsxModularDistModuleOutputNumCables_Object = MibTableColumn
isxModularDistModuleOutputNumCables = _IsxModularDistModuleOutputNumCables_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 2),
    _IsxModularDistModuleOutputNumCables_Type()
)
isxModularDistModuleOutputNumCables.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputNumCables.setStatus("mandatory")
_IsxModularDistModuleOutputCordIndex_Type = Integer32
_IsxModularDistModuleOutputCordIndex_Object = MibTableColumn
isxModularDistModuleOutputCordIndex = _IsxModularDistModuleOutputCordIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 3),
    _IsxModularDistModuleOutputCordIndex_Type()
)
isxModularDistModuleOutputCordIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputCordIndex.setStatus("mandatory")
_IsxModularDistModuleOutputName_Type = DisplayString
_IsxModularDistModuleOutputName_Object = MibTableColumn
isxModularDistModuleOutputName = _IsxModularDistModuleOutputName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 4),
    _IsxModularDistModuleOutputName_Type()
)
isxModularDistModuleOutputName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputName.setStatus("mandatory")
_IsxModularDistModuleOutputLocation_Type = DisplayString
_IsxModularDistModuleOutputLocation_Object = MibTableColumn
isxModularDistModuleOutputLocation = _IsxModularDistModuleOutputLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 5),
    _IsxModularDistModuleOutputLocation_Type()
)
isxModularDistModuleOutputLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputLocation.setStatus("mandatory")


class _IsxModularDistModuleOutputStatus_Type(Integer32):
    """Custom type isxModularDistModuleOutputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("critical", 3),
          ("normal", 1),
          ("notPresent", 4),
          ("unknown", 6),
          ("warning", 2))
    )


_IsxModularDistModuleOutputStatus_Type.__name__ = "Integer32"
_IsxModularDistModuleOutputStatus_Object = MibTableColumn
isxModularDistModuleOutputStatus = _IsxModularDistModuleOutputStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 6),
    _IsxModularDistModuleOutputStatus_Type()
)
isxModularDistModuleOutputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputStatus.setStatus("mandatory")


class _IsxModularDistModuleOutputAlarmGeneration_Type(Integer32):
    """Custom type isxModularDistModuleOutputAlarmGeneration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistModuleOutputAlarmGeneration_Type.__name__ = "Integer32"
_IsxModularDistModuleOutputAlarmGeneration_Object = MibTableColumn
isxModularDistModuleOutputAlarmGeneration = _IsxModularDistModuleOutputAlarmGeneration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 7),
    _IsxModularDistModuleOutputAlarmGeneration_Type()
)
isxModularDistModuleOutputAlarmGeneration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputAlarmGeneration.setStatus("mandatory")
_IsxModularDistModuleOutputBreakerMap_Type = Integer32
_IsxModularDistModuleOutputBreakerMap_Object = MibTableColumn
isxModularDistModuleOutputBreakerMap = _IsxModularDistModuleOutputBreakerMap_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 8),
    _IsxModularDistModuleOutputBreakerMap_Type()
)
isxModularDistModuleOutputBreakerMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputBreakerMap.setStatus("mandatory")
_IsxModularDistModuleOutputThresholdMin_Type = Integer32
_IsxModularDistModuleOutputThresholdMin_Object = MibTableColumn
isxModularDistModuleOutputThresholdMin = _IsxModularDistModuleOutputThresholdMin_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 9),
    _IsxModularDistModuleOutputThresholdMin_Type()
)
isxModularDistModuleOutputThresholdMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputThresholdMin.setStatus("mandatory")
_IsxModularDistModuleOutputThresholdLow_Type = Integer32
_IsxModularDistModuleOutputThresholdLow_Object = MibTableColumn
isxModularDistModuleOutputThresholdLow = _IsxModularDistModuleOutputThresholdLow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 10),
    _IsxModularDistModuleOutputThresholdLow_Type()
)
isxModularDistModuleOutputThresholdLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputThresholdLow.setStatus("mandatory")
_IsxModularDistModuleOutputThresholdHigh_Type = Integer32
_IsxModularDistModuleOutputThresholdHigh_Object = MibTableColumn
isxModularDistModuleOutputThresholdHigh = _IsxModularDistModuleOutputThresholdHigh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 11),
    _IsxModularDistModuleOutputThresholdHigh_Type()
)
isxModularDistModuleOutputThresholdHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputThresholdHigh.setStatus("mandatory")
_IsxModularDistModuleOutputThresholdMax_Type = Integer32
_IsxModularDistModuleOutputThresholdMax_Object = MibTableColumn
isxModularDistModuleOutputThresholdMax = _IsxModularDistModuleOutputThresholdMax_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 12),
    _IsxModularDistModuleOutputThresholdMax_Type()
)
isxModularDistModuleOutputThresholdMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputThresholdMax.setStatus("mandatory")


class _IsxModularDistModuleOutputAlarmMinEnable_Type(Integer32):
    """Custom type isxModularDistModuleOutputAlarmMinEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistModuleOutputAlarmMinEnable_Type.__name__ = "Integer32"
_IsxModularDistModuleOutputAlarmMinEnable_Object = MibTableColumn
isxModularDistModuleOutputAlarmMinEnable = _IsxModularDistModuleOutputAlarmMinEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 13),
    _IsxModularDistModuleOutputAlarmMinEnable_Type()
)
isxModularDistModuleOutputAlarmMinEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputAlarmMinEnable.setStatus("mandatory")


class _IsxModularDistModuleOutputAlarmLowEnable_Type(Integer32):
    """Custom type isxModularDistModuleOutputAlarmLowEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistModuleOutputAlarmLowEnable_Type.__name__ = "Integer32"
_IsxModularDistModuleOutputAlarmLowEnable_Object = MibTableColumn
isxModularDistModuleOutputAlarmLowEnable = _IsxModularDistModuleOutputAlarmLowEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 14),
    _IsxModularDistModuleOutputAlarmLowEnable_Type()
)
isxModularDistModuleOutputAlarmLowEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputAlarmLowEnable.setStatus("mandatory")


class _IsxModularDistModuleOutputAlarmHighEnable_Type(Integer32):
    """Custom type isxModularDistModuleOutputAlarmHighEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistModuleOutputAlarmHighEnable_Type.__name__ = "Integer32"
_IsxModularDistModuleOutputAlarmHighEnable_Object = MibTableColumn
isxModularDistModuleOutputAlarmHighEnable = _IsxModularDistModuleOutputAlarmHighEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 15),
    _IsxModularDistModuleOutputAlarmHighEnable_Type()
)
isxModularDistModuleOutputAlarmHighEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputAlarmHighEnable.setStatus("mandatory")


class _IsxModularDistModuleOutputAlarmMaxEnable_Type(Integer32):
    """Custom type isxModularDistModuleOutputAlarmMaxEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistModuleOutputAlarmMaxEnable_Type.__name__ = "Integer32"
_IsxModularDistModuleOutputAlarmMaxEnable_Object = MibTableColumn
isxModularDistModuleOutputAlarmMaxEnable = _IsxModularDistModuleOutputAlarmMaxEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 16),
    _IsxModularDistModuleOutputAlarmMaxEnable_Type()
)
isxModularDistModuleOutputAlarmMaxEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputAlarmMaxEnable.setStatus("mandatory")
_IsxModularDistModuleOutputCableLength_Type = Integer32
_IsxModularDistModuleOutputCableLength_Object = MibTableColumn
isxModularDistModuleOutputCableLength = _IsxModularDistModuleOutputCableLength_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 17),
    _IsxModularDistModuleOutputCableLength_Type()
)
isxModularDistModuleOutputCableLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputCableLength.setStatus("mandatory")
_IsxModularDistModuleOutputConnectorType_Type = DisplayString
_IsxModularDistModuleOutputConnectorType_Object = MibTableColumn
isxModularDistModuleOutputConnectorType = _IsxModularDistModuleOutputConnectorType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 18),
    _IsxModularDistModuleOutputConnectorType_Type()
)
isxModularDistModuleOutputConnectorType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputConnectorType.setStatus("mandatory")
_IsxModularDistModuleOutputAvailableVoltages_Type = Integer32
_IsxModularDistModuleOutputAvailableVoltages_Object = MibTableColumn
isxModularDistModuleOutputAvailableVoltages = _IsxModularDistModuleOutputAvailableVoltages_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 19),
    _IsxModularDistModuleOutputAvailableVoltages_Type()
)
isxModularDistModuleOutputAvailableVoltages.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputAvailableVoltages.setStatus("mandatory")
_IsxModularDistModuleOutputTotalPower_Type = Integer32
_IsxModularDistModuleOutputTotalPower_Object = MibTableColumn
isxModularDistModuleOutputTotalPower = _IsxModularDistModuleOutputTotalPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 20),
    _IsxModularDistModuleOutputTotalPower_Type()
)
isxModularDistModuleOutputTotalPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputTotalPower.setStatus("mandatory")
_IsxModularDistModuleOutputKwhUsage_Type = Integer32
_IsxModularDistModuleOutputKwhUsage_Object = MibTableColumn
isxModularDistModuleOutputKwhUsage = _IsxModularDistModuleOutputKwhUsage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 21),
    _IsxModularDistModuleOutputKwhUsage_Type()
)
isxModularDistModuleOutputKwhUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputKwhUsage.setStatus("mandatory")


class _IsxModularDistModuleOutputKwhReset_Type(Integer32):
    """Custom type isxModularDistModuleOutputKwhReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_IsxModularDistModuleOutputKwhReset_Type.__name__ = "Integer32"
_IsxModularDistModuleOutputKwhReset_Object = MibTableColumn
isxModularDistModuleOutputKwhReset = _IsxModularDistModuleOutputKwhReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 22),
    _IsxModularDistModuleOutputKwhReset_Type()
)
isxModularDistModuleOutputKwhReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputKwhReset.setStatus("mandatory")
_IsxModularDistModuleOutputKwhResetDate_Type = DisplayString
_IsxModularDistModuleOutputKwhResetDate_Object = MibTableColumn
isxModularDistModuleOutputKwhResetDate = _IsxModularDistModuleOutputKwhResetDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 2, 6, 1, 23),
    _IsxModularDistModuleOutputKwhResetDate_Type()
)
isxModularDistModuleOutputKwhResetDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistModuleOutputKwhResetDate.setStatus("mandatory")
_IsxModularDistSubFeeds_ObjectIdentity = ObjectIdentity
isxModularDistSubFeeds = _IsxModularDistSubFeeds_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3)
)
_IsxModularDistSubFeedInfoTableSize_Type = Integer32
_IsxModularDistSubFeedInfoTableSize_Object = MibScalar
isxModularDistSubFeedInfoTableSize = _IsxModularDistSubFeedInfoTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 1),
    _IsxModularDistSubFeedInfoTableSize_Type()
)
isxModularDistSubFeedInfoTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoTableSize.setStatus("mandatory")
_IsxModularDistSubFeedInfoTable_Object = MibTable
isxModularDistSubFeedInfoTable = _IsxModularDistSubFeedInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2)
)
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoTable.setStatus("mandatory")
_IsxModularDistSubFeedInfoEntry_Object = MibTableRow
isxModularDistSubFeedInfoEntry = _IsxModularDistSubFeedInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1)
)
isxModularDistSubFeedInfoEntry.setIndexNames(
    (0, "POWERNET-MIB", "isxModularDistSubFeedInfoSubIndex"),
)
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoEntry.setStatus("mandatory")
_IsxModularDistSubFeedInfoSubIndex_Type = Integer32
_IsxModularDistSubFeedInfoSubIndex_Object = MibTableColumn
isxModularDistSubFeedInfoSubIndex = _IsxModularDistSubFeedInfoSubIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 1),
    _IsxModularDistSubFeedInfoSubIndex_Type()
)
isxModularDistSubFeedInfoSubIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoSubIndex.setStatus("mandatory")
_IsxModularDistSubFeedInfoName_Type = DisplayString
_IsxModularDistSubFeedInfoName_Object = MibTableColumn
isxModularDistSubFeedInfoName = _IsxModularDistSubFeedInfoName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 2),
    _IsxModularDistSubFeedInfoName_Type()
)
isxModularDistSubFeedInfoName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoName.setStatus("mandatory")
_IsxModularDistSubFeedInfoLocation_Type = DisplayString
_IsxModularDistSubFeedInfoLocation_Object = MibTableColumn
isxModularDistSubFeedInfoLocation = _IsxModularDistSubFeedInfoLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 3),
    _IsxModularDistSubFeedInfoLocation_Type()
)
isxModularDistSubFeedInfoLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoLocation.setStatus("mandatory")
_IsxModularDistSubFeedInfoBreakerRating_Type = Integer32
_IsxModularDistSubFeedInfoBreakerRating_Object = MibTableColumn
isxModularDistSubFeedInfoBreakerRating = _IsxModularDistSubFeedInfoBreakerRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 4),
    _IsxModularDistSubFeedInfoBreakerRating_Type()
)
isxModularDistSubFeedInfoBreakerRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoBreakerRating.setStatus("mandatory")


class _IsxModularDistSubFeedInfoBreakerPosition_Type(Integer32):
    """Custom type isxModularDistSubFeedInfoBreakerPosition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("open", 1))
    )


_IsxModularDistSubFeedInfoBreakerPosition_Type.__name__ = "Integer32"
_IsxModularDistSubFeedInfoBreakerPosition_Object = MibTableColumn
isxModularDistSubFeedInfoBreakerPosition = _IsxModularDistSubFeedInfoBreakerPosition_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 5),
    _IsxModularDistSubFeedInfoBreakerPosition_Type()
)
isxModularDistSubFeedInfoBreakerPosition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoBreakerPosition.setStatus("mandatory")


class _IsxModularDistSubFeedInfoAlarmStatus_Type(Integer32):
    """Custom type isxModularDistSubFeedInfoAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("critical", 3),
          ("normal", 1),
          ("warning", 2))
    )


_IsxModularDistSubFeedInfoAlarmStatus_Type.__name__ = "Integer32"
_IsxModularDistSubFeedInfoAlarmStatus_Object = MibTableColumn
isxModularDistSubFeedInfoAlarmStatus = _IsxModularDistSubFeedInfoAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 6),
    _IsxModularDistSubFeedInfoAlarmStatus_Type()
)
isxModularDistSubFeedInfoAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoAlarmStatus.setStatus("mandatory")


class _IsxModularDistSubFeedInfoAlarmGeneration_Type(Integer32):
    """Custom type isxModularDistSubFeedInfoAlarmGeneration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSubFeedInfoAlarmGeneration_Type.__name__ = "Integer32"
_IsxModularDistSubFeedInfoAlarmGeneration_Object = MibTableColumn
isxModularDistSubFeedInfoAlarmGeneration = _IsxModularDistSubFeedInfoAlarmGeneration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 7),
    _IsxModularDistSubFeedInfoAlarmGeneration_Type()
)
isxModularDistSubFeedInfoAlarmGeneration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoAlarmGeneration.setStatus("mandatory")
_IsxModularDistSubFeedInfoThresholdMin_Type = Integer32
_IsxModularDistSubFeedInfoThresholdMin_Object = MibTableColumn
isxModularDistSubFeedInfoThresholdMin = _IsxModularDistSubFeedInfoThresholdMin_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 8),
    _IsxModularDistSubFeedInfoThresholdMin_Type()
)
isxModularDistSubFeedInfoThresholdMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoThresholdMin.setStatus("mandatory")
_IsxModularDistSubFeedInfoThresholdLow_Type = Integer32
_IsxModularDistSubFeedInfoThresholdLow_Object = MibTableColumn
isxModularDistSubFeedInfoThresholdLow = _IsxModularDistSubFeedInfoThresholdLow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 9),
    _IsxModularDistSubFeedInfoThresholdLow_Type()
)
isxModularDistSubFeedInfoThresholdLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoThresholdLow.setStatus("mandatory")
_IsxModularDistSubFeedInfoThresholdHigh_Type = Integer32
_IsxModularDistSubFeedInfoThresholdHigh_Object = MibTableColumn
isxModularDistSubFeedInfoThresholdHigh = _IsxModularDistSubFeedInfoThresholdHigh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 10),
    _IsxModularDistSubFeedInfoThresholdHigh_Type()
)
isxModularDistSubFeedInfoThresholdHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoThresholdHigh.setStatus("mandatory")
_IsxModularDistSubFeedInfoThresholdMax_Type = Integer32
_IsxModularDistSubFeedInfoThresholdMax_Object = MibTableColumn
isxModularDistSubFeedInfoThresholdMax = _IsxModularDistSubFeedInfoThresholdMax_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 11),
    _IsxModularDistSubFeedInfoThresholdMax_Type()
)
isxModularDistSubFeedInfoThresholdMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoThresholdMax.setStatus("mandatory")


class _IsxModularDistSubFeedInfoAlarmMinEnable_Type(Integer32):
    """Custom type isxModularDistSubFeedInfoAlarmMinEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSubFeedInfoAlarmMinEnable_Type.__name__ = "Integer32"
_IsxModularDistSubFeedInfoAlarmMinEnable_Object = MibTableColumn
isxModularDistSubFeedInfoAlarmMinEnable = _IsxModularDistSubFeedInfoAlarmMinEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 12),
    _IsxModularDistSubFeedInfoAlarmMinEnable_Type()
)
isxModularDistSubFeedInfoAlarmMinEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoAlarmMinEnable.setStatus("mandatory")


class _IsxModularDistSubFeedInfoAlarmLowEnable_Type(Integer32):
    """Custom type isxModularDistSubFeedInfoAlarmLowEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSubFeedInfoAlarmLowEnable_Type.__name__ = "Integer32"
_IsxModularDistSubFeedInfoAlarmLowEnable_Object = MibTableColumn
isxModularDistSubFeedInfoAlarmLowEnable = _IsxModularDistSubFeedInfoAlarmLowEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 13),
    _IsxModularDistSubFeedInfoAlarmLowEnable_Type()
)
isxModularDistSubFeedInfoAlarmLowEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoAlarmLowEnable.setStatus("mandatory")


class _IsxModularDistSubFeedInfoAlarmHighEnable_Type(Integer32):
    """Custom type isxModularDistSubFeedInfoAlarmHighEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSubFeedInfoAlarmHighEnable_Type.__name__ = "Integer32"
_IsxModularDistSubFeedInfoAlarmHighEnable_Object = MibTableColumn
isxModularDistSubFeedInfoAlarmHighEnable = _IsxModularDistSubFeedInfoAlarmHighEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 14),
    _IsxModularDistSubFeedInfoAlarmHighEnable_Type()
)
isxModularDistSubFeedInfoAlarmHighEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoAlarmHighEnable.setStatus("mandatory")


class _IsxModularDistSubFeedInfoAlarmMaxEnable_Type(Integer32):
    """Custom type isxModularDistSubFeedInfoAlarmMaxEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSubFeedInfoAlarmMaxEnable_Type.__name__ = "Integer32"
_IsxModularDistSubFeedInfoAlarmMaxEnable_Object = MibTableColumn
isxModularDistSubFeedInfoAlarmMaxEnable = _IsxModularDistSubFeedInfoAlarmMaxEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 15),
    _IsxModularDistSubFeedInfoAlarmMaxEnable_Type()
)
isxModularDistSubFeedInfoAlarmMaxEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoAlarmMaxEnable.setStatus("mandatory")


class _IsxModularDistSubFeedInfoBreakerAlarmEnable_Type(Integer32):
    """Custom type isxModularDistSubFeedInfoBreakerAlarmEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSubFeedInfoBreakerAlarmEnable_Type.__name__ = "Integer32"
_IsxModularDistSubFeedInfoBreakerAlarmEnable_Object = MibTableColumn
isxModularDistSubFeedInfoBreakerAlarmEnable = _IsxModularDistSubFeedInfoBreakerAlarmEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 16),
    _IsxModularDistSubFeedInfoBreakerAlarmEnable_Type()
)
isxModularDistSubFeedInfoBreakerAlarmEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoBreakerAlarmEnable.setStatus("mandatory")
_IsxModularDistSubFeedInfoTotalPower_Type = Integer32
_IsxModularDistSubFeedInfoTotalPower_Object = MibTableColumn
isxModularDistSubFeedInfoTotalPower = _IsxModularDistSubFeedInfoTotalPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 17),
    _IsxModularDistSubFeedInfoTotalPower_Type()
)
isxModularDistSubFeedInfoTotalPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoTotalPower.setStatus("mandatory")
_IsxModularDistSubFeedInfoKwhUsage_Type = Integer32
_IsxModularDistSubFeedInfoKwhUsage_Object = MibTableColumn
isxModularDistSubFeedInfoKwhUsage = _IsxModularDistSubFeedInfoKwhUsage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 18),
    _IsxModularDistSubFeedInfoKwhUsage_Type()
)
isxModularDistSubFeedInfoKwhUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoKwhUsage.setStatus("mandatory")


class _IsxModularDistSubFeedInfoKwhReset_Type(Integer32):
    """Custom type isxModularDistSubFeedInfoKwhReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_IsxModularDistSubFeedInfoKwhReset_Type.__name__ = "Integer32"
_IsxModularDistSubFeedInfoKwhReset_Object = MibTableColumn
isxModularDistSubFeedInfoKwhReset = _IsxModularDistSubFeedInfoKwhReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 19),
    _IsxModularDistSubFeedInfoKwhReset_Type()
)
isxModularDistSubFeedInfoKwhReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoKwhReset.setStatus("mandatory")
_IsxModularDistSubFeedInfoKwhResetDate_Type = DisplayString
_IsxModularDistSubFeedInfoKwhResetDate_Object = MibTableColumn
isxModularDistSubFeedInfoKwhResetDate = _IsxModularDistSubFeedInfoKwhResetDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 2, 1, 20),
    _IsxModularDistSubFeedInfoKwhResetDate_Type()
)
isxModularDistSubFeedInfoKwhResetDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedInfoKwhResetDate.setStatus("mandatory")
_IsxModularDistSubFeedLoadingTableSize_Type = Integer32
_IsxModularDistSubFeedLoadingTableSize_Object = MibScalar
isxModularDistSubFeedLoadingTableSize = _IsxModularDistSubFeedLoadingTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 3),
    _IsxModularDistSubFeedLoadingTableSize_Type()
)
isxModularDistSubFeedLoadingTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedLoadingTableSize.setStatus("mandatory")
_IsxModularDistSubFeedLoadingTable_Object = MibTable
isxModularDistSubFeedLoadingTable = _IsxModularDistSubFeedLoadingTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4)
)
if mibBuilder.loadTexts:
    isxModularDistSubFeedLoadingTable.setStatus("mandatory")
_IsxModularDistSubFeedLoadingEntry_Object = MibTableRow
isxModularDistSubFeedLoadingEntry = _IsxModularDistSubFeedLoadingEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1)
)
isxModularDistSubFeedLoadingEntry.setIndexNames(
    (0, "POWERNET-MIB", "isxModularDistSubFeedLoadingSubIndex"),
    (0, "POWERNET-MIB", "isxModularDistSubFeedLoadingPhaseIndex"),
)
if mibBuilder.loadTexts:
    isxModularDistSubFeedLoadingEntry.setStatus("mandatory")
_IsxModularDistSubFeedLoadingSubIndex_Type = Integer32
_IsxModularDistSubFeedLoadingSubIndex_Object = MibTableColumn
isxModularDistSubFeedLoadingSubIndex = _IsxModularDistSubFeedLoadingSubIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 1),
    _IsxModularDistSubFeedLoadingSubIndex_Type()
)
isxModularDistSubFeedLoadingSubIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedLoadingSubIndex.setStatus("mandatory")


class _IsxModularDistSubFeedLoadingPhaseIndex_Type(Integer32):
    """Custom type isxModularDistSubFeedLoadingPhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_IsxModularDistSubFeedLoadingPhaseIndex_Type.__name__ = "Integer32"
_IsxModularDistSubFeedLoadingPhaseIndex_Object = MibTableColumn
isxModularDistSubFeedLoadingPhaseIndex = _IsxModularDistSubFeedLoadingPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 2),
    _IsxModularDistSubFeedLoadingPhaseIndex_Type()
)
isxModularDistSubFeedLoadingPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedLoadingPhaseIndex.setStatus("mandatory")
_IsxModularDistSubFeedLoadingAlarmStatus_Type = Integer32
_IsxModularDistSubFeedLoadingAlarmStatus_Object = MibTableColumn
isxModularDistSubFeedLoadingAlarmStatus = _IsxModularDistSubFeedLoadingAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 3),
    _IsxModularDistSubFeedLoadingAlarmStatus_Type()
)
isxModularDistSubFeedLoadingAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedLoadingAlarmStatus.setStatus("mandatory")
_IsxModularDistSubFeedLoadingCurrent_Type = Integer32
_IsxModularDistSubFeedLoadingCurrent_Object = MibTableColumn
isxModularDistSubFeedLoadingCurrent = _IsxModularDistSubFeedLoadingCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 4),
    _IsxModularDistSubFeedLoadingCurrent_Type()
)
isxModularDistSubFeedLoadingCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedLoadingCurrent.setStatus("mandatory")
_IsxModularDistSubFeedLoadingPercent_Type = Integer32
_IsxModularDistSubFeedLoadingPercent_Object = MibTableColumn
isxModularDistSubFeedLoadingPercent = _IsxModularDistSubFeedLoadingPercent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 5),
    _IsxModularDistSubFeedLoadingPercent_Type()
)
isxModularDistSubFeedLoadingPercent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedLoadingPercent.setStatus("mandatory")
_IsxModularDistSubFeedLoadingPower_Type = Integer32
_IsxModularDistSubFeedLoadingPower_Object = MibTableColumn
isxModularDistSubFeedLoadingPower = _IsxModularDistSubFeedLoadingPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 3, 4, 1, 6),
    _IsxModularDistSubFeedLoadingPower_Type()
)
isxModularDistSubFeedLoadingPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSubFeedLoadingPower.setStatus("mandatory")
_IsxModularDistTotals_ObjectIdentity = ObjectIdentity
isxModularDistTotals = _IsxModularDistTotals_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4)
)
_IsxModularDistSysVoltage_ObjectIdentity = ObjectIdentity
isxModularDistSysVoltage = _IsxModularDistSysVoltage_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1)
)
_IsxModularDistSysOutputVoltageNominalLineToNeutral_Type = Integer32
_IsxModularDistSysOutputVoltageNominalLineToNeutral_Object = MibScalar
isxModularDistSysOutputVoltageNominalLineToNeutral = _IsxModularDistSysOutputVoltageNominalLineToNeutral_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 1),
    _IsxModularDistSysOutputVoltageNominalLineToNeutral_Type()
)
isxModularDistSysOutputVoltageNominalLineToNeutral.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysOutputVoltageNominalLineToNeutral.setStatus("mandatory")
_IsxModularDistSysOutputVoltageNominalLineToLine_Type = Integer32
_IsxModularDistSysOutputVoltageNominalLineToLine_Object = MibScalar
isxModularDistSysOutputVoltageNominalLineToLine = _IsxModularDistSysOutputVoltageNominalLineToLine_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 2),
    _IsxModularDistSysOutputVoltageNominalLineToLine_Type()
)
isxModularDistSysOutputVoltageNominalLineToLine.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysOutputVoltageNominalLineToLine.setStatus("mandatory")
_IsxModularDistSysOutputNominalFrequency_Type = Integer32
_IsxModularDistSysOutputNominalFrequency_Object = MibScalar
isxModularDistSysOutputNominalFrequency = _IsxModularDistSysOutputNominalFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 3),
    _IsxModularDistSysOutputNominalFrequency_Type()
)
isxModularDistSysOutputNominalFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysOutputNominalFrequency.setStatus("mandatory")
_IsxModularDistSysOutputFrequency_Type = Integer32
_IsxModularDistSysOutputFrequency_Object = MibScalar
isxModularDistSysOutputFrequency = _IsxModularDistSysOutputFrequency_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 4),
    _IsxModularDistSysOutputFrequency_Type()
)
isxModularDistSysOutputFrequency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysOutputFrequency.setStatus("mandatory")


class _IsxModularDistSysOutputVoltageMonitoring_Type(Integer32):
    """Custom type isxModularDistSysOutputVoltageMonitoring based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_IsxModularDistSysOutputVoltageMonitoring_Type.__name__ = "Integer32"
_IsxModularDistSysOutputVoltageMonitoring_Object = MibScalar
isxModularDistSysOutputVoltageMonitoring = _IsxModularDistSysOutputVoltageMonitoring_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 5),
    _IsxModularDistSysOutputVoltageMonitoring_Type()
)
isxModularDistSysOutputVoltageMonitoring.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysOutputVoltageMonitoring.setStatus("mandatory")
_IsxModularDistSysOutputVoltageThresholdMin_Type = Integer32
_IsxModularDistSysOutputVoltageThresholdMin_Object = MibScalar
isxModularDistSysOutputVoltageThresholdMin = _IsxModularDistSysOutputVoltageThresholdMin_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 6),
    _IsxModularDistSysOutputVoltageThresholdMin_Type()
)
isxModularDistSysOutputVoltageThresholdMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysOutputVoltageThresholdMin.setStatus("mandatory")
_IsxModularDistSysOutputVoltageThresholdLow_Type = Integer32
_IsxModularDistSysOutputVoltageThresholdLow_Object = MibScalar
isxModularDistSysOutputVoltageThresholdLow = _IsxModularDistSysOutputVoltageThresholdLow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 7),
    _IsxModularDistSysOutputVoltageThresholdLow_Type()
)
isxModularDistSysOutputVoltageThresholdLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysOutputVoltageThresholdLow.setStatus("mandatory")
_IsxModularDistSysOutputVoltageThresholdHigh_Type = Integer32
_IsxModularDistSysOutputVoltageThresholdHigh_Object = MibScalar
isxModularDistSysOutputVoltageThresholdHigh = _IsxModularDistSysOutputVoltageThresholdHigh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 8),
    _IsxModularDistSysOutputVoltageThresholdHigh_Type()
)
isxModularDistSysOutputVoltageThresholdHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysOutputVoltageThresholdHigh.setStatus("mandatory")
_IsxModularDistSysOutputVoltageThresholdMax_Type = Integer32
_IsxModularDistSysOutputVoltageThresholdMax_Object = MibScalar
isxModularDistSysOutputVoltageThresholdMax = _IsxModularDistSysOutputVoltageThresholdMax_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 9),
    _IsxModularDistSysOutputVoltageThresholdMax_Type()
)
isxModularDistSysOutputVoltageThresholdMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysOutputVoltageThresholdMax.setStatus("mandatory")


class _IsxModularDistSysOutputVoltageAlarmMinEnable_Type(Integer32):
    """Custom type isxModularDistSysOutputVoltageAlarmMinEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSysOutputVoltageAlarmMinEnable_Type.__name__ = "Integer32"
_IsxModularDistSysOutputVoltageAlarmMinEnable_Object = MibScalar
isxModularDistSysOutputVoltageAlarmMinEnable = _IsxModularDistSysOutputVoltageAlarmMinEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 10),
    _IsxModularDistSysOutputVoltageAlarmMinEnable_Type()
)
isxModularDistSysOutputVoltageAlarmMinEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysOutputVoltageAlarmMinEnable.setStatus("mandatory")


class _IsxModularDistSysOutputVoltageAlarmLowEnable_Type(Integer32):
    """Custom type isxModularDistSysOutputVoltageAlarmLowEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSysOutputVoltageAlarmLowEnable_Type.__name__ = "Integer32"
_IsxModularDistSysOutputVoltageAlarmLowEnable_Object = MibScalar
isxModularDistSysOutputVoltageAlarmLowEnable = _IsxModularDistSysOutputVoltageAlarmLowEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 11),
    _IsxModularDistSysOutputVoltageAlarmLowEnable_Type()
)
isxModularDistSysOutputVoltageAlarmLowEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysOutputVoltageAlarmLowEnable.setStatus("mandatory")


class _IsxModularDistSysOutputVoltageAlarmHighEnable_Type(Integer32):
    """Custom type isxModularDistSysOutputVoltageAlarmHighEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSysOutputVoltageAlarmHighEnable_Type.__name__ = "Integer32"
_IsxModularDistSysOutputVoltageAlarmHighEnable_Object = MibScalar
isxModularDistSysOutputVoltageAlarmHighEnable = _IsxModularDistSysOutputVoltageAlarmHighEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 12),
    _IsxModularDistSysOutputVoltageAlarmHighEnable_Type()
)
isxModularDistSysOutputVoltageAlarmHighEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysOutputVoltageAlarmHighEnable.setStatus("mandatory")


class _IsxModularDistSysOutputVoltageAlarmMaxEnable_Type(Integer32):
    """Custom type isxModularDistSysOutputVoltageAlarmMaxEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSysOutputVoltageAlarmMaxEnable_Type.__name__ = "Integer32"
_IsxModularDistSysOutputVoltageAlarmMaxEnable_Object = MibScalar
isxModularDistSysOutputVoltageAlarmMaxEnable = _IsxModularDistSysOutputVoltageAlarmMaxEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 13),
    _IsxModularDistSysOutputVoltageAlarmMaxEnable_Type()
)
isxModularDistSysOutputVoltageAlarmMaxEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysOutputVoltageAlarmMaxEnable.setStatus("mandatory")


class _IsxModularDistSysOutputVoltageFrequencyTolerance_Type(Integer32):
    """Custom type isxModularDistSysOutputVoltageFrequencyTolerance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("freqToleranceFive", 9),
          ("freqToleranceFour", 8),
          ("freqToleranceNine", 10),
          ("freqToleranceNotAvailable", 11),
          ("freqToleranceOff", 1),
          ("freqToleranceOne", 4),
          ("freqToleranceOnePointFive", 5),
          ("freqTolerancePointFive", 3),
          ("freqTolerancePointTwo", 2),
          ("freqToleranceThree", 7),
          ("freqToleranceTwo", 6))
    )


_IsxModularDistSysOutputVoltageFrequencyTolerance_Type.__name__ = "Integer32"
_IsxModularDistSysOutputVoltageFrequencyTolerance_Object = MibScalar
isxModularDistSysOutputVoltageFrequencyTolerance = _IsxModularDistSysOutputVoltageFrequencyTolerance_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 14),
    _IsxModularDistSysOutputVoltageFrequencyTolerance_Type()
)
isxModularDistSysOutputVoltageFrequencyTolerance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysOutputVoltageFrequencyTolerance.setStatus("mandatory")
_IsxModularDistSysVoltageTable_Object = MibTable
isxModularDistSysVoltageTable = _IsxModularDistSysVoltageTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15)
)
if mibBuilder.loadTexts:
    isxModularDistSysVoltageTable.setStatus("mandatory")
_IsxModularDistSysVoltageEntry_Object = MibTableRow
isxModularDistSysVoltageEntry = _IsxModularDistSysVoltageEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1)
)
isxModularDistSysVoltageEntry.setIndexNames(
    (0, "POWERNET-MIB", "isxModularDistSysVoltagePhaseIndex"),
)
if mibBuilder.loadTexts:
    isxModularDistSysVoltageEntry.setStatus("mandatory")


class _IsxModularDistSysVoltagePhaseIndex_Type(Integer32):
    """Custom type isxModularDistSysVoltagePhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_IsxModularDistSysVoltagePhaseIndex_Type.__name__ = "Integer32"
_IsxModularDistSysVoltagePhaseIndex_Object = MibTableColumn
isxModularDistSysVoltagePhaseIndex = _IsxModularDistSysVoltagePhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 1),
    _IsxModularDistSysVoltagePhaseIndex_Type()
)
isxModularDistSysVoltagePhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysVoltagePhaseIndex.setStatus("mandatory")
_IsxModularDistSysVoltageAlarmStatus_Type = Integer32
_IsxModularDistSysVoltageAlarmStatus_Object = MibTableColumn
isxModularDistSysVoltageAlarmStatus = _IsxModularDistSysVoltageAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 2),
    _IsxModularDistSysVoltageAlarmStatus_Type()
)
isxModularDistSysVoltageAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysVoltageAlarmStatus.setStatus("mandatory")
_IsxModularDistSysVoltageLtoN_Type = Integer32
_IsxModularDistSysVoltageLtoN_Object = MibTableColumn
isxModularDistSysVoltageLtoN = _IsxModularDistSysVoltageLtoN_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 3),
    _IsxModularDistSysVoltageLtoN_Type()
)
isxModularDistSysVoltageLtoN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysVoltageLtoN.setStatus("mandatory")
_IsxModularDistSysVoltageLtoL_Type = Integer32
_IsxModularDistSysVoltageLtoL_Object = MibTableColumn
isxModularDistSysVoltageLtoL = _IsxModularDistSysVoltageLtoL_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 1, 15, 1, 4),
    _IsxModularDistSysVoltageLtoL_Type()
)
isxModularDistSysVoltageLtoL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysVoltageLtoL.setStatus("mandatory")
_IsxModularDistSysCurrent_ObjectIdentity = ObjectIdentity
isxModularDistSysCurrent = _IsxModularDistSysCurrent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2)
)
_IsxModularDistSysCurrentRating_Type = Integer32
_IsxModularDistSysCurrentRating_Object = MibScalar
isxModularDistSysCurrentRating = _IsxModularDistSysCurrentRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 1),
    _IsxModularDistSysCurrentRating_Type()
)
isxModularDistSysCurrentRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentRating.setStatus("mandatory")


class _IsxModularDistSysCurrentMonitoring_Type(Integer32):
    """Custom type isxModularDistSysCurrentMonitoring based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_IsxModularDistSysCurrentMonitoring_Type.__name__ = "Integer32"
_IsxModularDistSysCurrentMonitoring_Object = MibScalar
isxModularDistSysCurrentMonitoring = _IsxModularDistSysCurrentMonitoring_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 2),
    _IsxModularDistSysCurrentMonitoring_Type()
)
isxModularDistSysCurrentMonitoring.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentMonitoring.setStatus("mandatory")
_IsxModularDistSysCurrentThresholdMin_Type = Integer32
_IsxModularDistSysCurrentThresholdMin_Object = MibScalar
isxModularDistSysCurrentThresholdMin = _IsxModularDistSysCurrentThresholdMin_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 3),
    _IsxModularDistSysCurrentThresholdMin_Type()
)
isxModularDistSysCurrentThresholdMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentThresholdMin.setStatus("mandatory")
_IsxModularDistSysCurrentThresholdLow_Type = Integer32
_IsxModularDistSysCurrentThresholdLow_Object = MibScalar
isxModularDistSysCurrentThresholdLow = _IsxModularDistSysCurrentThresholdLow_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 4),
    _IsxModularDistSysCurrentThresholdLow_Type()
)
isxModularDistSysCurrentThresholdLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentThresholdLow.setStatus("mandatory")
_IsxModularDistSysCurrentThresholdHigh_Type = Integer32
_IsxModularDistSysCurrentThresholdHigh_Object = MibScalar
isxModularDistSysCurrentThresholdHigh = _IsxModularDistSysCurrentThresholdHigh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 5),
    _IsxModularDistSysCurrentThresholdHigh_Type()
)
isxModularDistSysCurrentThresholdHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentThresholdHigh.setStatus("mandatory")
_IsxModularDistSysCurrentThresholdMax_Type = Integer32
_IsxModularDistSysCurrentThresholdMax_Object = MibScalar
isxModularDistSysCurrentThresholdMax = _IsxModularDistSysCurrentThresholdMax_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 6),
    _IsxModularDistSysCurrentThresholdMax_Type()
)
isxModularDistSysCurrentThresholdMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentThresholdMax.setStatus("mandatory")


class _IsxModularDistSysCurrentAlarmMinEnable_Type(Integer32):
    """Custom type isxModularDistSysCurrentAlarmMinEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSysCurrentAlarmMinEnable_Type.__name__ = "Integer32"
_IsxModularDistSysCurrentAlarmMinEnable_Object = MibScalar
isxModularDistSysCurrentAlarmMinEnable = _IsxModularDistSysCurrentAlarmMinEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 7),
    _IsxModularDistSysCurrentAlarmMinEnable_Type()
)
isxModularDistSysCurrentAlarmMinEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentAlarmMinEnable.setStatus("mandatory")


class _IsxModularDistSysCurrentAlarmLowEnable_Type(Integer32):
    """Custom type isxModularDistSysCurrentAlarmLowEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSysCurrentAlarmLowEnable_Type.__name__ = "Integer32"
_IsxModularDistSysCurrentAlarmLowEnable_Object = MibScalar
isxModularDistSysCurrentAlarmLowEnable = _IsxModularDistSysCurrentAlarmLowEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 8),
    _IsxModularDistSysCurrentAlarmLowEnable_Type()
)
isxModularDistSysCurrentAlarmLowEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentAlarmLowEnable.setStatus("mandatory")


class _IsxModularDistSysCurrentAlarmHighEnable_Type(Integer32):
    """Custom type isxModularDistSysCurrentAlarmHighEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSysCurrentAlarmHighEnable_Type.__name__ = "Integer32"
_IsxModularDistSysCurrentAlarmHighEnable_Object = MibScalar
isxModularDistSysCurrentAlarmHighEnable = _IsxModularDistSysCurrentAlarmHighEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 9),
    _IsxModularDistSysCurrentAlarmHighEnable_Type()
)
isxModularDistSysCurrentAlarmHighEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentAlarmHighEnable.setStatus("mandatory")


class _IsxModularDistSysCurrentAlarmMaxEnable_Type(Integer32):
    """Custom type isxModularDistSysCurrentAlarmMaxEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_IsxModularDistSysCurrentAlarmMaxEnable_Type.__name__ = "Integer32"
_IsxModularDistSysCurrentAlarmMaxEnable_Object = MibScalar
isxModularDistSysCurrentAlarmMaxEnable = _IsxModularDistSysCurrentAlarmMaxEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 10),
    _IsxModularDistSysCurrentAlarmMaxEnable_Type()
)
isxModularDistSysCurrentAlarmMaxEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentAlarmMaxEnable.setStatus("mandatory")
_IsxModularDistSysCurrentTable_Object = MibTable
isxModularDistSysCurrentTable = _IsxModularDistSysCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11)
)
if mibBuilder.loadTexts:
    isxModularDistSysCurrentTable.setStatus("mandatory")
_IsxModularDistSysCurrentEntry_Object = MibTableRow
isxModularDistSysCurrentEntry = _IsxModularDistSysCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1)
)
isxModularDistSysCurrentEntry.setIndexNames(
    (0, "POWERNET-MIB", "isxModularDistSysCurrentPhaseIndex"),
)
if mibBuilder.loadTexts:
    isxModularDistSysCurrentEntry.setStatus("mandatory")


class _IsxModularDistSysCurrentPhaseIndex_Type(Integer32):
    """Custom type isxModularDistSysCurrentPhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_IsxModularDistSysCurrentPhaseIndex_Type.__name__ = "Integer32"
_IsxModularDistSysCurrentPhaseIndex_Object = MibTableColumn
isxModularDistSysCurrentPhaseIndex = _IsxModularDistSysCurrentPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 1),
    _IsxModularDistSysCurrentPhaseIndex_Type()
)
isxModularDistSysCurrentPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentPhaseIndex.setStatus("mandatory")
_IsxModularDistSysCurrentAlarmStatus_Type = Integer32
_IsxModularDistSysCurrentAlarmStatus_Object = MibTableColumn
isxModularDistSysCurrentAlarmStatus = _IsxModularDistSysCurrentAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 2),
    _IsxModularDistSysCurrentAlarmStatus_Type()
)
isxModularDistSysCurrentAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentAlarmStatus.setStatus("mandatory")
_IsxModularDistSysCurrentAmps_Type = Integer32
_IsxModularDistSysCurrentAmps_Object = MibTableColumn
isxModularDistSysCurrentAmps = _IsxModularDistSysCurrentAmps_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 3),
    _IsxModularDistSysCurrentAmps_Type()
)
isxModularDistSysCurrentAmps.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentAmps.setStatus("mandatory")
_IsxModularDistSysCurrentPercent_Type = Integer32
_IsxModularDistSysCurrentPercent_Object = MibTableColumn
isxModularDistSysCurrentPercent = _IsxModularDistSysCurrentPercent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 2, 11, 1, 4),
    _IsxModularDistSysCurrentPercent_Type()
)
isxModularDistSysCurrentPercent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysCurrentPercent.setStatus("mandatory")
_IsxModularDistSysPower_ObjectIdentity = ObjectIdentity
isxModularDistSysPower = _IsxModularDistSysPower_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3)
)
_IsxModularDistSysPowerTotal_Type = Integer32
_IsxModularDistSysPowerTotal_Object = MibScalar
isxModularDistSysPowerTotal = _IsxModularDistSysPowerTotal_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 1),
    _IsxModularDistSysPowerTotal_Type()
)
isxModularDistSysPowerTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysPowerTotal.setStatus("mandatory")
_IsxModularDistSysPowerKwhUsage_Type = Integer32
_IsxModularDistSysPowerKwhUsage_Object = MibScalar
isxModularDistSysPowerKwhUsage = _IsxModularDistSysPowerKwhUsage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 2),
    _IsxModularDistSysPowerKwhUsage_Type()
)
isxModularDistSysPowerKwhUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysPowerKwhUsage.setStatus("mandatory")


class _IsxModularDistSysPowerKwhReset_Type(Integer32):
    """Custom type isxModularDistSysPowerKwhReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_IsxModularDistSysPowerKwhReset_Type.__name__ = "Integer32"
_IsxModularDistSysPowerKwhReset_Object = MibScalar
isxModularDistSysPowerKwhReset = _IsxModularDistSysPowerKwhReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 3),
    _IsxModularDistSysPowerKwhReset_Type()
)
isxModularDistSysPowerKwhReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    isxModularDistSysPowerKwhReset.setStatus("mandatory")
_IsxModularDistSysPowerKwhResetDate_Type = DisplayString
_IsxModularDistSysPowerKwhResetDate_Object = MibScalar
isxModularDistSysPowerKwhResetDate = _IsxModularDistSysPowerKwhResetDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 4),
    _IsxModularDistSysPowerKwhResetDate_Type()
)
isxModularDistSysPowerKwhResetDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysPowerKwhResetDate.setStatus("mandatory")
_IsxModularDistSysPowerTable_Object = MibTable
isxModularDistSysPowerTable = _IsxModularDistSysPowerTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5)
)
if mibBuilder.loadTexts:
    isxModularDistSysPowerTable.setStatus("mandatory")
_IsxModularDistSysPowerEntry_Object = MibTableRow
isxModularDistSysPowerEntry = _IsxModularDistSysPowerEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1)
)
isxModularDistSysPowerEntry.setIndexNames(
    (0, "POWERNET-MIB", "isxModularDistSysPowerPhaseIndex"),
)
if mibBuilder.loadTexts:
    isxModularDistSysPowerEntry.setStatus("mandatory")


class _IsxModularDistSysPowerPhaseIndex_Type(Integer32):
    """Custom type isxModularDistSysPowerPhaseIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("phase1", 1),
          ("phase2", 2),
          ("phase3", 3))
    )


_IsxModularDistSysPowerPhaseIndex_Type.__name__ = "Integer32"
_IsxModularDistSysPowerPhaseIndex_Object = MibTableColumn
isxModularDistSysPowerPhaseIndex = _IsxModularDistSysPowerPhaseIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1, 1),
    _IsxModularDistSysPowerPhaseIndex_Type()
)
isxModularDistSysPowerPhaseIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysPowerPhaseIndex.setStatus("mandatory")
_IsxModularDistSysPowerKw_Type = Integer32
_IsxModularDistSysPowerKw_Object = MibTableColumn
isxModularDistSysPowerKw = _IsxModularDistSysPowerKw_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1, 2),
    _IsxModularDistSysPowerKw_Type()
)
isxModularDistSysPowerKw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysPowerKw.setStatus("mandatory")
_IsxModularDistSysPowerKwhPhaseUsage_Type = Integer32
_IsxModularDistSysPowerKwhPhaseUsage_Object = MibTableColumn
isxModularDistSysPowerKwhPhaseUsage = _IsxModularDistSysPowerKwhPhaseUsage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 22, 4, 3, 5, 1, 3),
    _IsxModularDistSysPowerKwhPhaseUsage_Type()
)
isxModularDistSysPowerKwhPhaseUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularDistSysPowerKwhPhaseUsage.setStatus("mandatory")
_IsxModularPdu_ObjectIdentity = ObjectIdentity
isxModularPdu = _IsxModularPdu_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23)
)
_IsxModularPduIdent_ObjectIdentity = ObjectIdentity
isxModularPduIdent = _IsxModularPduIdent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1)
)
_IsxModularPduIdentModelNumber_Type = DisplayString
_IsxModularPduIdentModelNumber_Object = MibScalar
isxModularPduIdentModelNumber = _IsxModularPduIdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 1),
    _IsxModularPduIdentModelNumber_Type()
)
isxModularPduIdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduIdentModelNumber.setStatus("mandatory")
_IsxModularPduIdentSerialNumber_Type = DisplayString
_IsxModularPduIdentSerialNumber_Object = MibScalar
isxModularPduIdentSerialNumber = _IsxModularPduIdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 2),
    _IsxModularPduIdentSerialNumber_Type()
)
isxModularPduIdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduIdentSerialNumber.setStatus("mandatory")
_IsxModularPduIdentDateOfManufacture_Type = DisplayString
_IsxModularPduIdentDateOfManufacture_Object = MibScalar
isxModularPduIdentDateOfManufacture = _IsxModularPduIdentDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 3),
    _IsxModularPduIdentDateOfManufacture_Type()
)
isxModularPduIdentDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduIdentDateOfManufacture.setStatus("mandatory")
_IsxModularPduIdentMonitorCardSerialNumber_Type = DisplayString
_IsxModularPduIdentMonitorCardSerialNumber_Object = MibScalar
isxModularPduIdentMonitorCardSerialNumber = _IsxModularPduIdentMonitorCardSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 4),
    _IsxModularPduIdentMonitorCardSerialNumber_Type()
)
isxModularPduIdentMonitorCardSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduIdentMonitorCardSerialNumber.setStatus("mandatory")
_IsxModularPduIdentMonitorCardHardwareRev_Type = DisplayString
_IsxModularPduIdentMonitorCardHardwareRev_Object = MibScalar
isxModularPduIdentMonitorCardHardwareRev = _IsxModularPduIdentMonitorCardHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 5),
    _IsxModularPduIdentMonitorCardHardwareRev_Type()
)
isxModularPduIdentMonitorCardHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduIdentMonitorCardHardwareRev.setStatus("mandatory")
_IsxModularPduIdentMonitorCardFirmwareAppRev_Type = DisplayString
_IsxModularPduIdentMonitorCardFirmwareAppRev_Object = MibScalar
isxModularPduIdentMonitorCardFirmwareAppRev = _IsxModularPduIdentMonitorCardFirmwareAppRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 6),
    _IsxModularPduIdentMonitorCardFirmwareAppRev_Type()
)
isxModularPduIdentMonitorCardFirmwareAppRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduIdentMonitorCardFirmwareAppRev.setStatus("mandatory")
_IsxModularPduIdentMonitorCardFirmwareAppOSRev_Type = DisplayString
_IsxModularPduIdentMonitorCardFirmwareAppOSRev_Object = MibScalar
isxModularPduIdentMonitorCardFirmwareAppOSRev = _IsxModularPduIdentMonitorCardFirmwareAppOSRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 1, 7),
    _IsxModularPduIdentMonitorCardFirmwareAppOSRev_Type()
)
isxModularPduIdentMonitorCardFirmwareAppOSRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduIdentMonitorCardFirmwareAppOSRev.setStatus("mandatory")
_IsxModularPduDevice_ObjectIdentity = ObjectIdentity
isxModularPduDevice = _IsxModularPduDevice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2)
)


class _IsxModularPduDeviceTransformerPresent_Type(Integer32):
    """Custom type isxModularPduDeviceTransformerPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("autoXfmrPresent", 3),
          ("isoXfmrPresent", 2),
          ("notPresent", 1))
    )


_IsxModularPduDeviceTransformerPresent_Type.__name__ = "Integer32"
_IsxModularPduDeviceTransformerPresent_Object = MibScalar
isxModularPduDeviceTransformerPresent = _IsxModularPduDeviceTransformerPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 1),
    _IsxModularPduDeviceTransformerPresent_Type()
)
isxModularPduDeviceTransformerPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduDeviceTransformerPresent.setStatus("mandatory")


class _IsxModularPduDeviceServiceType_Type(Integer32):
    """Custom type isxModularPduDeviceServiceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fourWire", 2),
          ("threeWire", 1))
    )


_IsxModularPduDeviceServiceType_Type.__name__ = "Integer32"
_IsxModularPduDeviceServiceType_Object = MibScalar
isxModularPduDeviceServiceType = _IsxModularPduDeviceServiceType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 2),
    _IsxModularPduDeviceServiceType_Type()
)
isxModularPduDeviceServiceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduDeviceServiceType.setStatus("mandatory")


class _IsxModularPduDeviceFansPresent_Type(Integer32):
    """Custom type isxModularPduDeviceFansPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notPresent", 1),
          ("present", 2))
    )


_IsxModularPduDeviceFansPresent_Type.__name__ = "Integer32"
_IsxModularPduDeviceFansPresent_Object = MibScalar
isxModularPduDeviceFansPresent = _IsxModularPduDeviceFansPresent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 3),
    _IsxModularPduDeviceFansPresent_Type()
)
isxModularPduDeviceFansPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduDeviceFansPresent.setStatus("mandatory")
_IsxModularPduDeviceNominalMainInputVoltage_Type = Integer32
_IsxModularPduDeviceNominalMainInputVoltage_Object = MibScalar
isxModularPduDeviceNominalMainInputVoltage = _IsxModularPduDeviceNominalMainInputVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 2, 4),
    _IsxModularPduDeviceNominalMainInputVoltage_Type()
)
isxModularPduDeviceNominalMainInputVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduDeviceNominalMainInputVoltage.setStatus("mandatory")
_IsxModularPduStatus_ObjectIdentity = ObjectIdentity
isxModularPduStatus = _IsxModularPduStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3)
)


class _IsxModularPduAlarmStatus_Type(Integer32):
    """Custom type isxModularPduAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("critical", 3),
          ("normal", 1),
          ("warning", 2))
    )


_IsxModularPduAlarmStatus_Type.__name__ = "Integer32"
_IsxModularPduAlarmStatus_Object = MibScalar
isxModularPduAlarmStatus = _IsxModularPduAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3, 1),
    _IsxModularPduAlarmStatus_Type()
)
isxModularPduAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduAlarmStatus.setStatus("mandatory")


class _IsxModularPduTransformerTempStatus_Type(Integer32):
    """Custom type isxModularPduTransformerTempStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noTransformerPresent", 3),
          ("normal", 1),
          ("overtemp", 2),
          ("unknown", 4))
    )


_IsxModularPduTransformerTempStatus_Type.__name__ = "Integer32"
_IsxModularPduTransformerTempStatus_Object = MibScalar
isxModularPduTransformerTempStatus = _IsxModularPduTransformerTempStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3, 2),
    _IsxModularPduTransformerTempStatus_Type()
)
isxModularPduTransformerTempStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduTransformerTempStatus.setStatus("mandatory")


class _IsxModularPduFanStatus_Type(Integer32):
    """Custom type isxModularPduFanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("noCoolingFansPresent", 3),
          ("normal", 1),
          ("unknown", 4))
    )


_IsxModularPduFanStatus_Type.__name__ = "Integer32"
_IsxModularPduFanStatus_Object = MibScalar
isxModularPduFanStatus = _IsxModularPduFanStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 23, 3, 3),
    _IsxModularPduFanStatus_Type()
)
isxModularPduFanStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    isxModularPduFanStatus.setStatus("mandatory")
_UniversalInputOutput_ObjectIdentity = ObjectIdentity
universalInputOutput = _UniversalInputOutput_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25)
)
_UioSensor_ObjectIdentity = ObjectIdentity
uioSensor = _UioSensor_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1)
)
_UioSensorStatusTableSize_Type = Integer32
_UioSensorStatusTableSize_Object = MibScalar
uioSensorStatusTableSize = _UioSensorStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 1),
    _UioSensorStatusTableSize_Type()
)
uioSensorStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioSensorStatusTableSize.setStatus("mandatory")
_UioSensorStatusTable_Object = MibTable
uioSensorStatusTable = _UioSensorStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2)
)
if mibBuilder.loadTexts:
    uioSensorStatusTable.setStatus("mandatory")
_UioSensorStatusEntry_Object = MibTableRow
uioSensorStatusEntry = _UioSensorStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1)
)
uioSensorStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "uioSensorStatusPortID"),
    (0, "POWERNET-MIB", "uioSensorStatusSensorID"),
)
if mibBuilder.loadTexts:
    uioSensorStatusEntry.setStatus("mandatory")
_UioSensorStatusPortID_Type = Integer32
_UioSensorStatusPortID_Object = MibTableColumn
uioSensorStatusPortID = _UioSensorStatusPortID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 1),
    _UioSensorStatusPortID_Type()
)
uioSensorStatusPortID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioSensorStatusPortID.setStatus("mandatory")
_UioSensorStatusSensorID_Type = Integer32
_UioSensorStatusSensorID_Object = MibTableColumn
uioSensorStatusSensorID = _UioSensorStatusSensorID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 2),
    _UioSensorStatusSensorID_Type()
)
uioSensorStatusSensorID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioSensorStatusSensorID.setStatus("mandatory")
_UioSensorStatusSensorName_Type = DisplayString
_UioSensorStatusSensorName_Object = MibTableColumn
uioSensorStatusSensorName = _UioSensorStatusSensorName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 3),
    _UioSensorStatusSensorName_Type()
)
uioSensorStatusSensorName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioSensorStatusSensorName.setStatus("mandatory")
_UioSensorStatusSensorLocation_Type = DisplayString
_UioSensorStatusSensorLocation_Object = MibTableColumn
uioSensorStatusSensorLocation = _UioSensorStatusSensorLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 4),
    _UioSensorStatusSensorLocation_Type()
)
uioSensorStatusSensorLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioSensorStatusSensorLocation.setStatus("mandatory")
_UioSensorStatusTemperatureDegF_Type = Integer32
_UioSensorStatusTemperatureDegF_Object = MibTableColumn
uioSensorStatusTemperatureDegF = _UioSensorStatusTemperatureDegF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 5),
    _UioSensorStatusTemperatureDegF_Type()
)
uioSensorStatusTemperatureDegF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioSensorStatusTemperatureDegF.setStatus("mandatory")
_UioSensorStatusTemperatureDegC_Type = Integer32
_UioSensorStatusTemperatureDegC_Object = MibTableColumn
uioSensorStatusTemperatureDegC = _UioSensorStatusTemperatureDegC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 6),
    _UioSensorStatusTemperatureDegC_Type()
)
uioSensorStatusTemperatureDegC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioSensorStatusTemperatureDegC.setStatus("mandatory")
_UioSensorStatusHumidity_Type = Integer32
_UioSensorStatusHumidity_Object = MibTableColumn
uioSensorStatusHumidity = _UioSensorStatusHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 7),
    _UioSensorStatusHumidity_Type()
)
uioSensorStatusHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioSensorStatusHumidity.setStatus("mandatory")
_UioSensorStatusViolationStatus_Type = Integer32
_UioSensorStatusViolationStatus_Object = MibTableColumn
uioSensorStatusViolationStatus = _UioSensorStatusViolationStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 8),
    _UioSensorStatusViolationStatus_Type()
)
uioSensorStatusViolationStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioSensorStatusViolationStatus.setStatus("mandatory")


class _UioSensorStatusAlarmStatus_Type(Integer32):
    """Custom type uioSensorStatusAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("sensorStatusNotApplicable", 4),
          ("uioCritical", 3),
          ("uioNormal", 1),
          ("uioWarning", 2))
    )


_UioSensorStatusAlarmStatus_Type.__name__ = "Integer32"
_UioSensorStatusAlarmStatus_Object = MibTableColumn
uioSensorStatusAlarmStatus = _UioSensorStatusAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 9),
    _UioSensorStatusAlarmStatus_Type()
)
uioSensorStatusAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioSensorStatusAlarmStatus.setStatus("mandatory")


class _UioSensorStatusCommStatus_Type(Integer32):
    """Custom type uioSensorStatusCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("commsLost", 3),
          ("commsOK", 2),
          ("notInstalled", 1))
    )


_UioSensorStatusCommStatus_Type.__name__ = "Integer32"
_UioSensorStatusCommStatus_Object = MibTableColumn
uioSensorStatusCommStatus = _UioSensorStatusCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 1, 2, 1, 10),
    _UioSensorStatusCommStatus_Type()
)
uioSensorStatusCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioSensorStatusCommStatus.setStatus("mandatory")
_UioInputContact_ObjectIdentity = ObjectIdentity
uioInputContact = _UioInputContact_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2)
)
_UioInputContactStatusTableSize_Type = Integer32
_UioInputContactStatusTableSize_Object = MibScalar
uioInputContactStatusTableSize = _UioInputContactStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 1),
    _UioInputContactStatusTableSize_Type()
)
uioInputContactStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioInputContactStatusTableSize.setStatus("mandatory")
_UioInputContactStatusTable_Object = MibTable
uioInputContactStatusTable = _UioInputContactStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2)
)
if mibBuilder.loadTexts:
    uioInputContactStatusTable.setStatus("mandatory")
_UioInputContactStatusEntry_Object = MibTableRow
uioInputContactStatusEntry = _UioInputContactStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1)
)
uioInputContactStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "uioInputContactStatusPortID"),
    (0, "POWERNET-MIB", "uioInputContactStatusContactID"),
)
if mibBuilder.loadTexts:
    uioInputContactStatusEntry.setStatus("mandatory")
_UioInputContactStatusPortID_Type = Integer32
_UioInputContactStatusPortID_Object = MibTableColumn
uioInputContactStatusPortID = _UioInputContactStatusPortID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 1),
    _UioInputContactStatusPortID_Type()
)
uioInputContactStatusPortID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioInputContactStatusPortID.setStatus("mandatory")
_UioInputContactStatusContactID_Type = Integer32
_UioInputContactStatusContactID_Object = MibTableColumn
uioInputContactStatusContactID = _UioInputContactStatusContactID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 2),
    _UioInputContactStatusContactID_Type()
)
uioInputContactStatusContactID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioInputContactStatusContactID.setStatus("mandatory")
_UioInputContactStatusContactName_Type = DisplayString
_UioInputContactStatusContactName_Object = MibTableColumn
uioInputContactStatusContactName = _UioInputContactStatusContactName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 3),
    _UioInputContactStatusContactName_Type()
)
uioInputContactStatusContactName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioInputContactStatusContactName.setStatus("mandatory")
_UioInputContactStatusContactLocation_Type = DisplayString
_UioInputContactStatusContactLocation_Object = MibTableColumn
uioInputContactStatusContactLocation = _UioInputContactStatusContactLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 4),
    _UioInputContactStatusContactLocation_Type()
)
uioInputContactStatusContactLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioInputContactStatusContactLocation.setStatus("mandatory")


class _UioInputContactStatusCurrentState_Type(Integer32):
    """Custom type uioInputContactStatusCurrentState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("inputStateNotApplicable", 4),
          ("uioInputClosed", 1),
          ("uioInputDisabled", 3),
          ("uioInputOpen", 2))
    )


_UioInputContactStatusCurrentState_Type.__name__ = "Integer32"
_UioInputContactStatusCurrentState_Object = MibTableColumn
uioInputContactStatusCurrentState = _UioInputContactStatusCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 5),
    _UioInputContactStatusCurrentState_Type()
)
uioInputContactStatusCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioInputContactStatusCurrentState.setStatus("mandatory")


class _UioInputContactStatusAlarmStatus_Type(Integer32):
    """Custom type uioInputContactStatusAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("inputStatusNotApplicable", 4),
          ("uioCritical", 3),
          ("uioNormal", 1),
          ("uioWarning", 2))
    )


_UioInputContactStatusAlarmStatus_Type.__name__ = "Integer32"
_UioInputContactStatusAlarmStatus_Object = MibTableColumn
uioInputContactStatusAlarmStatus = _UioInputContactStatusAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 6),
    _UioInputContactStatusAlarmStatus_Type()
)
uioInputContactStatusAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioInputContactStatusAlarmStatus.setStatus("mandatory")


class _UioInputContactStatusCommStatus_Type(Integer32):
    """Custom type uioInputContactStatusCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("commsLost", 3),
          ("commsOK", 2),
          ("notInstalled", 1))
    )


_UioInputContactStatusCommStatus_Type.__name__ = "Integer32"
_UioInputContactStatusCommStatus_Object = MibTableColumn
uioInputContactStatusCommStatus = _UioInputContactStatusCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 2, 2, 1, 7),
    _UioInputContactStatusCommStatus_Type()
)
uioInputContactStatusCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioInputContactStatusCommStatus.setStatus("mandatory")
_UioOutputRelay_ObjectIdentity = ObjectIdentity
uioOutputRelay = _UioOutputRelay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3)
)
_UioOutputRelayStatusTableSize_Type = Integer32
_UioOutputRelayStatusTableSize_Object = MibScalar
uioOutputRelayStatusTableSize = _UioOutputRelayStatusTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 1),
    _UioOutputRelayStatusTableSize_Type()
)
uioOutputRelayStatusTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioOutputRelayStatusTableSize.setStatus("mandatory")
_UioOutputRelayStatusTable_Object = MibTable
uioOutputRelayStatusTable = _UioOutputRelayStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2)
)
if mibBuilder.loadTexts:
    uioOutputRelayStatusTable.setStatus("mandatory")
_UioOutputRelayStatusEntry_Object = MibTableRow
uioOutputRelayStatusEntry = _UioOutputRelayStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1)
)
uioOutputRelayStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "uioOutputRelayStatusPortID"),
    (0, "POWERNET-MIB", "uioOutputRelayStatusRelayID"),
)
if mibBuilder.loadTexts:
    uioOutputRelayStatusEntry.setStatus("mandatory")
_UioOutputRelayStatusPortID_Type = Integer32
_UioOutputRelayStatusPortID_Object = MibTableColumn
uioOutputRelayStatusPortID = _UioOutputRelayStatusPortID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 1),
    _UioOutputRelayStatusPortID_Type()
)
uioOutputRelayStatusPortID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioOutputRelayStatusPortID.setStatus("mandatory")
_UioOutputRelayStatusRelayID_Type = Integer32
_UioOutputRelayStatusRelayID_Object = MibTableColumn
uioOutputRelayStatusRelayID = _UioOutputRelayStatusRelayID_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 2),
    _UioOutputRelayStatusRelayID_Type()
)
uioOutputRelayStatusRelayID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioOutputRelayStatusRelayID.setStatus("mandatory")
_UioOutputRelayStatusRelayName_Type = DisplayString
_UioOutputRelayStatusRelayName_Object = MibTableColumn
uioOutputRelayStatusRelayName = _UioOutputRelayStatusRelayName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 3),
    _UioOutputRelayStatusRelayName_Type()
)
uioOutputRelayStatusRelayName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioOutputRelayStatusRelayName.setStatus("mandatory")
_UioOutputRelayStatusRelayLocation_Type = DisplayString
_UioOutputRelayStatusRelayLocation_Object = MibTableColumn
uioOutputRelayStatusRelayLocation = _UioOutputRelayStatusRelayLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 4),
    _UioOutputRelayStatusRelayLocation_Type()
)
uioOutputRelayStatusRelayLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioOutputRelayStatusRelayLocation.setStatus("mandatory")


class _UioOutputRelayStatusCurrentState_Type(Integer32):
    """Custom type uioOutputRelayStatusCurrentState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("outputStateNotApplicable", 3),
          ("uioOutputClosed", 1),
          ("uioOutputOpen", 2))
    )


_UioOutputRelayStatusCurrentState_Type.__name__ = "Integer32"
_UioOutputRelayStatusCurrentState_Object = MibTableColumn
uioOutputRelayStatusCurrentState = _UioOutputRelayStatusCurrentState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 5),
    _UioOutputRelayStatusCurrentState_Type()
)
uioOutputRelayStatusCurrentState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioOutputRelayStatusCurrentState.setStatus("mandatory")


class _UioOutputRelayStatusAlarmStatus_Type(Integer32):
    """Custom type uioOutputRelayStatusAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("inputStatusNotApplicable", 4),
          ("uioCritical", 3),
          ("uioNormal", 1),
          ("uioWarning", 2))
    )


_UioOutputRelayStatusAlarmStatus_Type.__name__ = "Integer32"
_UioOutputRelayStatusAlarmStatus_Object = MibTableColumn
uioOutputRelayStatusAlarmStatus = _UioOutputRelayStatusAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 6),
    _UioOutputRelayStatusAlarmStatus_Type()
)
uioOutputRelayStatusAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioOutputRelayStatusAlarmStatus.setStatus("mandatory")


class _UioOutputRelayStatusCommStatus_Type(Integer32):
    """Custom type uioOutputRelayStatusCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("commsLost", 3),
          ("commsOK", 2),
          ("notInstalled", 1))
    )


_UioOutputRelayStatusCommStatus_Type.__name__ = "Integer32"
_UioOutputRelayStatusCommStatus_Object = MibTableColumn
uioOutputRelayStatusCommStatus = _UioOutputRelayStatusCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 25, 3, 2, 1, 7),
    _UioOutputRelayStatusCommStatus_Type()
)
uioOutputRelayStatusCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uioOutputRelayStatusCommStatus.setStatus("mandatory")
_RPDU2_ObjectIdentity = ObjectIdentity
rPDU2 = _RPDU2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26)
)
_RPDU2IdentTableSize_Type = Integer32
_RPDU2IdentTableSize_Object = MibScalar
rPDU2IdentTableSize = _RPDU2IdentTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 1),
    _RPDU2IdentTableSize_Type()
)
rPDU2IdentTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2IdentTableSize.setStatus("mandatory")
_RPDU2IdentTable_Object = MibTable
rPDU2IdentTable = _RPDU2IdentTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2)
)
if mibBuilder.loadTexts:
    rPDU2IdentTable.setStatus("mandatory")
_RPDU2IdentEntry_Object = MibTableRow
rPDU2IdentEntry = _RPDU2IdentEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1)
)
rPDU2IdentEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2IdentIndex"),
)
if mibBuilder.loadTexts:
    rPDU2IdentEntry.setStatus("mandatory")
_RPDU2IdentIndex_Type = Integer32
_RPDU2IdentIndex_Object = MibTableColumn
rPDU2IdentIndex = _RPDU2IdentIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 1),
    _RPDU2IdentIndex_Type()
)
rPDU2IdentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2IdentIndex.setStatus("mandatory")
_RPDU2IdentModule_Type = Integer32
_RPDU2IdentModule_Object = MibTableColumn
rPDU2IdentModule = _RPDU2IdentModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 2),
    _RPDU2IdentModule_Type()
)
rPDU2IdentModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2IdentModule.setStatus("mandatory")
_RPDU2IdentName_Type = DisplayString
_RPDU2IdentName_Object = MibTableColumn
rPDU2IdentName = _RPDU2IdentName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 3),
    _RPDU2IdentName_Type()
)
rPDU2IdentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2IdentName.setStatus("mandatory")
_RPDU2IdentLocation_Type = DisplayString
_RPDU2IdentLocation_Object = MibTableColumn
rPDU2IdentLocation = _RPDU2IdentLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 4),
    _RPDU2IdentLocation_Type()
)
rPDU2IdentLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2IdentLocation.setStatus("mandatory")
_RPDU2IdentHardwareRev_Type = DisplayString
_RPDU2IdentHardwareRev_Object = MibTableColumn
rPDU2IdentHardwareRev = _RPDU2IdentHardwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 5),
    _RPDU2IdentHardwareRev_Type()
)
rPDU2IdentHardwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2IdentHardwareRev.setStatus("mandatory")
_RPDU2IdentFirmwareRev_Type = DisplayString
_RPDU2IdentFirmwareRev_Object = MibTableColumn
rPDU2IdentFirmwareRev = _RPDU2IdentFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 6),
    _RPDU2IdentFirmwareRev_Type()
)
rPDU2IdentFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2IdentFirmwareRev.setStatus("mandatory")
_RPDU2IdentDateOfManufacture_Type = DisplayString
_RPDU2IdentDateOfManufacture_Object = MibTableColumn
rPDU2IdentDateOfManufacture = _RPDU2IdentDateOfManufacture_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 7),
    _RPDU2IdentDateOfManufacture_Type()
)
rPDU2IdentDateOfManufacture.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2IdentDateOfManufacture.setStatus("mandatory")
_RPDU2IdentModelNumber_Type = DisplayString
_RPDU2IdentModelNumber_Object = MibTableColumn
rPDU2IdentModelNumber = _RPDU2IdentModelNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 8),
    _RPDU2IdentModelNumber_Type()
)
rPDU2IdentModelNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2IdentModelNumber.setStatus("mandatory")
_RPDU2IdentSerialNumber_Type = DisplayString
_RPDU2IdentSerialNumber_Object = MibTableColumn
rPDU2IdentSerialNumber = _RPDU2IdentSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 2, 1, 9),
    _RPDU2IdentSerialNumber_Type()
)
rPDU2IdentSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2IdentSerialNumber.setStatus("mandatory")
_RPDU2DeviceTableSize_Type = Integer32
_RPDU2DeviceTableSize_Object = MibScalar
rPDU2DeviceTableSize = _RPDU2DeviceTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 3),
    _RPDU2DeviceTableSize_Type()
)
rPDU2DeviceTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceTableSize.setStatus("mandatory")
_RPDU2Device_ObjectIdentity = ObjectIdentity
rPDU2Device = _RPDU2Device_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4)
)
_RPDU2DeviceConfigTable_Object = MibTable
rPDU2DeviceConfigTable = _RPDU2DeviceConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1)
)
if mibBuilder.loadTexts:
    rPDU2DeviceConfigTable.setStatus("mandatory")
_RPDU2DeviceConfigEntry_Object = MibTableRow
rPDU2DeviceConfigEntry = _RPDU2DeviceConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1)
)
rPDU2DeviceConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2DeviceConfigIndex"),
)
if mibBuilder.loadTexts:
    rPDU2DeviceConfigEntry.setStatus("mandatory")
_RPDU2DeviceConfigIndex_Type = Integer32
_RPDU2DeviceConfigIndex_Object = MibTableColumn
rPDU2DeviceConfigIndex = _RPDU2DeviceConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 1),
    _RPDU2DeviceConfigIndex_Type()
)
rPDU2DeviceConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceConfigIndex.setStatus("mandatory")
_RPDU2DeviceConfigModule_Type = Integer32
_RPDU2DeviceConfigModule_Object = MibTableColumn
rPDU2DeviceConfigModule = _RPDU2DeviceConfigModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 2),
    _RPDU2DeviceConfigModule_Type()
)
rPDU2DeviceConfigModule.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2DeviceConfigModule.setStatus("mandatory")
_RPDU2DeviceConfigName_Type = DisplayString
_RPDU2DeviceConfigName_Object = MibTableColumn
rPDU2DeviceConfigName = _RPDU2DeviceConfigName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 3),
    _RPDU2DeviceConfigName_Type()
)
rPDU2DeviceConfigName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2DeviceConfigName.setStatus("mandatory")
_RPDU2DeviceConfigLocation_Type = DisplayString
_RPDU2DeviceConfigLocation_Object = MibTableColumn
rPDU2DeviceConfigLocation = _RPDU2DeviceConfigLocation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 4),
    _RPDU2DeviceConfigLocation_Type()
)
rPDU2DeviceConfigLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2DeviceConfigLocation.setStatus("mandatory")


class _RPDU2DeviceConfigDisplayOrientation_Type(Integer32):
    """Custom type rPDU2DeviceConfigDisplayOrientation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("displayNormal", 1),
          ("displayReverse", 2))
    )


_RPDU2DeviceConfigDisplayOrientation_Type.__name__ = "Integer32"
_RPDU2DeviceConfigDisplayOrientation_Object = MibTableColumn
rPDU2DeviceConfigDisplayOrientation = _RPDU2DeviceConfigDisplayOrientation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 5),
    _RPDU2DeviceConfigDisplayOrientation_Type()
)
rPDU2DeviceConfigDisplayOrientation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2DeviceConfigDisplayOrientation.setStatus("mandatory")
_RPDU2DeviceConfigColdstartDelay_Type = Integer32
_RPDU2DeviceConfigColdstartDelay_Object = MibTableColumn
rPDU2DeviceConfigColdstartDelay = _RPDU2DeviceConfigColdstartDelay_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 6),
    _RPDU2DeviceConfigColdstartDelay_Type()
)
rPDU2DeviceConfigColdstartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2DeviceConfigColdstartDelay.setStatus("mandatory")
_RPDU2DeviceConfigLowLoadPowerThreshold_Type = Integer32
_RPDU2DeviceConfigLowLoadPowerThreshold_Object = MibTableColumn
rPDU2DeviceConfigLowLoadPowerThreshold = _RPDU2DeviceConfigLowLoadPowerThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 7),
    _RPDU2DeviceConfigLowLoadPowerThreshold_Type()
)
rPDU2DeviceConfigLowLoadPowerThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2DeviceConfigLowLoadPowerThreshold.setStatus("mandatory")
_RPDU2DeviceConfigNearOverloadPowerThreshold_Type = Integer32
_RPDU2DeviceConfigNearOverloadPowerThreshold_Object = MibTableColumn
rPDU2DeviceConfigNearOverloadPowerThreshold = _RPDU2DeviceConfigNearOverloadPowerThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 8),
    _RPDU2DeviceConfigNearOverloadPowerThreshold_Type()
)
rPDU2DeviceConfigNearOverloadPowerThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2DeviceConfigNearOverloadPowerThreshold.setStatus("mandatory")
_RPDU2DeviceConfigOverloadPowerThreshold_Type = Integer32
_RPDU2DeviceConfigOverloadPowerThreshold_Object = MibTableColumn
rPDU2DeviceConfigOverloadPowerThreshold = _RPDU2DeviceConfigOverloadPowerThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 9),
    _RPDU2DeviceConfigOverloadPowerThreshold_Type()
)
rPDU2DeviceConfigOverloadPowerThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2DeviceConfigOverloadPowerThreshold.setStatus("mandatory")


class _RPDU2DeviceConfigDevicePeakPowerReset_Type(Integer32):
    """Custom type rPDU2DeviceConfigDevicePeakPowerReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 1),
          ("reset", 2))
    )


_RPDU2DeviceConfigDevicePeakPowerReset_Type.__name__ = "Integer32"
_RPDU2DeviceConfigDevicePeakPowerReset_Object = MibTableColumn
rPDU2DeviceConfigDevicePeakPowerReset = _RPDU2DeviceConfigDevicePeakPowerReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 10),
    _RPDU2DeviceConfigDevicePeakPowerReset_Type()
)
rPDU2DeviceConfigDevicePeakPowerReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2DeviceConfigDevicePeakPowerReset.setStatus("mandatory")


class _RPDU2DeviceConfigDeviceEnergyReset_Type(Integer32):
    """Custom type rPDU2DeviceConfigDeviceEnergyReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 1),
          ("notSupported", 3),
          ("reset", 2))
    )


_RPDU2DeviceConfigDeviceEnergyReset_Type.__name__ = "Integer32"
_RPDU2DeviceConfigDeviceEnergyReset_Object = MibTableColumn
rPDU2DeviceConfigDeviceEnergyReset = _RPDU2DeviceConfigDeviceEnergyReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 11),
    _RPDU2DeviceConfigDeviceEnergyReset_Type()
)
rPDU2DeviceConfigDeviceEnergyReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2DeviceConfigDeviceEnergyReset.setStatus("mandatory")


class _RPDU2DeviceConfigOutletsEnergyReset_Type(Integer32):
    """Custom type rPDU2DeviceConfigOutletsEnergyReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOperation", 1),
          ("notSupported", 3),
          ("reset", 2))
    )


_RPDU2DeviceConfigOutletsEnergyReset_Type.__name__ = "Integer32"
_RPDU2DeviceConfigOutletsEnergyReset_Object = MibTableColumn
rPDU2DeviceConfigOutletsEnergyReset = _RPDU2DeviceConfigOutletsEnergyReset_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 1, 1, 12),
    _RPDU2DeviceConfigOutletsEnergyReset_Type()
)
rPDU2DeviceConfigOutletsEnergyReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2DeviceConfigOutletsEnergyReset.setStatus("mandatory")
_RPDU2DevicePropertiesTable_Object = MibTable
rPDU2DevicePropertiesTable = _RPDU2DevicePropertiesTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2)
)
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesTable.setStatus("mandatory")
_RPDU2DevicePropertiesEntry_Object = MibTableRow
rPDU2DevicePropertiesEntry = _RPDU2DevicePropertiesEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1)
)
rPDU2DevicePropertiesEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2DevicePropertiesIndex"),
)
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesEntry.setStatus("mandatory")
_RPDU2DevicePropertiesIndex_Type = Integer32
_RPDU2DevicePropertiesIndex_Object = MibTableColumn
rPDU2DevicePropertiesIndex = _RPDU2DevicePropertiesIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 1),
    _RPDU2DevicePropertiesIndex_Type()
)
rPDU2DevicePropertiesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesIndex.setStatus("mandatory")
_RPDU2DevicePropertiesModule_Type = Integer32
_RPDU2DevicePropertiesModule_Object = MibTableColumn
rPDU2DevicePropertiesModule = _RPDU2DevicePropertiesModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 2),
    _RPDU2DevicePropertiesModule_Type()
)
rPDU2DevicePropertiesModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesModule.setStatus("mandatory")
_RPDU2DevicePropertiesName_Type = DisplayString
_RPDU2DevicePropertiesName_Object = MibTableColumn
rPDU2DevicePropertiesName = _RPDU2DevicePropertiesName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 3),
    _RPDU2DevicePropertiesName_Type()
)
rPDU2DevicePropertiesName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesName.setStatus("mandatory")
_RPDU2DevicePropertiesNumOutlets_Type = Integer32
_RPDU2DevicePropertiesNumOutlets_Object = MibTableColumn
rPDU2DevicePropertiesNumOutlets = _RPDU2DevicePropertiesNumOutlets_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 4),
    _RPDU2DevicePropertiesNumOutlets_Type()
)
rPDU2DevicePropertiesNumOutlets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesNumOutlets.setStatus("mandatory")
_RPDU2DevicePropertiesNumSwitchedOutlets_Type = Integer32
_RPDU2DevicePropertiesNumSwitchedOutlets_Object = MibTableColumn
rPDU2DevicePropertiesNumSwitchedOutlets = _RPDU2DevicePropertiesNumSwitchedOutlets_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 5),
    _RPDU2DevicePropertiesNumSwitchedOutlets_Type()
)
rPDU2DevicePropertiesNumSwitchedOutlets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesNumSwitchedOutlets.setStatus("mandatory")
_RPDU2DevicePropertiesNumMeteredOutlets_Type = Integer32
_RPDU2DevicePropertiesNumMeteredOutlets_Object = MibTableColumn
rPDU2DevicePropertiesNumMeteredOutlets = _RPDU2DevicePropertiesNumMeteredOutlets_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 6),
    _RPDU2DevicePropertiesNumMeteredOutlets_Type()
)
rPDU2DevicePropertiesNumMeteredOutlets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesNumMeteredOutlets.setStatus("mandatory")
_RPDU2DevicePropertiesNumPhases_Type = Integer32
_RPDU2DevicePropertiesNumPhases_Object = MibTableColumn
rPDU2DevicePropertiesNumPhases = _RPDU2DevicePropertiesNumPhases_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 7),
    _RPDU2DevicePropertiesNumPhases_Type()
)
rPDU2DevicePropertiesNumPhases.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesNumPhases.setStatus("mandatory")
_RPDU2DevicePropertiesNumMeteredBanks_Type = Integer32
_RPDU2DevicePropertiesNumMeteredBanks_Object = MibTableColumn
rPDU2DevicePropertiesNumMeteredBanks = _RPDU2DevicePropertiesNumMeteredBanks_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 8),
    _RPDU2DevicePropertiesNumMeteredBanks_Type()
)
rPDU2DevicePropertiesNumMeteredBanks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesNumMeteredBanks.setStatus("mandatory")
_RPDU2DevicePropertiesMaxCurrentRating_Type = Integer32
_RPDU2DevicePropertiesMaxCurrentRating_Object = MibTableColumn
rPDU2DevicePropertiesMaxCurrentRating = _RPDU2DevicePropertiesMaxCurrentRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 9),
    _RPDU2DevicePropertiesMaxCurrentRating_Type()
)
rPDU2DevicePropertiesMaxCurrentRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesMaxCurrentRating.setStatus("mandatory")


class _RPDU2DevicePropertiesOrientation_Type(Integer32):
    """Custom type rPDU2DevicePropertiesOrientation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("horizontal", 1),
          ("vertical", 2),
          ("verticalISXv2", 3))
    )


_RPDU2DevicePropertiesOrientation_Type.__name__ = "Integer32"
_RPDU2DevicePropertiesOrientation_Object = MibTableColumn
rPDU2DevicePropertiesOrientation = _RPDU2DevicePropertiesOrientation_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 10),
    _RPDU2DevicePropertiesOrientation_Type()
)
rPDU2DevicePropertiesOrientation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesOrientation.setStatus("mandatory")


class _RPDU2DevicePropertiesOutletLayout_Type(Integer32):
    """Custom type rPDU2DevicePropertiesOutletLayout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("seqNotApplicable", 9),
          ("seqPToN1516PToPGrouped", 6),
          ("seqPhToN2xGrouped", 8),
          ("seqPhToNGrouped", 5),
          ("seqPhToNeu21PhToPh", 3),
          ("seqPhToPh2xGrouped", 7),
          ("seqPhToPhGrouped", 4),
          ("seqPhaseToNeutral", 1),
          ("seqPhaseToPhase", 2))
    )


_RPDU2DevicePropertiesOutletLayout_Type.__name__ = "Integer32"
_RPDU2DevicePropertiesOutletLayout_Object = MibTableColumn
rPDU2DevicePropertiesOutletLayout = _RPDU2DevicePropertiesOutletLayout_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 11),
    _RPDU2DevicePropertiesOutletLayout_Type()
)
rPDU2DevicePropertiesOutletLayout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesOutletLayout.setStatus("mandatory")
_RPDU2DevicePropertiesMaxPhaseCurrentRating_Type = Integer32
_RPDU2DevicePropertiesMaxPhaseCurrentRating_Object = MibTableColumn
rPDU2DevicePropertiesMaxPhaseCurrentRating = _RPDU2DevicePropertiesMaxPhaseCurrentRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 2, 1, 12),
    _RPDU2DevicePropertiesMaxPhaseCurrentRating_Type()
)
rPDU2DevicePropertiesMaxPhaseCurrentRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DevicePropertiesMaxPhaseCurrentRating.setStatus("mandatory")
_RPDU2DeviceStatusTable_Object = MibTable
rPDU2DeviceStatusTable = _RPDU2DeviceStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3)
)
if mibBuilder.loadTexts:
    rPDU2DeviceStatusTable.setStatus("mandatory")
_RPDU2DeviceStatusEntry_Object = MibTableRow
rPDU2DeviceStatusEntry = _RPDU2DeviceStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1)
)
rPDU2DeviceStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2DeviceStatusIndex"),
)
if mibBuilder.loadTexts:
    rPDU2DeviceStatusEntry.setStatus("mandatory")
_RPDU2DeviceStatusIndex_Type = Integer32
_RPDU2DeviceStatusIndex_Object = MibTableColumn
rPDU2DeviceStatusIndex = _RPDU2DeviceStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 1),
    _RPDU2DeviceStatusIndex_Type()
)
rPDU2DeviceStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusIndex.setStatus("mandatory")
_RPDU2DeviceStatusModule_Type = Integer32
_RPDU2DeviceStatusModule_Object = MibTableColumn
rPDU2DeviceStatusModule = _RPDU2DeviceStatusModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 2),
    _RPDU2DeviceStatusModule_Type()
)
rPDU2DeviceStatusModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusModule.setStatus("mandatory")
_RPDU2DeviceStatusName_Type = DisplayString
_RPDU2DeviceStatusName_Object = MibTableColumn
rPDU2DeviceStatusName = _RPDU2DeviceStatusName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 3),
    _RPDU2DeviceStatusName_Type()
)
rPDU2DeviceStatusName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusName.setStatus("mandatory")


class _RPDU2DeviceStatusLoadState_Type(Integer32):
    """Custom type rPDU2DeviceStatusLoadState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("lowLoad", 1),
          ("nearOverload", 3),
          ("normal", 2),
          ("overload", 4))
    )


_RPDU2DeviceStatusLoadState_Type.__name__ = "Integer32"
_RPDU2DeviceStatusLoadState_Object = MibTableColumn
rPDU2DeviceStatusLoadState = _RPDU2DeviceStatusLoadState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 4),
    _RPDU2DeviceStatusLoadState_Type()
)
rPDU2DeviceStatusLoadState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusLoadState.setStatus("mandatory")
_RPDU2DeviceStatusPower_Type = Integer32
_RPDU2DeviceStatusPower_Object = MibTableColumn
rPDU2DeviceStatusPower = _RPDU2DeviceStatusPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 5),
    _RPDU2DeviceStatusPower_Type()
)
rPDU2DeviceStatusPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusPower.setStatus("mandatory")
_RPDU2DeviceStatusPeakPower_Type = Integer32
_RPDU2DeviceStatusPeakPower_Object = MibTableColumn
rPDU2DeviceStatusPeakPower = _RPDU2DeviceStatusPeakPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 6),
    _RPDU2DeviceStatusPeakPower_Type()
)
rPDU2DeviceStatusPeakPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusPeakPower.setStatus("mandatory")
_RPDU2DeviceStatusPeakPowerTimestamp_Type = DisplayString
_RPDU2DeviceStatusPeakPowerTimestamp_Object = MibTableColumn
rPDU2DeviceStatusPeakPowerTimestamp = _RPDU2DeviceStatusPeakPowerTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 7),
    _RPDU2DeviceStatusPeakPowerTimestamp_Type()
)
rPDU2DeviceStatusPeakPowerTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusPeakPowerTimestamp.setStatus("mandatory")
_RPDU2DeviceStatusPeakPowerStartTime_Type = DisplayString
_RPDU2DeviceStatusPeakPowerStartTime_Object = MibTableColumn
rPDU2DeviceStatusPeakPowerStartTime = _RPDU2DeviceStatusPeakPowerStartTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 8),
    _RPDU2DeviceStatusPeakPowerStartTime_Type()
)
rPDU2DeviceStatusPeakPowerStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusPeakPowerStartTime.setStatus("mandatory")
_RPDU2DeviceStatusEnergy_Type = Integer32
_RPDU2DeviceStatusEnergy_Object = MibTableColumn
rPDU2DeviceStatusEnergy = _RPDU2DeviceStatusEnergy_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 9),
    _RPDU2DeviceStatusEnergy_Type()
)
rPDU2DeviceStatusEnergy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusEnergy.setStatus("mandatory")
_RPDU2DeviceStatusEnergyStartTime_Type = DisplayString
_RPDU2DeviceStatusEnergyStartTime_Object = MibTableColumn
rPDU2DeviceStatusEnergyStartTime = _RPDU2DeviceStatusEnergyStartTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 10),
    _RPDU2DeviceStatusEnergyStartTime_Type()
)
rPDU2DeviceStatusEnergyStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusEnergyStartTime.setStatus("mandatory")


class _RPDU2DeviceStatusCommandPending_Type(Integer32):
    """Custom type rPDU2DeviceStatusCommandPending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("commandPending", 1),
          ("commandPendingUnknown", 3),
          ("noCommandPending", 2))
    )


_RPDU2DeviceStatusCommandPending_Type.__name__ = "Integer32"
_RPDU2DeviceStatusCommandPending_Object = MibTableColumn
rPDU2DeviceStatusCommandPending = _RPDU2DeviceStatusCommandPending_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 11),
    _RPDU2DeviceStatusCommandPending_Type()
)
rPDU2DeviceStatusCommandPending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusCommandPending.setStatus("mandatory")


class _RPDU2DeviceStatusPowerSupplyAlarm_Type(Integer32):
    """Custom type rPDU2DeviceStatusPowerSupplyAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1))
    )


_RPDU2DeviceStatusPowerSupplyAlarm_Type.__name__ = "Integer32"
_RPDU2DeviceStatusPowerSupplyAlarm_Object = MibTableColumn
rPDU2DeviceStatusPowerSupplyAlarm = _RPDU2DeviceStatusPowerSupplyAlarm_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 12),
    _RPDU2DeviceStatusPowerSupplyAlarm_Type()
)
rPDU2DeviceStatusPowerSupplyAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusPowerSupplyAlarm.setStatus("mandatory")


class _RPDU2DeviceStatusPowerSupply1Status_Type(Integer32):
    """Custom type rPDU2DeviceStatusPowerSupply1Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1),
          ("notInstalled", 3))
    )


_RPDU2DeviceStatusPowerSupply1Status_Type.__name__ = "Integer32"
_RPDU2DeviceStatusPowerSupply1Status_Object = MibTableColumn
rPDU2DeviceStatusPowerSupply1Status = _RPDU2DeviceStatusPowerSupply1Status_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 13),
    _RPDU2DeviceStatusPowerSupply1Status_Type()
)
rPDU2DeviceStatusPowerSupply1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusPowerSupply1Status.setStatus("mandatory")


class _RPDU2DeviceStatusPowerSupply2Status_Type(Integer32):
    """Custom type rPDU2DeviceStatusPowerSupply2Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 2),
          ("normal", 1),
          ("notInstalled", 3))
    )


_RPDU2DeviceStatusPowerSupply2Status_Type.__name__ = "Integer32"
_RPDU2DeviceStatusPowerSupply2Status_Object = MibTableColumn
rPDU2DeviceStatusPowerSupply2Status = _RPDU2DeviceStatusPowerSupply2Status_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 14),
    _RPDU2DeviceStatusPowerSupply2Status_Type()
)
rPDU2DeviceStatusPowerSupply2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusPowerSupply2Status.setStatus("mandatory")
_RPDU2DeviceStatusOutletsEnergyStartTime_Type = DisplayString
_RPDU2DeviceStatusOutletsEnergyStartTime_Object = MibTableColumn
rPDU2DeviceStatusOutletsEnergyStartTime = _RPDU2DeviceStatusOutletsEnergyStartTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 3, 1, 15),
    _RPDU2DeviceStatusOutletsEnergyStartTime_Type()
)
rPDU2DeviceStatusOutletsEnergyStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceStatusOutletsEnergyStartTime.setStatus("mandatory")
_RPDU2DeviceControlTable_Object = MibTable
rPDU2DeviceControlTable = _RPDU2DeviceControlTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4)
)
if mibBuilder.loadTexts:
    rPDU2DeviceControlTable.setStatus("mandatory")
_RPDU2DeviceControlEntry_Object = MibTableRow
rPDU2DeviceControlEntry = _RPDU2DeviceControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1)
)
rPDU2DeviceControlEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2DeviceControlIndex"),
)
if mibBuilder.loadTexts:
    rPDU2DeviceControlEntry.setStatus("mandatory")
_RPDU2DeviceControlIndex_Type = Integer32
_RPDU2DeviceControlIndex_Object = MibTableColumn
rPDU2DeviceControlIndex = _RPDU2DeviceControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 1),
    _RPDU2DeviceControlIndex_Type()
)
rPDU2DeviceControlIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceControlIndex.setStatus("mandatory")
_RPDU2DeviceControlModule_Type = Integer32
_RPDU2DeviceControlModule_Object = MibTableColumn
rPDU2DeviceControlModule = _RPDU2DeviceControlModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 2),
    _RPDU2DeviceControlModule_Type()
)
rPDU2DeviceControlModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceControlModule.setStatus("mandatory")
_RPDU2DeviceControlName_Type = DisplayString
_RPDU2DeviceControlName_Object = MibTableColumn
rPDU2DeviceControlName = _RPDU2DeviceControlName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 3),
    _RPDU2DeviceControlName_Type()
)
rPDU2DeviceControlName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2DeviceControlName.setStatus("mandatory")


class _RPDU2DeviceControlCommand_Type(Integer32):
    """Custom type rPDU2DeviceControlCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("cancelAllPendingCommands", 8),
          ("delayedAllOff", 7),
          ("delayedAllOn", 2),
          ("delayedAllReboot", 5),
          ("immediateAllOff", 3),
          ("immediateAllOn", 1),
          ("immediateAllReboot", 4),
          ("noCommandAll", 6))
    )


_RPDU2DeviceControlCommand_Type.__name__ = "Integer32"
_RPDU2DeviceControlCommand_Object = MibTableColumn
rPDU2DeviceControlCommand = _RPDU2DeviceControlCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 4, 4, 1, 4),
    _RPDU2DeviceControlCommand_Type()
)
rPDU2DeviceControlCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2DeviceControlCommand.setStatus("mandatory")
_RPDU2PhaseTableSize_Type = Integer32
_RPDU2PhaseTableSize_Object = MibScalar
rPDU2PhaseTableSize = _RPDU2PhaseTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 5),
    _RPDU2PhaseTableSize_Type()
)
rPDU2PhaseTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhaseTableSize.setStatus("mandatory")
_RPDU2Phase_ObjectIdentity = ObjectIdentity
rPDU2Phase = _RPDU2Phase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6)
)
_RPDU2PhaseConfigTable_Object = MibTable
rPDU2PhaseConfigTable = _RPDU2PhaseConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1)
)
if mibBuilder.loadTexts:
    rPDU2PhaseConfigTable.setStatus("mandatory")
_RPDU2PhaseConfigEntry_Object = MibTableRow
rPDU2PhaseConfigEntry = _RPDU2PhaseConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1)
)
rPDU2PhaseConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2PhaseConfigIndex"),
)
if mibBuilder.loadTexts:
    rPDU2PhaseConfigEntry.setStatus("mandatory")
_RPDU2PhaseConfigIndex_Type = Integer32
_RPDU2PhaseConfigIndex_Object = MibTableColumn
rPDU2PhaseConfigIndex = _RPDU2PhaseConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 1),
    _RPDU2PhaseConfigIndex_Type()
)
rPDU2PhaseConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhaseConfigIndex.setStatus("mandatory")
_RPDU2PhaseConfigModule_Type = Integer32
_RPDU2PhaseConfigModule_Object = MibTableColumn
rPDU2PhaseConfigModule = _RPDU2PhaseConfigModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 2),
    _RPDU2PhaseConfigModule_Type()
)
rPDU2PhaseConfigModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhaseConfigModule.setStatus("mandatory")
_RPDU2PhaseConfigNumber_Type = Integer32
_RPDU2PhaseConfigNumber_Object = MibTableColumn
rPDU2PhaseConfigNumber = _RPDU2PhaseConfigNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 3),
    _RPDU2PhaseConfigNumber_Type()
)
rPDU2PhaseConfigNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhaseConfigNumber.setStatus("mandatory")


class _RPDU2PhaseConfigOverloadRestriction_Type(Integer32):
    """Custom type rPDU2PhaseConfigOverloadRestriction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("alwaysAllowTurnON", 1),
          ("notSupported", 4),
          ("restrictOnNearOverload", 2),
          ("restrictOnOverload", 3))
    )


_RPDU2PhaseConfigOverloadRestriction_Type.__name__ = "Integer32"
_RPDU2PhaseConfigOverloadRestriction_Object = MibTableColumn
rPDU2PhaseConfigOverloadRestriction = _RPDU2PhaseConfigOverloadRestriction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 4),
    _RPDU2PhaseConfigOverloadRestriction_Type()
)
rPDU2PhaseConfigOverloadRestriction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2PhaseConfigOverloadRestriction.setStatus("mandatory")
_RPDU2PhaseConfigLowLoadCurrentThreshold_Type = Integer32
_RPDU2PhaseConfigLowLoadCurrentThreshold_Object = MibTableColumn
rPDU2PhaseConfigLowLoadCurrentThreshold = _RPDU2PhaseConfigLowLoadCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 5),
    _RPDU2PhaseConfigLowLoadCurrentThreshold_Type()
)
rPDU2PhaseConfigLowLoadCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2PhaseConfigLowLoadCurrentThreshold.setStatus("mandatory")
_RPDU2PhaseConfigNearOverloadCurrentThreshold_Type = Integer32
_RPDU2PhaseConfigNearOverloadCurrentThreshold_Object = MibTableColumn
rPDU2PhaseConfigNearOverloadCurrentThreshold = _RPDU2PhaseConfigNearOverloadCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 6),
    _RPDU2PhaseConfigNearOverloadCurrentThreshold_Type()
)
rPDU2PhaseConfigNearOverloadCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2PhaseConfigNearOverloadCurrentThreshold.setStatus("mandatory")
_RPDU2PhaseConfigOverloadCurrentThreshold_Type = Integer32
_RPDU2PhaseConfigOverloadCurrentThreshold_Object = MibTableColumn
rPDU2PhaseConfigOverloadCurrentThreshold = _RPDU2PhaseConfigOverloadCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 1, 1, 7),
    _RPDU2PhaseConfigOverloadCurrentThreshold_Type()
)
rPDU2PhaseConfigOverloadCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2PhaseConfigOverloadCurrentThreshold.setStatus("mandatory")
_RPDU2PhasePropertiesTable_Object = MibTable
rPDU2PhasePropertiesTable = _RPDU2PhasePropertiesTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2)
)
if mibBuilder.loadTexts:
    rPDU2PhasePropertiesTable.setStatus("mandatory")
_RPDU2PhasePropertiesEntry_Object = MibTableRow
rPDU2PhasePropertiesEntry = _RPDU2PhasePropertiesEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1)
)
rPDU2PhasePropertiesEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2PhasePropertiesIndex"),
)
if mibBuilder.loadTexts:
    rPDU2PhasePropertiesEntry.setStatus("mandatory")
_RPDU2PhasePropertiesIndex_Type = Integer32
_RPDU2PhasePropertiesIndex_Object = MibTableColumn
rPDU2PhasePropertiesIndex = _RPDU2PhasePropertiesIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1, 1),
    _RPDU2PhasePropertiesIndex_Type()
)
rPDU2PhasePropertiesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhasePropertiesIndex.setStatus("mandatory")
_RPDU2PhasePropertiesModule_Type = Integer32
_RPDU2PhasePropertiesModule_Object = MibTableColumn
rPDU2PhasePropertiesModule = _RPDU2PhasePropertiesModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1, 2),
    _RPDU2PhasePropertiesModule_Type()
)
rPDU2PhasePropertiesModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhasePropertiesModule.setStatus("mandatory")
_RPDU2PhasePropertiesNumber_Type = Integer32
_RPDU2PhasePropertiesNumber_Object = MibTableColumn
rPDU2PhasePropertiesNumber = _RPDU2PhasePropertiesNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 2, 1, 3),
    _RPDU2PhasePropertiesNumber_Type()
)
rPDU2PhasePropertiesNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhasePropertiesNumber.setStatus("mandatory")
_RPDU2PhaseStatusTable_Object = MibTable
rPDU2PhaseStatusTable = _RPDU2PhaseStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3)
)
if mibBuilder.loadTexts:
    rPDU2PhaseStatusTable.setStatus("mandatory")
_RPDU2PhaseStatusEntry_Object = MibTableRow
rPDU2PhaseStatusEntry = _RPDU2PhaseStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1)
)
rPDU2PhaseStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2PhaseStatusIndex"),
)
if mibBuilder.loadTexts:
    rPDU2PhaseStatusEntry.setStatus("mandatory")
_RPDU2PhaseStatusIndex_Type = Integer32
_RPDU2PhaseStatusIndex_Object = MibTableColumn
rPDU2PhaseStatusIndex = _RPDU2PhaseStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 1),
    _RPDU2PhaseStatusIndex_Type()
)
rPDU2PhaseStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhaseStatusIndex.setStatus("mandatory")
_RPDU2PhaseStatusModule_Type = Integer32
_RPDU2PhaseStatusModule_Object = MibTableColumn
rPDU2PhaseStatusModule = _RPDU2PhaseStatusModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 2),
    _RPDU2PhaseStatusModule_Type()
)
rPDU2PhaseStatusModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhaseStatusModule.setStatus("mandatory")
_RPDU2PhaseStatusNumber_Type = Integer32
_RPDU2PhaseStatusNumber_Object = MibTableColumn
rPDU2PhaseStatusNumber = _RPDU2PhaseStatusNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 3),
    _RPDU2PhaseStatusNumber_Type()
)
rPDU2PhaseStatusNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhaseStatusNumber.setStatus("mandatory")


class _RPDU2PhaseStatusLoadState_Type(Integer32):
    """Custom type rPDU2PhaseStatusLoadState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("lowLoad", 1),
          ("nearOverload", 3),
          ("normal", 2),
          ("overload", 4))
    )


_RPDU2PhaseStatusLoadState_Type.__name__ = "Integer32"
_RPDU2PhaseStatusLoadState_Object = MibTableColumn
rPDU2PhaseStatusLoadState = _RPDU2PhaseStatusLoadState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 4),
    _RPDU2PhaseStatusLoadState_Type()
)
rPDU2PhaseStatusLoadState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhaseStatusLoadState.setStatus("mandatory")
_RPDU2PhaseStatusCurrent_Type = Integer32
_RPDU2PhaseStatusCurrent_Object = MibTableColumn
rPDU2PhaseStatusCurrent = _RPDU2PhaseStatusCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 5),
    _RPDU2PhaseStatusCurrent_Type()
)
rPDU2PhaseStatusCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhaseStatusCurrent.setStatus("mandatory")
_RPDU2PhaseStatusVoltage_Type = Integer32
_RPDU2PhaseStatusVoltage_Object = MibTableColumn
rPDU2PhaseStatusVoltage = _RPDU2PhaseStatusVoltage_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 6),
    _RPDU2PhaseStatusVoltage_Type()
)
rPDU2PhaseStatusVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhaseStatusVoltage.setStatus("mandatory")
_RPDU2PhaseStatusPower_Type = Integer32
_RPDU2PhaseStatusPower_Object = MibTableColumn
rPDU2PhaseStatusPower = _RPDU2PhaseStatusPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 6, 3, 1, 7),
    _RPDU2PhaseStatusPower_Type()
)
rPDU2PhaseStatusPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2PhaseStatusPower.setStatus("mandatory")
_RPDU2BankTableSize_Type = Integer32
_RPDU2BankTableSize_Object = MibScalar
rPDU2BankTableSize = _RPDU2BankTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 7),
    _RPDU2BankTableSize_Type()
)
rPDU2BankTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankTableSize.setStatus("mandatory")
_RPDU2Bank_ObjectIdentity = ObjectIdentity
rPDU2Bank = _RPDU2Bank_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8)
)
_RPDU2BankConfigTable_Object = MibTable
rPDU2BankConfigTable = _RPDU2BankConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1)
)
if mibBuilder.loadTexts:
    rPDU2BankConfigTable.setStatus("mandatory")
_RPDU2BankConfigEntry_Object = MibTableRow
rPDU2BankConfigEntry = _RPDU2BankConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1)
)
rPDU2BankConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2BankConfigIndex"),
)
if mibBuilder.loadTexts:
    rPDU2BankConfigEntry.setStatus("mandatory")
_RPDU2BankConfigIndex_Type = Integer32
_RPDU2BankConfigIndex_Object = MibTableColumn
rPDU2BankConfigIndex = _RPDU2BankConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 1),
    _RPDU2BankConfigIndex_Type()
)
rPDU2BankConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankConfigIndex.setStatus("mandatory")
_RPDU2BankConfigModule_Type = Integer32
_RPDU2BankConfigModule_Object = MibTableColumn
rPDU2BankConfigModule = _RPDU2BankConfigModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 2),
    _RPDU2BankConfigModule_Type()
)
rPDU2BankConfigModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankConfigModule.setStatus("mandatory")
_RPDU2BankConfigNumber_Type = Integer32
_RPDU2BankConfigNumber_Object = MibTableColumn
rPDU2BankConfigNumber = _RPDU2BankConfigNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 3),
    _RPDU2BankConfigNumber_Type()
)
rPDU2BankConfigNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankConfigNumber.setStatus("mandatory")


class _RPDU2BankConfigOverloadRestriction_Type(Integer32):
    """Custom type rPDU2BankConfigOverloadRestriction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("alwaysAllowTurnON", 1),
          ("notSupported", 4),
          ("restrictOnNearOverload", 2),
          ("restrictOnOverload", 3))
    )


_RPDU2BankConfigOverloadRestriction_Type.__name__ = "Integer32"
_RPDU2BankConfigOverloadRestriction_Object = MibTableColumn
rPDU2BankConfigOverloadRestriction = _RPDU2BankConfigOverloadRestriction_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 4),
    _RPDU2BankConfigOverloadRestriction_Type()
)
rPDU2BankConfigOverloadRestriction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2BankConfigOverloadRestriction.setStatus("mandatory")
_RPDU2BankConfigLowLoadCurrentThreshold_Type = Integer32
_RPDU2BankConfigLowLoadCurrentThreshold_Object = MibTableColumn
rPDU2BankConfigLowLoadCurrentThreshold = _RPDU2BankConfigLowLoadCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 5),
    _RPDU2BankConfigLowLoadCurrentThreshold_Type()
)
rPDU2BankConfigLowLoadCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2BankConfigLowLoadCurrentThreshold.setStatus("mandatory")
_RPDU2BankConfigNearOverloadCurrentThreshold_Type = Integer32
_RPDU2BankConfigNearOverloadCurrentThreshold_Object = MibTableColumn
rPDU2BankConfigNearOverloadCurrentThreshold = _RPDU2BankConfigNearOverloadCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 6),
    _RPDU2BankConfigNearOverloadCurrentThreshold_Type()
)
rPDU2BankConfigNearOverloadCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2BankConfigNearOverloadCurrentThreshold.setStatus("mandatory")
_RPDU2BankConfigOverloadCurrentThreshold_Type = Integer32
_RPDU2BankConfigOverloadCurrentThreshold_Object = MibTableColumn
rPDU2BankConfigOverloadCurrentThreshold = _RPDU2BankConfigOverloadCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 1, 1, 7),
    _RPDU2BankConfigOverloadCurrentThreshold_Type()
)
rPDU2BankConfigOverloadCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2BankConfigOverloadCurrentThreshold.setStatus("mandatory")
_RPDU2BankPropertiesTable_Object = MibTable
rPDU2BankPropertiesTable = _RPDU2BankPropertiesTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2)
)
if mibBuilder.loadTexts:
    rPDU2BankPropertiesTable.setStatus("mandatory")
_RPDU2BankPropertiesEntry_Object = MibTableRow
rPDU2BankPropertiesEntry = _RPDU2BankPropertiesEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1)
)
rPDU2BankPropertiesEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2BankPropertiesIndex"),
)
if mibBuilder.loadTexts:
    rPDU2BankPropertiesEntry.setStatus("mandatory")
_RPDU2BankPropertiesIndex_Type = Integer32
_RPDU2BankPropertiesIndex_Object = MibTableColumn
rPDU2BankPropertiesIndex = _RPDU2BankPropertiesIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 1),
    _RPDU2BankPropertiesIndex_Type()
)
rPDU2BankPropertiesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankPropertiesIndex.setStatus("mandatory")
_RPDU2BankPropertiesModule_Type = Integer32
_RPDU2BankPropertiesModule_Object = MibTableColumn
rPDU2BankPropertiesModule = _RPDU2BankPropertiesModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 2),
    _RPDU2BankPropertiesModule_Type()
)
rPDU2BankPropertiesModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankPropertiesModule.setStatus("mandatory")
_RPDU2BankPropertiesNumber_Type = Integer32
_RPDU2BankPropertiesNumber_Object = MibTableColumn
rPDU2BankPropertiesNumber = _RPDU2BankPropertiesNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 3),
    _RPDU2BankPropertiesNumber_Type()
)
rPDU2BankPropertiesNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankPropertiesNumber.setStatus("mandatory")
_RPDU2BankPropertiesPhaseLayout_Type = Rpdu2OutletPhaseLayoutType
_RPDU2BankPropertiesPhaseLayout_Object = MibTableColumn
rPDU2BankPropertiesPhaseLayout = _RPDU2BankPropertiesPhaseLayout_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 2, 1, 4),
    _RPDU2BankPropertiesPhaseLayout_Type()
)
rPDU2BankPropertiesPhaseLayout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankPropertiesPhaseLayout.setStatus("mandatory")
_RPDU2BankStatusTable_Object = MibTable
rPDU2BankStatusTable = _RPDU2BankStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3)
)
if mibBuilder.loadTexts:
    rPDU2BankStatusTable.setStatus("mandatory")
_RPDU2BankStatusEntry_Object = MibTableRow
rPDU2BankStatusEntry = _RPDU2BankStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1)
)
rPDU2BankStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2BankStatusIndex"),
)
if mibBuilder.loadTexts:
    rPDU2BankStatusEntry.setStatus("mandatory")
_RPDU2BankStatusIndex_Type = Integer32
_RPDU2BankStatusIndex_Object = MibTableColumn
rPDU2BankStatusIndex = _RPDU2BankStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 1),
    _RPDU2BankStatusIndex_Type()
)
rPDU2BankStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankStatusIndex.setStatus("mandatory")
_RPDU2BankStatusModule_Type = Integer32
_RPDU2BankStatusModule_Object = MibTableColumn
rPDU2BankStatusModule = _RPDU2BankStatusModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 2),
    _RPDU2BankStatusModule_Type()
)
rPDU2BankStatusModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankStatusModule.setStatus("mandatory")
_RPDU2BankStatusNumber_Type = Integer32
_RPDU2BankStatusNumber_Object = MibTableColumn
rPDU2BankStatusNumber = _RPDU2BankStatusNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 3),
    _RPDU2BankStatusNumber_Type()
)
rPDU2BankStatusNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankStatusNumber.setStatus("mandatory")


class _RPDU2BankStatusLoadState_Type(Integer32):
    """Custom type rPDU2BankStatusLoadState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("lowLoad", 1),
          ("nearOverload", 3),
          ("normal", 2),
          ("overload", 4))
    )


_RPDU2BankStatusLoadState_Type.__name__ = "Integer32"
_RPDU2BankStatusLoadState_Object = MibTableColumn
rPDU2BankStatusLoadState = _RPDU2BankStatusLoadState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 4),
    _RPDU2BankStatusLoadState_Type()
)
rPDU2BankStatusLoadState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankStatusLoadState.setStatus("mandatory")
_RPDU2BankStatusCurrent_Type = Integer32
_RPDU2BankStatusCurrent_Object = MibTableColumn
rPDU2BankStatusCurrent = _RPDU2BankStatusCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 8, 3, 1, 5),
    _RPDU2BankStatusCurrent_Type()
)
rPDU2BankStatusCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2BankStatusCurrent.setStatus("mandatory")
_RPDU2Outlet_ObjectIdentity = ObjectIdentity
rPDU2Outlet = _RPDU2Outlet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9)
)
_RPDU2OutletSwitchedTableSize_Type = Integer32
_RPDU2OutletSwitchedTableSize_Object = MibScalar
rPDU2OutletSwitchedTableSize = _RPDU2OutletSwitchedTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 1),
    _RPDU2OutletSwitchedTableSize_Type()
)
rPDU2OutletSwitchedTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedTableSize.setStatus("mandatory")
_RPDU2OutletSwitched_ObjectIdentity = ObjectIdentity
rPDU2OutletSwitched = _RPDU2OutletSwitched_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2)
)
_RPDU2OutletSwitchedConfigTable_Object = MibTable
rPDU2OutletSwitchedConfigTable = _RPDU2OutletSwitchedConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1)
)
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedConfigTable.setStatus("mandatory")
_RPDU2OutletSwitchedConfigEntry_Object = MibTableRow
rPDU2OutletSwitchedConfigEntry = _RPDU2OutletSwitchedConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1)
)
rPDU2OutletSwitchedConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2OutletSwitchedConfigIndex"),
)
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedConfigEntry.setStatus("mandatory")
_RPDU2OutletSwitchedConfigIndex_Type = Integer32
_RPDU2OutletSwitchedConfigIndex_Object = MibTableColumn
rPDU2OutletSwitchedConfigIndex = _RPDU2OutletSwitchedConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 1),
    _RPDU2OutletSwitchedConfigIndex_Type()
)
rPDU2OutletSwitchedConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedConfigIndex.setStatus("mandatory")
_RPDU2OutletSwitchedConfigModule_Type = Integer32
_RPDU2OutletSwitchedConfigModule_Object = MibTableColumn
rPDU2OutletSwitchedConfigModule = _RPDU2OutletSwitchedConfigModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 2),
    _RPDU2OutletSwitchedConfigModule_Type()
)
rPDU2OutletSwitchedConfigModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedConfigModule.setStatus("mandatory")
_RPDU2OutletSwitchedConfigName_Type = DisplayString
_RPDU2OutletSwitchedConfigName_Object = MibTableColumn
rPDU2OutletSwitchedConfigName = _RPDU2OutletSwitchedConfigName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 3),
    _RPDU2OutletSwitchedConfigName_Type()
)
rPDU2OutletSwitchedConfigName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedConfigName.setStatus("mandatory")
_RPDU2OutletSwitchedConfigNumber_Type = Integer32
_RPDU2OutletSwitchedConfigNumber_Object = MibTableColumn
rPDU2OutletSwitchedConfigNumber = _RPDU2OutletSwitchedConfigNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 4),
    _RPDU2OutletSwitchedConfigNumber_Type()
)
rPDU2OutletSwitchedConfigNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedConfigNumber.setStatus("mandatory")
_RPDU2OutletSwitchedConfigPowerOnTime_Type = Integer32
_RPDU2OutletSwitchedConfigPowerOnTime_Object = MibTableColumn
rPDU2OutletSwitchedConfigPowerOnTime = _RPDU2OutletSwitchedConfigPowerOnTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 5),
    _RPDU2OutletSwitchedConfigPowerOnTime_Type()
)
rPDU2OutletSwitchedConfigPowerOnTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedConfigPowerOnTime.setStatus("mandatory")
_RPDU2OutletSwitchedConfigPowerOffTime_Type = Integer32
_RPDU2OutletSwitchedConfigPowerOffTime_Object = MibTableColumn
rPDU2OutletSwitchedConfigPowerOffTime = _RPDU2OutletSwitchedConfigPowerOffTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 6),
    _RPDU2OutletSwitchedConfigPowerOffTime_Type()
)
rPDU2OutletSwitchedConfigPowerOffTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedConfigPowerOffTime.setStatus("mandatory")
_RPDU2OutletSwitchedConfigRebootDuration_Type = Integer32
_RPDU2OutletSwitchedConfigRebootDuration_Object = MibTableColumn
rPDU2OutletSwitchedConfigRebootDuration = _RPDU2OutletSwitchedConfigRebootDuration_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 1, 1, 7),
    _RPDU2OutletSwitchedConfigRebootDuration_Type()
)
rPDU2OutletSwitchedConfigRebootDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedConfigRebootDuration.setStatus("mandatory")
_RPDU2OutletSwitchedPropertiesTable_Object = MibTable
rPDU2OutletSwitchedPropertiesTable = _RPDU2OutletSwitchedPropertiesTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2)
)
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedPropertiesTable.setStatus("mandatory")
_RPDU2OutletSwitchedPropertiesEntry_Object = MibTableRow
rPDU2OutletSwitchedPropertiesEntry = _RPDU2OutletSwitchedPropertiesEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1)
)
rPDU2OutletSwitchedPropertiesEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2OutletSwitchedPropertiesIndex"),
)
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedPropertiesEntry.setStatus("mandatory")
_RPDU2OutletSwitchedPropertiesIndex_Type = Integer32
_RPDU2OutletSwitchedPropertiesIndex_Object = MibTableColumn
rPDU2OutletSwitchedPropertiesIndex = _RPDU2OutletSwitchedPropertiesIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 1),
    _RPDU2OutletSwitchedPropertiesIndex_Type()
)
rPDU2OutletSwitchedPropertiesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedPropertiesIndex.setStatus("mandatory")
_RPDU2OutletSwitchedPropertiesModule_Type = Integer32
_RPDU2OutletSwitchedPropertiesModule_Object = MibTableColumn
rPDU2OutletSwitchedPropertiesModule = _RPDU2OutletSwitchedPropertiesModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 2),
    _RPDU2OutletSwitchedPropertiesModule_Type()
)
rPDU2OutletSwitchedPropertiesModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedPropertiesModule.setStatus("mandatory")
_RPDU2OutletSwitchedPropertiesName_Type = DisplayString
_RPDU2OutletSwitchedPropertiesName_Object = MibTableColumn
rPDU2OutletSwitchedPropertiesName = _RPDU2OutletSwitchedPropertiesName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 3),
    _RPDU2OutletSwitchedPropertiesName_Type()
)
rPDU2OutletSwitchedPropertiesName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedPropertiesName.setStatus("mandatory")
_RPDU2OutletSwitchedPropertiesNumber_Type = Integer32
_RPDU2OutletSwitchedPropertiesNumber_Object = MibTableColumn
rPDU2OutletSwitchedPropertiesNumber = _RPDU2OutletSwitchedPropertiesNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 4),
    _RPDU2OutletSwitchedPropertiesNumber_Type()
)
rPDU2OutletSwitchedPropertiesNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedPropertiesNumber.setStatus("mandatory")
_RPDU2OutletSwitchedPropertiesPhaseLayout_Type = Rpdu2OutletPhaseLayoutType
_RPDU2OutletSwitchedPropertiesPhaseLayout_Object = MibTableColumn
rPDU2OutletSwitchedPropertiesPhaseLayout = _RPDU2OutletSwitchedPropertiesPhaseLayout_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 5),
    _RPDU2OutletSwitchedPropertiesPhaseLayout_Type()
)
rPDU2OutletSwitchedPropertiesPhaseLayout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedPropertiesPhaseLayout.setStatus("mandatory")
_RPDU2OutletSwitchedPropertiesBank_Type = Integer32
_RPDU2OutletSwitchedPropertiesBank_Object = MibTableColumn
rPDU2OutletSwitchedPropertiesBank = _RPDU2OutletSwitchedPropertiesBank_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 2, 1, 6),
    _RPDU2OutletSwitchedPropertiesBank_Type()
)
rPDU2OutletSwitchedPropertiesBank.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedPropertiesBank.setStatus("mandatory")
_RPDU2OutletSwitchedStatusTable_Object = MibTable
rPDU2OutletSwitchedStatusTable = _RPDU2OutletSwitchedStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3)
)
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedStatusTable.setStatus("mandatory")
_RPDU2OutletSwitchedStatusEntry_Object = MibTableRow
rPDU2OutletSwitchedStatusEntry = _RPDU2OutletSwitchedStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1)
)
rPDU2OutletSwitchedStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2OutletSwitchedStatusIndex"),
)
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedStatusEntry.setStatus("mandatory")
_RPDU2OutletSwitchedStatusIndex_Type = Integer32
_RPDU2OutletSwitchedStatusIndex_Object = MibTableColumn
rPDU2OutletSwitchedStatusIndex = _RPDU2OutletSwitchedStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 1),
    _RPDU2OutletSwitchedStatusIndex_Type()
)
rPDU2OutletSwitchedStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedStatusIndex.setStatus("mandatory")
_RPDU2OutletSwitchedStatusModule_Type = Integer32
_RPDU2OutletSwitchedStatusModule_Object = MibTableColumn
rPDU2OutletSwitchedStatusModule = _RPDU2OutletSwitchedStatusModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 2),
    _RPDU2OutletSwitchedStatusModule_Type()
)
rPDU2OutletSwitchedStatusModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedStatusModule.setStatus("mandatory")
_RPDU2OutletSwitchedStatusName_Type = DisplayString
_RPDU2OutletSwitchedStatusName_Object = MibTableColumn
rPDU2OutletSwitchedStatusName = _RPDU2OutletSwitchedStatusName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 3),
    _RPDU2OutletSwitchedStatusName_Type()
)
rPDU2OutletSwitchedStatusName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedStatusName.setStatus("mandatory")
_RPDU2OutletSwitchedStatusNumber_Type = Integer32
_RPDU2OutletSwitchedStatusNumber_Object = MibTableColumn
rPDU2OutletSwitchedStatusNumber = _RPDU2OutletSwitchedStatusNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 4),
    _RPDU2OutletSwitchedStatusNumber_Type()
)
rPDU2OutletSwitchedStatusNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedStatusNumber.setStatus("mandatory")


class _RPDU2OutletSwitchedStatusState_Type(Integer32):
    """Custom type rPDU2OutletSwitchedStatusState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_RPDU2OutletSwitchedStatusState_Type.__name__ = "Integer32"
_RPDU2OutletSwitchedStatusState_Object = MibTableColumn
rPDU2OutletSwitchedStatusState = _RPDU2OutletSwitchedStatusState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 5),
    _RPDU2OutletSwitchedStatusState_Type()
)
rPDU2OutletSwitchedStatusState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedStatusState.setStatus("mandatory")


class _RPDU2OutletSwitchedStatusCommandPending_Type(Integer32):
    """Custom type rPDU2OutletSwitchedStatusCommandPending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("commandPending", 1),
          ("commandPendingUnknown", 3),
          ("noCommandPending", 2))
    )


_RPDU2OutletSwitchedStatusCommandPending_Type.__name__ = "Integer32"
_RPDU2OutletSwitchedStatusCommandPending_Object = MibTableColumn
rPDU2OutletSwitchedStatusCommandPending = _RPDU2OutletSwitchedStatusCommandPending_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 3, 1, 6),
    _RPDU2OutletSwitchedStatusCommandPending_Type()
)
rPDU2OutletSwitchedStatusCommandPending.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedStatusCommandPending.setStatus("mandatory")
_RPDU2OutletSwitchedControlTable_Object = MibTable
rPDU2OutletSwitchedControlTable = _RPDU2OutletSwitchedControlTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4)
)
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedControlTable.setStatus("mandatory")
_RPDU2OutletSwitchedControlEntry_Object = MibTableRow
rPDU2OutletSwitchedControlEntry = _RPDU2OutletSwitchedControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1)
)
rPDU2OutletSwitchedControlEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2OutletSwitchedControlIndex"),
)
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedControlEntry.setStatus("mandatory")
_RPDU2OutletSwitchedControlIndex_Type = Integer32
_RPDU2OutletSwitchedControlIndex_Object = MibTableColumn
rPDU2OutletSwitchedControlIndex = _RPDU2OutletSwitchedControlIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 1),
    _RPDU2OutletSwitchedControlIndex_Type()
)
rPDU2OutletSwitchedControlIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedControlIndex.setStatus("mandatory")
_RPDU2OutletSwitchedControlModule_Type = Integer32
_RPDU2OutletSwitchedControlModule_Object = MibTableColumn
rPDU2OutletSwitchedControlModule = _RPDU2OutletSwitchedControlModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 2),
    _RPDU2OutletSwitchedControlModule_Type()
)
rPDU2OutletSwitchedControlModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedControlModule.setStatus("mandatory")
_RPDU2OutletSwitchedControlName_Type = DisplayString
_RPDU2OutletSwitchedControlName_Object = MibTableColumn
rPDU2OutletSwitchedControlName = _RPDU2OutletSwitchedControlName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 3),
    _RPDU2OutletSwitchedControlName_Type()
)
rPDU2OutletSwitchedControlName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedControlName.setStatus("mandatory")
_RPDU2OutletSwitchedControlNumber_Type = Integer32
_RPDU2OutletSwitchedControlNumber_Object = MibTableColumn
rPDU2OutletSwitchedControlNumber = _RPDU2OutletSwitchedControlNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 4),
    _RPDU2OutletSwitchedControlNumber_Type()
)
rPDU2OutletSwitchedControlNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedControlNumber.setStatus("mandatory")


class _RPDU2OutletSwitchedControlCommand_Type(Integer32):
    """Custom type rPDU2OutletSwitchedControlCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("cancelPendingCommand", 8),
          ("delayedOff", 6),
          ("delayedOn", 5),
          ("delayedReboot", 7),
          ("immediateOff", 2),
          ("immediateOn", 1),
          ("immediateReboot", 3),
          ("outletUnknown", 4))
    )


_RPDU2OutletSwitchedControlCommand_Type.__name__ = "Integer32"
_RPDU2OutletSwitchedControlCommand_Object = MibTableColumn
rPDU2OutletSwitchedControlCommand = _RPDU2OutletSwitchedControlCommand_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 2, 4, 1, 5),
    _RPDU2OutletSwitchedControlCommand_Type()
)
rPDU2OutletSwitchedControlCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2OutletSwitchedControlCommand.setStatus("mandatory")
_RPDU2OutletMeteredTableSize_Type = Integer32
_RPDU2OutletMeteredTableSize_Object = MibScalar
rPDU2OutletMeteredTableSize = _RPDU2OutletMeteredTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 3),
    _RPDU2OutletMeteredTableSize_Type()
)
rPDU2OutletMeteredTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredTableSize.setStatus("mandatory")
_RPDU2OutletMetered_ObjectIdentity = ObjectIdentity
rPDU2OutletMetered = _RPDU2OutletMetered_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4)
)
_RPDU2OutletMeteredConfigTable_Object = MibTable
rPDU2OutletMeteredConfigTable = _RPDU2OutletMeteredConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1)
)
if mibBuilder.loadTexts:
    rPDU2OutletMeteredConfigTable.setStatus("mandatory")
_RPDU2OutletMeteredConfigEntry_Object = MibTableRow
rPDU2OutletMeteredConfigEntry = _RPDU2OutletMeteredConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1)
)
rPDU2OutletMeteredConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2OutletMeteredConfigIndex"),
)
if mibBuilder.loadTexts:
    rPDU2OutletMeteredConfigEntry.setStatus("mandatory")
_RPDU2OutletMeteredConfigIndex_Type = Integer32
_RPDU2OutletMeteredConfigIndex_Object = MibTableColumn
rPDU2OutletMeteredConfigIndex = _RPDU2OutletMeteredConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 1),
    _RPDU2OutletMeteredConfigIndex_Type()
)
rPDU2OutletMeteredConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredConfigIndex.setStatus("mandatory")
_RPDU2OutletMeteredConfigModule_Type = Integer32
_RPDU2OutletMeteredConfigModule_Object = MibTableColumn
rPDU2OutletMeteredConfigModule = _RPDU2OutletMeteredConfigModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 2),
    _RPDU2OutletMeteredConfigModule_Type()
)
rPDU2OutletMeteredConfigModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredConfigModule.setStatus("mandatory")
_RPDU2OutletMeteredConfigName_Type = DisplayString
_RPDU2OutletMeteredConfigName_Object = MibTableColumn
rPDU2OutletMeteredConfigName = _RPDU2OutletMeteredConfigName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 3),
    _RPDU2OutletMeteredConfigName_Type()
)
rPDU2OutletMeteredConfigName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredConfigName.setStatus("mandatory")
_RPDU2OutletMeteredConfigNumber_Type = Integer32
_RPDU2OutletMeteredConfigNumber_Object = MibTableColumn
rPDU2OutletMeteredConfigNumber = _RPDU2OutletMeteredConfigNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 4),
    _RPDU2OutletMeteredConfigNumber_Type()
)
rPDU2OutletMeteredConfigNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredConfigNumber.setStatus("mandatory")
_RPDU2OutletMeteredConfigLowLoadCurrentThreshold_Type = Integer32
_RPDU2OutletMeteredConfigLowLoadCurrentThreshold_Object = MibTableColumn
rPDU2OutletMeteredConfigLowLoadCurrentThreshold = _RPDU2OutletMeteredConfigLowLoadCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 5),
    _RPDU2OutletMeteredConfigLowLoadCurrentThreshold_Type()
)
rPDU2OutletMeteredConfigLowLoadCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredConfigLowLoadCurrentThreshold.setStatus("mandatory")
_RPDU2OutletMeteredConfigNearOverloadCurrentThreshold_Type = Integer32
_RPDU2OutletMeteredConfigNearOverloadCurrentThreshold_Object = MibTableColumn
rPDU2OutletMeteredConfigNearOverloadCurrentThreshold = _RPDU2OutletMeteredConfigNearOverloadCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 6),
    _RPDU2OutletMeteredConfigNearOverloadCurrentThreshold_Type()
)
rPDU2OutletMeteredConfigNearOverloadCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredConfigNearOverloadCurrentThreshold.setStatus("mandatory")
_RPDU2OutletMeteredConfigOverloadCurrentThreshold_Type = Integer32
_RPDU2OutletMeteredConfigOverloadCurrentThreshold_Object = MibTableColumn
rPDU2OutletMeteredConfigOverloadCurrentThreshold = _RPDU2OutletMeteredConfigOverloadCurrentThreshold_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 1, 1, 7),
    _RPDU2OutletMeteredConfigOverloadCurrentThreshold_Type()
)
rPDU2OutletMeteredConfigOverloadCurrentThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredConfigOverloadCurrentThreshold.setStatus("mandatory")
_RPDU2OutletMeteredPropertiesTable_Object = MibTable
rPDU2OutletMeteredPropertiesTable = _RPDU2OutletMeteredPropertiesTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2)
)
if mibBuilder.loadTexts:
    rPDU2OutletMeteredPropertiesTable.setStatus("mandatory")
_RPDU2OutletMeteredPropertiesEntry_Object = MibTableRow
rPDU2OutletMeteredPropertiesEntry = _RPDU2OutletMeteredPropertiesEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1)
)
rPDU2OutletMeteredPropertiesEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2OutletMeteredPropertiesIndex"),
)
if mibBuilder.loadTexts:
    rPDU2OutletMeteredPropertiesEntry.setStatus("mandatory")
_RPDU2OutletMeteredPropertiesIndex_Type = Integer32
_RPDU2OutletMeteredPropertiesIndex_Object = MibTableColumn
rPDU2OutletMeteredPropertiesIndex = _RPDU2OutletMeteredPropertiesIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 1),
    _RPDU2OutletMeteredPropertiesIndex_Type()
)
rPDU2OutletMeteredPropertiesIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredPropertiesIndex.setStatus("mandatory")
_RPDU2OutletMeteredPropertiesModule_Type = Integer32
_RPDU2OutletMeteredPropertiesModule_Object = MibTableColumn
rPDU2OutletMeteredPropertiesModule = _RPDU2OutletMeteredPropertiesModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 2),
    _RPDU2OutletMeteredPropertiesModule_Type()
)
rPDU2OutletMeteredPropertiesModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredPropertiesModule.setStatus("mandatory")
_RPDU2OutletMeteredPropertiesName_Type = DisplayString
_RPDU2OutletMeteredPropertiesName_Object = MibTableColumn
rPDU2OutletMeteredPropertiesName = _RPDU2OutletMeteredPropertiesName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 3),
    _RPDU2OutletMeteredPropertiesName_Type()
)
rPDU2OutletMeteredPropertiesName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredPropertiesName.setStatus("mandatory")
_RPDU2OutletMeteredPropertiesNumber_Type = Integer32
_RPDU2OutletMeteredPropertiesNumber_Object = MibTableColumn
rPDU2OutletMeteredPropertiesNumber = _RPDU2OutletMeteredPropertiesNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 4),
    _RPDU2OutletMeteredPropertiesNumber_Type()
)
rPDU2OutletMeteredPropertiesNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredPropertiesNumber.setStatus("mandatory")
_RPDU2OutletMeteredPropertiesLayout_Type = Rpdu2OutletPhaseLayoutType
_RPDU2OutletMeteredPropertiesLayout_Object = MibTableColumn
rPDU2OutletMeteredPropertiesLayout = _RPDU2OutletMeteredPropertiesLayout_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 5),
    _RPDU2OutletMeteredPropertiesLayout_Type()
)
rPDU2OutletMeteredPropertiesLayout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredPropertiesLayout.setStatus("mandatory")
_RPDU2OutletMeteredPropertiesPowerRating_Type = Integer32
_RPDU2OutletMeteredPropertiesPowerRating_Object = MibTableColumn
rPDU2OutletMeteredPropertiesPowerRating = _RPDU2OutletMeteredPropertiesPowerRating_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 6),
    _RPDU2OutletMeteredPropertiesPowerRating_Type()
)
rPDU2OutletMeteredPropertiesPowerRating.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredPropertiesPowerRating.setStatus("mandatory")
_RPDU2OutletMeteredPropertiesBank_Type = Integer32
_RPDU2OutletMeteredPropertiesBank_Object = MibTableColumn
rPDU2OutletMeteredPropertiesBank = _RPDU2OutletMeteredPropertiesBank_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 2, 1, 7),
    _RPDU2OutletMeteredPropertiesBank_Type()
)
rPDU2OutletMeteredPropertiesBank.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredPropertiesBank.setStatus("mandatory")
_RPDU2OutletMeteredStatusTable_Object = MibTable
rPDU2OutletMeteredStatusTable = _RPDU2OutletMeteredStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3)
)
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusTable.setStatus("mandatory")
_RPDU2OutletMeteredStatusEntry_Object = MibTableRow
rPDU2OutletMeteredStatusEntry = _RPDU2OutletMeteredStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1)
)
rPDU2OutletMeteredStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2OutletMeteredStatusIndex"),
)
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusEntry.setStatus("mandatory")
_RPDU2OutletMeteredStatusIndex_Type = Integer32
_RPDU2OutletMeteredStatusIndex_Object = MibTableColumn
rPDU2OutletMeteredStatusIndex = _RPDU2OutletMeteredStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 1),
    _RPDU2OutletMeteredStatusIndex_Type()
)
rPDU2OutletMeteredStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusIndex.setStatus("mandatory")
_RPDU2OutletMeteredStatusModule_Type = Integer32
_RPDU2OutletMeteredStatusModule_Object = MibTableColumn
rPDU2OutletMeteredStatusModule = _RPDU2OutletMeteredStatusModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 2),
    _RPDU2OutletMeteredStatusModule_Type()
)
rPDU2OutletMeteredStatusModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusModule.setStatus("mandatory")
_RPDU2OutletMeteredStatusName_Type = DisplayString
_RPDU2OutletMeteredStatusName_Object = MibTableColumn
rPDU2OutletMeteredStatusName = _RPDU2OutletMeteredStatusName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 3),
    _RPDU2OutletMeteredStatusName_Type()
)
rPDU2OutletMeteredStatusName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusName.setStatus("mandatory")
_RPDU2OutletMeteredStatusNumber_Type = Integer32
_RPDU2OutletMeteredStatusNumber_Object = MibTableColumn
rPDU2OutletMeteredStatusNumber = _RPDU2OutletMeteredStatusNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 4),
    _RPDU2OutletMeteredStatusNumber_Type()
)
rPDU2OutletMeteredStatusNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusNumber.setStatus("mandatory")


class _RPDU2OutletMeteredStatusState_Type(Integer32):
    """Custom type rPDU2OutletMeteredStatusState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("lowLoad", 1),
          ("nearOverload", 3),
          ("normal", 2),
          ("overload", 4))
    )


_RPDU2OutletMeteredStatusState_Type.__name__ = "Integer32"
_RPDU2OutletMeteredStatusState_Object = MibTableColumn
rPDU2OutletMeteredStatusState = _RPDU2OutletMeteredStatusState_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 5),
    _RPDU2OutletMeteredStatusState_Type()
)
rPDU2OutletMeteredStatusState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusState.setStatus("mandatory")
_RPDU2OutletMeteredStatusCurrent_Type = Integer32
_RPDU2OutletMeteredStatusCurrent_Object = MibTableColumn
rPDU2OutletMeteredStatusCurrent = _RPDU2OutletMeteredStatusCurrent_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 6),
    _RPDU2OutletMeteredStatusCurrent_Type()
)
rPDU2OutletMeteredStatusCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusCurrent.setStatus("mandatory")
_RPDU2OutletMeteredStatusPower_Type = Integer32
_RPDU2OutletMeteredStatusPower_Object = MibTableColumn
rPDU2OutletMeteredStatusPower = _RPDU2OutletMeteredStatusPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 7),
    _RPDU2OutletMeteredStatusPower_Type()
)
rPDU2OutletMeteredStatusPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusPower.setStatus("mandatory")
_RPDU2OutletMeteredStatusPeakPower_Type = Integer32
_RPDU2OutletMeteredStatusPeakPower_Object = MibTableColumn
rPDU2OutletMeteredStatusPeakPower = _RPDU2OutletMeteredStatusPeakPower_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 8),
    _RPDU2OutletMeteredStatusPeakPower_Type()
)
rPDU2OutletMeteredStatusPeakPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusPeakPower.setStatus("mandatory")
_RPDU2OutletMeteredStatusPeakPowerTimestamp_Type = DisplayString
_RPDU2OutletMeteredStatusPeakPowerTimestamp_Object = MibTableColumn
rPDU2OutletMeteredStatusPeakPowerTimestamp = _RPDU2OutletMeteredStatusPeakPowerTimestamp_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 9),
    _RPDU2OutletMeteredStatusPeakPowerTimestamp_Type()
)
rPDU2OutletMeteredStatusPeakPowerTimestamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusPeakPowerTimestamp.setStatus("mandatory")
_RPDU2OutletMeteredStatusPeakPowerStartTime_Type = DisplayString
_RPDU2OutletMeteredStatusPeakPowerStartTime_Object = MibTableColumn
rPDU2OutletMeteredStatusPeakPowerStartTime = _RPDU2OutletMeteredStatusPeakPowerStartTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 10),
    _RPDU2OutletMeteredStatusPeakPowerStartTime_Type()
)
rPDU2OutletMeteredStatusPeakPowerStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusPeakPowerStartTime.setStatus("mandatory")
_RPDU2OutletMeteredStatusEnergy_Type = Integer32
_RPDU2OutletMeteredStatusEnergy_Object = MibTableColumn
rPDU2OutletMeteredStatusEnergy = _RPDU2OutletMeteredStatusEnergy_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 9, 4, 3, 1, 11),
    _RPDU2OutletMeteredStatusEnergy_Type()
)
rPDU2OutletMeteredStatusEnergy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2OutletMeteredStatusEnergy.setStatus("mandatory")
_RPDU2Sensor_ObjectIdentity = ObjectIdentity
rPDU2Sensor = _RPDU2Sensor_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10)
)
_RPDU2SensorTempHumidityTableSize_Type = Integer32
_RPDU2SensorTempHumidityTableSize_Object = MibScalar
rPDU2SensorTempHumidityTableSize = _RPDU2SensorTempHumidityTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 1),
    _RPDU2SensorTempHumidityTableSize_Type()
)
rPDU2SensorTempHumidityTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityTableSize.setStatus("mandatory")
_RPDU2SensorTempHumidity_ObjectIdentity = ObjectIdentity
rPDU2SensorTempHumidity = _RPDU2SensorTempHumidity_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2)
)
_RPDU2SensorTempHumidityConfigTable_Object = MibTable
rPDU2SensorTempHumidityConfigTable = _RPDU2SensorTempHumidityConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1)
)
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigTable.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigEntry_Object = MibTableRow
rPDU2SensorTempHumidityConfigEntry = _RPDU2SensorTempHumidityConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1)
)
rPDU2SensorTempHumidityConfigEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2SensorTempHumidityConfigIndex"),
)
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigEntry.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigIndex_Type = Integer32
_RPDU2SensorTempHumidityConfigIndex_Object = MibTableColumn
rPDU2SensorTempHumidityConfigIndex = _RPDU2SensorTempHumidityConfigIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 1),
    _RPDU2SensorTempHumidityConfigIndex_Type()
)
rPDU2SensorTempHumidityConfigIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigIndex.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigModule_Type = Integer32
_RPDU2SensorTempHumidityConfigModule_Object = MibTableColumn
rPDU2SensorTempHumidityConfigModule = _RPDU2SensorTempHumidityConfigModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 2),
    _RPDU2SensorTempHumidityConfigModule_Type()
)
rPDU2SensorTempHumidityConfigModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigModule.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigName_Type = DisplayString
_RPDU2SensorTempHumidityConfigName_Object = MibTableColumn
rPDU2SensorTempHumidityConfigName = _RPDU2SensorTempHumidityConfigName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 3),
    _RPDU2SensorTempHumidityConfigName_Type()
)
rPDU2SensorTempHumidityConfigName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigName.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigNumber_Type = Integer32
_RPDU2SensorTempHumidityConfigNumber_Object = MibTableColumn
rPDU2SensorTempHumidityConfigNumber = _RPDU2SensorTempHumidityConfigNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 4),
    _RPDU2SensorTempHumidityConfigNumber_Type()
)
rPDU2SensorTempHumidityConfigNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigNumber.setStatus("mandatory")


class _RPDU2SensorTempHumidityConfigTemperatureAlarmEnable_Type(Integer32):
    """Custom type rPDU2SensorTempHumidityConfigTemperatureAlarmEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_RPDU2SensorTempHumidityConfigTemperatureAlarmEnable_Type.__name__ = "Integer32"
_RPDU2SensorTempHumidityConfigTemperatureAlarmEnable_Object = MibTableColumn
rPDU2SensorTempHumidityConfigTemperatureAlarmEnable = _RPDU2SensorTempHumidityConfigTemperatureAlarmEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 5),
    _RPDU2SensorTempHumidityConfigTemperatureAlarmEnable_Type()
)
rPDU2SensorTempHumidityConfigTemperatureAlarmEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigTemperatureAlarmEnable.setStatus("mandatory")


class _RPDU2SensorTempHumidityConfigHumidityAlarmEnable_Type(Integer32):
    """Custom type rPDU2SensorTempHumidityConfigHumidityAlarmEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_RPDU2SensorTempHumidityConfigHumidityAlarmEnable_Type.__name__ = "Integer32"
_RPDU2SensorTempHumidityConfigHumidityAlarmEnable_Object = MibTableColumn
rPDU2SensorTempHumidityConfigHumidityAlarmEnable = _RPDU2SensorTempHumidityConfigHumidityAlarmEnable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 6),
    _RPDU2SensorTempHumidityConfigHumidityAlarmEnable_Type()
)
rPDU2SensorTempHumidityConfigHumidityAlarmEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigHumidityAlarmEnable.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigTempMaxThreshF_Type = Integer32
_RPDU2SensorTempHumidityConfigTempMaxThreshF_Object = MibTableColumn
rPDU2SensorTempHumidityConfigTempMaxThreshF = _RPDU2SensorTempHumidityConfigTempMaxThreshF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 7),
    _RPDU2SensorTempHumidityConfigTempMaxThreshF_Type()
)
rPDU2SensorTempHumidityConfigTempMaxThreshF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigTempMaxThreshF.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigTempHighThreshF_Type = Integer32
_RPDU2SensorTempHumidityConfigTempHighThreshF_Object = MibTableColumn
rPDU2SensorTempHumidityConfigTempHighThreshF = _RPDU2SensorTempHumidityConfigTempHighThreshF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 8),
    _RPDU2SensorTempHumidityConfigTempHighThreshF_Type()
)
rPDU2SensorTempHumidityConfigTempHighThreshF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigTempHighThreshF.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigTempHysteresisF_Type = Integer32
_RPDU2SensorTempHumidityConfigTempHysteresisF_Object = MibTableColumn
rPDU2SensorTempHumidityConfigTempHysteresisF = _RPDU2SensorTempHumidityConfigTempHysteresisF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 9),
    _RPDU2SensorTempHumidityConfigTempHysteresisF_Type()
)
rPDU2SensorTempHumidityConfigTempHysteresisF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigTempHysteresisF.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigTempMaxThreshC_Type = Integer32
_RPDU2SensorTempHumidityConfigTempMaxThreshC_Object = MibTableColumn
rPDU2SensorTempHumidityConfigTempMaxThreshC = _RPDU2SensorTempHumidityConfigTempMaxThreshC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 10),
    _RPDU2SensorTempHumidityConfigTempMaxThreshC_Type()
)
rPDU2SensorTempHumidityConfigTempMaxThreshC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigTempMaxThreshC.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigTempHighThreshC_Type = Integer32
_RPDU2SensorTempHumidityConfigTempHighThreshC_Object = MibTableColumn
rPDU2SensorTempHumidityConfigTempHighThreshC = _RPDU2SensorTempHumidityConfigTempHighThreshC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 11),
    _RPDU2SensorTempHumidityConfigTempHighThreshC_Type()
)
rPDU2SensorTempHumidityConfigTempHighThreshC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigTempHighThreshC.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigTempHysteresisC_Type = Integer32
_RPDU2SensorTempHumidityConfigTempHysteresisC_Object = MibTableColumn
rPDU2SensorTempHumidityConfigTempHysteresisC = _RPDU2SensorTempHumidityConfigTempHysteresisC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 12),
    _RPDU2SensorTempHumidityConfigTempHysteresisC_Type()
)
rPDU2SensorTempHumidityConfigTempHysteresisC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigTempHysteresisC.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigHumidityLowThresh_Type = Integer32
_RPDU2SensorTempHumidityConfigHumidityLowThresh_Object = MibTableColumn
rPDU2SensorTempHumidityConfigHumidityLowThresh = _RPDU2SensorTempHumidityConfigHumidityLowThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 13),
    _RPDU2SensorTempHumidityConfigHumidityLowThresh_Type()
)
rPDU2SensorTempHumidityConfigHumidityLowThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigHumidityLowThresh.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigHumidityMinThresh_Type = Integer32
_RPDU2SensorTempHumidityConfigHumidityMinThresh_Object = MibTableColumn
rPDU2SensorTempHumidityConfigHumidityMinThresh = _RPDU2SensorTempHumidityConfigHumidityMinThresh_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 14),
    _RPDU2SensorTempHumidityConfigHumidityMinThresh_Type()
)
rPDU2SensorTempHumidityConfigHumidityMinThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigHumidityMinThresh.setStatus("mandatory")
_RPDU2SensorTempHumidityConfigHumidityHysteresis_Type = Integer32
_RPDU2SensorTempHumidityConfigHumidityHysteresis_Object = MibTableColumn
rPDU2SensorTempHumidityConfigHumidityHysteresis = _RPDU2SensorTempHumidityConfigHumidityHysteresis_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 1, 1, 15),
    _RPDU2SensorTempHumidityConfigHumidityHysteresis_Type()
)
rPDU2SensorTempHumidityConfigHumidityHysteresis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityConfigHumidityHysteresis.setStatus("mandatory")
_RPDU2SensorTempHumidityStatusTable_Object = MibTable
rPDU2SensorTempHumidityStatusTable = _RPDU2SensorTempHumidityStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2)
)
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusTable.setStatus("mandatory")
_RPDU2SensorTempHumidityStatusEntry_Object = MibTableRow
rPDU2SensorTempHumidityStatusEntry = _RPDU2SensorTempHumidityStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1)
)
rPDU2SensorTempHumidityStatusEntry.setIndexNames(
    (0, "POWERNET-MIB", "rPDU2SensorTempHumidityStatusIndex"),
)
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusEntry.setStatus("mandatory")
_RPDU2SensorTempHumidityStatusIndex_Type = Integer32
_RPDU2SensorTempHumidityStatusIndex_Object = MibTableColumn
rPDU2SensorTempHumidityStatusIndex = _RPDU2SensorTempHumidityStatusIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 1),
    _RPDU2SensorTempHumidityStatusIndex_Type()
)
rPDU2SensorTempHumidityStatusIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusIndex.setStatus("mandatory")
_RPDU2SensorTempHumidityStatusModule_Type = Integer32
_RPDU2SensorTempHumidityStatusModule_Object = MibTableColumn
rPDU2SensorTempHumidityStatusModule = _RPDU2SensorTempHumidityStatusModule_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 2),
    _RPDU2SensorTempHumidityStatusModule_Type()
)
rPDU2SensorTempHumidityStatusModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusModule.setStatus("mandatory")
_RPDU2SensorTempHumidityStatusName_Type = DisplayString
_RPDU2SensorTempHumidityStatusName_Object = MibTableColumn
rPDU2SensorTempHumidityStatusName = _RPDU2SensorTempHumidityStatusName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 3),
    _RPDU2SensorTempHumidityStatusName_Type()
)
rPDU2SensorTempHumidityStatusName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusName.setStatus("mandatory")
_RPDU2SensorTempHumidityStatusNumber_Type = Integer32
_RPDU2SensorTempHumidityStatusNumber_Object = MibTableColumn
rPDU2SensorTempHumidityStatusNumber = _RPDU2SensorTempHumidityStatusNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 4),
    _RPDU2SensorTempHumidityStatusNumber_Type()
)
rPDU2SensorTempHumidityStatusNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusNumber.setStatus("mandatory")


class _RPDU2SensorTempHumidityStatusType_Type(Integer32):
    """Custom type rPDU2SensorTempHumidityStatusType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("temperatureHumidity", 2),
          ("temperatureOnly", 1))
    )


_RPDU2SensorTempHumidityStatusType_Type.__name__ = "Integer32"
_RPDU2SensorTempHumidityStatusType_Object = MibTableColumn
rPDU2SensorTempHumidityStatusType = _RPDU2SensorTempHumidityStatusType_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 5),
    _RPDU2SensorTempHumidityStatusType_Type()
)
rPDU2SensorTempHumidityStatusType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusType.setStatus("mandatory")


class _RPDU2SensorTempHumidityStatusCommStatus_Type(Integer32):
    """Custom type rPDU2SensorTempHumidityStatusCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("commsLost", 3),
          ("commsOK", 2),
          ("notInstalled", 1))
    )


_RPDU2SensorTempHumidityStatusCommStatus_Type.__name__ = "Integer32"
_RPDU2SensorTempHumidityStatusCommStatus_Object = MibTableColumn
rPDU2SensorTempHumidityStatusCommStatus = _RPDU2SensorTempHumidityStatusCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 6),
    _RPDU2SensorTempHumidityStatusCommStatus_Type()
)
rPDU2SensorTempHumidityStatusCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusCommStatus.setStatus("mandatory")
_RPDU2SensorTempHumidityStatusTempF_Type = Integer32
_RPDU2SensorTempHumidityStatusTempF_Object = MibTableColumn
rPDU2SensorTempHumidityStatusTempF = _RPDU2SensorTempHumidityStatusTempF_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 7),
    _RPDU2SensorTempHumidityStatusTempF_Type()
)
rPDU2SensorTempHumidityStatusTempF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusTempF.setStatus("mandatory")
_RPDU2SensorTempHumidityStatusTempC_Type = Integer32
_RPDU2SensorTempHumidityStatusTempC_Object = MibTableColumn
rPDU2SensorTempHumidityStatusTempC = _RPDU2SensorTempHumidityStatusTempC_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 8),
    _RPDU2SensorTempHumidityStatusTempC_Type()
)
rPDU2SensorTempHumidityStatusTempC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusTempC.setStatus("mandatory")


class _RPDU2SensorTempHumidityStatusTempStatus_Type(Integer32):
    """Custom type rPDU2SensorTempHumidityStatusTempStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("aboveHigh", 5),
          ("aboveMax", 6),
          ("belowLow", 3),
          ("belowMin", 2),
          ("normal", 4),
          ("notPresent", 1))
    )


_RPDU2SensorTempHumidityStatusTempStatus_Type.__name__ = "Integer32"
_RPDU2SensorTempHumidityStatusTempStatus_Object = MibTableColumn
rPDU2SensorTempHumidityStatusTempStatus = _RPDU2SensorTempHumidityStatusTempStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 9),
    _RPDU2SensorTempHumidityStatusTempStatus_Type()
)
rPDU2SensorTempHumidityStatusTempStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusTempStatus.setStatus("mandatory")
_RPDU2SensorTempHumidityStatusRelativeHumidity_Type = Integer32
_RPDU2SensorTempHumidityStatusRelativeHumidity_Object = MibTableColumn
rPDU2SensorTempHumidityStatusRelativeHumidity = _RPDU2SensorTempHumidityStatusRelativeHumidity_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 10),
    _RPDU2SensorTempHumidityStatusRelativeHumidity_Type()
)
rPDU2SensorTempHumidityStatusRelativeHumidity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusRelativeHumidity.setStatus("mandatory")


class _RPDU2SensorTempHumidityStatusHumidityStatus_Type(Integer32):
    """Custom type rPDU2SensorTempHumidityStatusHumidityStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("aboveHigh", 5),
          ("aboveMax", 6),
          ("belowLow", 3),
          ("belowMin", 2),
          ("normal", 4),
          ("notPresent", 1))
    )


_RPDU2SensorTempHumidityStatusHumidityStatus_Type.__name__ = "Integer32"
_RPDU2SensorTempHumidityStatusHumidityStatus_Object = MibTableColumn
rPDU2SensorTempHumidityStatusHumidityStatus = _RPDU2SensorTempHumidityStatusHumidityStatus_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 1, 26, 10, 2, 2, 1, 11),
    _RPDU2SensorTempHumidityStatusHumidityStatus_Type()
)
rPDU2SensorTempHumidityStatusHumidityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rPDU2SensorTempHumidityStatusHumidityStatus.setStatus("mandatory")
_Software_ObjectIdentity = ObjectIdentity
software = _Software_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 2)
)
_PowerNetSubAgent_ObjectIdentity = ObjectIdentity
powerNetSubAgent = _PowerNetSubAgent_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1)
)
_PowerNetSoftwareSystem_ObjectIdentity = ObjectIdentity
powerNetSoftwareSystem = _PowerNetSoftwareSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1)
)


class _PowerNetSoftwareSystemDescription_Type(DisplayString):
    """Custom type powerNetSoftwareSystemDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 79),
    )


_PowerNetSoftwareSystemDescription_Type.__name__ = "DisplayString"
_PowerNetSoftwareSystemDescription_Object = MibScalar
powerNetSoftwareSystemDescription = _PowerNetSoftwareSystemDescription_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 1),
    _PowerNetSoftwareSystemDescription_Type()
)
powerNetSoftwareSystemDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerNetSoftwareSystemDescription.setStatus("mandatory")
_PowerNetSoftwareOid_Type = ObjectIdentifier
_PowerNetSoftwareOid_Object = MibScalar
powerNetSoftwareOid = _PowerNetSoftwareOid_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 2),
    _PowerNetSoftwareOid_Type()
)
powerNetSoftwareOid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerNetSoftwareOid.setStatus("mandatory")
_PowerNetSoftwareSystemUpTime_Type = TimeTicks
_PowerNetSoftwareSystemUpTime_Object = MibScalar
powerNetSoftwareSystemUpTime = _PowerNetSoftwareSystemUpTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 1, 3),
    _PowerNetSoftwareSystemUpTime_Type()
)
powerNetSoftwareSystemUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerNetSoftwareSystemUpTime.setStatus("mandatory")
_PowerNetSoftwareConfig_ObjectIdentity = ObjectIdentity
powerNetSoftwareConfig = _PowerNetSoftwareConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2)
)
_PowerNetSoftwareTableSize_Type = Integer32
_PowerNetSoftwareTableSize_Object = MibScalar
powerNetSoftwareTableSize = _PowerNetSoftwareTableSize_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 1),
    _PowerNetSoftwareTableSize_Type()
)
powerNetSoftwareTableSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    powerNetSoftwareTableSize.setStatus("mandatory")
_PowerNetSoftwareTable_Object = MibTable
powerNetSoftwareTable = _PowerNetSoftwareTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2)
)
if mibBuilder.loadTexts:
    powerNetSoftwareTable.setStatus("mandatory")
_PowerNetSoftwareEntry_Object = MibTableRow
powerNetSoftwareEntry = _PowerNetSoftwareEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1)
)
powerNetSoftwareEntry.setIndexNames(
    (0, "POWERNET-MIB", "moduleNumber"),
)
if mibBuilder.loadTexts:
    powerNetSoftwareEntry.setStatus("mandatory")
_ModuleNumber_Type = Integer32
_ModuleNumber_Object = MibTableColumn
moduleNumber = _ModuleNumber_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 1),
    _ModuleNumber_Type()
)
moduleNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    moduleNumber.setStatus("mandatory")


class _ModuleName_Type(DisplayString):
    """Custom type moduleName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 79),
    )


_ModuleName_Type.__name__ = "DisplayString"
_ModuleName_Object = MibTableColumn
moduleName = _ModuleName_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 2),
    _ModuleName_Type()
)
moduleName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    moduleName.setStatus("mandatory")


class _ModuleVersion_Type(DisplayString):
    """Custom type moduleVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_ModuleVersion_Type.__name__ = "DisplayString"
_ModuleVersion_Object = MibTableColumn
moduleVersion = _ModuleVersion_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 3),
    _ModuleVersion_Type()
)
moduleVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    moduleVersion.setStatus("mandatory")


class _ModuleDate_Type(DisplayString):
    """Custom type moduleDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 9),
    )


_ModuleDate_Type.__name__ = "DisplayString"
_ModuleDate_Object = MibTableColumn
moduleDate = _ModuleDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 1, 2, 1, 2, 2, 1, 4),
    _ModuleDate_Type()
)
moduleDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    moduleDate.setStatus("mandatory")
_System_ObjectIdentity = ObjectIdentity
system = _System_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3)
)
_BackUPS_ObjectIdentity = ObjectIdentity
backUPS = _BackUPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 1)
)
_SmartUPS_ObjectIdentity = ObjectIdentity
smartUPS = _SmartUPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2)
)
_SmartUPS250_ObjectIdentity = ObjectIdentity
smartUPS250 = _SmartUPS250_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 1)
)
_SmartUPS400_ObjectIdentity = ObjectIdentity
smartUPS400 = _SmartUPS400_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 2)
)
_SmartUPS600_ObjectIdentity = ObjectIdentity
smartUPS600 = _SmartUPS600_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 3)
)
_SmartUPS900_ObjectIdentity = ObjectIdentity
smartUPS900 = _SmartUPS900_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 4)
)
_SmartUPS1250_ObjectIdentity = ObjectIdentity
smartUPS1250 = _SmartUPS1250_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 5)
)
_SmartUPS2000_ObjectIdentity = ObjectIdentity
smartUPS2000 = _SmartUPS2000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 6)
)
_SmartUPS450_ObjectIdentity = ObjectIdentity
smartUPS450 = _SmartUPS450_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 7)
)
_SmartUPS700_ObjectIdentity = ObjectIdentity
smartUPS700 = _SmartUPS700_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 8)
)
_SmartUPS1000_ObjectIdentity = ObjectIdentity
smartUPS1000 = _SmartUPS1000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 9)
)
_SmartUPS1400_ObjectIdentity = ObjectIdentity
smartUPS1400 = _SmartUPS1400_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 10)
)
_SmartUPS2200_ObjectIdentity = ObjectIdentity
smartUPS2200 = _SmartUPS2200_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 11)
)
_SmartUPS3000_ObjectIdentity = ObjectIdentity
smartUPS3000 = _SmartUPS3000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 12)
)
_SmartUPS5000_ObjectIdentity = ObjectIdentity
smartUPS5000 = _SmartUPS5000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 13)
)
_SmartUPS7500_ObjectIdentity = ObjectIdentity
smartUPS7500 = _SmartUPS7500_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 14)
)
_SmartUPS10000_ObjectIdentity = ObjectIdentity
smartUPS10000 = _SmartUPS10000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 15)
)
_SmartUPS1500_ObjectIdentity = ObjectIdentity
smartUPS1500 = _SmartUPS1500_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 16)
)
_SmartUPS3000DSP_ObjectIdentity = ObjectIdentity
smartUPS3000DSP = _SmartUPS3000DSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 17)
)
_SmartUPS5000DSP_ObjectIdentity = ObjectIdentity
smartUPS5000DSP = _SmartUPS5000DSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 18)
)
_SmartUPS8000_ObjectIdentity = ObjectIdentity
smartUPS8000 = _SmartUPS8000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 2, 19)
)
_MatrixUPS_ObjectIdentity = ObjectIdentity
matrixUPS = _MatrixUPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 3)
)
_MatrixUPS3000_ObjectIdentity = ObjectIdentity
matrixUPS3000 = _MatrixUPS3000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 3, 1)
)
_MatrixUPS5000_ObjectIdentity = ObjectIdentity
matrixUPS5000 = _MatrixUPS5000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 3, 2)
)
_MasterSwitch_ObjectIdentity = ObjectIdentity
masterSwitch = _MasterSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 4)
)
_MasterSwitchV1_ObjectIdentity = ObjectIdentity
masterSwitchV1 = _MasterSwitchV1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 1)
)
_MasterSwitchV2_ObjectIdentity = ObjectIdentity
masterSwitchV2 = _MasterSwitchV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 2)
)
_MasterSwitchVM_ObjectIdentity = ObjectIdentity
masterSwitchVM = _MasterSwitchVM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 3)
)
_MasterSwitchMSP_ObjectIdentity = ObjectIdentity
masterSwitchMSP = _MasterSwitchMSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 4)
)
_MasterSwitchrPDU_ObjectIdentity = ObjectIdentity
masterSwitchrPDU = _MasterSwitchrPDU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 5)
)
_MasterSwitchrPDU2_ObjectIdentity = ObjectIdentity
masterSwitchrPDU2 = _MasterSwitchrPDU2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 4, 6)
)
_SymmetraUPS_ObjectIdentity = ObjectIdentity
symmetraUPS = _SymmetraUPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 5)
)
_SymmetraUPS4kVA_ObjectIdentity = ObjectIdentity
symmetraUPS4kVA = _SymmetraUPS4kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 1)
)
_SymmetraUPS8kVA_ObjectIdentity = ObjectIdentity
symmetraUPS8kVA = _SymmetraUPS8kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 2)
)
_SymmetraUPS12kVA_ObjectIdentity = ObjectIdentity
symmetraUPS12kVA = _SymmetraUPS12kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 3)
)
_SymmetraUPS16kVA_ObjectIdentity = ObjectIdentity
symmetraUPS16kVA = _SymmetraUPS16kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 5, 4)
)
_Dp100E_ObjectIdentity = ObjectIdentity
dp100E = _Dp100E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 6)
)
_Dp300E_ObjectIdentity = ObjectIdentity
dp300E = _Dp300E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 7)
)
_Monitors_ObjectIdentity = ObjectIdentity
monitors = _Monitors_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 8)
)
_Environmental_ObjectIdentity = ObjectIdentity
environmental = _Environmental_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 1)
)
_EnvironmentalMgtSystem_ObjectIdentity = ObjectIdentity
environmentalMgtSystem = _EnvironmentalMgtSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 2)
)
_Emu2_ObjectIdentity = ObjectIdentity
emu2 = _Emu2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 3)
)
_Mem_ObjectIdentity = ObjectIdentity
mem = _Mem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 8, 4)
)
_RedundantSwitch_ObjectIdentity = ObjectIdentity
redundantSwitch = _RedundantSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 9)
)
_DcPower_ObjectIdentity = ObjectIdentity
dcPower = _DcPower_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 10)
)
_Dm3_ObjectIdentity = ObjectIdentity
dm3 = _Dm3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 10, 1)
)
_Dcmim2_ObjectIdentity = ObjectIdentity
dcmim2 = _Dcmim2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 10, 2)
)
_AutomaticXferSwitch_ObjectIdentity = ObjectIdentity
automaticXferSwitch = _AutomaticXferSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 11)
)
_NetLock_ObjectIdentity = ObjectIdentity
netLock = _NetLock_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 12)
)
_Symmetra3PhaseUPS_ObjectIdentity = ObjectIdentity
symmetra3PhaseUPS = _Symmetra3PhaseUPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 13)
)
_Symmetra3PhaseUPS40kVA_ObjectIdentity = ObjectIdentity
symmetra3PhaseUPS40kVA = _Symmetra3PhaseUPS40kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 1)
)
_Symmetra3PhaseUPS60kVA_ObjectIdentity = ObjectIdentity
symmetra3PhaseUPS60kVA = _Symmetra3PhaseUPS60kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 2)
)
_Symmetra3PhaseUPS80kVA_ObjectIdentity = ObjectIdentity
symmetra3PhaseUPS80kVA = _Symmetra3PhaseUPS80kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 3)
)
_Symmetra3PhaseUPS20kVA_ObjectIdentity = ObjectIdentity
symmetra3PhaseUPS20kVA = _Symmetra3PhaseUPS20kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 13, 4)
)
_NetworkAir_ObjectIdentity = ObjectIdentity
networkAir = _NetworkAir_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 14)
)
_AirFMSeries_ObjectIdentity = ObjectIdentity
airFMSeries = _AirFMSeries_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 1)
)
_RackAirRemovalUnit_ObjectIdentity = ObjectIdentity
rackAirRemovalUnit = _RackAirRemovalUnit_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 2)
)
_AirPASeries_ObjectIdentity = ObjectIdentity
airPASeries = _AirPASeries_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 3)
)
_AirIRSC100Series_ObjectIdentity = ObjectIdentity
airIRSC100Series = _AirIRSC100Series_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 4)
)
_AirIRRC100Series_ObjectIdentity = ObjectIdentity
airIRRC100Series = _AirIRRC100Series_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 5)
)
_AirIRRP100Series_ObjectIdentity = ObjectIdentity
airIRRP100Series = _AirIRRP100Series_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 6)
)
_AirIRRP500Series_ObjectIdentity = ObjectIdentity
airIRRP500Series = _AirIRRP500Series_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 7)
)
_AirIRRD100Series_ObjectIdentity = ObjectIdentity
airIRRD100Series = _AirIRRD100Series_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 8)
)
_AirInRoomPerimeter_ObjectIdentity = ObjectIdentity
airInRoomPerimeter = _AirInRoomPerimeter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 14, 9)
)
_InfraStruXurePDU_ObjectIdentity = ObjectIdentity
infraStruXurePDU = _InfraStruXurePDU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 15)
)
_Ais5000UPS_ObjectIdentity = ObjectIdentity
ais5000UPS = _Ais5000UPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 16)
)
_Ais5000UPS10kVA_ObjectIdentity = ObjectIdentity
ais5000UPS10kVA = _Ais5000UPS10kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 1)
)
_Ais5000UPS20kVA_ObjectIdentity = ObjectIdentity
ais5000UPS20kVA = _Ais5000UPS20kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 2)
)
_Ais5000UPS30kVA_ObjectIdentity = ObjectIdentity
ais5000UPS30kVA = _Ais5000UPS30kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 3)
)
_Ais5000UPS40kVA_ObjectIdentity = ObjectIdentity
ais5000UPS40kVA = _Ais5000UPS40kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 4)
)
_Ais5000UPS60kVA_ObjectIdentity = ObjectIdentity
ais5000UPS60kVA = _Ais5000UPS60kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 5)
)
_Ais5000UPS80kVA_ObjectIdentity = ObjectIdentity
ais5000UPS80kVA = _Ais5000UPS80kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 6)
)
_Ais5000UPS100kVA_ObjectIdentity = ObjectIdentity
ais5000UPS100kVA = _Ais5000UPS100kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 16, 7)
)
_SmartUPS3Phase_ObjectIdentity = ObjectIdentity
smartUPS3Phase = _SmartUPS3Phase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 17)
)
_SmartUPS3Phase10kVA_ObjectIdentity = ObjectIdentity
smartUPS3Phase10kVA = _SmartUPS3Phase10kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 1)
)
_SmartUPS3Phase15kVA_ObjectIdentity = ObjectIdentity
smartUPS3Phase15kVA = _SmartUPS3Phase15kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 2)
)
_SmartUPS3Phase20kVA_ObjectIdentity = ObjectIdentity
smartUPS3Phase20kVA = _SmartUPS3Phase20kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 3)
)
_SmartUPS3Phase30kVA_ObjectIdentity = ObjectIdentity
smartUPS3Phase30kVA = _SmartUPS3Phase30kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 4)
)
_SmartUPS3Phase40kVA_ObjectIdentity = ObjectIdentity
smartUPS3Phase40kVA = _SmartUPS3Phase40kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 17, 5)
)
_BattManager_ObjectIdentity = ObjectIdentity
battManager = _BattManager_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 18)
)
_InfraStruXureATS_ObjectIdentity = ObjectIdentity
infraStruXureATS = _InfraStruXureATS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 19)
)
_ConPortServ_ObjectIdentity = ObjectIdentity
conPortServ = _ConPortServ_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 20)
)
_ConPortServAP930x_ObjectIdentity = ObjectIdentity
conPortServAP930x = _ConPortServAP930x_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 20, 1)
)
_Gutor_ObjectIdentity = ObjectIdentity
gutor = _Gutor_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 21)
)
_GutorPEW_ObjectIdentity = ObjectIdentity
gutorPEW = _GutorPEW_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 1)
)
_GutorPDW_ObjectIdentity = ObjectIdentity
gutorPDW = _GutorPDW_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 2)
)
_GutorWEW_ObjectIdentity = ObjectIdentity
gutorWEW = _GutorWEW_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 3)
)
_GutorWDW_ObjectIdentity = ObjectIdentity
gutorWDW = _GutorWDW_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 4)
)
_GutorSDC_ObjectIdentity = ObjectIdentity
gutorSDC = _GutorSDC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 21, 5)
)
_AccControl_ObjectIdentity = ObjectIdentity
accControl = _AccControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 22)
)
_AccPX_ObjectIdentity = ObjectIdentity
accPX = _AccPX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 22, 1)
)
_SymmetraPX_ObjectIdentity = ObjectIdentity
symmetraPX = _SymmetraPX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 23)
)
_SymmetraPx48kVA_ObjectIdentity = ObjectIdentity
symmetraPx48kVA = _SymmetraPx48kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 1)
)
_SymmetraPx160kVA_ObjectIdentity = ObjectIdentity
symmetraPx160kVA = _SymmetraPx160kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 2)
)
_SymmetraPx250kVA_ObjectIdentity = ObjectIdentity
symmetraPx250kVA = _SymmetraPx250kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 3)
)
_SymmetraPx500kVA_ObjectIdentity = ObjectIdentity
symmetraPx500kVA = _SymmetraPx500kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 4)
)
_SymmetraPx100kVA_ObjectIdentity = ObjectIdentity
symmetraPx100kVA = _SymmetraPx100kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 5)
)
_SymmetraPxDisplay_ObjectIdentity = ObjectIdentity
symmetraPxDisplay = _SymmetraPxDisplay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 23, 6)
)
_IsxModDistribution_ObjectIdentity = ObjectIdentity
isxModDistribution = _IsxModDistribution_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 24)
)
_Isx24ModuleHalfRackPdu_ObjectIdentity = ObjectIdentity
isx24ModuleHalfRackPdu = _Isx24ModuleHalfRackPdu_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 24, 1)
)
_Isx6ModuleRackPdu_ObjectIdentity = ObjectIdentity
isx6ModuleRackPdu = _Isx6ModuleRackPdu_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 24, 2)
)
_IsxServers_ObjectIdentity = ObjectIdentity
isxServers = _IsxServers_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 25)
)
_IsxcBasic_ObjectIdentity = ObjectIdentity
isxcBasic = _IsxcBasic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 1)
)
_IsxcStandard_ObjectIdentity = ObjectIdentity
isxcStandard = _IsxcStandard_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 2)
)
_IsxcEnterprise_ObjectIdentity = ObjectIdentity
isxcEnterprise = _IsxcEnterprise_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 25, 3)
)
_SmartUPS2_ObjectIdentity = ObjectIdentity
smartUPS2 = _SmartUPS2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 27)
)
_Galaxy_ObjectIdentity = ObjectIdentity
galaxy = _Galaxy_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28)
)
_Galaxy7000UPS200kVA_ObjectIdentity = ObjectIdentity
galaxy7000UPS200kVA = _Galaxy7000UPS200kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 1)
)
_Galaxy7000UPS250kVA_ObjectIdentity = ObjectIdentity
galaxy7000UPS250kVA = _Galaxy7000UPS250kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 2)
)
_Galaxy7000UPS300kVA_ObjectIdentity = ObjectIdentity
galaxy7000UPS300kVA = _Galaxy7000UPS300kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 3)
)
_Galaxy7000UPS400kVA_ObjectIdentity = ObjectIdentity
galaxy7000UPS400kVA = _Galaxy7000UPS400kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 4)
)
_Galaxy7000UPS500kVA_ObjectIdentity = ObjectIdentity
galaxy7000UPS500kVA = _Galaxy7000UPS500kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 5)
)
_Galaxy7000SSC800kVA_ObjectIdentity = ObjectIdentity
galaxy7000SSC800kVA = _Galaxy7000SSC800kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 6)
)
_Galaxy7000SSC1200kVA_ObjectIdentity = ObjectIdentity
galaxy7000SSC1200kVA = _Galaxy7000SSC1200kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 7)
)
_Galaxy7000SSC2000kVA_ObjectIdentity = ObjectIdentity
galaxy7000SSC2000kVA = _Galaxy7000SSC2000kVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 8)
)
_Galaxy300UPS10kVA33_ObjectIdentity = ObjectIdentity
galaxy300UPS10kVA33 = _Galaxy300UPS10kVA33_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 9)
)
_Galaxy300UPS15kVA33_ObjectIdentity = ObjectIdentity
galaxy300UPS15kVA33 = _Galaxy300UPS15kVA33_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 10)
)
_Galaxy300UPS20kVA33_ObjectIdentity = ObjectIdentity
galaxy300UPS20kVA33 = _Galaxy300UPS20kVA33_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 11)
)
_Galaxy300UPS30kVA33_ObjectIdentity = ObjectIdentity
galaxy300UPS30kVA33 = _Galaxy300UPS30kVA33_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 12)
)
_Galaxy300UPS40kVA33_ObjectIdentity = ObjectIdentity
galaxy300UPS40kVA33 = _Galaxy300UPS40kVA33_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 13)
)
_Galaxy300UPS10kVA31_ObjectIdentity = ObjectIdentity
galaxy300UPS10kVA31 = _Galaxy300UPS10kVA31_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 14)
)
_Galaxy300UPS15kVA31_ObjectIdentity = ObjectIdentity
galaxy300UPS15kVA31 = _Galaxy300UPS15kVA31_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 15)
)
_Galaxy300UPS20kVA31_ObjectIdentity = ObjectIdentity
galaxy300UPS20kVA31 = _Galaxy300UPS20kVA31_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 16)
)
_Galaxy300UPS30kVA31_ObjectIdentity = ObjectIdentity
galaxy300UPS30kVA31 = _Galaxy300UPS30kVA31_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 17)
)
_Galaxy5000UPS20KVA_ObjectIdentity = ObjectIdentity
galaxy5000UPS20KVA = _Galaxy5000UPS20KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 18)
)
_Galaxy5000UPS30KVA_ObjectIdentity = ObjectIdentity
galaxy5000UPS30KVA = _Galaxy5000UPS30KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 19)
)
_Galaxy5000UPS40KVA_ObjectIdentity = ObjectIdentity
galaxy5000UPS40KVA = _Galaxy5000UPS40KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 20)
)
_Galaxy5000UPS50KVA_ObjectIdentity = ObjectIdentity
galaxy5000UPS50KVA = _Galaxy5000UPS50KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 21)
)
_Galaxy5000UPS60KVA_ObjectIdentity = ObjectIdentity
galaxy5000UPS60KVA = _Galaxy5000UPS60KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 22)
)
_Galaxy5000UPS80KVA_ObjectIdentity = ObjectIdentity
galaxy5000UPS80KVA = _Galaxy5000UPS80KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 23)
)
_Galaxy5000UPS100KVA_ObjectIdentity = ObjectIdentity
galaxy5000UPS100KVA = _Galaxy5000UPS100KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 24)
)
_Galaxy5000UPS120KVA_ObjectIdentity = ObjectIdentity
galaxy5000UPS120KVA = _Galaxy5000UPS120KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 25)
)
_Galaxy5000UPS130KVA_ObjectIdentity = ObjectIdentity
galaxy5000UPS130KVA = _Galaxy5000UPS130KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 26)
)
_Galaxy5500UPS20KVA_ObjectIdentity = ObjectIdentity
galaxy5500UPS20KVA = _Galaxy5500UPS20KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 27)
)
_Galaxy5500UPS30KVA_ObjectIdentity = ObjectIdentity
galaxy5500UPS30KVA = _Galaxy5500UPS30KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 28)
)
_Galaxy5500UPS40KVA_ObjectIdentity = ObjectIdentity
galaxy5500UPS40KVA = _Galaxy5500UPS40KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 29)
)
_Galaxy5500UPS50KVA_ObjectIdentity = ObjectIdentity
galaxy5500UPS50KVA = _Galaxy5500UPS50KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 30)
)
_Galaxy5500UPS60KVA_ObjectIdentity = ObjectIdentity
galaxy5500UPS60KVA = _Galaxy5500UPS60KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 31)
)
_Galaxy5500UPS80KVA_ObjectIdentity = ObjectIdentity
galaxy5500UPS80KVA = _Galaxy5500UPS80KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 32)
)
_Galaxy5500UPS100KVA_ObjectIdentity = ObjectIdentity
galaxy5500UPS100KVA = _Galaxy5500UPS100KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 33)
)
_Galaxy5500UPS120KVA_ObjectIdentity = ObjectIdentity
galaxy5500UPS120KVA = _Galaxy5500UPS120KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 34)
)
_Galaxy5500UPS130KVA_ObjectIdentity = ObjectIdentity
galaxy5500UPS130KVA = _Galaxy5500UPS130KVA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 3, 28, 35)
)
_Experimental_ObjectIdentity = ObjectIdentity
experimental = _Experimental_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 1, 4)
)
_Apcmgmt_ObjectIdentity = ObjectIdentity
apcmgmt = _Apcmgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 2)
)
_Mconfig_ObjectIdentity = ObjectIdentity
mconfig = _Mconfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 2, 1)
)
_MconfigNumTrapReceivers_Type = Integer32
_MconfigNumTrapReceivers_Object = MibScalar
mconfigNumTrapReceivers = _MconfigNumTrapReceivers_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 1),
    _MconfigNumTrapReceivers_Type()
)
mconfigNumTrapReceivers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mconfigNumTrapReceivers.setStatus("mandatory")
_MconfigTrapReceiverTable_Object = MibTable
mconfigTrapReceiverTable = _MconfigTrapReceiverTable_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 2)
)
if mibBuilder.loadTexts:
    mconfigTrapReceiverTable.setStatus("mandatory")
_MconfigTrapReceiverEntry_Object = MibTableRow
mconfigTrapReceiverEntry = _MconfigTrapReceiverEntry_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1)
)
mconfigTrapReceiverEntry.setIndexNames(
    (0, "POWERNET-MIB", "trapIndex"),
)
if mibBuilder.loadTexts:
    mconfigTrapReceiverEntry.setStatus("mandatory")
_TrapIndex_Type = Integer32
_TrapIndex_Object = MibTableColumn
trapIndex = _TrapIndex_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 1),
    _TrapIndex_Type()
)
trapIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trapIndex.setStatus("mandatory")
_ReceiverAddr_Type = IpAddress
_ReceiverAddr_Object = MibTableColumn
receiverAddr = _ReceiverAddr_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 2),
    _ReceiverAddr_Type()
)
receiverAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    receiverAddr.setStatus("mandatory")
_CommunityString_Type = DisplayString
_CommunityString_Object = MibTableColumn
communityString = _CommunityString_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 3),
    _CommunityString_Type()
)
communityString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    communityString.setStatus("mandatory")


class _Severity_Type(Integer32):
    """Custom type severity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("information", 1),
          ("severe", 3),
          ("warning", 2))
    )


_Severity_Type.__name__ = "Integer32"
_Severity_Object = MibTableColumn
severity = _Severity_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 4),
    _Severity_Type()
)
severity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    severity.setStatus("obsolete")


class _AcceptThisReceiver_Type(Integer32):
    """Custom type acceptThisReceiver based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_AcceptThisReceiver_Type.__name__ = "Integer32"
_AcceptThisReceiver_Object = MibTableColumn
acceptThisReceiver = _AcceptThisReceiver_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 5),
    _AcceptThisReceiver_Type()
)
acceptThisReceiver.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acceptThisReceiver.setStatus("mandatory")


class _ReceiveTrapType_Type(Integer32):
    """Custom type receiveTrapType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("both", 3),
          ("ietf", 2),
          ("powernet", 1))
    )


_ReceiveTrapType_Type.__name__ = "Integer32"
_ReceiveTrapType_Object = MibTableColumn
receiveTrapType = _ReceiveTrapType_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 2, 1, 6),
    _ReceiveTrapType_Type()
)
receiveTrapType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    receiveTrapType.setStatus("obsolete")


class _MconfigBOOTPEnabled_Type(Integer32):
    """Custom type mconfigBOOTPEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_MconfigBOOTPEnabled_Type.__name__ = "Integer32"
_MconfigBOOTPEnabled_Object = MibScalar
mconfigBOOTPEnabled = _MconfigBOOTPEnabled_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 3),
    _MconfigBOOTPEnabled_Type()
)
mconfigBOOTPEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mconfigBOOTPEnabled.setStatus("mandatory")
_MconfigTFTPServerIP_Type = IpAddress
_MconfigTFTPServerIP_Object = MibScalar
mconfigTFTPServerIP = _MconfigTFTPServerIP_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 4),
    _MconfigTFTPServerIP_Type()
)
mconfigTFTPServerIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mconfigTFTPServerIP.setStatus("mandatory")


class _NewCodeAuthentViaTFTP_Type(Integer32):
    """Custom type newCodeAuthentViaTFTP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("invalidAgentCodeImage", 4),
          ("sameAgentCodeImage", 3),
          ("unknown", 1),
          ("validNewAgentCodeImage", 2))
    )


_NewCodeAuthentViaTFTP_Type.__name__ = "Integer32"
_NewCodeAuthentViaTFTP_Object = MibScalar
newCodeAuthentViaTFTP = _NewCodeAuthentViaTFTP_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 5),
    _NewCodeAuthentViaTFTP_Type()
)
newCodeAuthentViaTFTP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    newCodeAuthentViaTFTP.setStatus("mandatory")
_MconfigClock_ObjectIdentity = ObjectIdentity
mconfigClock = _MconfigClock_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 6)
)
_MconfigClockDate_Type = DisplayString
_MconfigClockDate_Object = MibScalar
mconfigClockDate = _MconfigClockDate_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 6, 1),
    _MconfigClockDate_Type()
)
mconfigClockDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mconfigClockDate.setStatus("mandatory")
_MconfigClockTime_Type = DisplayString
_MconfigClockTime_Object = MibScalar
mconfigClockTime = _MconfigClockTime_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 1, 6, 2),
    _MconfigClockTime_Type()
)
mconfigClockTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mconfigClockTime.setStatus("mandatory")
_Mcontrol_ObjectIdentity = ObjectIdentity
mcontrol = _Mcontrol_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 2, 2)
)


class _McontrolRestartAgent_Type(Integer32):
    """Custom type mcontrolRestartAgent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("continueCurrentAgent", 2),
          ("loadAndExecuteNewAgent", 3),
          ("resetNetworkAndRestart", 5),
          ("resetNetworkLeaveModeAndRestart", 6),
          ("restartCurrentAgent", 1),
          ("restartWithoutAgent", 4))
    )


_McontrolRestartAgent_Type.__name__ = "Integer32"
_McontrolRestartAgent_Object = MibScalar
mcontrolRestartAgent = _McontrolRestartAgent_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 2, 1),
    _McontrolRestartAgent_Type()
)
mcontrolRestartAgent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcontrolRestartAgent.setStatus("mandatory")
_Mtrapargs_ObjectIdentity = ObjectIdentity
mtrapargs = _Mtrapargs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 2, 3)
)
_MtrapargsInteger_Type = Integer32
_MtrapargsInteger_Object = MibScalar
mtrapargsInteger = _MtrapargsInteger_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 1),
    _MtrapargsInteger_Type()
)
mtrapargsInteger.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsInteger.setStatus("mandatory")
_MtrapargsIpAddress_Type = IpAddress
_MtrapargsIpAddress_Object = MibScalar
mtrapargsIpAddress = _MtrapargsIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 2),
    _MtrapargsIpAddress_Type()
)
mtrapargsIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsIpAddress.setStatus("mandatory")
_MtrapargsString_Type = DisplayString
_MtrapargsString_Object = MibScalar
mtrapargsString = _MtrapargsString_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 3),
    _MtrapargsString_Type()
)
mtrapargsString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsString.setStatus("mandatory")
_MtrapargsGauge_Type = Gauge32
_MtrapargsGauge_Object = MibScalar
mtrapargsGauge = _MtrapargsGauge_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 4),
    _MtrapargsGauge_Type()
)
mtrapargsGauge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsGauge.setStatus("mandatory")
_MtrapargsTimeTicks_Type = TimeTicks
_MtrapargsTimeTicks_Object = MibScalar
mtrapargsTimeTicks = _MtrapargsTimeTicks_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 5),
    _MtrapargsTimeTicks_Type()
)
mtrapargsTimeTicks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsTimeTicks.setStatus("mandatory")
_MtrapargsInteger02_Type = Integer32
_MtrapargsInteger02_Object = MibScalar
mtrapargsInteger02 = _MtrapargsInteger02_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 6),
    _MtrapargsInteger02_Type()
)
mtrapargsInteger02.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsInteger02.setStatus("mandatory")
_MtrapargsInteger03_Type = Integer32
_MtrapargsInteger03_Object = MibScalar
mtrapargsInteger03 = _MtrapargsInteger03_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 7),
    _MtrapargsInteger03_Type()
)
mtrapargsInteger03.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsInteger03.setStatus("mandatory")
_MtrapargsIpAddress02_Type = IpAddress
_MtrapargsIpAddress02_Object = MibScalar
mtrapargsIpAddress02 = _MtrapargsIpAddress02_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 8),
    _MtrapargsIpAddress02_Type()
)
mtrapargsIpAddress02.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsIpAddress02.setStatus("mandatory")
_MtrapargsIpAddress03_Type = IpAddress
_MtrapargsIpAddress03_Object = MibScalar
mtrapargsIpAddress03 = _MtrapargsIpAddress03_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 9),
    _MtrapargsIpAddress03_Type()
)
mtrapargsIpAddress03.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsIpAddress03.setStatus("mandatory")
_MtrapargsString02_Type = DisplayString
_MtrapargsString02_Object = MibScalar
mtrapargsString02 = _MtrapargsString02_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 10),
    _MtrapargsString02_Type()
)
mtrapargsString02.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsString02.setStatus("mandatory")
_MtrapargsString03_Type = DisplayString
_MtrapargsString03_Object = MibScalar
mtrapargsString03 = _MtrapargsString03_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 11),
    _MtrapargsString03_Type()
)
mtrapargsString03.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsString03.setStatus("mandatory")
_MtrapargsGauge02_Type = Gauge32
_MtrapargsGauge02_Object = MibScalar
mtrapargsGauge02 = _MtrapargsGauge02_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 12),
    _MtrapargsGauge02_Type()
)
mtrapargsGauge02.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsGauge02.setStatus("mandatory")
_MtrapargsGauge03_Type = Gauge32
_MtrapargsGauge03_Object = MibScalar
mtrapargsGauge03 = _MtrapargsGauge03_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 13),
    _MtrapargsGauge03_Type()
)
mtrapargsGauge03.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsGauge03.setStatus("mandatory")
_MtrapargsTimeTicks02_Type = TimeTicks
_MtrapargsTimeTicks02_Object = MibScalar
mtrapargsTimeTicks02 = _MtrapargsTimeTicks02_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 14),
    _MtrapargsTimeTicks02_Type()
)
mtrapargsTimeTicks02.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsTimeTicks02.setStatus("mandatory")
_MtrapargsTimeTicks03_Type = TimeTicks
_MtrapargsTimeTicks03_Object = MibScalar
mtrapargsTimeTicks03 = _MtrapargsTimeTicks03_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 15),
    _MtrapargsTimeTicks03_Type()
)
mtrapargsTimeTicks03.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsTimeTicks03.setStatus("mandatory")
_MtrapargsString04_Type = DisplayString
_MtrapargsString04_Object = MibScalar
mtrapargsString04 = _MtrapargsString04_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 16),
    _MtrapargsString04_Type()
)
mtrapargsString04.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsString04.setStatus("mandatory")
_MtrapargsString05_Type = DisplayString
_MtrapargsString05_Object = MibScalar
mtrapargsString05 = _MtrapargsString05_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 17),
    _MtrapargsString05_Type()
)
mtrapargsString05.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsString05.setStatus("mandatory")
_MtrapargsInteger04_Type = Integer32
_MtrapargsInteger04_Object = MibScalar
mtrapargsInteger04 = _MtrapargsInteger04_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 18),
    _MtrapargsInteger04_Type()
)
mtrapargsInteger04.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsInteger04.setStatus("mandatory")
_MtrapargsInteger05_Type = Integer32
_MtrapargsInteger05_Object = MibScalar
mtrapargsInteger05 = _MtrapargsInteger05_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 19),
    _MtrapargsInteger05_Type()
)
mtrapargsInteger05.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsInteger05.setStatus("mandatory")
_MtrapargsString06_Type = DisplayString
_MtrapargsString06_Object = MibScalar
mtrapargsString06 = _MtrapargsString06_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 20),
    _MtrapargsString06_Type()
)
mtrapargsString06.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsString06.setStatus("mandatory")
_MtrapargsString07_Type = DisplayString
_MtrapargsString07_Object = MibScalar
mtrapargsString07 = _MtrapargsString07_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 21),
    _MtrapargsString07_Type()
)
mtrapargsString07.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsString07.setStatus("mandatory")
_MtrapargsString08_Type = DisplayString
_MtrapargsString08_Object = MibScalar
mtrapargsString08 = _MtrapargsString08_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 22),
    _MtrapargsString08_Type()
)
mtrapargsString08.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsString08.setStatus("mandatory")
_MtrapargsOctetString_Type = OctetString
_MtrapargsOctetString_Object = MibScalar
mtrapargsOctetString = _MtrapargsOctetString_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 23),
    _MtrapargsOctetString_Type()
)
mtrapargsOctetString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsOctetString.setStatus("mandatory")
_MtrapargsOctetString02_Type = OctetString
_MtrapargsOctetString02_Object = MibScalar
mtrapargsOctetString02 = _MtrapargsOctetString02_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 24),
    _MtrapargsOctetString02_Type()
)
mtrapargsOctetString02.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsOctetString02.setStatus("mandatory")
_MtrapargsOctetString03_Type = OctetString
_MtrapargsOctetString03_Object = MibScalar
mtrapargsOctetString03 = _MtrapargsOctetString03_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 25),
    _MtrapargsOctetString03_Type()
)
mtrapargsOctetString03.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsOctetString03.setStatus("mandatory")
_MtrapargsOctetString04_Type = OctetString
_MtrapargsOctetString04_Object = MibScalar
mtrapargsOctetString04 = _MtrapargsOctetString04_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 26),
    _MtrapargsOctetString04_Type()
)
mtrapargsOctetString04.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsOctetString04.setStatus("mandatory")
_MtrapargsOctetString05_Type = OctetString
_MtrapargsOctetString05_Object = MibScalar
mtrapargsOctetString05 = _MtrapargsOctetString05_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 27),
    _MtrapargsOctetString05_Type()
)
mtrapargsOctetString05.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsOctetString05.setStatus("mandatory")
_MtrapargsOctetString06_Type = OctetString
_MtrapargsOctetString06_Object = MibScalar
mtrapargsOctetString06 = _MtrapargsOctetString06_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 28),
    _MtrapargsOctetString06_Type()
)
mtrapargsOctetString06.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsOctetString06.setStatus("mandatory")
_MtrapargsOctetString07_Type = OctetString
_MtrapargsOctetString07_Object = MibScalar
mtrapargsOctetString07 = _MtrapargsOctetString07_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 29),
    _MtrapargsOctetString07_Type()
)
mtrapargsOctetString07.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsOctetString07.setStatus("mandatory")
_MtrapargsOctetString08_Type = OctetString
_MtrapargsOctetString08_Object = MibScalar
mtrapargsOctetString08 = _MtrapargsOctetString08_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 3, 30),
    _MtrapargsOctetString08_Type()
)
mtrapargsOctetString08.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mtrapargsOctetString08.setStatus("mandatory")
_Mfiletransfer_ObjectIdentity = ObjectIdentity
mfiletransfer = _Mfiletransfer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 2, 4)
)
_MfiletransferStatus_ObjectIdentity = ObjectIdentity
mfiletransferStatus = _MfiletransferStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 1)
)


class _MfiletransferStatusLastTransferResult_Type(Integer32):
    """Custom type mfiletransferStatusLastTransferResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("lastFileTransferResultFailureFileCorrupted", 8),
          ("lastFileTransferResultFailureFileNotFound", 6),
          ("lastFileTransferResultFailureFileTypeUnknown", 7),
          ("lastFileTransferResultFailureServerAccessDenied", 5),
          ("lastFileTransferResultFailureServerInaccessible", 4),
          ("lastFileTransferResultFailureUnknown", 3),
          ("lastFileTransferResultNotAvailable", 2),
          ("lastFileTransferResultSuccessful", 1))
    )


_MfiletransferStatusLastTransferResult_Type.__name__ = "Integer32"
_MfiletransferStatusLastTransferResult_Object = MibScalar
mfiletransferStatusLastTransferResult = _MfiletransferStatusLastTransferResult_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 1, 1),
    _MfiletransferStatusLastTransferResult_Type()
)
mfiletransferStatusLastTransferResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfiletransferStatusLastTransferResult.setStatus("deprecated")
_MfiletransferConfig_ObjectIdentity = ObjectIdentity
mfiletransferConfig = _MfiletransferConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 2)
)
_MfiletransferConfigSettings_ObjectIdentity = ObjectIdentity
mfiletransferConfigSettings = _MfiletransferConfigSettings_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 1)
)
_MfiletransferConfigSettingsFilename_Type = DisplayString
_MfiletransferConfigSettingsFilename_Object = MibScalar
mfiletransferConfigSettingsFilename = _MfiletransferConfigSettingsFilename_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 1, 1),
    _MfiletransferConfigSettingsFilename_Type()
)
mfiletransferConfigSettingsFilename.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mfiletransferConfigSettingsFilename.setStatus("deprecated")
_MfiletransferConfigTFTP_ObjectIdentity = ObjectIdentity
mfiletransferConfigTFTP = _MfiletransferConfigTFTP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 2)
)
_MfiletransferConfigTFTPServerAddress_Type = DisplayString
_MfiletransferConfigTFTPServerAddress_Object = MibScalar
mfiletransferConfigTFTPServerAddress = _MfiletransferConfigTFTPServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 2, 1),
    _MfiletransferConfigTFTPServerAddress_Type()
)
mfiletransferConfigTFTPServerAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mfiletransferConfigTFTPServerAddress.setStatus("deprecated")
_MfiletransferConfigFTP_ObjectIdentity = ObjectIdentity
mfiletransferConfigFTP = _MfiletransferConfigFTP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3)
)
_MfiletransferConfigFTPServerAddress_Type = DisplayString
_MfiletransferConfigFTPServerAddress_Object = MibScalar
mfiletransferConfigFTPServerAddress = _MfiletransferConfigFTPServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 1),
    _MfiletransferConfigFTPServerAddress_Type()
)
mfiletransferConfigFTPServerAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mfiletransferConfigFTPServerAddress.setStatus("deprecated")
_MfiletransferConfigFTPServerUser_Type = DisplayString
_MfiletransferConfigFTPServerUser_Object = MibScalar
mfiletransferConfigFTPServerUser = _MfiletransferConfigFTPServerUser_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 2),
    _MfiletransferConfigFTPServerUser_Type()
)
mfiletransferConfigFTPServerUser.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mfiletransferConfigFTPServerUser.setStatus("deprecated")
_MfiletransferConfigFTPServerPassword_Type = DisplayString
_MfiletransferConfigFTPServerPassword_Object = MibScalar
mfiletransferConfigFTPServerPassword = _MfiletransferConfigFTPServerPassword_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 2, 3, 3),
    _MfiletransferConfigFTPServerPassword_Type()
)
mfiletransferConfigFTPServerPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mfiletransferConfigFTPServerPassword.setStatus("deprecated")
_MfiletransferControl_ObjectIdentity = ObjectIdentity
mfiletransferControl = _MfiletransferControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 3)
)


class _MfiletransferControlInitiateFileTransfer_Type(Integer32):
    """Custom type mfiletransferControlInitiateFileTransfer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("doNotInitiateFileTransfer", 1),
          ("initiateFileTransferDownloadViaFTP", 3),
          ("initiateFileTransferDownloadViaTFTP", 2))
    )


_MfiletransferControlInitiateFileTransfer_Type.__name__ = "Integer32"
_MfiletransferControlInitiateFileTransfer_Object = MibScalar
mfiletransferControlInitiateFileTransfer = _MfiletransferControlInitiateFileTransfer_Object(
    (1, 3, 6, 1, 4, 1, 318, 2, 4, 3, 1),
    _MfiletransferControlInitiateFileTransfer_Type()
)
mfiletransferControlInitiateFileTransfer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mfiletransferControlInitiateFileTransfer.setStatus("deprecated")

# Managed Objects groups


# Notification objects

communicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 1)
)
communicationLost.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    communicationLost.setStatus(
        ""
    )

upsOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 2)
)
upsOverload.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsOverload.setStatus(
        ""
    )

upsDiagnosticsFailed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 3)
)
upsDiagnosticsFailed.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsDiagnosticsFailed.setStatus(
        ""
    )

upsDischarged = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 4)
)
upsDischarged.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsDischarged.setStatus(
        ""
    )

upsOnBattery = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 5)
)
upsOnBattery.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsOnBattery.setStatus(
        ""
    )

smartBoostOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 6)
)
smartBoostOn.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    smartBoostOn.setStatus(
        ""
    )

lowBattery = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 7)
)
lowBattery.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    lowBattery.setStatus(
        ""
    )

communicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 8)
)
communicationEstablished.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    communicationEstablished.setStatus(
        ""
    )

powerRestored = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 9)
)
powerRestored.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    powerRestored.setStatus(
        ""
    )

upsDiagnosticsPassed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 10)
)
upsDiagnosticsPassed.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsDiagnosticsPassed.setStatus(
        ""
    )

returnFromLowBattery = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 11)
)
returnFromLowBattery.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    returnFromLowBattery.setStatus(
        ""
    )

upsTurnedOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 12)
)
upsTurnedOff.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsTurnedOff.setStatus(
        ""
    )

upsSleeping = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 13)
)
upsSleeping.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsSleeping.setStatus(
        ""
    )

upsWokeUp = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 14)
)
upsWokeUp.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsWokeUp.setStatus(
        ""
    )

upsRebootStarted = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 15)
)
upsRebootStarted.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsRebootStarted.setStatus(
        ""
    )

upsDipSwitchChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 16)
)
upsDipSwitchChanged.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsDipSwitchChanged.setStatus(
        ""
    )

upsBatteryNeedsReplacement = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 17)
)
upsBatteryNeedsReplacement.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsBatteryNeedsReplacement.setStatus(
        ""
    )

contactFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 18)
)
contactFault.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    contactFault.setStatus(
        ""
    )

contactFaultResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 19)
)
contactFaultResolved.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    contactFaultResolved.setStatus(
        ""
    )

hardwareFailureBypass = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 20)
)
hardwareFailureBypass.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    hardwareFailureBypass.setStatus(
        ""
    )

softwareBypass = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 21)
)
softwareBypass.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    softwareBypass.setStatus(
        ""
    )

switchedBypass = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 22)
)
switchedBypass.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    switchedBypass.setStatus(
        ""
    )

returnFromBypass = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 23)
)
returnFromBypass.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    returnFromBypass.setStatus(
        ""
    )

bypassPowerSupplyFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 24)
)
bypassPowerSupplyFailure.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    bypassPowerSupplyFailure.setStatus(
        ""
    )

baseFanFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 25)
)
baseFanFailure.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    baseFanFailure.setStatus(
        ""
    )

batteryPackCommLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 26)
)
batteryPackCommLost.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    batteryPackCommLost.setStatus(
        ""
    )

batteryPackCommEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 27)
)
batteryPackCommEstablished.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    batteryPackCommEstablished.setStatus(
        ""
    )

calibrationStart = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 28)
)
calibrationStart.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    calibrationStart.setStatus(
        ""
    )

restartAgent = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 29)
)
restartAgent.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    restartAgent.setStatus(
        ""
    )

upsTurnedOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 30)
)
upsTurnedOn.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsTurnedOn.setStatus(
        ""
    )

smartAvrReducing = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 31)
)
smartAvrReducing.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    smartAvrReducing.setStatus(
        ""
    )

codeAuthenticationDone = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 32)
)
codeAuthenticationDone.setObjects(
      *(("POWERNET-MIB", "mconfigTFTPServerIP"),
        ("POWERNET-MIB", "newCodeAuthentViaTFTP"))
)
if mibBuilder.loadTexts:
    codeAuthenticationDone.setStatus(
        ""
    )

upsOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 33)
)
upsOverloadCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsOverloadCleared.setStatus(
        ""
    )

smartBoostOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 34)
)
smartBoostOff.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    smartBoostOff.setStatus(
        ""
    )

smartAvrReducingOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 35)
)
smartAvrReducingOff.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    smartAvrReducingOff.setStatus(
        ""
    )

upsBatteryReplaced = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 36)
)
upsBatteryReplaced.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsBatteryReplaced.setStatus(
        ""
    )

calibrationEnd = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 37)
)
calibrationEnd.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    calibrationEnd.setStatus(
        ""
    )

dischargeCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 38)
)
dischargeCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dischargeCleared.setStatus(
        ""
    )

gracefullShutdown = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 39)
)
gracefullShutdown.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    gracefullShutdown.setStatus(
        ""
    )

outletOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 41)
)
outletOn.setObjects(
    ("POWERNET-MIB", "sPDUOutletControlIndex")
)
if mibBuilder.loadTexts:
    outletOn.setStatus(
        ""
    )

outletOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 42)
)
outletOff.setObjects(
    ("POWERNET-MIB", "sPDUOutletControlIndex")
)
if mibBuilder.loadTexts:
    outletOff.setStatus(
        ""
    )

outletReboot = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 43)
)
outletReboot.setObjects(
    ("POWERNET-MIB", "sPDUOutletControlIndex")
)
if mibBuilder.loadTexts:
    outletReboot.setStatus(
        ""
    )

configChangeSNMP = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 44)
)
configChangeSNMP.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    configChangeSNMP.setStatus(
        ""
    )

configChangeOutlet = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 45)
)
configChangeOutlet.setObjects(
    ("POWERNET-MIB", "sPDUOutletConfigIndex")
)
if mibBuilder.loadTexts:
    configChangeOutlet.setStatus(
        ""
    )

accessViolationConsole = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 46)
)
accessViolationConsole.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    accessViolationConsole.setStatus(
        ""
    )

accessViolationHTTP = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 47)
)
accessViolationHTTP.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    accessViolationHTTP.setStatus(
        ""
    )

passwordChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 48)
)
passwordChange.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    passwordChange.setStatus(
        ""
    )

badVoltage = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 49)
)
badVoltage.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    badVoltage.setStatus(
        ""
    )

badVoltageCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 50)
)
badVoltageCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    badVoltageCleared.setStatus(
        ""
    )

chargerFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 51)
)
chargerFailure.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    chargerFailure.setStatus(
        ""
    )

chargerFailureCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 52)
)
chargerFailureCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    chargerFailureCleared.setStatus(
        ""
    )

batteryOverTemperature = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 53)
)
batteryOverTemperature.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    batteryOverTemperature.setStatus(
        ""
    )

batteryOverTemperatureCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 54)
)
batteryOverTemperatureCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    batteryOverTemperatureCleared.setStatus(
        ""
    )

smartRelayFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 55)
)
smartRelayFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    smartRelayFault.setStatus(
        ""
    )

smartRelayFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 56)
)
smartRelayFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    smartRelayFaultCleared.setStatus(
        ""
    )

humidityThresholdViolation1 = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 57)
)
humidityThresholdViolation1.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    humidityThresholdViolation1.setStatus(
        ""
    )

humidityThresholdViolationCleared1 = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 58)
)
humidityThresholdViolationCleared1.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    humidityThresholdViolationCleared1.setStatus(
        ""
    )

temperatureThresholdViolation1 = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 59)
)
temperatureThresholdViolation1.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    temperatureThresholdViolation1.setStatus(
        ""
    )

temperatureThresholdViolationCleared1 = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 60)
)
temperatureThresholdViolationCleared1.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    temperatureThresholdViolationCleared1.setStatus(
        ""
    )

humidityThresholdViolation2 = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 61)
)
humidityThresholdViolation2.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    humidityThresholdViolation2.setStatus(
        ""
    )

humidityThresholdViolationCleared2 = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 62)
)
humidityThresholdViolationCleared2.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    humidityThresholdViolationCleared2.setStatus(
        ""
    )

temperatureThresholdViolation2 = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 63)
)
temperatureThresholdViolation2.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    temperatureThresholdViolation2.setStatus(
        ""
    )

temperatureThresholdViolationCleared2 = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 64)
)
temperatureThresholdViolationCleared2.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    temperatureThresholdViolationCleared2.setStatus(
        ""
    )

mupsCommunicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 65)
)
mupsCommunicationEstablished.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    mupsCommunicationEstablished.setStatus(
        ""
    )

mupsCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 66)
)
mupsCommunicationLost.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    mupsCommunicationLost.setStatus(
        ""
    )

batteryIncrease = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 67)
)
batteryIncrease.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    batteryIncrease.setStatus(
        ""
    )

batteryDecrease = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 68)
)
batteryDecrease.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    batteryDecrease.setStatus(
        ""
    )

powerModuleIncrease = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 69)
)
powerModuleIncrease.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    powerModuleIncrease.setStatus(
        ""
    )

powerModuleDecrease = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 70)
)
powerModuleDecrease.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    powerModuleDecrease.setStatus(
        ""
    )

intelligenceModuleInserted = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 71)
)
intelligenceModuleInserted.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    intelligenceModuleInserted.setStatus(
        ""
    )

intelligenceModuleRemoved = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 72)
)
intelligenceModuleRemoved.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    intelligenceModuleRemoved.setStatus(
        ""
    )

rintelligenceModuleInserted = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 73)
)
rintelligenceModuleInserted.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    rintelligenceModuleInserted.setStatus(
        ""
    )

rintelligenceModuleRemoved = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 74)
)
rintelligenceModuleRemoved.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    rintelligenceModuleRemoved.setStatus(
        ""
    )

extBatteryFrameIncease = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 75)
)
extBatteryFrameIncease.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    extBatteryFrameIncease.setStatus(
        ""
    )

extBatteryFrameDecrease = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 76)
)
extBatteryFrameDecrease.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    extBatteryFrameDecrease.setStatus(
        ""
    )

abnormalCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 77)
)
abnormalCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    abnormalCondition.setStatus(
        ""
    )

abnormalConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 78)
)
abnormalConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    abnormalConditionCleared.setStatus(
        ""
    )

deviceStatusChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 79)
)
deviceStatusChange.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    deviceStatusChange.setStatus(
        ""
    )

noBatteries = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 80)
)
noBatteries.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    noBatteries.setStatus(
        ""
    )

noBatteriesCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 81)
)
noBatteriesCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    noBatteriesCleared.setStatus(
        ""
    )

userAdded = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 82)
)
userAdded.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    userAdded.setStatus(
        ""
    )

userDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 83)
)
userDeleted.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    userDeleted.setStatus(
        ""
    )

userModified = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 84)
)
userModified.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    userModified.setStatus(
        ""
    )

msvmCommunicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 85)
)
msvmCommunicationEstablished.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmCommunicationEstablished.setStatus(
        ""
    )

msvmCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 86)
)
msvmCommunicationLost.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmCommunicationLost.setStatus(
        ""
    )

msvmOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 87)
)
msvmOverload.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmOverload.setStatus(
        ""
    )

msvmOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 88)
)
msvmOverloadCleared.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmOverloadCleared.setStatus(
        ""
    )

msvmOutletOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 89)
)
msvmOutletOn.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "sPDUOutletControlVMOutletIndex"),
        ("POWERNET-MIB", "sPDUOutletControlVMOutletName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmOutletOn.setStatus(
        ""
    )

msvmOutletOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 90)
)
msvmOutletOff.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "sPDUOutletControlVMOutletIndex"),
        ("POWERNET-MIB", "sPDUOutletControlVMOutletName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmOutletOff.setStatus(
        ""
    )

msvmDeviceConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 91)
)
msvmDeviceConfigChange.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmDeviceConfigChange.setStatus(
        ""
    )

msvmOutletConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 92)
)
msvmOutletConfigChange.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "sPDUOutletControlVMOutletIndex"),
        ("POWERNET-MIB", "sPDUOutletControlVMOutletName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmOutletConfigChange.setStatus(
        ""
    )

msvmLowLoad = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 93)
)
msvmLowLoad.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmLowLoad.setStatus(
        ""
    )

msvmLowLoadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 94)
)
msvmLowLoadCleared.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmLowLoadCleared.setStatus(
        ""
    )

msvmNearOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 95)
)
msvmNearOverload.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmNearOverload.setStatus(
        ""
    )

msvmNearOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 96)
)
msvmNearOverloadCleared.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmNearOverloadCleared.setStatus(
        ""
    )

msvmPowerSupplyStatusChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 97)
)
msvmPowerSupplyStatusChange.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlVMIndex"),
        ("POWERNET-MIB", "sPDUMasterControlVMName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    msvmPowerSupplyStatusChange.setStatus(
        ""
    )

mspCommunicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 98)
)
mspCommunicationEstablished.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlMSPIndex"),
        ("POWERNET-MIB", "sPDUMasterControlMSPName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    mspCommunicationEstablished.setStatus(
        ""
    )

mspCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 99)
)
mspCommunicationLost.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlMSPIndex"),
        ("POWERNET-MIB", "sPDUMasterControlMSPName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    mspCommunicationLost.setStatus(
        ""
    )

mspOutletOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 100)
)
mspOutletOn.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlMSPIndex"),
        ("POWERNET-MIB", "sPDUMasterControlMSPName"),
        ("POWERNET-MIB", "sPDUOutletControlMSPOutletIndex"),
        ("POWERNET-MIB", "sPDUOutletControlMSPOutletName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    mspOutletOn.setStatus(
        ""
    )

mspOutletOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 101)
)
mspOutletOff.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlMSPIndex"),
        ("POWERNET-MIB", "sPDUMasterControlMSPName"),
        ("POWERNET-MIB", "sPDUOutletControlMSPOutletIndex"),
        ("POWERNET-MIB", "sPDUOutletControlMSPOutletName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    mspOutletOff.setStatus(
        ""
    )

mspDeviceConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 102)
)
mspDeviceConfigChange.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlMSPIndex"),
        ("POWERNET-MIB", "sPDUMasterControlMSPName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    mspDeviceConfigChange.setStatus(
        ""
    )

mspOutletConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 103)
)
mspOutletConfigChange.setObjects(
      *(("POWERNET-MIB", "sPDUMasterControlMSPIndex"),
        ("POWERNET-MIB", "sPDUMasterControlMSPName"),
        ("POWERNET-MIB", "sPDUOutletControlMSPOutletIndex"),
        ("POWERNET-MIB", "sPDUOutletControlMSPOutletName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    mspOutletConfigChange.setStatus(
        ""
    )

rsSourceSwitched = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 104)
)
rsSourceSwitched.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rsSourceSwitched.setStatus(
        ""
    )

rsLostRedundancy = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 105)
)
rsLostRedundancy.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rsLostRedundancy.setStatus(
        ""
    )

rsRedundancyRestored = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 106)
)
rsRedundancyRestored.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rsRedundancyRestored.setStatus(
        ""
    )

rsConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 107)
)
rsConfigChange.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    rsConfigChange.setStatus(
        ""
    )

rsCommunicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 108)
)
rsCommunicationEstablished.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    rsCommunicationEstablished.setStatus(
        ""
    )

rsCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 109)
)
rsCommunicationLost.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    rsCommunicationLost.setStatus(
        ""
    )

dcCommunicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 110)
)
dcCommunicationEstablished.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcCommunicationEstablished.setStatus(
        ""
    )

dcCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 111)
)
dcCommunicationLost.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcCommunicationLost.setStatus(
        ""
    )

dcPINChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 112)
)
dcPINChanged.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcPINChanged.setStatus(
        ""
    )

dcMajorAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 113)
)
dcMajorAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcMajorAlarm.setStatus(
        ""
    )

dcMajorAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 114)
)
dcMajorAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcMajorAlarmCleared.setStatus(
        ""
    )

dcMinorAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 115)
)
dcMinorAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcMinorAlarm.setStatus(
        ""
    )

dcMinorAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 116)
)
dcMinorAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcMinorAlarmCleared.setStatus(
        ""
    )

dcOutputRelayOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 117)
)
dcOutputRelayOn.setObjects(
      *(("POWERNET-MIB", "dm3StatusOutRlyIndex"),
        ("POWERNET-MIB", "dm3StatusOutRlyName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    dcOutputRelayOn.setStatus(
        ""
    )

dcOutputRelayOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 118)
)
dcOutputRelayOff.setObjects(
      *(("POWERNET-MIB", "dm3StatusOutRlyIndex"),
        ("POWERNET-MIB", "dm3StatusOutRlyName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    dcOutputRelayOff.setStatus(
        ""
    )

dcInputRelayOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 119)
)
dcInputRelayOn.setObjects(
      *(("POWERNET-MIB", "dm3StatusInRlyIndex"),
        ("POWERNET-MIB", "dm3StatusInRlyName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    dcInputRelayOn.setStatus(
        ""
    )

dcInputRelayOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 120)
)
dcInputRelayOff.setObjects(
      *(("POWERNET-MIB", "dm3StatusInRlyIndex"),
        ("POWERNET-MIB", "dm3StatusInRlyName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    dcInputRelayOff.setStatus(
        ""
    )

logicPowerSuppliesIncreased = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 121)
)
logicPowerSuppliesIncreased.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    logicPowerSuppliesIncreased.setStatus(
        ""
    )

logicPowerSuppliesDecreased = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 122)
)
logicPowerSuppliesDecreased.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    logicPowerSuppliesDecreased.setStatus(
        ""
    )

externalSwitchGearClosed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 123)
)
externalSwitchGearClosed.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    externalSwitchGearClosed.setStatus(
        ""
    )

externalSwitchGearOpened = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 124)
)
externalSwitchGearOpened.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    externalSwitchGearOpened.setStatus(
        ""
    )

generalDeviceEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 125)
)
generalDeviceEvent.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    generalDeviceEvent.setStatus(
        ""
    )

atsSourceSwitched = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 126)
)
atsSourceSwitched.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsSourceSwitched.setStatus(
        ""
    )

atsLostRedundancy = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 127)
)
atsLostRedundancy.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsLostRedundancy.setStatus(
        ""
    )

atsRedundancyRestored = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 128)
)
atsRedundancyRestored.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsRedundancyRestored.setStatus(
        ""
    )

atsConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 129)
)
atsConfigChange.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsConfigChange.setStatus(
        ""
    )

atsCommunicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 130)
)
atsCommunicationEstablished.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    atsCommunicationEstablished.setStatus(
        ""
    )

atsCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 131)
)
atsCommunicationLost.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    atsCommunicationLost.setStatus(
        ""
    )

atsOverCurrent = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 132)
)
atsOverCurrent.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    atsOverCurrent.setStatus(
        ""
    )

atsOverCurrentCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 133)
)
atsOverCurrentCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    atsOverCurrentCleared.setStatus(
        ""
    )

atsPowerSupplyFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 134)
)
atsPowerSupplyFailure.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsPowerSupplyFailure.setStatus(
        ""
    )

atsPowerSupplyFailureCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 135)
)
atsPowerSupplyFailureCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsPowerSupplyFailureCleared.setStatus(
        ""
    )

dcMainsFailAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 136)
)
dcMainsFailAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcMainsFailAlarm.setStatus(
        ""
    )

dcMainsFailAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 137)
)
dcMainsFailAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcMainsFailAlarmCleared.setStatus(
        ""
    )

dcFanFailAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 138)
)
dcFanFailAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcFanFailAlarm.setStatus(
        ""
    )

dcFanFailAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 139)
)
dcFanFailAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcFanFailAlarmCleared.setStatus(
        ""
    )

dcRectifierOvertempAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 140)
)
dcRectifierOvertempAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcRectifierOvertempAlarm.setStatus(
        ""
    )

dcRectifierOvertempAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 141)
)
dcRectifierOvertempAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcRectifierOvertempAlarmCleared.setStatus(
        ""
    )

dcCurrentLimitAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 142)
)
dcCurrentLimitAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcCurrentLimitAlarm.setStatus(
        ""
    )

dcCurrentLimitAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 143)
)
dcCurrentLimitAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcCurrentLimitAlarmCleared.setStatus(
        ""
    )

dcRectifierFailAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 144)
)
dcRectifierFailAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcRectifierFailAlarm.setStatus(
        ""
    )

dcRectifierFailAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 145)
)
dcRectifierFailAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcRectifierFailAlarmCleared.setStatus(
        ""
    )

dcMultRectFailAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 146)
)
dcMultRectFailAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcMultRectFailAlarm.setStatus(
        ""
    )

dcMultRectFailAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 147)
)
dcMultRectFailAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcMultRectFailAlarmCleared.setStatus(
        ""
    )

dcBatteryBreakerAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 148)
)
dcBatteryBreakerAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcBatteryBreakerAlarm.setStatus(
        ""
    )

dcBatteryBreakerAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 149)
)
dcBatteryBreakerAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcBatteryBreakerAlarmCleared.setStatus(
        ""
    )

dcRectifierOVPAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 150)
)
dcRectifierOVPAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcRectifierOVPAlarm.setStatus(
        ""
    )

dcRectifierOVPAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 151)
)
dcRectifierOVPAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcRectifierOVPAlarmCleared.setStatus(
        ""
    )

dcLVDImminentAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 152)
)
dcLVDImminentAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcLVDImminentAlarm.setStatus(
        ""
    )

dcLVDImminentAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 153)
)
dcLVDImminentAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcLVDImminentAlarmCleared.setStatus(
        ""
    )

dcFuseCBAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 154)
)
dcFuseCBAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcFuseCBAlarm.setStatus(
        ""
    )

dcFuseCBAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 155)
)
dcFuseCBAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcFuseCBAlarmCleared.setStatus(
        ""
    )

dcBatteryTestFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 156)
)
dcBatteryTestFail.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcBatteryTestFail.setStatus(
        ""
    )

dcTemperatureAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 157)
)
dcTemperatureAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcTemperatureAlarm.setStatus(
        ""
    )

dcTemperatureAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 158)
)
dcTemperatureAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcTemperatureAlarmCleared.setStatus(
        ""
    )

dcHumidityAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 159)
)
dcHumidityAlarm.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcHumidityAlarm.setStatus(
        ""
    )

dcHumidityAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 160)
)
dcHumidityAlarmCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcHumidityAlarmCleared.setStatus(
        ""
    )

dcBBCommunicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 161)
)
dcBBCommunicationEstablished.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcBBCommunicationEstablished.setStatus(
        ""
    )

dcBBCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 162)
)
dcBBCommunicationLost.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    dcBBCommunicationLost.setStatus(
        ""
    )

iemHighTempThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 163)
)
iemHighTempThresholdViolation.setObjects(
      *(("POWERNET-MIB", "iemStatusProbeCurrentTemp"),
        ("POWERNET-MIB", "iemStatusProbeTempUnits"),
        ("POWERNET-MIB", "iemStatusProbeNumber"),
        ("POWERNET-MIB", "iemStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    iemHighTempThresholdViolation.setStatus(
        ""
    )

iemHighTempThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 164)
)
iemHighTempThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "iemStatusProbeNumber"),
        ("POWERNET-MIB", "iemStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    iemHighTempThresholdViolationCleared.setStatus(
        ""
    )

iemLowTempThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 165)
)
iemLowTempThresholdViolation.setObjects(
      *(("POWERNET-MIB", "iemStatusProbeCurrentTemp"),
        ("POWERNET-MIB", "iemStatusProbeTempUnits"),
        ("POWERNET-MIB", "iemStatusProbeNumber"),
        ("POWERNET-MIB", "iemStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    iemLowTempThresholdViolation.setStatus(
        ""
    )

iemLowTempThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 166)
)
iemLowTempThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "iemStatusProbeNumber"),
        ("POWERNET-MIB", "iemStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    iemLowTempThresholdViolationCleared.setStatus(
        ""
    )

iemHighHumidThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 167)
)
iemHighHumidThresholdViolation.setObjects(
      *(("POWERNET-MIB", "iemStatusProbeCurrentHumid"),
        ("POWERNET-MIB", "iemStatusProbeNumber"),
        ("POWERNET-MIB", "iemStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    iemHighHumidThresholdViolation.setStatus(
        ""
    )

iemHighHumidThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 168)
)
iemHighHumidThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "iemStatusProbeNumber"),
        ("POWERNET-MIB", "iemStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    iemHighHumidThresholdViolationCleared.setStatus(
        ""
    )

iemLowHumidThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 169)
)
iemLowHumidThresholdViolation.setObjects(
      *(("POWERNET-MIB", "iemStatusProbeCurrentHumid"),
        ("POWERNET-MIB", "iemStatusProbeNumber"),
        ("POWERNET-MIB", "iemStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    iemLowHumidThresholdViolation.setStatus(
        ""
    )

iemLowHumidThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 170)
)
iemLowHumidThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "iemStatusProbeNumber"),
        ("POWERNET-MIB", "iemStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    iemLowHumidThresholdViolationCleared.setStatus(
        ""
    )

iemProbeDisconnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 171)
)
iemProbeDisconnected.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    iemProbeDisconnected.setStatus(
        ""
    )

iemProbeConnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 172)
)
iemProbeConnected.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    iemProbeConnected.setStatus(
        ""
    )

iemContactFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 173)
)
iemContactFault.setObjects(
      *(("POWERNET-MIB", "iemStatusContactNumber"),
        ("POWERNET-MIB", "iemStatusContactName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    iemContactFault.setStatus(
        ""
    )

iemContactFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 174)
)
iemContactFaultCleared.setObjects(
      *(("POWERNET-MIB", "iemStatusContactNumber"),
        ("POWERNET-MIB", "iemStatusContactName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    iemContactFaultCleared.setStatus(
        ""
    )

iemRelayFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 175)
)
iemRelayFault.setObjects(
      *(("POWERNET-MIB", "iemStatusRelayNumber"),
        ("POWERNET-MIB", "iemStatusRelayName"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    iemRelayFault.setStatus(
        ""
    )

iemRelayFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 176)
)
iemRelayFaultCleared.setObjects(
      *(("POWERNET-MIB", "iemStatusRelayNumber"),
        ("POWERNET-MIB", "iemStatusRelayName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    iemRelayFaultCleared.setStatus(
        ""
    )

bmBatManCommEstab = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 177)
)
bmBatManCommEstab.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmBatManCommEstab.setStatus(
        ""
    )

bmBatManCommLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 178)
)
bmBatManCommLost.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmBatManCommLost.setStatus(
        ""
    )

bmBatManKneeAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 179)
)
bmBatManKneeAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmBatManKneeAlarm.setStatus(
        ""
    )

bmBatManKneeAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 180)
)
bmBatManKneeAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmBatManKneeAlarmCleared.setStatus(
        ""
    )

bmBatManChargerAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 181)
)
bmBatManChargerAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmBatManChargerAlarm.setStatus(
        ""
    )

bmBatManChargerAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 182)
)
bmBatManChargerAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmBatManChargerAlarmCleared.setStatus(
        ""
    )

bmBatManBatteryAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 183)
)
bmBatManBatteryAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmBatManBatteryAlarm.setStatus(
        ""
    )

bmBatManBatteryAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 184)
)
bmBatManBatteryAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmBatManBatteryAlarmCleared.setStatus(
        ""
    )

bmBatManEnvironmentAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 185)
)
bmBatManEnvironmentAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmBatManEnvironmentAlarm.setStatus(
        ""
    )

bmBatManEnvironmentAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 186)
)
bmBatManEnvironmentAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmBatManEnvironmentAlarmCleared.setStatus(
        ""
    )

bmBatManMaintenanceAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 187)
)
bmBatManMaintenanceAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmBatManMaintenanceAlarm.setStatus(
        ""
    )

bmBatManMaintenanceAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 188)
)
bmBatManMaintenanceAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmBatManMaintenanceAlarmCleared.setStatus(
        ""
    )

pduCommunicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 189)
)
pduCommunicationEstablished.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCommunicationEstablished.setStatus(
        ""
    )

pduCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 190)
)
pduCommunicationLost.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCommunicationLost.setStatus(
        ""
    )

pduUtilityLineUndervoltage = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 191)
)
pduUtilityLineUndervoltage.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduUtilityLineUndervoltage.setStatus(
        ""
    )

pduUtilityLineUndervoltageCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 192)
)
pduUtilityLineUndervoltageCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduUtilityLineUndervoltageCleared.setStatus(
        ""
    )

pduUtilityLineOvervoltage = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 193)
)
pduUtilityLineOvervoltage.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduUtilityLineOvervoltage.setStatus(
        ""
    )

pduUtilityLineOvervoltageCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 194)
)
pduUtilityLineOvervoltageCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduUtilityLineOvervoltageCleared.setStatus(
        ""
    )

pduGroundOvercurrent = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 195)
)
pduGroundOvercurrent.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduGroundOvercurrent.setStatus(
        ""
    )

pduGroundOvercurrentCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 196)
)
pduGroundOvercurrentCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduGroundOvercurrentCleared.setStatus(
        ""
    )

pduCircuitPanelInputUndervoltage = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 197)
)
pduCircuitPanelInputUndervoltage.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCircuitPanelInputUndervoltage.setStatus(
        ""
    )

pduCircuitPanelInputUndervoltageCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 198)
)
pduCircuitPanelInputUndervoltageCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCircuitPanelInputUndervoltageCleared.setStatus(
        ""
    )

pduCircuitPanelInputOvervoltage = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 199)
)
pduCircuitPanelInputOvervoltage.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCircuitPanelInputOvervoltage.setStatus(
        ""
    )

pduCircuitPanelInputOvervoltageCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 200)
)
pduCircuitPanelInputOvervoltageCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCircuitPanelInputOvervoltageCleared.setStatus(
        ""
    )

pduCircuitPanelInputUndercurrent = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 201)
)
pduCircuitPanelInputUndercurrent.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCircuitPanelInputUndercurrent.setStatus(
        ""
    )

pduCircuitPanelInputUndercurrentCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 202)
)
pduCircuitPanelInputUndercurrentCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCircuitPanelInputUndercurrentCleared.setStatus(
        ""
    )

pduCircuitPanelInputOvercurrent = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 203)
)
pduCircuitPanelInputOvercurrent.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCircuitPanelInputOvercurrent.setStatus(
        ""
    )

pduCircuitPanelInputOvercurrentCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 204)
)
pduCircuitPanelInputOvercurrentCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCircuitPanelInputOvercurrentCleared.setStatus(
        ""
    )

pduCircuitPanelFrequencyOutOfRange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 205)
)
pduCircuitPanelFrequencyOutOfRange.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCircuitPanelFrequencyOutOfRange.setStatus(
        ""
    )

pduCircuitPanelFrequencyOutofRangeCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 206)
)
pduCircuitPanelFrequencyOutofRangeCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCircuitPanelFrequencyOutofRangeCleared.setStatus(
        ""
    )

pduCircuitPanelNeutralOvercurrent = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 207)
)
pduCircuitPanelNeutralOvercurrent.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCircuitPanelNeutralOvercurrent.setStatus(
        ""
    )

pduCircuitPanelNeutralOvercurrentCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 208)
)
pduCircuitPanelNeutralOvercurrentCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduCircuitPanelNeutralOvercurrentCleared.setStatus(
        ""
    )

pduSystemOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 209)
)
pduSystemOff.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduSystemOff.setStatus(
        ""
    )

pduOnBatteryMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 210)
)
pduOnBatteryMode.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduOnBatteryMode.setStatus(
        ""
    )

pduMaintenanceBypassMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 211)
)
pduMaintenanceBypassMode.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduMaintenanceBypassMode.setStatus(
        ""
    )

pduAtypicalBypassMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 212)
)
pduAtypicalBypassMode.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduAtypicalBypassMode.setStatus(
        ""
    )

pduNoPanelFeedMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 213)
)
pduNoPanelFeedMode.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduNoPanelFeedMode.setStatus(
        ""
    )

pduUpsOperationMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 214)
)
pduUpsOperationMode.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduUpsOperationMode.setStatus(
        ""
    )

pduForcedBypassMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 215)
)
pduForcedBypassMode.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduForcedBypassMode.setStatus(
        ""
    )

pduInputTransformerOverTemperature = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 216)
)
pduInputTransformerOverTemperature.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduInputTransformerOverTemperature.setStatus(
        ""
    )

pduInputTransformerOverTemperatureCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 217)
)
pduInputTransformerOverTemperatureCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduInputTransformerOverTemperatureCleared.setStatus(
        ""
    )

pduUPSInputVoltageLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 218)
)
pduUPSInputVoltageLost.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduUPSInputVoltageLost.setStatus(
        ""
    )

pduUPSInputVoltageRestored = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 219)
)
pduUPSInputVoltageRestored.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduUPSInputVoltageRestored.setStatus(
        ""
    )

pduContactFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 220)
)
pduContactFault.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduContactFault.setStatus(
        ""
    )

pduContactFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 221)
)
pduContactFaultCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    pduContactFaultCleared.setStatus(
        ""
    )

rPDUBankPhaseLowLoad = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 222)
)
rPDUBankPhaseLowLoad.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadStatusBankNumber"),
        ("POWERNET-MIB", "rPDULoadStatusPhaseNumber"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUBankPhaseLowLoad.setStatus(
        ""
    )

rPDUBankPhaseLowLoadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 223)
)
rPDUBankPhaseLowLoadCleared.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadStatusBankNumber"),
        ("POWERNET-MIB", "rPDULoadStatusPhaseNumber"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUBankPhaseLowLoadCleared.setStatus(
        ""
    )

rPDUBankPhaseNearOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 224)
)
rPDUBankPhaseNearOverload.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadStatusBankNumber"),
        ("POWERNET-MIB", "rPDULoadStatusPhaseNumber"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUBankPhaseNearOverload.setStatus(
        ""
    )

rPDUBankPhaseNearOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 225)
)
rPDUBankPhaseNearOverloadCleared.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadStatusBankNumber"),
        ("POWERNET-MIB", "rPDULoadStatusPhaseNumber"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUBankPhaseNearOverloadCleared.setStatus(
        ""
    )

rPDUBankPhaseOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 226)
)
rPDUBankPhaseOverload.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadStatusBankNumber"),
        ("POWERNET-MIB", "rPDULoadStatusPhaseNumber"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUBankPhaseOverload.setStatus(
        ""
    )

rPDUBankPhaseOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 227)
)
rPDUBankPhaseOverloadCleared.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadStatusBankNumber"),
        ("POWERNET-MIB", "rPDULoadStatusPhaseNumber"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUBankPhaseOverloadCleared.setStatus(
        ""
    )

aruDeviceConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 228)
)
aruDeviceConfigChange.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruDeviceConfigChange.setStatus(
        ""
    )

rmPDUCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 229)
)
rmPDUCommunicationLost.setObjects(
      *(("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rmPDUCommunicationLost.setStatus(
        ""
    )

emsCommunicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 230)
)
emsCommunicationEstablished.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsCommunicationEstablished.setStatus(
        ""
    )

emsCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 231)
)
emsCommunicationLost.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsCommunicationLost.setStatus(
        ""
    )

emsProbeConnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 232)
)
emsProbeConnected.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsProbeConnected.setStatus(
        ""
    )

emsProbeDisconnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 233)
)
emsProbeDisconnected.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsProbeDisconnected.setStatus(
        ""
    )

emsSensorConnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 234)
)
emsSensorConnected.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsSensorStatusSensorIndex"),
        ("POWERNET-MIB", "emsSensorStatusSensorName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsSensorConnected.setStatus(
        ""
    )

emsSensorDisconnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 235)
)
emsSensorDisconnected.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsSensorStatusSensorIndex"),
        ("POWERNET-MIB", "emsSensorStatusSensorName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsSensorDisconnected.setStatus(
        ""
    )

emsSensorFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 236)
)
emsSensorFault.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsSensorStatusSensorIndex"),
        ("POWERNET-MIB", "emsSensorStatusSensorName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsSensorFault.setStatus(
        ""
    )

emsSensorFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 237)
)
emsSensorFaultCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsSensorStatusSensorIndex"),
        ("POWERNET-MIB", "emsSensorStatusSensorName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsSensorFaultCleared.setStatus(
        ""
    )

emsBeaconConnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 238)
)
emsBeaconConnected.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsBeaconConnected.setStatus(
        ""
    )

emsBeaconDisconnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 239)
)
emsBeaconDisconnected.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsBeaconDisconnected.setStatus(
        ""
    )

emsBeaconOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 240)
)
emsBeaconOn.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsBeaconOn.setStatus(
        ""
    )

emsBeaconOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 241)
)
emsBeaconOff.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsBeaconOff.setStatus(
        ""
    )

emsMajorAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 242)
)
emsMajorAlarm.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsMajorAlarm.setStatus(
        ""
    )

emsMajorAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 243)
)
emsMajorAlarmCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsMajorAlarmCleared.setStatus(
        ""
    )

emsMinorAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 244)
)
emsMinorAlarm.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsMinorAlarm.setStatus(
        ""
    )

emsMinorAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 245)
)
emsMinorAlarmCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsMinorAlarmCleared.setStatus(
        ""
    )

emsOutletStateAbnormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 246)
)
emsOutletStateAbnormal.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsOutletStatusOutletIndex"),
        ("POWERNET-MIB", "emsOutletStatusOutletName"),
        ("POWERNET-MIB", "emsOutletStatusOutletState"),
        ("POWERNET-MIB", "emsOutletStatusOutletNormalState"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsOutletStateAbnormal.setStatus(
        ""
    )

emsOutletStateNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 247)
)
emsOutletStateNormal.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsOutletStatusOutletIndex"),
        ("POWERNET-MIB", "emsOutletStatusOutletName"),
        ("POWERNET-MIB", "emsOutletStatusOutletState"),
        ("POWERNET-MIB", "emsOutletStatusOutletNormalState"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsOutletStateNormal.setStatus(
        ""
    )

emsInputContactStateAbnormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 248)
)
emsInputContactStateAbnormal.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsInputContactStatusInputContactIndex"),
        ("POWERNET-MIB", "emsInputContactStatusInputContactName"),
        ("POWERNET-MIB", "emsInputContactStatusInputContactState"),
        ("POWERNET-MIB", "emsInputContactStatusInputContactNormalState"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsInputContactStateAbnormal.setStatus(
        ""
    )

emsInputContactStateNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 249)
)
emsInputContactStateNormal.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsInputContactStatusInputContactIndex"),
        ("POWERNET-MIB", "emsInputContactStatusInputContactName"),
        ("POWERNET-MIB", "emsInputContactStatusInputContactState"),
        ("POWERNET-MIB", "emsInputContactStatusInputContactNormalState"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsInputContactStateNormal.setStatus(
        ""
    )

emsOutputRelayStateAbnormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 250)
)
emsOutputRelayStateAbnormal.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsOutputRelayStatusOutputRelayIndex"),
        ("POWERNET-MIB", "emsOutputRelayStatusOutputRelayName"),
        ("POWERNET-MIB", "emsOutputRelayStatusOutputRelayState"),
        ("POWERNET-MIB", "emsOutputRelayStatusOutputRelayNormalState"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsOutputRelayStateAbnormal.setStatus(
        ""
    )

emsOutputRelayStateNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 251)
)
emsOutputRelayStateNormal.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsOutputRelayStatusOutputRelayIndex"),
        ("POWERNET-MIB", "emsOutputRelayStatusOutputRelayName"),
        ("POWERNET-MIB", "emsOutputRelayStatusOutputRelayState"),
        ("POWERNET-MIB", "emsOutputRelayStatusOutputRelayNormalState"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsOutputRelayStateNormal.setStatus(
        ""
    )

emsDeviceConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 252)
)
emsDeviceConfigChange.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsDeviceConfigChange.setStatus(
        ""
    )

envHighTempThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 253)
)
envHighTempThresholdViolation.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envHighTempThresholdViolation.setStatus(
        ""
    )

envHighTempThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 254)
)
envHighTempThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envHighTempThresholdViolationCleared.setStatus(
        ""
    )

envLowTempThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 255)
)
envLowTempThresholdViolation.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envLowTempThresholdViolation.setStatus(
        ""
    )

envLowTempThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 256)
)
envLowTempThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envLowTempThresholdViolationCleared.setStatus(
        ""
    )

envHighHumidityThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 257)
)
envHighHumidityThresholdViolation.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeHumidity"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envHighHumidityThresholdViolation.setStatus(
        ""
    )

envHighHumidityThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 258)
)
envHighHumidityThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeHumidity"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envHighHumidityThresholdViolationCleared.setStatus(
        ""
    )

envLowHumidityThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 259)
)
envLowHumidityThresholdViolation.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeHumidity"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envLowHumidityThresholdViolation.setStatus(
        ""
    )

envLowHumidityThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 260)
)
envLowHumidityThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeHumidity"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envLowHumidityThresholdViolationCleared.setStatus(
        ""
    )

rPDUCommunicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 266)
)
rPDUCommunicationEstablished.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUCommunicationEstablished.setStatus(
        ""
    )

rPDUCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 267)
)
rPDUCommunicationLost.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUCommunicationLost.setStatus(
        ""
    )

rPDUOutletOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 268)
)
rPDUOutletOn.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDUOutletControlIndex"),
        ("POWERNET-MIB", "rPDUOutletControlOutletName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUOutletOn.setStatus(
        ""
    )

rPDUOutletOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 269)
)
rPDUOutletOff.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDUOutletControlIndex"),
        ("POWERNET-MIB", "rPDUOutletControlOutletName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUOutletOff.setStatus(
        ""
    )

rPDUDeviceConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 270)
)
rPDUDeviceConfigChange.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUDeviceConfigChange.setStatus(
        ""
    )

rPDUOutletConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 271)
)
rPDUOutletConfigChange.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDUOutletControlIndex"),
        ("POWERNET-MIB", "rPDUOutletControlOutletName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUOutletConfigChange.setStatus(
        ""
    )

rPDULowLoad = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 272)
)
rPDULowLoad.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadStatusPhaseNumber"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDULowLoad.setStatus(
        ""
    )

rPDULowLoadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 273)
)
rPDULowLoadCleared.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadStatusPhaseNumber"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDULowLoadCleared.setStatus(
        ""
    )

rPDUNearOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 274)
)
rPDUNearOverload.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadStatusPhaseNumber"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUNearOverload.setStatus(
        ""
    )

rPDUNearOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 275)
)
rPDUNearOverloadCleared.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadStatusPhaseNumber"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUNearOverloadCleared.setStatus(
        ""
    )

rPDUOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 276)
)
rPDUOverload.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadStatusPhaseNumber"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUOverload.setStatus(
        ""
    )

rPDUOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 277)
)
rPDUOverloadCleared.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadStatusPhaseNumber"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUOverloadCleared.setStatus(
        ""
    )

rPDUPowerSupply1Fail = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 278)
)
rPDUPowerSupply1Fail.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUPowerSupply1Fail.setStatus(
        ""
    )

rPDUPowerSupply1Ok = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 279)
)
rPDUPowerSupply1Ok.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUPowerSupply1Ok.setStatus(
        ""
    )

rPDUPowerSupply2Fail = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 280)
)
rPDUPowerSupply2Fail.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUPowerSupply2Fail.setStatus(
        ""
    )

rPDUPowerSupply2Ok = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 281)
)
rPDUPowerSupply2Ok.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUPowerSupply2Ok.setStatus(
        ""
    )

rPDUPhaseConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 282)
)
rPDUPhaseConfigChange.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDULoadPhaseConfigIndex"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUPhaseConfigChange.setStatus(
        ""
    )

rPDUCancelPendingCommand = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 283)
)
rPDUCancelPendingCommand.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDUOutletControlIndex"),
        ("POWERNET-MIB", "rPDUOutletControlOutletName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUCancelPendingCommand.setStatus(
        ""
    )

aruAlinkCommunicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 284)
)
aruAlinkCommunicationEstablished.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruAlinkCommunicationEstablished.setStatus(
        ""
    )

aruAlinkCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 285)
)
aruAlinkCommunicationLost.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruAlinkCommunicationLost.setStatus(
        ""
    )

aruFanFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 286)
)
aruFanFail.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruFanFail.setStatus(
        ""
    )

aruFanFailCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 287)
)
aruFanFailCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruFanFailCleared.setStatus(
        ""
    )

aruSmokeAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 288)
)
aruSmokeAlarm.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruSmokeAlarm.setStatus(
        ""
    )

aruSmokeAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 289)
)
aruSmokeAlarmCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruSmokeAlarmCleared.setStatus(
        ""
    )

aruHighTemperatureAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 290)
)
aruHighTemperatureAlarm.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruHighTemperatureAlarm.setStatus(
        ""
    )

aruHighTemperatureAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 291)
)
aruHighTemperatureAlarmCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruHighTemperatureAlarmCleared.setStatus(
        ""
    )

aruExhaustTemperatureAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 292)
)
aruExhaustTemperatureAlarm.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruExhaustTemperatureAlarm.setStatus(
        ""
    )

aruExhaustTemperatureAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 293)
)
aruExhaustTemperatureAlarmCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruExhaustTemperatureAlarmCleared.setStatus(
        ""
    )

envAlinkCommunicationEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 294)
)
envAlinkCommunicationEstablished.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envAlinkCommunicationEstablished.setStatus(
        ""
    )

envAlinkCommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 295)
)
envAlinkCommunicationLost.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envAlinkCommunicationLost.setStatus(
        ""
    )

emsAlinkPowerOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 296)
)
emsAlinkPowerOverload.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsAlinkPowerOverload.setStatus(
        ""
    )

emsAlinkPowerOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 297)
)
emsAlinkPowerOverloadCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsAlinkPowerOverloadCleared.setStatus(
        ""
    )

upsOutletGroupTurnedOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 298)
)
upsOutletGroupTurnedOn.setObjects(
      *(("POWERNET-MIB", "upsOutletGroupControlIndex"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    upsOutletGroupTurnedOn.setStatus(
        ""
    )

upsOutletGroupTurnedOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 299)
)
upsOutletGroupTurnedOff.setObjects(
      *(("POWERNET-MIB", "upsOutletGroupControlIndex"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    upsOutletGroupTurnedOff.setStatus(
        ""
    )

smwCriticalCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 300)
)
smwCriticalCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsGauge"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    smwCriticalCondition.setStatus(
        ""
    )

smwCriticalConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 301)
)
smwCriticalConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsGauge"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    smwCriticalConditionCleared.setStatus(
        ""
    )

smwWarningCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 302)
)
smwWarningCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsGauge"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    smwWarningCondition.setStatus(
        ""
    )

smwWarningConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 303)
)
smwWarningConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsGauge"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    smwWarningConditionCleared.setStatus(
        ""
    )

smwInformationalCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 304)
)
smwInformationalCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsGauge"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    smwInformationalCondition.setStatus(
        ""
    )

smwInformationalConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 305)
)
smwInformationalConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsGauge"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    smwInformationalConditionCleared.setStatus(
        ""
    )

airCriticalCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 306)
)
airCriticalCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    airCriticalCondition.setStatus(
        ""
    )

airCriticalConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 307)
)
airCriticalConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    airCriticalConditionCleared.setStatus(
        ""
    )

airWarningCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 308)
)
airWarningCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    airWarningCondition.setStatus(
        ""
    )

airWarningConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 309)
)
airWarningConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    airWarningConditionCleared.setStatus(
        ""
    )

airInformationalCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 310)
)
airInformationalCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    airInformationalCondition.setStatus(
        ""
    )

airInformationalConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 311)
)
airInformationalConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    airInformationalConditionCleared.setStatus(
        ""
    )

xPDUInputVoltageLowAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 312)
)
xPDUInputVoltageLowAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUInputVoltageLowAlarm.setStatus(
        ""
    )

xPDUInputVoltageLowAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 313)
)
xPDUInputVoltageLowAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUInputVoltageLowAlarmCleared.setStatus(
        ""
    )

xPDUInputVoltageHighAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 314)
)
xPDUInputVoltageHighAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUInputVoltageHighAlarm.setStatus(
        ""
    )

xPDUInputVoltageHighAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 315)
)
xPDUInputVoltageHighAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUInputVoltageHighAlarmCleared.setStatus(
        ""
    )

xPDUBypassVoltageLowAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 316)
)
xPDUBypassVoltageLowAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBypassVoltageLowAlarm.setStatus(
        ""
    )

xPDUBypassVoltageLowAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 317)
)
xPDUBypassVoltageLowAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBypassVoltageLowAlarmCleared.setStatus(
        ""
    )

xPDUBypassVoltageHighAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 318)
)
xPDUBypassVoltageHighAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBypassVoltageHighAlarm.setStatus(
        ""
    )

xPDUBypassVoltageHighAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 319)
)
xPDUBypassVoltageHighAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBypassVoltageHighAlarmCleared.setStatus(
        ""
    )

xPDUOutputVoltageLowAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 320)
)
xPDUOutputVoltageLowAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUOutputVoltageLowAlarm.setStatus(
        ""
    )

xPDUOutputVoltageLowAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 321)
)
xPDUOutputVoltageLowAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUOutputVoltageLowAlarmCleared.setStatus(
        ""
    )

xPDUOutputVoltageHighAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 322)
)
xPDUOutputVoltageHighAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUOutputVoltageHighAlarm.setStatus(
        ""
    )

xPDUOutputVoltageHighAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 323)
)
xPDUOutputVoltageHighAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUOutputVoltageHighAlarmCleared.setStatus(
        ""
    )

xPDUOutputCurrentLowAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 324)
)
xPDUOutputCurrentLowAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUOutputCurrentLowAlarm.setStatus(
        ""
    )

xPDUOutputCurrentLowAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 325)
)
xPDUOutputCurrentLowAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUOutputCurrentLowAlarmCleared.setStatus(
        ""
    )

xPDUOutputCurrentHighAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 326)
)
xPDUOutputCurrentHighAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUOutputCurrentHighAlarm.setStatus(
        ""
    )

xPDUOutputCurrentHighAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 327)
)
xPDUOutputCurrentHighAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUOutputCurrentHighAlarmCleared.setStatus(
        ""
    )

xPDUOutputFrequencyAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 328)
)
xPDUOutputFrequencyAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUOutputFrequencyAlarm.setStatus(
        ""
    )

xPDUOutputFrequencyAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 329)
)
xPDUOutputFrequencyAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUOutputFrequencyAlarmCleared.setStatus(
        ""
    )

xPDUSystemGroundCurrentAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 330)
)
xPDUSystemGroundCurrentAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUSystemGroundCurrentAlarm.setStatus(
        ""
    )

xPDUSystemGroundCurrentAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 331)
)
xPDUSystemGroundCurrentAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUSystemGroundCurrentAlarmCleared.setStatus(
        ""
    )

xPDUInputContactStateAbnormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 332)
)
xPDUInputContactStateAbnormal.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUInputContactStateAbnormal.setStatus(
        ""
    )

xPDUInputContactStateNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 333)
)
xPDUInputContactStateNormal.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUInputContactStateNormal.setStatus(
        ""
    )

xPDUOutputNeutralCurrentHighAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 334)
)
xPDUOutputNeutralCurrentHighAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUOutputNeutralCurrentHighAlarm.setStatus(
        ""
    )

xPDUOutputNeutralCurrentHighAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 335)
)
xPDUOutputNeutralCurrentHighAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUOutputNeutralCurrentHighAlarmCleared.setStatus(
        ""
    )

xPDUCoolingFanAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 336)
)
xPDUCoolingFanAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUCoolingFanAlarm.setStatus(
        ""
    )

xPDUCoolingFanAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 337)
)
xPDUCoolingFanAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUCoolingFanAlarmCleared.setStatus(
        ""
    )

xPDUTransformerTempAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 338)
)
xPDUTransformerTempAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUTransformerTempAlarm.setStatus(
        ""
    )

xPDUTransformerTempAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 339)
)
xPDUTransformerTempAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUTransformerTempAlarmCleared.setStatus(
        ""
    )

xPDUBranchCurrentLowAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 340)
)
xPDUBranchCurrentLowAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBranchCurrentLowAlarm.setStatus(
        ""
    )

xPDUBranchCurrentLowAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 341)
)
xPDUBranchCurrentLowAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBranchCurrentLowAlarmCleared.setStatus(
        ""
    )

xPDUBranchCurrentHighAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 342)
)
xPDUBranchCurrentHighAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBranchCurrentHighAlarm.setStatus(
        ""
    )

xPDUBranchCurrentHighAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 343)
)
xPDUBranchCurrentHighAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBranchCurrentHighAlarmCleared.setStatus(
        ""
    )

xPDUInternalCommError = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 344)
)
xPDUInternalCommError.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUInternalCommError.setStatus(
        ""
    )

emsHardwareStateAbnormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 345)
)
emsHardwareStateAbnormal.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsHardwareStateAbnormal.setStatus(
        ""
    )

emsHardwareStateNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 346)
)
emsHardwareStateNormal.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    emsHardwareStateNormal.setStatus(
        ""
    )

ceSevereCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 347)
)
ceSevereCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    ceSevereCondition.setStatus(
        ""
    )

ceSevereConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 348)
)
ceSevereConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    ceSevereConditionCleared.setStatus(
        ""
    )

ceWarningCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 349)
)
ceWarningCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    ceWarningCondition.setStatus(
        ""
    )

ceWarningConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 350)
)
ceWarningConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    ceWarningConditionCleared.setStatus(
        ""
    )

ceInformationalCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 351)
)
ceInformationalCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    ceInformationalCondition.setStatus(
        ""
    )

ceInformationalConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 352)
)
ceInformationalConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    ceInformationalConditionCleared.setStatus(
        ""
    )

upsInternalOverTemperature = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 353)
)
upsInternalOverTemperature.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsInternalOverTemperature.setStatus(
        ""
    )

upsInternalOverTemperatureCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 354)
)
upsInternalOverTemperatureCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsInternalOverTemperatureCleared.setStatus(
        ""
    )

upsMpuReset = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 355)
)
upsMpuReset.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsMpuReset.setStatus(
        ""
    )

upsOutputSwitchClosed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 356)
)
upsOutputSwitchClosed.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsOutputSwitchClosed.setStatus(
        ""
    )

upsOutputSwitchOpened = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 357)
)
upsOutputSwitchOpened.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsOutputSwitchOpened.setStatus(
        ""
    )

upsCalibrationStackChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 358)
)
upsCalibrationStackChanged.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsCalibrationStackChanged.setStatus(
        ""
    )

envMaxTempThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 359)
)
envMaxTempThresholdViolation.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envMaxTempThresholdViolation.setStatus(
        ""
    )

envMaxTempThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 360)
)
envMaxTempThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envMaxTempThresholdViolationCleared.setStatus(
        ""
    )

envMinTempThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 361)
)
envMinTempThresholdViolation.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envMinTempThresholdViolation.setStatus(
        ""
    )

envMinTempThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 362)
)
envMinTempThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envMinTempThresholdViolationCleared.setStatus(
        ""
    )

envMaxHumidityThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 363)
)
envMaxHumidityThresholdViolation.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeHumidity"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envMaxHumidityThresholdViolation.setStatus(
        ""
    )

envMaxHumidityThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 364)
)
envMaxHumidityThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeHumidity"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envMaxHumidityThresholdViolationCleared.setStatus(
        ""
    )

envMinHumidityThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 365)
)
envMinHumidityThresholdViolation.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeHumidity"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envMinHumidityThresholdViolation.setStatus(
        ""
    )

envMinHumidityThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 366)
)
envMinHumidityThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeHumidity"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envMinHumidityThresholdViolationCleared.setStatus(
        ""
    )

envSTIncTempRateViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 367)
)
envSTIncTempRateViolation.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envSTIncTempRateViolation.setStatus(
        ""
    )

envSTIncTempRateViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 368)
)
envSTIncTempRateViolationCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envSTIncTempRateViolationCleared.setStatus(
        ""
    )

envSTDecTempRateViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 369)
)
envSTDecTempRateViolation.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envSTDecTempRateViolation.setStatus(
        ""
    )

envSTDecTempRateViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 370)
)
envSTDecTempRateViolationCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envSTDecTempRateViolationCleared.setStatus(
        ""
    )

envLTIncTempRateViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 371)
)
envLTIncTempRateViolation.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envLTIncTempRateViolation.setStatus(
        ""
    )

envLTIncTempRateViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 372)
)
envLTIncTempRateViolationCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envLTIncTempRateViolationCleared.setStatus(
        ""
    )

envLTDecTempRateViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 373)
)
envLTDecTempRateViolation.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envLTDecTempRateViolation.setStatus(
        ""
    )

envLTDecTempRateViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 374)
)
envLTDecTempRateViolationCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "emsProbeStatusProbeTemperature"),
        ("POWERNET-MIB", "emsStatusSysTempUnits"),
        ("POWERNET-MIB", "emsProbeStatusProbeIndex"),
        ("POWERNET-MIB", "emsProbeStatusProbeName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    envLTDecTempRateViolationCleared.setStatus(
        ""
    )

bmsCriticalCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 375)
)
bmsCriticalCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmsCriticalCondition.setStatus(
        ""
    )

bmsCriticalConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 376)
)
bmsCriticalConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmsCriticalConditionCleared.setStatus(
        ""
    )

bmsWarningCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 377)
)
bmsWarningCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmsWarningCondition.setStatus(
        ""
    )

bmsWarningConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 378)
)
bmsWarningConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmsWarningConditionCleared.setStatus(
        ""
    )

bmsInformationalCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 379)
)
bmsInformationalCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmsInformationalCondition.setStatus(
        ""
    )

bmsInformationalConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 380)
)
bmsInformationalConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    bmsInformationalConditionCleared.setStatus(
        ""
    )

xATSOutputVoltageLowAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 381)
)
xATSOutputVoltageLowAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSOutputVoltageLowAlarm.setStatus(
        ""
    )

xATSOutputVoltageLowAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 382)
)
xATSOutputVoltageLowAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSOutputVoltageLowAlarmCleared.setStatus(
        ""
    )

xATSOutputVoltageHighAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 383)
)
xATSOutputVoltageHighAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSOutputVoltageHighAlarm.setStatus(
        ""
    )

xATSOutputVoltageHighAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 384)
)
xATSOutputVoltageHighAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSOutputVoltageHighAlarmCleared.setStatus(
        ""
    )

xATSOutputCurrentLowAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 385)
)
xATSOutputCurrentLowAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSOutputCurrentLowAlarm.setStatus(
        ""
    )

xATSOutputCurrentLowAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 386)
)
xATSOutputCurrentLowAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSOutputCurrentLowAlarmCleared.setStatus(
        ""
    )

xATSOutputCurrentHighAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 387)
)
xATSOutputCurrentHighAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSOutputCurrentHighAlarm.setStatus(
        ""
    )

xATSOutputCurrentHighAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 388)
)
xATSOutputCurrentHighAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSOutputCurrentHighAlarmCleared.setStatus(
        ""
    )

xATSOutputFrequencyAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 389)
)
xATSOutputFrequencyAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSOutputFrequencyAlarm.setStatus(
        ""
    )

xATSOutputFrequencyAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 390)
)
xATSOutputFrequencyAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSOutputFrequencyAlarmCleared.setStatus(
        ""
    )

xATSInternalCommError = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 391)
)
xATSInternalCommError.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSInternalCommError.setStatus(
        ""
    )

xATSInternalCommErrorCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 392)
)
xATSInternalCommErrorCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSInternalCommErrorCleared.setStatus(
        ""
    )

xATSDataCommMismatchError = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 393)
)
xATSDataCommMismatchError.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSDataCommMismatchError.setStatus(
        ""
    )

xATSDataCommMismatchErrorCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 394)
)
xATSDataCommMismatchErrorCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSDataCommMismatchErrorCleared.setStatus(
        ""
    )

xATSGenCommLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 395)
)
xATSGenCommLost.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGenCommLost.setStatus(
        ""
    )

xATSGenCommEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 396)
)
xATSGenCommEstablished.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGenCommEstablished.setStatus(
        ""
    )

xATSNeutralPosition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 397)
)
xATSNeutralPosition.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSNeutralPosition.setStatus(
        ""
    )

xATSSwitchTransferEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 398)
)
xATSSwitchTransferEvent.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSSwitchTransferEvent.setStatus(
        ""
    )

xATSInternalATSFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 399)
)
xATSInternalATSFault.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSInternalATSFault.setStatus(
        ""
    )

xATSInternalATSFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 400)
)
xATSInternalATSFaultCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSInternalATSFaultCleared.setStatus(
        ""
    )

xATSEngineStartAsserted = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 401)
)
xATSEngineStartAsserted.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSEngineStartAsserted.setStatus(
        ""
    )

xATSEngineStopAsserted = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 402)
)
xATSEngineStopAsserted.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSEngineStopAsserted.setStatus(
        ""
    )

xATSStartFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 403)
)
xATSStartFailure.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSStartFailure.setStatus(
        ""
    )

xATSStopFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 404)
)
xATSStopFailure.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSStopFailure.setStatus(
        ""
    )

xATSNotInAutomaticMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 405)
)
xATSNotInAutomaticMode.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSNotInAutomaticMode.setStatus(
        ""
    )

xATSNotInAutomaticModeCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 406)
)
xATSNotInAutomaticModeCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSNotInAutomaticModeCleared.setStatus(
        ""
    )

xATSEpoTripped = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 407)
)
xATSEpoTripped.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSEpoTripped.setStatus(
        ""
    )

xATSEpoReset = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 408)
)
xATSEpoReset.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSEpoReset.setStatus(
        ""
    )

xATSEpoTestMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 409)
)
xATSEpoTestMode.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSEpoTestMode.setStatus(
        ""
    )

xATSEpoArmed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 410)
)
xATSEpoArmed.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSEpoArmed.setStatus(
        ""
    )

xATSTestInitiated = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 411)
)
xATSTestInitiated.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSTestInitiated.setStatus(
        ""
    )

xATSTestCanceled = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 412)
)
xATSTestCanceled.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSTestCanceled.setStatus(
        ""
    )

xATSTestFailed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 413)
)
xATSTestFailed.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSTestFailed.setStatus(
        ""
    )

xATSTestPassed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 414)
)
xATSTestPassed.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSTestPassed.setStatus(
        ""
    )

xATSInputContactStateAbnormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 415)
)
xATSInputContactStateAbnormal.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSInputContactStateAbnormal.setStatus(
        ""
    )

xATSInputContactStateNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 416)
)
xATSInputContactStateNormal.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSInputContactStateNormal.setStatus(
        ""
    )

xATSRemoteStartContactMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 417)
)
xATSRemoteStartContactMismatch.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSRemoteStartContactMismatch.setStatus(
        ""
    )

xATSRemoteStartContactMismatchCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 418)
)
xATSRemoteStartContactMismatchCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSRemoteStartContactMismatchCleared.setStatus(
        ""
    )

xATSDoorOpenAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 419)
)
xATSDoorOpenAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSDoorOpenAlarm.setStatus(
        ""
    )

xATSDoorOpenAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 420)
)
xATSDoorOpenAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSDoorOpenAlarmCleared.setStatus(
        ""
    )

xATSDCBackupAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 421)
)
xATSDCBackupAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSDCBackupAlarm.setStatus(
        ""
    )

xATSDCBackupAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 422)
)
xATSDCBackupAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSDCBackupAlarmCleared.setStatus(
        ""
    )

xATSGeneratorLowCoolantLevelAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 423)
)
xATSGeneratorLowCoolantLevelAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowCoolantLevelAlarm.setStatus(
        ""
    )

xATSGeneratorLowCoolantLevelAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 424)
)
xATSGeneratorLowCoolantLevelAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowCoolantLevelAlarmCleared.setStatus(
        ""
    )

xATSGeneratorVeryLowCoolantLevelAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 425)
)
xATSGeneratorVeryLowCoolantLevelAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorVeryLowCoolantLevelAlarm.setStatus(
        ""
    )

xATSGeneratorVeryLowCoolantLevelAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 426)
)
xATSGeneratorVeryLowCoolantLevelAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorVeryLowCoolantLevelAlarmCleared.setStatus(
        ""
    )

xATSGeneratorHighCoolantTempAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 427)
)
xATSGeneratorHighCoolantTempAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorHighCoolantTempAlarm.setStatus(
        ""
    )

xATSGeneratorHighCoolantTempAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 428)
)
xATSGeneratorHighCoolantTempAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorHighCoolantTempAlarmCleared.setStatus(
        ""
    )

xATSGeneratorVeryHighCoolantTempAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 429)
)
xATSGeneratorVeryHighCoolantTempAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorVeryHighCoolantTempAlarm.setStatus(
        ""
    )

xATSGeneratorVeryHighCoolantTempAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 430)
)
xATSGeneratorVeryHighCoolantTempAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorVeryHighCoolantTempAlarmCleared.setStatus(
        ""
    )

xATSGeneratorLowCoolantTempAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 431)
)
xATSGeneratorLowCoolantTempAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowCoolantTempAlarm.setStatus(
        ""
    )

xATSGeneratorLowCoolantTempAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 432)
)
xATSGeneratorLowCoolantTempAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowCoolantTempAlarmCleared.setStatus(
        ""
    )

xATSGeneratorLowOilLevelAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 433)
)
xATSGeneratorLowOilLevelAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowOilLevelAlarm.setStatus(
        ""
    )

xATSGeneratorLowOilLevelAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 434)
)
xATSGeneratorLowOilLevelAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowOilLevelAlarmCleared.setStatus(
        ""
    )

xATSGeneratorLowBatteryVoltDuringCrankAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 435)
)
xATSGeneratorLowBatteryVoltDuringCrankAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowBatteryVoltDuringCrankAlarm.setStatus(
        ""
    )

xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 436)
)
xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared.setStatus(
        ""
    )

xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 437)
)
xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm.setStatus(
        ""
    )

xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 438)
)
xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared.setStatus(
        ""
    )

xATSGeneratorEStop = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 439)
)
xATSGeneratorEStop.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorEStop.setStatus(
        ""
    )

xATSGeneratorEStopCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 440)
)
xATSGeneratorEStopCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorEStopCleared.setStatus(
        ""
    )

xATSGeneratorHighBatteryVolt = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 441)
)
xATSGeneratorHighBatteryVolt.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorHighBatteryVolt.setStatus(
        ""
    )

xATSGeneratorHighBatteryVoltCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 442)
)
xATSGeneratorHighBatteryVoltCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorHighBatteryVoltCleared.setStatus(
        ""
    )

xATSGeneratorLowBatteryVolt = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 443)
)
xATSGeneratorLowBatteryVolt.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowBatteryVolt.setStatus(
        ""
    )

xATSGeneratorLowBatteryVoltCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 444)
)
xATSGeneratorLowBatteryVoltCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowBatteryVoltCleared.setStatus(
        ""
    )

xATSGeneratorControlSwitchNotAuto = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 445)
)
xATSGeneratorControlSwitchNotAuto.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorControlSwitchNotAuto.setStatus(
        ""
    )

xATSGeneratorControlSwitchNotAutoCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 446)
)
xATSGeneratorControlSwitchNotAutoCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorControlSwitchNotAutoCleared.setStatus(
        ""
    )

xATSGeneratorLowOilPressure = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 447)
)
xATSGeneratorLowOilPressure.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowOilPressure.setStatus(
        ""
    )

xATSGeneratorLowOilPressureCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 448)
)
xATSGeneratorLowOilPressureCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowOilPressureCleared.setStatus(
        ""
    )

xATSGeneratorVeryLowOilPressure = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 449)
)
xATSGeneratorVeryLowOilPressure.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorVeryLowOilPressure.setStatus(
        ""
    )

xATSGeneratorVeryLowOilPressureCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 450)
)
xATSGeneratorVeryLowOilPressureCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorVeryLowOilPressureCleared.setStatus(
        ""
    )

xATSGeneratorOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 451)
)
xATSGeneratorOverload.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorOverload.setStatus(
        ""
    )

xATSGeneratorOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 452)
)
xATSGeneratorOverloadCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorOverloadCleared.setStatus(
        ""
    )

xATSGeneratorLowACVEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 453)
)
xATSGeneratorLowACVEvent.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowACVEvent.setStatus(
        ""
    )

xATSGeneratorLowACVEventCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 454)
)
xATSGeneratorLowACVEventCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowACVEventCleared.setStatus(
        ""
    )

xATSGeneratorHighACVEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 455)
)
xATSGeneratorHighACVEvent.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorHighACVEvent.setStatus(
        ""
    )

xATSGeneratorHighACVEventCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 456)
)
xATSGeneratorHighACVEventCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorHighACVEventCleared.setStatus(
        ""
    )

xATSGeneratorOverspeed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 457)
)
xATSGeneratorOverspeed.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorOverspeed.setStatus(
        ""
    )

xATSGeneratorOverspeedCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 458)
)
xATSGeneratorOverspeedCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorOverspeedCleared.setStatus(
        ""
    )

xATSGeneratorEngineCold = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 459)
)
xATSGeneratorEngineCold.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorEngineCold.setStatus(
        ""
    )

xATSGeneratorEngineColdCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 460)
)
xATSGeneratorEngineColdCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorEngineColdCleared.setStatus(
        ""
    )

xATSGeneratorOutputBreakerOpen = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 461)
)
xATSGeneratorOutputBreakerOpen.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorOutputBreakerOpen.setStatus(
        ""
    )

xATSGeneratorOutputBreakerOpenCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 462)
)
xATSGeneratorOutputBreakerOpenCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorOutputBreakerOpenCleared.setStatus(
        ""
    )

xATSGeneratorLowFuelLevelAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 463)
)
xATSGeneratorLowFuelLevelAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowFuelLevelAlarm.setStatus(
        ""
    )

xATSGeneratorLowFuelLevelAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 464)
)
xATSGeneratorLowFuelLevelAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowFuelLevelAlarmCleared.setStatus(
        ""
    )

xATSGeneratorVeryLowFuelLevelAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 465)
)
xATSGeneratorVeryLowFuelLevelAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorVeryLowFuelLevelAlarm.setStatus(
        ""
    )

xATSGeneratorVeryLowFuelLevelAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 466)
)
xATSGeneratorVeryLowFuelLevelAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorVeryLowFuelLevelAlarmCleared.setStatus(
        ""
    )

xATSGeneratorLowRunTimeAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 467)
)
xATSGeneratorLowRunTimeAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowRunTimeAlarm.setStatus(
        ""
    )

xATSGeneratorLowRunTimeAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 468)
)
xATSGeneratorLowRunTimeAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorLowRunTimeAlarmCleared.setStatus(
        ""
    )

xATSGeneratorVeryLowRunTimeAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 469)
)
xATSGeneratorVeryLowRunTimeAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorVeryLowRunTimeAlarm.setStatus(
        ""
    )

xATSGeneratorVeryLowRunTimeAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 470)
)
xATSGeneratorVeryLowRunTimeAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorVeryLowRunTimeAlarmCleared.setStatus(
        ""
    )

xATSGeneratorServiceDueAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 471)
)
xATSGeneratorServiceDueAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorServiceDueAlarm.setStatus(
        ""
    )

xATSGeneratorServiceDueAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 472)
)
xATSGeneratorServiceDueAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorServiceDueAlarmCleared.setStatus(
        ""
    )

xATSGeneratorShutdown = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 473)
)
xATSGeneratorShutdown.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorShutdown.setStatus(
        ""
    )

xATSGeneratorShutdownCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 474)
)
xATSGeneratorShutdownCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorShutdownCleared.setStatus(
        ""
    )

xATSGeneratorBatteryCharger = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 475)
)
xATSGeneratorBatteryCharger.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorBatteryCharger.setStatus(
        ""
    )

xATSGeneratorBatteryChargerCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 476)
)
xATSGeneratorBatteryChargerCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorBatteryChargerCleared.setStatus(
        ""
    )

xATSGeneratorGenericEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 477)
)
xATSGeneratorGenericEvent.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorGenericEvent.setStatus(
        ""
    )

xATSGeneratorGenericEventCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 478)
)
xATSGeneratorGenericEventCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorGenericEventCleared.setStatus(
        ""
    )

xPDUInternalCommErrorCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 479)
)
xPDUInternalCommErrorCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUInternalCommErrorCleared.setStatus(
        ""
    )

xPDUSystemStateAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 480)
)
xPDUSystemStateAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUSystemStateAlarm.setStatus(
        ""
    )

xPDUSystemStateAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 481)
)
xPDUSystemStateAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUSystemStateAlarmCleared.setStatus(
        ""
    )

xPDUEpoTestMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 482)
)
xPDUEpoTestMode.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUEpoTestMode.setStatus(
        ""
    )

xPDUEpoArmed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 483)
)
xPDUEpoArmed.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUEpoArmed.setStatus(
        ""
    )

xPDUFuseBlownAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 484)
)
xPDUFuseBlownAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUFuseBlownAlarm.setStatus(
        ""
    )

xPDUFuseBlownAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 485)
)
xPDUFuseBlownAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUFuseBlownAlarmCleared.setStatus(
        ""
    )

xPDUBreakerPositionAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 486)
)
xPDUBreakerPositionAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBreakerPositionAlarm.setStatus(
        ""
    )

xPDUBreakerPositionAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 487)
)
xPDUBreakerPositionAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBreakerPositionAlarmCleared.setStatus(
        ""
    )

xPDUBreakerChangeEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 488)
)
xPDUBreakerChangeEvent.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBreakerChangeEvent.setStatus(
        ""
    )

xPDUDataCommMismatchError = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 489)
)
xPDUDataCommMismatchError.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUDataCommMismatchError.setStatus(
        ""
    )

xPDUDataCommMismatchErrorCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 490)
)
xPDUDataCommMismatchErrorCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUDataCommMismatchErrorCleared.setStatus(
        ""
    )

xPDUSystemInMaintenanceBypassMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 491)
)
xPDUSystemInMaintenanceBypassMode.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUSystemInMaintenanceBypassMode.setStatus(
        ""
    )

xPDUSystemInUPSOperationalMode = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 492)
)
xPDUSystemInUPSOperationalMode.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUSystemInUPSOperationalMode.setStatus(
        ""
    )

xATSGeneratorFuelTankRuptureAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 493)
)
xATSGeneratorFuelTankRuptureAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorFuelTankRuptureAlarm.setStatus(
        ""
    )

xATSGeneratorFuelTankRuptureAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 494)
)
xATSGeneratorFuelTankRuptureAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorFuelTankRuptureAlarmCleared.setStatus(
        ""
    )

xATSGeneratorGroundFaultAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 495)
)
xATSGeneratorGroundFaultAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorGroundFaultAlarm.setStatus(
        ""
    )

xATSGeneratorGroundFaultAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 496)
)
xATSGeneratorGroundFaultAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSGeneratorGroundFaultAlarmCleared.setStatus(
        ""
    )

xATSOutputLoadPoweredByGeneratorAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 497)
)
xATSOutputLoadPoweredByGeneratorAlarm.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSOutputLoadPoweredByGeneratorAlarm.setStatus(
        ""
    )

xATSOutputLoadPoweredByGeneratorAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 498)
)
xATSOutputLoadPoweredByGeneratorAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSOutputLoadPoweredByGeneratorAlarmCleared.setStatus(
        ""
    )

xAPCControllerFirmwareUpdateTransferStart = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 499)
)
xAPCControllerFirmwareUpdateTransferStart.setObjects(
      *(("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xAPCControllerFirmwareUpdateTransferStart.setStatus(
        ""
    )

xAPCControllerFirmwareUpdateTransferComplete = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 500)
)
xAPCControllerFirmwareUpdateTransferComplete.setObjects(
      *(("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xAPCControllerFirmwareUpdateTransferComplete.setStatus(
        ""
    )

xAPCControllerFirmwareUpdateTransferFailed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 501)
)
xAPCControllerFirmwareUpdateTransferFailed.setObjects(
      *(("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xAPCControllerFirmwareUpdateTransferFailed.setStatus(
        ""
    )

upsPfcInputRelayFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 502)
)
upsPfcInputRelayFailure.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsPfcInputRelayFailure.setStatus(
        ""
    )

upsPfcInputRelayFailureCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 503)
)
upsPfcInputRelayFailureCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsPfcInputRelayFailureCleared.setStatus(
        ""
    )

upsInverterOverTemperature = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 504)
)
upsInverterOverTemperature.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsInverterOverTemperature.setStatus(
        ""
    )

upsInverterOverTemperatureCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 505)
)
upsInverterOverTemperatureCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsInverterOverTemperatureCleared.setStatus(
        ""
    )

upsBatteryOverVoltage = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 506)
)
upsBatteryOverVoltage.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsBatteryOverVoltage.setStatus(
        ""
    )

upsBatteryOverVoltageCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 507)
)
upsBatteryOverVoltageCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsBatteryOverVoltageCleared.setStatus(
        ""
    )

upsEepromFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 508)
)
upsEepromFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsEepromFault.setStatus(
        ""
    )

upsEepromFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 509)
)
upsEepromFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsEepromFaultCleared.setStatus(
        ""
    )

aruFanRuntimeAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 510)
)
aruFanRuntimeAlarm.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruFanRuntimeAlarm.setStatus(
        ""
    )

aruFanRuntimeAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 511)
)
aruFanRuntimeAlarmCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruFanRuntimeAlarmCleared.setStatus(
        ""
    )

aruFanPoorPerformanceAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 512)
)
aruFanPoorPerformanceAlarm.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruFanPoorPerformanceAlarm.setStatus(
        ""
    )

aruFanPoorPerformanceAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 513)
)
aruFanPoorPerformanceAlarmCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruFanPoorPerformanceAlarmCleared.setStatus(
        ""
    )

aruRedundantPowerLostAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 514)
)
aruRedundantPowerLostAlarm.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruRedundantPowerLostAlarm.setStatus(
        ""
    )

aruRedundantPowerLostAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 515)
)
aruRedundantPowerLostAlarmCleared.setObjects(
      *(("POWERNET-MIB", "emsIdentSerialNumber"),
        ("POWERNET-MIB", "emsIdentEMSName"),
        ("POWERNET-MIB", "rARUStatusAruIndex"),
        ("POWERNET-MIB", "rARUStatusAruName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    aruRedundantPowerLostAlarmCleared.setStatus(
        ""
    )

apcDeviceConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 516)
)
apcDeviceConfigChange.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDeviceConfigChange.setStatus(
        ""
    )

apcEnvSensorConnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 517)
)
apcEnvSensorConnected.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvSensorConnected.setStatus(
        ""
    )

apcEnvSensorDisconnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 518)
)
apcEnvSensorDisconnected.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvSensorDisconnected.setStatus(
        ""
    )

apcEnvMaxTempThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 519)
)
apcEnvMaxTempThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvMaxTempThresholdViolation.setStatus(
        ""
    )

apcEnvMaxTempThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 520)
)
apcEnvMaxTempThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvMaxTempThresholdViolationCleared.setStatus(
        ""
    )

apcEnvHighTempThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 521)
)
apcEnvHighTempThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvHighTempThresholdViolation.setStatus(
        ""
    )

apcEnvHighTempThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 522)
)
apcEnvHighTempThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvHighTempThresholdViolationCleared.setStatus(
        ""
    )

apcEnvLowTempThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 523)
)
apcEnvLowTempThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvLowTempThresholdViolation.setStatus(
        ""
    )

apcEnvLowTempThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 524)
)
apcEnvLowTempThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvLowTempThresholdViolationCleared.setStatus(
        ""
    )

apcEnvMinTempThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 525)
)
apcEnvMinTempThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvMinTempThresholdViolation.setStatus(
        ""
    )

apcEnvMinTempThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 526)
)
apcEnvMinTempThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvMinTempThresholdViolationCleared.setStatus(
        ""
    )

apcEnvSTIncTempRateViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 527)
)
apcEnvSTIncTempRateViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvSTIncTempRateViolation.setStatus(
        ""
    )

apcEnvSTIncTempRateViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 528)
)
apcEnvSTIncTempRateViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvSTIncTempRateViolationCleared.setStatus(
        ""
    )

apcEnvSTDecTempRateViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 529)
)
apcEnvSTDecTempRateViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvSTDecTempRateViolation.setStatus(
        ""
    )

apcEnvSTDecTempRateViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 530)
)
apcEnvSTDecTempRateViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvSTDecTempRateViolationCleared.setStatus(
        ""
    )

apcEnvLTIncTempRateViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 531)
)
apcEnvLTIncTempRateViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvLTIncTempRateViolation.setStatus(
        ""
    )

apcEnvLTIncTempRateViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 532)
)
apcEnvLTIncTempRateViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvLTIncTempRateViolationCleared.setStatus(
        ""
    )

apcEnvLTDecTempRateViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 533)
)
apcEnvLTDecTempRateViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvLTDecTempRateViolation.setStatus(
        ""
    )

apcEnvLTDecTempRateViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 534)
)
apcEnvLTDecTempRateViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvLTDecTempRateViolationCleared.setStatus(
        ""
    )

apcEnvMaxHumidityThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 535)
)
apcEnvMaxHumidityThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvMaxHumidityThresholdViolation.setStatus(
        ""
    )

apcEnvMaxHumidityThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 536)
)
apcEnvMaxHumidityThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvMaxHumidityThresholdViolationCleared.setStatus(
        ""
    )

apcEnvHighHumidityThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 537)
)
apcEnvHighHumidityThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvHighHumidityThresholdViolation.setStatus(
        ""
    )

apcEnvHighHumidityThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 538)
)
apcEnvHighHumidityThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvHighHumidityThresholdViolationCleared.setStatus(
        ""
    )

apcEnvLowHumidityThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 539)
)
apcEnvLowHumidityThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvLowHumidityThresholdViolation.setStatus(
        ""
    )

apcEnvLowHumidityThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 540)
)
apcEnvLowHumidityThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvLowHumidityThresholdViolationCleared.setStatus(
        ""
    )

apcEnvMinHumidityThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 541)
)
apcEnvMinHumidityThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvMinHumidityThresholdViolation.setStatus(
        ""
    )

apcEnvMinHumidityThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 542)
)
apcEnvMinHumidityThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcEnvMinHumidityThresholdViolationCleared.setStatus(
        ""
    )

apcBeaconConnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 543)
)
apcBeaconConnected.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcBeaconConnected.setStatus(
        ""
    )

apcBeaconDisconnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 544)
)
apcBeaconDisconnected.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcBeaconDisconnected.setStatus(
        ""
    )

apcBeaconOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 545)
)
apcBeaconOn.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcBeaconOn.setStatus(
        ""
    )

apcBeaconOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 546)
)
apcBeaconOff.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcBeaconOff.setStatus(
        ""
    )

apcOutletStateAbnormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 547)
)
apcOutletStateAbnormal.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcOutletStateAbnormal.setStatus(
        ""
    )

apcOutletStateNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 548)
)
apcOutletStateNormal.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcOutletStateNormal.setStatus(
        ""
    )

apcOutputRelayStateAbnormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 549)
)
apcOutputRelayStateAbnormal.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcOutputRelayStateAbnormal.setStatus(
        ""
    )

apcOutputRelayStateNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 550)
)
apcOutputRelayStateNormal.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcOutputRelayStateNormal.setStatus(
        ""
    )

apcHardwareStateAbnormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 551)
)
apcHardwareStateAbnormal.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcHardwareStateAbnormal.setStatus(
        ""
    )

apcHardwareStateNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 552)
)
apcHardwareStateNormal.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcHardwareStateNormal.setStatus(
        ""
    )

apcCriticalDiscreteInputContactStateAbnormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 553)
)
apcCriticalDiscreteInputContactStateAbnormal.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcCriticalDiscreteInputContactStateAbnormal.setStatus(
        ""
    )

apcCriticalDiscreteInputContactStateNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 554)
)
apcCriticalDiscreteInputContactStateNormal.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcCriticalDiscreteInputContactStateNormal.setStatus(
        ""
    )

apcWarningDiscreteInputContactStateAbnormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 555)
)
apcWarningDiscreteInputContactStateAbnormal.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcWarningDiscreteInputContactStateAbnormal.setStatus(
        ""
    )

apcWarningDiscreteInputContactStateNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 556)
)
apcWarningDiscreteInputContactStateNormal.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcWarningDiscreteInputContactStateNormal.setStatus(
        ""
    )

apcInformationalDiscreteInputContactStateAbnormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 557)
)
apcInformationalDiscreteInputContactStateAbnormal.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcInformationalDiscreteInputContactStateAbnormal.setStatus(
        ""
    )

apcInformationalDiscreteInputContactStateNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 558)
)
apcInformationalDiscreteInputContactStateNormal.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcInformationalDiscreteInputContactStateNormal.setStatus(
        ""
    )

apcAnalogInputMaxThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 559)
)
apcAnalogInputMaxThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcAnalogInputMaxThresholdViolation.setStatus(
        ""
    )

apcAnalogInputMaxThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 560)
)
apcAnalogInputMaxThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcAnalogInputMaxThresholdViolationCleared.setStatus(
        ""
    )

apcAnalogInputHighThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 561)
)
apcAnalogInputHighThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcAnalogInputHighThresholdViolation.setStatus(
        ""
    )

apcAnalogInputHighThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 562)
)
apcAnalogInputHighThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcAnalogInputHighThresholdViolationCleared.setStatus(
        ""
    )

apcAnalogInputLowThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 563)
)
apcAnalogInputLowThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcAnalogInputLowThresholdViolation.setStatus(
        ""
    )

apcAnalogInputLowThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 564)
)
apcAnalogInputLowThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcAnalogInputLowThresholdViolationCleared.setStatus(
        ""
    )

apcAnalogInputMinThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 565)
)
apcAnalogInputMinThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcAnalogInputMinThresholdViolation.setStatus(
        ""
    )

apcAnalogInputMinThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 566)
)
apcAnalogInputMinThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcAnalogInputMinThresholdViolationCleared.setStatus(
        ""
    )

apcDeviceClearLostComms = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 567)
)
apcDeviceClearLostComms.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDeviceClearLostComms.setStatus(
        ""
    )

apcDeviceConnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 568)
)
apcDeviceConnected.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDeviceConnected.setStatus(
        ""
    )

apcDeviceDisconnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 569)
)
apcDeviceDisconnected.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDeviceDisconnected.setStatus(
        ""
    )

apcUnregisteredUserAccessDenied = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 570)
)
apcUnregisteredUserAccessDenied.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcUnregisteredUserAccessDenied.setStatus(
        ""
    )

apcRegisteredUserAccessDenied = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 571)
)
apcRegisteredUserAccessDenied.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcRegisteredUserAccessDenied.setStatus(
        ""
    )

apcRegisteredUserConfigChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 572)
)
apcRegisteredUserConfigChange.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcRegisteredUserConfigChange.setStatus(
        ""
    )

apcDoorUnlocked = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 573)
)
apcDoorUnlocked.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDoorUnlocked.setStatus(
        ""
    )

apcDoorLocked = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 574)
)
apcDoorLocked.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDoorLocked.setStatus(
        ""
    )

apcHandleOpened = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 575)
)
apcHandleOpened.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcHandleOpened.setStatus(
        ""
    )

apcHandleClosed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 576)
)
apcHandleClosed.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcHandleClosed.setStatus(
        ""
    )

apcDoorOpened = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 577)
)
apcDoorOpened.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDoorOpened.setStatus(
        ""
    )

apcDoorClosed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 578)
)
apcDoorClosed.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDoorClosed.setStatus(
        ""
    )

apcKeyOverrideUnlocked = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 580)
)
apcKeyOverrideUnlocked.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcKeyOverrideUnlocked.setStatus(
        ""
    )

apcKeyOverrideLocked = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 581)
)
apcKeyOverrideLocked.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcKeyOverrideLocked.setStatus(
        ""
    )

apcForcedEntry = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 582)
)
apcForcedEntry.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcForcedEntry.setStatus(
        ""
    )

apcForcedEntryCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 583)
)
apcForcedEntryCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcForcedEntryCleared.setStatus(
        ""
    )

apcRelockTimeout = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 584)
)
apcRelockTimeout.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcRelockTimeout.setStatus(
        ""
    )

apcRelockTimeoutCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 585)
)
apcRelockTimeoutCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcRelockTimeoutCleared.setStatus(
        ""
    )

apcDoorSenseDisconnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 586)
)
apcDoorSenseDisconnected.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDoorSenseDisconnected.setStatus(
        ""
    )

apcDoorSenseConnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 587)
)
apcDoorSenseConnected.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDoorSenseConnected.setStatus(
        ""
    )

apcDoorLostComms = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 588)
)
apcDoorLostComms.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDoorLostComms.setStatus(
        ""
    )

apcDoorEstablishedComms = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 589)
)
apcDoorEstablishedComms.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDoorEstablishedComms.setStatus(
        ""
    )

apcRegisteredUserAccessChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 590)
)
apcRegisteredUserAccessChange.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcRegisteredUserAccessChange.setStatus(
        ""
    )

apcUnregisteredUserStatusChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 591)
)
apcUnregisteredUserStatusChange.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcUnregisteredUserStatusChange.setStatus(
        ""
    )

apcDeviceClearUserConfigs = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 592)
)
apcDeviceClearUserConfigs.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDeviceClearUserConfigs.setStatus(
        ""
    )

upsBatteryTempSensorFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 600)
)
upsBatteryTempSensorFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsBatteryTempSensorFault.setStatus(
        ""
    )

upsBatteryTempSensorFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 601)
)
upsBatteryTempSensorFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsBatteryTempSensorFaultCleared.setStatus(
        ""
    )

upsBatterySoftBusStartFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 602)
)
upsBatterySoftBusStartFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsBatterySoftBusStartFault.setStatus(
        ""
    )

upsBatterySoftBusStartFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 603)
)
upsBatterySoftBusStartFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsBatterySoftBusStartFaultCleared.setStatus(
        ""
    )

apcOutputShortCircuit = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 604)
)
apcOutputShortCircuit.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcOutputShortCircuit.setStatus(
        ""
    )

apcOutputShortCircuitCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 605)
)
apcOutputShortCircuitCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcOutputShortCircuitCleared.setStatus(
        ""
    )

apcOutputRelayFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 606)
)
apcOutputRelayFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcOutputRelayFault.setStatus(
        ""
    )

apcOutputRelayFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 607)
)
apcOutputRelayFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcOutputRelayFaultCleared.setStatus(
        ""
    )

upsPfcFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 608)
)
upsPfcFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsPfcFault.setStatus(
        ""
    )

upsPfcFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 609)
)
upsPfcFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsPfcFaultCleared.setStatus(
        ""
    )

apcDcBusOverVoltage = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 610)
)
apcDcBusOverVoltage.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcDcBusOverVoltage.setStatus(
        ""
    )

apcDcBusOverVoltageCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 611)
)
apcDcBusOverVoltageCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcDcBusOverVoltageCleared.setStatus(
        ""
    )

upsInverterFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 612)
)
upsInverterFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsInverterFault.setStatus(
        ""
    )

upsInverterFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 613)
)
upsInverterFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsInverterFaultCleared.setStatus(
        ""
    )

apcAdConverterFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 614)
)
apcAdConverterFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcAdConverterFault.setStatus(
        ""
    )

apcAdConverterFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 615)
)
apcAdConverterFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcAdConverterFaultCleared.setStatus(
        ""
    )

apcLogicPowerSupplyFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 616)
)
apcLogicPowerSupplyFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcLogicPowerSupplyFault.setStatus(
        ""
    )

apcLogicPowerSupplyFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 617)
)
apcLogicPowerSupplyFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcLogicPowerSupplyFaultCleared.setStatus(
        ""
    )

apcTransformerDCImbalanceFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 618)
)
apcTransformerDCImbalanceFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcTransformerDCImbalanceFault.setStatus(
        ""
    )

apcTransformerDCImbalanceFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 619)
)
apcTransformerDCImbalanceFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcTransformerDCImbalanceFaultCleared.setStatus(
        ""
    )

upsBackfeedRelayFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 620)
)
upsBackfeedRelayFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsBackfeedRelayFault.setStatus(
        ""
    )

upsBackfeedRelayFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 621)
)
upsBackfeedRelayFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsBackfeedRelayFaultCleared.setStatus(
        ""
    )

upsBypassRelayFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 622)
)
upsBypassRelayFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsBypassRelayFault.setStatus(
        ""
    )

upsBypassRelayFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 623)
)
upsBypassRelayFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsBypassRelayFaultCleared.setStatus(
        ""
    )

xPDUBranchCurrentMinAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 626)
)
xPDUBranchCurrentMinAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBranchCurrentMinAlarm.setStatus(
        ""
    )

xPDUBranchCurrentMinAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 627)
)
xPDUBranchCurrentMinAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBranchCurrentMinAlarmCleared.setStatus(
        ""
    )

xPDUBranchCurrentMaxAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 628)
)
xPDUBranchCurrentMaxAlarm.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBranchCurrentMaxAlarm.setStatus(
        ""
    )

xPDUBranchCurrentMaxAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 629)
)
xPDUBranchCurrentMaxAlarmCleared.setObjects(
      *(("POWERNET-MIB", "xPDUIdentSerialNumber"),
        ("POWERNET-MIB", "xPDUIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xPDUBranchCurrentMaxAlarmCleared.setStatus(
        ""
    )

rPDUOutletLowLoad = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 630)
)
rPDUOutletLowLoad.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDUOutletStatusIndex"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUOutletLowLoad.setStatus(
        ""
    )

rPDUOutletLowLoadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 631)
)
rPDUOutletLowLoadCleared.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDUOutletStatusIndex"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUOutletLowLoadCleared.setStatus(
        ""
    )

rPDUOutletNearOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 632)
)
rPDUOutletNearOverload.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDUOutletStatusIndex"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUOutletNearOverload.setStatus(
        ""
    )

rPDUOutletNearOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 633)
)
rPDUOutletNearOverloadCleared.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDUOutletStatusIndex"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUOutletNearOverloadCleared.setStatus(
        ""
    )

rPDUOutletOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 634)
)
rPDUOutletOverload.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDUOutletStatusIndex"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUOutletOverload.setStatus(
        ""
    )

rPDUOutletOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 635)
)
rPDUOutletOverloadCleared.setObjects(
      *(("POWERNET-MIB", "rPDUIdentSerialNumber"),
        ("POWERNET-MIB", "rPDUIdentName"),
        ("POWERNET-MIB", "rPDUOutletStatusIndex"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rPDUOutletOverloadCleared.setStatus(
        ""
    )

apcTestTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 636)
)
apcTestTrap.setObjects(
      *(("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcTestTrap.setStatus(
        ""
    )

baseFanFailureCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 637)
)
baseFanFailureCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    baseFanFailureCleared.setStatus(
        ""
    )

atsLowLoad = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 638)
)
atsLowLoad.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "atsOutputPhaseIndex"),
        ("POWERNET-MIB", "atsOutputBank"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsLowLoad.setStatus(
        ""
    )

atsLowLoadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 639)
)
atsLowLoadCleared.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "atsOutputPhaseIndex"),
        ("POWERNET-MIB", "atsOutputBank"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsLowLoadCleared.setStatus(
        ""
    )

atsNearOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 640)
)
atsNearOverload.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "atsOutputPhaseIndex"),
        ("POWERNET-MIB", "atsOutputBank"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsNearOverload.setStatus(
        ""
    )

atsNearOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 641)
)
atsNearOverloadCleared.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "atsOutputPhaseIndex"),
        ("POWERNET-MIB", "atsOutputBank"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsNearOverloadCleared.setStatus(
        ""
    )

atsOverload = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 642)
)
atsOverload.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "atsOutputPhaseIndex"),
        ("POWERNET-MIB", "atsOutputBank"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsOverload.setStatus(
        ""
    )

atsOverloadCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 643)
)
atsOverloadCleared.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "atsOutputPhaseIndex"),
        ("POWERNET-MIB", "atsOutputBank"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsOverloadCleared.setStatus(
        ""
    )

atsRMSOverVoltage = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 644)
)
atsRMSOverVoltage.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsRMSOverVoltage.setStatus(
        ""
    )

atsRMSOverVoltageCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 645)
)
atsRMSOverVoltageCleared.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsRMSOverVoltageCleared.setStatus(
        ""
    )

atsRMSUnderVoltage = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 646)
)
atsRMSUnderVoltage.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsRMSUnderVoltage.setStatus(
        ""
    )

atsRMSUnderVoltageCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 647)
)
atsRMSUnderVoltageCleared.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsRMSUnderVoltageCleared.setStatus(
        ""
    )

atsRMSOverFrequency = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 648)
)
atsRMSOverFrequency.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsRMSOverFrequency.setStatus(
        ""
    )

atsRMSOverFrequencyCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 649)
)
atsRMSOverFrequencyCleared.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsRMSOverFrequencyCleared.setStatus(
        ""
    )

atsRMSUnderFrequency = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 650)
)
atsRMSUnderFrequency.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsRMSUnderFrequency.setStatus(
        ""
    )

atsRMSUnderFrequencyCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 651)
)
atsRMSUnderFrequencyCleared.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsRMSUnderFrequencyCleared.setStatus(
        ""
    )

isxModularDistributionCommLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 652)
)
isxModularDistributionCommLost.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularDistributionCommLost.setStatus(
        ""
    )

isxModularDistributionCommEstablished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 653)
)
isxModularDistributionCommEstablished.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularDistributionCommEstablished.setStatus(
        ""
    )

isxModularDistributionModuleInserted = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 654)
)
isxModularDistributionModuleInserted.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularDistributionModuleInserted.setStatus(
        ""
    )

isxModularDistributionModuleRemoved = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 655)
)
isxModularDistributionModuleRemoved.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularDistributionModuleRemoved.setStatus(
        ""
    )

isxModularBreakerOpenAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 656)
)
isxModularBreakerOpenAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularBreakerOpenAlarm.setStatus(
        ""
    )

isxModularBreakerOpenAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 657)
)
isxModularBreakerOpenAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularBreakerOpenAlarmCleared.setStatus(
        ""
    )

isxModularMinCurrentThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 658)
)
isxModularMinCurrentThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularMinCurrentThresholdViolation.setStatus(
        ""
    )

isxModularMinCurrentThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 659)
)
isxModularMinCurrentThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularMinCurrentThresholdViolationCleared.setStatus(
        ""
    )

isxModularLowCurrentThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 660)
)
isxModularLowCurrentThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularLowCurrentThresholdViolation.setStatus(
        ""
    )

isxModularLowCurrentThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 661)
)
isxModularLowCurrentThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularLowCurrentThresholdViolationCleared.setStatus(
        ""
    )

isxModularHighCurrentThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 662)
)
isxModularHighCurrentThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularHighCurrentThresholdViolation.setStatus(
        ""
    )

isxModularHighCurrentThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 663)
)
isxModularHighCurrentThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularHighCurrentThresholdViolationCleared.setStatus(
        ""
    )

isxModularMaxCurrentThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 664)
)
isxModularMaxCurrentThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularMaxCurrentThresholdViolation.setStatus(
        ""
    )

isxModularMaxCurrentThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 665)
)
isxModularMaxCurrentThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularMaxCurrentThresholdViolationCleared.setStatus(
        ""
    )

isxModularSubfeedBreakerOpenAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 666)
)
isxModularSubfeedBreakerOpenAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularSubfeedBreakerOpenAlarm.setStatus(
        ""
    )

isxModularSubfeedBreakerOpenAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 667)
)
isxModularSubfeedBreakerOpenAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularSubfeedBreakerOpenAlarmCleared.setStatus(
        ""
    )

isxModularSubfeedMinCurrentThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 668)
)
isxModularSubfeedMinCurrentThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularSubfeedMinCurrentThresholdViolation.setStatus(
        ""
    )

isxModularSubfeedMinCurrentThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 669)
)
isxModularSubfeedMinCurrentThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularSubfeedMinCurrentThresholdViolationCleared.setStatus(
        ""
    )

isxModularSubfeedLowCurrentThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 670)
)
isxModularSubfeedLowCurrentThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularSubfeedLowCurrentThresholdViolation.setStatus(
        ""
    )

isxModularSubfeedLowCurrentThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 671)
)
isxModularSubfeedLowCurrentThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularSubfeedLowCurrentThresholdViolationCleared.setStatus(
        ""
    )

isxModularSubfeedHighCurrentThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 672)
)
isxModularSubfeedHighCurrentThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularSubfeedHighCurrentThresholdViolation.setStatus(
        ""
    )

isxModularSubfeedHighCurrentThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 673)
)
isxModularSubfeedHighCurrentThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularSubfeedHighCurrentThresholdViolationCleared.setStatus(
        ""
    )

isxModularSubfeedMaxCurrentThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 674)
)
isxModularSubfeedMaxCurrentThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularSubfeedMaxCurrentThresholdViolation.setStatus(
        ""
    )

isxModularSubfeedMaxCurrentThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 675)
)
isxModularSubfeedMaxCurrentThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularSubfeedMaxCurrentThresholdViolationCleared.setStatus(
        ""
    )

isxModularTotalOutputCurrentMinThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 676)
)
isxModularTotalOutputCurrentMinThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularTotalOutputCurrentMinThresholdViolation.setStatus(
        ""
    )

isxModularTotalOutputCurrentMinThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 677)
)
isxModularTotalOutputCurrentMinThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularTotalOutputCurrentMinThresholdViolationCleared.setStatus(
        ""
    )

isxModularTotalOutputCurrentLowThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 678)
)
isxModularTotalOutputCurrentLowThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularTotalOutputCurrentLowThresholdViolation.setStatus(
        ""
    )

isxModularTotalOutputCurrentLowThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 679)
)
isxModularTotalOutputCurrentLowThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularTotalOutputCurrentLowThresholdViolationCleared.setStatus(
        ""
    )

isxModularTotalOutputCurrentHighThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 680)
)
isxModularTotalOutputCurrentHighThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularTotalOutputCurrentHighThresholdViolation.setStatus(
        ""
    )

isxModularTotalOutputCurrentHighThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 681)
)
isxModularTotalOutputCurrentHighThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularTotalOutputCurrentHighThresholdViolationCleared.setStatus(
        ""
    )

isxModularTotalOutputCurrentMaxThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 682)
)
isxModularTotalOutputCurrentMaxThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularTotalOutputCurrentMaxThresholdViolation.setStatus(
        ""
    )

isxModularTotalOutputCurrentMaxThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 683)
)
isxModularTotalOutputCurrentMaxThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularTotalOutputCurrentMaxThresholdViolationCleared.setStatus(
        ""
    )

isxModularOutputVoltageMinThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 684)
)
isxModularOutputVoltageMinThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularOutputVoltageMinThresholdViolation.setStatus(
        ""
    )

isxModularOutputVoltageMinThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 685)
)
isxModularOutputVoltageMinThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularOutputVoltageMinThresholdViolationCleared.setStatus(
        ""
    )

isxModularOutputVoltageLowThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 686)
)
isxModularOutputVoltageLowThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularOutputVoltageLowThresholdViolation.setStatus(
        ""
    )

isxModularOutputVoltageLowThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 687)
)
isxModularOutputVoltageLowThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularOutputVoltageLowThresholdViolationCleared.setStatus(
        ""
    )

isxModularOutputVoltageHighThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 688)
)
isxModularOutputVoltageHighThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularOutputVoltageHighThresholdViolation.setStatus(
        ""
    )

isxModularOutputVoltageHighThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 689)
)
isxModularOutputVoltageHighThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularOutputVoltageHighThresholdViolationCleared.setStatus(
        ""
    )

isxModularOutputVoltageMaxThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 690)
)
isxModularOutputVoltageMaxThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularOutputVoltageMaxThresholdViolation.setStatus(
        ""
    )

isxModularOutputVoltageMaxThresholdViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 691)
)
isxModularOutputVoltageMaxThresholdViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularOutputVoltageMaxThresholdViolationCleared.setStatus(
        ""
    )

apcDoorClosedImproperly = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 692)
)
apcDoorClosedImproperly.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDoorClosedImproperly.setStatus(
        ""
    )

apcDoorClosedImproperlyCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 693)
)
apcDoorClosedImproperlyCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcDoorClosedImproperlyCleared.setStatus(
        ""
    )

apcUserScheduleViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 694)
)
apcUserScheduleViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcUserScheduleViolation.setStatus(
        ""
    )

apcUserScheduleViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 695)
)
apcUserScheduleViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    apcUserScheduleViolationCleared.setStatus(
        ""
    )

isxModularOutputFrequencyThresholdViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 696)
)
isxModularOutputFrequencyThresholdViolation.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularOutputFrequencyThresholdViolation.setStatus(
        ""
    )

isxModularOutputFrequencyViolationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 697)
)
isxModularOutputFrequencyViolationCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularOutputFrequencyViolationCleared.setStatus(
        ""
    )

atsSourceStatusFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 698)
)
atsSourceStatusFail.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsSourceStatusFail.setStatus(
        ""
    )

atsSourceStatusOk = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 699)
)
atsSourceStatusOk.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsSourceStatusOk.setStatus(
        ""
    )

atsHardwareStatusFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 700)
)
atsHardwareStatusFail.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsHardwareStatusFail.setStatus(
        ""
    )

atsHardwareStatusOk = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 701)
)
atsHardwareStatusOk.setObjects(
      *(("POWERNET-MIB", "atsIdentSerialNumber"),
        ("POWERNET-MIB", "atsConfigProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    atsHardwareStatusOk.setStatus(
        ""
    )

atsControllerRestart = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 702)
)
atsControllerRestart.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    atsControllerRestart.setStatus(
        ""
    )

xATSS1BadPhaseRotation = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 724)
)
xATSS1BadPhaseRotation.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSS1BadPhaseRotation.setStatus(
        ""
    )

xATSS1BadPhaseRotationCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 725)
)
xATSS1BadPhaseRotationCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSS1BadPhaseRotationCleared.setStatus(
        ""
    )

xATSS1BadPhaseBalance = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 726)
)
xATSS1BadPhaseBalance.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSS1BadPhaseBalance.setStatus(
        ""
    )

xATSS1BadPhaseBalanceCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 727)
)
xATSS1BadPhaseBalanceCleared.setObjects(
      *(("POWERNET-MIB", "xATSIdentSerialNumber"),
        ("POWERNET-MIB", "xATSIdentProductName"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    xATSS1BadPhaseBalanceCleared.setStatus(
        ""
    )

isxModularTransformerOverheating = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 728)
)
isxModularTransformerOverheating.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularTransformerOverheating.setStatus(
        ""
    )

isxModularTransformerOverheatingCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 729)
)
isxModularTransformerOverheatingCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularTransformerOverheatingCleared.setStatus(
        ""
    )

apcInternalCommunicationFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 730)
)
apcInternalCommunicationFault.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcInternalCommunicationFault.setStatus(
        ""
    )

apcInternalCommunicationFaultCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 731)
)
apcInternalCommunicationFaultCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    apcInternalCommunicationFaultCleared.setStatus(
        ""
    )

upsOutletGroupCommand = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 732)
)
upsOutletGroupCommand.setObjects(
      *(("POWERNET-MIB", "upsOutletGroupControlIndex"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    upsOutletGroupCommand.setStatus(
        ""
    )

onbatterycommunicationLost = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 733)
)
onbatterycommunicationLost.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    onbatterycommunicationLost.setStatus(
        ""
    )

upsCriticalCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 734)
)
upsCriticalCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    upsCriticalCondition.setStatus(
        ""
    )

upsCriticalConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 735)
)
upsCriticalConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    upsCriticalConditionCleared.setStatus(
        ""
    )

upsWarningCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 736)
)
upsWarningCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    upsWarningCondition.setStatus(
        ""
    )

upsWarningConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 737)
)
upsWarningConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    upsWarningConditionCleared.setStatus(
        ""
    )

upsInformationalCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 738)
)
upsInformationalCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    upsInformationalCondition.setStatus(
        ""
    )

upsInformationalConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 739)
)
upsInformationalConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    upsInformationalConditionCleared.setStatus(
        ""
    )

isxcInformationalAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 740)
)
isxcInformationalAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsOctetString"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsOctetString02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsOctetString03"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString06"),
        ("POWERNET-MIB", "mtrapargsString07"),
        ("POWERNET-MIB", "mtrapargsOctetString04"),
        ("POWERNET-MIB", "mtrapargsOctetString05"),
        ("POWERNET-MIB", "mtrapargsString08"),
        ("POWERNET-MIB", "mtrapargsOctetString06"),
        ("POWERNET-MIB", "mtrapargsOctetString07"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsOctetString08"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxcInformationalAlarm.setStatus(
        ""
    )

isxcInformationalAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 741)
)
isxcInformationalAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsOctetString"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsOctetString02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsOctetString03"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString06"),
        ("POWERNET-MIB", "mtrapargsString07"),
        ("POWERNET-MIB", "mtrapargsOctetString04"),
        ("POWERNET-MIB", "mtrapargsOctetString05"),
        ("POWERNET-MIB", "mtrapargsString08"),
        ("POWERNET-MIB", "mtrapargsOctetString06"),
        ("POWERNET-MIB", "mtrapargsOctetString07"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsOctetString08"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxcInformationalAlarmCleared.setStatus(
        ""
    )

isxcWarningAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 742)
)
isxcWarningAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsOctetString"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsOctetString02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsOctetString03"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString06"),
        ("POWERNET-MIB", "mtrapargsString07"),
        ("POWERNET-MIB", "mtrapargsOctetString04"),
        ("POWERNET-MIB", "mtrapargsOctetString05"),
        ("POWERNET-MIB", "mtrapargsString08"),
        ("POWERNET-MIB", "mtrapargsOctetString06"),
        ("POWERNET-MIB", "mtrapargsOctetString07"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsOctetString08"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxcWarningAlarm.setStatus(
        ""
    )

isxcWarningAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 743)
)
isxcWarningAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsOctetString"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsOctetString02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsOctetString03"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString06"),
        ("POWERNET-MIB", "mtrapargsString07"),
        ("POWERNET-MIB", "mtrapargsOctetString04"),
        ("POWERNET-MIB", "mtrapargsOctetString05"),
        ("POWERNET-MIB", "mtrapargsString08"),
        ("POWERNET-MIB", "mtrapargsOctetString06"),
        ("POWERNET-MIB", "mtrapargsOctetString07"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsOctetString08"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxcWarningAlarmCleared.setStatus(
        ""
    )

isxcErrorAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 744)
)
isxcErrorAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsOctetString"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsOctetString02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsOctetString03"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString06"),
        ("POWERNET-MIB", "mtrapargsString07"),
        ("POWERNET-MIB", "mtrapargsOctetString04"),
        ("POWERNET-MIB", "mtrapargsOctetString05"),
        ("POWERNET-MIB", "mtrapargsString08"),
        ("POWERNET-MIB", "mtrapargsOctetString06"),
        ("POWERNET-MIB", "mtrapargsOctetString07"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsOctetString08"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxcErrorAlarm.setStatus(
        ""
    )

isxcErrorAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 745)
)
isxcErrorAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsOctetString"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsOctetString02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsOctetString03"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString06"),
        ("POWERNET-MIB", "mtrapargsString07"),
        ("POWERNET-MIB", "mtrapargsOctetString04"),
        ("POWERNET-MIB", "mtrapargsOctetString05"),
        ("POWERNET-MIB", "mtrapargsString08"),
        ("POWERNET-MIB", "mtrapargsOctetString06"),
        ("POWERNET-MIB", "mtrapargsOctetString07"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsOctetString08"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxcErrorAlarmCleared.setStatus(
        ""
    )

isxcCriticalAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 746)
)
isxcCriticalAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsOctetString"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsOctetString02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsOctetString03"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString06"),
        ("POWERNET-MIB", "mtrapargsString07"),
        ("POWERNET-MIB", "mtrapargsOctetString04"),
        ("POWERNET-MIB", "mtrapargsOctetString05"),
        ("POWERNET-MIB", "mtrapargsString08"),
        ("POWERNET-MIB", "mtrapargsOctetString06"),
        ("POWERNET-MIB", "mtrapargsOctetString07"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsOctetString08"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxcCriticalAlarm.setStatus(
        ""
    )

isxcCriticalAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 747)
)
isxcCriticalAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsOctetString"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsOctetString02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsOctetString03"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString06"),
        ("POWERNET-MIB", "mtrapargsString07"),
        ("POWERNET-MIB", "mtrapargsOctetString04"),
        ("POWERNET-MIB", "mtrapargsOctetString05"),
        ("POWERNET-MIB", "mtrapargsString08"),
        ("POWERNET-MIB", "mtrapargsOctetString06"),
        ("POWERNET-MIB", "mtrapargsOctetString07"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsOctetString08"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxcCriticalAlarmCleared.setStatus(
        ""
    )

isxcFailureAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 748)
)
isxcFailureAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsOctetString"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsOctetString02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsOctetString03"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString06"),
        ("POWERNET-MIB", "mtrapargsString07"),
        ("POWERNET-MIB", "mtrapargsOctetString04"),
        ("POWERNET-MIB", "mtrapargsOctetString05"),
        ("POWERNET-MIB", "mtrapargsString08"),
        ("POWERNET-MIB", "mtrapargsOctetString06"),
        ("POWERNET-MIB", "mtrapargsOctetString07"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsOctetString08"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxcFailureAlarm.setStatus(
        ""
    )

isxcFailureAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 749)
)
isxcFailureAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsOctetString"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsOctetString02"),
        ("POWERNET-MIB", "mtrapargsString04"),
        ("POWERNET-MIB", "mtrapargsOctetString03"),
        ("POWERNET-MIB", "mtrapargsString05"),
        ("POWERNET-MIB", "mtrapargsString06"),
        ("POWERNET-MIB", "mtrapargsString07"),
        ("POWERNET-MIB", "mtrapargsOctetString04"),
        ("POWERNET-MIB", "mtrapargsOctetString05"),
        ("POWERNET-MIB", "mtrapargsString08"),
        ("POWERNET-MIB", "mtrapargsOctetString06"),
        ("POWERNET-MIB", "mtrapargsOctetString07"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsOctetString08"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxcFailureAlarmCleared.setStatus(
        ""
    )

rpduCriticalCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 750)
)
rpduCriticalCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rpduCriticalCondition.setStatus(
        ""
    )

rpduCriticalConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 751)
)
rpduCriticalConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rpduCriticalConditionCleared.setStatus(
        ""
    )

rpduWarningCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 752)
)
rpduWarningCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rpduWarningCondition.setStatus(
        ""
    )

rpduWarningConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 753)
)
rpduWarningConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rpduWarningConditionCleared.setStatus(
        ""
    )

rpduInformationalCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 754)
)
rpduInformationalCondition.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rpduInformationalCondition.setStatus(
        ""
    )

rpduInformationalConditionCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 755)
)
rpduInformationalConditionCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsInteger"),
        ("POWERNET-MIB", "mtrapargsInteger02"),
        ("POWERNET-MIB", "mtrapargsInteger03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    rpduInformationalConditionCleared.setStatus(
        ""
    )

isxModularCoolingFanAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 756)
)
isxModularCoolingFanAlarm.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularCoolingFanAlarm.setStatus(
        ""
    )

isxModularCoolingFanAlarmCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 757)
)
isxModularCoolingFanAlarmCleared.setObjects(
      *(("POWERNET-MIB", "mtrapargsString02"),
        ("POWERNET-MIB", "mtrapargsString03"),
        ("POWERNET-MIB", "mtrapargsString"))
)
if mibBuilder.loadTexts:
    isxModularCoolingFanAlarmCleared.setStatus(
        ""
    )

upsFirmwareUpdateStarted = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 758)
)
upsFirmwareUpdateStarted.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsFirmwareUpdateStarted.setStatus(
        ""
    )

upsFirmwareUpdateFinished = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 759)
)
upsFirmwareUpdateFinished.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsFirmwareUpdateFinished.setStatus(
        ""
    )

upsFirmwareUpdateSucceeded = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 760)
)
upsFirmwareUpdateSucceeded.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsFirmwareUpdateSucceeded.setStatus(
        ""
    )

upsFirmwareUpdateFailed = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 761)
)
upsFirmwareUpdateFailed.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsFirmwareUpdateFailed.setStatus(
        ""
    )

upsHasNoValidFirmware = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 762)
)
upsHasNoValidFirmware.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsHasNoValidFirmware.setStatus(
        ""
    )

upsHasNoValidFirmwareCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 318, 0, 763)
)
upsHasNoValidFirmwareCleared.setObjects(
    ("POWERNET-MIB", "mtrapargsString")
)
if mibBuilder.loadTexts:
    upsHasNoValidFirmwareCleared.setStatus(
        ""
    )


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "POWERNET-MIB",
    **{"Rpdu2OutletPhaseLayoutType": Rpdu2OutletPhaseLayoutType,
       "AirIRSCConfigType": AirIRSCConfigType,
       "AirIRSCCapacityControlType": AirIRSCCapacityControlType,
       "AirIRSCFanSpeedPreference": AirIRSCFanSpeedPreference,
       "AirIRSCFanSpeedControl": AirIRSCFanSpeedControl,
       "AirIRG2RDType2IOState": AirIRG2RDType2IOState,
       "AirIRmAlarmState": AirIRmAlarmState,
       "AirIRmControlState": AirIRmControlState,
       "AirIRmStopState": AirIRmStopState,
       "AirIRmActivityState": AirIRmActivityState,
       "apc": apc,
       "communicationLost": communicationLost,
       "upsOverload": upsOverload,
       "upsDiagnosticsFailed": upsDiagnosticsFailed,
       "upsDischarged": upsDischarged,
       "upsOnBattery": upsOnBattery,
       "smartBoostOn": smartBoostOn,
       "lowBattery": lowBattery,
       "communicationEstablished": communicationEstablished,
       "powerRestored": powerRestored,
       "upsDiagnosticsPassed": upsDiagnosticsPassed,
       "returnFromLowBattery": returnFromLowBattery,
       "upsTurnedOff": upsTurnedOff,
       "upsSleeping": upsSleeping,
       "upsWokeUp": upsWokeUp,
       "upsRebootStarted": upsRebootStarted,
       "upsDipSwitchChanged": upsDipSwitchChanged,
       "upsBatteryNeedsReplacement": upsBatteryNeedsReplacement,
       "contactFault": contactFault,
       "contactFaultResolved": contactFaultResolved,
       "hardwareFailureBypass": hardwareFailureBypass,
       "softwareBypass": softwareBypass,
       "switchedBypass": switchedBypass,
       "returnFromBypass": returnFromBypass,
       "bypassPowerSupplyFailure": bypassPowerSupplyFailure,
       "baseFanFailure": baseFanFailure,
       "batteryPackCommLost": batteryPackCommLost,
       "batteryPackCommEstablished": batteryPackCommEstablished,
       "calibrationStart": calibrationStart,
       "restartAgent": restartAgent,
       "upsTurnedOn": upsTurnedOn,
       "smartAvrReducing": smartAvrReducing,
       "codeAuthenticationDone": codeAuthenticationDone,
       "upsOverloadCleared": upsOverloadCleared,
       "smartBoostOff": smartBoostOff,
       "smartAvrReducingOff": smartAvrReducingOff,
       "upsBatteryReplaced": upsBatteryReplaced,
       "calibrationEnd": calibrationEnd,
       "dischargeCleared": dischargeCleared,
       "gracefullShutdown": gracefullShutdown,
       "outletOn": outletOn,
       "outletOff": outletOff,
       "outletReboot": outletReboot,
       "configChangeSNMP": configChangeSNMP,
       "configChangeOutlet": configChangeOutlet,
       "accessViolationConsole": accessViolationConsole,
       "accessViolationHTTP": accessViolationHTTP,
       "passwordChange": passwordChange,
       "badVoltage": badVoltage,
       "badVoltageCleared": badVoltageCleared,
       "chargerFailure": chargerFailure,
       "chargerFailureCleared": chargerFailureCleared,
       "batteryOverTemperature": batteryOverTemperature,
       "batteryOverTemperatureCleared": batteryOverTemperatureCleared,
       "smartRelayFault": smartRelayFault,
       "smartRelayFaultCleared": smartRelayFaultCleared,
       "humidityThresholdViolation1": humidityThresholdViolation1,
       "humidityThresholdViolationCleared1": humidityThresholdViolationCleared1,
       "temperatureThresholdViolation1": temperatureThresholdViolation1,
       "temperatureThresholdViolationCleared1": temperatureThresholdViolationCleared1,
       "humidityThresholdViolation2": humidityThresholdViolation2,
       "humidityThresholdViolationCleared2": humidityThresholdViolationCleared2,
       "temperatureThresholdViolation2": temperatureThresholdViolation2,
       "temperatureThresholdViolationCleared2": temperatureThresholdViolationCleared2,
       "mupsCommunicationEstablished": mupsCommunicationEstablished,
       "mupsCommunicationLost": mupsCommunicationLost,
       "batteryIncrease": batteryIncrease,
       "batteryDecrease": batteryDecrease,
       "powerModuleIncrease": powerModuleIncrease,
       "powerModuleDecrease": powerModuleDecrease,
       "intelligenceModuleInserted": intelligenceModuleInserted,
       "intelligenceModuleRemoved": intelligenceModuleRemoved,
       "rintelligenceModuleInserted": rintelligenceModuleInserted,
       "rintelligenceModuleRemoved": rintelligenceModuleRemoved,
       "extBatteryFrameIncease": extBatteryFrameIncease,
       "extBatteryFrameDecrease": extBatteryFrameDecrease,
       "abnormalCondition": abnormalCondition,
       "abnormalConditionCleared": abnormalConditionCleared,
       "deviceStatusChange": deviceStatusChange,
       "noBatteries": noBatteries,
       "noBatteriesCleared": noBatteriesCleared,
       "userAdded": userAdded,
       "userDeleted": userDeleted,
       "userModified": userModified,
       "msvmCommunicationEstablished": msvmCommunicationEstablished,
       "msvmCommunicationLost": msvmCommunicationLost,
       "msvmOverload": msvmOverload,
       "msvmOverloadCleared": msvmOverloadCleared,
       "msvmOutletOn": msvmOutletOn,
       "msvmOutletOff": msvmOutletOff,
       "msvmDeviceConfigChange": msvmDeviceConfigChange,
       "msvmOutletConfigChange": msvmOutletConfigChange,
       "msvmLowLoad": msvmLowLoad,
       "msvmLowLoadCleared": msvmLowLoadCleared,
       "msvmNearOverload": msvmNearOverload,
       "msvmNearOverloadCleared": msvmNearOverloadCleared,
       "msvmPowerSupplyStatusChange": msvmPowerSupplyStatusChange,
       "mspCommunicationEstablished": mspCommunicationEstablished,
       "mspCommunicationLost": mspCommunicationLost,
       "mspOutletOn": mspOutletOn,
       "mspOutletOff": mspOutletOff,
       "mspDeviceConfigChange": mspDeviceConfigChange,
       "mspOutletConfigChange": mspOutletConfigChange,
       "rsSourceSwitched": rsSourceSwitched,
       "rsLostRedundancy": rsLostRedundancy,
       "rsRedundancyRestored": rsRedundancyRestored,
       "rsConfigChange": rsConfigChange,
       "rsCommunicationEstablished": rsCommunicationEstablished,
       "rsCommunicationLost": rsCommunicationLost,
       "dcCommunicationEstablished": dcCommunicationEstablished,
       "dcCommunicationLost": dcCommunicationLost,
       "dcPINChanged": dcPINChanged,
       "dcMajorAlarm": dcMajorAlarm,
       "dcMajorAlarmCleared": dcMajorAlarmCleared,
       "dcMinorAlarm": dcMinorAlarm,
       "dcMinorAlarmCleared": dcMinorAlarmCleared,
       "dcOutputRelayOn": dcOutputRelayOn,
       "dcOutputRelayOff": dcOutputRelayOff,
       "dcInputRelayOn": dcInputRelayOn,
       "dcInputRelayOff": dcInputRelayOff,
       "logicPowerSuppliesIncreased": logicPowerSuppliesIncreased,
       "logicPowerSuppliesDecreased": logicPowerSuppliesDecreased,
       "externalSwitchGearClosed": externalSwitchGearClosed,
       "externalSwitchGearOpened": externalSwitchGearOpened,
       "generalDeviceEvent": generalDeviceEvent,
       "atsSourceSwitched": atsSourceSwitched,
       "atsLostRedundancy": atsLostRedundancy,
       "atsRedundancyRestored": atsRedundancyRestored,
       "atsConfigChange": atsConfigChange,
       "atsCommunicationEstablished": atsCommunicationEstablished,
       "atsCommunicationLost": atsCommunicationLost,
       "atsOverCurrent": atsOverCurrent,
       "atsOverCurrentCleared": atsOverCurrentCleared,
       "atsPowerSupplyFailure": atsPowerSupplyFailure,
       "atsPowerSupplyFailureCleared": atsPowerSupplyFailureCleared,
       "dcMainsFailAlarm": dcMainsFailAlarm,
       "dcMainsFailAlarmCleared": dcMainsFailAlarmCleared,
       "dcFanFailAlarm": dcFanFailAlarm,
       "dcFanFailAlarmCleared": dcFanFailAlarmCleared,
       "dcRectifierOvertempAlarm": dcRectifierOvertempAlarm,
       "dcRectifierOvertempAlarmCleared": dcRectifierOvertempAlarmCleared,
       "dcCurrentLimitAlarm": dcCurrentLimitAlarm,
       "dcCurrentLimitAlarmCleared": dcCurrentLimitAlarmCleared,
       "dcRectifierFailAlarm": dcRectifierFailAlarm,
       "dcRectifierFailAlarmCleared": dcRectifierFailAlarmCleared,
       "dcMultRectFailAlarm": dcMultRectFailAlarm,
       "dcMultRectFailAlarmCleared": dcMultRectFailAlarmCleared,
       "dcBatteryBreakerAlarm": dcBatteryBreakerAlarm,
       "dcBatteryBreakerAlarmCleared": dcBatteryBreakerAlarmCleared,
       "dcRectifierOVPAlarm": dcRectifierOVPAlarm,
       "dcRectifierOVPAlarmCleared": dcRectifierOVPAlarmCleared,
       "dcLVDImminentAlarm": dcLVDImminentAlarm,
       "dcLVDImminentAlarmCleared": dcLVDImminentAlarmCleared,
       "dcFuseCBAlarm": dcFuseCBAlarm,
       "dcFuseCBAlarmCleared": dcFuseCBAlarmCleared,
       "dcBatteryTestFail": dcBatteryTestFail,
       "dcTemperatureAlarm": dcTemperatureAlarm,
       "dcTemperatureAlarmCleared": dcTemperatureAlarmCleared,
       "dcHumidityAlarm": dcHumidityAlarm,
       "dcHumidityAlarmCleared": dcHumidityAlarmCleared,
       "dcBBCommunicationEstablished": dcBBCommunicationEstablished,
       "dcBBCommunicationLost": dcBBCommunicationLost,
       "iemHighTempThresholdViolation": iemHighTempThresholdViolation,
       "iemHighTempThresholdViolationCleared": iemHighTempThresholdViolationCleared,
       "iemLowTempThresholdViolation": iemLowTempThresholdViolation,
       "iemLowTempThresholdViolationCleared": iemLowTempThresholdViolationCleared,
       "iemHighHumidThresholdViolation": iemHighHumidThresholdViolation,
       "iemHighHumidThresholdViolationCleared": iemHighHumidThresholdViolationCleared,
       "iemLowHumidThresholdViolation": iemLowHumidThresholdViolation,
       "iemLowHumidThresholdViolationCleared": iemLowHumidThresholdViolationCleared,
       "iemProbeDisconnected": iemProbeDisconnected,
       "iemProbeConnected": iemProbeConnected,
       "iemContactFault": iemContactFault,
       "iemContactFaultCleared": iemContactFaultCleared,
       "iemRelayFault": iemRelayFault,
       "iemRelayFaultCleared": iemRelayFaultCleared,
       "bmBatManCommEstab": bmBatManCommEstab,
       "bmBatManCommLost": bmBatManCommLost,
       "bmBatManKneeAlarm": bmBatManKneeAlarm,
       "bmBatManKneeAlarmCleared": bmBatManKneeAlarmCleared,
       "bmBatManChargerAlarm": bmBatManChargerAlarm,
       "bmBatManChargerAlarmCleared": bmBatManChargerAlarmCleared,
       "bmBatManBatteryAlarm": bmBatManBatteryAlarm,
       "bmBatManBatteryAlarmCleared": bmBatManBatteryAlarmCleared,
       "bmBatManEnvironmentAlarm": bmBatManEnvironmentAlarm,
       "bmBatManEnvironmentAlarmCleared": bmBatManEnvironmentAlarmCleared,
       "bmBatManMaintenanceAlarm": bmBatManMaintenanceAlarm,
       "bmBatManMaintenanceAlarmCleared": bmBatManMaintenanceAlarmCleared,
       "pduCommunicationEstablished": pduCommunicationEstablished,
       "pduCommunicationLost": pduCommunicationLost,
       "pduUtilityLineUndervoltage": pduUtilityLineUndervoltage,
       "pduUtilityLineUndervoltageCleared": pduUtilityLineUndervoltageCleared,
       "pduUtilityLineOvervoltage": pduUtilityLineOvervoltage,
       "pduUtilityLineOvervoltageCleared": pduUtilityLineOvervoltageCleared,
       "pduGroundOvercurrent": pduGroundOvercurrent,
       "pduGroundOvercurrentCleared": pduGroundOvercurrentCleared,
       "pduCircuitPanelInputUndervoltage": pduCircuitPanelInputUndervoltage,
       "pduCircuitPanelInputUndervoltageCleared": pduCircuitPanelInputUndervoltageCleared,
       "pduCircuitPanelInputOvervoltage": pduCircuitPanelInputOvervoltage,
       "pduCircuitPanelInputOvervoltageCleared": pduCircuitPanelInputOvervoltageCleared,
       "pduCircuitPanelInputUndercurrent": pduCircuitPanelInputUndercurrent,
       "pduCircuitPanelInputUndercurrentCleared": pduCircuitPanelInputUndercurrentCleared,
       "pduCircuitPanelInputOvercurrent": pduCircuitPanelInputOvercurrent,
       "pduCircuitPanelInputOvercurrentCleared": pduCircuitPanelInputOvercurrentCleared,
       "pduCircuitPanelFrequencyOutOfRange": pduCircuitPanelFrequencyOutOfRange,
       "pduCircuitPanelFrequencyOutofRangeCleared": pduCircuitPanelFrequencyOutofRangeCleared,
       "pduCircuitPanelNeutralOvercurrent": pduCircuitPanelNeutralOvercurrent,
       "pduCircuitPanelNeutralOvercurrentCleared": pduCircuitPanelNeutralOvercurrentCleared,
       "pduSystemOff": pduSystemOff,
       "pduOnBatteryMode": pduOnBatteryMode,
       "pduMaintenanceBypassMode": pduMaintenanceBypassMode,
       "pduAtypicalBypassMode": pduAtypicalBypassMode,
       "pduNoPanelFeedMode": pduNoPanelFeedMode,
       "pduUpsOperationMode": pduUpsOperationMode,
       "pduForcedBypassMode": pduForcedBypassMode,
       "pduInputTransformerOverTemperature": pduInputTransformerOverTemperature,
       "pduInputTransformerOverTemperatureCleared": pduInputTransformerOverTemperatureCleared,
       "pduUPSInputVoltageLost": pduUPSInputVoltageLost,
       "pduUPSInputVoltageRestored": pduUPSInputVoltageRestored,
       "pduContactFault": pduContactFault,
       "pduContactFaultCleared": pduContactFaultCleared,
       "rPDUBankPhaseLowLoad": rPDUBankPhaseLowLoad,
       "rPDUBankPhaseLowLoadCleared": rPDUBankPhaseLowLoadCleared,
       "rPDUBankPhaseNearOverload": rPDUBankPhaseNearOverload,
       "rPDUBankPhaseNearOverloadCleared": rPDUBankPhaseNearOverloadCleared,
       "rPDUBankPhaseOverload": rPDUBankPhaseOverload,
       "rPDUBankPhaseOverloadCleared": rPDUBankPhaseOverloadCleared,
       "aruDeviceConfigChange": aruDeviceConfigChange,
       "rmPDUCommunicationLost": rmPDUCommunicationLost,
       "emsCommunicationEstablished": emsCommunicationEstablished,
       "emsCommunicationLost": emsCommunicationLost,
       "emsProbeConnected": emsProbeConnected,
       "emsProbeDisconnected": emsProbeDisconnected,
       "emsSensorConnected": emsSensorConnected,
       "emsSensorDisconnected": emsSensorDisconnected,
       "emsSensorFault": emsSensorFault,
       "emsSensorFaultCleared": emsSensorFaultCleared,
       "emsBeaconConnected": emsBeaconConnected,
       "emsBeaconDisconnected": emsBeaconDisconnected,
       "emsBeaconOn": emsBeaconOn,
       "emsBeaconOff": emsBeaconOff,
       "emsMajorAlarm": emsMajorAlarm,
       "emsMajorAlarmCleared": emsMajorAlarmCleared,
       "emsMinorAlarm": emsMinorAlarm,
       "emsMinorAlarmCleared": emsMinorAlarmCleared,
       "emsOutletStateAbnormal": emsOutletStateAbnormal,
       "emsOutletStateNormal": emsOutletStateNormal,
       "emsInputContactStateAbnormal": emsInputContactStateAbnormal,
       "emsInputContactStateNormal": emsInputContactStateNormal,
       "emsOutputRelayStateAbnormal": emsOutputRelayStateAbnormal,
       "emsOutputRelayStateNormal": emsOutputRelayStateNormal,
       "emsDeviceConfigChange": emsDeviceConfigChange,
       "envHighTempThresholdViolation": envHighTempThresholdViolation,
       "envHighTempThresholdViolationCleared": envHighTempThresholdViolationCleared,
       "envLowTempThresholdViolation": envLowTempThresholdViolation,
       "envLowTempThresholdViolationCleared": envLowTempThresholdViolationCleared,
       "envHighHumidityThresholdViolation": envHighHumidityThresholdViolation,
       "envHighHumidityThresholdViolationCleared": envHighHumidityThresholdViolationCleared,
       "envLowHumidityThresholdViolation": envLowHumidityThresholdViolation,
       "envLowHumidityThresholdViolationCleared": envLowHumidityThresholdViolationCleared,
       "rPDUCommunicationEstablished": rPDUCommunicationEstablished,
       "rPDUCommunicationLost": rPDUCommunicationLost,
       "rPDUOutletOn": rPDUOutletOn,
       "rPDUOutletOff": rPDUOutletOff,
       "rPDUDeviceConfigChange": rPDUDeviceConfigChange,
       "rPDUOutletConfigChange": rPDUOutletConfigChange,
       "rPDULowLoad": rPDULowLoad,
       "rPDULowLoadCleared": rPDULowLoadCleared,
       "rPDUNearOverload": rPDUNearOverload,
       "rPDUNearOverloadCleared": rPDUNearOverloadCleared,
       "rPDUOverload": rPDUOverload,
       "rPDUOverloadCleared": rPDUOverloadCleared,
       "rPDUPowerSupply1Fail": rPDUPowerSupply1Fail,
       "rPDUPowerSupply1Ok": rPDUPowerSupply1Ok,
       "rPDUPowerSupply2Fail": rPDUPowerSupply2Fail,
       "rPDUPowerSupply2Ok": rPDUPowerSupply2Ok,
       "rPDUPhaseConfigChange": rPDUPhaseConfigChange,
       "rPDUCancelPendingCommand": rPDUCancelPendingCommand,
       "aruAlinkCommunicationEstablished": aruAlinkCommunicationEstablished,
       "aruAlinkCommunicationLost": aruAlinkCommunicationLost,
       "aruFanFail": aruFanFail,
       "aruFanFailCleared": aruFanFailCleared,
       "aruSmokeAlarm": aruSmokeAlarm,
       "aruSmokeAlarmCleared": aruSmokeAlarmCleared,
       "aruHighTemperatureAlarm": aruHighTemperatureAlarm,
       "aruHighTemperatureAlarmCleared": aruHighTemperatureAlarmCleared,
       "aruExhaustTemperatureAlarm": aruExhaustTemperatureAlarm,
       "aruExhaustTemperatureAlarmCleared": aruExhaustTemperatureAlarmCleared,
       "envAlinkCommunicationEstablished": envAlinkCommunicationEstablished,
       "envAlinkCommunicationLost": envAlinkCommunicationLost,
       "emsAlinkPowerOverload": emsAlinkPowerOverload,
       "emsAlinkPowerOverloadCleared": emsAlinkPowerOverloadCleared,
       "upsOutletGroupTurnedOn": upsOutletGroupTurnedOn,
       "upsOutletGroupTurnedOff": upsOutletGroupTurnedOff,
       "smwCriticalCondition": smwCriticalCondition,
       "smwCriticalConditionCleared": smwCriticalConditionCleared,
       "smwWarningCondition": smwWarningCondition,
       "smwWarningConditionCleared": smwWarningConditionCleared,
       "smwInformationalCondition": smwInformationalCondition,
       "smwInformationalConditionCleared": smwInformationalConditionCleared,
       "airCriticalCondition": airCriticalCondition,
       "airCriticalConditionCleared": airCriticalConditionCleared,
       "airWarningCondition": airWarningCondition,
       "airWarningConditionCleared": airWarningConditionCleared,
       "airInformationalCondition": airInformationalCondition,
       "airInformationalConditionCleared": airInformationalConditionCleared,
       "xPDUInputVoltageLowAlarm": xPDUInputVoltageLowAlarm,
       "xPDUInputVoltageLowAlarmCleared": xPDUInputVoltageLowAlarmCleared,
       "xPDUInputVoltageHighAlarm": xPDUInputVoltageHighAlarm,
       "xPDUInputVoltageHighAlarmCleared": xPDUInputVoltageHighAlarmCleared,
       "xPDUBypassVoltageLowAlarm": xPDUBypassVoltageLowAlarm,
       "xPDUBypassVoltageLowAlarmCleared": xPDUBypassVoltageLowAlarmCleared,
       "xPDUBypassVoltageHighAlarm": xPDUBypassVoltageHighAlarm,
       "xPDUBypassVoltageHighAlarmCleared": xPDUBypassVoltageHighAlarmCleared,
       "xPDUOutputVoltageLowAlarm": xPDUOutputVoltageLowAlarm,
       "xPDUOutputVoltageLowAlarmCleared": xPDUOutputVoltageLowAlarmCleared,
       "xPDUOutputVoltageHighAlarm": xPDUOutputVoltageHighAlarm,
       "xPDUOutputVoltageHighAlarmCleared": xPDUOutputVoltageHighAlarmCleared,
       "xPDUOutputCurrentLowAlarm": xPDUOutputCurrentLowAlarm,
       "xPDUOutputCurrentLowAlarmCleared": xPDUOutputCurrentLowAlarmCleared,
       "xPDUOutputCurrentHighAlarm": xPDUOutputCurrentHighAlarm,
       "xPDUOutputCurrentHighAlarmCleared": xPDUOutputCurrentHighAlarmCleared,
       "xPDUOutputFrequencyAlarm": xPDUOutputFrequencyAlarm,
       "xPDUOutputFrequencyAlarmCleared": xPDUOutputFrequencyAlarmCleared,
       "xPDUSystemGroundCurrentAlarm": xPDUSystemGroundCurrentAlarm,
       "xPDUSystemGroundCurrentAlarmCleared": xPDUSystemGroundCurrentAlarmCleared,
       "xPDUInputContactStateAbnormal": xPDUInputContactStateAbnormal,
       "xPDUInputContactStateNormal": xPDUInputContactStateNormal,
       "xPDUOutputNeutralCurrentHighAlarm": xPDUOutputNeutralCurrentHighAlarm,
       "xPDUOutputNeutralCurrentHighAlarmCleared": xPDUOutputNeutralCurrentHighAlarmCleared,
       "xPDUCoolingFanAlarm": xPDUCoolingFanAlarm,
       "xPDUCoolingFanAlarmCleared": xPDUCoolingFanAlarmCleared,
       "xPDUTransformerTempAlarm": xPDUTransformerTempAlarm,
       "xPDUTransformerTempAlarmCleared": xPDUTransformerTempAlarmCleared,
       "xPDUBranchCurrentLowAlarm": xPDUBranchCurrentLowAlarm,
       "xPDUBranchCurrentLowAlarmCleared": xPDUBranchCurrentLowAlarmCleared,
       "xPDUBranchCurrentHighAlarm": xPDUBranchCurrentHighAlarm,
       "xPDUBranchCurrentHighAlarmCleared": xPDUBranchCurrentHighAlarmCleared,
       "xPDUInternalCommError": xPDUInternalCommError,
       "emsHardwareStateAbnormal": emsHardwareStateAbnormal,
       "emsHardwareStateNormal": emsHardwareStateNormal,
       "ceSevereCondition": ceSevereCondition,
       "ceSevereConditionCleared": ceSevereConditionCleared,
       "ceWarningCondition": ceWarningCondition,
       "ceWarningConditionCleared": ceWarningConditionCleared,
       "ceInformationalCondition": ceInformationalCondition,
       "ceInformationalConditionCleared": ceInformationalConditionCleared,
       "upsInternalOverTemperature": upsInternalOverTemperature,
       "upsInternalOverTemperatureCleared": upsInternalOverTemperatureCleared,
       "upsMpuReset": upsMpuReset,
       "upsOutputSwitchClosed": upsOutputSwitchClosed,
       "upsOutputSwitchOpened": upsOutputSwitchOpened,
       "upsCalibrationStackChanged": upsCalibrationStackChanged,
       "envMaxTempThresholdViolation": envMaxTempThresholdViolation,
       "envMaxTempThresholdViolationCleared": envMaxTempThresholdViolationCleared,
       "envMinTempThresholdViolation": envMinTempThresholdViolation,
       "envMinTempThresholdViolationCleared": envMinTempThresholdViolationCleared,
       "envMaxHumidityThresholdViolation": envMaxHumidityThresholdViolation,
       "envMaxHumidityThresholdViolationCleared": envMaxHumidityThresholdViolationCleared,
       "envMinHumidityThresholdViolation": envMinHumidityThresholdViolation,
       "envMinHumidityThresholdViolationCleared": envMinHumidityThresholdViolationCleared,
       "envSTIncTempRateViolation": envSTIncTempRateViolation,
       "envSTIncTempRateViolationCleared": envSTIncTempRateViolationCleared,
       "envSTDecTempRateViolation": envSTDecTempRateViolation,
       "envSTDecTempRateViolationCleared": envSTDecTempRateViolationCleared,
       "envLTIncTempRateViolation": envLTIncTempRateViolation,
       "envLTIncTempRateViolationCleared": envLTIncTempRateViolationCleared,
       "envLTDecTempRateViolation": envLTDecTempRateViolation,
       "envLTDecTempRateViolationCleared": envLTDecTempRateViolationCleared,
       "bmsCriticalCondition": bmsCriticalCondition,
       "bmsCriticalConditionCleared": bmsCriticalConditionCleared,
       "bmsWarningCondition": bmsWarningCondition,
       "bmsWarningConditionCleared": bmsWarningConditionCleared,
       "bmsInformationalCondition": bmsInformationalCondition,
       "bmsInformationalConditionCleared": bmsInformationalConditionCleared,
       "xATSOutputVoltageLowAlarm": xATSOutputVoltageLowAlarm,
       "xATSOutputVoltageLowAlarmCleared": xATSOutputVoltageLowAlarmCleared,
       "xATSOutputVoltageHighAlarm": xATSOutputVoltageHighAlarm,
       "xATSOutputVoltageHighAlarmCleared": xATSOutputVoltageHighAlarmCleared,
       "xATSOutputCurrentLowAlarm": xATSOutputCurrentLowAlarm,
       "xATSOutputCurrentLowAlarmCleared": xATSOutputCurrentLowAlarmCleared,
       "xATSOutputCurrentHighAlarm": xATSOutputCurrentHighAlarm,
       "xATSOutputCurrentHighAlarmCleared": xATSOutputCurrentHighAlarmCleared,
       "xATSOutputFrequencyAlarm": xATSOutputFrequencyAlarm,
       "xATSOutputFrequencyAlarmCleared": xATSOutputFrequencyAlarmCleared,
       "xATSInternalCommError": xATSInternalCommError,
       "xATSInternalCommErrorCleared": xATSInternalCommErrorCleared,
       "xATSDataCommMismatchError": xATSDataCommMismatchError,
       "xATSDataCommMismatchErrorCleared": xATSDataCommMismatchErrorCleared,
       "xATSGenCommLost": xATSGenCommLost,
       "xATSGenCommEstablished": xATSGenCommEstablished,
       "xATSNeutralPosition": xATSNeutralPosition,
       "xATSSwitchTransferEvent": xATSSwitchTransferEvent,
       "xATSInternalATSFault": xATSInternalATSFault,
       "xATSInternalATSFaultCleared": xATSInternalATSFaultCleared,
       "xATSEngineStartAsserted": xATSEngineStartAsserted,
       "xATSEngineStopAsserted": xATSEngineStopAsserted,
       "xATSStartFailure": xATSStartFailure,
       "xATSStopFailure": xATSStopFailure,
       "xATSNotInAutomaticMode": xATSNotInAutomaticMode,
       "xATSNotInAutomaticModeCleared": xATSNotInAutomaticModeCleared,
       "xATSEpoTripped": xATSEpoTripped,
       "xATSEpoReset": xATSEpoReset,
       "xATSEpoTestMode": xATSEpoTestMode,
       "xATSEpoArmed": xATSEpoArmed,
       "xATSTestInitiated": xATSTestInitiated,
       "xATSTestCanceled": xATSTestCanceled,
       "xATSTestFailed": xATSTestFailed,
       "xATSTestPassed": xATSTestPassed,
       "xATSInputContactStateAbnormal": xATSInputContactStateAbnormal,
       "xATSInputContactStateNormal": xATSInputContactStateNormal,
       "xATSRemoteStartContactMismatch": xATSRemoteStartContactMismatch,
       "xATSRemoteStartContactMismatchCleared": xATSRemoteStartContactMismatchCleared,
       "xATSDoorOpenAlarm": xATSDoorOpenAlarm,
       "xATSDoorOpenAlarmCleared": xATSDoorOpenAlarmCleared,
       "xATSDCBackupAlarm": xATSDCBackupAlarm,
       "xATSDCBackupAlarmCleared": xATSDCBackupAlarmCleared,
       "xATSGeneratorLowCoolantLevelAlarm": xATSGeneratorLowCoolantLevelAlarm,
       "xATSGeneratorLowCoolantLevelAlarmCleared": xATSGeneratorLowCoolantLevelAlarmCleared,
       "xATSGeneratorVeryLowCoolantLevelAlarm": xATSGeneratorVeryLowCoolantLevelAlarm,
       "xATSGeneratorVeryLowCoolantLevelAlarmCleared": xATSGeneratorVeryLowCoolantLevelAlarmCleared,
       "xATSGeneratorHighCoolantTempAlarm": xATSGeneratorHighCoolantTempAlarm,
       "xATSGeneratorHighCoolantTempAlarmCleared": xATSGeneratorHighCoolantTempAlarmCleared,
       "xATSGeneratorVeryHighCoolantTempAlarm": xATSGeneratorVeryHighCoolantTempAlarm,
       "xATSGeneratorVeryHighCoolantTempAlarmCleared": xATSGeneratorVeryHighCoolantTempAlarmCleared,
       "xATSGeneratorLowCoolantTempAlarm": xATSGeneratorLowCoolantTempAlarm,
       "xATSGeneratorLowCoolantTempAlarmCleared": xATSGeneratorLowCoolantTempAlarmCleared,
       "xATSGeneratorLowOilLevelAlarm": xATSGeneratorLowOilLevelAlarm,
       "xATSGeneratorLowOilLevelAlarmCleared": xATSGeneratorLowOilLevelAlarmCleared,
       "xATSGeneratorLowBatteryVoltDuringCrankAlarm": xATSGeneratorLowBatteryVoltDuringCrankAlarm,
       "xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared": xATSGeneratorLowBatteryVoltDuringCrankAlarmCleared,
       "xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm": xATSGeneratorVeryLowBatteryVoltDuringCrankAlarm,
       "xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared": xATSGeneratorVeryLowBatteryVoltDuringCrankAlarmCleared,
       "xATSGeneratorEStop": xATSGeneratorEStop,
       "xATSGeneratorEStopCleared": xATSGeneratorEStopCleared,
       "xATSGeneratorHighBatteryVolt": xATSGeneratorHighBatteryVolt,
       "xATSGeneratorHighBatteryVoltCleared": xATSGeneratorHighBatteryVoltCleared,
       "xATSGeneratorLowBatteryVolt": xATSGeneratorLowBatteryVolt,
       "xATSGeneratorLowBatteryVoltCleared": xATSGeneratorLowBatteryVoltCleared,
       "xATSGeneratorControlSwitchNotAuto": xATSGeneratorControlSwitchNotAuto,
       "xATSGeneratorControlSwitchNotAutoCleared": xATSGeneratorControlSwitchNotAutoCleared,
       "xATSGeneratorLowOilPressure": xATSGeneratorLowOilPressure,
       "xATSGeneratorLowOilPressureCleared": xATSGeneratorLowOilPressureCleared,
       "xATSGeneratorVeryLowOilPressure": xATSGeneratorVeryLowOilPressure,
       "xATSGeneratorVeryLowOilPressureCleared": xATSGeneratorVeryLowOilPressureCleared,
       "xATSGeneratorOverload": xATSGeneratorOverload,
       "xATSGeneratorOverloadCleared": xATSGeneratorOverloadCleared,
       "xATSGeneratorLowACVEvent": xATSGeneratorLowACVEvent,
       "xATSGeneratorLowACVEventCleared": xATSGeneratorLowACVEventCleared,
       "xATSGeneratorHighACVEvent": xATSGeneratorHighACVEvent,
       "xATSGeneratorHighACVEventCleared": xATSGeneratorHighACVEventCleared,
       "xATSGeneratorOverspeed": xATSGeneratorOverspeed,
       "xATSGeneratorOverspeedCleared": xATSGeneratorOverspeedCleared,
       "xATSGeneratorEngineCold": xATSGeneratorEngineCold,
       "xATSGeneratorEngineColdCleared": xATSGeneratorEngineColdCleared,
       "xATSGeneratorOutputBreakerOpen": xATSGeneratorOutputBreakerOpen,
       "xATSGeneratorOutputBreakerOpenCleared": xATSGeneratorOutputBreakerOpenCleared,
       "xATSGeneratorLowFuelLevelAlarm": xATSGeneratorLowFuelLevelAlarm,
       "xATSGeneratorLowFuelLevelAlarmCleared": xATSGeneratorLowFuelLevelAlarmCleared,
       "xATSGeneratorVeryLowFuelLevelAlarm": xATSGeneratorVeryLowFuelLevelAlarm,
       "xATSGeneratorVeryLowFuelLevelAlarmCleared": xATSGeneratorVeryLowFuelLevelAlarmCleared,
       "xATSGeneratorLowRunTimeAlarm": xATSGeneratorLowRunTimeAlarm,
       "xATSGeneratorLowRunTimeAlarmCleared": xATSGeneratorLowRunTimeAlarmCleared,
       "xATSGeneratorVeryLowRunTimeAlarm": xATSGeneratorVeryLowRunTimeAlarm,
       "xATSGeneratorVeryLowRunTimeAlarmCleared": xATSGeneratorVeryLowRunTimeAlarmCleared,
       "xATSGeneratorServiceDueAlarm": xATSGeneratorServiceDueAlarm,
       "xATSGeneratorServiceDueAlarmCleared": xATSGeneratorServiceDueAlarmCleared,
       "xATSGeneratorShutdown": xATSGeneratorShutdown,
       "xATSGeneratorShutdownCleared": xATSGeneratorShutdownCleared,
       "xATSGeneratorBatteryCharger": xATSGeneratorBatteryCharger,
       "xATSGeneratorBatteryChargerCleared": xATSGeneratorBatteryChargerCleared,
       "xATSGeneratorGenericEvent": xATSGeneratorGenericEvent,
       "xATSGeneratorGenericEventCleared": xATSGeneratorGenericEventCleared,
       "xPDUInternalCommErrorCleared": xPDUInternalCommErrorCleared,
       "xPDUSystemStateAlarm": xPDUSystemStateAlarm,
       "xPDUSystemStateAlarmCleared": xPDUSystemStateAlarmCleared,
       "xPDUEpoTestMode": xPDUEpoTestMode,
       "xPDUEpoArmed": xPDUEpoArmed,
       "xPDUFuseBlownAlarm": xPDUFuseBlownAlarm,
       "xPDUFuseBlownAlarmCleared": xPDUFuseBlownAlarmCleared,
       "xPDUBreakerPositionAlarm": xPDUBreakerPositionAlarm,
       "xPDUBreakerPositionAlarmCleared": xPDUBreakerPositionAlarmCleared,
       "xPDUBreakerChangeEvent": xPDUBreakerChangeEvent,
       "xPDUDataCommMismatchError": xPDUDataCommMismatchError,
       "xPDUDataCommMismatchErrorCleared": xPDUDataCommMismatchErrorCleared,
       "xPDUSystemInMaintenanceBypassMode": xPDUSystemInMaintenanceBypassMode,
       "xPDUSystemInUPSOperationalMode": xPDUSystemInUPSOperationalMode,
       "xATSGeneratorFuelTankRuptureAlarm": xATSGeneratorFuelTankRuptureAlarm,
       "xATSGeneratorFuelTankRuptureAlarmCleared": xATSGeneratorFuelTankRuptureAlarmCleared,
       "xATSGeneratorGroundFaultAlarm": xATSGeneratorGroundFaultAlarm,
       "xATSGeneratorGroundFaultAlarmCleared": xATSGeneratorGroundFaultAlarmCleared,
       "xATSOutputLoadPoweredByGeneratorAlarm": xATSOutputLoadPoweredByGeneratorAlarm,
       "xATSOutputLoadPoweredByGeneratorAlarmCleared": xATSOutputLoadPoweredByGeneratorAlarmCleared,
       "xAPCControllerFirmwareUpdateTransferStart": xAPCControllerFirmwareUpdateTransferStart,
       "xAPCControllerFirmwareUpdateTransferComplete": xAPCControllerFirmwareUpdateTransferComplete,
       "xAPCControllerFirmwareUpdateTransferFailed": xAPCControllerFirmwareUpdateTransferFailed,
       "upsPfcInputRelayFailure": upsPfcInputRelayFailure,
       "upsPfcInputRelayFailureCleared": upsPfcInputRelayFailureCleared,
       "upsInverterOverTemperature": upsInverterOverTemperature,
       "upsInverterOverTemperatureCleared": upsInverterOverTemperatureCleared,
       "upsBatteryOverVoltage": upsBatteryOverVoltage,
       "upsBatteryOverVoltageCleared": upsBatteryOverVoltageCleared,
       "upsEepromFault": upsEepromFault,
       "upsEepromFaultCleared": upsEepromFaultCleared,
       "aruFanRuntimeAlarm": aruFanRuntimeAlarm,
       "aruFanRuntimeAlarmCleared": aruFanRuntimeAlarmCleared,
       "aruFanPoorPerformanceAlarm": aruFanPoorPerformanceAlarm,
       "aruFanPoorPerformanceAlarmCleared": aruFanPoorPerformanceAlarmCleared,
       "aruRedundantPowerLostAlarm": aruRedundantPowerLostAlarm,
       "aruRedundantPowerLostAlarmCleared": aruRedundantPowerLostAlarmCleared,
       "apcDeviceConfigChange": apcDeviceConfigChange,
       "apcEnvSensorConnected": apcEnvSensorConnected,
       "apcEnvSensorDisconnected": apcEnvSensorDisconnected,
       "apcEnvMaxTempThresholdViolation": apcEnvMaxTempThresholdViolation,
       "apcEnvMaxTempThresholdViolationCleared": apcEnvMaxTempThresholdViolationCleared,
       "apcEnvHighTempThresholdViolation": apcEnvHighTempThresholdViolation,
       "apcEnvHighTempThresholdViolationCleared": apcEnvHighTempThresholdViolationCleared,
       "apcEnvLowTempThresholdViolation": apcEnvLowTempThresholdViolation,
       "apcEnvLowTempThresholdViolationCleared": apcEnvLowTempThresholdViolationCleared,
       "apcEnvMinTempThresholdViolation": apcEnvMinTempThresholdViolation,
       "apcEnvMinTempThresholdViolationCleared": apcEnvMinTempThresholdViolationCleared,
       "apcEnvSTIncTempRateViolation": apcEnvSTIncTempRateViolation,
       "apcEnvSTIncTempRateViolationCleared": apcEnvSTIncTempRateViolationCleared,
       "apcEnvSTDecTempRateViolation": apcEnvSTDecTempRateViolation,
       "apcEnvSTDecTempRateViolationCleared": apcEnvSTDecTempRateViolationCleared,
       "apcEnvLTIncTempRateViolation": apcEnvLTIncTempRateViolation,
       "apcEnvLTIncTempRateViolationCleared": apcEnvLTIncTempRateViolationCleared,
       "apcEnvLTDecTempRateViolation": apcEnvLTDecTempRateViolation,
       "apcEnvLTDecTempRateViolationCleared": apcEnvLTDecTempRateViolationCleared,
       "apcEnvMaxHumidityThresholdViolation": apcEnvMaxHumidityThresholdViolation,
       "apcEnvMaxHumidityThresholdViolationCleared": apcEnvMaxHumidityThresholdViolationCleared,
       "apcEnvHighHumidityThresholdViolation": apcEnvHighHumidityThresholdViolation,
       "apcEnvHighHumidityThresholdViolationCleared": apcEnvHighHumidityThresholdViolationCleared,
       "apcEnvLowHumidityThresholdViolation": apcEnvLowHumidityThresholdViolation,
       "apcEnvLowHumidityThresholdViolationCleared": apcEnvLowHumidityThresholdViolationCleared,
       "apcEnvMinHumidityThresholdViolation": apcEnvMinHumidityThresholdViolation,
       "apcEnvMinHumidityThresholdViolationCleared": apcEnvMinHumidityThresholdViolationCleared,
       "apcBeaconConnected": apcBeaconConnected,
       "apcBeaconDisconnected": apcBeaconDisconnected,
       "apcBeaconOn": apcBeaconOn,
       "apcBeaconOff": apcBeaconOff,
       "apcOutletStateAbnormal": apcOutletStateAbnormal,
       "apcOutletStateNormal": apcOutletStateNormal,
       "apcOutputRelayStateAbnormal": apcOutputRelayStateAbnormal,
       "apcOutputRelayStateNormal": apcOutputRelayStateNormal,
       "apcHardwareStateAbnormal": apcHardwareStateAbnormal,
       "apcHardwareStateNormal": apcHardwareStateNormal,
       "apcCriticalDiscreteInputContactStateAbnormal": apcCriticalDiscreteInputContactStateAbnormal,
       "apcCriticalDiscreteInputContactStateNormal": apcCriticalDiscreteInputContactStateNormal,
       "apcWarningDiscreteInputContactStateAbnormal": apcWarningDiscreteInputContactStateAbnormal,
       "apcWarningDiscreteInputContactStateNormal": apcWarningDiscreteInputContactStateNormal,
       "apcInformationalDiscreteInputContactStateAbnormal": apcInformationalDiscreteInputContactStateAbnormal,
       "apcInformationalDiscreteInputContactStateNormal": apcInformationalDiscreteInputContactStateNormal,
       "apcAnalogInputMaxThresholdViolation": apcAnalogInputMaxThresholdViolation,
       "apcAnalogInputMaxThresholdViolationCleared": apcAnalogInputMaxThresholdViolationCleared,
       "apcAnalogInputHighThresholdViolation": apcAnalogInputHighThresholdViolation,
       "apcAnalogInputHighThresholdViolationCleared": apcAnalogInputHighThresholdViolationCleared,
       "apcAnalogInputLowThresholdViolation": apcAnalogInputLowThresholdViolation,
       "apcAnalogInputLowThresholdViolationCleared": apcAnalogInputLowThresholdViolationCleared,
       "apcAnalogInputMinThresholdViolation": apcAnalogInputMinThresholdViolation,
       "apcAnalogInputMinThresholdViolationCleared": apcAnalogInputMinThresholdViolationCleared,
       "apcDeviceClearLostComms": apcDeviceClearLostComms,
       "apcDeviceConnected": apcDeviceConnected,
       "apcDeviceDisconnected": apcDeviceDisconnected,
       "apcUnregisteredUserAccessDenied": apcUnregisteredUserAccessDenied,
       "apcRegisteredUserAccessDenied": apcRegisteredUserAccessDenied,
       "apcRegisteredUserConfigChange": apcRegisteredUserConfigChange,
       "apcDoorUnlocked": apcDoorUnlocked,
       "apcDoorLocked": apcDoorLocked,
       "apcHandleOpened": apcHandleOpened,
       "apcHandleClosed": apcHandleClosed,
       "apcDoorOpened": apcDoorOpened,
       "apcDoorClosed": apcDoorClosed,
       "apcKeyOverrideUnlocked": apcKeyOverrideUnlocked,
       "apcKeyOverrideLocked": apcKeyOverrideLocked,
       "apcForcedEntry": apcForcedEntry,
       "apcForcedEntryCleared": apcForcedEntryCleared,
       "apcRelockTimeout": apcRelockTimeout,
       "apcRelockTimeoutCleared": apcRelockTimeoutCleared,
       "apcDoorSenseDisconnected": apcDoorSenseDisconnected,
       "apcDoorSenseConnected": apcDoorSenseConnected,
       "apcDoorLostComms": apcDoorLostComms,
       "apcDoorEstablishedComms": apcDoorEstablishedComms,
       "apcRegisteredUserAccessChange": apcRegisteredUserAccessChange,
       "apcUnregisteredUserStatusChange": apcUnregisteredUserStatusChange,
       "apcDeviceClearUserConfigs": apcDeviceClearUserConfigs,
       "upsBatteryTempSensorFault": upsBatteryTempSensorFault,
       "upsBatteryTempSensorFaultCleared": upsBatteryTempSensorFaultCleared,
       "upsBatterySoftBusStartFault": upsBatterySoftBusStartFault,
       "upsBatterySoftBusStartFaultCleared": upsBatterySoftBusStartFaultCleared,
       "apcOutputShortCircuit": apcOutputShortCircuit,
       "apcOutputShortCircuitCleared": apcOutputShortCircuitCleared,
       "apcOutputRelayFault": apcOutputRelayFault,
       "apcOutputRelayFaultCleared": apcOutputRelayFaultCleared,
       "upsPfcFault": upsPfcFault,
       "upsPfcFaultCleared": upsPfcFaultCleared,
       "apcDcBusOverVoltage": apcDcBusOverVoltage,
       "apcDcBusOverVoltageCleared": apcDcBusOverVoltageCleared,
       "upsInverterFault": upsInverterFault,
       "upsInverterFaultCleared": upsInverterFaultCleared,
       "apcAdConverterFault": apcAdConverterFault,
       "apcAdConverterFaultCleared": apcAdConverterFaultCleared,
       "apcLogicPowerSupplyFault": apcLogicPowerSupplyFault,
       "apcLogicPowerSupplyFaultCleared": apcLogicPowerSupplyFaultCleared,
       "apcTransformerDCImbalanceFault": apcTransformerDCImbalanceFault,
       "apcTransformerDCImbalanceFaultCleared": apcTransformerDCImbalanceFaultCleared,
       "upsBackfeedRelayFault": upsBackfeedRelayFault,
       "upsBackfeedRelayFaultCleared": upsBackfeedRelayFaultCleared,
       "upsBypassRelayFault": upsBypassRelayFault,
       "upsBypassRelayFaultCleared": upsBypassRelayFaultCleared,
       "xPDUBranchCurrentMinAlarm": xPDUBranchCurrentMinAlarm,
       "xPDUBranchCurrentMinAlarmCleared": xPDUBranchCurrentMinAlarmCleared,
       "xPDUBranchCurrentMaxAlarm": xPDUBranchCurrentMaxAlarm,
       "xPDUBranchCurrentMaxAlarmCleared": xPDUBranchCurrentMaxAlarmCleared,
       "rPDUOutletLowLoad": rPDUOutletLowLoad,
       "rPDUOutletLowLoadCleared": rPDUOutletLowLoadCleared,
       "rPDUOutletNearOverload": rPDUOutletNearOverload,
       "rPDUOutletNearOverloadCleared": rPDUOutletNearOverloadCleared,
       "rPDUOutletOverload": rPDUOutletOverload,
       "rPDUOutletOverloadCleared": rPDUOutletOverloadCleared,
       "apcTestTrap": apcTestTrap,
       "baseFanFailureCleared": baseFanFailureCleared,
       "atsLowLoad": atsLowLoad,
       "atsLowLoadCleared": atsLowLoadCleared,
       "atsNearOverload": atsNearOverload,
       "atsNearOverloadCleared": atsNearOverloadCleared,
       "atsOverload": atsOverload,
       "atsOverloadCleared": atsOverloadCleared,
       "atsRMSOverVoltage": atsRMSOverVoltage,
       "atsRMSOverVoltageCleared": atsRMSOverVoltageCleared,
       "atsRMSUnderVoltage": atsRMSUnderVoltage,
       "atsRMSUnderVoltageCleared": atsRMSUnderVoltageCleared,
       "atsRMSOverFrequency": atsRMSOverFrequency,
       "atsRMSOverFrequencyCleared": atsRMSOverFrequencyCleared,
       "atsRMSUnderFrequency": atsRMSUnderFrequency,
       "atsRMSUnderFrequencyCleared": atsRMSUnderFrequencyCleared,
       "isxModularDistributionCommLost": isxModularDistributionCommLost,
       "isxModularDistributionCommEstablished": isxModularDistributionCommEstablished,
       "isxModularDistributionModuleInserted": isxModularDistributionModuleInserted,
       "isxModularDistributionModuleRemoved": isxModularDistributionModuleRemoved,
       "isxModularBreakerOpenAlarm": isxModularBreakerOpenAlarm,
       "isxModularBreakerOpenAlarmCleared": isxModularBreakerOpenAlarmCleared,
       "isxModularMinCurrentThresholdViolation": isxModularMinCurrentThresholdViolation,
       "isxModularMinCurrentThresholdViolationCleared": isxModularMinCurrentThresholdViolationCleared,
       "isxModularLowCurrentThresholdViolation": isxModularLowCurrentThresholdViolation,
       "isxModularLowCurrentThresholdViolationCleared": isxModularLowCurrentThresholdViolationCleared,
       "isxModularHighCurrentThresholdViolation": isxModularHighCurrentThresholdViolation,
       "isxModularHighCurrentThresholdViolationCleared": isxModularHighCurrentThresholdViolationCleared,
       "isxModularMaxCurrentThresholdViolation": isxModularMaxCurrentThresholdViolation,
       "isxModularMaxCurrentThresholdViolationCleared": isxModularMaxCurrentThresholdViolationCleared,
       "isxModularSubfeedBreakerOpenAlarm": isxModularSubfeedBreakerOpenAlarm,
       "isxModularSubfeedBreakerOpenAlarmCleared": isxModularSubfeedBreakerOpenAlarmCleared,
       "isxModularSubfeedMinCurrentThresholdViolation": isxModularSubfeedMinCurrentThresholdViolation,
       "isxModularSubfeedMinCurrentThresholdViolationCleared": isxModularSubfeedMinCurrentThresholdViolationCleared,
       "isxModularSubfeedLowCurrentThresholdViolation": isxModularSubfeedLowCurrentThresholdViolation,
       "isxModularSubfeedLowCurrentThresholdViolationCleared": isxModularSubfeedLowCurrentThresholdViolationCleared,
       "isxModularSubfeedHighCurrentThresholdViolation": isxModularSubfeedHighCurrentThresholdViolation,
       "isxModularSubfeedHighCurrentThresholdViolationCleared": isxModularSubfeedHighCurrentThresholdViolationCleared,
       "isxModularSubfeedMaxCurrentThresholdViolation": isxModularSubfeedMaxCurrentThresholdViolation,
       "isxModularSubfeedMaxCurrentThresholdViolationCleared": isxModularSubfeedMaxCurrentThresholdViolationCleared,
       "isxModularTotalOutputCurrentMinThresholdViolation": isxModularTotalOutputCurrentMinThresholdViolation,
       "isxModularTotalOutputCurrentMinThresholdViolationCleared": isxModularTotalOutputCurrentMinThresholdViolationCleared,
       "isxModularTotalOutputCurrentLowThresholdViolation": isxModularTotalOutputCurrentLowThresholdViolation,
       "isxModularTotalOutputCurrentLowThresholdViolationCleared": isxModularTotalOutputCurrentLowThresholdViolationCleared,
       "isxModularTotalOutputCurrentHighThresholdViolation": isxModularTotalOutputCurrentHighThresholdViolation,
       "isxModularTotalOutputCurrentHighThresholdViolationCleared": isxModularTotalOutputCurrentHighThresholdViolationCleared,
       "isxModularTotalOutputCurrentMaxThresholdViolation": isxModularTotalOutputCurrentMaxThresholdViolation,
       "isxModularTotalOutputCurrentMaxThresholdViolationCleared": isxModularTotalOutputCurrentMaxThresholdViolationCleared,
       "isxModularOutputVoltageMinThresholdViolation": isxModularOutputVoltageMinThresholdViolation,
       "isxModularOutputVoltageMinThresholdViolationCleared": isxModularOutputVoltageMinThresholdViolationCleared,
       "isxModularOutputVoltageLowThresholdViolation": isxModularOutputVoltageLowThresholdViolation,
       "isxModularOutputVoltageLowThresholdViolationCleared": isxModularOutputVoltageLowThresholdViolationCleared,
       "isxModularOutputVoltageHighThresholdViolation": isxModularOutputVoltageHighThresholdViolation,
       "isxModularOutputVoltageHighThresholdViolationCleared": isxModularOutputVoltageHighThresholdViolationCleared,
       "isxModularOutputVoltageMaxThresholdViolation": isxModularOutputVoltageMaxThresholdViolation,
       "isxModularOutputVoltageMaxThresholdViolationCleared": isxModularOutputVoltageMaxThresholdViolationCleared,
       "apcDoorClosedImproperly": apcDoorClosedImproperly,
       "apcDoorClosedImproperlyCleared": apcDoorClosedImproperlyCleared,
       "apcUserScheduleViolation": apcUserScheduleViolation,
       "apcUserScheduleViolationCleared": apcUserScheduleViolationCleared,
       "isxModularOutputFrequencyThresholdViolation": isxModularOutputFrequencyThresholdViolation,
       "isxModularOutputFrequencyViolationCleared": isxModularOutputFrequencyViolationCleared,
       "atsSourceStatusFail": atsSourceStatusFail,
       "atsSourceStatusOk": atsSourceStatusOk,
       "atsHardwareStatusFail": atsHardwareStatusFail,
       "atsHardwareStatusOk": atsHardwareStatusOk,
       "atsControllerRestart": atsControllerRestart,
       "xATSS1BadPhaseRotation": xATSS1BadPhaseRotation,
       "xATSS1BadPhaseRotationCleared": xATSS1BadPhaseRotationCleared,
       "xATSS1BadPhaseBalance": xATSS1BadPhaseBalance,
       "xATSS1BadPhaseBalanceCleared": xATSS1BadPhaseBalanceCleared,
       "isxModularTransformerOverheating": isxModularTransformerOverheating,
       "isxModularTransformerOverheatingCleared": isxModularTransformerOverheatingCleared,
       "apcInternalCommunicationFault": apcInternalCommunicationFault,
       "apcInternalCommunicationFaultCleared": apcInternalCommunicationFaultCleared,
       "upsOutletGroupCommand": upsOutletGroupCommand,
       "onbatterycommunicationLost": onbatterycommunicationLost,
       "upsCriticalCondition": upsCriticalCondition,
       "upsCriticalConditionCleared": upsCriticalConditionCleared,
       "upsWarningCondition": upsWarningCondition,
       "upsWarningConditionCleared": upsWarningConditionCleared,
       "upsInformationalCondition": upsInformationalCondition,
       "upsInformationalConditionCleared": upsInformationalConditionCleared,
       "isxcInformationalAlarm": isxcInformationalAlarm,
       "isxcInformationalAlarmCleared": isxcInformationalAlarmCleared,
       "isxcWarningAlarm": isxcWarningAlarm,
       "isxcWarningAlarmCleared": isxcWarningAlarmCleared,
       "isxcErrorAlarm": isxcErrorAlarm,
       "isxcErrorAlarmCleared": isxcErrorAlarmCleared,
       "isxcCriticalAlarm": isxcCriticalAlarm,
       "isxcCriticalAlarmCleared": isxcCriticalAlarmCleared,
       "isxcFailureAlarm": isxcFailureAlarm,
       "isxcFailureAlarmCleared": isxcFailureAlarmCleared,
       "rpduCriticalCondition": rpduCriticalCondition,
       "rpduCriticalConditionCleared": rpduCriticalConditionCleared,
       "rpduWarningCondition": rpduWarningCondition,
       "rpduWarningConditionCleared": rpduWarningConditionCleared,
       "rpduInformationalCondition": rpduInformationalCondition,
       "rpduInformationalConditionCleared": rpduInformationalConditionCleared,
       "isxModularCoolingFanAlarm": isxModularCoolingFanAlarm,
       "isxModularCoolingFanAlarmCleared": isxModularCoolingFanAlarmCleared,
       "upsFirmwareUpdateStarted": upsFirmwareUpdateStarted,
       "upsFirmwareUpdateFinished": upsFirmwareUpdateFinished,
       "upsFirmwareUpdateSucceeded": upsFirmwareUpdateSucceeded,
       "upsFirmwareUpdateFailed": upsFirmwareUpdateFailed,
       "upsHasNoValidFirmware": upsHasNoValidFirmware,
       "upsHasNoValidFirmwareCleared": upsHasNoValidFirmwareCleared,
       "products": products,
       "hardware": hardware,
       "ups": ups,
       "upsIdent": upsIdent,
       "upsBasicIdent": upsBasicIdent,
       "upsBasicIdentModel": upsBasicIdentModel,
       "upsBasicIdentName": upsBasicIdentName,
       "upsAdvIdent": upsAdvIdent,
       "upsAdvIdentFirmwareRevision": upsAdvIdentFirmwareRevision,
       "upsAdvIdentDateOfManufacture": upsAdvIdentDateOfManufacture,
       "upsAdvIdentSerialNumber": upsAdvIdentSerialNumber,
       "upsAdvIdentFirmwareRevision2": upsAdvIdentFirmwareRevision2,
       "upsAdvIdentSkuNumber": upsAdvIdentSkuNumber,
       "upsBattery": upsBattery,
       "upsBasicBattery": upsBasicBattery,
       "upsBasicBatteryStatus": upsBasicBatteryStatus,
       "upsBasicBatteryTimeOnBattery": upsBasicBatteryTimeOnBattery,
       "upsBasicBatteryLastReplaceDate": upsBasicBatteryLastReplaceDate,
       "upsAdvBattery": upsAdvBattery,
       "upsAdvBatteryCapacity": upsAdvBatteryCapacity,
       "upsAdvBatteryTemperature": upsAdvBatteryTemperature,
       "upsAdvBatteryRunTimeRemaining": upsAdvBatteryRunTimeRemaining,
       "upsAdvBatteryReplaceIndicator": upsAdvBatteryReplaceIndicator,
       "upsAdvBatteryNumOfBattPacks": upsAdvBatteryNumOfBattPacks,
       "upsAdvBatteryNumOfBadBattPacks": upsAdvBatteryNumOfBadBattPacks,
       "upsAdvBatteryNominalVoltage": upsAdvBatteryNominalVoltage,
       "upsAdvBatteryActualVoltage": upsAdvBatteryActualVoltage,
       "upsAdvBatteryCurrent": upsAdvBatteryCurrent,
       "upsAdvTotalDCCurrent": upsAdvTotalDCCurrent,
       "upsAdvBatteryFullCapacity": upsAdvBatteryFullCapacity,
       "upsAdvBatteryActualVoltageTable": upsAdvBatteryActualVoltageTable,
       "upsAdvBatteryActualVoltageEntry": upsAdvBatteryActualVoltageEntry,
       "upsAdvBatteryActualVoltageTableIndex": upsAdvBatteryActualVoltageTableIndex,
       "upsAdvBatteryActualVoltagePolarity": upsAdvBatteryActualVoltagePolarity,
       "upsAdvBatteryFrameActualVoltage": upsAdvBatteryFrameActualVoltage,
       "upsAdvTotalDCCurrentTable": upsAdvTotalDCCurrentTable,
       "upsAdvTotalDCCurrentEntry": upsAdvTotalDCCurrentEntry,
       "upsAdvTotalDCCurrentTableIndex": upsAdvTotalDCCurrentTableIndex,
       "upsAdvTotalDCCurrentPolarity": upsAdvTotalDCCurrentPolarity,
       "upsAdvTotalFrameDCCurrent": upsAdvTotalFrameDCCurrent,
       "upsAdvBatteryCurrentTable": upsAdvBatteryCurrentTable,
       "upsAdvBatteryCurrentEntry": upsAdvBatteryCurrentEntry,
       "upsAdvBatteryCurrentTableIndex": upsAdvBatteryCurrentTableIndex,
       "upsAdvBatteryCurrentIndex": upsAdvBatteryCurrentIndex,
       "upsAdvBatteryCurrentPolarity": upsAdvBatteryCurrentPolarity,
       "upsAdvBatteryFrameCurrent": upsAdvBatteryFrameCurrent,
       "upsHighPrecBattery": upsHighPrecBattery,
       "upsHighPrecBatteryCapacity": upsHighPrecBatteryCapacity,
       "upsHighPrecBatteryTemperature": upsHighPrecBatteryTemperature,
       "upsHighPrecBatteryNominalVoltage": upsHighPrecBatteryNominalVoltage,
       "upsHighPrecBatteryActualVoltage": upsHighPrecBatteryActualVoltage,
       "upsHighPrecBatteryCurrent": upsHighPrecBatteryCurrent,
       "upsHighPrecTotalDCCurrent": upsHighPrecTotalDCCurrent,
       "upsHighPrecBatteryActualVoltageTable": upsHighPrecBatteryActualVoltageTable,
       "upsHighPrecBatteryActualVoltageEntry": upsHighPrecBatteryActualVoltageEntry,
       "upsHighPrecBatteryActualVoltageTableIndex": upsHighPrecBatteryActualVoltageTableIndex,
       "upsHighPrecBatteryActualVoltagePolarity": upsHighPrecBatteryActualVoltagePolarity,
       "upsHighPrecBatteryVoltage": upsHighPrecBatteryVoltage,
       "upsHighPrecTotalDCCurrentTable": upsHighPrecTotalDCCurrentTable,
       "upsHighPrecTotalDCCurrentEntry": upsHighPrecTotalDCCurrentEntry,
       "upsHighPrecTotalDCCurrentTableIndex": upsHighPrecTotalDCCurrentTableIndex,
       "upsHighPrecTotalDCCurrentPolarity": upsHighPrecTotalDCCurrentPolarity,
       "upsHighPrecTotalDCFrameCurrent": upsHighPrecTotalDCFrameCurrent,
       "upsHighPrecBatteryCurrentTable": upsHighPrecBatteryCurrentTable,
       "upsHighPrecBatteryCurrentEntry": upsHighPrecBatteryCurrentEntry,
       "upsHighPrecBatteryCurrentTableIndex": upsHighPrecBatteryCurrentTableIndex,
       "upsHighPrecBatteryCurrentIndex": upsHighPrecBatteryCurrentIndex,
       "upsHighPrecBatteryCurrentPolarity": upsHighPrecBatteryCurrentPolarity,
       "upsHighPrecBatteryFrameCurrent": upsHighPrecBatteryFrameCurrent,
       "upsInput": upsInput,
       "upsBasicInput": upsBasicInput,
       "upsBasicInputPhase": upsBasicInputPhase,
       "upsAdvInput": upsAdvInput,
       "upsAdvInputLineVoltage": upsAdvInputLineVoltage,
       "upsAdvInputMaxLineVoltage": upsAdvInputMaxLineVoltage,
       "upsAdvInputMinLineVoltage": upsAdvInputMinLineVoltage,
       "upsAdvInputFrequency": upsAdvInputFrequency,
       "upsAdvInputLineFailCause": upsAdvInputLineFailCause,
       "upsAdvInputNominalFrequency": upsAdvInputNominalFrequency,
       "upsAdvInputNominalVoltage": upsAdvInputNominalVoltage,
       "upsAdvInputBypassNominalFrequency": upsAdvInputBypassNominalFrequency,
       "upsAdvInputBypassNominalVoltage": upsAdvInputBypassNominalVoltage,
       "upsAdvInputStatisticsTable": upsAdvInputStatisticsTable,
       "upsAdvInputStatisticsEntry": upsAdvInputStatisticsEntry,
       "upsAdvInputStatisticsIndex": upsAdvInputStatisticsIndex,
       "upsAdvInputApparentPower": upsAdvInputApparentPower,
       "upsAdvInputVoltageTHD": upsAdvInputVoltageTHD,
       "upsAdvInputBypassVoltageTHD": upsAdvInputBypassVoltageTHD,
       "upsAdvInputPeakCurrent": upsAdvInputPeakCurrent,
       "upsAdvInputBypassPeakCurrent": upsAdvInputBypassPeakCurrent,
       "upsHighPrecInput": upsHighPrecInput,
       "upsHighPrecInputLineVoltage": upsHighPrecInputLineVoltage,
       "upsHighPrecInputMaxLineVoltage": upsHighPrecInputMaxLineVoltage,
       "upsHighPrecInputMinLineVoltage": upsHighPrecInputMinLineVoltage,
       "upsHighPrecInputFrequency": upsHighPrecInputFrequency,
       "upsOutput": upsOutput,
       "upsBasicOutput": upsBasicOutput,
       "upsBasicOutputStatus": upsBasicOutputStatus,
       "upsBasicOutputPhase": upsBasicOutputPhase,
       "upsBasicSystemStatus": upsBasicSystemStatus,
       "upsBasicSystemInternalTemperature": upsBasicSystemInternalTemperature,
       "upsAdvOutput": upsAdvOutput,
       "upsAdvOutputVoltage": upsAdvOutputVoltage,
       "upsAdvOutputFrequency": upsAdvOutputFrequency,
       "upsAdvOutputLoad": upsAdvOutputLoad,
       "upsAdvOutputCurrent": upsAdvOutputCurrent,
       "upsAdvOutputRedundancy": upsAdvOutputRedundancy,
       "upsAdvOutputKVACapacity": upsAdvOutputKVACapacity,
       "upsAdvOutputNominalFrequency": upsAdvOutputNominalFrequency,
       "upsAdvOutputActivePower": upsAdvOutputActivePower,
       "upsAdvOutputApparentPower": upsAdvOutputApparentPower,
       "upsAdvOutputStatisticsTable": upsAdvOutputStatisticsTable,
       "upsAdvOutputStatisticsEntry": upsAdvOutputStatisticsEntry,
       "upsAdvOutputStatisticsIndex": upsAdvOutputStatisticsIndex,
       "upsAdvOutputPeakCurrent": upsAdvOutputPeakCurrent,
       "upsAdvOutputCurrentTHD": upsAdvOutputCurrentTHD,
       "upsAdvOutputCrestFactor": upsAdvOutputCrestFactor,
       "upsHighPrecOutput": upsHighPrecOutput,
       "upsHighPrecOutputVoltage": upsHighPrecOutputVoltage,
       "upsHighPrecOutputFrequency": upsHighPrecOutputFrequency,
       "upsHighPrecOutputLoad": upsHighPrecOutputLoad,
       "upsHighPrecOutputCurrent": upsHighPrecOutputCurrent,
       "upsHighPrecOutputEfficiency": upsHighPrecOutputEfficiency,
       "upsHighPrecOutputEnergyUsage": upsHighPrecOutputEnergyUsage,
       "upsConfig": upsConfig,
       "upsBasicConfig": upsBasicConfig,
       "upsBasicConfigNumDevices": upsBasicConfigNumDevices,
       "upsBasicConfigDeviceTable": upsBasicConfigDeviceTable,
       "upsBasicConfigDeviceEntry": upsBasicConfigDeviceEntry,
       "deviceIndex": deviceIndex,
       "deviceName": deviceName,
       "vaRating": vaRating,
       "acceptThisDevice": acceptThisDevice,
       "upsAdvConfig": upsAdvConfig,
       "upsAdvConfigRatedOutputVoltage": upsAdvConfigRatedOutputVoltage,
       "upsAdvConfigHighTransferVolt": upsAdvConfigHighTransferVolt,
       "upsAdvConfigLowTransferVolt": upsAdvConfigLowTransferVolt,
       "upsAdvConfigAlarm": upsAdvConfigAlarm,
       "upsAdvConfigAlarmTimer": upsAdvConfigAlarmTimer,
       "upsAdvConfigMinReturnCapacity": upsAdvConfigMinReturnCapacity,
       "upsAdvConfigSensitivity": upsAdvConfigSensitivity,
       "upsAdvConfigLowBatteryRunTime": upsAdvConfigLowBatteryRunTime,
       "upsAdvConfigReturnDelay": upsAdvConfigReturnDelay,
       "upsAdvConfigShutoffDelay": upsAdvConfigShutoffDelay,
       "upsAdvConfigUpsSleepTime": upsAdvConfigUpsSleepTime,
       "upsAdvConfigSetEEPROMDefaults": upsAdvConfigSetEEPROMDefaults,
       "upsAdvConfigDipSwitchTable": upsAdvConfigDipSwitchTable,
       "upsAdvConfigDipSwitchEntry": upsAdvConfigDipSwitchEntry,
       "dipSwitchIndex": dipSwitchIndex,
       "dipSwitchStatus": dipSwitchStatus,
       "upsAdvConfigBattExhaustThresh": upsAdvConfigBattExhaustThresh,
       "upsAdvConfigPassword": upsAdvConfigPassword,
       "upsAdvConfigAllowedSetTable": upsAdvConfigAllowedSetTable,
       "upsAdvConfigAllowedSetEntry": upsAdvConfigAllowedSetEntry,
       "apcUpsConfigFieldIndex": apcUpsConfigFieldIndex,
       "apcUpsConfigFieldOID": apcUpsConfigFieldOID,
       "apcUpsConfigFieldValueRange": apcUpsConfigFieldValueRange,
       "upsAdvConfigBattCabAmpHour": upsAdvConfigBattCabAmpHour,
       "upsAdvConfigPositionSelector": upsAdvConfigPositionSelector,
       "upsAdvConfigOutputFreqRange": upsAdvConfigOutputFreqRange,
       "upsAdvConfigUPSFail": upsAdvConfigUPSFail,
       "upsAdvConfigAlarmRedundancy": upsAdvConfigAlarmRedundancy,
       "upsAdvConfigAlarmLoadOver": upsAdvConfigAlarmLoadOver,
       "upsAdvConfigAlarmRuntimeUnder": upsAdvConfigAlarmRuntimeUnder,
       "upsAdvConfigVoutReporting": upsAdvConfigVoutReporting,
       "upsAdvConfigNumExternalBatteries": upsAdvConfigNumExternalBatteries,
       "upsAdvConfigSimpleSignalShutdowns": upsAdvConfigSimpleSignalShutdowns,
       "upsAdvConfigMaxShutdownTime": upsAdvConfigMaxShutdownTime,
       "upsAsiUpsControlServerRequestShutdown": upsAsiUpsControlServerRequestShutdown,
       "upsAdvConfigMinReturnRuntime": upsAdvConfigMinReturnRuntime,
       "upsAdvConfigBasicSignalLowBatteryDuration": upsAdvConfigBasicSignalLowBatteryDuration,
       "upsAdvConfigBypassPhaseLockRequired": upsAdvConfigBypassPhaseLockRequired,
       "upsAdvConfigOutputFreqSlewRate": upsAdvConfigOutputFreqSlewRate,
       "upsAdvConfigChargerLevel": upsAdvConfigChargerLevel,
       "upsAdvConfigBypassToleranceSetting": upsAdvConfigBypassToleranceSetting,
       "upsAdvConfigMainsSetting": upsAdvConfigMainsSetting,
       "upsAdvConfigACWiringSetting": upsAdvConfigACWiringSetting,
       "upsAdvConfigUpperOutputVoltTolerance": upsAdvConfigUpperOutputVoltTolerance,
       "upsAdvConfigLowerOutputVoltTolerance": upsAdvConfigLowerOutputVoltTolerance,
       "upsAdvConfigUpperBypassVoltTolerance": upsAdvConfigUpperBypassVoltTolerance,
       "upsAdvConfigLowerBypassVoltTolerance": upsAdvConfigLowerBypassVoltTolerance,
       "upsAdvConfigOutofSyncBypassTransferDelay": upsAdvConfigOutofSyncBypassTransferDelay,
       "upsControl": upsControl,
       "upsBasicControl": upsBasicControl,
       "upsBasicControlConserveBattery": upsBasicControlConserveBattery,
       "upsAdvControl": upsAdvControl,
       "upsAdvControlUpsOff": upsAdvControlUpsOff,
       "upsAdvControlRebootShutdownUps": upsAdvControlRebootShutdownUps,
       "upsAdvControlUpsSleep": upsAdvControlUpsSleep,
       "upsAdvControlSimulatePowerFail": upsAdvControlSimulatePowerFail,
       "upsAdvControlFlashAndBeep": upsAdvControlFlashAndBeep,
       "upsAdvControlTurnOnUPS": upsAdvControlTurnOnUPS,
       "upsAdvControlBypassSwitch": upsAdvControlBypassSwitch,
       "upsAdvControlRebootUpsWithOrWithoutAC": upsAdvControlRebootUpsWithOrWithoutAC,
       "upsAdvControlFirmwareUpdate": upsAdvControlFirmwareUpdate,
       "upsTest": upsTest,
       "upsBasicTest": upsBasicTest,
       "upsAdvTest": upsAdvTest,
       "upsAdvTestDiagnosticSchedule": upsAdvTestDiagnosticSchedule,
       "upsAdvTestDiagnostics": upsAdvTestDiagnostics,
       "upsAdvTestDiagnosticsResults": upsAdvTestDiagnosticsResults,
       "upsAdvTestLastDiagnosticsDate": upsAdvTestLastDiagnosticsDate,
       "upsAdvTestRuntimeCalibration": upsAdvTestRuntimeCalibration,
       "upsAdvTestCalibrationResults": upsAdvTestCalibrationResults,
       "upsAdvTestCalibrationDate": upsAdvTestCalibrationDate,
       "upsAdvTestDiagnosticTime": upsAdvTestDiagnosticTime,
       "upsAdvTestDiagnosticDay": upsAdvTestDiagnosticDay,
       "upsComm": upsComm,
       "upsCommStatus": upsCommStatus,
       "upsPhase": upsPhase,
       "upsPhaseResetValues": upsPhaseResetValues,
       "upsPhaseResetMaxMinValues": upsPhaseResetMaxMinValues,
       "upsPhaseInput": upsPhaseInput,
       "upsPhaseNumInputs": upsPhaseNumInputs,
       "upsPhaseInputTable": upsPhaseInputTable,
       "upsPhaseInputEntry": upsPhaseInputEntry,
       "upsPhaseInputTableIndex": upsPhaseInputTableIndex,
       "upsPhaseNumInputPhases": upsPhaseNumInputPhases,
       "upsPhaseInputVoltageOrientation": upsPhaseInputVoltageOrientation,
       "upsPhaseInputFrequency": upsPhaseInputFrequency,
       "upsPhaseInputType": upsPhaseInputType,
       "upsPhaseInputName": upsPhaseInputName,
       "upsPhaseInputPhaseTable": upsPhaseInputPhaseTable,
       "upsPhaseInputPhaseEntry": upsPhaseInputPhaseEntry,
       "upsPhaseInputPhaseTableIndex": upsPhaseInputPhaseTableIndex,
       "upsPhaseInputPhaseIndex": upsPhaseInputPhaseIndex,
       "upsPhaseInputVoltage": upsPhaseInputVoltage,
       "upsPhaseInputMaxVoltage": upsPhaseInputMaxVoltage,
       "upsPhaseInputMinVoltage": upsPhaseInputMinVoltage,
       "upsPhaseInputCurrent": upsPhaseInputCurrent,
       "upsPhaseInputMaxCurrent": upsPhaseInputMaxCurrent,
       "upsPhaseInputMinCurrent": upsPhaseInputMinCurrent,
       "upsPhaseInputPower": upsPhaseInputPower,
       "upsPhaseInputMaxPower": upsPhaseInputMaxPower,
       "upsPhaseInputMinPower": upsPhaseInputMinPower,
       "upsPhaseOutput": upsPhaseOutput,
       "upsPhaseNumOutputs": upsPhaseNumOutputs,
       "upsPhaseOutputTable": upsPhaseOutputTable,
       "upsPhaseOutputEntry": upsPhaseOutputEntry,
       "upsPhaseOutputTableIndex": upsPhaseOutputTableIndex,
       "upsPhaseNumOutputPhases": upsPhaseNumOutputPhases,
       "upsPhaseOutputVoltageOrientation": upsPhaseOutputVoltageOrientation,
       "upsPhaseOutputFrequency": upsPhaseOutputFrequency,
       "upsPhaseOutputPhaseTable": upsPhaseOutputPhaseTable,
       "upsPhaseOutputPhaseEntry": upsPhaseOutputPhaseEntry,
       "upsPhaseOutputPhaseTableIndex": upsPhaseOutputPhaseTableIndex,
       "upsPhaseOutputPhaseIndex": upsPhaseOutputPhaseIndex,
       "upsPhaseOutputVoltage": upsPhaseOutputVoltage,
       "upsPhaseOutputCurrent": upsPhaseOutputCurrent,
       "upsPhaseOutputMaxCurrent": upsPhaseOutputMaxCurrent,
       "upsPhaseOutputMinCurrent": upsPhaseOutputMinCurrent,
       "upsPhaseOutputLoad": upsPhaseOutputLoad,
       "upsPhaseOutputMaxLoad": upsPhaseOutputMaxLoad,
       "upsPhaseOutputMinLoad": upsPhaseOutputMinLoad,
       "upsPhaseOutputPercentLoad": upsPhaseOutputPercentLoad,
       "upsPhaseOutputMaxPercentLoad": upsPhaseOutputMaxPercentLoad,
       "upsPhaseOutputMinPercentLoad": upsPhaseOutputMinPercentLoad,
       "upsPhaseOutputPower": upsPhaseOutputPower,
       "upsPhaseOutputMaxPower": upsPhaseOutputMaxPower,
       "upsPhaseOutputMinPower": upsPhaseOutputMinPower,
       "upsPhaseOutputPercentPower": upsPhaseOutputPercentPower,
       "upsPhaseOutputMaxPercentPower": upsPhaseOutputMaxPercentPower,
       "upsPhaseOutputMinPercentPower": upsPhaseOutputMinPercentPower,
       "upsPhaseOutputPowerFactor": upsPhaseOutputPowerFactor,
       "upsSyncCtrlGroup": upsSyncCtrlGroup,
       "upsSyncCtrlGroupConfig": upsSyncCtrlGroupConfig,
       "upsSCGMembershipGroupNumber": upsSCGMembershipGroupNumber,
       "upsSCGActiveMembershipStatus": upsSCGActiveMembershipStatus,
       "upsSCGPowerSynchronizationDelayTime": upsSCGPowerSynchronizationDelayTime,
       "upsSCGReturnBatteryCapacityOffset": upsSCGReturnBatteryCapacityOffset,
       "upsSCGMultiCastIP": upsSCGMultiCastIP,
       "upsSyncCtrlGroupStatus": upsSyncCtrlGroupStatus,
       "upsSCGNumOfGroupMembers": upsSCGNumOfGroupMembers,
       "upsSCGStatusTable": upsSCGStatusTable,
       "upsSCGStatusEntry": upsSCGStatusEntry,
       "upsSCGStatusTableIndex": upsSCGStatusTableIndex,
       "upsSCGMemberIP": upsSCGMemberIP,
       "upsSCGACInputStatus": upsSCGACInputStatus,
       "upsSCGACOutputStatus": upsSCGACOutputStatus,
       "upsState": upsState,
       "upsBasicState": upsBasicState,
       "upsBasicStateOutputState": upsBasicStateOutputState,
       "upsAdvState": upsAdvState,
       "upsAdvStateAbnormalConditions": upsAdvStateAbnormalConditions,
       "upsAdvStateSymmetra3PhaseSpecificFaults": upsAdvStateSymmetra3PhaseSpecificFaults,
       "upsAdvStateDP300ESpecificFaults": upsAdvStateDP300ESpecificFaults,
       "upsAdvStateSymmetraSpecificFaults": upsAdvStateSymmetraSpecificFaults,
       "upsAdvStateSmartUPSSpecificFaults": upsAdvStateSmartUPSSpecificFaults,
       "upsAdvStateSystemMessages": upsAdvStateSystemMessages,
       "upsAdvStateTotaltimeonbattery": upsAdvStateTotaltimeonbattery,
       "upsAdvStateTotaltimeonbypass": upsAdvStateTotaltimeonbypass,
       "upsAdvStateTotaltimeonNormal": upsAdvStateTotaltimeonNormal,
       "upsAdvStateNumberoftimesonbattery": upsAdvStateNumberoftimesonbattery,
       "upsAdvStateNumberoftimesbypass": upsAdvStateNumberoftimesbypass,
       "upsAdvStateNumberoftimesNormal": upsAdvStateNumberoftimesNormal,
       "upsAdvStateEcomode": upsAdvStateEcomode,
       "upsOutletGroups": upsOutletGroups,
       "upsOutletGroupStatus": upsOutletGroupStatus,
       "upsOutletGroupStatusTableSize": upsOutletGroupStatusTableSize,
       "upsOutletGroupStatusTable": upsOutletGroupStatusTable,
       "upsOutletGroupStatusEntry": upsOutletGroupStatusEntry,
       "upsOutletGroupStatusIndex": upsOutletGroupStatusIndex,
       "upsOutletGroupStatusName": upsOutletGroupStatusName,
       "upsOutletGroupStatusGroupState": upsOutletGroupStatusGroupState,
       "upsOutletGroupStatusCommandPending": upsOutletGroupStatusCommandPending,
       "upsOutletGroupStatusOutletType": upsOutletGroupStatusOutletType,
       "upsOutletGroupConfig": upsOutletGroupConfig,
       "upsOutletGroupConfigTableSize": upsOutletGroupConfigTableSize,
       "upsOutletGroupConfigTable": upsOutletGroupConfigTable,
       "upsOutletGroupConfigEntry": upsOutletGroupConfigEntry,
       "upsOutletGroupConfigIndex": upsOutletGroupConfigIndex,
       "upsOutletGroupConfigName": upsOutletGroupConfigName,
       "upsOutletGroupConfigPowerOnDelay": upsOutletGroupConfigPowerOnDelay,
       "upsOutletGroupConfigPowerOffDelay": upsOutletGroupConfigPowerOffDelay,
       "upsOutletGroupConfigRebootDuration": upsOutletGroupConfigRebootDuration,
       "upsOutletGroupConfigMinReturnRuntime": upsOutletGroupConfigMinReturnRuntime,
       "upsOutletGroupConfigOutletType": upsOutletGroupConfigOutletType,
       "upsOutletGroupConfigLoadShedControlSkipOffDelay": upsOutletGroupConfigLoadShedControlSkipOffDelay,
       "upsOutletGroupConfigLoadShedControlAutoRestart": upsOutletGroupConfigLoadShedControlAutoRestart,
       "upsOutletGroupConfigLoadShedControlTimeOnBattery": upsOutletGroupConfigLoadShedControlTimeOnBattery,
       "upsOutletGroupConfigLoadShedControlRuntimeRemaining": upsOutletGroupConfigLoadShedControlRuntimeRemaining,
       "upsOutletGroupConfigLoadShedControlInOverload": upsOutletGroupConfigLoadShedControlInOverload,
       "upsOutletGroupConfigLoadShedTimeOnBattery": upsOutletGroupConfigLoadShedTimeOnBattery,
       "upsOutletGroupConfigLoadShedRuntimeRemaining": upsOutletGroupConfigLoadShedRuntimeRemaining,
       "upsOutletGroupControl": upsOutletGroupControl,
       "upsOutletGroupControlTableSize": upsOutletGroupControlTableSize,
       "upsOutletGroupControlTable": upsOutletGroupControlTable,
       "upsOutletGroupControlEntry": upsOutletGroupControlEntry,
       "upsOutletGroupControlIndex": upsOutletGroupControlIndex,
       "upsOutletGroupControlName": upsOutletGroupControlName,
       "upsOutletGroupControlCommand": upsOutletGroupControlCommand,
       "upsOutletGroupControlOutletType": upsOutletGroupControlOutletType,
       "upsDiagnostics": upsDiagnostics,
       "upsDiagnosticIM": upsDiagnosticIM,
       "upsDiagIMTableSize": upsDiagIMTableSize,
       "upsDiagIMTable": upsDiagIMTable,
       "upsDiagIMEntry": upsDiagIMEntry,
       "upsDiagIMIndex": upsDiagIMIndex,
       "upsDiagIMType": upsDiagIMType,
       "upsDiagIMStatus": upsDiagIMStatus,
       "upsDiagIMFirmwareRev": upsDiagIMFirmwareRev,
       "upsDiagIMSlaveFirmwareRev": upsDiagIMSlaveFirmwareRev,
       "upsDiagIMHardwareRev": upsDiagIMHardwareRev,
       "upsDiagIMSerialNum": upsDiagIMSerialNum,
       "upsDiagIMManufactureDate": upsDiagIMManufactureDate,
       "upsDiagnosticPowerModules": upsDiagnosticPowerModules,
       "upsDiagPMTableSize": upsDiagPMTableSize,
       "upsDiagPMTable": upsDiagPMTable,
       "upsDiagPMEntry": upsDiagPMEntry,
       "upsDiagPMIndex": upsDiagPMIndex,
       "upsDiagPMStatus": upsDiagPMStatus,
       "upsDiagPMFirmwareRev": upsDiagPMFirmwareRev,
       "upsDiagPMHardwareRev": upsDiagPMHardwareRev,
       "upsDiagPMSerialNum": upsDiagPMSerialNum,
       "upsDiagPMManufactureDate": upsDiagPMManufactureDate,
       "upsDiagnosticBatteries": upsDiagnosticBatteries,
       "upsDiagBatteryTableSize": upsDiagBatteryTableSize,
       "upsDiagBatteryTable": upsDiagBatteryTable,
       "upsDiagBatteryEntry": upsDiagBatteryEntry,
       "upsDiagBatteryFrameIndex": upsDiagBatteryFrameIndex,
       "upsDiagBatteryIndex": upsDiagBatteryIndex,
       "upsDiagBatteryStatus": upsDiagBatteryStatus,
       "upsDiagBatterySerialNumber": upsDiagBatterySerialNumber,
       "upsDiagBatteryFirmwareRev": upsDiagBatteryFirmwareRev,
       "upsDiagBatteryManufactureDate": upsDiagBatteryManufactureDate,
       "upsDiagBatteryType": upsDiagBatteryType,
       "upsDiagnosticSubsystem": upsDiagnosticSubsystem,
       "upsDiagSubSysFrameTableSize": upsDiagSubSysFrameTableSize,
       "upsDiagSubSysFrameTable": upsDiagSubSysFrameTable,
       "upsDiagSubSysFrameEntry": upsDiagSubSysFrameEntry,
       "upsDiagSubSysFrameIndex": upsDiagSubSysFrameIndex,
       "upsDiagSubSysFrameType": upsDiagSubSysFrameType,
       "upsDiagSubSysFrameFirmwareRev": upsDiagSubSysFrameFirmwareRev,
       "upsDiagSubSysFrameHardwareRev": upsDiagSubSysFrameHardwareRev,
       "upsDiagSubSysFrameSerialNum": upsDiagSubSysFrameSerialNum,
       "upsDiagSubSysFrameManufactureDate": upsDiagSubSysFrameManufactureDate,
       "upsDiagSubSysIntBypSwitchTableSize": upsDiagSubSysIntBypSwitchTableSize,
       "upsDiagSubSysIntBypSwitchTable": upsDiagSubSysIntBypSwitchTable,
       "upsDiagSubSysIntBypSwitchEntry": upsDiagSubSysIntBypSwitchEntry,
       "upsDiagSubSysIntBypSwitchFrameIndex": upsDiagSubSysIntBypSwitchFrameIndex,
       "upsDiagSubSysIntBypSwitchIndex": upsDiagSubSysIntBypSwitchIndex,
       "upsDiagSubSysIntBypSwitchStatus": upsDiagSubSysIntBypSwitchStatus,
       "upsDiagSubSysIntBypSwitchFirmwareRev": upsDiagSubSysIntBypSwitchFirmwareRev,
       "upsDiagSubSysIntBypSwitchHardwareRev": upsDiagSubSysIntBypSwitchHardwareRev,
       "upsDiagSubSysIntBypSwitchSerialNum": upsDiagSubSysIntBypSwitchSerialNum,
       "upsDiagSubSysIntBypSwitchManufactureDate": upsDiagSubSysIntBypSwitchManufactureDate,
       "upsDiagSubSysBattMonitorTableSize": upsDiagSubSysBattMonitorTableSize,
       "upsDiagSubSysBattMonitorTable": upsDiagSubSysBattMonitorTable,
       "upsDiagSubSysBattMonitorEntry": upsDiagSubSysBattMonitorEntry,
       "upsDiagSubSysBattMonitorFrameIndex": upsDiagSubSysBattMonitorFrameIndex,
       "upsDiagSubSysBattMonitorIndex": upsDiagSubSysBattMonitorIndex,
       "upsDiagSubSysBattMonitorStatus": upsDiagSubSysBattMonitorStatus,
       "upsDiagSubSysBattMonitorFirmwareRev": upsDiagSubSysBattMonitorFirmwareRev,
       "upsDiagSubSysBattMonitorHardwareRev": upsDiagSubSysBattMonitorHardwareRev,
       "upsDiagSubSysBattMonitorSerialNum": upsDiagSubSysBattMonitorSerialNum,
       "upsDiagSubSysBattMonitorManufactureDate": upsDiagSubSysBattMonitorManufactureDate,
       "upsDiagSubSysExternalSwitchGearTableSize": upsDiagSubSysExternalSwitchGearTableSize,
       "upsDiagSubSysExternalSwitchGearTable": upsDiagSubSysExternalSwitchGearTable,
       "upsDiagSubSysExternalSwitchGearEntry": upsDiagSubSysExternalSwitchGearEntry,
       "upsDiagSubSysExternalSwitchGearFrameIndex": upsDiagSubSysExternalSwitchGearFrameIndex,
       "upsDiagSubSysExternalSwitchGearIndex": upsDiagSubSysExternalSwitchGearIndex,
       "upsDiagSubSysExternalSwitchGearStatus": upsDiagSubSysExternalSwitchGearStatus,
       "upsDiagSubSysExternalSwitchGearFirmwareRev": upsDiagSubSysExternalSwitchGearFirmwareRev,
       "upsDiagSubSysExternalSwitchGearHardwareRev": upsDiagSubSysExternalSwitchGearHardwareRev,
       "upsDiagSubSysExternalSwitchGearSerialNum": upsDiagSubSysExternalSwitchGearSerialNum,
       "upsDiagSubSysExternalSwitchGearManufactureDate": upsDiagSubSysExternalSwitchGearManufactureDate,
       "upsDiagSubSysDisplayInterfaceCardTableSize": upsDiagSubSysDisplayInterfaceCardTableSize,
       "upsDiagSubSysDisplayInterfaceCardTable": upsDiagSubSysDisplayInterfaceCardTable,
       "upsDiagSubSysDisplayInterfaceCardEntry": upsDiagSubSysDisplayInterfaceCardEntry,
       "upsDiagSubSysDisplayInterfaceCardFrameIndex": upsDiagSubSysDisplayInterfaceCardFrameIndex,
       "upsDiagSubSysDisplayInterfaceCardIndex": upsDiagSubSysDisplayInterfaceCardIndex,
       "upsDiagSubSysDisplayInterfaceCardStatus": upsDiagSubSysDisplayInterfaceCardStatus,
       "upsDiagSubSysDCCircuitBreakerTableSize": upsDiagSubSysDCCircuitBreakerTableSize,
       "upsDiagSubSysDCCircuitBreakerTable": upsDiagSubSysDCCircuitBreakerTable,
       "upsDiagSubSysDCCircuitBreakerEntry": upsDiagSubSysDCCircuitBreakerEntry,
       "upsDiagSubSysDCCircuitBreakerFrameIndex": upsDiagSubSysDCCircuitBreakerFrameIndex,
       "upsDiagSubSysDCCircuitBreakerIndex": upsDiagSubSysDCCircuitBreakerIndex,
       "upsDiagSubSysDCCircuitBreakerStatus": upsDiagSubSysDCCircuitBreakerStatus,
       "upsDiagSubSysSystemPowerSupplyTableSize": upsDiagSubSysSystemPowerSupplyTableSize,
       "upsDiagSubSysSystemPowerSupplyTable": upsDiagSubSysSystemPowerSupplyTable,
       "upsDiagSubSysSystemPowerSupplyEntry": upsDiagSubSysSystemPowerSupplyEntry,
       "upsDiagSubSysSystemPowerSupplyFrameIndex": upsDiagSubSysSystemPowerSupplyFrameIndex,
       "upsDiagSubSysSystemPowerSupplyIndex": upsDiagSubSysSystemPowerSupplyIndex,
       "upsDiagSubSysSystemPowerSupplyStatus": upsDiagSubSysSystemPowerSupplyStatus,
       "upsDiagSubSysSystemPowerSupplyFirmwareRev": upsDiagSubSysSystemPowerSupplyFirmwareRev,
       "upsDiagSubSysSystemPowerSupplyHardwareRev": upsDiagSubSysSystemPowerSupplyHardwareRev,
       "upsDiagSubSysSystemPowerSupplySerialNum": upsDiagSubSysSystemPowerSupplySerialNum,
       "upsDiagSubSysSystemPowerSupplyManufactureDate": upsDiagSubSysSystemPowerSupplyManufactureDate,
       "upsDiagSubSysXRCommunicationCardTableSize": upsDiagSubSysXRCommunicationCardTableSize,
       "upsDiagSubSysXRCommunicationCardTable": upsDiagSubSysXRCommunicationCardTable,
       "upsDiagSubSysXRCommunicationCardEntry": upsDiagSubSysXRCommunicationCardEntry,
       "upsDiagSubSysXRCommunicationCardFrameIndex": upsDiagSubSysXRCommunicationCardFrameIndex,
       "upsDiagSubSysXRCommunicationCardIndex": upsDiagSubSysXRCommunicationCardIndex,
       "upsDiagSubSysXRCommunicationCardStatus": upsDiagSubSysXRCommunicationCardStatus,
       "upsDiagSubSysXRCommunicationCardFirmwareRev": upsDiagSubSysXRCommunicationCardFirmwareRev,
       "upsDiagSubSysXRCommunicationCardSerialNum": upsDiagSubSysXRCommunicationCardSerialNum,
       "upsDiagSubSysExternalPowerFrameBoardTableSize": upsDiagSubSysExternalPowerFrameBoardTableSize,
       "upsDiagSubSysExternalPowerFrameBoardTable": upsDiagSubSysExternalPowerFrameBoardTable,
       "upsDiagSubSysExternalPowerFrameBoardEntry": upsDiagSubSysExternalPowerFrameBoardEntry,
       "upsDiagSubSysExternalPowerFrameBoardFrameIndex": upsDiagSubSysExternalPowerFrameBoardFrameIndex,
       "upsDiagSubSysExternalPowerFrameBoardIndex": upsDiagSubSysExternalPowerFrameBoardIndex,
       "upsDiagSubSysExternalPowerFrameBoardStatus": upsDiagSubSysExternalPowerFrameBoardStatus,
       "upsDiagSubSysChargerTableSize": upsDiagSubSysChargerTableSize,
       "upsDiagSubSysChargerTable": upsDiagSubSysChargerTable,
       "upsDiagSubSysChargerEntry": upsDiagSubSysChargerEntry,
       "upsDiagSubSysChargerFrameIndex": upsDiagSubSysChargerFrameIndex,
       "upsDiagSubSysChargerIndex": upsDiagSubSysChargerIndex,
       "upsDiagSubSysChargerStatus": upsDiagSubSysChargerStatus,
       "upsDiagSubSysInverterTableSize": upsDiagSubSysInverterTableSize,
       "upsDiagSubSysInverterTable": upsDiagSubSysInverterTable,
       "upsDiagSubSysInverterEntry": upsDiagSubSysInverterEntry,
       "upsDiagSubSysInverterFrameIndex": upsDiagSubSysInverterFrameIndex,
       "upsDiagSubSysInverterIndex": upsDiagSubSysInverterIndex,
       "upsDiagSubSysInverterStatus": upsDiagSubSysInverterStatus,
       "upsDiagSubSysInverterFirmwareRev": upsDiagSubSysInverterFirmwareRev,
       "upsDiagSubSysInverterHardwareRev": upsDiagSubSysInverterHardwareRev,
       "upsDiagSubSysInverterSerialNum": upsDiagSubSysInverterSerialNum,
       "upsDiagSubSysInverterManufactureDate": upsDiagSubSysInverterManufactureDate,
       "upsDiagSubSysPowerFactorCorrectionTableSize": upsDiagSubSysPowerFactorCorrectionTableSize,
       "upsDiagSubSysPowerFactorCorrectionTable": upsDiagSubSysPowerFactorCorrectionTable,
       "upsDiagSubSysPowerFactorCorrectionEntry": upsDiagSubSysPowerFactorCorrectionEntry,
       "upsDiagSubSysPowerFactorCorrectionFrameIndex": upsDiagSubSysPowerFactorCorrectionFrameIndex,
       "upsDiagSubSysPowerFactorCorrectionIndex": upsDiagSubSysPowerFactorCorrectionIndex,
       "upsDiagSubSysPowerFactorCorrectionStatus": upsDiagSubSysPowerFactorCorrectionStatus,
       "upsDiagSubSysPowerFactorCorrectionFirmwareRev": upsDiagSubSysPowerFactorCorrectionFirmwareRev,
       "upsDiagSubSysPowerFactorCorrectionHardwareRev": upsDiagSubSysPowerFactorCorrectionHardwareRev,
       "upsDiagSubSysPowerFactorCorrectionSerialNum": upsDiagSubSysPowerFactorCorrectionSerialNum,
       "upsDiagSubSysPowerFactorCorrectionManufactureDate": upsDiagSubSysPowerFactorCorrectionManufactureDate,
       "upsDiagSubSysNetworkComCardTableSize": upsDiagSubSysNetworkComCardTableSize,
       "upsDiagSubSysNetworkComCardTable": upsDiagSubSysNetworkComCardTable,
       "upsDiagSubSysNetworkComCardEntry": upsDiagSubSysNetworkComCardEntry,
       "upsDiagSubSysNetworkComCardIndex": upsDiagSubSysNetworkComCardIndex,
       "upsDiagSubSysNetworkComCardModelNumber": upsDiagSubSysNetworkComCardModelNumber,
       "upsDiagSubSysNetworkComCardSerialNumber": upsDiagSubSysNetworkComCardSerialNumber,
       "upsDiagSubSysNetworkComCardDateOfManufacture": upsDiagSubSysNetworkComCardDateOfManufacture,
       "upsDiagSubSysNetworkComCardHardwareRev": upsDiagSubSysNetworkComCardHardwareRev,
       "upsDiagSubSysNetworkComCardFirmwareAppRev": upsDiagSubSysNetworkComCardFirmwareAppRev,
       "upsDiagSubSysNetworkComCardFirmwareAppOSRev": upsDiagSubSysNetworkComCardFirmwareAppOSRev,
       "upsDiagnosticExternalDevices": upsDiagnosticExternalDevices,
       "upsDiagSwitchGear": upsDiagSwitchGear,
       "upsDiagSwitchGearStatus": upsDiagSwitchGearStatus,
       "upsDiagSwitchGearInputSwitchStatus": upsDiagSwitchGearInputSwitchStatus,
       "upsDiagSwitchGearOutputSwitchStatus": upsDiagSwitchGearOutputSwitchStatus,
       "upsDiagSwitchGearBypassSwitchStatus": upsDiagSwitchGearBypassSwitchStatus,
       "upsDiagSwitchGearBypassInputSwitchStatus": upsDiagSwitchGearBypassInputSwitchStatus,
       "upsDiagSwitchGearBreakerTableSize": upsDiagSwitchGearBreakerTableSize,
       "upsDiagSwitchGearBreakerTable": upsDiagSwitchGearBreakerTable,
       "upsDiagSwitchGearBreakerEntry": upsDiagSwitchGearBreakerEntry,
       "switchgearBreakerIndex": switchgearBreakerIndex,
       "switchgearBreakerPresent": switchgearBreakerPresent,
       "switchgearBreakerName": switchgearBreakerName,
       "upsDiagSubFeedBreakerTableSize": upsDiagSubFeedBreakerTableSize,
       "upsDiagSubFeedBreakerTable": upsDiagSubFeedBreakerTable,
       "upsDiagSubFeedBreakerEntry": upsDiagSubFeedBreakerEntry,
       "subfeedBreakerIndex": subfeedBreakerIndex,
       "subfeedBreakerPresent": subfeedBreakerPresent,
       "subfeedBreakerRating": subfeedBreakerRating,
       "subfeedBreakerUpperAcceptPowerWarning": subfeedBreakerUpperAcceptPowerWarning,
       "subfeedBreakerUpperAcceptPowerCritical": subfeedBreakerUpperAcceptPowerCritical,
       "upsDiagMCCBBox": upsDiagMCCBBox,
       "upsDiagMCCBBoxStatus": upsDiagMCCBBoxStatus,
       "upsDiagTransformer": upsDiagTransformer,
       "upsDiagTransformerStatus": upsDiagTransformerStatus,
       "upsDiagnosticComBus": upsDiagnosticComBus,
       "upsDiagComBusInternalMIMStatus": upsDiagComBusInternalMIMStatus,
       "upsDiagComBusInternalRIMStatus": upsDiagComBusInternalRIMStatus,
       "upsDiagComBusMIMtoRIMStatus": upsDiagComBusMIMtoRIMStatus,
       "upsDiagComBusExternalMIMStatus": upsDiagComBusExternalMIMStatus,
       "upsDiagComBusExternalRIMStatus": upsDiagComBusExternalRIMStatus,
       "upsParallelSystem": upsParallelSystem,
       "upsParallelSysLocalAddress": upsParallelSysLocalAddress,
       "upsParallelSysRemoteAddress": upsParallelSysRemoteAddress,
       "upsParallelSysRedundancy": upsParallelSysRedundancy,
       "upsParallelInputMaximumCurrent": upsParallelInputMaximumCurrent,
       "upsParallelTotalOutputPower": upsParallelTotalOutputPower,
       "upsParallelTotalOutputApparentPower": upsParallelTotalOutputApparentPower,
       "upsParallelInputPhaseTable": upsParallelInputPhaseTable,
       "upsParallelInputPhaseEntry": upsParallelInputPhaseEntry,
       "upsParallelInputPhaseTableIndex": upsParallelInputPhaseTableIndex,
       "upsParallelInputPhaseIndex": upsParallelInputPhaseIndex,
       "upsParallelInputCurrent": upsParallelInputCurrent,
       "upsParallelInputActivePower": upsParallelInputActivePower,
       "upsParallelInputApparentPower": upsParallelInputApparentPower,
       "upsParallelInputVoltage": upsParallelInputVoltage,
       "upsParallelInputMaxVoltage": upsParallelInputMaxVoltage,
       "upsParallelInputMaxCurrent": upsParallelInputMaxCurrent,
       "upsParallelInputTotalActivePower": upsParallelInputTotalActivePower,
       "upsParallelInputTotalApparentPower": upsParallelInputTotalApparentPower,
       "upsParallelOutputPhaseTable": upsParallelOutputPhaseTable,
       "upsParallelOutputPhaseEntry": upsParallelOutputPhaseEntry,
       "upsParallelOutputPhaseTableIndex": upsParallelOutputPhaseTableIndex,
       "upsParallelOutputPhaseIndex": upsParallelOutputPhaseIndex,
       "upsParallelOutputCurrent": upsParallelOutputCurrent,
       "upsParallelOutputLoad": upsParallelOutputLoad,
       "upsParallelOutputPercentLoad": upsParallelOutputPercentLoad,
       "upsParallelOutputPower": upsParallelOutputPower,
       "upsParallelOutputApparentPowerTable": upsParallelOutputApparentPowerTable,
       "upsParallelOutputApparentPowerEntry": upsParallelOutputApparentPowerEntry,
       "upsParallelOutputApparentPowerTableIndex": upsParallelOutputApparentPowerTableIndex,
       "upsParallelOutputApparentPower": upsParallelOutputApparentPower,
       "upsParallelDiagSubSysBreakerTable": upsParallelDiagSubSysBreakerTable,
       "upsParallelDiagSubSysBreakerEntry": upsParallelDiagSubSysBreakerEntry,
       "upsParallelDiagSubSysBreakerFrameIndex": upsParallelDiagSubSysBreakerFrameIndex,
       "upsParallelDiagSubSysBreakerIndex": upsParallelDiagSubSysBreakerIndex,
       "upsParallelDiagSubSysBreakerStatus": upsParallelDiagSubSysBreakerStatus,
       "upsParallelDiagSubSysBreakerName": upsParallelDiagSubSysBreakerName,
       "upsParallelOutputTotalPercentLoad": upsParallelOutputTotalPercentLoad,
       "upsPhysicalLayout": upsPhysicalLayout,
       "upsIOFrameLayoutPositionID": upsIOFrameLayoutPositionID,
       "upsBottomFeedFrameLayoutPositionID": upsBottomFeedFrameLayoutPositionID,
       "upsSwitchGearLayoutPositionID": upsSwitchGearLayoutPositionID,
       "upsBatteryFrameLayoutTableSize": upsBatteryFrameLayoutTableSize,
       "upsBatteryFrameLayoutTable": upsBatteryFrameLayoutTable,
       "upsBatteryFrameLayoutEntry": upsBatteryFrameLayoutEntry,
       "batteryFrameIndex": batteryFrameIndex,
       "batteryFramePositionID": batteryFramePositionID,
       "upsSideCarFrameLayoutTableSize": upsSideCarFrameLayoutTableSize,
       "upsSideCarFrameLayoutTable": upsSideCarFrameLayoutTable,
       "upsSideCarFrameLayoutEntry": upsSideCarFrameLayoutEntry,
       "sideCarFrameIndex": sideCarFrameIndex,
       "sideCarFramePositionID": sideCarFramePositionID,
       "upsPowerFrameLayoutTableSize": upsPowerFrameLayoutTableSize,
       "upsPowerFrameLayoutTable": upsPowerFrameLayoutTable,
       "upsPowerFrameLayoutEntry": upsPowerFrameLayoutEntry,
       "powerFrameIndex": powerFrameIndex,
       "powerFramePositionID": powerFramePositionID,
       "upsIntegratedATS": upsIntegratedATS,
       "upsIntegratedATSSelectedSource": upsIntegratedATSSelectedSource,
       "upsIntegratedATSPreferredSource": upsIntegratedATSPreferredSource,
       "upsIntegratedATSUpsReturnStaggering": upsIntegratedATSUpsReturnStaggering,
       "upsIntegratedATSSourceTableSize": upsIntegratedATSSourceTableSize,
       "upsIntegratedATSSourceTable": upsIntegratedATSSourceTable,
       "upsIntegratedATSSourceEntry": upsIntegratedATSSourceEntry,
       "upsIntegratedATSSourceIndex": upsIntegratedATSSourceIndex,
       "upsIntegratedATSSourceName": upsIntegratedATSSourceName,
       "upsIntegratedATSSourceStatus": upsIntegratedATSSourceStatus,
       "upsIntegratedATSLineFailDelay": upsIntegratedATSLineFailDelay,
       "upsIntegratedATSLineStabilityDelay": upsIntegratedATSLineStabilityDelay,
       "measureUps": measureUps,
       "mUpsEnviron": mUpsEnviron,
       "mUpsEnvironAmbientTemperature": mUpsEnvironAmbientTemperature,
       "mUpsEnvironRelativeHumidity": mUpsEnvironRelativeHumidity,
       "mUpsEnvironAmbientTemperature2": mUpsEnvironAmbientTemperature2,
       "mUpsEnvironRelativeHumidity2": mUpsEnvironRelativeHumidity2,
       "mUpsContact": mUpsContact,
       "mUpsContactNumContacts": mUpsContactNumContacts,
       "mUpsContactTable": mUpsContactTable,
       "mUpsContactEntry": mUpsContactEntry,
       "contactNumber": contactNumber,
       "normalState": normalState,
       "description": description,
       "monitoringStatus": monitoringStatus,
       "currentStatus": currentStatus,
       "miniSNMPadapter": miniSNMPadapter,
       "serialPort": serialPort,
       "serialPort1": serialPort1,
       "serialPort2": serialPort2,
       "serialPort2Config": serialPort2Config,
       "serialPort2Mode": serialPort2Mode,
       "serialPort2Control": serialPort2Control,
       "setPulseOnTXD": setPulseOnTXD,
       "masterswitch": masterswitch,
       "sPDUIdent": sPDUIdent,
       "sPDUIdentHardwareRev": sPDUIdentHardwareRev,
       "sPDUIdentFirmwareRev": sPDUIdentFirmwareRev,
       "sPDUIdentDateOfManufacture": sPDUIdentDateOfManufacture,
       "sPDUIdentModelNumber": sPDUIdentModelNumber,
       "sPDUIdentSerialNumber": sPDUIdentSerialNumber,
       "sPDUMasterControl": sPDUMasterControl,
       "sPDUMasterControlSwitch": sPDUMasterControlSwitch,
       "sPDUMasterState": sPDUMasterState,
       "sPDUMasterPending": sPDUMasterPending,
       "sPDUMasterConfig": sPDUMasterConfig,
       "sPDUMasterConfigPowerOn": sPDUMasterConfigPowerOn,
       "sPDUMasterConfigReboot": sPDUMasterConfigReboot,
       "sPDUMasterConfigPDUName": sPDUMasterConfigPDUName,
       "sPDUOutletControl": sPDUOutletControl,
       "sPDUOutletControlTableSize": sPDUOutletControlTableSize,
       "sPDUOutletControlTable": sPDUOutletControlTable,
       "sPDUOutletControlEntry": sPDUOutletControlEntry,
       "sPDUOutletControlIndex": sPDUOutletControlIndex,
       "sPDUOutletPending": sPDUOutletPending,
       "sPDUOutletCtl": sPDUOutletCtl,
       "sPDUOutletCtlName": sPDUOutletCtlName,
       "sPDUOutletConfig": sPDUOutletConfig,
       "sPDUOutletConfigTableSize": sPDUOutletConfigTableSize,
       "sPDUOutletConfigTable": sPDUOutletConfigTable,
       "sPDUOutletConfigEntry": sPDUOutletConfigEntry,
       "sPDUOutletConfigIndex": sPDUOutletConfigIndex,
       "sPDUOutletPowerOnTime": sPDUOutletPowerOnTime,
       "sPDUOutletName": sPDUOutletName,
       "sPDUOutletPowerOffTime": sPDUOutletPowerOffTime,
       "sPDUOutletRebootDuration": sPDUOutletRebootDuration,
       "masterswitchVM": masterswitchVM,
       "sPDUIdentVM": sPDUIdentVM,
       "sPDUIdentVMTableSize": sPDUIdentVMTableSize,
       "sPDUIdentVMTable": sPDUIdentVMTable,
       "sPDUIdentVMEntry": sPDUIdentVMEntry,
       "sPDUIdentVMIndex": sPDUIdentVMIndex,
       "sPDUIdentNameVM": sPDUIdentNameVM,
       "sPDUIdentHardwareRevVM": sPDUIdentHardwareRevVM,
       "sPDUIdentFirmwareRevVM": sPDUIdentFirmwareRevVM,
       "sPDUIdentDateOfManufactureVM": sPDUIdentDateOfManufactureVM,
       "sPDUIdentModelNumberVM": sPDUIdentModelNumberVM,
       "sPDUIdentSerialNumberVM": sPDUIdentSerialNumberVM,
       "sPDUMasterControlVM": sPDUMasterControlVM,
       "sPDUMasterControlVMTableSize": sPDUMasterControlVMTableSize,
       "sPDUMasterControlVMTable": sPDUMasterControlVMTable,
       "sPDUMasterControlVMEntry": sPDUMasterControlVMEntry,
       "sPDUMasterControlVMIndex": sPDUMasterControlVMIndex,
       "sPDUMasterControlVMName": sPDUMasterControlVMName,
       "sPDUMasterControlVMCommand": sPDUMasterControlVMCommand,
       "sPDUMasterConfigVM": sPDUMasterConfigVM,
       "sPDUMasterConfigVMTableSize": sPDUMasterConfigVMTableSize,
       "sPDUMasterConfigVMTable": sPDUMasterConfigVMTable,
       "sPDUMasterConfigVMEntry": sPDUMasterConfigVMEntry,
       "sPDUMasterConfigVMIndex": sPDUMasterConfigVMIndex,
       "sPDUMasterConfigVMName": sPDUMasterConfigVMName,
       "sPDUMasterConfigVMColdstartDelay": sPDUMasterConfigVMColdstartDelay,
       "sPDUMasterConfigVMAudioAlarmActivated": sPDUMasterConfigVMAudioAlarmActivated,
       "sPDUMasterConfigVMHighLoadWarningThreshold": sPDUMasterConfigVMHighLoadWarningThreshold,
       "sPDUMasterConfigVMLowLoadWarningThreshold": sPDUMasterConfigVMLowLoadWarningThreshold,
       "sPDUMasterConfigVMOverloadRestriction": sPDUMasterConfigVMOverloadRestriction,
       "sPDUMasterStatusVM": sPDUMasterStatusVM,
       "sPDUMasterStatusVMTableSize": sPDUMasterStatusVMTableSize,
       "sPDUMasterStatusVMTable": sPDUMasterStatusVMTable,
       "sPDUMasterStatusVMEntry": sPDUMasterStatusVMEntry,
       "sPDUMasterStatusVMIndex": sPDUMasterStatusVMIndex,
       "sPDUMasterStatusVMName": sPDUMasterStatusVMName,
       "sPDUMasterStatusVMCommandPending": sPDUMasterStatusVMCommandPending,
       "sPDUMasterStatusVMOverloadCondition": sPDUMasterStatusVMOverloadCondition,
       "sPDUMasterStatusVMLowLoadCondition": sPDUMasterStatusVMLowLoadCondition,
       "sPDUMasterStatusVMCurrentLoad": sPDUMasterStatusVMCurrentLoad,
       "sPDUMasterStatusVMMaxLoad": sPDUMasterStatusVMMaxLoad,
       "sPDUMasterStatusVMOutletCount": sPDUMasterStatusVMOutletCount,
       "sPDUMasterStatusVMRebootDuration": sPDUMasterStatusVMRebootDuration,
       "sPDUOutletControlVM": sPDUOutletControlVM,
       "sPDUOutletControlVMTable": sPDUOutletControlVMTable,
       "sPDUOutletControlVMEntry": sPDUOutletControlVMEntry,
       "sPDUOutletControlVMIndex": sPDUOutletControlVMIndex,
       "sPDUOutletControlVMName": sPDUOutletControlVMName,
       "sPDUOutletControlVMOutletIndex": sPDUOutletControlVMOutletIndex,
       "sPDUOutletControlVMOutletName": sPDUOutletControlVMOutletName,
       "sPDUOutletControlVMOutletCommand": sPDUOutletControlVMOutletCommand,
       "sPDUOutletConfigVM": sPDUOutletConfigVM,
       "sPDUOutletConfigVMTable": sPDUOutletConfigVMTable,
       "sPDUOutletConfigVMEntry": sPDUOutletConfigVMEntry,
       "sPDUOutletConfigVMIndex": sPDUOutletConfigVMIndex,
       "sPDUOutletConfigVMName": sPDUOutletConfigVMName,
       "sPDUOutletConfigVMOutletIndex": sPDUOutletConfigVMOutletIndex,
       "sPDUOutletConfigVMOutletName": sPDUOutletConfigVMOutletName,
       "sPDUOutletConfigVMPowerOnTime": sPDUOutletConfigVMPowerOnTime,
       "sPDUOutletConfigVMPowerOffTime": sPDUOutletConfigVMPowerOffTime,
       "sPDUOutletConfigVMRebootDuration": sPDUOutletConfigVMRebootDuration,
       "sPDUOutletStatusVM": sPDUOutletStatusVM,
       "sPDUOutletStatusVMTable": sPDUOutletStatusVMTable,
       "sPDUOutletStatusVMEntry": sPDUOutletStatusVMEntry,
       "sPDUOutletStatusVMIndex": sPDUOutletStatusVMIndex,
       "sPDUOutletStatusVMName": sPDUOutletStatusVMName,
       "sPDUOutletStatusVMOutletIndex": sPDUOutletStatusVMOutletIndex,
       "sPDUOutletStatusVMOutletName": sPDUOutletStatusVMOutletName,
       "sPDUOutletStatusVMOutletState": sPDUOutletStatusVMOutletState,
       "sPDUOutletStatusVMCommandPending": sPDUOutletStatusVMCommandPending,
       "masterswitchMSP": masterswitchMSP,
       "sPDUIdentMSP": sPDUIdentMSP,
       "sPDUIdentMSPTableSize": sPDUIdentMSPTableSize,
       "sPDUIdentMSPTable": sPDUIdentMSPTable,
       "sPDUIdentMSPEntry": sPDUIdentMSPEntry,
       "sPDUIdentMSPIndex": sPDUIdentMSPIndex,
       "sPDUIdentNameMSP": sPDUIdentNameMSP,
       "sPDUIdentHardwareRevMSP": sPDUIdentHardwareRevMSP,
       "sPDUIdentFirmwareRevMSP": sPDUIdentFirmwareRevMSP,
       "sPDUIdentDateOfManufactureMSP": sPDUIdentDateOfManufactureMSP,
       "sPDUIdentModelNumberMSP": sPDUIdentModelNumberMSP,
       "sPDUIdentSerialNumberMSP": sPDUIdentSerialNumberMSP,
       "sPDUMasterControlMSP": sPDUMasterControlMSP,
       "sPDUMasterControlMSPTableSize": sPDUMasterControlMSPTableSize,
       "sPDUMasterControlMSPTable": sPDUMasterControlMSPTable,
       "sPDUMasterControlMSPEntry": sPDUMasterControlMSPEntry,
       "sPDUMasterControlMSPIndex": sPDUMasterControlMSPIndex,
       "sPDUMasterControlMSPName": sPDUMasterControlMSPName,
       "sPDUMasterControlMSPCommand": sPDUMasterControlMSPCommand,
       "sPDUMasterConfigMSP": sPDUMasterConfigMSP,
       "sPDUMasterConfigMSPTableSize": sPDUMasterConfigMSPTableSize,
       "sPDUMasterConfigMSPTable": sPDUMasterConfigMSPTable,
       "sPDUMasterConfigMSPEntry": sPDUMasterConfigMSPEntry,
       "sPDUMasterConfigMSPIndex": sPDUMasterConfigMSPIndex,
       "sPDUMasterConfigMSPName": sPDUMasterConfigMSPName,
       "sPDUMasterConfigMSPPowerOnTimeDelay": sPDUMasterConfigMSPPowerOnTimeDelay,
       "sPDUMasterConfigMSPManualButton": sPDUMasterConfigMSPManualButton,
       "sPDUMasterStatusMSP": sPDUMasterStatusMSP,
       "sPDUMasterStatusMSPTableSize": sPDUMasterStatusMSPTableSize,
       "sPDUMasterStatusMSPTable": sPDUMasterStatusMSPTable,
       "sPDUMasterStatusMSPEntry": sPDUMasterStatusMSPEntry,
       "sPDUMasterStatusMSPIndex": sPDUMasterStatusMSPIndex,
       "sPDUMasterStatusMSPName": sPDUMasterStatusMSPName,
       "sPDUMasterStatusMSPOutletCount": sPDUMasterStatusMSPOutletCount,
       "sPDUOutletControlMSP": sPDUOutletControlMSP,
       "sPDUOutletControlMSPTable": sPDUOutletControlMSPTable,
       "sPDUOutletControlMSPEntry": sPDUOutletControlMSPEntry,
       "sPDUOutletControlMSPIndex": sPDUOutletControlMSPIndex,
       "sPDUOutletControlMSPName": sPDUOutletControlMSPName,
       "sPDUOutletControlMSPOutletIndex": sPDUOutletControlMSPOutletIndex,
       "sPDUOutletControlMSPOutletName": sPDUOutletControlMSPOutletName,
       "sPDUOutletControlMSPOutletCommand": sPDUOutletControlMSPOutletCommand,
       "sPDUOutletConfigMSP": sPDUOutletConfigMSP,
       "sPDUOutletConfigMSPall": sPDUOutletConfigMSPall,
       "sPDUOutletConfigMSPallTable": sPDUOutletConfigMSPallTable,
       "sPDUOutletConfigMSPallEntry": sPDUOutletConfigMSPallEntry,
       "sPDUOutletConfigMSPallIndex": sPDUOutletConfigMSPallIndex,
       "sPDUOutletConfigMSPallName": sPDUOutletConfigMSPallName,
       "sPDUOutletConfigMSPallOutletIndex": sPDUOutletConfigMSPallOutletIndex,
       "sPDUOutletConfigMSPallOutletName": sPDUOutletConfigMSPallOutletName,
       "sPDUOutletConfigMSPallOutletCtrlMode": sPDUOutletConfigMSPallOutletCtrlMode,
       "sPDUOutletConfigMSPgs": sPDUOutletConfigMSPgs,
       "sPDUOutletConfigMSPgsTable": sPDUOutletConfigMSPgsTable,
       "sPDUOutletConfigMSPgsEntry": sPDUOutletConfigMSPgsEntry,
       "sPDUOutletConfigMSPgsIndex": sPDUOutletConfigMSPgsIndex,
       "sPDUOutletConfigMSPgsName": sPDUOutletConfigMSPgsName,
       "sPDUOutletConfigMSPgsOutletIndex": sPDUOutletConfigMSPgsOutletIndex,
       "sPDUOutletConfigMSPgsOutletName": sPDUOutletConfigMSPgsOutletName,
       "sPDUOutletConfigMSPgsOutletCtrlMode": sPDUOutletConfigMSPgsOutletCtrlMode,
       "sPDUOutletConfigMSPgsDeviceConfirm": sPDUOutletConfigMSPgsDeviceConfirm,
       "sPDUOutletConfigMSPgsLowBattWarning": sPDUOutletConfigMSPgsLowBattWarning,
       "sPDUOutletConfigMSPgsLowBattMult": sPDUOutletConfigMSPgsLowBattMult,
       "sPDUOutletConfigMSPgsRestartDelay": sPDUOutletConfigMSPgsRestartDelay,
       "sPDUOutletConfigMSPgsPowerOnDelay": sPDUOutletConfigMSPgsPowerOnDelay,
       "sPDUOutletConfigMSPgsPowerOffDelay": sPDUOutletConfigMSPgsPowerOffDelay,
       "sPDUOutletConfigMSPgsBattCapThresh": sPDUOutletConfigMSPgsBattCapThresh,
       "sPDUOutletConfigMSPgsRebootDuration": sPDUOutletConfigMSPgsRebootDuration,
       "sPDUOutletConfigMSPannun": sPDUOutletConfigMSPannun,
       "sPDUOutletConfigMSPannunTable": sPDUOutletConfigMSPannunTable,
       "sPDUOutletConfigMSPannunEntry": sPDUOutletConfigMSPannunEntry,
       "sPDUOutletConfigMSPannunIndex": sPDUOutletConfigMSPannunIndex,
       "sPDUOutletConfigMSPannunName": sPDUOutletConfigMSPannunName,
       "sPDUOutletConfigMSPannunOutletIndex": sPDUOutletConfigMSPannunOutletIndex,
       "sPDUOutletConfigMSPannunOutletName": sPDUOutletConfigMSPannunOutletName,
       "sPDUOutletConfigMSPannunOutletCtrlMode": sPDUOutletConfigMSPannunOutletCtrlMode,
       "sPDUOutletConfigMSPannunInitialState": sPDUOutletConfigMSPannunInitialState,
       "sPDUOutletConfigMSPannunAlarmActionDly": sPDUOutletConfigMSPannunAlarmActionDly,
       "sPDUOutletConfigMSPmups": sPDUOutletConfigMSPmups,
       "sPDUOutletConfigMSPmupsTable": sPDUOutletConfigMSPmupsTable,
       "sPDUOutletConfigMSPmupsEntry": sPDUOutletConfigMSPmupsEntry,
       "sPDUOutletConfigMSPmupsIndex": sPDUOutletConfigMSPmupsIndex,
       "sPDUOutletConfigMSPmupsName": sPDUOutletConfigMSPmupsName,
       "sPDUOutletConfigMSPmupsOutletIndex": sPDUOutletConfigMSPmupsOutletIndex,
       "sPDUOutletConfigMSPmupsOutletName": sPDUOutletConfigMSPmupsOutletName,
       "sPDUOutletConfigMSPmupsZone1": sPDUOutletConfigMSPmupsZone1,
       "sPDUOutletConfigMSPmupsZone2": sPDUOutletConfigMSPmupsZone2,
       "sPDUOutletConfigMSPmupsZone3": sPDUOutletConfigMSPmupsZone3,
       "sPDUOutletConfigMSPmupsZone4": sPDUOutletConfigMSPmupsZone4,
       "sPDUOutletConfigMSPmupsP1LowHum": sPDUOutletConfigMSPmupsP1LowHum,
       "sPDUOutletConfigMSPmupsP1HiHum": sPDUOutletConfigMSPmupsP1HiHum,
       "sPDUOutletConfigMSPmupsP1LowTemp": sPDUOutletConfigMSPmupsP1LowTemp,
       "sPDUOutletConfigMSPmupsP1HiTemp": sPDUOutletConfigMSPmupsP1HiTemp,
       "sPDUOutletConfigMSPmupsP2LowHum": sPDUOutletConfigMSPmupsP2LowHum,
       "sPDUOutletConfigMSPmupsP2HiHum": sPDUOutletConfigMSPmupsP2HiHum,
       "sPDUOutletConfigMSPmupsP2LowTemp": sPDUOutletConfigMSPmupsP2LowTemp,
       "sPDUOutletConfigMSPmupsP2HiTemp": sPDUOutletConfigMSPmupsP2HiTemp,
       "sPDUOutletStatusMSP": sPDUOutletStatusMSP,
       "sPDUOutletStatusMSPTable": sPDUOutletStatusMSPTable,
       "sPDUOutletStatusMSPEntry": sPDUOutletStatusMSPEntry,
       "sPDUOutletStatusMSPIndex": sPDUOutletStatusMSPIndex,
       "sPDUOutletStatusMSPName": sPDUOutletStatusMSPName,
       "sPDUOutletStatusMSPOutletIndex": sPDUOutletStatusMSPOutletIndex,
       "sPDUOutletStatusMSPOutletName": sPDUOutletStatusMSPOutletName,
       "sPDUOutletStatusMSPOutletState": sPDUOutletStatusMSPOutletState,
       "sPDUOutletStatusMSPCommandPending": sPDUOutletStatusMSPCommandPending,
       "sPDUOutletStatusMSPOutletCtrlMode": sPDUOutletStatusMSPOutletCtrlMode,
       "dcDM3": dcDM3,
       "dm3Ident": dm3Ident,
       "dm3IdentSystem": dm3IdentSystem,
       "dm3IdentSysDescriptionTableSize": dm3IdentSysDescriptionTableSize,
       "dm3IdentSysDescriptionTable": dm3IdentSysDescriptionTable,
       "dm3IdentSysDescriptionEntry": dm3IdentSysDescriptionEntry,
       "dm3IdentSysDescriptionIndex": dm3IdentSysDescriptionIndex,
       "dm3IdentSysDescriptionText": dm3IdentSysDescriptionText,
       "dm3IdentSysModel": dm3IdentSysModel,
       "dm3IdentSysCntrlRev": dm3IdentSysCntrlRev,
       "dm3IdentSysFWVersion": dm3IdentSysFWVersion,
       "dm3Config": dm3Config,
       "dm3ConfigSystem": dm3ConfigSystem,
       "dm3ConfigSysDescriptionTableSize": dm3ConfigSysDescriptionTableSize,
       "dm3ConfigSysDescriptionTable": dm3ConfigSysDescriptionTable,
       "dm3ConfigSysDescriptionEntry": dm3ConfigSysDescriptionEntry,
       "dm3ConfigSysDescriptionIndex": dm3ConfigSysDescriptionIndex,
       "dm3ConfigSysDescriptionText": dm3ConfigSysDescriptionText,
       "dm3ConfigSysHighTempThresh": dm3ConfigSysHighTempThresh,
       "dm3ConfigSysHighTempAlarm": dm3ConfigSysHighTempAlarm,
       "dm3ConfigSysLowTempThresh": dm3ConfigSysLowTempThresh,
       "dm3ConfigSysLowTempAlarm": dm3ConfigSysLowTempAlarm,
       "dm3ConfigSysHardwareTempAlarm": dm3ConfigSysHardwareTempAlarm,
       "dm3ConfigSysRemoteAccess": dm3ConfigSysRemoteAccess,
       "dm3ConfigLVD": dm3ConfigLVD,
       "dm3ConfigLVDTableSize": dm3ConfigLVDTableSize,
       "dm3ConfigLVDTable": dm3ConfigLVDTable,
       "dm3ConfigLVDEntry": dm3ConfigLVDEntry,
       "dm3ConfigLVDIndex": dm3ConfigLVDIndex,
       "dm3ConfigLVDName": dm3ConfigLVDName,
       "dm3ConfigLVDEnable": dm3ConfigLVDEnable,
       "dm3ConfigLVDTripThresh": dm3ConfigLVDTripThresh,
       "dm3ConfigLVDResetThresh": dm3ConfigLVDResetThresh,
       "dm3ConfigLVDOpenAlarm": dm3ConfigLVDOpenAlarm,
       "dm3ConfigLVDHWAlarm": dm3ConfigLVDHWAlarm,
       "dm3ConfigBattery": dm3ConfigBattery,
       "dm3ConfigBattFloatVolt": dm3ConfigBattFloatVolt,
       "dm3ConfigBattMaxRecharge": dm3ConfigBattMaxRecharge,
       "dm3ConfigBattDischargeThresh": dm3ConfigBattDischargeThresh,
       "dm3ConfigBattDischargeAlarm": dm3ConfigBattDischargeAlarm,
       "dm3ConfigBattHighVoltThresh": dm3ConfigBattHighVoltThresh,
       "dm3ConfigBattHighVoltAlarm": dm3ConfigBattHighVoltAlarm,
       "dm3ConfigBattLowVoltThresh": dm3ConfigBattLowVoltThresh,
       "dm3ConfigBattLowVoltAlarm": dm3ConfigBattLowVoltAlarm,
       "dm3ConfigBattHighTempThresh": dm3ConfigBattHighTempThresh,
       "dm3ConfigBattHighTempAlarm": dm3ConfigBattHighTempAlarm,
       "dm3ConfigBattLowTempThresh": dm3ConfigBattLowTempThresh,
       "dm3ConfigBattLowTempAlarm": dm3ConfigBattLowTempAlarm,
       "dm3ConfigBattAmpHour": dm3ConfigBattAmpHour,
       "dm3ConfigCompMethod": dm3ConfigCompMethod,
       "dm3ConfigCompTempCoeff": dm3ConfigCompTempCoeff,
       "dm3ConfigHighKneeTemp": dm3ConfigHighKneeTemp,
       "dm3ConfigLowKneeTemp": dm3ConfigLowKneeTemp,
       "dm3ConfigBattHwCurrentAlarm": dm3ConfigBattHwCurrentAlarm,
       "dm3ConfigBattHwTempAlarm": dm3ConfigBattHwTempAlarm,
       "dm3ConfigPowerModules": dm3ConfigPowerModules,
       "dm3ConfigRectifier": dm3ConfigRectifier,
       "dm3ConfigRectThresh": dm3ConfigRectThresh,
       "dm3ConfigRectHighVoltThresh": dm3ConfigRectHighVoltThresh,
       "dm3ConfigRectLowVoltThresh": dm3ConfigRectLowVoltThresh,
       "dm3ConfigRectFailSafe": dm3ConfigRectFailSafe,
       "dm3ConfigRectFailComm": dm3ConfigRectFailComm,
       "dm3ConfigRectAlarms": dm3ConfigRectAlarms,
       "dm3ConfigRectHighVoltAlarm": dm3ConfigRectHighVoltAlarm,
       "dm3ConfigRectLowVoltAlarm": dm3ConfigRectLowVoltAlarm,
       "dm3ConfigRectConfigAlarm": dm3ConfigRectConfigAlarm,
       "dm3ConfigRect1ofNAlarm": dm3ConfigRect1ofNAlarm,
       "dm3ConfigRect2ofNAlarm": dm3ConfigRect2ofNAlarm,
       "dm3ConfigRectDiagAlarm": dm3ConfigRectDiagAlarm,
       "dm3ConfigRectImbalanceAlarm": dm3ConfigRectImbalanceAlarm,
       "dm3ConfigRectCurrLimitAlarm": dm3ConfigRectCurrLimitAlarm,
       "dm3ConfigRectStandbyAlarm": dm3ConfigRectStandbyAlarm,
       "dm3ConfigRectFanFailAlarm": dm3ConfigRectFanFailAlarm,
       "dm3ConfigRectFailAlarm": dm3ConfigRectFailAlarm,
       "dm3ConfigRectHwVoltAlarm": dm3ConfigRectHwVoltAlarm,
       "dm3ConfigConverter": dm3ConfigConverter,
       "dm3ConfigConvThresh": dm3ConfigConvThresh,
       "dm3ConfigConvHighVoltThresh": dm3ConfigConvHighVoltThresh,
       "dm3ConfigConvLowVoltThresh": dm3ConfigConvLowVoltThresh,
       "dm3ConfigConvFailSafe": dm3ConfigConvFailSafe,
       "dm3ConfigConvSetPoint": dm3ConfigConvSetPoint,
       "dm3ConfigConvFailMax": dm3ConfigConvFailMax,
       "dm3ConfigConvFailMin": dm3ConfigConvFailMin,
       "dm3ConfigConvFailComm": dm3ConfigConvFailComm,
       "dm3ConfigConvAlarms": dm3ConfigConvAlarms,
       "dm3ConfigConvHighVoltAlarm": dm3ConfigConvHighVoltAlarm,
       "dm3ConfigConvLowVoltAlarm": dm3ConfigConvLowVoltAlarm,
       "dm3ConfigConvConfigAlarm": dm3ConfigConvConfigAlarm,
       "dm3ConfigConv1ofNAlarm": dm3ConfigConv1ofNAlarm,
       "dm3ConfigConv2ofNAlarm": dm3ConfigConv2ofNAlarm,
       "dm3ConfigConvDiagAlarm": dm3ConfigConvDiagAlarm,
       "dm3ConfigConvImbalanceAlarm": dm3ConfigConvImbalanceAlarm,
       "dm3ConfigConvCurrLimitAlarm": dm3ConfigConvCurrLimitAlarm,
       "dm3ConfigConvStandbyAlarm": dm3ConfigConvStandbyAlarm,
       "dm3ConfigConvFanFailAlarm": dm3ConfigConvFanFailAlarm,
       "dm3ConfigConvFailAlarm": dm3ConfigConvFailAlarm,
       "dm3ConfigConvHwVoltAlarm": dm3ConfigConvHwVoltAlarm,
       "dm3ConfigRelays": dm3ConfigRelays,
       "dm3ConfigOutputRelays": dm3ConfigOutputRelays,
       "dm3ConfigOutRlyTableSize": dm3ConfigOutRlyTableSize,
       "dm3ConfigOutRlyTable": dm3ConfigOutRlyTable,
       "dm3ConfigOutRlyEntry": dm3ConfigOutRlyEntry,
       "dm3ConfigOutRlyIndex": dm3ConfigOutRlyIndex,
       "dm3ConfigOutRlyName": dm3ConfigOutRlyName,
       "dm3ConfigOutRlyDelay": dm3ConfigOutRlyDelay,
       "dm3ConfigOutRlyAlarm": dm3ConfigOutRlyAlarm,
       "dm3ConfigInputRelays": dm3ConfigInputRelays,
       "dm3ConfigInRlyTableSize": dm3ConfigInRlyTableSize,
       "dm3ConfigInRlyTable": dm3ConfigInRlyTable,
       "dm3ConfigInRlyEntry": dm3ConfigInRlyEntry,
       "dm3ConfigInRlyIndex": dm3ConfigInRlyIndex,
       "dm3ConfigInRlyName": dm3ConfigInRlyName,
       "dm3ConfigInRlyDelay": dm3ConfigInRlyDelay,
       "dm3ConfigInRlyAlarm": dm3ConfigInRlyAlarm,
       "dm3ConfigDistribution": dm3ConfigDistribution,
       "dm3ConfigBreakers": dm3ConfigBreakers,
       "dm3ConfigBreakersTableSize": dm3ConfigBreakersTableSize,
       "dm3ConfigBreakersTable": dm3ConfigBreakersTable,
       "dm3ConfigBreakersEntry": dm3ConfigBreakersEntry,
       "dm3ConfigBreakersIndex": dm3ConfigBreakersIndex,
       "dm3ConfigBreakersName": dm3ConfigBreakersName,
       "dm3ConfigBreakersAlarm": dm3ConfigBreakersAlarm,
       "dm3ConfigFuses": dm3ConfigFuses,
       "dm3ConfigFusesTableSize": dm3ConfigFusesTableSize,
       "dm3ConfigFusesTable": dm3ConfigFusesTable,
       "dm3ConfigFusesEntry": dm3ConfigFusesEntry,
       "dm3ConfigFusesIndex": dm3ConfigFusesIndex,
       "dm3ConfigFusesName": dm3ConfigFusesName,
       "dm3ConfigFusesAlarm": dm3ConfigFusesAlarm,
       "dm3Status": dm3Status,
       "dm3StatusSystem": dm3StatusSystem,
       "dm3StatusSystemTemp": dm3StatusSystemTemp,
       "dm3StatusSystemStart": dm3StatusSystemStart,
       "dm3StatusSysRemoteAccess": dm3StatusSysRemoteAccess,
       "dm3StatusSysSecurityLevel": dm3StatusSysSecurityLevel,
       "dm3StatusSysTempSanity": dm3StatusSysTempSanity,
       "dm3StatusSysAlarmState": dm3StatusSysAlarmState,
       "dm3StatusSysTempUnits": dm3StatusSysTempUnits,
       "dm3StatusAlarms": dm3StatusAlarms,
       "dm3StatusAlarmsTableSize": dm3StatusAlarmsTableSize,
       "dm3StatusAlarmsTable": dm3StatusAlarmsTable,
       "dm3StatusAlarmsEntry": dm3StatusAlarmsEntry,
       "dm3StatusAlarmsIndex": dm3StatusAlarmsIndex,
       "dm3StatusAlarmsText": dm3StatusAlarmsText,
       "dm3StatusBattery": dm3StatusBattery,
       "dm3StatusBattCurrent": dm3StatusBattCurrent,
       "dm3StatusBattTemp": dm3StatusBattTemp,
       "dm3StatusBattCurrentSanity": dm3StatusBattCurrentSanity,
       "dm3StatusBattTempSanity": dm3StatusBattTempSanity,
       "dm3StatusOEM": dm3StatusOEM,
       "dm3StatusOEMrectOffset": dm3StatusOEMrectOffset,
       "dm3StatusOEMrectGain": dm3StatusOEMrectGain,
       "dm3StatusOEMconvOffset": dm3StatusOEMconvOffset,
       "dm3StatusOEMconvGain": dm3StatusOEMconvGain,
       "dm3StatusOEMshuntOffset": dm3StatusOEMshuntOffset,
       "dm3StatusOEMshuntGain": dm3StatusOEMshuntGain,
       "dm3StatusLVD": dm3StatusLVD,
       "dm3StatusLVDTableSize": dm3StatusLVDTableSize,
       "dm3StatusLVDTable": dm3StatusLVDTable,
       "dm3StatusLVDEntry": dm3StatusLVDEntry,
       "dm3StatusLVDIndex": dm3StatusLVDIndex,
       "dm3StatusLVDName": dm3StatusLVDName,
       "dm3StatusLVDState": dm3StatusLVDState,
       "dm3StatusLVDHwFault": dm3StatusLVDHwFault,
       "dm3StatusPowerModules": dm3StatusPowerModules,
       "dm3StatusRectifier": dm3StatusRectifier,
       "dm3StatusRectTableSize": dm3StatusRectTableSize,
       "dm3StatusRectTable": dm3StatusRectTable,
       "dm3StatusRectEntry": dm3StatusRectEntry,
       "dm3StatusRectIndex": dm3StatusRectIndex,
       "dm3StatusRectID": dm3StatusRectID,
       "dm3StatusRectDesc": dm3StatusRectDesc,
       "dm3StatusRectCurrent": dm3StatusRectCurrent,
       "dm3StatusRectCurrentLimit": dm3StatusRectCurrentLimit,
       "dm3StatusRectStandby": dm3StatusRectStandby,
       "dm3StatusRectFanFail": dm3StatusRectFanFail,
       "dm3StatusRectFail": dm3StatusRectFail,
       "dm3StatusRectDevType": dm3StatusRectDevType,
       "dm3StatusRectPhyAddr": dm3StatusRectPhyAddr,
       "dm3StatusRectCfg": dm3StatusRectCfg,
       "dm3StatusRectPcbRev": dm3StatusRectPcbRev,
       "dm3StatusRectFwVer": dm3StatusRectFwVer,
       "dm3StatusRectPresent": dm3StatusRectPresent,
       "dm3StatusRectDiagPass": dm3StatusRectDiagPass,
       "dm3StatusRectState": dm3StatusRectState,
       "dm3StatusSysRectVoltSanity": dm3StatusSysRectVoltSanity,
       "dm3StatusSysRectAvailable": dm3StatusSysRectAvailable,
       "dm3StatusSysRectType": dm3StatusSysRectType,
       "dm3StatusSysRectVoltage": dm3StatusSysRectVoltage,
       "dm3StatusSysRectCurrent": dm3StatusSysRectCurrent,
       "dm3StatusConverter": dm3StatusConverter,
       "dm3StatusConvTableSize": dm3StatusConvTableSize,
       "dm3StatusConvTable": dm3StatusConvTable,
       "dm3StatusConvEntry": dm3StatusConvEntry,
       "dm3StatusConvIndex": dm3StatusConvIndex,
       "dm3StatusConvID": dm3StatusConvID,
       "dm3StatusConvDesc": dm3StatusConvDesc,
       "dm3StatusConvCurrent": dm3StatusConvCurrent,
       "dm3StatusConvCurrentLimit": dm3StatusConvCurrentLimit,
       "dm3StatusConvStandby": dm3StatusConvStandby,
       "dm3StatusConvFanFail": dm3StatusConvFanFail,
       "dm3StatusConvFail": dm3StatusConvFail,
       "dm3StatusConvDevType": dm3StatusConvDevType,
       "dm3StatusConvPhyAddr": dm3StatusConvPhyAddr,
       "dm3StatusConvCfg": dm3StatusConvCfg,
       "dm3StatusConvPcbRev": dm3StatusConvPcbRev,
       "dm3StatusConvFwVer": dm3StatusConvFwVer,
       "dm3StatusConvPresent": dm3StatusConvPresent,
       "dm3StatusConvDiagPass": dm3StatusConvDiagPass,
       "dm3StatusConvState": dm3StatusConvState,
       "dm3StatusSysConvVoltSanity": dm3StatusSysConvVoltSanity,
       "dm3StatusSysConvAvailable": dm3StatusSysConvAvailable,
       "dm3StatusSysConvType": dm3StatusSysConvType,
       "dm3StatusSysConvVoltage": dm3StatusSysConvVoltage,
       "dm3StatusSysConvCurrent": dm3StatusSysConvCurrent,
       "dm3StatusRelays": dm3StatusRelays,
       "dm3StatusOutputRelays": dm3StatusOutputRelays,
       "dm3StatusOutRlyTableSize": dm3StatusOutRlyTableSize,
       "dm3StatusOutRlyTable": dm3StatusOutRlyTable,
       "dm3StatusOutRlyEntry": dm3StatusOutRlyEntry,
       "dm3StatusOutRlyIndex": dm3StatusOutRlyIndex,
       "dm3StatusOutRlyName": dm3StatusOutRlyName,
       "dm3StatusOutRlyStatus": dm3StatusOutRlyStatus,
       "dm3StatusInputRelays": dm3StatusInputRelays,
       "dm3StatusInRlyTableSize": dm3StatusInRlyTableSize,
       "dm3StatusInRlyTable": dm3StatusInRlyTable,
       "dm3StatusInRlyEntry": dm3StatusInRlyEntry,
       "dm3StatusInRlyIndex": dm3StatusInRlyIndex,
       "dm3StatusInRlyName": dm3StatusInRlyName,
       "dm3StatusInRlyStatus": dm3StatusInRlyStatus,
       "dm3StatusDistribution": dm3StatusDistribution,
       "dm3StatusBreakers": dm3StatusBreakers,
       "dm3StatusBreakersTableSize": dm3StatusBreakersTableSize,
       "dm3StatusBreakersTable": dm3StatusBreakersTable,
       "dm3StatusBreakersEntry": dm3StatusBreakersEntry,
       "dm3StatusBreakersIndex": dm3StatusBreakersIndex,
       "dm3StatusBreakersName": dm3StatusBreakersName,
       "dm3StatusBreakersStatus": dm3StatusBreakersStatus,
       "dm3StatusFuses": dm3StatusFuses,
       "dm3StatusFusesTableSize": dm3StatusFusesTableSize,
       "dm3StatusFusesTable": dm3StatusFusesTable,
       "dm3StatusFusesEntry": dm3StatusFusesEntry,
       "dm3StatusFusesIndex": dm3StatusFusesIndex,
       "dm3StatusFusesName": dm3StatusFusesName,
       "dm3StatusFusesStatus": dm3StatusFusesStatus,
       "automaticTransferSwitch": automaticTransferSwitch,
       "atsIdent": atsIdent,
       "atsIdentHardwareRev": atsIdentHardwareRev,
       "atsIdentFirmwareRev": atsIdentFirmwareRev,
       "atsIdentFirmwareDate": atsIdentFirmwareDate,
       "atsIdentDateOfManufacture": atsIdentDateOfManufacture,
       "atsIdentModelNumber": atsIdentModelNumber,
       "atsIdentSerialNumber": atsIdentSerialNumber,
       "atsIdentNominalLineVoltage": atsIdentNominalLineVoltage,
       "atsIdentNominalLineFrequency": atsIdentNominalLineFrequency,
       "atsIdentDeviceRating": atsIdentDeviceRating,
       "atsCalibration": atsCalibration,
       "atsCalibrationInput": atsCalibrationInput,
       "atsCalibrationNumInputs": atsCalibrationNumInputs,
       "atsCalibrationNumInputPhases": atsCalibrationNumInputPhases,
       "atsCalibrationInputPhaseTable": atsCalibrationInputPhaseTable,
       "atsCalibrationInputPhaseEntry": atsCalibrationInputPhaseEntry,
       "atsCalibrationInputTableIndex": atsCalibrationInputTableIndex,
       "atsCalibrationInputPhaseTableIndex": atsCalibrationInputPhaseTableIndex,
       "atsLineVoltageCalibrationFactor": atsLineVoltageCalibrationFactor,
       "atsCalibrationPowerSupply": atsCalibrationPowerSupply,
       "atsCalibrationPowerSupplyVoltages": atsCalibrationPowerSupplyVoltages,
       "atsCalibrationPowerSupplyVoltageTable": atsCalibrationPowerSupplyVoltageTable,
       "atsCalibrationPowerSupplyVoltageEntry": atsCalibrationPowerSupplyVoltageEntry,
       "atsCalibrationPowerSupplyVoltageTableIndex": atsCalibrationPowerSupplyVoltageTableIndex,
       "atsCalibrationPowerSupplyVoltage": atsCalibrationPowerSupplyVoltage,
       "atsPowerSupplyVoltageCalibrationFactor": atsPowerSupplyVoltageCalibrationFactor,
       "atsCalibrationOutput": atsCalibrationOutput,
       "atsCalibrationNumOutputs": atsCalibrationNumOutputs,
       "atsCalibrationNumOutputPhases": atsCalibrationNumOutputPhases,
       "atsCalibrationOutputTable": atsCalibrationOutputTable,
       "atsCalibrationOutputEntry": atsCalibrationOutputEntry,
       "atsCalibrationOutputTableIndex": atsCalibrationOutputTableIndex,
       "atsCalibrationOutputPhasesTableIndex": atsCalibrationOutputPhasesTableIndex,
       "atsOutputCurrentCalibrationFactor": atsOutputCurrentCalibrationFactor,
       "atsControl": atsControl,
       "atsControlResetATS": atsControlResetATS,
       "atsControlClearAllAlarms": atsControlClearAllAlarms,
       "atsConfig": atsConfig,
       "atsConfigProductName": atsConfigProductName,
       "atsConfigPreferredSource": atsConfigPreferredSource,
       "atsConfigFrontPanelLockout": atsConfigFrontPanelLockout,
       "atsConfigVoltageSensitivity": atsConfigVoltageSensitivity,
       "atsConfigTransferVoltageRange": atsConfigTransferVoltageRange,
       "atsConfigCurrentLimit": atsConfigCurrentLimit,
       "atsConfigResetValues": atsConfigResetValues,
       "atsConfigLineVRMS": atsConfigLineVRMS,
       "atsConfigLineVRMSNarrowLimit": atsConfigLineVRMSNarrowLimit,
       "atsConfigLineVRMSMediumLimit": atsConfigLineVRMSMediumLimit,
       "atsConfigLineVRMSWideLimit": atsConfigLineVRMSWideLimit,
       "atsConfigFrequencyDeviation": atsConfigFrequencyDeviation,
       "atsConfigBankTableSize": atsConfigBankTableSize,
       "atsConfigBankTable": atsConfigBankTable,
       "atsConfigBankEntry": atsConfigBankEntry,
       "atsConfigBankTableIndex": atsConfigBankTableIndex,
       "atsConfigBank": atsConfigBank,
       "atsConfigBankLowLoadThreshold": atsConfigBankLowLoadThreshold,
       "atsConfigBankNearOverLoadThreshold": atsConfigBankNearOverLoadThreshold,
       "atsConfigBankOverLoadThreshold": atsConfigBankOverLoadThreshold,
       "atsConfigPhaseTableSize": atsConfigPhaseTableSize,
       "atsConfigPhaseTable": atsConfigPhaseTable,
       "atsConfigPhaseEntry": atsConfigPhaseEntry,
       "atsConfigPhaseTableIndex": atsConfigPhaseTableIndex,
       "atsConfigPhase": atsConfigPhase,
       "atsConfigPhaseLowLoadThreshold": atsConfigPhaseLowLoadThreshold,
       "atsConfigPhaseNearOverLoadThreshold": atsConfigPhaseNearOverLoadThreshold,
       "atsConfigPhaseOverLoadThreshold": atsConfigPhaseOverLoadThreshold,
       "atsStatus": atsStatus,
       "atsStatusDeviceStatus": atsStatusDeviceStatus,
       "atsStatusCommStatus": atsStatusCommStatus,
       "atsStatusSelectedSource": atsStatusSelectedSource,
       "atsStatusRedundancyState": atsStatusRedundancyState,
       "atsStatusOverCurrentState": atsStatusOverCurrentState,
       "atsStatus5VPowerSupply": atsStatus5VPowerSupply,
       "atsStatus24VPowerSupply": atsStatus24VPowerSupply,
       "atsStatus24VSourceBPowerSupply": atsStatus24VSourceBPowerSupply,
       "atsStatusPlus12VPowerSupply": atsStatusPlus12VPowerSupply,
       "atsStatusMinus12VPowerSupply": atsStatusMinus12VPowerSupply,
       "atsStatusSwitchStatus": atsStatusSwitchStatus,
       "atsStatusFrontPanel": atsStatusFrontPanel,
       "atsStatusSourceAStatus": atsStatusSourceAStatus,
       "atsStatusSourceBStatus": atsStatusSourceBStatus,
       "atsStatusPhaseSyncStatus": atsStatusPhaseSyncStatus,
       "atsStatusVoltageOutStatus": atsStatusVoltageOutStatus,
       "atsStatusHardwareStatus": atsStatusHardwareStatus,
       "atsStatusResetValues": atsStatusResetValues,
       "atsStatusResetMaxMinValues": atsStatusResetMaxMinValues,
       "atsStatusInput": atsStatusInput,
       "atsNumInputs": atsNumInputs,
       "atsInputTable": atsInputTable,
       "atsInputEntry": atsInputEntry,
       "atsInputTableIndex": atsInputTableIndex,
       "atsNumInputPhases": atsNumInputPhases,
       "atsInputVoltageOrientation": atsInputVoltageOrientation,
       "atsInputFrequency": atsInputFrequency,
       "atsInputType": atsInputType,
       "atsInputName": atsInputName,
       "atsInputPhaseTable": atsInputPhaseTable,
       "atsInputPhaseEntry": atsInputPhaseEntry,
       "atsInputPhaseTableIndex": atsInputPhaseTableIndex,
       "atsInputPhaseIndex": atsInputPhaseIndex,
       "atsInputVoltage": atsInputVoltage,
       "atsInputMaxVoltage": atsInputMaxVoltage,
       "atsInputMinVoltage": atsInputMinVoltage,
       "atsInputCurrent": atsInputCurrent,
       "atsInputMaxCurrent": atsInputMaxCurrent,
       "atsInputMinCurrent": atsInputMinCurrent,
       "atsInputPower": atsInputPower,
       "atsInputMaxPower": atsInputMaxPower,
       "atsInputMinPower": atsInputMinPower,
       "atsStatusOutput": atsStatusOutput,
       "atsNumOutputs": atsNumOutputs,
       "atsOutputTable": atsOutputTable,
       "atsOutputEntry": atsOutputEntry,
       "atsOutputTableIndex": atsOutputTableIndex,
       "atsNumOutputPhases": atsNumOutputPhases,
       "atsOutputVoltageOrientation": atsOutputVoltageOrientation,
       "atsOutputFrequency": atsOutputFrequency,
       "atsOutputPhaseTable": atsOutputPhaseTable,
       "atsOutputPhaseEntry": atsOutputPhaseEntry,
       "atsOutputPhaseTableIndex": atsOutputPhaseTableIndex,
       "atsOutputPhaseIndex": atsOutputPhaseIndex,
       "atsOutputVoltage": atsOutputVoltage,
       "atsOutputCurrent": atsOutputCurrent,
       "atsOutputMaxCurrent": atsOutputMaxCurrent,
       "atsOutputMinCurrent": atsOutputMinCurrent,
       "atsOutputLoad": atsOutputLoad,
       "atsOutputMaxLoad": atsOutputMaxLoad,
       "atsOutputMinLoad": atsOutputMinLoad,
       "atsOutputPercentLoad": atsOutputPercentLoad,
       "atsOutputMaxPercentLoad": atsOutputMaxPercentLoad,
       "atsOutputMinPercentLoad": atsOutputMinPercentLoad,
       "atsOutputPower": atsOutputPower,
       "atsOutputMaxPower": atsOutputMaxPower,
       "atsOutputMinPower": atsOutputMinPower,
       "atsOutputPercentPower": atsOutputPercentPower,
       "atsOutputMaxPercentPower": atsOutputMaxPercentPower,
       "atsOutputMinPercentPower": atsOutputMinPercentPower,
       "atsOutputPhaseState": atsOutputPhaseState,
       "atsOutputBankTableSize": atsOutputBankTableSize,
       "atsOutputBankTable": atsOutputBankTable,
       "atsOutputBankEntry": atsOutputBankEntry,
       "atsOutputBankTableIndex": atsOutputBankTableIndex,
       "atsOutputPhase": atsOutputPhase,
       "atsOutputBank": atsOutputBank,
       "atsOutputBankCurrent": atsOutputBankCurrent,
       "atsOutputBankState": atsOutputBankState,
       "atsOutputBankOutputVoltage": atsOutputBankOutputVoltage,
       "atsOutputBankMaxCurrent": atsOutputBankMaxCurrent,
       "atsOutputBankMinCurrent": atsOutputBankMinCurrent,
       "atsOutputBankLoad": atsOutputBankLoad,
       "atsOutputBankMaxLoad": atsOutputBankMaxLoad,
       "atsOutputBankMinLoad": atsOutputBankMinLoad,
       "atsOutputBankPercentLoad": atsOutputBankPercentLoad,
       "atsOutputBankMaxPercentLoad": atsOutputBankMaxPercentLoad,
       "atsOutputBankMinPercentLoad": atsOutputBankMinPercentLoad,
       "atsOutputBankPower": atsOutputBankPower,
       "atsOutputBankMaxPower": atsOutputBankMaxPower,
       "atsOutputBankMinPower": atsOutputBankMinPower,
       "atsOutputBankPercentPower": atsOutputBankPercentPower,
       "atsOutputBankMaxPercentPower": atsOutputBankMaxPercentPower,
       "atsOutputBankMinPercentPower": atsOutputBankMinPercentPower,
       "dc2": dc2,
       "dcmim2Ident": dcmim2Ident,
       "dcmim2IdentSystem": dcmim2IdentSystem,
       "dcmim2IdentSysFWVersion": dcmim2IdentSysFWVersion,
       "dcmim2Control": dcmim2Control,
       "dcmim2ControlSystem": dcmim2ControlSystem,
       "dcmim2ControlRunFunctBatteryTest": dcmim2ControlRunFunctBatteryTest,
       "dcmim2ControlRunCapacityBatteryTest": dcmim2ControlRunCapacityBatteryTest,
       "dcmim2Config": dcmim2Config,
       "dcmim2ConfigSystem": dcmim2ConfigSystem,
       "dcmim2ConfigSysHighTempTrip": dcmim2ConfigSysHighTempTrip,
       "dcmim2ConfigSysHighTempReset": dcmim2ConfigSysHighTempReset,
       "dcmim2ConfigSysLowTempTrip": dcmim2ConfigSysLowTempTrip,
       "dcmim2ConfigSysLowTempReset": dcmim2ConfigSysLowTempReset,
       "dcmim2ConfigBattery": dcmim2ConfigBattery,
       "dcmim2ConfigBattFloatVolt": dcmim2ConfigBattFloatVolt,
       "dcmim2ConfigBattMaxRecharge": dcmim2ConfigBattMaxRecharge,
       "dcmim2ConfigBattMfgCapacity": dcmim2ConfigBattMfgCapacity,
       "dcmim2ConfigBattType": dcmim2ConfigBattType,
       "dcmim2ConfigBattFunctTestDuration": dcmim2ConfigBattFunctTestDuration,
       "dcmim2ConfigBattFunctTestThresh": dcmim2ConfigBattFunctTestThresh,
       "dcmim2ConfigBattCapacityTestPercent": dcmim2ConfigBattCapacityTestPercent,
       "dcmim2ConfigBattCapacityTestEndThresh": dcmim2ConfigBattCapacityTestEndThresh,
       "dcmim2ConfigBattCapacityTestCurrent": dcmim2ConfigBattCapacityTestCurrent,
       "dcmim2ConfigLVD": dcmim2ConfigLVD,
       "dcmim2ConfigLVDTableSize": dcmim2ConfigLVDTableSize,
       "dcmim2ConfigLVDTable": dcmim2ConfigLVDTable,
       "dcmim2ConfigLVDEntry": dcmim2ConfigLVDEntry,
       "dcmim2ConfigLVDIndex": dcmim2ConfigLVDIndex,
       "dcmim2ConfigLVDTrip": dcmim2ConfigLVDTrip,
       "dcmim2ConfigLVDReset": dcmim2ConfigLVDReset,
       "dcmim2ConfigLVDState": dcmim2ConfigLVDState,
       "dcmim2Status": dcmim2Status,
       "dcmim2StatusSystem": dcmim2StatusSystem,
       "dcmim2StatusSysRectCurrent": dcmim2StatusSysRectCurrent,
       "dcmim2StatusSysLoadCurrent": dcmim2StatusSysLoadCurrent,
       "dcmim2StatusSysBusVoltage": dcmim2StatusSysBusVoltage,
       "dcmim2StatusSysAmbientTemp": dcmim2StatusSysAmbientTemp,
       "dcmim2StatusSysUpTime": dcmim2StatusSysUpTime,
       "dcmim2StatusSysTempUnits": dcmim2StatusSysTempUnits,
       "dcmim2StatusRectifier": dcmim2StatusRectifier,
       "dcmim2StatusRectTableSize": dcmim2StatusRectTableSize,
       "dcmim2StatusRectTable": dcmim2StatusRectTable,
       "dcmim2StatusRectEntry": dcmim2StatusRectEntry,
       "dcmim2StatusRectIndex": dcmim2StatusRectIndex,
       "dcmim2StatusRectDevType": dcmim2StatusRectDevType,
       "dcmim2StatusRectID": dcmim2StatusRectID,
       "dcmim2StatusRectPhyAddr": dcmim2StatusRectPhyAddr,
       "dcmim2StatusRectFail": dcmim2StatusRectFail,
       "dcmim2StatusRectCurrent": dcmim2StatusRectCurrent,
       "dcmim2StatusBattery": dcmim2StatusBattery,
       "dcmim2StatusBattFloatVolt": dcmim2StatusBattFloatVolt,
       "dcmim2StatusBattCurrent": dcmim2StatusBattCurrent,
       "dcmim2StatusBattTemp": dcmim2StatusBattTemp,
       "dcmim2StatusBattMfgCapacity": dcmim2StatusBattMfgCapacity,
       "dcmim2StatusBattTestCapacity": dcmim2StatusBattTestCapacity,
       "dcmim2StatusBattFunctTestResult": dcmim2StatusBattFunctTestResult,
       "dcmim2StatusBattCapacityTestResult": dcmim2StatusBattCapacityTestResult,
       "dcmim2StatusLVD": dcmim2StatusLVD,
       "dcmim2StatusLVDTableSize": dcmim2StatusLVDTableSize,
       "dcmim2StatusLVDTable": dcmim2StatusLVDTable,
       "dcmim2StatusLVDEntry": dcmim2StatusLVDEntry,
       "dcmim2StatusLVDIndex": dcmim2StatusLVDIndex,
       "dcmim2StatusLVDState": dcmim2StatusLVDState,
       "dcmim2StatusAlarms": dcmim2StatusAlarms,
       "dcmim2StatusAlarmsTableSize": dcmim2StatusAlarmsTableSize,
       "dcmim2StatusAlarmsTable": dcmim2StatusAlarmsTable,
       "dcmim2StatusAlarmsEntry": dcmim2StatusAlarmsEntry,
       "dcmim2StatusAlarmsIndex": dcmim2StatusAlarmsIndex,
       "dcmim2StatusAlarmsText": dcmim2StatusAlarmsText,
       "environmentalMonitor": environmentalMonitor,
       "external": external,
       "emIdent": emIdent,
       "emIdentFirmwareRevision": emIdentFirmwareRevision,
       "emConfig": emConfig,
       "emConfigProbesNumProbes": emConfigProbesNumProbes,
       "emConfigProbesTable": emConfigProbesTable,
       "emConfigProbesEntry": emConfigProbesEntry,
       "emConfigProbeNumber": emConfigProbeNumber,
       "emConfigProbeName": emConfigProbeName,
       "emConfigProbeHighTempThreshold": emConfigProbeHighTempThreshold,
       "emConfigProbeLowTempThreshold": emConfigProbeLowTempThreshold,
       "emConfigProbeTempUnits": emConfigProbeTempUnits,
       "emConfigProbeHighHumidThreshold": emConfigProbeHighHumidThreshold,
       "emConfigProbeLowHumidThreshold": emConfigProbeLowHumidThreshold,
       "emConfigProbeHighTempEnable": emConfigProbeHighTempEnable,
       "emConfigProbeLowTempEnable": emConfigProbeLowTempEnable,
       "emConfigProbeHighHumidEnable": emConfigProbeHighHumidEnable,
       "emConfigProbeLowHumidEnable": emConfigProbeLowHumidEnable,
       "emConfigProbeMaxTempThreshold": emConfigProbeMaxTempThreshold,
       "emConfigProbeMinTempThreshold": emConfigProbeMinTempThreshold,
       "emConfigProbeMaxHumidThreshold": emConfigProbeMaxHumidThreshold,
       "emConfigProbeMinHumidThreshold": emConfigProbeMinHumidThreshold,
       "emConfigProbeMaxTempEnable": emConfigProbeMaxTempEnable,
       "emConfigProbeMinTempEnable": emConfigProbeMinTempEnable,
       "emConfigProbeMaxHumidEnable": emConfigProbeMaxHumidEnable,
       "emConfigProbeMinHumidEnable": emConfigProbeMinHumidEnable,
       "emConfigProbeTempHysteresis": emConfigProbeTempHysteresis,
       "emConfigProbeHumidHysteresis": emConfigProbeHumidHysteresis,
       "emConfigProbeLocation": emConfigProbeLocation,
       "emConfigContactsNumContacts": emConfigContactsNumContacts,
       "emConfigContactsTable": emConfigContactsTable,
       "emConfigContactsEntry": emConfigContactsEntry,
       "emConfigContactNumber": emConfigContactNumber,
       "emConfigContactName": emConfigContactName,
       "emConfigContactEnable": emConfigContactEnable,
       "emConfigContactSeverity": emConfigContactSeverity,
       "emConfigContactNormalState": emConfigContactNormalState,
       "emConfigContactLocation": emConfigContactLocation,
       "emStatus": emStatus,
       "emStatusCommStatus": emStatusCommStatus,
       "emStatusProbesNumProbes": emStatusProbesNumProbes,
       "emStatusProbesTable": emStatusProbesTable,
       "emStatusProbesEntry": emStatusProbesEntry,
       "emStatusProbeNumber": emStatusProbeNumber,
       "emStatusProbeName": emStatusProbeName,
       "emStatusProbeStatus": emStatusProbeStatus,
       "emStatusProbeCurrentTemp": emStatusProbeCurrentTemp,
       "emStatusProbeTempUnits": emStatusProbeTempUnits,
       "emStatusProbeCurrentHumid": emStatusProbeCurrentHumid,
       "emStatusProbeHighTempViolation": emStatusProbeHighTempViolation,
       "emStatusProbeLowTempViolation": emStatusProbeLowTempViolation,
       "emStatusProbeHighHumidViolation": emStatusProbeHighHumidViolation,
       "emStatusProbeLowHumidViolation": emStatusProbeLowHumidViolation,
       "emStatusProbeMaxTempViolation": emStatusProbeMaxTempViolation,
       "emStatusProbeMinTempViolation": emStatusProbeMinTempViolation,
       "emStatusProbeMaxHumidViolation": emStatusProbeMaxHumidViolation,
       "emStatusProbeMinHumidViolation": emStatusProbeMinHumidViolation,
       "emStatusContactsNumContacts": emStatusContactsNumContacts,
       "emStatusContactsTable": emStatusContactsTable,
       "emStatusContactsEntry": emStatusContactsEntry,
       "emStatusContactNumber": emStatusContactNumber,
       "emStatusContactName": emStatusContactName,
       "emStatusContactStatus": emStatusContactStatus,
       "integrated": integrated,
       "iemIdent": iemIdent,
       "iemIdentHardwareRevision": iemIdentHardwareRevision,
       "iemConfig": iemConfig,
       "iemConfigProbesNumProbes": iemConfigProbesNumProbes,
       "iemConfigProbesTable": iemConfigProbesTable,
       "iemConfigProbesEntry": iemConfigProbesEntry,
       "iemConfigProbeNumber": iemConfigProbeNumber,
       "iemConfigProbeName": iemConfigProbeName,
       "iemConfigProbeHighTempThreshold": iemConfigProbeHighTempThreshold,
       "iemConfigProbeLowTempThreshold": iemConfigProbeLowTempThreshold,
       "iemConfigProbeTempUnits": iemConfigProbeTempUnits,
       "iemConfigProbeHighHumidThreshold": iemConfigProbeHighHumidThreshold,
       "iemConfigProbeLowHumidThreshold": iemConfigProbeLowHumidThreshold,
       "iemConfigProbeHighTempEnable": iemConfigProbeHighTempEnable,
       "iemConfigProbeLowTempEnable": iemConfigProbeLowTempEnable,
       "iemConfigProbeHighHumidEnable": iemConfigProbeHighHumidEnable,
       "iemConfigProbeLowHumidEnable": iemConfigProbeLowHumidEnable,
       "iemConfigProbeMaxTempThreshold": iemConfigProbeMaxTempThreshold,
       "iemConfigProbeMinTempThreshold": iemConfigProbeMinTempThreshold,
       "iemConfigProbeMaxHumidThreshold": iemConfigProbeMaxHumidThreshold,
       "iemConfigProbeMinHumidThreshold": iemConfigProbeMinHumidThreshold,
       "iemConfigProbeMaxTempEnable": iemConfigProbeMaxTempEnable,
       "iemConfigProbeMinTempEnable": iemConfigProbeMinTempEnable,
       "iemConfigProbeMaxHumidEnable": iemConfigProbeMaxHumidEnable,
       "iemConfigProbeMinHumidEnable": iemConfigProbeMinHumidEnable,
       "iemConfigProbeTempHysteresis": iemConfigProbeTempHysteresis,
       "iemConfigProbeHumidHysteresis": iemConfigProbeHumidHysteresis,
       "iemConfigProbeLocation": iemConfigProbeLocation,
       "iemConfigContactsNumContacts": iemConfigContactsNumContacts,
       "iemConfigContactsTable": iemConfigContactsTable,
       "iemConfigContactsEntry": iemConfigContactsEntry,
       "iemConfigContactNumber": iemConfigContactNumber,
       "iemConfigContactName": iemConfigContactName,
       "iemConfigContactEnable": iemConfigContactEnable,
       "iemConfigContactSeverity": iemConfigContactSeverity,
       "iemConfigContactNormalState": iemConfigContactNormalState,
       "iemConfigContactLocation": iemConfigContactLocation,
       "iemConfigConfigRelaysNumRelays": iemConfigConfigRelaysNumRelays,
       "iemConfigRelaysTable": iemConfigRelaysTable,
       "iemConfigRelaysEntry": iemConfigRelaysEntry,
       "iemConfigRelayNumber": iemConfigRelayNumber,
       "iemConfigRelayName": iemConfigRelayName,
       "iemConfigRelayNormalState": iemConfigRelayNormalState,
       "iemConfigRelayFaultCondition": iemConfigRelayFaultCondition,
       "iemStatus": iemStatus,
       "iemStatusProbesNumProbes": iemStatusProbesNumProbes,
       "iemStatusProbesTable": iemStatusProbesTable,
       "iemStatusProbesEntry": iemStatusProbesEntry,
       "iemStatusProbeNumber": iemStatusProbeNumber,
       "iemStatusProbeName": iemStatusProbeName,
       "iemStatusProbeStatus": iemStatusProbeStatus,
       "iemStatusProbeCurrentTemp": iemStatusProbeCurrentTemp,
       "iemStatusProbeTempUnits": iemStatusProbeTempUnits,
       "iemStatusProbeCurrentHumid": iemStatusProbeCurrentHumid,
       "iemStatusProbeHighTempViolation": iemStatusProbeHighTempViolation,
       "iemStatusProbeLowTempViolation": iemStatusProbeLowTempViolation,
       "iemStatusProbeHighHumidViolation": iemStatusProbeHighHumidViolation,
       "iemStatusProbeLowHumidViolation": iemStatusProbeLowHumidViolation,
       "iemStatusProbeMaxTempViolation": iemStatusProbeMaxTempViolation,
       "iemStatusProbeMinTempViolation": iemStatusProbeMinTempViolation,
       "iemStatusProbeMaxHumidViolation": iemStatusProbeMaxHumidViolation,
       "iemStatusProbeMinHumidViolation": iemStatusProbeMinHumidViolation,
       "iemStatusProbeLocation": iemStatusProbeLocation,
       "iemStatusContactsNumContacts": iemStatusContactsNumContacts,
       "iemStatusContactsTable": iemStatusContactsTable,
       "iemStatusContactsEntry": iemStatusContactsEntry,
       "iemStatusContactNumber": iemStatusContactNumber,
       "iemStatusContactName": iemStatusContactName,
       "iemStatusContactStatus": iemStatusContactStatus,
       "iemStatusRelaysNumRelays": iemStatusRelaysNumRelays,
       "iemStatusRelaysTable": iemStatusRelaysTable,
       "iemStatusRelaysEntry": iemStatusRelaysEntry,
       "iemStatusRelayNumber": iemStatusRelayNumber,
       "iemStatusRelayName": iemStatusRelayName,
       "iemStatusRelayStatus": iemStatusRelayStatus,
       "envMgtSystem": envMgtSystem,
       "emsIdent": emsIdent,
       "emsIdentEMSName": emsIdentEMSName,
       "emsIdentProductNumber": emsIdentProductNumber,
       "emsIdentFirmwareRev": emsIdentFirmwareRev,
       "emsIdentHardwareRev": emsIdentHardwareRev,
       "emsIdentDateOfManufacture": emsIdentDateOfManufacture,
       "emsIdentSerialNumber": emsIdentSerialNumber,
       "emsOutputRelayControl": emsOutputRelayControl,
       "emsOutputRelayControlTable": emsOutputRelayControlTable,
       "emsOutputRelayControlEntry": emsOutputRelayControlEntry,
       "emsOutputRelayControlOutputRelayIndex": emsOutputRelayControlOutputRelayIndex,
       "emsOutputRelayControlOutputRelayName": emsOutputRelayControlOutputRelayName,
       "emsOutputRelayControlOutputRelayCommand": emsOutputRelayControlOutputRelayCommand,
       "emsOutletControl": emsOutletControl,
       "emsOutletControlTable": emsOutletControlTable,
       "emsOutletControlEntry": emsOutletControlEntry,
       "emsOutletControlOutletIndex": emsOutletControlOutletIndex,
       "emsOutletControlOutletName": emsOutletControlOutletName,
       "emsOutletControlOutletCommand": emsOutletControlOutletCommand,
       "emsSensorControl": emsSensorControl,
       "emsSensorControlTable": emsSensorControlTable,
       "emsSensorControlEntry": emsSensorControlEntry,
       "emsSensorControlSensorIndex": emsSensorControlSensorIndex,
       "emsSensorControlSensorSystemName": emsSensorControlSensorSystemName,
       "emsSensorControlSensorUserName": emsSensorControlSensorUserName,
       "emsSensorControlSensorCommand": emsSensorControlSensorCommand,
       "emsAlarmDeviceControl": emsAlarmDeviceControl,
       "emsAlarmDeviceControlTable": emsAlarmDeviceControlTable,
       "emsAlarmDeviceControlEntry": emsAlarmDeviceControlEntry,
       "emsAlarmDeviceControlDeviceIndex": emsAlarmDeviceControlDeviceIndex,
       "emsAlarmDeviceControlDeviceName": emsAlarmDeviceControlDeviceName,
       "emsAlarmDeviceControlDeviceCommand": emsAlarmDeviceControlDeviceCommand,
       "emsConfig": emsConfig,
       "emsConfigName": emsConfigName,
       "emsConfigCheckLogLight": emsConfigCheckLogLight,
       "emsProbeConfig": emsProbeConfig,
       "emsProbeConfigTable": emsProbeConfigTable,
       "emsProbeConfigEntry": emsProbeConfigEntry,
       "emsProbeConfigProbeIndex": emsProbeConfigProbeIndex,
       "emsProbeConfigProbeName": emsProbeConfigProbeName,
       "emsProbeConfigProbeHighTempThresh": emsProbeConfigProbeHighTempThresh,
       "emsProbeConfigProbeLowTempThresh": emsProbeConfigProbeLowTempThresh,
       "emsProbeConfigProbeHighHumidityThresh": emsProbeConfigProbeHighHumidityThresh,
       "emsProbeConfigProbeLowHumidityThresh": emsProbeConfigProbeLowHumidityThresh,
       "emsProbeConfigProbeMaxTempThresh": emsProbeConfigProbeMaxTempThresh,
       "emsProbeConfigProbeMinTempThresh": emsProbeConfigProbeMinTempThresh,
       "emsProbeConfigProbeDeltaTemp": emsProbeConfigProbeDeltaTemp,
       "emsProbeConfigProbeMaxHumidityThresh": emsProbeConfigProbeMaxHumidityThresh,
       "emsProbeConfigProbeMinHumidityThresh": emsProbeConfigProbeMinHumidityThresh,
       "emsProbeConfigProbeDeltaHumidity": emsProbeConfigProbeDeltaHumidity,
       "emsProbeConfigProbeSTIncTempVariance": emsProbeConfigProbeSTIncTempVariance,
       "emsProbeConfigProbeSTIncTempTime": emsProbeConfigProbeSTIncTempTime,
       "emsProbeConfigProbeSTDecTempVariance": emsProbeConfigProbeSTDecTempVariance,
       "emsProbeConfigProbeSTDecTempTime": emsProbeConfigProbeSTDecTempTime,
       "emsProbeConfigProbeLTIncTempVariance": emsProbeConfigProbeLTIncTempVariance,
       "emsProbeConfigProbeLTIncTempTime": emsProbeConfigProbeLTIncTempTime,
       "emsProbeConfigProbeLTDecTempVariance": emsProbeConfigProbeLTDecTempVariance,
       "emsProbeConfigProbeLTDecTempTime": emsProbeConfigProbeLTDecTempTime,
       "emsInputContactConfig": emsInputContactConfig,
       "emsInputContactConfigTable": emsInputContactConfigTable,
       "emsInputContactConfigEntry": emsInputContactConfigEntry,
       "emsInputContactConfigInputContactIndex": emsInputContactConfigInputContactIndex,
       "emsInputContactConfigInputContactName": emsInputContactConfigInputContactName,
       "emsInputContactConfigInputContactNormalState": emsInputContactConfigInputContactNormalState,
       "emsOutputRelayConfig": emsOutputRelayConfig,
       "emsOutputRelayConfigTable": emsOutputRelayConfigTable,
       "emsOutputRelayConfigEntry": emsOutputRelayConfigEntry,
       "emsOutputRelayConfigOutputRelayIndex": emsOutputRelayConfigOutputRelayIndex,
       "emsOutputRelayConfigOutputRelayName": emsOutputRelayConfigOutputRelayName,
       "emsOutputRelayConfigOutputRelayNormalState": emsOutputRelayConfigOutputRelayNormalState,
       "emsOutletConfig": emsOutletConfig,
       "emsOutletConfigTable": emsOutletConfigTable,
       "emsOutletConfigEntry": emsOutletConfigEntry,
       "emsOutletConfigOutletIndex": emsOutletConfigOutletIndex,
       "emsOutletConfigOutletName": emsOutletConfigOutletName,
       "emsOutletConfigOutletNormalState": emsOutletConfigOutletNormalState,
       "emsSensorConfig": emsSensorConfig,
       "emsSensorConfigTable": emsSensorConfigTable,
       "emsSensorConfigEntry": emsSensorConfigEntry,
       "emsSensorConfigSensorIndex": emsSensorConfigSensorIndex,
       "emsSensorConfigSensorSystemName": emsSensorConfigSensorSystemName,
       "emsSensorConfigSensorUserName": emsSensorConfigSensorUserName,
       "emsSensorConfigSensorNormalState": emsSensorConfigSensorNormalState,
       "emsSensorConfigSensorAlarmDelay": emsSensorConfigSensorAlarmDelay,
       "emsStatus": emsStatus,
       "emsStatusEMSName": emsStatusEMSName,
       "emsStatusCommStatus": emsStatusCommStatus,
       "emsStatusProbeCount": emsStatusProbeCount,
       "emsStatusInputContactCount": emsStatusInputContactCount,
       "emsStatusOutputRelayCount": emsStatusOutputRelayCount,
       "emsStatusOutletCount": emsStatusOutletCount,
       "emsStatusSensorCount": emsStatusSensorCount,
       "emsStatusAlinkAruDeviceCount": emsStatusAlinkAruDeviceCount,
       "emsStatusAlinkProbeDeviceCount": emsStatusAlinkProbeDeviceCount,
       "emsStatusAlarmDeviceCount": emsStatusAlarmDeviceCount,
       "emsStatusSysTempUnits": emsStatusSysTempUnits,
       "emsStatusCheckLogLight": emsStatusCheckLogLight,
       "emsStatusHardwareStatus": emsStatusHardwareStatus,
       "emsProbeStatus": emsProbeStatus,
       "emsProbeStatusTable": emsProbeStatusTable,
       "emsProbeStatusEntry": emsProbeStatusEntry,
       "emsProbeStatusProbeIndex": emsProbeStatusProbeIndex,
       "emsProbeStatusProbeName": emsProbeStatusProbeName,
       "emsProbeStatusProbeTemperature": emsProbeStatusProbeTemperature,
       "emsProbeStatusProbeHighTempThresh": emsProbeStatusProbeHighTempThresh,
       "emsProbeStatusProbeLowTempThresh": emsProbeStatusProbeLowTempThresh,
       "emsProbeStatusProbeHumidity": emsProbeStatusProbeHumidity,
       "emsProbeStatusProbeHighHumidityThresh": emsProbeStatusProbeHighHumidityThresh,
       "emsProbeStatusProbeLowHumidityThresh": emsProbeStatusProbeLowHumidityThresh,
       "emsProbeStatusProbeSerialNumber": emsProbeStatusProbeSerialNumber,
       "emsProbeStatusProbeCommStatus": emsProbeStatusProbeCommStatus,
       "emsProbeStatusProbeAlarmStatus": emsProbeStatusProbeAlarmStatus,
       "emsProbeStatusProbeMaxTempThresh": emsProbeStatusProbeMaxTempThresh,
       "emsProbeStatusProbeMinTempThresh": emsProbeStatusProbeMinTempThresh,
       "emsProbeStatusProbeMaxHumidityThresh": emsProbeStatusProbeMaxHumidityThresh,
       "emsProbeStatusProbeMinHumidityThresh": emsProbeStatusProbeMinHumidityThresh,
       "emsInputContactStatus": emsInputContactStatus,
       "emsInputContactStatusTable": emsInputContactStatusTable,
       "emsInputContactStatusEntry": emsInputContactStatusEntry,
       "emsInputContactStatusInputContactIndex": emsInputContactStatusInputContactIndex,
       "emsInputContactStatusInputContactName": emsInputContactStatusInputContactName,
       "emsInputContactStatusInputContactState": emsInputContactStatusInputContactState,
       "emsInputContactStatusInputContactNormalState": emsInputContactStatusInputContactNormalState,
       "emsOutputRelayStatus": emsOutputRelayStatus,
       "emsOutputRelayStatusTable": emsOutputRelayStatusTable,
       "emsOutputRelayStatusEntry": emsOutputRelayStatusEntry,
       "emsOutputRelayStatusOutputRelayIndex": emsOutputRelayStatusOutputRelayIndex,
       "emsOutputRelayStatusOutputRelayName": emsOutputRelayStatusOutputRelayName,
       "emsOutputRelayStatusOutputRelayState": emsOutputRelayStatusOutputRelayState,
       "emsOutputRelayStatusOutputRelayNormalState": emsOutputRelayStatusOutputRelayNormalState,
       "emsOutletStatus": emsOutletStatus,
       "emsOutletStatusTable": emsOutletStatusTable,
       "emsOutletStatusEntry": emsOutletStatusEntry,
       "emsOutletStatusOutletIndex": emsOutletStatusOutletIndex,
       "emsOutletStatusOutletName": emsOutletStatusOutletName,
       "emsOutletStatusOutletState": emsOutletStatusOutletState,
       "emsOutletStatusOutletNormalState": emsOutletStatusOutletNormalState,
       "emsAlarmDeviceStatus": emsAlarmDeviceStatus,
       "emsAlarmDeviceStatusTable": emsAlarmDeviceStatusTable,
       "emsAlarmDeviceStatusEntry": emsAlarmDeviceStatusEntry,
       "emsAlarmDeviceStatusDeviceIndex": emsAlarmDeviceStatusDeviceIndex,
       "emsAlarmDeviceStatusDeviceName": emsAlarmDeviceStatusDeviceName,
       "emsAlarmDeviceStatusDeviceState": emsAlarmDeviceStatusDeviceState,
       "emsSensorStatus": emsSensorStatus,
       "emsSensorStatusTable": emsSensorStatusTable,
       "emsSensorStatusEntry": emsSensorStatusEntry,
       "emsSensorStatusSensorIndex": emsSensorStatusSensorIndex,
       "emsSensorStatusSensorSystemName": emsSensorStatusSensorSystemName,
       "emsSensorStatusSensorName": emsSensorStatusSensorName,
       "emsSensorStatusSensorState": emsSensorStatusSensorState,
       "emsSensorStatusSensorNormalState": emsSensorStatusSensorNormalState,
       "emsSensorStatusSensorAlarmDelay": emsSensorStatusSensorAlarmDelay,
       "modEnvMgr": modEnvMgr,
       "memModules": memModules,
       "memModulesStatusTableSize": memModulesStatusTableSize,
       "memModulesStatusTable": memModulesStatusTable,
       "memModulesStatusEntry": memModulesStatusEntry,
       "memModulesStatusModuleNumber": memModulesStatusModuleNumber,
       "memModulesStatusModuleName": memModulesStatusModuleName,
       "memModulesStatusModuleLocation": memModulesStatusModuleLocation,
       "memModulesStatusModelNumber": memModulesStatusModelNumber,
       "memModulesStatusSerialNumber": memModulesStatusSerialNumber,
       "memModulesStatusFirmwareRev": memModulesStatusFirmwareRev,
       "memModulesStatusHardwareRev": memModulesStatusHardwareRev,
       "memModulesConfigTableSize": memModulesConfigTableSize,
       "memModulesConfigTable": memModulesConfigTable,
       "memModulesConfigEntry": memModulesConfigEntry,
       "memModulesConfigModuleNumber": memModulesConfigModuleNumber,
       "memModulesConfigModuleName": memModulesConfigModuleName,
       "memModulesConfigModuleLocation": memModulesConfigModuleLocation,
       "memSensors": memSensors,
       "memSensorsStatusSysTempUnits": memSensorsStatusSysTempUnits,
       "memSensorsStatusTableSize": memSensorsStatusTableSize,
       "memSensorsStatusTable": memSensorsStatusTable,
       "memSensorsStatusEntry": memSensorsStatusEntry,
       "memSensorsStatusModuleNumber": memSensorsStatusModuleNumber,
       "memSensorsStatusSensorNumber": memSensorsStatusSensorNumber,
       "memSensorsStatusSensorName": memSensorsStatusSensorName,
       "memSensorsStatusSensorLocation": memSensorsStatusSensorLocation,
       "memSensorsTemperature": memSensorsTemperature,
       "memSensorsHumidity": memSensorsHumidity,
       "memSensorsCommStatus": memSensorsCommStatus,
       "memSensorsAlarmStatus": memSensorsAlarmStatus,
       "memSensorsConfigTableSize": memSensorsConfigTableSize,
       "memSensorsConfigTable": memSensorsConfigTable,
       "memSensorsConfigEntry": memSensorsConfigEntry,
       "memSensorsConfigModuleNumber": memSensorsConfigModuleNumber,
       "memSensorsConfigSensorNumber": memSensorsConfigSensorNumber,
       "memSensorsName": memSensorsName,
       "memSensorsLocation": memSensorsLocation,
       "memSensorsAlarmGeneration": memSensorsAlarmGeneration,
       "memSensorsTempMaxThresh": memSensorsTempMaxThresh,
       "memSensorsTempHighThresh": memSensorsTempHighThresh,
       "memSensorsTempLowThresh": memSensorsTempLowThresh,
       "memSensorsTempMinThresh": memSensorsTempMinThresh,
       "memSensorsTempThreshHysteresis": memSensorsTempThreshHysteresis,
       "memSensorsTempShortDecRateThreshValue": memSensorsTempShortDecRateThreshValue,
       "memSensorsTempShortDecRateThreshTime": memSensorsTempShortDecRateThreshTime,
       "memSensorsTempShortIncRateThreshValue": memSensorsTempShortIncRateThreshValue,
       "memSensorsTempShortIncRateThreshTime": memSensorsTempShortIncRateThreshTime,
       "memSensorsTempLongDecRateThreshValue": memSensorsTempLongDecRateThreshValue,
       "memSensorsTempLongDecRateThreshTime": memSensorsTempLongDecRateThreshTime,
       "memSensorsTempLongIncRateThreshValue": memSensorsTempLongIncRateThreshValue,
       "memSensorsTempLongIncRateThreshTime": memSensorsTempLongIncRateThreshTime,
       "memSensorsHumidityMaxThresh": memSensorsHumidityMaxThresh,
       "memSensorsHumidityHighThresh": memSensorsHumidityHighThresh,
       "memSensorsHumidityLowThresh": memSensorsHumidityLowThresh,
       "memSensorsHumidityMinThresh": memSensorsHumidityMinThresh,
       "memSensorsHumidityThreshHysteresis": memSensorsHumidityThreshHysteresis,
       "memInputs": memInputs,
       "memInputsStatusTableSize": memInputsStatusTableSize,
       "memInputsStatusTable": memInputsStatusTable,
       "memInputsStatusEntry": memInputsStatusEntry,
       "memInputsStatusModuleNumber": memInputsStatusModuleNumber,
       "memInputsStatusInputNumber": memInputsStatusInputNumber,
       "memInputsStatusInputName": memInputsStatusInputName,
       "memInputsStatusInputLocation": memInputsStatusInputLocation,
       "memInputsStatusCurrentState": memInputsStatusCurrentState,
       "memInputsStatusCurrentAnalogValue": memInputsStatusCurrentAnalogValue,
       "memInputsStatusAlarmStatus": memInputsStatusAlarmStatus,
       "memInputsCommStatus": memInputsCommStatus,
       "memInputsConfigTableSize": memInputsConfigTableSize,
       "memInputsConfigTable": memInputsConfigTable,
       "memInputsConfigEntry": memInputsConfigEntry,
       "memInputsConfigModuleNumber": memInputsConfigModuleNumber,
       "memInputsConfigInputNumber": memInputsConfigInputNumber,
       "memInputName": memInputName,
       "memInputLocation": memInputLocation,
       "memInputType": memInputType,
       "memInputAlarmGeneration": memInputAlarmGeneration,
       "memInputNormalState": memInputNormalState,
       "memInputAbnormalSeverity": memInputAbnormalSeverity,
       "memInputNumberCalibrationPoints": memInputNumberCalibrationPoints,
       "memInputAnalogCalibrationPoint1": memInputAnalogCalibrationPoint1,
       "memInputAnalogCalibrationPoint2": memInputAnalogCalibrationPoint2,
       "memInputAnalogCalibrationPoint3": memInputAnalogCalibrationPoint3,
       "memInputAnalogCalibrationPoint4": memInputAnalogCalibrationPoint4,
       "memInputAnalogCalibrationPoint5": memInputAnalogCalibrationPoint5,
       "memInputAnalogCalibrationPoint1Value": memInputAnalogCalibrationPoint1Value,
       "memInputAnalogCalibrationPoint2Value": memInputAnalogCalibrationPoint2Value,
       "memInputAnalogCalibrationPoint3Value": memInputAnalogCalibrationPoint3Value,
       "memInputAnalogCalibrationPoint4Value": memInputAnalogCalibrationPoint4Value,
       "memInputAnalogCalibrationPoint5Value": memInputAnalogCalibrationPoint5Value,
       "memInputAnalogMeasurementUnits": memInputAnalogMeasurementUnits,
       "memInputAnalogMaxThresh": memInputAnalogMaxThresh,
       "memInputAnalogHighThresh": memInputAnalogHighThresh,
       "memInputAnalogLowThresh": memInputAnalogLowThresh,
       "memInputAnalogMinThresh": memInputAnalogMinThresh,
       "memInputAnalogThreshHysteresis": memInputAnalogThreshHysteresis,
       "memOutputs": memOutputs,
       "memOutputStatusTableSize": memOutputStatusTableSize,
       "memOutputStatusTable": memOutputStatusTable,
       "memOutputStatusEntry": memOutputStatusEntry,
       "memOutputStatusModuleNumber": memOutputStatusModuleNumber,
       "memOutputStatusOutputNumber": memOutputStatusOutputNumber,
       "memOutputStatusOutputName": memOutputStatusOutputName,
       "memOutputStatusOutputLocation": memOutputStatusOutputLocation,
       "memOutputStatusCurrentState": memOutputStatusCurrentState,
       "memOutputConfigTableSize": memOutputConfigTableSize,
       "memOutputConfigTable": memOutputConfigTable,
       "memOutputConfigEntry": memOutputConfigEntry,
       "memOutputConfigModuleNumber": memOutputConfigModuleNumber,
       "memOutputConfigOutputNumber": memOutputConfigOutputNumber,
       "memOutputName": memOutputName,
       "memOutputLocation": memOutputLocation,
       "memOutputNormalState": memOutputNormalState,
       "memOutputAction": memOutputAction,
       "memOutlets": memOutlets,
       "memOutletStatusTableSize": memOutletStatusTableSize,
       "memOutletStatusTable": memOutletStatusTable,
       "memOutletStatusEntry": memOutletStatusEntry,
       "memOutletStatusModuleNumber": memOutletStatusModuleNumber,
       "memOutletStatusOutletNumber": memOutletStatusOutletNumber,
       "memOutletStatusOutletName": memOutletStatusOutletName,
       "memOutletStatusOutletLocation": memOutletStatusOutletLocation,
       "memOutletStatusCurrentState": memOutletStatusCurrentState,
       "memOutletConfigTableSize": memOutletConfigTableSize,
       "memOutletConfigTable": memOutletConfigTable,
       "memOutletConfigEntry": memOutletConfigEntry,
       "memOutletConfigModuleNumber": memOutletConfigModuleNumber,
       "memOutletConfigOutletNumber": memOutletConfigOutletNumber,
       "memOutletName": memOutletName,
       "memOutletLocation": memOutletLocation,
       "memOutletNormalState": memOutletNormalState,
       "memOutletAction": memOutletAction,
       "memBeacons": memBeacons,
       "memBeaconStatusTableSize": memBeaconStatusTableSize,
       "memBeaconStatusTable": memBeaconStatusTable,
       "memBeaconStatusEntry": memBeaconStatusEntry,
       "memBeaconStatusModuleNumber": memBeaconStatusModuleNumber,
       "memBeaconStatusBeaconNumber": memBeaconStatusBeaconNumber,
       "memBeaconStatusBeaconName": memBeaconStatusBeaconName,
       "memBeaconStatusBeaconLocation": memBeaconStatusBeaconLocation,
       "memBeaconStatusCurrentState": memBeaconStatusCurrentState,
       "memBeaconConfigTableSize": memBeaconConfigTableSize,
       "memBeaconConfigTable": memBeaconConfigTable,
       "memBeaconConfigEntry": memBeaconConfigEntry,
       "memBeaconConfigModuleNumber": memBeaconConfigModuleNumber,
       "memBeaconConfigBeaconNumber": memBeaconConfigBeaconNumber,
       "memBeaconConfigName": memBeaconConfigName,
       "memBeaconConfigLocation": memBeaconConfigLocation,
       "memBeaconAction": memBeaconAction,
       "netlock": netlock,
       "nlIdent": nlIdent,
       "nlStatus": nlStatus,
       "rPDU": rPDU,
       "rPDUIdent": rPDUIdent,
       "rPDUIdentName": rPDUIdentName,
       "rPDUIdentHardwareRev": rPDUIdentHardwareRev,
       "rPDUIdentFirmwareRev": rPDUIdentFirmwareRev,
       "rPDUIdentDateOfManufacture": rPDUIdentDateOfManufacture,
       "rPDUIdentModelNumber": rPDUIdentModelNumber,
       "rPDUIdentSerialNumber": rPDUIdentSerialNumber,
       "rPDUIdentDeviceRating": rPDUIdentDeviceRating,
       "rPDUIdentDeviceNumOutlets": rPDUIdentDeviceNumOutlets,
       "rPDUIdentDeviceNumPhases": rPDUIdentDeviceNumPhases,
       "rPDUIdentDeviceNumBreakers": rPDUIdentDeviceNumBreakers,
       "rPDUIdentDeviceBreakerRating": rPDUIdentDeviceBreakerRating,
       "rPDUIdentDeviceOrientation": rPDUIdentDeviceOrientation,
       "rPDUIdentDeviceOutletLayout": rPDUIdentDeviceOutletLayout,
       "rPDUIdentDeviceDisplayOrientation": rPDUIdentDeviceDisplayOrientation,
       "rPDUIdentDeviceLinetoLineVoltage": rPDUIdentDeviceLinetoLineVoltage,
       "rPDUIdentDevicePowerWatts": rPDUIdentDevicePowerWatts,
       "rPDUIdentDevicePowerFactor": rPDUIdentDevicePowerFactor,
       "rPDUIdentDevicePowerVA": rPDUIdentDevicePowerVA,
       "rPDULoad": rPDULoad,
       "rPDULoadDevice": rPDULoadDevice,
       "rPDULoadDevMaxPhaseLoad": rPDULoadDevMaxPhaseLoad,
       "rPDULoadDevNumPhases": rPDULoadDevNumPhases,
       "rPDULoadDevMaxBankLoad": rPDULoadDevMaxBankLoad,
       "rPDULoadDevNumBanks": rPDULoadDevNumBanks,
       "rPDULoadDevBankTableSize": rPDULoadDevBankTableSize,
       "rPDULoadDevBankTable": rPDULoadDevBankTable,
       "rPDULoadDevBankEntry": rPDULoadDevBankEntry,
       "rPDULoadDevBankIndex": rPDULoadDevBankIndex,
       "rPDULoadDevBankNumber": rPDULoadDevBankNumber,
       "rPDULoadDevBankMaxLoad": rPDULoadDevBankMaxLoad,
       "rPDULoadDevMaxOutletTableSize": rPDULoadDevMaxOutletTableSize,
       "rPDULoadDevMaxOutletTable": rPDULoadDevMaxOutletTable,
       "rPDULoadDevMaxOutletEntry": rPDULoadDevMaxOutletEntry,
       "rPDULoadDevOutletIndex": rPDULoadDevOutletIndex,
       "rPDULoadDevOutletNumber": rPDULoadDevOutletNumber,
       "rPDULoadDevMaxOutletLoad": rPDULoadDevMaxOutletLoad,
       "rPDULoadPhaseConfig": rPDULoadPhaseConfig,
       "rPDULoadPhaseConfigTable": rPDULoadPhaseConfigTable,
       "rPDULoadPhaseConfigEntry": rPDULoadPhaseConfigEntry,
       "rPDULoadPhaseConfigIndex": rPDULoadPhaseConfigIndex,
       "rPDULoadPhaseConfigLowLoadThreshold": rPDULoadPhaseConfigLowLoadThreshold,
       "rPDULoadPhaseConfigNearOverloadThreshold": rPDULoadPhaseConfigNearOverloadThreshold,
       "rPDULoadPhaseConfigOverloadThreshold": rPDULoadPhaseConfigOverloadThreshold,
       "rPDULoadPhaseConfigAlarm": rPDULoadPhaseConfigAlarm,
       "rPDULoadStatus": rPDULoadStatus,
       "rPDULoadStatusTable": rPDULoadStatusTable,
       "rPDULoadStatusEntry": rPDULoadStatusEntry,
       "rPDULoadStatusIndex": rPDULoadStatusIndex,
       "rPDULoadStatusLoad": rPDULoadStatusLoad,
       "rPDULoadStatusLoadState": rPDULoadStatusLoadState,
       "rPDULoadStatusPhaseNumber": rPDULoadStatusPhaseNumber,
       "rPDULoadStatusBankNumber": rPDULoadStatusBankNumber,
       "rPDULoadBankConfig": rPDULoadBankConfig,
       "rPDULoadBankConfigTable": rPDULoadBankConfigTable,
       "rPDULoadBankConfigEntry": rPDULoadBankConfigEntry,
       "rPDULoadBankConfigIndex": rPDULoadBankConfigIndex,
       "rPDULoadBankConfigLowLoadThreshold": rPDULoadBankConfigLowLoadThreshold,
       "rPDULoadBankConfigNearOverloadThreshold": rPDULoadBankConfigNearOverloadThreshold,
       "rPDULoadBankConfigOverloadThreshold": rPDULoadBankConfigOverloadThreshold,
       "rPDULoadBankConfigAlarm": rPDULoadBankConfigAlarm,
       "rPDUOutlet": rPDUOutlet,
       "rPDUOutletDevice": rPDUOutletDevice,
       "rPDUOutletDevCommand": rPDUOutletDevCommand,
       "rPDUOutletDevColdstartDelay": rPDUOutletDevColdstartDelay,
       "rPDUOutletDevNumCntrlOutlets": rPDUOutletDevNumCntrlOutlets,
       "rPDUOutletDevNumTotalOutlets": rPDUOutletDevNumTotalOutlets,
       "rPDUOutletDevMonitoredOutlets": rPDUOutletDevMonitoredOutlets,
       "rPDUOutletPhase": rPDUOutletPhase,
       "rPDUOutletPhaseTable": rPDUOutletPhaseTable,
       "rPDUOutletPhaseEntry": rPDUOutletPhaseEntry,
       "rPDUOutletPhaseIndex": rPDUOutletPhaseIndex,
       "rPDUOutletPhaseOverloadRestriction": rPDUOutletPhaseOverloadRestriction,
       "rPDUOutletControl": rPDUOutletControl,
       "rPDUOutletControlTable": rPDUOutletControlTable,
       "rPDUOutletControlEntry": rPDUOutletControlEntry,
       "rPDUOutletControlIndex": rPDUOutletControlIndex,
       "rPDUOutletControlOutletName": rPDUOutletControlOutletName,
       "rPDUOutletControlOutletPhase": rPDUOutletControlOutletPhase,
       "rPDUOutletControlOutletCommand": rPDUOutletControlOutletCommand,
       "rPDUOutletControlOutletBank": rPDUOutletControlOutletBank,
       "rPDUOutletConfig": rPDUOutletConfig,
       "rPDUOutletConfigTable": rPDUOutletConfigTable,
       "rPDUOutletConfigEntry": rPDUOutletConfigEntry,
       "rPDUOutletConfigIndex": rPDUOutletConfigIndex,
       "rPDUOutletConfigOutletName": rPDUOutletConfigOutletName,
       "rPDUOutletConfigOutletPhase": rPDUOutletConfigOutletPhase,
       "rPDUOutletConfigPowerOnTime": rPDUOutletConfigPowerOnTime,
       "rPDUOutletConfigPowerOffTime": rPDUOutletConfigPowerOffTime,
       "rPDUOutletConfigRebootDuration": rPDUOutletConfigRebootDuration,
       "rPDUOutletConfigOutletBank": rPDUOutletConfigOutletBank,
       "rPDUOutletConfigMonitoredTableSize": rPDUOutletConfigMonitoredTableSize,
       "rPDUOutletConfigMonitoredTable": rPDUOutletConfigMonitoredTable,
       "rPDUOutletConfigMonitoredEntry": rPDUOutletConfigMonitoredEntry,
       "rPDUOutletConfigMonitoredIndex": rPDUOutletConfigMonitoredIndex,
       "rPDUOutletConfigMonitoredName": rPDUOutletConfigMonitoredName,
       "rPDUOutletConfigMonitoredNumber": rPDUOutletConfigMonitoredNumber,
       "rPDUOutletConfigMonitoredLowLoadThreshold": rPDUOutletConfigMonitoredLowLoadThreshold,
       "rPDUOutletConfigMonitoredNearOverloadThreshold": rPDUOutletConfigMonitoredNearOverloadThreshold,
       "rPDUOutletConfigMonitoredOverloadThreshold": rPDUOutletConfigMonitoredOverloadThreshold,
       "rPDUOutletStatus": rPDUOutletStatus,
       "rPDUOutletStatusTable": rPDUOutletStatusTable,
       "rPDUOutletStatusEntry": rPDUOutletStatusEntry,
       "rPDUOutletStatusIndex": rPDUOutletStatusIndex,
       "rPDUOutletStatusOutletName": rPDUOutletStatusOutletName,
       "rPDUOutletStatusOutletPhase": rPDUOutletStatusOutletPhase,
       "rPDUOutletStatusOutletState": rPDUOutletStatusOutletState,
       "rPDUOutletStatusCommandPending": rPDUOutletStatusCommandPending,
       "rPDUOutletStatusOutletBank": rPDUOutletStatusOutletBank,
       "rPDUOutletStatusLoad": rPDUOutletStatusLoad,
       "rPDUOutletBank": rPDUOutletBank,
       "rPDUOutletBankTable": rPDUOutletBankTable,
       "rPDUOutletBankEntry": rPDUOutletBankEntry,
       "rPDUOutletBankIndex": rPDUOutletBankIndex,
       "rPDUOutletBankOverloadRestriction": rPDUOutletBankOverloadRestriction,
       "rPDUPowerSupply": rPDUPowerSupply,
       "rPDUPowerSupplyDevice": rPDUPowerSupplyDevice,
       "rPDUPowerSupply1Status": rPDUPowerSupply1Status,
       "rPDUPowerSupply2Status": rPDUPowerSupply2Status,
       "rPDUPowerSupplyAlarm": rPDUPowerSupplyAlarm,
       "rPDUStatus": rPDUStatus,
       "rPDUStatusBankTableSize": rPDUStatusBankTableSize,
       "rPDUStatusBankTable": rPDUStatusBankTable,
       "rPDUStatusBankEntry": rPDUStatusBankEntry,
       "rPDUStatusBankIndex": rPDUStatusBankIndex,
       "rPDUStatusBankNumber": rPDUStatusBankNumber,
       "rPDUStatusBankState": rPDUStatusBankState,
       "rPDUStatusPhaseTableSize": rPDUStatusPhaseTableSize,
       "rPDUStatusPhaseTable": rPDUStatusPhaseTable,
       "rPDUStatusPhaseEntry": rPDUStatusPhaseEntry,
       "rPDUStatusPhaseIndex": rPDUStatusPhaseIndex,
       "rPDUStatusPhaseNumber": rPDUStatusPhaseNumber,
       "rPDUStatusPhaseState": rPDUStatusPhaseState,
       "rPDUStatusOutletTableSize": rPDUStatusOutletTableSize,
       "rPDUStatusOutletTable": rPDUStatusOutletTable,
       "rPDUStatusOutletEntry": rPDUStatusOutletEntry,
       "rPDUStatusOutletIndex": rPDUStatusOutletIndex,
       "rPDUStatusOutletNumber": rPDUStatusOutletNumber,
       "rPDUStatusOutletState": rPDUStatusOutletState,
       "airConditioners": airConditioners,
       "airFM": airFM,
       "airFMIdent": airFMIdent,
       "airFMIdentName": airFMIdentName,
       "airFMIdentTableSize": airFMIdentTableSize,
       "airFMIdentTable": airFMIdentTable,
       "airFMIdentEntry": airFMIdentEntry,
       "airFMIdentModuleIndex": airFMIdentModuleIndex,
       "airFMIdentModuleModelNumber": airFMIdentModuleModelNumber,
       "airFMIdentModuleDateOfMfg": airFMIdentModuleDateOfMfg,
       "airFMIdentModuleSerialNumber": airFMIdentModuleSerialNumber,
       "airFMIdentModuleFirmwareRev": airFMIdentModuleFirmwareRev,
       "airFMIdentModuleHardwareRev": airFMIdentModuleHardwareRev,
       "airFMIdentLocation": airFMIdentLocation,
       "airFMIdentContact": airFMIdentContact,
       "airFMStatus": airFMStatus,
       "airFMStatusSystemOn": airFMStatusSystemOn,
       "airFMStatusSystemAverageRetTempC": airFMStatusSystemAverageRetTempC,
       "airFMStatusSystemAverageRetTempF": airFMStatusSystemAverageRetTempF,
       "airFMStatusSystemAverageRetHum": airFMStatusSystemAverageRetHum,
       "airFMStatusSystemActionTempC": airFMStatusSystemActionTempC,
       "airFMStatusSystemActionTempF": airFMStatusSystemActionTempF,
       "airFMStatusSystemActionHum": airFMStatusSystemActionHum,
       "airFMStatusSystemRemoteHighTempC": airFMStatusSystemRemoteHighTempC,
       "airFMStatusSystemRemoteHighTempF": airFMStatusSystemRemoteHighTempF,
       "airFMStatusSystemRemoteAvgTempC": airFMStatusSystemRemoteAvgTempC,
       "airFMStatusSystemRemoteAvgTempF": airFMStatusSystemRemoteAvgTempF,
       "airFMStatusSystemRemoteAvgHum": airFMStatusSystemRemoteAvgHum,
       "airFMStatusSystemRemoteLowTempC": airFMStatusSystemRemoteLowTempC,
       "airFMStatusSystemRemoteLowTempF": airFMStatusSystemRemoteLowTempF,
       "airFMStatusSystemCoolingEnabled": airFMStatusSystemCoolingEnabled,
       "airFMStatusSystemReheatingEnabled": airFMStatusSystemReheatingEnabled,
       "airFMStatusSystemHumidifyEnabled": airFMStatusSystemHumidifyEnabled,
       "airFMStatusSystemDehumidifyEnabled": airFMStatusSystemDehumidifyEnabled,
       "airFMStatusModuleTableSize": airFMStatusModuleTableSize,
       "airFMStatusModuleTable": airFMStatusModuleTable,
       "airFMStatusModuleEntry": airFMStatusModuleEntry,
       "airFMStatusModuleIndex": airFMStatusModuleIndex,
       "airFMStatusModuleOutputCapacity": airFMStatusModuleOutputCapacity,
       "airFMStatusModuleSupplyTempC": airFMStatusModuleSupplyTempC,
       "airFMStatusModuleSupplyTempF": airFMStatusModuleSupplyTempF,
       "airFMStatusModuleSupplyHum": airFMStatusModuleSupplyHum,
       "airFMStatusModuleReturnTempC": airFMStatusModuleReturnTempC,
       "airFMStatusModuleReturnTempF": airFMStatusModuleReturnTempF,
       "airFMStatusModuleReturnHum": airFMStatusModuleReturnHum,
       "airFMGroup": airFMGroup,
       "airFMGroupSysStatus": airFMGroupSysStatus,
       "airFMGroupSysRuntime": airFMGroupSysRuntime,
       "airFMGroupSysRole": airFMGroupSysRole,
       "airFMGroupSysRoles": airFMGroupSysRoles,
       "airFMGroupSysRolesTableSize": airFMGroupSysRolesTableSize,
       "airFMGroupSysRolesTable": airFMGroupSysRolesTable,
       "airFMGroupSysRolesEntry": airFMGroupSysRolesEntry,
       "airFMGroupSysIndex": airFMGroupSysIndex,
       "airFMGroupSysRoleStatus": airFMGroupSysRoleStatus,
       "airFMGroupSysPresentRole": airFMGroupSysPresentRole,
       "airFMGroupSysManualRoleSetting": airFMGroupSysManualRoleSetting,
       "airFMGroupSysRunHours": airFMGroupSysRunHours,
       "airFMGroupSysComm": airFMGroupSysComm,
       "airFMGroupSysIPAddress": airFMGroupSysIPAddress,
       "airFMGroupSysRoleAssignment": airFMGroupSysRoleAssignment,
       "airFMGroupAutoRoleNumPrimary": airFMGroupAutoRoleNumPrimary,
       "airFMGroupCfg": airFMGroupCfg,
       "airFMGroupCfgName": airFMGroupCfgName,
       "airFMGroupCfgNumSystems": airFMGroupCfgNumSystems,
       "airFMGroupCfgIdleBlower": airFMGroupCfgIdleBlower,
       "airFMGroupCfgShutdownSmoke": airFMGroupCfgShutdownSmoke,
       "airFMGroupCfgShutdownFire": airFMGroupCfgShutdownFire,
       "airFMGroupCfgFailoverCommLoss": airFMGroupCfgFailoverCommLoss,
       "airFMGroupCfgDmdFightStatus": airFMGroupCfgDmdFightStatus,
       "airFMGroupCfgDmdFightSetting": airFMGroupCfgDmdFightSetting,
       "airFMGroupCfgSetpointShareStatus": airFMGroupCfgSetpointShareStatus,
       "airFMGroupCfgSetpointShareSetting": airFMGroupCfgSetpointShareSetting,
       "airFMGroupCfgResetFieldServiceDefaults": airFMGroupCfgResetFieldServiceDefaults,
       "airFMGroupLoadShare": airFMGroupLoadShare,
       "airFMGroupLoadShareCoolRequests": airFMGroupLoadShareCoolRequests,
       "airFMGroupLoadShareCoolThreshC": airFMGroupLoadShareCoolThreshC,
       "airFMGroupLoadShareCoolThreshF": airFMGroupLoadShareCoolThreshF,
       "airFMGroupLoadShareReheatRequests": airFMGroupLoadShareReheatRequests,
       "airFMGroupLoadShareReheatThreshC": airFMGroupLoadShareReheatThreshC,
       "airFMGroupLoadShareReheatThreshF": airFMGroupLoadShareReheatThreshF,
       "airFMGroupLoadShareHumRequests": airFMGroupLoadShareHumRequests,
       "airFMGroupLoadShareHumThresh": airFMGroupLoadShareHumThresh,
       "airFMGroupLoadShareDehumRequests": airFMGroupLoadShareDehumRequests,
       "airFMGroupLoadShareDehumThresh": airFMGroupLoadShareDehumThresh,
       "airFMGroupFailover": airFMGroupFailover,
       "airFMGroupFailoverSys": airFMGroupFailoverSys,
       "airFMGroupFailoverSysAnyMinorAlarm": airFMGroupFailoverSysAnyMinorAlarm,
       "airFMGroupFailoverSysAnyMajorAlarm": airFMGroupFailoverSysAnyMajorAlarm,
       "airFMGroupFailoverSysHighEnvTemp": airFMGroupFailoverSysHighEnvTemp,
       "airFMGroupFailoverSysLowEnvTemp": airFMGroupFailoverSysLowEnvTemp,
       "airFMGroupFailoverSysHighEnvHum": airFMGroupFailoverSysHighEnvHum,
       "airFMGroupFailoverSysLowEnvHum": airFMGroupFailoverSysLowEnvHum,
       "airFMGroupFailoverSysFireAlarm": airFMGroupFailoverSysFireAlarm,
       "airFMGroupFailoverSysSmokeAlarm": airFMGroupFailoverSysSmokeAlarm,
       "airFMGroupFailoverSysCommLost": airFMGroupFailoverSysCommLost,
       "airFMGroupFailoverSysSupplySensorFail": airFMGroupFailoverSysSupplySensorFail,
       "airFMGroupFailoverSysReturnSensorFail": airFMGroupFailoverSysReturnSensorFail,
       "airFMGroupFailoverSysPrimarySensorFail": airFMGroupFailoverSysPrimarySensorFail,
       "airFMGroupFailoverSysSecondarySensorFail": airFMGroupFailoverSysSecondarySensorFail,
       "airFMGroupFailoverSysNoSensorsAvailable": airFMGroupFailoverSysNoSensorsAvailable,
       "airFMGroupFailoverMod": airFMGroupFailoverMod,
       "airFMGroupFailoverModMaintRequired": airFMGroupFailoverModMaintRequired,
       "airFMGroupFailoverModCoolFail": airFMGroupFailoverModCoolFail,
       "airFMGroupFailoverModHumFail": airFMGroupFailoverModHumFail,
       "airFMGroupFailoverModBlwrCntrl1Fail": airFMGroupFailoverModBlwrCntrl1Fail,
       "airFMGroupFailoverModBlwrCntrl2Fail": airFMGroupFailoverModBlwrCntrl2Fail,
       "airFMGroupFailoverModHighFilterDP": airFMGroupFailoverModHighFilterDP,
       "airFMGroupFailoverModHighSupplyTemp": airFMGroupFailoverModHighSupplyTemp,
       "airFMGroupFailoverModLowSupplyTemp": airFMGroupFailoverModLowSupplyTemp,
       "airFMGroupFailoverModLossOrLowAirFlow": airFMGroupFailoverModLossOrLowAirFlow,
       "airFMGroupFailoverModHumReplaceCylinder": airFMGroupFailoverModHumReplaceCylinder,
       "airFMGroupFailoverModAirBlockInterlockOpen": airFMGroupFailoverModAirBlockInterlockOpen,
       "airFMGroupFailoverModWaterDetected": airFMGroupFailoverModWaterDetected,
       "airFMGroupFailoverModCondensatePumpFail": airFMGroupFailoverModCondensatePumpFail,
       "airFMSystem": airFMSystem,
       "airFMSysStatus": airFMSysStatus,
       "airFMSysNumber": airFMSysNumber,
       "airFMSysPresentStatus": airFMSysPresentStatus,
       "airFMSysPresentRole": airFMSysPresentRole,
       "airFMSysRunHours": airFMSysRunHours,
       "airFMSysCoilFluidTempC": airFMSysCoilFluidTempC,
       "airFMSysCoilFluidTempF": airFMSysCoilFluidTempF,
       "airFMSysHotWaterTempC": airFMSysHotWaterTempC,
       "airFMSysHotWaterTempF": airFMSysHotWaterTempF,
       "airFMSysAvgReturnTempC": airFMSysAvgReturnTempC,
       "airFMSysAvgReturnTempF": airFMSysAvgReturnTempF,
       "airFMSysAvgReturnHum": airFMSysAvgReturnHum,
       "airFMSysAvgRemoteTempC": airFMSysAvgRemoteTempC,
       "airFMSysAvgRemoteTempF": airFMSysAvgRemoteTempF,
       "airFMSysAvgRemoteHum": airFMSysAvgRemoteHum,
       "airFMSysMaxRemoteTempC": airFMSysMaxRemoteTempC,
       "airFMSysMaxRemoteTempF": airFMSysMaxRemoteTempF,
       "airFMSysMinRemoteTempC": airFMSysMinRemoteTempC,
       "airFMSysMinRemoteTempF": airFMSysMinRemoteTempF,
       "airFMSysTempCtrlMethod": airFMSysTempCtrlMethod,
       "airFMSysActualTempCtrlMethod": airFMSysActualTempCtrlMethod,
       "airFMSysHumCtrlMethod": airFMSysHumCtrlMethod,
       "airFMSysActualHumCtrlMethod": airFMSysActualHumCtrlMethod,
       "airFMSysCtrlTempC": airFMSysCtrlTempC,
       "airFMSysCtrlTempF": airFMSysCtrlTempF,
       "airFMSysCtrlHum": airFMSysCtrlHum,
       "airFMSysDemands": airFMSysDemands,
       "airFMSysDXCoolingDmd": airFMSysDXCoolingDmd,
       "airFMSysDXDehumDmd": airFMSysDXDehumDmd,
       "airFMSysDXActualCoolDehum": airFMSysDXActualCoolDehum,
       "airFMSysCoilFluidCoolDmd": airFMSysCoilFluidCoolDmd,
       "airFMSysCoilFluidDehumDmd": airFMSysCoilFluidDehumDmd,
       "airFMSysCoilFluidActualCoolDehum": airFMSysCoilFluidActualCoolDehum,
       "airFMSysElectricReheatDmd": airFMSysElectricReheatDmd,
       "airFMSysActualElectricReheat": airFMSysActualElectricReheat,
       "airFMSysSteamHotGasReheatDmd": airFMSysSteamHotGasReheatDmd,
       "airFMSysActualSteamHotGasReheat": airFMSysActualSteamHotGasReheat,
       "airFMSysSteamElectrodeHumDmd": airFMSysSteamElectrodeHumDmd,
       "airFMSysActualSteamElectrodeHum": airFMSysActualSteamElectrodeHum,
       "airFMSysSteamHumDmd": airFMSysSteamHumDmd,
       "airFMSysActualSteamHum": airFMSysActualSteamHum,
       "airFMSysSetup": airFMSysSetup,
       "airFMSysNumModules": airFMSysNumModules,
       "airFMSysNumPCIOMs": airFMSysNumPCIOMs,
       "airFMSysMainsVlt": airFMSysMainsVlt,
       "airFMSysUPSVlt": airFMSysUPSVlt,
       "airFMSysCoilCfg": airFMSysCoilCfg,
       "airFMSysRefrigType": airFMSysRefrigType,
       "airFMSysHeatRejection": airFMSysHeatRejection,
       "airFMSysDischAirPtrn": airFMSysDischAirPtrn,
       "airFMSysAirFltr": airFMSysAirFltr,
       "airFMSysFlowSwitch": airFMSysFlowSwitch,
       "airFMSysCoilFluidVlvAct": airFMSysCoilFluidVlvAct,
       "airFMSysCoilFluidVlvType": airFMSysCoilFluidVlvType,
       "airFMSysCndsrFluidVlvAct": airFMSysCndsrFluidVlvAct,
       "airFMSysCndsrFluidVlvType": airFMSysCndsrFluidVlvType,
       "airFMSysHotWaterVlvAct": airFMSysHotWaterVlvAct,
       "airFMSysNumRemoteSensors": airFMSysNumRemoteSensors,
       "airFMSysConfig": airFMSysConfig,
       "airFMSysPrimaryControlSensor": airFMSysPrimaryControlSensor,
       "airFMSysRemoteSensorData": airFMSysRemoteSensorData,
       "airFMSysFastStartup": airFMSysFastStartup,
       "airFMSysStartupDelay": airFMSysStartupDelay,
       "airFMSysModeDelay": airFMSysModeDelay,
       "airFMSysCommLossShutdownDelay": airFMSysCommLossShutdownDelay,
       "airFMSysResetSysFailure": airFMSysResetSysFailure,
       "airFMSysResetUserDflts": airFMSysResetUserDflts,
       "airFMSysResetFldSrvcDflts": airFMSysResetFldSrvcDflts,
       "airFMSysResetRunHours": airFMSysResetRunHours,
       "airFMSysCooling": airFMSysCooling,
       "airFMSysCompMinOnTime": airFMSysCompMinOnTime,
       "airFMSysCompMinOffTime": airFMSysCompMinOffTime,
       "airFMSysCompRotPeriod": airFMSysCompRotPeriod,
       "airFMSysEconIsolVlvOpenDelay": airFMSysEconIsolVlvOpenDelay,
       "airFMSysEconIsolVlvCloseDelay": airFMSysEconIsolVlvCloseDelay,
       "airFMSysCndsrFluidVlvCloseDelay": airFMSysCndsrFluidVlvCloseDelay,
       "airFMSysInterstageDelay": airFMSysInterstageDelay,
       "airFMSysCoolState": airFMSysCoolState,
       "airFMSysCoolEssFunction": airFMSysCoolEssFunction,
       "airFMSysCoolSetpointC": airFMSysCoolSetpointC,
       "airFMSysCoolSetpointF": airFMSysCoolSetpointF,
       "airFMSysCoolDeadbandC": airFMSysCoolDeadbandC,
       "airFMSysCoolDeadbandF": airFMSysCoolDeadbandF,
       "airFMSysCoolEconIsolFunction": airFMSysCoolEconIsolFunction,
       "airFMSysSuctPresCompensation": airFMSysSuctPresCompensation,
       "airFMSysCoilFluidActivThreshC": airFMSysCoilFluidActivThreshC,
       "airFMSysCoilFluidActivThreshF": airFMSysCoilFluidActivThreshF,
       "airFMSysCoilFluidActivDeadbandC": airFMSysCoilFluidActivDeadbandC,
       "airFMSysCoilFluidActivDeadbandF": airFMSysCoilFluidActivDeadbandF,
       "airFMSysCoolPIDMethod": airFMSysCoolPIDMethod,
       "airFMSysCoolPIDGainP": airFMSysCoolPIDGainP,
       "airFMSysCoolPIDResetRateI": airFMSysCoolPIDResetRateI,
       "airFMSysCoolPIDDerivativeD": airFMSysCoolPIDDerivativeD,
       "airFMSysHumidify": airFMSysHumidify,
       "airFMSysHumState": airFMSysHumState,
       "airFMSysHumEssFunction": airFMSysHumEssFunction,
       "airFMSysHumSetpoint": airFMSysHumSetpoint,
       "airFMSysHumDeadband": airFMSysHumDeadband,
       "airFMSysHumCtrlSetting": airFMSysHumCtrlSetting,
       "airFMSysActualHumCtrl": airFMSysActualHumCtrl,
       "airFMSysHumSensBand": airFMSysHumSensBand,
       "airFMSysDehumidify": airFMSysDehumidify,
       "airFMSysDehumState": airFMSysDehumState,
       "airFMSysDehumEssFunction": airFMSysDehumEssFunction,
       "airFMSysDehumSetpoint": airFMSysDehumSetpoint,
       "airFMSysDehumDeadband": airFMSysDehumDeadband,
       "airFMSysDehumCapacity": airFMSysDehumCapacity,
       "airFMSysDehumPIDMethod": airFMSysDehumPIDMethod,
       "airFMSysDehumPIDGainP": airFMSysDehumPIDGainP,
       "airFMSysDehumPIDResetRateI": airFMSysDehumPIDResetRateI,
       "airFMSysDehumPIDDerivativeD": airFMSysDehumPIDDerivativeD,
       "airFMSysReheat": airFMSysReheat,
       "airFMSysReheatState": airFMSysReheatState,
       "airFMSysReheatEssFunction": airFMSysReheatEssFunction,
       "airFMSysReheatSetpointC": airFMSysReheatSetpointC,
       "airFMSysReheatSetpointF": airFMSysReheatSetpointF,
       "airFMSysReheatDeadbandC": airFMSysReheatDeadbandC,
       "airFMSysReheatDeadbandF": airFMSysReheatDeadbandF,
       "airFMSysReheatPIDMethod": airFMSysReheatPIDMethod,
       "airFMSysReheatPIDGainP": airFMSysReheatPIDGainP,
       "airFMSysReheatPIDResetRateI": airFMSysReheatPIDResetRateI,
       "airFMSysReheatPIDDerivativeD": airFMSysReheatPIDDerivativeD,
       "airFMSysThresholds": airFMSysThresholds,
       "airFMSysHighSplyTempC": airFMSysHighSplyTempC,
       "airFMSysHighSplyTempF": airFMSysHighSplyTempF,
       "airFMSysLowSplyTempC": airFMSysLowSplyTempC,
       "airFMSysLowSplyTempF": airFMSysLowSplyTempF,
       "airFMSysHighCoilFluidTempC": airFMSysHighCoilFluidTempC,
       "airFMSysHighCoilFluidTempF": airFMSysHighCoilFluidTempF,
       "airFMSysLowCoilFluidTempC": airFMSysLowCoilFluidTempC,
       "airFMSysLowCoilFluidTempF": airFMSysLowCoilFluidTempF,
       "airFMSysHighCtrlTempC": airFMSysHighCtrlTempC,
       "airFMSysHighCtrlTempF": airFMSysHighCtrlTempF,
       "airFMSysLowCtrlTempC": airFMSysLowCtrlTempC,
       "airFMSysLowCtrlTempF": airFMSysLowCtrlTempF,
       "airFMSysHighCtrlHum": airFMSysHighCtrlHum,
       "airFMSysLowCtrlHum": airFMSysLowCtrlHum,
       "airFMSysTempAlarmDelay": airFMSysTempAlarmDelay,
       "airFMSysHumAlarmDelay": airFMSysHumAlarmDelay,
       "airFMSysInputs": airFMSysInputs,
       "airFMSysInputTableSize": airFMSysInputTableSize,
       "airFMSysInputTable": airFMSysInputTable,
       "airFMSysInputEntry": airFMSysInputEntry,
       "airFMSysInputIndex": airFMSysInputIndex,
       "airFMSysInputName": airFMSysInputName,
       "airFMSysInputStatus": airFMSysInputStatus,
       "airFMSysInputNormalState": airFMSysInputNormalState,
       "airFMSysInputDelay": airFMSysInputDelay,
       "airFMSysInputAlarmAction": airFMSysInputAlarmAction,
       "airFMSysOutputs": airFMSysOutputs,
       "airFMSysOutputTableSize": airFMSysOutputTableSize,
       "airFMSysOutputTable": airFMSysOutputTable,
       "airFMSysOutputEntry": airFMSysOutputEntry,
       "airFMSysOutputIndex": airFMSysOutputIndex,
       "airFMSysOutputStatus": airFMSysOutputStatus,
       "airFMSysOutputNormalState": airFMSysOutputNormalState,
       "airFMSysAlarmMap": airFMSysAlarmMap,
       "airFMSysAlarmMapSys": airFMSysAlarmMapSys,
       "airFMSysAlarmMapSysTableSize": airFMSysAlarmMapSysTableSize,
       "airFMSysAlarmMapSysTable": airFMSysAlarmMapSysTable,
       "airFMSysAlarmMapSysEntry": airFMSysAlarmMapSysEntry,
       "airFMSysAlarmMapSysOutputIndex": airFMSysAlarmMapSysOutputIndex,
       "airFMSysAlarmMapSysAnyAlarm": airFMSysAlarmMapSysAnyAlarm,
       "airFMSysAlarmMapSystemOn": airFMSysAlarmMapSystemOn,
       "airFMSysAlarmMapSystemOffline": airFMSysAlarmMapSystemOffline,
       "airFMSysAlarmMapSysHighEnvTemp": airFMSysAlarmMapSysHighEnvTemp,
       "airFMSysAlarmMapSysLowEnvTemp": airFMSysAlarmMapSysLowEnvTemp,
       "airFMSysAlarmMapSysHighEnvHum": airFMSysAlarmMapSysHighEnvHum,
       "airFMSysAlarmMapSysLowEnvHum": airFMSysAlarmMapSysLowEnvHum,
       "airFMSysAlarmMapSysFireDet": airFMSysAlarmMapSysFireDet,
       "airFMSysAlarmMapSysSmokeDet": airFMSysAlarmMapSysSmokeDet,
       "airFMSysAlarmMapSysEconIsol": airFMSysAlarmMapSysEconIsol,
       "airFMSysAlarmMapSysSupplySensFail": airFMSysAlarmMapSysSupplySensFail,
       "airFMSysAlarmMapSysReturnSensFail": airFMSysAlarmMapSysReturnSensFail,
       "airFMSysAlarmMapSysRemSensRemoved": airFMSysAlarmMapSysRemSensRemoved,
       "airFMSysAlarmMapSysPrimSensFail": airFMSysAlarmMapSysPrimSensFail,
       "airFMSysAlarmMapSysSecSensFail": airFMSysAlarmMapSysSecSensFail,
       "airFMSysAlarmMapSysSecSensActive": airFMSysAlarmMapSysSecSensActive,
       "airFMSysAlarmMapMainMod": airFMSysAlarmMapMainMod,
       "airFMSysAlarmMapMainModTableSize": airFMSysAlarmMapMainModTableSize,
       "airFMSysAlarmMapMainModTable": airFMSysAlarmMapMainModTable,
       "airFMSysAlarmMapMainModEntry": airFMSysAlarmMapMainModEntry,
       "airFMSysAlarmMapMainModOutputIndex": airFMSysAlarmMapMainModOutputIndex,
       "airFMSysAlarmMapMainModAnyAlarm": airFMSysAlarmMapMainModAnyAlarm,
       "airFMSysAlarmMapMainModMaintReq": airFMSysAlarmMapMainModMaintReq,
       "airFMSysAlarmMapMainModCoolFail": airFMSysAlarmMapMainModCoolFail,
       "airFMSysAlarmMapMainModHighSupplyTemp": airFMSysAlarmMapMainModHighSupplyTemp,
       "airFMSysAlarmMapMainModLowSupplyTemp": airFMSysAlarmMapMainModLowSupplyTemp,
       "airFMSysAlarmMapMainModHumFail": airFMSysAlarmMapMainModHumFail,
       "airFMSysAlarmMapMainModHumReplCyl": airFMSysAlarmMapMainModHumReplCyl,
       "airFMSysAlarmMapMainModCondPumpFail": airFMSysAlarmMapMainModCondPumpFail,
       "airFMSysAlarmMapMainModBlwrCntl1Fail": airFMSysAlarmMapMainModBlwrCntl1Fail,
       "airFMSysAlarmMapMainModBlwrCntl2Fail": airFMSysAlarmMapMainModBlwrCntl2Fail,
       "airFMSysAlarmMapMainModHighFltrDP": airFMSysAlarmMapMainModHighFltrDP,
       "airFMSysAlarmMapMainModLowAirFlow": airFMSysAlarmMapMainModLowAirFlow,
       "airFMSysAlarmMapMainModAirBlckIntOpen": airFMSysAlarmMapMainModAirBlckIntOpen,
       "airFMSysAlarmMapMainModWaterDetected": airFMSysAlarmMapMainModWaterDetected,
       "airFMSysAlarmMapExpMod1": airFMSysAlarmMapExpMod1,
       "airFMSysAlarmMapExpMod1TableSize": airFMSysAlarmMapExpMod1TableSize,
       "airFMSysAlarmMapExpMod1Table": airFMSysAlarmMapExpMod1Table,
       "airFMSysAlarmMapExpMod1Entry": airFMSysAlarmMapExpMod1Entry,
       "airFMSysAlarmMapExpMod1OutputIndex": airFMSysAlarmMapExpMod1OutputIndex,
       "airFMSysAlarmMapExpMod1AnyAlarm": airFMSysAlarmMapExpMod1AnyAlarm,
       "airFMSysAlarmMapExpMod1MaintReq": airFMSysAlarmMapExpMod1MaintReq,
       "airFMSysAlarmMapExpMod1CoolFail": airFMSysAlarmMapExpMod1CoolFail,
       "airFMSysAlarmMapExpMod1HighSupplyTemp": airFMSysAlarmMapExpMod1HighSupplyTemp,
       "airFMSysAlarmMapExpMod1LowSupplyTemp": airFMSysAlarmMapExpMod1LowSupplyTemp,
       "airFMSysAlarmMapExpMod1HumFail": airFMSysAlarmMapExpMod1HumFail,
       "airFMSysAlarmMapExpMod1HumReplCyl": airFMSysAlarmMapExpMod1HumReplCyl,
       "airFMSysAlarmMapExpMod1CondPumpFail": airFMSysAlarmMapExpMod1CondPumpFail,
       "airFMSysAlarmMapExpMod1BlwrCntl1Fail": airFMSysAlarmMapExpMod1BlwrCntl1Fail,
       "airFMSysAlarmMapExpMod1BlwrCntl2Fail": airFMSysAlarmMapExpMod1BlwrCntl2Fail,
       "airFMSysAlarmMapExpMod1HighFltrDP": airFMSysAlarmMapExpMod1HighFltrDP,
       "airFMSysAlarmMapExpMod1LowAirFlow": airFMSysAlarmMapExpMod1LowAirFlow,
       "airFMSysAlarmMapExpMod1AirBlckIntOpen": airFMSysAlarmMapExpMod1AirBlckIntOpen,
       "airFMSysAlarmMapExpMod1WaterDetected": airFMSysAlarmMapExpMod1WaterDetected,
       "airFMSysAlarmMapExpMod2": airFMSysAlarmMapExpMod2,
       "airFMSysAlarmMapExpMod2TableSize": airFMSysAlarmMapExpMod2TableSize,
       "airFMSysAlarmMapExpMod2Table": airFMSysAlarmMapExpMod2Table,
       "airFMSysAlarmMapExpMod2Entry": airFMSysAlarmMapExpMod2Entry,
       "airFMSysAlarmMapExpMod2OutputIndex": airFMSysAlarmMapExpMod2OutputIndex,
       "airFMSysAlarmMapExpMod2AnyAlarm": airFMSysAlarmMapExpMod2AnyAlarm,
       "airFMSysAlarmMapExpMod2MaintReq": airFMSysAlarmMapExpMod2MaintReq,
       "airFMSysAlarmMapExpMod2CoolFail": airFMSysAlarmMapExpMod2CoolFail,
       "airFMSysAlarmMapExpMod2HighSupplyTemp": airFMSysAlarmMapExpMod2HighSupplyTemp,
       "airFMSysAlarmMapExpMod2LowSupplyTemp": airFMSysAlarmMapExpMod2LowSupplyTemp,
       "airFMSysAlarmMapExpMod2HumFail": airFMSysAlarmMapExpMod2HumFail,
       "airFMSysAlarmMapExpMod2HumReplCyl": airFMSysAlarmMapExpMod2HumReplCyl,
       "airFMSysAlarmMapExpMod2CondPumpFail": airFMSysAlarmMapExpMod2CondPumpFail,
       "airFMSysAlarmMapExpMod2BlwrCntl1Fail": airFMSysAlarmMapExpMod2BlwrCntl1Fail,
       "airFMSysAlarmMapExpMod2BlwrCntl2Fail": airFMSysAlarmMapExpMod2BlwrCntl2Fail,
       "airFMSysAlarmMapExpMod2HighFltrDP": airFMSysAlarmMapExpMod2HighFltrDP,
       "airFMSysAlarmMapExpMod2LowAirFlow": airFMSysAlarmMapExpMod2LowAirFlow,
       "airFMSysAlarmMapExpMod2AirBlckIntOpen": airFMSysAlarmMapExpMod2AirBlckIntOpen,
       "airFMSysAlarmMapExpMod2WaterDetected": airFMSysAlarmMapExpMod2WaterDetected,
       "airFMSysAlarmMapInput": airFMSysAlarmMapInput,
       "airFMSysAlarmMapInputTableSize": airFMSysAlarmMapInputTableSize,
       "airFMSysAlarmMapInputTable": airFMSysAlarmMapInputTable,
       "airFMSysAlarmMapInputEntry": airFMSysAlarmMapInputEntry,
       "airFMSysAlarmMapInputOutputIndex": airFMSysAlarmMapInputOutputIndex,
       "airFMSysAlarmMapInput1": airFMSysAlarmMapInput1,
       "airFMSysAlarmMapInput2": airFMSysAlarmMapInput2,
       "airFMSysAlarmMapInput3": airFMSysAlarmMapInput3,
       "airFMSysAlarmMapInput4": airFMSysAlarmMapInput4,
       "airFMSysAlarmMapInput5": airFMSysAlarmMapInput5,
       "airFMSysAlarmMapInput6": airFMSysAlarmMapInput6,
       "airFMSysAlarmMapInput7": airFMSysAlarmMapInput7,
       "airFMSysAlarmMapInput8": airFMSysAlarmMapInput8,
       "airFMSysAlarmMapInput9": airFMSysAlarmMapInput9,
       "airFMSysAlarmMapInput10": airFMSysAlarmMapInput10,
       "airFMSysAlarmMapInput11": airFMSysAlarmMapInput11,
       "airFMSysAlarmMapInput12": airFMSysAlarmMapInput12,
       "airFMSysAlarmMapInput13": airFMSysAlarmMapInput13,
       "airFMSysAlarmMapInput14": airFMSysAlarmMapInput14,
       "airFMSysAlarmMapInput15": airFMSysAlarmMapInput15,
       "airFMSysAlarmMapInput16": airFMSysAlarmMapInput16,
       "airFMSysAlarmMapOutput": airFMSysAlarmMapOutput,
       "airFMSysAlarmMapOutputTableSize": airFMSysAlarmMapOutputTableSize,
       "airFMSysAlarmMapOutputTable": airFMSysAlarmMapOutputTable,
       "airFMSysAlarmMapOutputEntry": airFMSysAlarmMapOutputEntry,
       "airFMSysAlarmMapOutputIndex": airFMSysAlarmMapOutputIndex,
       "airFMSysAlarmMapOutput1": airFMSysAlarmMapOutput1,
       "airFMSysAlarmMapOutput2": airFMSysAlarmMapOutput2,
       "airFMSysAlarmMapOutput3": airFMSysAlarmMapOutput3,
       "airFMSysAlarmMapOutput4": airFMSysAlarmMapOutput4,
       "airFMSysAlarmMapOutput5": airFMSysAlarmMapOutput5,
       "airFMSysAlarmMapOutput6": airFMSysAlarmMapOutput6,
       "airFMSysAlarmMapOutput7": airFMSysAlarmMapOutput7,
       "airFMSysAlarmMapOutput8": airFMSysAlarmMapOutput8,
       "airFMSysAlarmMapOutput9": airFMSysAlarmMapOutput9,
       "airFMSysAlarmMapOutput10": airFMSysAlarmMapOutput10,
       "airFMSysAlarmMapOutput11": airFMSysAlarmMapOutput11,
       "airFMSysAlarmMapOutput12": airFMSysAlarmMapOutput12,
       "airFMSysAlarmMapOutput13": airFMSysAlarmMapOutput13,
       "airFMSysAlarmMapOutput14": airFMSysAlarmMapOutput14,
       "airFMSysAlarmMapOutput15": airFMSysAlarmMapOutput15,
       "airFMSysAlarmMapOutput16": airFMSysAlarmMapOutput16,
       "airFMModule": airFMModule,
       "airFMModIdent": airFMModIdent,
       "airFMModIdentTableSize": airFMModIdentTableSize,
       "airFMModIdentTable": airFMModIdentTable,
       "airFMModIdentEntry": airFMModIdentEntry,
       "airFMModIdentModuleIndex": airFMModIdentModuleIndex,
       "airFMModModelNumber": airFMModModelNumber,
       "airFMModSerialNumber": airFMModSerialNumber,
       "airFMModManufactureDate": airFMModManufactureDate,
       "airFMModFirmwareRev": airFMModFirmwareRev,
       "airFMModHardwareRev": airFMModHardwareRev,
       "airFMModStatus": airFMModStatus,
       "airFMModStatusTableSize": airFMModStatusTableSize,
       "airFMModStatusTable": airFMModStatusTable,
       "airFMModStatusEntry": airFMModStatusEntry,
       "airFMModStatusModuleIndex": airFMModStatusModuleIndex,
       "airFMModSupplyTempC": airFMModSupplyTempC,
       "airFMModSupplyTempF": airFMModSupplyTempF,
       "airFMModSupplyHum": airFMModSupplyHum,
       "airFMModReturnTempC": airFMModReturnTempC,
       "airFMModReturnTempF": airFMModReturnTempF,
       "airFMModReturnHum": airFMModReturnHum,
       "airFMModFilterDiffPresPa": airFMModFilterDiffPresPa,
       "airFMModFilterDiffPresInWC": airFMModFilterDiffPresInWC,
       "airFMModCoilDiffPresPa": airFMModCoilDiffPresPa,
       "airFMModCoilDiffPresInWC": airFMModCoilDiffPresInWC,
       "airFMModProperties": airFMModProperties,
       "airFMModPropTableSize": airFMModPropTableSize,
       "airFMModPropTable": airFMModPropTable,
       "airFMModPropEntry": airFMModPropEntry,
       "airFMModPropModuleIndex": airFMModPropModuleIndex,
       "airFMModOutputCapacity": airFMModOutputCapacity,
       "airFMModCapacityCtrl": airFMModCapacityCtrl,
       "airFMModHeaterType": airFMModHeaterType,
       "airFMModElectricHeaterType": airFMModElectricHeaterType,
       "airFMModHumidifierType": airFMModHumidifierType,
       "airFMModBlwrFreqSetting": airFMModBlwrFreqSetting,
       "airFMModNomCoilDiffPresPa": airFMModNomCoilDiffPresPa,
       "airFMModNomCoilDiffPresInWC": airFMModNomCoilDiffPresInWC,
       "airFMModCondPump": airFMModCondPump,
       "airFMModFireDetector": airFMModFireDetector,
       "airFMModSmokeDetector": airFMModSmokeDetector,
       "airFMModWaterDetector": airFMModWaterDetector,
       "airFMModCooling": airFMModCooling,
       "airFMModCoolTableSize": airFMModCoolTableSize,
       "airFMModCoolTable": airFMModCoolTable,
       "airFMModCoolEntry": airFMModCoolEntry,
       "airFMModCoolModuleIndex": airFMModCoolModuleIndex,
       "airFMModComp1": airFMModComp1,
       "airFMModComp2": airFMModComp2,
       "airFMModSuctPresKPa": airFMModSuctPresKPa,
       "airFMModSuctPresPSI": airFMModSuctPresPSI,
       "airFMModDischPresKPa": airFMModDischPresKPa,
       "airFMModDischPresPSI": airFMModDischPresPSI,
       "airFMModCondFluidVlvPos": airFMModCondFluidVlvPos,
       "airFMModCoilFluidVlvPos": airFMModCoilFluidVlvPos,
       "airFMModHumidity": airFMModHumidity,
       "airFMModHumTableSize": airFMModHumTableSize,
       "airFMModHumTable": airFMModHumTable,
       "airFMModHumEntry": airFMModHumEntry,
       "airFMModHumModuleIndex": airFMModHumModuleIndex,
       "airFMModHumidifier": airFMModHumidifier,
       "airFMModElectrodeCurrent": airFMModElectrodeCurrent,
       "airFMModHumActualOutput": airFMModHumActualOutput,
       "airFMModWaterConductivity": airFMModWaterConductivity,
       "airFMModHotWaterVlvPos": airFMModHotWaterVlvPos,
       "airFMModStmElectHumMode": airFMModStmElectHumMode,
       "airFMModBlower1": airFMModBlower1,
       "airFMModBlwr1TableSize": airFMModBlwr1TableSize,
       "airFMModBlwr1Table": airFMModBlwr1Table,
       "airFMModBlwr1Entry": airFMModBlwr1Entry,
       "airFMModBlwr1ModuleIndex": airFMModBlwr1ModuleIndex,
       "airFMModBlwr1CtrlType": airFMModBlwr1CtrlType,
       "airFMModBlwr1CmdFreq": airFMModBlwr1CmdFreq,
       "airFMModBlwr1ActFreq": airFMModBlwr1ActFreq,
       "airFMModBlwr1Poles": airFMModBlwr1Poles,
       "airFMModBlwr1RatedHorsePower": airFMModBlwr1RatedHorsePower,
       "airFMModBlwr1RatedCurrent": airFMModBlwr1RatedCurrent,
       "airFMModBlwr1ActTorq": airFMModBlwr1ActTorq,
       "airFMModBlwr1Current": airFMModBlwr1Current,
       "airFMModBlwr1Vlt": airFMModBlwr1Vlt,
       "airFMModBlwr1DCLinkVlt": airFMModBlwr1DCLinkVlt,
       "airFMModBlwr1AccTime": airFMModBlwr1AccTime,
       "airFMModBlwr1DecTime": airFMModBlwr1DecTime,
       "airFMModBlwr1CapLife": airFMModBlwr1CapLife,
       "airFMModBlwr1CtrlCoolFanLife": airFMModBlwr1CtrlCoolFanLife,
       "airFMModBlwr1ElOvMode": airFMModBlwr1ElOvMode,
       "airFMModBlwr1ElOvSetting": airFMModBlwr1ElOvSetting,
       "airFMModBlwr1ElOvTimeConst": airFMModBlwr1ElOvTimeConst,
       "airFMModBlwr1FanPower": airFMModBlwr1FanPower,
       "airFMModBlwr1HeatsinkTempC": airFMModBlwr1HeatsinkTempC,
       "airFMModBlwr1HeatsinkTempF": airFMModBlwr1HeatsinkTempF,
       "airFMModBlwr1ChokeTempC": airFMModBlwr1ChokeTempC,
       "airFMModBlwr1ChokeTempF": airFMModBlwr1ChokeTempF,
       "airFMModBlwr1InverterTempC": airFMModBlwr1InverterTempC,
       "airFMModBlwr1InverterTempF": airFMModBlwr1InverterTempF,
       "airFMModBlower2": airFMModBlower2,
       "airFMModBlwr2TableSize": airFMModBlwr2TableSize,
       "airFMModBlwr2Table": airFMModBlwr2Table,
       "airFMModBlwr2Entry": airFMModBlwr2Entry,
       "airFMModBlwr2ModuleIndex": airFMModBlwr2ModuleIndex,
       "airFMModBlwr2CtrlType": airFMModBlwr2CtrlType,
       "airFMModBlwr2CmdFreq": airFMModBlwr2CmdFreq,
       "airFMModBlwr2ActFreq": airFMModBlwr2ActFreq,
       "airFMModBlwr2Poles": airFMModBlwr2Poles,
       "airFMModBlwr2RatedHorsePower": airFMModBlwr2RatedHorsePower,
       "airFMModBlwr2RatedCurrent": airFMModBlwr2RatedCurrent,
       "airFMModBlwr2ActTorq": airFMModBlwr2ActTorq,
       "airFMModBlwr2Current": airFMModBlwr2Current,
       "airFMModBlwr2Vlt": airFMModBlwr2Vlt,
       "airFMModBlwr2DCLinkVlt": airFMModBlwr2DCLinkVlt,
       "airFMModBlwr2AccTime": airFMModBlwr2AccTime,
       "airFMModBlwr2DecTime": airFMModBlwr2DecTime,
       "airFMModBlwr2CapLife": airFMModBlwr2CapLife,
       "airFMModBlwr2CtrlCoolFanLife": airFMModBlwr2CtrlCoolFanLife,
       "airFMModBlwr2ElOvMode": airFMModBlwr2ElOvMode,
       "airFMModBlwr2ElOvSetting": airFMModBlwr2ElOvSetting,
       "airFMModBlwr2ElOvTimeConst": airFMModBlwr2ElOvTimeConst,
       "airFMModBlwr2FanPower": airFMModBlwr2FanPower,
       "airFMModBlwr2HeatsinkTempC": airFMModBlwr2HeatsinkTempC,
       "airFMModBlwr2HeatsinkTempF": airFMModBlwr2HeatsinkTempF,
       "airFMModBlwr2ChokeTempC": airFMModBlwr2ChokeTempC,
       "airFMModBlwr2ChokeTempF": airFMModBlwr2ChokeTempF,
       "airFMModBlwr2InverterTempC": airFMModBlwr2InverterTempC,
       "airFMModBlwr2InverterTempF": airFMModBlwr2InverterTempF,
       "airFMModRunHours": airFMModRunHours,
       "airFMModRHTableSize": airFMModRHTableSize,
       "airFMModRHTable": airFMModRHTable,
       "airFMModRHEntry": airFMModRHEntry,
       "airFMModRHModuleIndex": airFMModRHModuleIndex,
       "airFMModRHComp1": airFMModRHComp1,
       "airFMModRHComp2": airFMModRHComp2,
       "airFMModRHHeater": airFMModRHHeater,
       "airFMModRHHum": airFMModRHHum,
       "airFMModRHBlwr1": airFMModRHBlwr1,
       "airFMModRHBlwr2": airFMModRHBlwr2,
       "airFMModRHBlwrCtrl1": airFMModRHBlwrCtrl1,
       "airFMModRHBlwrCtrl2": airFMModRHBlwrCtrl2,
       "airFMModRHComp1Reset": airFMModRHComp1Reset,
       "airFMModRHComp2Reset": airFMModRHComp2Reset,
       "airFMModRHHeaterReset": airFMModRHHeaterReset,
       "airFMModRHHumReset": airFMModRHHumReset,
       "airFMModRHBlwr1Reset": airFMModRHBlwr1Reset,
       "airFMModRHBlwr2Reset": airFMModRHBlwr2Reset,
       "airFMModServIntervals": airFMModServIntervals,
       "airFMModServIntComp1": airFMModServIntComp1,
       "airFMModServIntComp2": airFMModServIntComp2,
       "airFMModServIntHeater": airFMModServIntHeater,
       "airFMModServIntHum": airFMModServIntHum,
       "airFMModServIntBlwr1": airFMModServIntBlwr1,
       "airFMModServIntBlwr2": airFMModServIntBlwr2,
       "airFMModServIntBlwrCtrl1": airFMModServIntBlwrCtrl1,
       "airFMModServIntBlwrCtrl2": airFMModServIntBlwrCtrl2,
       "airFMModServIntResets": airFMModServIntResets,
       "airFMModServIntResetTableSize": airFMModServIntResetTableSize,
       "airFMModServIntResetTable": airFMModServIntResetTable,
       "airFMModServIntResetEntry": airFMModServIntResetEntry,
       "airFMModServIntResetModuleIndex": airFMModServIntResetModuleIndex,
       "airFMModServIntComp1Reset": airFMModServIntComp1Reset,
       "airFMModServIntComp2Reset": airFMModServIntComp2Reset,
       "airFMModServIntHeaterReset": airFMModServIntHeaterReset,
       "airFMModServIntHumReset": airFMModServIntHumReset,
       "airFMModServIntBlwr1Reset": airFMModServIntBlwr1Reset,
       "airFMModServIntBlwr2Reset": airFMModServIntBlwr2Reset,
       "airFMModServIntBlwrCtrl1Reset": airFMModServIntBlwrCtrl1Reset,
       "airFMModServIntBlwrCtrl2Reset": airFMModServIntBlwrCtrl2Reset,
       "airFMAlarms": airFMAlarms,
       "airFMAlarmClearActiveGroupAlarms": airFMAlarmClearActiveGroupAlarms,
       "airFMAlarmClearActiveSysModAlarms": airFMAlarmClearActiveSysModAlarms,
       "airFMAlarmConditionsTableSize": airFMAlarmConditionsTableSize,
       "airFMAlarmConditionsTable": airFMAlarmConditionsTable,
       "airFMAlarmConditionsEntry": airFMAlarmConditionsEntry,
       "airFMAlarmConditionsIndex": airFMAlarmConditionsIndex,
       "airFMAlarmSeverity": airFMAlarmSeverity,
       "airFMAlarmType": airFMAlarmType,
       "airFMEventCode": airFMEventCode,
       "airFMAlarmDate": airFMAlarmDate,
       "airFMAlarmTime": airFMAlarmTime,
       "airFMAlarmDescription": airFMAlarmDescription,
       "airPA": airPA,
       "airPAIdent": airPAIdent,
       "airPAIdentName": airPAIdentName,
       "airPAModelNumber": airPAModelNumber,
       "airPADateOfManufacture": airPADateOfManufacture,
       "airPASerialNumber": airPASerialNumber,
       "airPAFirmwareRevision": airPAFirmwareRevision,
       "airPAHardwareRevision": airPAHardwareRevision,
       "airPAStatus": airPAStatus,
       "airPASystemPower": airPASystemPower,
       "airPAOperatingMode": airPAOperatingMode,
       "airPASetpointTempF": airPASetpointTempF,
       "airPASetpointTempC": airPASetpointTempC,
       "airPABlowerSpeed": airPABlowerSpeed,
       "airPACompressor": airPACompressor,
       "airPACondenserFan": airPACondenserFan,
       "airPACondensatePump": airPACondensatePump,
       "airPASupplyTempF": airPASupplyTempF,
       "airPASupplyTempC": airPASupplyTempC,
       "airPAReturnTempF": airPAReturnTempF,
       "airPAReturnTempC": airPAReturnTempC,
       "airPARemoteTempF": airPARemoteTempF,
       "airPARemoteTempC": airPARemoteTempC,
       "airPARemoteHumidity": airPARemoteHumidity,
       "airIR": airIR,
       "airIRAlarms": airIRAlarms,
       "airIRAlarmConditionsTableSize": airIRAlarmConditionsTableSize,
       "airIRAlarmConditionsTable": airIRAlarmConditionsTable,
       "airIRAlarmConditionsEntry": airIRAlarmConditionsEntry,
       "airIRAlarmConditionsIndex": airIRAlarmConditionsIndex,
       "airIREventCode": airIREventCode,
       "airIRAlarmDescription": airIRAlarmDescription,
       "airIRRC": airIRRC,
       "airIRRCGroup": airIRRCGroup,
       "airIRRCGroupStatus": airIRRCGroupStatus,
       "airIRRCGroupStatusCoolOutput": airIRRCGroupStatusCoolOutput,
       "airIRRCGroupStatusCoolDemand": airIRRCGroupStatusCoolDemand,
       "airIRRCGroupStatusAirFlowUS": airIRRCGroupStatusAirFlowUS,
       "airIRRCGroupStatusAirFlowMetric": airIRRCGroupStatusAirFlowMetric,
       "airIRRCGroupStatusMaxRackInletTempUS": airIRRCGroupStatusMaxRackInletTempUS,
       "airIRRCGroupStatusMaxRackInletTempMetric": airIRRCGroupStatusMaxRackInletTempMetric,
       "airIRRCGroupStatusMinRackInletTempUS": airIRRCGroupStatusMinRackInletTempUS,
       "airIRRCGroupStatusMinRackInletTempMetric": airIRRCGroupStatusMinRackInletTempMetric,
       "airIRRCGroupSetpoints": airIRRCGroupSetpoints,
       "airIRRCGroupSetpointsCoolUS": airIRRCGroupSetpointsCoolUS,
       "airIRRCGroupSetpointsCoolMetric": airIRRCGroupSetpointsCoolMetric,
       "airIRRCGroupSetpointsSupplyAirUS": airIRRCGroupSetpointsSupplyAirUS,
       "airIRRCGroupSetpointsSupplyAirMetric": airIRRCGroupSetpointsSupplyAirMetric,
       "airIRRCGroupSetpointsFanSpeedPreference": airIRRCGroupSetpointsFanSpeedPreference,
       "airIRRCGroupSetpointsFanSpeedControl": airIRRCGroupSetpointsFanSpeedControl,
       "airIRRCGroupConfig": airIRRCGroupConfig,
       "airIRRCGroupConfigNumberofCoolingUnits": airIRRCGroupConfigNumberofCoolingUnits,
       "airIRRCGroupConfigConfigurationType": airIRRCGroupConfigConfigurationType,
       "airIRRCGroupConfigPctGlycol": airIRRCGroupConfigPctGlycol,
       "airIRRCGroupConfigCoolGainP": airIRRCGroupConfigCoolGainP,
       "airIRRCGroupConfigCoolResetRateI": airIRRCGroupConfigCoolResetRateI,
       "airIRRCGroupConfigCoolDerivativeD": airIRRCGroupConfigCoolDerivativeD,
       "airIRRCGroupConfigMaxFanSpeed": airIRRCGroupConfigMaxFanSpeed,
       "airIRRCUnit": airIRRCUnit,
       "airIRRCUnitIdent": airIRRCUnitIdent,
       "airIRRCUnitIdentID": airIRRCUnitIdentID,
       "airIRRCUnitIdentName": airIRRCUnitIdentName,
       "airIRRCUnitIdentLocation": airIRRCUnitIdentLocation,
       "airIRRCUnitIdentModelNumber": airIRRCUnitIdentModelNumber,
       "airIRRCUnitIdentSerialNumber": airIRRCUnitIdentSerialNumber,
       "airIRRCUnitIdentFirmwareRevision": airIRRCUnitIdentFirmwareRevision,
       "airIRRCUnitIdentHardwareRevision": airIRRCUnitIdentHardwareRevision,
       "airIRRCUnitIdentManufactureDate": airIRRCUnitIdentManufactureDate,
       "airIRRCUnitStatus": airIRRCUnitStatus,
       "airIRRCUnitStatusOperateMode": airIRRCUnitStatusOperateMode,
       "airIRRCUnitStatusCoolOutput": airIRRCUnitStatusCoolOutput,
       "airIRRCUnitStatusCoolDemand": airIRRCUnitStatusCoolDemand,
       "airIRRCUnitStatusAirFlowUS": airIRRCUnitStatusAirFlowUS,
       "airIRRCUnitStatusAirFlowMetric": airIRRCUnitStatusAirFlowMetric,
       "airIRRCUnitStatusRackInletTempUS": airIRRCUnitStatusRackInletTempUS,
       "airIRRCUnitStatusRackInletTempMetric": airIRRCUnitStatusRackInletTempMetric,
       "airIRRCUnitStatusSupplyAirTempUS": airIRRCUnitStatusSupplyAirTempUS,
       "airIRRCUnitStatusSupplyAirTempMetric": airIRRCUnitStatusSupplyAirTempMetric,
       "airIRRCUnitStatusReturnAirTempUS": airIRRCUnitStatusReturnAirTempUS,
       "airIRRCUnitStatusReturnAirTempMetric": airIRRCUnitStatusReturnAirTempMetric,
       "airIRRCUnitStatusContainmtDPUS": airIRRCUnitStatusContainmtDPUS,
       "airIRRCUnitStatusContainmtDPMetric": airIRRCUnitStatusContainmtDPMetric,
       "airIRRCUnitStatusFilterDPUS": airIRRCUnitStatusFilterDPUS,
       "airIRRCUnitStatusFilterDPMetric": airIRRCUnitStatusFilterDPMetric,
       "airIRRCUnitStatusFanSpeed": airIRRCUnitStatusFanSpeed,
       "airIRRCUnitStatusInputState": airIRRCUnitStatusInputState,
       "airIRRCUnitStatusOutputState": airIRRCUnitStatusOutputState,
       "airIRRCUnitStatusActivePowerSource": airIRRCUnitStatusActivePowerSource,
       "airIRRCUnitStatusFluidValvePosition": airIRRCUnitStatusFluidValvePosition,
       "airIRRCUnitStatusFluidFlowUS": airIRRCUnitStatusFluidFlowUS,
       "airIRRCUnitStatusFluidFlowMetric": airIRRCUnitStatusFluidFlowMetric,
       "airIRRCUnitStatusEnteringFluidTemperatureUS": airIRRCUnitStatusEnteringFluidTemperatureUS,
       "airIRRCUnitStatusEnteringFluidTemperatureMetric": airIRRCUnitStatusEnteringFluidTemperatureMetric,
       "airIRRCUnitStatusLeavingFluidTemperatureUS": airIRRCUnitStatusLeavingFluidTemperatureUS,
       "airIRRCUnitStatusLeavingFluidTemperatureMetric": airIRRCUnitStatusLeavingFluidTemperatureMetric,
       "airIRRCUnitRunHours": airIRRCUnitRunHours,
       "airIRRCUnitRunHoursAirFilter": airIRRCUnitRunHoursAirFilter,
       "airIRRCUnitRunHoursFan1": airIRRCUnitRunHoursFan1,
       "airIRRCUnitRunHoursFan2": airIRRCUnitRunHoursFan2,
       "airIRRCUnitRunHoursFan3": airIRRCUnitRunHoursFan3,
       "airIRRCUnitRunHoursFan4": airIRRCUnitRunHoursFan4,
       "airIRRCUnitRunHoursFan5": airIRRCUnitRunHoursFan5,
       "airIRRCUnitRunHoursFan6": airIRRCUnitRunHoursFan6,
       "airIRRCUnitRunHoursFan7": airIRRCUnitRunHoursFan7,
       "airIRRCUnitRunHoursFan8": airIRRCUnitRunHoursFan8,
       "airIRRCUnitRunHoursFanPowerSupplyLeft": airIRRCUnitRunHoursFanPowerSupplyLeft,
       "airIRRCUnitRunHoursFanPowerSupplyRight": airIRRCUnitRunHoursFanPowerSupplyRight,
       "airIRRCUnitRunHoursCondensatePump": airIRRCUnitRunHoursCondensatePump,
       "airIRRCUnitServiceIntervals": airIRRCUnitServiceIntervals,
       "airIRRCUnitServiceIntervalsAirFilter": airIRRCUnitServiceIntervalsAirFilter,
       "airIRRCUnitServiceIntervalsAirFilterAlarm": airIRRCUnitServiceIntervalsAirFilterAlarm,
       "airIRRCUnitThresholds": airIRRCUnitThresholds,
       "airIRRCUnitThresholdsRackInletHighTempUS": airIRRCUnitThresholdsRackInletHighTempUS,
       "airIRRCUnitThresholdsRackInletHighTempMetric": airIRRCUnitThresholdsRackInletHighTempMetric,
       "airIRRCUnitThresholdsSupplyAirHighTempUS": airIRRCUnitThresholdsSupplyAirHighTempUS,
       "airIRRCUnitThresholdsSupplyAirHighTempMetric": airIRRCUnitThresholdsSupplyAirHighTempMetric,
       "airIRRCUnitThresholdsReturnAirHighTempUS": airIRRCUnitThresholdsReturnAirHighTempUS,
       "airIRRCUnitThresholdsReturnAirHighTempMetric": airIRRCUnitThresholdsReturnAirHighTempMetric,
       "airIRRCUnitThresholdsEnteringFluidHighTempUS": airIRRCUnitThresholdsEnteringFluidHighTempUS,
       "airIRRCUnitThresholdsEnteringFluidHighTempMetric": airIRRCUnitThresholdsEnteringFluidHighTempMetric,
       "airIRRCUnitConfig": airIRRCUnitConfig,
       "airIRRCUnitConfigCoolCapacity": airIRRCUnitConfigCoolCapacity,
       "airIRRCUnitConfigStartupDelay": airIRRCUnitConfigStartupDelay,
       "airIRRCUnitConfigIdleOnLeakDetect": airIRRCUnitConfigIdleOnLeakDetect,
       "airIRRCUnitConfigPowerSource": airIRRCUnitConfigPowerSource,
       "airIRRCUnitConfigInputNormalState": airIRRCUnitConfigInputNormalState,
       "airIRRCUnitConfigOutputNormalState": airIRRCUnitConfigOutputNormalState,
       "airIRRCUnitConfigOutputSource": airIRRCUnitConfigOutputSource,
       "airIRRCUnitConfigIdleOnCoolFail": airIRRCUnitConfigIdleOnCoolFail,
       "airIRRP": airIRRP,
       "airIRRP100": airIRRP100,
       "airIRRP100Group": airIRRP100Group,
       "airIRRP100GroupStatus": airIRRP100GroupStatus,
       "airIRRP100GroupStatusAirFlowUS": airIRRP100GroupStatusAirFlowUS,
       "airIRRP100GroupStatusAirFlowMetric": airIRRP100GroupStatusAirFlowMetric,
       "airIRRP100GroupStatusMaxRackInletTempUS": airIRRP100GroupStatusMaxRackInletTempUS,
       "airIRRP100GroupStatusMaxRackInletTempMetric": airIRRP100GroupStatusMaxRackInletTempMetric,
       "airIRRP100GroupStatusMinRackInletTempUS": airIRRP100GroupStatusMinRackInletTempUS,
       "airIRRP100GroupStatusMinRackInletTempMetric": airIRRP100GroupStatusMinRackInletTempMetric,
       "airIRRP100GroupStatusCoolDemand": airIRRP100GroupStatusCoolDemand,
       "airIRRP100GroupStatusCoolOutput": airIRRP100GroupStatusCoolOutput,
       "airIRRP100GroupStatusHumidifyDemand": airIRRP100GroupStatusHumidifyDemand,
       "airIRRP100GroupStatusHumidifyOutput": airIRRP100GroupStatusHumidifyOutput,
       "airIRRP100GroupStatusDehumidifyDemand": airIRRP100GroupStatusDehumidifyDemand,
       "airIRRP100GroupStatusDehumidifyOutput": airIRRP100GroupStatusDehumidifyOutput,
       "airIRRP100GroupStatusReheatDemand": airIRRP100GroupStatusReheatDemand,
       "airIRRP100GroupStatusReheatOutput": airIRRP100GroupStatusReheatOutput,
       "airIRRP100GroupSetpoints": airIRRP100GroupSetpoints,
       "airIRRP100GroupSetpointsCoolUS": airIRRP100GroupSetpointsCoolUS,
       "airIRRP100GroupSetpointsCoolMetric": airIRRP100GroupSetpointsCoolMetric,
       "airIRRP100GroupSetpointsSupplyAirUS": airIRRP100GroupSetpointsSupplyAirUS,
       "airIRRP100GroupSetpointsSupplyAirMetric": airIRRP100GroupSetpointsSupplyAirMetric,
       "airIRRP100GroupSetpointsHumidify": airIRRP100GroupSetpointsHumidify,
       "airIRRP100GroupSetpointsDehumidify": airIRRP100GroupSetpointsDehumidify,
       "airIRRP100GroupSetpointsDehumidifyDeadband": airIRRP100GroupSetpointsDehumidifyDeadband,
       "airIRRP100GroupSetpointsReheatUS": airIRRP100GroupSetpointsReheatUS,
       "airIRRP100GroupSetpointsReheatMetric": airIRRP100GroupSetpointsReheatMetric,
       "airIRRP100GroupSetpointsFanSpeedPreference": airIRRP100GroupSetpointsFanSpeedPreference,
       "airIRRP100GroupSetpointsFanSpeedControl": airIRRP100GroupSetpointsFanSpeedControl,
       "airIRRP100GroupConfig": airIRRP100GroupConfig,
       "airIRRP100GroupConfigNumberofCoolingUnits": airIRRP100GroupConfigNumberofCoolingUnits,
       "airIRRP100GroupConfigConfigurationType": airIRRP100GroupConfigConfigurationType,
       "airIRRP100GroupConfigCoolGainP": airIRRP100GroupConfigCoolGainP,
       "airIRRP100GroupConfigCoolResetRateI": airIRRP100GroupConfigCoolResetRateI,
       "airIRRP100GroupConfigCoolDerivativeD": airIRRP100GroupConfigCoolDerivativeD,
       "airIRRP100GroupConfigHumidifySensitivityBand": airIRRP100GroupConfigHumidifySensitivityBand,
       "airIRRP100GroupConfigReheatGainP": airIRRP100GroupConfigReheatGainP,
       "airIRRP100GroupConfigReheatResetRateI": airIRRP100GroupConfigReheatResetRateI,
       "airIRRP100GroupConfigReheatDerivativeD": airIRRP100GroupConfigReheatDerivativeD,
       "airIRRP100Unit": airIRRP100Unit,
       "airIRRP100UnitIdent": airIRRP100UnitIdent,
       "airIRRP100UnitIdentID": airIRRP100UnitIdentID,
       "airIRRP100UnitIdentName": airIRRP100UnitIdentName,
       "airIRRP100UnitIdentLocation": airIRRP100UnitIdentLocation,
       "airIRRP100UnitIdentModelNumber": airIRRP100UnitIdentModelNumber,
       "airIRRP100UnitIdentSerialNumber": airIRRP100UnitIdentSerialNumber,
       "airIRRP100UnitIdentFirmwareRevision": airIRRP100UnitIdentFirmwareRevision,
       "airIRRP100UnitIdentHardwareRevision": airIRRP100UnitIdentHardwareRevision,
       "airIRRP100UnitIdentManufactureDate": airIRRP100UnitIdentManufactureDate,
       "airIRRP100UnitStatus": airIRRP100UnitStatus,
       "airIRRP100UnitStatusOperateMode": airIRRP100UnitStatusOperateMode,
       "airIRRP100UnitStatusRackInletTempUS": airIRRP100UnitStatusRackInletTempUS,
       "airIRRP100UnitStatusRackInletTempMetric": airIRRP100UnitStatusRackInletTempMetric,
       "airIRRP100UnitStatusSupplyAirTempUS": airIRRP100UnitStatusSupplyAirTempUS,
       "airIRRP100UnitStatusSupplyAirTempMetric": airIRRP100UnitStatusSupplyAirTempMetric,
       "airIRRP100UnitStatusReturnAirTempUS": airIRRP100UnitStatusReturnAirTempUS,
       "airIRRP100UnitStatusReturnAirTempMetric": airIRRP100UnitStatusReturnAirTempMetric,
       "airIRRP100UnitStatusSupplyHumidity": airIRRP100UnitStatusSupplyHumidity,
       "airIRRP100UnitStatusReturnHumidity": airIRRP100UnitStatusReturnHumidity,
       "airIRRP100UnitStatusAirFlowUS": airIRRP100UnitStatusAirFlowUS,
       "airIRRP100UnitStatusAirFlowMetric": airIRRP100UnitStatusAirFlowMetric,
       "airIRRP100UnitStatusFanSpeed": airIRRP100UnitStatusFanSpeed,
       "airIRRP100UnitStatusCoolDemand": airIRRP100UnitStatusCoolDemand,
       "airIRRP100UnitStatusCoolOutput": airIRRP100UnitStatusCoolOutput,
       "airIRRP100UnitStatusHumidifyDemand": airIRRP100UnitStatusHumidifyDemand,
       "airIRRP100UnitStatusHumidifyOutput": airIRRP100UnitStatusHumidifyOutput,
       "airIRRP100UnitStatusDehumidifyDemand": airIRRP100UnitStatusDehumidifyDemand,
       "airIRRP100UnitStatusDehumidifyOutput": airIRRP100UnitStatusDehumidifyOutput,
       "airIRRP100UnitStatusReheatDemand": airIRRP100UnitStatusReheatDemand,
       "airIRRP100UnitStatusReheatOutput": airIRRP100UnitStatusReheatOutput,
       "airIRRP100UnitStatusInputState": airIRRP100UnitStatusInputState,
       "airIRRP100UnitStatusOutputState": airIRRP100UnitStatusOutputState,
       "airIRRP100UnitStatusRackInletTemperature1US": airIRRP100UnitStatusRackInletTemperature1US,
       "airIRRP100UnitStatusRackInletTemperature1Metric": airIRRP100UnitStatusRackInletTemperature1Metric,
       "airIRRP100UnitStatusRackInletTemperature2US": airIRRP100UnitStatusRackInletTemperature2US,
       "airIRRP100UnitStatusRackInletTemperature2Metric": airIRRP100UnitStatusRackInletTemperature2Metric,
       "airIRRP100UnitStatusRackInletTemperature3US": airIRRP100UnitStatusRackInletTemperature3US,
       "airIRRP100UnitStatusRackInletTemperature3Metric": airIRRP100UnitStatusRackInletTemperature3Metric,
       "airIRRP100UnitStatusFilterDPUS": airIRRP100UnitStatusFilterDPUS,
       "airIRRP100UnitStatusFilterDPMetric": airIRRP100UnitStatusFilterDPMetric,
       "airIRRP100UnitStatusContainmtDPUS": airIRRP100UnitStatusContainmtDPUS,
       "airIRRP100UnitStatusContainmtDPMetric": airIRRP100UnitStatusContainmtDPMetric,
       "airIRRP100UnitStatusHumidifierCurrent": airIRRP100UnitStatusHumidifierCurrent,
       "airIRRP100UnitStatusHumidifierWaterConductivity": airIRRP100UnitStatusHumidifierWaterConductivity,
       "airIRRP100UnitStatusCompressorDriveSpeed": airIRRP100UnitStatusCompressorDriveSpeed,
       "airIRRP100UnitStatusCompressorDrivePower": airIRRP100UnitStatusCompressorDrivePower,
       "airIRRP100UnitStatusCompressorDriveVoltage": airIRRP100UnitStatusCompressorDriveVoltage,
       "airIRRP100UnitStatusCompressorDriveCurrent": airIRRP100UnitStatusCompressorDriveCurrent,
       "airIRRP100UnitStatusCompressorDriveDCLinkVoltage": airIRRP100UnitStatusCompressorDriveDCLinkVoltage,
       "airIRRP100UnitStatusCompressorDriveHeatSinkTempUS": airIRRP100UnitStatusCompressorDriveHeatSinkTempUS,
       "airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric": airIRRP100UnitStatusCompressorDriveHeatSinkTempMetric,
       "airIRRP100UnitStatusCompressorDriveControlCardTempUS": airIRRP100UnitStatusCompressorDriveControlCardTempUS,
       "airIRRP100UnitStatusCompressorDriveControlCardTempMetric": airIRRP100UnitStatusCompressorDriveControlCardTempMetric,
       "airIRRP100UnitStatusCompressorDriveWarningStatus": airIRRP100UnitStatusCompressorDriveWarningStatus,
       "airIRRP100UnitStatusCompressorDriveAlarmStatus": airIRRP100UnitStatusCompressorDriveAlarmStatus,
       "airIRRP100UnitStatusSuctionPressureUS": airIRRP100UnitStatusSuctionPressureUS,
       "airIRRP100UnitStatusSuctionPressureMetric": airIRRP100UnitStatusSuctionPressureMetric,
       "airIRRP100UnitStatusDischargePressureUS": airIRRP100UnitStatusDischargePressureUS,
       "airIRRP100UnitStatusDischargePressureMetric": airIRRP100UnitStatusDischargePressureMetric,
       "airIRRP100UnitRunHours": airIRRP100UnitRunHours,
       "airIRRP100UnitRunHoursAirFilter": airIRRP100UnitRunHoursAirFilter,
       "airIRRP100UnitRunHoursCondensatePump": airIRRP100UnitRunHoursCondensatePump,
       "airIRRP100UnitRunHoursHumidifier": airIRRP100UnitRunHoursHumidifier,
       "airIRRP100UnitRunHoursFan1": airIRRP100UnitRunHoursFan1,
       "airIRRP100UnitRunHoursHeater1": airIRRP100UnitRunHoursHeater1,
       "airIRRP100UnitRunHoursFan2": airIRRP100UnitRunHoursFan2,
       "airIRRP100UnitRunHoursHeater2": airIRRP100UnitRunHoursHeater2,
       "airIRRP100UnitRunHoursCompressor": airIRRP100UnitRunHoursCompressor,
       "airIRRP100UnitServiceIntervals": airIRRP100UnitServiceIntervals,
       "airIRRP100UnitServiceIntervalAirFilter": airIRRP100UnitServiceIntervalAirFilter,
       "airIRRP100UnitServiceIntervalAirFilterAlarm": airIRRP100UnitServiceIntervalAirFilterAlarm,
       "airIRRP100UnitServiceIntervalHumidifier": airIRRP100UnitServiceIntervalHumidifier,
       "airIRRP100UnitServiceIntervalHumidifierAlarm": airIRRP100UnitServiceIntervalHumidifierAlarm,
       "airIRRP100UnitServiceIntervalHeater": airIRRP100UnitServiceIntervalHeater,
       "airIRRP100UnitServiceIntervalHeaterAlarm": airIRRP100UnitServiceIntervalHeaterAlarm,
       "airIRRP100UnitServiceIntervalCompressor": airIRRP100UnitServiceIntervalCompressor,
       "airIRRP100UnitServiceIntervalCompressorAlarm": airIRRP100UnitServiceIntervalCompressorAlarm,
       "airIRRP100UnitServiceIntervalCondensatePump": airIRRP100UnitServiceIntervalCondensatePump,
       "airIRRP100UnitServiceIntervalCondensatePumpAlarm": airIRRP100UnitServiceIntervalCondensatePumpAlarm,
       "airIRRP100UnitServiceIntervalFans": airIRRP100UnitServiceIntervalFans,
       "airIRRP100UnitServiceIntervalFansAlarm": airIRRP100UnitServiceIntervalFansAlarm,
       "airIRRP100UnitThresholds": airIRRP100UnitThresholds,
       "airIRRP100UnitThresholdsRackInletHighTempUS": airIRRP100UnitThresholdsRackInletHighTempUS,
       "airIRRP100UnitThresholdsRackInletHighTempMetric": airIRRP100UnitThresholdsRackInletHighTempMetric,
       "airIRRP100UnitThresholdsSupplyAirHighTempUS": airIRRP100UnitThresholdsSupplyAirHighTempUS,
       "airIRRP100UnitThresholdsSupplyAirHighTempMetric": airIRRP100UnitThresholdsSupplyAirHighTempMetric,
       "airIRRP100UnitThresholdsReturnAirHighTempUS": airIRRP100UnitThresholdsReturnAirHighTempUS,
       "airIRRP100UnitThresholdsReturnAirHighTempMetric": airIRRP100UnitThresholdsReturnAirHighTempMetric,
       "airIRRP100UnitThresholdsSupplyHumidityHigh": airIRRP100UnitThresholdsSupplyHumidityHigh,
       "airIRRP100UnitThresholdsSupplyHumidityLow": airIRRP100UnitThresholdsSupplyHumidityLow,
       "airIRRP100UnitConfig": airIRRP100UnitConfig,
       "airIRRP100UnitConfigStartupDelay": airIRRP100UnitConfigStartupDelay,
       "airIRRP100UnitConfigCoolCapacity": airIRRP100UnitConfigCoolCapacity,
       "airIRRP100UnitConfigIdleOnLeakDetect": airIRRP100UnitConfigIdleOnLeakDetect,
       "airIRRP100UnitConfigInputNormalState": airIRRP100UnitConfigInputNormalState,
       "airIRRP100UnitConfigOutputNormalState": airIRRP100UnitConfigOutputNormalState,
       "airIRRP100UnitConfigOutputSource": airIRRP100UnitConfigOutputSource,
       "airIRRP100UnitConfigHumidifyEnable": airIRRP100UnitConfigHumidifyEnable,
       "airIRRP100UnitConfigHumidifierControl": airIRRP100UnitConfigHumidifierControl,
       "airIRRP100UnitConfigDehumidifyEnable": airIRRP100UnitConfigDehumidifyEnable,
       "airIRRP100UnitConfigReheatEnable": airIRRP100UnitConfigReheatEnable,
       "airIRRP100UnitConfigHeatAssistEnable": airIRRP100UnitConfigHeatAssistEnable,
       "airIRRP500": airIRRP500,
       "airIRRP500Group": airIRRP500Group,
       "airIRRP500GroupStatus": airIRRP500GroupStatus,
       "airIRRP500GroupStatusAirFlowUS": airIRRP500GroupStatusAirFlowUS,
       "airIRRP500GroupStatusAirFlowMetric": airIRRP500GroupStatusAirFlowMetric,
       "airIRRP500GroupStatusMaxRackInletTempUS": airIRRP500GroupStatusMaxRackInletTempUS,
       "airIRRP500GroupStatusMaxRackInletTempMetric": airIRRP500GroupStatusMaxRackInletTempMetric,
       "airIRRP500GroupStatusMinRackInletTempUS": airIRRP500GroupStatusMinRackInletTempUS,
       "airIRRP500GroupStatusMinRackInletTempMetric": airIRRP500GroupStatusMinRackInletTempMetric,
       "airIRRP500GroupStatusCoolDemand": airIRRP500GroupStatusCoolDemand,
       "airIRRP500GroupStatusCoolOutput": airIRRP500GroupStatusCoolOutput,
       "airIRRP500GroupStatusHumidifyDemand": airIRRP500GroupStatusHumidifyDemand,
       "airIRRP500GroupStatusHumidifyOutput": airIRRP500GroupStatusHumidifyOutput,
       "airIRRP500GroupStatusDehumidifyDemand": airIRRP500GroupStatusDehumidifyDemand,
       "airIRRP500GroupStatusDehumidifyOutput": airIRRP500GroupStatusDehumidifyOutput,
       "airIRRP500GroupStatusReheatDemand": airIRRP500GroupStatusReheatDemand,
       "airIRRP500GroupStatusReheatOutput": airIRRP500GroupStatusReheatOutput,
       "airIRRP500GroupSetpoints": airIRRP500GroupSetpoints,
       "airIRRP500GroupSetpointsCoolUS": airIRRP500GroupSetpointsCoolUS,
       "airIRRP500GroupSetpointsCoolMetric": airIRRP500GroupSetpointsCoolMetric,
       "airIRRP500GroupSetpointsSupplyAirUS": airIRRP500GroupSetpointsSupplyAirUS,
       "airIRRP500GroupSetpointsSupplyAirMetric": airIRRP500GroupSetpointsSupplyAirMetric,
       "airIRRP500GroupSetpointsHumidify": airIRRP500GroupSetpointsHumidify,
       "airIRRP500GroupSetpointsDehumidify": airIRRP500GroupSetpointsDehumidify,
       "airIRRP500GroupSetpointsDehumidifyDeadband": airIRRP500GroupSetpointsDehumidifyDeadband,
       "airIRRP500GroupSetpointsReheatUS": airIRRP500GroupSetpointsReheatUS,
       "airIRRP500GroupSetpointsReheatMetric": airIRRP500GroupSetpointsReheatMetric,
       "airIRRP500GroupSetpointsFanSpeedPreference": airIRRP500GroupSetpointsFanSpeedPreference,
       "airIRRP500GroupSetpointsFanSpeedControl": airIRRP500GroupSetpointsFanSpeedControl,
       "airIRRP500GroupConfig": airIRRP500GroupConfig,
       "airIRRP500GroupConfigNumberofCoolingUnits": airIRRP500GroupConfigNumberofCoolingUnits,
       "airIRRP500GroupConfigConfigurationType": airIRRP500GroupConfigConfigurationType,
       "airIRRP500GroupConfigPercentGlycol": airIRRP500GroupConfigPercentGlycol,
       "airIRRP500GroupConfigCoolGainP": airIRRP500GroupConfigCoolGainP,
       "airIRRP500GroupConfigCoolResetRateI": airIRRP500GroupConfigCoolResetRateI,
       "airIRRP500GroupConfigCoolDerivativeD": airIRRP500GroupConfigCoolDerivativeD,
       "airIRRP500GroupConfigHumidifySensitivityBand": airIRRP500GroupConfigHumidifySensitivityBand,
       "airIRRP500GroupConfigReheatGainP": airIRRP500GroupConfigReheatGainP,
       "airIRRP500GroupConfigReheatResetRateI": airIRRP500GroupConfigReheatResetRateI,
       "airIRRP500GroupConfigReheatDerivativeD": airIRRP500GroupConfigReheatDerivativeD,
       "airIRRP500Unit": airIRRP500Unit,
       "airIRRP500UnitIdent": airIRRP500UnitIdent,
       "airIRRP500UnitIdentID": airIRRP500UnitIdentID,
       "airIRRP500UnitIdentName": airIRRP500UnitIdentName,
       "airIRRP500UnitIdentLocation": airIRRP500UnitIdentLocation,
       "airIRRP500UnitIdentModelNumber": airIRRP500UnitIdentModelNumber,
       "airIRRP500UnitIdentSerialNumber": airIRRP500UnitIdentSerialNumber,
       "airIRRP500UnitIdentFirmwareRevision": airIRRP500UnitIdentFirmwareRevision,
       "airIRRP500UnitIdentHardwareRevision": airIRRP500UnitIdentHardwareRevision,
       "airIRRP500UnitIdentManufactureDate": airIRRP500UnitIdentManufactureDate,
       "airIRRP500UnitStatus": airIRRP500UnitStatus,
       "airIRRP500UnitStatusOperateMode": airIRRP500UnitStatusOperateMode,
       "airIRRP500UnitStatusMaximumRackInletTempUS": airIRRP500UnitStatusMaximumRackInletTempUS,
       "airIRRP500UnitStatusMaximumRackInletTempMetric": airIRRP500UnitStatusMaximumRackInletTempMetric,
       "airIRRP500UnitStatusSupplyAirTempUS": airIRRP500UnitStatusSupplyAirTempUS,
       "airIRRP500UnitStatusSupplyAirTempMetric": airIRRP500UnitStatusSupplyAirTempMetric,
       "airIRRP500UnitStatusReturnAirTempUS": airIRRP500UnitStatusReturnAirTempUS,
       "airIRRP500UnitStatusReturnAirTempMetric": airIRRP500UnitStatusReturnAirTempMetric,
       "airIRRP500UnitStatusSupplyHumidity": airIRRP500UnitStatusSupplyHumidity,
       "airIRRP500UnitStatusReturnHumidity": airIRRP500UnitStatusReturnHumidity,
       "airIRRP500UnitStatusAirFlowUS": airIRRP500UnitStatusAirFlowUS,
       "airIRRP500UnitStatusAirFlowMetric": airIRRP500UnitStatusAirFlowMetric,
       "airIRRP500UnitStatusFanSpeed": airIRRP500UnitStatusFanSpeed,
       "airIRRP500UnitStatusCoolDemand": airIRRP500UnitStatusCoolDemand,
       "airIRRP500UnitStatusCoolOutput": airIRRP500UnitStatusCoolOutput,
       "airIRRP500UnitStatusHumidifyDemand": airIRRP500UnitStatusHumidifyDemand,
       "airIRRP500UnitStatusHumidifyOutput": airIRRP500UnitStatusHumidifyOutput,
       "airIRRP500UnitStatusDehumidifyDemand": airIRRP500UnitStatusDehumidifyDemand,
       "airIRRP500UnitStatusDehumidifyOutput": airIRRP500UnitStatusDehumidifyOutput,
       "airIRRP500UnitStatusReheatDemand": airIRRP500UnitStatusReheatDemand,
       "airIRRP500UnitStatusReheatOutput": airIRRP500UnitStatusReheatOutput,
       "airIRRP500UnitStatusInputState": airIRRP500UnitStatusInputState,
       "airIRRP500UnitStatusOutputState": airIRRP500UnitStatusOutputState,
       "airIRRP500UnitStatusRackInletTemperature1US": airIRRP500UnitStatusRackInletTemperature1US,
       "airIRRP500UnitStatusRackInletTemperature1Metric": airIRRP500UnitStatusRackInletTemperature1Metric,
       "airIRRP500UnitStatusRackInletTemperature2US": airIRRP500UnitStatusRackInletTemperature2US,
       "airIRRP500UnitStatusRackInletTemperature2Metric": airIRRP500UnitStatusRackInletTemperature2Metric,
       "airIRRP500UnitStatusRackInletTemperature3US": airIRRP500UnitStatusRackInletTemperature3US,
       "airIRRP500UnitStatusRackInletTemperature3Metric": airIRRP500UnitStatusRackInletTemperature3Metric,
       "airIRRP500UnitStatusContainmtDPUS": airIRRP500UnitStatusContainmtDPUS,
       "airIRRP500UnitStatusContainmtDPMetric": airIRRP500UnitStatusContainmtDPMetric,
       "airIRRP500UnitStatusFilterDPUS": airIRRP500UnitStatusFilterDPUS,
       "airIRRP500UnitStatusFilterDPMetric": airIRRP500UnitStatusFilterDPMetric,
       "airIRRP500UnitStatusHumidifierCurrent": airIRRP500UnitStatusHumidifierCurrent,
       "airIRRP500UnitStatusHumidifierWaterConductivity": airIRRP500UnitStatusHumidifierWaterConductivity,
       "airIRRP500UnitStatusActivePowerSource": airIRRP500UnitStatusActivePowerSource,
       "airIRRP500UnitStatusFluidValvePosition": airIRRP500UnitStatusFluidValvePosition,
       "airIRRP500UnitStatusFluidFlowUS": airIRRP500UnitStatusFluidFlowUS,
       "airIRRP500UnitStatusFluidFlowMetric": airIRRP500UnitStatusFluidFlowMetric,
       "airIRRP500UnitStatusEnteringFluidTemperatureUS": airIRRP500UnitStatusEnteringFluidTemperatureUS,
       "airIRRP500UnitStatusEnteringFluidTemperatureMetric": airIRRP500UnitStatusEnteringFluidTemperatureMetric,
       "airIRRP500UnitStatusLeavingFluidTemperatureUS": airIRRP500UnitStatusLeavingFluidTemperatureUS,
       "airIRRP500UnitStatusLeavingFluidTemperatureMetric": airIRRP500UnitStatusLeavingFluidTemperatureMetric,
       "airIRRP500UnitRunHours": airIRRP500UnitRunHours,
       "airIRRP500UnitRunHoursAirFilter": airIRRP500UnitRunHoursAirFilter,
       "airIRRP500UnitRunHoursCondensatePump": airIRRP500UnitRunHoursCondensatePump,
       "airIRRP500UnitRunHoursHumidifier": airIRRP500UnitRunHoursHumidifier,
       "airIRRP500UnitRunHoursFan1": airIRRP500UnitRunHoursFan1,
       "airIRRP500UnitRunHoursHeater1": airIRRP500UnitRunHoursHeater1,
       "airIRRP500UnitRunHoursFan2": airIRRP500UnitRunHoursFan2,
       "airIRRP500UnitRunHoursHeater2": airIRRP500UnitRunHoursHeater2,
       "airIRRP500UnitRunHoursFan3": airIRRP500UnitRunHoursFan3,
       "airIRRP500UnitRunHoursHeater3": airIRRP500UnitRunHoursHeater3,
       "airIRRP500UnitServiceIntervals": airIRRP500UnitServiceIntervals,
       "airIRRP500UnitServiceIntervalAirFilter": airIRRP500UnitServiceIntervalAirFilter,
       "airIRRP500UnitServiceIntervalAirFilterAlarm": airIRRP500UnitServiceIntervalAirFilterAlarm,
       "airIRRP500UnitServiceIntervalHumidifier": airIRRP500UnitServiceIntervalHumidifier,
       "airIRRP500UnitServiceIntervalHumidifierAlarm": airIRRP500UnitServiceIntervalHumidifierAlarm,
       "airIRRP500UnitServiceIntervalHeater": airIRRP500UnitServiceIntervalHeater,
       "airIRRP500UnitServiceIntervalHeaterAlarm": airIRRP500UnitServiceIntervalHeaterAlarm,
       "airIRRP500UnitServiceIntervalCondensatePump": airIRRP500UnitServiceIntervalCondensatePump,
       "airIRRP500UnitServiceIntervalCondensatePumpAlarm": airIRRP500UnitServiceIntervalCondensatePumpAlarm,
       "airIRRP500UnitServiceIntervalFans": airIRRP500UnitServiceIntervalFans,
       "airIRRP500UnitServiceIntervalFansAlarm": airIRRP500UnitServiceIntervalFansAlarm,
       "airIRRP500UnitThresholds": airIRRP500UnitThresholds,
       "airIRRP500UnitThresholdsRackInletHighTempUS": airIRRP500UnitThresholdsRackInletHighTempUS,
       "airIRRP500UnitThresholdsRackInletHighTempMetric": airIRRP500UnitThresholdsRackInletHighTempMetric,
       "airIRRP500UnitThresholdsSupplyAirHighTempUS": airIRRP500UnitThresholdsSupplyAirHighTempUS,
       "airIRRP500UnitThresholdsSupplyAirHighTempMetric": airIRRP500UnitThresholdsSupplyAirHighTempMetric,
       "airIRRP500UnitThresholdsReturnAirHighTempUS": airIRRP500UnitThresholdsReturnAirHighTempUS,
       "airIRRP500UnitThresholdsReturnAirHighTempMetric": airIRRP500UnitThresholdsReturnAirHighTempMetric,
       "airIRRP500UnitThresholdsSupplyHumidityHigh": airIRRP500UnitThresholdsSupplyHumidityHigh,
       "airIRRP500UnitThresholdsSupplyHumidityLow": airIRRP500UnitThresholdsSupplyHumidityLow,
       "airIRRP500UnitThresholdsEnteringFluidHighTempUS": airIRRP500UnitThresholdsEnteringFluidHighTempUS,
       "airIRRP500UnitThresholdsEnteringFluidHighTempMetric": airIRRP500UnitThresholdsEnteringFluidHighTempMetric,
       "airIRRP500UnitConfig": airIRRP500UnitConfig,
       "airIRRP500UnitConfigStartupDelay": airIRRP500UnitConfigStartupDelay,
       "airIRRP500UnitConfigCoolCapacity": airIRRP500UnitConfigCoolCapacity,
       "airIRRP500UnitConfigIdleOnLeakDetect": airIRRP500UnitConfigIdleOnLeakDetect,
       "airIRRP500UnitConfigInputNormalState": airIRRP500UnitConfigInputNormalState,
       "airIRRP500UnitConfigOutputNormalState": airIRRP500UnitConfigOutputNormalState,
       "airIRRP500UnitConfigOutputSource": airIRRP500UnitConfigOutputSource,
       "airIRRP500UnitConfigHumidifyEnable": airIRRP500UnitConfigHumidifyEnable,
       "airIRRP500UnitConfigHumidifierControl": airIRRP500UnitConfigHumidifierControl,
       "airIRRP500UnitConfigDehumidifyEnable": airIRRP500UnitConfigDehumidifyEnable,
       "airIRRP500UnitConfigReheatEnable": airIRRP500UnitConfigReheatEnable,
       "airIRRP500UnitConfigHeatAssistEnable": airIRRP500UnitConfigHeatAssistEnable,
       "airIRSC": airIRSC,
       "airIRSCUnit": airIRSCUnit,
       "airIRSCUnitIdent": airIRSCUnitIdent,
       "airIRSCUnitIdentName": airIRSCUnitIdentName,
       "airIRSCUnitIdentLocation": airIRSCUnitIdentLocation,
       "airIRSCUnitIdentModelNumber": airIRSCUnitIdentModelNumber,
       "airIRSCUnitIdentSerialNumber": airIRSCUnitIdentSerialNumber,
       "airIRSCUnitIdentFirmwareRevision": airIRSCUnitIdentFirmwareRevision,
       "airIRSCUnitIdentHardwareRevision": airIRSCUnitIdentHardwareRevision,
       "airIRSCUnitIdentManufactureDate": airIRSCUnitIdentManufactureDate,
       "airIRSCUnitStatus": airIRSCUnitStatus,
       "airIRSCUnitStatusOperateMode": airIRSCUnitStatusOperateMode,
       "airIRSCUnitStatusCoolOutput": airIRSCUnitStatusCoolOutput,
       "airIRSCUnitStatusCoolDemand": airIRSCUnitStatusCoolDemand,
       "airIRSCUnitStatusAirFlowUS": airIRSCUnitStatusAirFlowUS,
       "airIRSCUnitStatusAirFlowMetric": airIRSCUnitStatusAirFlowMetric,
       "airIRSCUnitStatusRackInletTempUS": airIRSCUnitStatusRackInletTempUS,
       "airIRSCUnitStatusRackInletTempMetric": airIRSCUnitStatusRackInletTempMetric,
       "airIRSCUnitStatusSupplyAirTempUS": airIRSCUnitStatusSupplyAirTempUS,
       "airIRSCUnitStatusSupplyAirTempMetric": airIRSCUnitStatusSupplyAirTempMetric,
       "airIRSCUnitStatusReturnAirTempUS": airIRSCUnitStatusReturnAirTempUS,
       "airIRSCUnitStatusReturnAirTempMetric": airIRSCUnitStatusReturnAirTempMetric,
       "airIRSCUnitStatusSuctionTempUS": airIRSCUnitStatusSuctionTempUS,
       "airIRSCUnitStatusSuctionTempMetric": airIRSCUnitStatusSuctionTempMetric,
       "airIRSCUnitStatusSuperheatTempUS": airIRSCUnitStatusSuperheatTempUS,
       "airIRSCUnitStatusSuperheatTempMetric": airIRSCUnitStatusSuperheatTempMetric,
       "airIRSCUnitStatusContainmtDPUS": airIRSCUnitStatusContainmtDPUS,
       "airIRSCUnitStatusContainmtDPMetric": airIRSCUnitStatusContainmtDPMetric,
       "airIRSCUnitStatusFilterDPUS": airIRSCUnitStatusFilterDPUS,
       "airIRSCUnitStatusFilterDPMetric": airIRSCUnitStatusFilterDPMetric,
       "airIRSCUnitStatusSuctionPressureUS": airIRSCUnitStatusSuctionPressureUS,
       "airIRSCUnitStatusSuctionPressureMetric": airIRSCUnitStatusSuctionPressureMetric,
       "airIRSCUnitStatusDischargePressureUS": airIRSCUnitStatusDischargePressureUS,
       "airIRSCUnitStatusDischargePressureMetric": airIRSCUnitStatusDischargePressureMetric,
       "airIRSCUnitStatusEvaporatorFanSpeed": airIRSCUnitStatusEvaporatorFanSpeed,
       "airIRSCUnitStatusCondenserFanSpeed": airIRSCUnitStatusCondenserFanSpeed,
       "airIRSCUnitStatusInputState": airIRSCUnitStatusInputState,
       "airIRSCUnitStatusOutputState": airIRSCUnitStatusOutputState,
       "airIRSCUnitStatusCondOutletTempUS": airIRSCUnitStatusCondOutletTempUS,
       "airIRSCUnitStatusCondOutletTempMetric": airIRSCUnitStatusCondOutletTempMetric,
       "airIRSCUnitStatusCondInletTempUS": airIRSCUnitStatusCondInletTempUS,
       "airIRSCUnitStatusCondInletTempMetric": airIRSCUnitStatusCondInletTempMetric,
       "airIRSCUnitStatusCompressor": airIRSCUnitStatusCompressor,
       "airIRSCUnitRunHours": airIRSCUnitRunHours,
       "airIRSCUnitRunHoursAirFilter": airIRSCUnitRunHoursAirFilter,
       "airIRSCUnitRunHoursEvaporatorFan1": airIRSCUnitRunHoursEvaporatorFan1,
       "airIRSCUnitRunHoursEvaporatorFan2": airIRSCUnitRunHoursEvaporatorFan2,
       "airIRSCUnitRunHoursEvaporatorFan3": airIRSCUnitRunHoursEvaporatorFan3,
       "airIRSCUnitRunHoursCondenserFan1": airIRSCUnitRunHoursCondenserFan1,
       "airIRSCUnitRunHoursCondenserFan2": airIRSCUnitRunHoursCondenserFan2,
       "airIRSCUnitRunHoursCondenserFan3": airIRSCUnitRunHoursCondenserFan3,
       "airIRSCUnitRunHoursFanPowerSupplyLeft": airIRSCUnitRunHoursFanPowerSupplyLeft,
       "airIRSCUnitRunHoursFanPowerSupplyRight": airIRSCUnitRunHoursFanPowerSupplyRight,
       "airIRSCUnitRunHoursCondensatePump": airIRSCUnitRunHoursCondensatePump,
       "airIRSCUnitRunHoursCompressor": airIRSCUnitRunHoursCompressor,
       "airIRSCUnitServiceIntervals": airIRSCUnitServiceIntervals,
       "airIRSCUnitServiceIntervalsAirFilter": airIRSCUnitServiceIntervalsAirFilter,
       "airIRSCUnitServiceIntervalsAirFilterAlarm": airIRSCUnitServiceIntervalsAirFilterAlarm,
       "airIRSCUnitThresholds": airIRSCUnitThresholds,
       "airIRSCUnitThresholdsRackInletHighTempUS": airIRSCUnitThresholdsRackInletHighTempUS,
       "airIRSCUnitThresholdsRackInletHighTempMetric": airIRSCUnitThresholdsRackInletHighTempMetric,
       "airIRSCUnitThresholdsSupplyAirHighTempUS": airIRSCUnitThresholdsSupplyAirHighTempUS,
       "airIRSCUnitThresholdsSupplyAirHighTempMetric": airIRSCUnitThresholdsSupplyAirHighTempMetric,
       "airIRSCUnitThresholdsReturnAirHighTempUS": airIRSCUnitThresholdsReturnAirHighTempUS,
       "airIRSCUnitThresholdsReturnAirHighTempMetric": airIRSCUnitThresholdsReturnAirHighTempMetric,
       "airIRSCUnitSetpoints": airIRSCUnitSetpoints,
       "airIRSCUnitSetptsCoolSetpointUS": airIRSCUnitSetptsCoolSetpointUS,
       "airIRSCUnitSetptsCoolSetpointMetric": airIRSCUnitSetptsCoolSetpointMetric,
       "airIRSCUnitSetptsCoolDeadbandUS": airIRSCUnitSetptsCoolDeadbandUS,
       "airIRSCUnitSetptsCoolDeadbandMetric": airIRSCUnitSetptsCoolDeadbandMetric,
       "airIRSCUnitSetptsFanSpeedPreference": airIRSCUnitSetptsFanSpeedPreference,
       "airIRSCUnitSetptsSupplyAirSetpointUS": airIRSCUnitSetptsSupplyAirSetpointUS,
       "airIRSCUnitSetptsSupplyAirSetpointMetric": airIRSCUnitSetptsSupplyAirSetpointMetric,
       "airIRSCUnitConfig": airIRSCUnitConfig,
       "airIRSCUnitConfigConfigurationType": airIRSCUnitConfigConfigurationType,
       "airIRSCUnitConfigCapacityControlType": airIRSCUnitConfigCapacityControlType,
       "airIRSCUnitConfigStartupDelay": airIRSCUnitConfigStartupDelay,
       "airIRSCUnitConfigIdleOnLeakDetect": airIRSCUnitConfigIdleOnLeakDetect,
       "airIRSCUnitConfigInputNormalState": airIRSCUnitConfigInputNormalState,
       "airIRSCUnitConfigOutputNormalState": airIRSCUnitConfigOutputNormalState,
       "airIRSCUnitConfigOutputSource": airIRSCUnitConfigOutputSource,
       "airIRSCUnitConfigAltitudeUS": airIRSCUnitConfigAltitudeUS,
       "airIRSCUnitConfigAltitudeMetric": airIRSCUnitConfigAltitudeMetric,
       "airIRSCUnitConfigOpControl": airIRSCUnitConfigOpControl,
       "airIRSCGroup": airIRSCGroup,
       "airIRSCGroupStatus": airIRSCGroupStatus,
       "airIRSCGroupStatusCoolOutput": airIRSCGroupStatusCoolOutput,
       "airIRSCGroupStatusCoolDemand": airIRSCGroupStatusCoolDemand,
       "airIRSCGroupStatusAirFlowUS": airIRSCGroupStatusAirFlowUS,
       "airIRSCGroupStatusAirFlowMetric": airIRSCGroupStatusAirFlowMetric,
       "airIRSCGroupStatusMaxRackInletTempUS": airIRSCGroupStatusMaxRackInletTempUS,
       "airIRSCGroupStatusMaxRackInletTempMetric": airIRSCGroupStatusMaxRackInletTempMetric,
       "airIRSCGroupStatusMinRackInletTempUS": airIRSCGroupStatusMinRackInletTempUS,
       "airIRSCGroupStatusMinRackInletTempMetric": airIRSCGroupStatusMinRackInletTempMetric,
       "airIRSCGroupStatusMaxReturnAirTempUS": airIRSCGroupStatusMaxReturnAirTempUS,
       "airIRSCGroupStatusMaxReturnAirTempMetric": airIRSCGroupStatusMaxReturnAirTempMetric,
       "airIRSCGroupStatusMinReturnAirTempUS": airIRSCGroupStatusMinReturnAirTempUS,
       "airIRSCGroupStatusMinReturnAirTempMetric": airIRSCGroupStatusMinReturnAirTempMetric,
       "airIRSCGroupSetpoints": airIRSCGroupSetpoints,
       "airIRSCGroupSetptsCoolSetpointUS": airIRSCGroupSetptsCoolSetpointUS,
       "airIRSCGroupSetptsCoolSetpointMetric": airIRSCGroupSetptsCoolSetpointMetric,
       "airIRSCGroupSetptsCoolDeadbandUS": airIRSCGroupSetptsCoolDeadbandUS,
       "airIRSCGroupSetptsCoolDeadbandMetric": airIRSCGroupSetptsCoolDeadbandMetric,
       "airIRSCGroupSetptsFanSpeedPreference": airIRSCGroupSetptsFanSpeedPreference,
       "airIRSCGroupSetptsSupplyAirSetpointUS": airIRSCGroupSetptsSupplyAirSetpointUS,
       "airIRSCGroupSetptsSupplyAirSetpointMetric": airIRSCGroupSetptsSupplyAirSetpointMetric,
       "airIRSCGroupConfig": airIRSCGroupConfig,
       "airIRSCGroupConfigNumberofCoolingUnits": airIRSCGroupConfigNumberofCoolingUnits,
       "airIRSCGroupConfigConfigurationType": airIRSCGroupConfigConfigurationType,
       "airIRSCGroupConfigCapacityControlType": airIRSCGroupConfigCapacityControlType,
       "airIRSCGroupConfigAltitudeUS": airIRSCGroupConfigAltitudeUS,
       "airIRSCGroupConfigAltitudeMetric": airIRSCGroupConfigAltitudeMetric,
       "airIRSCGroupConfigFanSpeedControl": airIRSCGroupConfigFanSpeedControl,
       "airIRGen2": airIRGen2,
       "airIRG2Ident": airIRG2Ident,
       "airIRG2IdentName": airIRG2IdentName,
       "airIRG2IdentLocation": airIRG2IdentLocation,
       "airIRG2IdentModelNumber": airIRG2IdentModelNumber,
       "airIRG2IdentSerialNumber": airIRG2IdentSerialNumber,
       "airIRG2IdentFirmwareRevision": airIRG2IdentFirmwareRevision,
       "airIRG2IdentHardwareRevision": airIRG2IdentHardwareRevision,
       "airIRG2IdentManufactureDate": airIRG2IdentManufactureDate,
       "airIRG2IdentUnitSysOID": airIRG2IdentUnitSysOID,
       "airIRG2IdentGroupSysOID": airIRG2IdentGroupSysOID,
       "airIRG2Group": airIRG2Group,
       "airIRG2GroupStatus": airIRG2GroupStatus,
       "airIRG2GroupStatusCoolOutput": airIRG2GroupStatusCoolOutput,
       "airIRG2GroupStatusCoolDemand": airIRG2GroupStatusCoolDemand,
       "airIRG2GroupStatusAirFlowUS": airIRG2GroupStatusAirFlowUS,
       "airIRG2GroupStatusAirFlowMetric": airIRG2GroupStatusAirFlowMetric,
       "airIRG2GroupStatusMaxRackInletTempUS": airIRG2GroupStatusMaxRackInletTempUS,
       "airIRG2GroupStatusMaxRackInletTempMetric": airIRG2GroupStatusMaxRackInletTempMetric,
       "airIRG2GroupStatusMinRackInletTempUS": airIRG2GroupStatusMinRackInletTempUS,
       "airIRG2GroupStatusMinRackInletTempMetric": airIRG2GroupStatusMinRackInletTempMetric,
       "airIRG2GroupStatusMaxReturnAirTempUS": airIRG2GroupStatusMaxReturnAirTempUS,
       "airIRG2GroupStatusMaxReturnAirTempMetric": airIRG2GroupStatusMaxReturnAirTempMetric,
       "airIRG2GroupStatusMinReturnAirTempUS": airIRG2GroupStatusMinReturnAirTempUS,
       "airIRG2GroupStatusMinReturnAirTempMetric": airIRG2GroupStatusMinReturnAirTempMetric,
       "airIRG2GroupSetpoints": airIRG2GroupSetpoints,
       "airIRG2GroupSetptsCoolSetpointUS": airIRG2GroupSetptsCoolSetpointUS,
       "airIRG2GroupSetptsCoolSetpointMetric": airIRG2GroupSetptsCoolSetpointMetric,
       "airIRG2GroupSetptsCoolDeadbandUS": airIRG2GroupSetptsCoolDeadbandUS,
       "airIRG2GroupSetptsCoolDeadbandMetric": airIRG2GroupSetptsCoolDeadbandMetric,
       "airIRG2GroupSetptsFanSpeedPreference": airIRG2GroupSetptsFanSpeedPreference,
       "airIRG2GroupSetptsSupplyAirSetpointUS": airIRG2GroupSetptsSupplyAirSetpointUS,
       "airIRG2GroupSetptsSupplyAirSetpointMetric": airIRG2GroupSetptsSupplyAirSetpointMetric,
       "airIRG2GroupConfig": airIRG2GroupConfig,
       "airIRG2GroupConfigNumberofCoolingUnits": airIRG2GroupConfigNumberofCoolingUnits,
       "airIRG2GroupConfigConfigurationType": airIRG2GroupConfigConfigurationType,
       "airIRG2GroupConfigCapacityControlType": airIRG2GroupConfigCapacityControlType,
       "airIRG2GroupConfigFanSpeedControl": airIRG2GroupConfigFanSpeedControl,
       "airIRG2GroupConfigCoolGainP": airIRG2GroupConfigCoolGainP,
       "airIRG2GroupConfigCoolResetRateI": airIRG2GroupConfigCoolResetRateI,
       "airIRG2GroupConfigCoolDerivativeD": airIRG2GroupConfigCoolDerivativeD,
       "airIRG2GroupConfigCoolPIDReset": airIRG2GroupConfigCoolPIDReset,
       "airIRG2GroupConfigNumberofBackupUnits": airIRG2GroupConfigNumberofBackupUnits,
       "airIRG2GroupConfigRuntimeBalancingEnable": airIRG2GroupConfigRuntimeBalancingEnable,
       "airIRG2GroupConfigLoadAssistEnable": airIRG2GroupConfigLoadAssistEnable,
       "airIRG2Alarms": airIRG2Alarms,
       "airIRG2AlarmsTableSize": airIRG2AlarmsTableSize,
       "airIRG2AlarmsTable": airIRG2AlarmsTable,
       "airIRG2AlarmsEntry": airIRG2AlarmsEntry,
       "airIRG2AlarmsIndex": airIRG2AlarmsIndex,
       "airIRG2AlarmsEventCode": airIRG2AlarmsEventCode,
       "airIRG2AlarmsDescription": airIRG2AlarmsDescription,
       "airIRG2RC": airIRG2RC,
       "airIRG2RD": airIRG2RD,
       "airIRG2RDType1": airIRG2RDType1,
       "airIRG2RDType2": airIRG2RDType2,
       "airIRG2RDT2Status": airIRG2RDT2Status,
       "airIRG2RDT2StatusOperateMode": airIRG2RDT2StatusOperateMode,
       "airIRG2RDT2StatusCoolOutput": airIRG2RDT2StatusCoolOutput,
       "airIRG2RDT2StatusCoolDemand": airIRG2RDT2StatusCoolDemand,
       "airIRG2RDT2StatusAirFlowUS": airIRG2RDT2StatusAirFlowUS,
       "airIRG2RDT2StatusAirFlowMetric": airIRG2RDT2StatusAirFlowMetric,
       "airIRG2RDT2StatusRackInletTempUS": airIRG2RDT2StatusRackInletTempUS,
       "airIRG2RDT2StatusRackInletTempMetric": airIRG2RDT2StatusRackInletTempMetric,
       "airIRG2RDT2StatusSupplyAirTempUS": airIRG2RDT2StatusSupplyAirTempUS,
       "airIRG2RDT2StatusSupplyAirTempMetric": airIRG2RDT2StatusSupplyAirTempMetric,
       "airIRG2RDT2StatusReturnAirTempUS": airIRG2RDT2StatusReturnAirTempUS,
       "airIRG2RDT2StatusReturnAirTempMetric": airIRG2RDT2StatusReturnAirTempMetric,
       "airIRG2RDT2StatusSuctionTempUS": airIRG2RDT2StatusSuctionTempUS,
       "airIRG2RDT2StatusSuctionTempMetric": airIRG2RDT2StatusSuctionTempMetric,
       "airIRG2RDT2StatusSuperheatTempUS": airIRG2RDT2StatusSuperheatTempUS,
       "airIRG2RDT2StatusSuperheatTempMetric": airIRG2RDT2StatusSuperheatTempMetric,
       "airIRG2RDT2StatusFilterDPUS": airIRG2RDT2StatusFilterDPUS,
       "airIRG2RDT2StatusFilterDPMetric": airIRG2RDT2StatusFilterDPMetric,
       "airIRG2RDT2StatusSuctionPressureUS": airIRG2RDT2StatusSuctionPressureUS,
       "airIRG2RDT2StatusSuctionPressureMetric": airIRG2RDT2StatusSuctionPressureMetric,
       "airIRG2RDT2StatusDischargePressureUS": airIRG2RDT2StatusDischargePressureUS,
       "airIRG2RDT2StatusDischargePressureMetric": airIRG2RDT2StatusDischargePressureMetric,
       "airIRG2RDT2StatusEvaporatorFanSpeed": airIRG2RDT2StatusEvaporatorFanSpeed,
       "airIRG2RDT2StatusInputState": airIRG2RDT2StatusInputState,
       "airIRG2RDT2StatusOutputState": airIRG2RDT2StatusOutputState,
       "airIRG2RDT2StatusOHEInputState": airIRG2RDT2StatusOHEInputState,
       "airIRG2RDT2StatusOHEOutputState": airIRG2RDT2StatusOHEOutputState,
       "airIRG2RDT2StatusCompressor": airIRG2RDT2StatusCompressor,
       "airIRG2RDT2StatusFluidValvePos": airIRG2RDT2StatusFluidValvePos,
       "airIRG2RDT2StatusHotGasBypassValvePos": airIRG2RDT2StatusHotGasBypassValvePos,
       "airIRG2RDT2RunHours": airIRG2RDT2RunHours,
       "airIRG2RDT2RunHoursAirFilter": airIRG2RDT2RunHoursAirFilter,
       "airIRG2RDT2RunHoursCondensatePump": airIRG2RDT2RunHoursCondensatePump,
       "airIRG2RDT2RunHoursCompressor": airIRG2RDT2RunHoursCompressor,
       "airIRG2RDT2RunHoursFanPSTableSize": airIRG2RDT2RunHoursFanPSTableSize,
       "airIRG2RDT2RunHoursFanPSTable": airIRG2RDT2RunHoursFanPSTable,
       "airIRG2RDT2RunHoursFanPSEntry": airIRG2RDT2RunHoursFanPSEntry,
       "airIRG2RDT2RunHoursFanPSIndex": airIRG2RDT2RunHoursFanPSIndex,
       "airIRG2RDT2RunHoursFanPSHours": airIRG2RDT2RunHoursFanPSHours,
       "airIRG2RDT2RunHoursFanPSPosition": airIRG2RDT2RunHoursFanPSPosition,
       "airIRG2RDT2RunHoursEvapFanTableSize": airIRG2RDT2RunHoursEvapFanTableSize,
       "airIRG2RDT2RunHoursEvapFanTable": airIRG2RDT2RunHoursEvapFanTable,
       "airIRG2RDT2RunHoursEvapFanEntry": airIRG2RDT2RunHoursEvapFanEntry,
       "airIRG2RDT2RunHoursEvapFanIndex": airIRG2RDT2RunHoursEvapFanIndex,
       "airIRG2RDT2RunHoursEvapFanHours": airIRG2RDT2RunHoursEvapFanHours,
       "airIRG2RDT2RunHoursUnit": airIRG2RDT2RunHoursUnit,
       "airIRG2RDT2ServiceIntervals": airIRG2RDT2ServiceIntervals,
       "airIRG2RDT2ServiceIntervalsAirFilter": airIRG2RDT2ServiceIntervalsAirFilter,
       "airIRG2RDT2ServiceIntervalsAirFilterAlarm": airIRG2RDT2ServiceIntervalsAirFilterAlarm,
       "airIRG2RDT2Thresholds": airIRG2RDT2Thresholds,
       "airIRG2RDT2ThresholdsRackInletHighTempUS": airIRG2RDT2ThresholdsRackInletHighTempUS,
       "airIRG2RDT2ThresholdsRackInletHighTempMetric": airIRG2RDT2ThresholdsRackInletHighTempMetric,
       "airIRG2RDT2ThresholdsSupplyAirHighTempUS": airIRG2RDT2ThresholdsSupplyAirHighTempUS,
       "airIRG2RDT2ThresholdsSupplyAirHighTempMetric": airIRG2RDT2ThresholdsSupplyAirHighTempMetric,
       "airIRG2RDT2ThresholdsReturnAirHighTempUS": airIRG2RDT2ThresholdsReturnAirHighTempUS,
       "airIRG2RDT2ThresholdsReturnAirHighTempMetric": airIRG2RDT2ThresholdsReturnAirHighTempMetric,
       "airIRG2RDT2Setpoints": airIRG2RDT2Setpoints,
       "airIRG2RDT2Config": airIRG2RDT2Config,
       "airIRG2RDT2ConfigUnitType": airIRG2RDT2ConfigUnitType,
       "airIRG2RDT2ConfigStartupDelay": airIRG2RDT2ConfigStartupDelay,
       "airIRG2RDT2ConfigIdleOnLeakDetect": airIRG2RDT2ConfigIdleOnLeakDetect,
       "airIRG2RDT2ConfigInputNormalState": airIRG2RDT2ConfigInputNormalState,
       "airIRG2RDT2ConfigOutputNormalState": airIRG2RDT2ConfigOutputNormalState,
       "airIRG2RDT2ConfigOutputSource": airIRG2RDT2ConfigOutputSource,
       "airIRG2RDT2ConfigOHEInputNormalState": airIRG2RDT2ConfigOHEInputNormalState,
       "airIRG2RDT2ConfigUnitRoleOverride": airIRG2RDT2ConfigUnitRoleOverride,
       "airIRG2RDT2ConfigUnitIdleOnCoolFail": airIRG2RDT2ConfigUnitIdleOnCoolFail,
       "airIRG2SC": airIRG2SC,
       "airIRG2RA": airIRG2RA,
       "airInRoom": airInRoom,
       "airIRmIdent": airIRmIdent,
       "airIRmIdentName": airIRmIdentName,
       "airIRmIdentLocation": airIRmIdentLocation,
       "airIRmIdentModelNumber": airIRmIdentModelNumber,
       "airIRmIdentSerialNumber": airIRmIdentSerialNumber,
       "airIRmIdentFirmwareRevision": airIRmIdentFirmwareRevision,
       "airIRmIdentHardwareRevision": airIRmIdentHardwareRevision,
       "airIRmIdentManufactureDate": airIRmIdentManufactureDate,
       "airIRmIdentSysOID": airIRmIdentSysOID,
       "airIRmAlarms": airIRmAlarms,
       "airIRmAlarmsTableSize": airIRmAlarmsTableSize,
       "airIRmAlarmsTable": airIRmAlarmsTable,
       "airIRmAlarmsEntry": airIRmAlarmsEntry,
       "airIRmAlarmsIndex": airIRmAlarmsIndex,
       "airIRmAlarmsEventCode": airIRmAlarmsEventCode,
       "airIRmAlarmsDescription": airIRmAlarmsDescription,
       "airIRmPerimeter": airIRmPerimeter,
       "airIRmPmCommon1": airIRmPmCommon1,
       "airIRmPmUnitType": airIRmPmUnitType,
       "airIRmPmSwVersion": airIRmPmSwVersion,
       "airIRmPmBusAddress": airIRmPmBusAddress,
       "airIRmPmControllerType": airIRmPmControllerType,
       "airIRmPmGeneralError": airIRmPmGeneralError,
       "airIRmPmErrorOnBus": airIRmPmErrorOnBus,
       "airIRmPmCommon2": airIRmPmCommon2,
       "airIRmPmPCStop": airIRmPmPCStop,
       "airIRmPmRemoteStop": airIRmPmRemoteStop,
       "airIRmPmLocalStop": airIRmPmLocalStop,
       "airIRmPmTimerStop": airIRmPmTimerStop,
       "airIRmPmSeqStop": airIRmPmSeqStop,
       "airIRmPmRemoteUPS": airIRmPmRemoteUPS,
       "airIRmPmLocalUPS": airIRmPmLocalUPS,
       "airIRmPmCommonAlarm": airIRmPmCommonAlarm,
       "airIRmPmResetAllAlarms": airIRmPmResetAllAlarms,
       "airIRmPmUnitOnOff": airIRmPmUnitOnOff,
       "airIRmPmMaintenance": airIRmPmMaintenance,
       "airIRmPmUnitTemperatureScale": airIRmPmUnitTemperatureScale,
       "airIRmPmUnitWinterMode": airIRmPmUnitWinterMode,
       "airIRmPmDayNightMode": airIRmPmDayNightMode,
       "airIRmPmCommon3": airIRmPmCommon3,
       "airIRmPmLastMaintenanceYear": airIRmPmLastMaintenanceYear,
       "airIRmPmLastMaintenanceMonth": airIRmPmLastMaintenanceMonth,
       "airIRmPmLastMaintenanceDay": airIRmPmLastMaintenanceDay,
       "airIRmPmUnitMaintenanceInterval": airIRmPmUnitMaintenanceInterval,
       "airIRmPmRuntimeUnit": airIRmPmRuntimeUnit,
       "airIRmPmStoptimeUnit": airIRmPmStoptimeUnit,
       "airIRmPmRuntimeCooling": airIRmPmRuntimeCooling,
       "airIRmPmRuntimeHeating": airIRmPmRuntimeHeating,
       "airIRmPmRuntimeHumidification": airIRmPmRuntimeHumidification,
       "airIRmPmRuntimeDehumidification": airIRmPmRuntimeDehumidification,
       "airIRmPmUnitTemperature": airIRmPmUnitTemperature,
       "airIRmPmUnitTemperatureC": airIRmPmUnitTemperatureC,
       "airIRmPmUnitTemperatureF": airIRmPmUnitTemperatureF,
       "airIRmPmUnitHumidity": airIRmPmUnitHumidity,
       "airIRmPmSetpointTemperatureDay": airIRmPmSetpointTemperatureDay,
       "airIRmPmSetpointTemperatureDayC": airIRmPmSetpointTemperatureDayC,
       "airIRmPmSetpointTemperatureDayF": airIRmPmSetpointTemperatureDayF,
       "airIRmPmSetpointTemperatureNight": airIRmPmSetpointTemperatureNight,
       "airIRmPmSetpointTemperatureNightC": airIRmPmSetpointTemperatureNightC,
       "airIRmPmSetpointTemperatureNightF": airIRmPmSetpointTemperatureNightF,
       "airIRmPmSetpointHumidity": airIRmPmSetpointHumidity,
       "airIRmPmUnitControlType": airIRmPmUnitControlType,
       "airIRmPmWinterModeStartTemp": airIRmPmWinterModeStartTemp,
       "airIRmPmWinterModeStartTempC": airIRmPmWinterModeStartTempC,
       "airIRmPmWinterModeStartTempF": airIRmPmWinterModeStartTempF,
       "airIRmPmWinterModeHysteresis": airIRmPmWinterModeHysteresis,
       "airIRmPmWinterModeHysteresisK": airIRmPmWinterModeHysteresisK,
       "airIRmPmWinterModeHysteresisF": airIRmPmWinterModeHysteresisF,
       "airIRmPmWaterTemperature": airIRmPmWaterTemperature,
       "airIRmPmWaterTemperatureC": airIRmPmWaterTemperatureC,
       "airIRmPmWaterTemperatureF": airIRmPmWaterTemperatureF,
       "airIRmPmReturnAirTemperature": airIRmPmReturnAirTemperature,
       "airIRmPmReturnAirTemperatureC": airIRmPmReturnAirTemperatureC,
       "airIRmPmReturnAirTemperatureF": airIRmPmReturnAirTemperatureF,
       "airIRmPmSupplyAirTemperature": airIRmPmSupplyAirTemperature,
       "airIRmPmSupplyAirTemperatureC": airIRmPmSupplyAirTemperatureC,
       "airIRmPmSupplyAirTemperatureF": airIRmPmSupplyAirTemperatureF,
       "airIRmPmReturnAirHumidity": airIRmPmReturnAirHumidity,
       "airIRmPmSupplyAirHumidity": airIRmPmSupplyAirHumidity,
       "airIRmPmOutsideAirTemperature": airIRmPmOutsideAirTemperature,
       "airIRmPmOutsideAirTemperatureC": airIRmPmOutsideAirTemperatureC,
       "airIRmPmOutsideAirTemperatureF": airIRmPmOutsideAirTemperatureF,
       "airIRmPmOutsideAirHumidity": airIRmPmOutsideAirHumidity,
       "airIRmPmCoolingPriority": airIRmPmCoolingPriority,
       "airIRmPmWaterTemperature2": airIRmPmWaterTemperature2,
       "airIRmPmWaterTemperature2C": airIRmPmWaterTemperature2C,
       "airIRmPmWaterTemperature2F": airIRmPmWaterTemperature2F,
       "airIRmPmRuntimeFreeCooling": airIRmPmRuntimeFreeCooling,
       "airIRmPmRuntimeMixedModeFreeCooling": airIRmPmRuntimeMixedModeFreeCooling,
       "airIRmPmCommon4": airIRmPmCommon4,
       "airIRmPmNumberOfCompressors": airIRmPmNumberOfCompressors,
       "airIRmPmNumberOfSuctionValves": airIRmPmNumberOfSuctionValves,
       "airIRmPmNumberOfDryCoolers": airIRmPmNumberOfDryCoolers,
       "airIRmPmNumberOfPumps": airIRmPmNumberOfPumps,
       "airIRmPmNumberOfElectricHeaters": airIRmPmNumberOfElectricHeaters,
       "airIRmPmNumberOfHumidifiers": airIRmPmNumberOfHumidifiers,
       "airIRmPmNumberOfFans": airIRmPmNumberOfFans,
       "airIRmPmNumberOfLouvers": airIRmPmNumberOfLouvers,
       "airIRmPmNumberOfSensors": airIRmPmNumberOfSensors,
       "airIRmPmNumberOfExternalAlarmInputs": airIRmPmNumberOfExternalAlarmInputs,
       "airIRmPmNumberOfGECWValves": airIRmPmNumberOfGECWValves,
       "airIRmPmNumberOfHotGasReheat": airIRmPmNumberOfHotGasReheat,
       "airIRmPmNumberOfPWWReheat": airIRmPmNumberOfPWWReheat,
       "airIRmPmNumberOfDehumidifiers": airIRmPmNumberOfDehumidifiers,
       "airIRmPmCommon5": airIRmPmCommon5,
       "airIRmPmUnitEvaporationTemperature1": airIRmPmUnitEvaporationTemperature1,
       "airIRmPmUnitEvaporationTemperature1C": airIRmPmUnitEvaporationTemperature1C,
       "airIRmPmUnitEvaporationTemperature1F": airIRmPmUnitEvaporationTemperature1F,
       "airIRmPmUnitEvaporationPressure1": airIRmPmUnitEvaporationPressure1,
       "airIRmPmUnitCondensationTemperature1": airIRmPmUnitCondensationTemperature1,
       "airIRmPmUnitCondensationTemperature1C": airIRmPmUnitCondensationTemperature1C,
       "airIRmPmUnitCondensationTemperature1F": airIRmPmUnitCondensationTemperature1F,
       "airIRmPmUnitCondensationPressure1": airIRmPmUnitCondensationPressure1,
       "airIRmPmMaxLimitReturnAirTemperature": airIRmPmMaxLimitReturnAirTemperature,
       "airIRmPmMaxLimitReturnAirTemperatureC": airIRmPmMaxLimitReturnAirTemperatureC,
       "airIRmPmMaxLimitReturnAirTemperatureF": airIRmPmMaxLimitReturnAirTemperatureF,
       "airIRmPmMinLimitReturnAirTemperature": airIRmPmMinLimitReturnAirTemperature,
       "airIRmPmMinLimitReturnAirTemperatureC": airIRmPmMinLimitReturnAirTemperatureC,
       "airIRmPmMinLimitReturnAirTemperatureF": airIRmPmMinLimitReturnAirTemperatureF,
       "airIRmPmMaxLimitSupplyAirTemperature": airIRmPmMaxLimitSupplyAirTemperature,
       "airIRmPmMaxLimitSupplyAirTemperatureC": airIRmPmMaxLimitSupplyAirTemperatureC,
       "airIRmPmMaxLimitSupplyAirTemperatureF": airIRmPmMaxLimitSupplyAirTemperatureF,
       "airIRmPmMinLimitSupplyAirTemperature": airIRmPmMinLimitSupplyAirTemperature,
       "airIRmPmMinLimitSupplyAirTemperatureC": airIRmPmMinLimitSupplyAirTemperatureC,
       "airIRmPmMinLimitSupplyAirTemperatureF": airIRmPmMinLimitSupplyAirTemperatureF,
       "airIRmPmMaxLimitWaterTemperature": airIRmPmMaxLimitWaterTemperature,
       "airIRmPmMaxLimitWaterTemperatureC": airIRmPmMaxLimitWaterTemperatureC,
       "airIRmPmMaxLimitWaterTemperatureF": airIRmPmMaxLimitWaterTemperatureF,
       "airIRmPmMinLimitWaterTemperature": airIRmPmMinLimitWaterTemperature,
       "airIRmPmMinLimitWaterTemperatureC": airIRmPmMinLimitWaterTemperatureC,
       "airIRmPmMinLimitWaterTemperatureF": airIRmPmMinLimitWaterTemperatureF,
       "airIRmPmMaxLimitReturnAirHumidity": airIRmPmMaxLimitReturnAirHumidity,
       "airIRmPmMinLimitReturnAirHumidity": airIRmPmMinLimitReturnAirHumidity,
       "airIRmPmMaxLimitSupplyAirHumidity": airIRmPmMaxLimitSupplyAirHumidity,
       "airIRmPmMinLimitSupplyAirHumidity": airIRmPmMinLimitSupplyAirHumidity,
       "airIRmPmLowPressureWinterDelay": airIRmPmLowPressureWinterDelay,
       "airIRmPmUnitCondensationPressure2": airIRmPmUnitCondensationPressure2,
       "airIRmPmUnitOverloadSwitch": airIRmPmUnitOverloadSwitch,
       "airIRmPmUnitCondensationTemperature2": airIRmPmUnitCondensationTemperature2,
       "airIRmPmUnitCondensationTemperature2C": airIRmPmUnitCondensationTemperature2C,
       "airIRmPmUnitCondensationTemperature2F": airIRmPmUnitCondensationTemperature2F,
       "airIRmPmUnitEvaporationPressure2": airIRmPmUnitEvaporationPressure2,
       "airIRmPmUnitEvaporationTemperature2": airIRmPmUnitEvaporationTemperature2,
       "airIRmPmUnitEvaporationTemperature2C": airIRmPmUnitEvaporationTemperature2C,
       "airIRmPmUnitEvaporationTemperature2F": airIRmPmUnitEvaporationTemperature2F,
       "airIRmPmCompressor1": airIRmPmCompressor1,
       "airIRmPmCmp1ManOperationActive": airIRmPmCmp1ManOperationActive,
       "airIRmPmCmp1ManOperationState": airIRmPmCmp1ManOperationState,
       "airIRmPmCmp1Running": airIRmPmCmp1Running,
       "airIRmPmCmp1StartTempSummer": airIRmPmCmp1StartTempSummer,
       "airIRmPmCmp1StartTempSummerK": airIRmPmCmp1StartTempSummerK,
       "airIRmPmCmp1StartTempSummerF": airIRmPmCmp1StartTempSummerF,
       "airIRmPmCmp1HysteresisSummer": airIRmPmCmp1HysteresisSummer,
       "airIRmPmCmp1HysteresisSummerK": airIRmPmCmp1HysteresisSummerK,
       "airIRmPmCmp1HysteresisSummerF": airIRmPmCmp1HysteresisSummerF,
       "airIRmPmCmp1StartTempWinter": airIRmPmCmp1StartTempWinter,
       "airIRmPmCmp1StartTempWinterK": airIRmPmCmp1StartTempWinterK,
       "airIRmPmCmp1StartTempWinterF": airIRmPmCmp1StartTempWinterF,
       "airIRmPmCmp1HysteresisWinter": airIRmPmCmp1HysteresisWinter,
       "airIRmPmCmp1HysteresisWinterK": airIRmPmCmp1HysteresisWinterK,
       "airIRmPmCmp1HysteresisWinterF": airIRmPmCmp1HysteresisWinterF,
       "airIRmPmCmp1Runtime": airIRmPmCmp1Runtime,
       "airIRmPmCompressor2": airIRmPmCompressor2,
       "airIRmPmCmp2ManOperationActive": airIRmPmCmp2ManOperationActive,
       "airIRmPmCmp2ManOperationState": airIRmPmCmp2ManOperationState,
       "airIRmPmCmp2Running": airIRmPmCmp2Running,
       "airIRmPmCmp2StartTempSummer": airIRmPmCmp2StartTempSummer,
       "airIRmPmCmp2StartTempSummerK": airIRmPmCmp2StartTempSummerK,
       "airIRmPmCmp2StartTempSummerF": airIRmPmCmp2StartTempSummerF,
       "airIRmPmCmp2HysteresisSummer": airIRmPmCmp2HysteresisSummer,
       "airIRmPmCmp2HysteresisSummerK": airIRmPmCmp2HysteresisSummerK,
       "airIRmPmCmp2HysteresisSummerF": airIRmPmCmp2HysteresisSummerF,
       "airIRmPmCmp2StartTempWinter": airIRmPmCmp2StartTempWinter,
       "airIRmPmCmp2StartTempWinterK": airIRmPmCmp2StartTempWinterK,
       "airIRmPmCmp2StartTempWinterF": airIRmPmCmp2StartTempWinterF,
       "airIRmPmCmp2HysteresisWinter": airIRmPmCmp2HysteresisWinter,
       "airIRmPmCmp2HysteresisWinterK": airIRmPmCmp2HysteresisWinterK,
       "airIRmPmCmp2HysteresisWinterF": airIRmPmCmp2HysteresisWinterF,
       "airIRmPmCmp2Runtime": airIRmPmCmp2Runtime,
       "airIRmPmSuctionValve1": airIRmPmSuctionValve1,
       "airIRmPmSuctionValve2": airIRmPmSuctionValve2,
       "airIRmPmEheating1": airIRmPmEheating1,
       "airIRmPmEheating1ManOpEnable": airIRmPmEheating1ManOpEnable,
       "airIRmPmEheating1Running": airIRmPmEheating1Running,
       "airIRmPmEheating1ManOpRunning": airIRmPmEheating1ManOpRunning,
       "airIRmPmEheating1Type": airIRmPmEheating1Type,
       "airIRmPmEheating1StartTemperature": airIRmPmEheating1StartTemperature,
       "airIRmPmEheating1StartTemperatureK": airIRmPmEheating1StartTemperatureK,
       "airIRmPmEheating1StartTemperatureF": airIRmPmEheating1StartTemperatureF,
       "airIRmPmEheating1Hysteresis": airIRmPmEheating1Hysteresis,
       "airIRmPmEheating1HysteresisK": airIRmPmEheating1HysteresisK,
       "airIRmPmEheating1HysteresisF": airIRmPmEheating1HysteresisF,
       "airIRmPmEheating1Runtime": airIRmPmEheating1Runtime,
       "airIRmPmEheating2": airIRmPmEheating2,
       "airIRmPmEheating2ManOpEnable": airIRmPmEheating2ManOpEnable,
       "airIRmPmEheating2Running": airIRmPmEheating2Running,
       "airIRmPmEheating2ManOpRunning": airIRmPmEheating2ManOpRunning,
       "airIRmPmEheating2Type": airIRmPmEheating2Type,
       "airIRmPmEheating2StartTemperature": airIRmPmEheating2StartTemperature,
       "airIRmPmEheating2StartTemperatureK": airIRmPmEheating2StartTemperatureK,
       "airIRmPmEheating2StartTemperatureF": airIRmPmEheating2StartTemperatureF,
       "airIRmPmEheating2Hysteresis": airIRmPmEheating2Hysteresis,
       "airIRmPmEheating2HysteresisK": airIRmPmEheating2HysteresisK,
       "airIRmPmEheating2HysteresisF": airIRmPmEheating2HysteresisF,
       "airIRmPmEheating2Runtime": airIRmPmEheating2Runtime,
       "airIRmPmEheating3": airIRmPmEheating3,
       "airIRmPmEheating3ManOpEnable": airIRmPmEheating3ManOpEnable,
       "airIRmPmEheating3Running": airIRmPmEheating3Running,
       "airIRmPmEheating3ManOpRunning": airIRmPmEheating3ManOpRunning,
       "airIRmPmEheating3Type": airIRmPmEheating3Type,
       "airIRmPmEheating3StartTemperature": airIRmPmEheating3StartTemperature,
       "airIRmPmEheating3StartTemperatureK": airIRmPmEheating3StartTemperatureK,
       "airIRmPmEheating3StartTemperatureF": airIRmPmEheating3StartTemperatureF,
       "airIRmPmEheating3Hysteresis": airIRmPmEheating3Hysteresis,
       "airIRmPmEheating3HysteresisK": airIRmPmEheating3HysteresisK,
       "airIRmPmEheating3HysteresisF": airIRmPmEheating3HysteresisF,
       "airIRmPmEheating3Runtime": airIRmPmEheating3Runtime,
       "airIRmPmEheating4": airIRmPmEheating4,
       "airIRmPmEheating4ManOpEnable": airIRmPmEheating4ManOpEnable,
       "airIRmPmEheating4Running": airIRmPmEheating4Running,
       "airIRmPmEheating4ManOpRunning": airIRmPmEheating4ManOpRunning,
       "airIRmPmEheating4Type": airIRmPmEheating4Type,
       "airIRmPmEheating4StartTemperature": airIRmPmEheating4StartTemperature,
       "airIRmPmEheating4StartTemperatureK": airIRmPmEheating4StartTemperatureK,
       "airIRmPmEheating4StartTemperatureF": airIRmPmEheating4StartTemperatureF,
       "airIRmPmEheating4Hysteresis": airIRmPmEheating4Hysteresis,
       "airIRmPmEheating4HysteresisK": airIRmPmEheating4HysteresisK,
       "airIRmPmEheating4HysteresisF": airIRmPmEheating4HysteresisF,
       "airIRmPmEheating4Runtime": airIRmPmEheating4Runtime,
       "airIRmPmGECWvalve": airIRmPmGECWvalve,
       "airIRmPmGECWvalveManOpEnable": airIRmPmGECWvalveManOpEnable,
       "airIRmPmGECWvalveStartTemperature": airIRmPmGECWvalveStartTemperature,
       "airIRmPmGECWvalveStartTemperatureK": airIRmPmGECWvalveStartTemperatureK,
       "airIRmPmGECWvalveStartTemperatureF": airIRmPmGECWvalveStartTemperatureF,
       "airIRmPmGECWvalveLinearRange": airIRmPmGECWvalveLinearRange,
       "airIRmPmGECWvalveLinearRangeK": airIRmPmGECWvalveLinearRangeK,
       "airIRmPmGECWvalveLinearRangeF": airIRmPmGECWvalveLinearRangeF,
       "airIRmPmGECWvalveGEOffTemp": airIRmPmGECWvalveGEOffTemp,
       "airIRmPmGECWvalveGEOffTempC": airIRmPmGECWvalveGEOffTempC,
       "airIRmPmGECWvalveGEOffTempF": airIRmPmGECWvalveGEOffTempF,
       "airIRmPmGECWvalveOpeningGrade": airIRmPmGECWvalveOpeningGrade,
       "airIRmPmGECWvalveManOpOpeningGrade": airIRmPmGECWvalveManOpOpeningGrade,
       "airIRmPmGvalve": airIRmPmGvalve,
       "airIRmPmGvalveManOperationEnable": airIRmPmGvalveManOperationEnable,
       "airIRmPmGvalvePreOpeningTime": airIRmPmGvalvePreOpeningTime,
       "airIRmPmGvalvePreOpeningGrade": airIRmPmGvalvePreOpeningGrade,
       "airIRmPmGvalveOpeningGrade": airIRmPmGvalveOpeningGrade,
       "airIRmPmGvalveManOpOpeningGrade": airIRmPmGvalveManOpOpeningGrade,
       "airIRmPmDrycooler1": airIRmPmDrycooler1,
       "airIRmPmDrycooler1ManOpEnable": airIRmPmDrycooler1ManOpEnable,
       "airIRmPmDrycooler1Running": airIRmPmDrycooler1Running,
       "airIRmPmDrycooler1ManOpRunning": airIRmPmDrycooler1ManOpRunning,
       "airIRmPmDrycooler1WinterStartTemp": airIRmPmDrycooler1WinterStartTemp,
       "airIRmPmDrycooler1WinterStartTempC": airIRmPmDrycooler1WinterStartTempC,
       "airIRmPmDrycooler1WinterStartTempF": airIRmPmDrycooler1WinterStartTempF,
       "airIRmPmDrycooler1SummerStartTemp": airIRmPmDrycooler1SummerStartTemp,
       "airIRmPmDrycooler1SummerStartTempC": airIRmPmDrycooler1SummerStartTempC,
       "airIRmPmDrycooler1SummerStartTempF": airIRmPmDrycooler1SummerStartTempF,
       "airIRmPmDrycooler1Hysteresis": airIRmPmDrycooler1Hysteresis,
       "airIRmPmDrycooler1HysteresisK": airIRmPmDrycooler1HysteresisK,
       "airIRmPmDrycooler1HysteresisF": airIRmPmDrycooler1HysteresisF,
       "airIRmPmDrycooler1Runtime": airIRmPmDrycooler1Runtime,
       "airIRmPmDrycooler2": airIRmPmDrycooler2,
       "airIRmPmDrycooler2ManOpEnable": airIRmPmDrycooler2ManOpEnable,
       "airIRmPmDrycooler2Running": airIRmPmDrycooler2Running,
       "airIRmPmDrycooler2ManOpRunning": airIRmPmDrycooler2ManOpRunning,
       "airIRmPmDrycooler2WinterStartTemp": airIRmPmDrycooler2WinterStartTemp,
       "airIRmPmDrycooler2WinterStartTempC": airIRmPmDrycooler2WinterStartTempC,
       "airIRmPmDrycooler2WinterStartTempF": airIRmPmDrycooler2WinterStartTempF,
       "airIRmPmDrycooler2SummerStartTemp": airIRmPmDrycooler2SummerStartTemp,
       "airIRmPmDrycooler2SummerStartTempC": airIRmPmDrycooler2SummerStartTempC,
       "airIRmPmDrycooler2SummerStartTempF": airIRmPmDrycooler2SummerStartTempF,
       "airIRmPmDrycooler2Hysteresis": airIRmPmDrycooler2Hysteresis,
       "airIRmPmDrycooler2HysteresisK": airIRmPmDrycooler2HysteresisK,
       "airIRmPmDrycooler2HysteresisF": airIRmPmDrycooler2HysteresisF,
       "airIRmPmDrycooler2Runtime": airIRmPmDrycooler2Runtime,
       "airIRmPmDrycooler3": airIRmPmDrycooler3,
       "airIRmPmDrycooler3ManOpEnable": airIRmPmDrycooler3ManOpEnable,
       "airIRmPmDrycooler3Running": airIRmPmDrycooler3Running,
       "airIRmPmDrycooler3ManOpRunning": airIRmPmDrycooler3ManOpRunning,
       "airIRmPmDrycooler3WinterStartTemp": airIRmPmDrycooler3WinterStartTemp,
       "airIRmPmDrycooler3WinterStartTempC": airIRmPmDrycooler3WinterStartTempC,
       "airIRmPmDrycooler3WinterStartTempF": airIRmPmDrycooler3WinterStartTempF,
       "airIRmPmDrycooler3SummerStartTemp": airIRmPmDrycooler3SummerStartTemp,
       "airIRmPmDrycooler3SummerStartTempC": airIRmPmDrycooler3SummerStartTempC,
       "airIRmPmDrycooler3SummerStartTempF": airIRmPmDrycooler3SummerStartTempF,
       "airIRmPmDrycooler3Hysteresis": airIRmPmDrycooler3Hysteresis,
       "airIRmPmDrycooler3HysteresisK": airIRmPmDrycooler3HysteresisK,
       "airIRmPmDrycooler3HysteresisF": airIRmPmDrycooler3HysteresisF,
       "airIRmPmDrycooler3Runtime": airIRmPmDrycooler3Runtime,
       "airIRmPmDrycooler4": airIRmPmDrycooler4,
       "airIRmPmDrycooler4ManOpEnable": airIRmPmDrycooler4ManOpEnable,
       "airIRmPmDrycooler4Running": airIRmPmDrycooler4Running,
       "airIRmPmDrycooler4ManOpRunning": airIRmPmDrycooler4ManOpRunning,
       "airIRmPmDrycooler4WinterStartTemp": airIRmPmDrycooler4WinterStartTemp,
       "airIRmPmDrycooler4WinterStartTempC": airIRmPmDrycooler4WinterStartTempC,
       "airIRmPmDrycooler4WinterStartTempF": airIRmPmDrycooler4WinterStartTempF,
       "airIRmPmDrycooler4SummerStartTemp": airIRmPmDrycooler4SummerStartTemp,
       "airIRmPmDrycooler4SummerStartTempC": airIRmPmDrycooler4SummerStartTempC,
       "airIRmPmDrycooler4SummerStartTempF": airIRmPmDrycooler4SummerStartTempF,
       "airIRmPmDrycooler4Hysteresis": airIRmPmDrycooler4Hysteresis,
       "airIRmPmDrycooler4HysteresisK": airIRmPmDrycooler4HysteresisK,
       "airIRmPmDrycooler4HysteresisF": airIRmPmDrycooler4HysteresisF,
       "airIRmPmDrycooler4Runtime": airIRmPmDrycooler4Runtime,
       "airIRmPmPump1": airIRmPmPump1,
       "airIRmPmPump1ManOpEnable": airIRmPmPump1ManOpEnable,
       "airIRmPmPump1Running": airIRmPmPump1Running,
       "airIRmPmPump1ManOpRunning": airIRmPmPump1ManOpRunning,
       "airIRmPmPump1StartTemperature": airIRmPmPump1StartTemperature,
       "airIRmPmPump1StartTemperatureK": airIRmPmPump1StartTemperatureK,
       "airIRmPmPump1StartTemperatureF": airIRmPmPump1StartTemperatureF,
       "airIRmPmPump1Hysteresis": airIRmPmPump1Hysteresis,
       "airIRmPmPump1HysteresisK": airIRmPmPump1HysteresisK,
       "airIRmPmPump1HysteresisF": airIRmPmPump1HysteresisF,
       "airIRmPmPump1LinearRange": airIRmPmPump1LinearRange,
       "airIRmPmPump1LinearRangeK": airIRmPmPump1LinearRangeK,
       "airIRmPmPump1LinearRangeF": airIRmPmPump1LinearRangeF,
       "airIRmPmPump1PressureSetpoint": airIRmPmPump1PressureSetpoint,
       "airIRmPmPump1Runtime": airIRmPmPump1Runtime,
       "airIRmPmPump1Speed": airIRmPmPump1Speed,
       "airIRmPmPump1ControlCycle": airIRmPmPump1ControlCycle,
       "airIRmPmPump1MaxAdjust": airIRmPmPump1MaxAdjust,
       "airIRmPmPump1ControlFactor": airIRmPmPump1ControlFactor,
       "airIRmPmPump2": airIRmPmPump2,
       "airIRmPmPump2ManOpEnable": airIRmPmPump2ManOpEnable,
       "airIRmPmPump2Running": airIRmPmPump2Running,
       "airIRmPmPump2ManOpRunning": airIRmPmPump2ManOpRunning,
       "airIRmPmPump2StartTemperature": airIRmPmPump2StartTemperature,
       "airIRmPmPump2StartTemperatureK": airIRmPmPump2StartTemperatureK,
       "airIRmPmPump2StartTemperatureF": airIRmPmPump2StartTemperatureF,
       "airIRmPmPump2Hysteresis": airIRmPmPump2Hysteresis,
       "airIRmPmPump2HysteresisK": airIRmPmPump2HysteresisK,
       "airIRmPmPump2HysteresisF": airIRmPmPump2HysteresisF,
       "airIRmPmPump2LinearRange": airIRmPmPump2LinearRange,
       "airIRmPmPump2LinearRangeK": airIRmPmPump2LinearRangeK,
       "airIRmPmPump2LinearRangeF": airIRmPmPump2LinearRangeF,
       "airIRmPmPump2PressureSetpoint": airIRmPmPump2PressureSetpoint,
       "airIRmPmPump2Runtime": airIRmPmPump2Runtime,
       "airIRmPmPump2Speed": airIRmPmPump2Speed,
       "airIRmPmPump2ControlCycle": airIRmPmPump2ControlCycle,
       "airIRmPmPump2MaxAdjust": airIRmPmPump2MaxAdjust,
       "airIRmPmPump2ControlFactor": airIRmPmPump2ControlFactor,
       "airIRmPmPump3": airIRmPmPump3,
       "airIRmPmPump3ManOpEnable": airIRmPmPump3ManOpEnable,
       "airIRmPmPump3Running": airIRmPmPump3Running,
       "airIRmPmPump3ManOpRunning": airIRmPmPump3ManOpRunning,
       "airIRmPmPump3StartTemperature": airIRmPmPump3StartTemperature,
       "airIRmPmPump3StartTemperatureK": airIRmPmPump3StartTemperatureK,
       "airIRmPmPump3StartTemperatureF": airIRmPmPump3StartTemperatureF,
       "airIRmPmPump3Hysteresis": airIRmPmPump3Hysteresis,
       "airIRmPmPump3HysteresisK": airIRmPmPump3HysteresisK,
       "airIRmPmPump3HysteresisF": airIRmPmPump3HysteresisF,
       "airIRmPmPump3LinearRange": airIRmPmPump3LinearRange,
       "airIRmPmPump3LinearRangeK": airIRmPmPump3LinearRangeK,
       "airIRmPmPump3LinearRangeF": airIRmPmPump3LinearRangeF,
       "airIRmPmPump3PressureSetpoint": airIRmPmPump3PressureSetpoint,
       "airIRmPmPump3Runtime": airIRmPmPump3Runtime,
       "airIRmPmPump3Speed": airIRmPmPump3Speed,
       "airIRmPmPump3ControlCycle": airIRmPmPump3ControlCycle,
       "airIRmPmPump3MaxAdjust": airIRmPmPump3MaxAdjust,
       "airIRmPmPump3ControlFactor": airIRmPmPump3ControlFactor,
       "airIRmPmPump4": airIRmPmPump4,
       "airIRmPmPump4ManOpEnable": airIRmPmPump4ManOpEnable,
       "airIRmPmPump4Running": airIRmPmPump4Running,
       "airIRmPmPump4ManOpRunning": airIRmPmPump4ManOpRunning,
       "airIRmPmPump4StartTemperature": airIRmPmPump4StartTemperature,
       "airIRmPmPump4StartTemperatureK": airIRmPmPump4StartTemperatureK,
       "airIRmPmPump4StartTemperatureF": airIRmPmPump4StartTemperatureF,
       "airIRmPmPump4Hysteresis": airIRmPmPump4Hysteresis,
       "airIRmPmPump4HysteresisK": airIRmPmPump4HysteresisK,
       "airIRmPmPump4HysteresisF": airIRmPmPump4HysteresisF,
       "airIRmPmPump4LinearRange": airIRmPmPump4LinearRange,
       "airIRmPmPump4LinearRangeK": airIRmPmPump4LinearRangeK,
       "airIRmPmPump4LinearRangeF": airIRmPmPump4LinearRangeF,
       "airIRmPmPump4PressureSetpoint": airIRmPmPump4PressureSetpoint,
       "airIRmPmPump4Runtime": airIRmPmPump4Runtime,
       "airIRmPmPump4Speed": airIRmPmPump4Speed,
       "airIRmPmPump4ControlCycle": airIRmPmPump4ControlCycle,
       "airIRmPmPump4MaxAdjust": airIRmPmPump4MaxAdjust,
       "airIRmPmPump4ControlFactor": airIRmPmPump4ControlFactor,
       "airIRmPmHotgasHeating": airIRmPmHotgasHeating,
       "airIRmPmHotgasHeatRunning": airIRmPmHotgasHeatRunning,
       "airIRmPmPWWHeating": airIRmPmPWWHeating,
       "airIRmPmPWWHeatingManOpEnable": airIRmPmPWWHeatingManOpEnable,
       "airIRmPmPWWHeatingRunning": airIRmPmPWWHeatingRunning,
       "airIRmPmPWWHeatingManOpRunning": airIRmPmPWWHeatingManOpRunning,
       "airIRmPmPWWHeatingType": airIRmPmPWWHeatingType,
       "airIRmPmPWWHeatingStartTemp": airIRmPmPWWHeatingStartTemp,
       "airIRmPmPWWHeatingStartTempK": airIRmPmPWWHeatingStartTempK,
       "airIRmPmPWWHeatingStartTempF": airIRmPmPWWHeatingStartTempF,
       "airIRmPmPWWHeatingHysteresis": airIRmPmPWWHeatingHysteresis,
       "airIRmPmPWWHeatingHysteresisK": airIRmPmPWWHeatingHysteresisK,
       "airIRmPmPWWHeatingHysteresisF": airIRmPmPWWHeatingHysteresisF,
       "airIRmPmPWWHeatingLinearRange": airIRmPmPWWHeatingLinearRange,
       "airIRmPmPWWHeatingLinearRangeK": airIRmPmPWWHeatingLinearRangeK,
       "airIRmPmPWWHeatingLinearRangeF": airIRmPmPWWHeatingLinearRangeF,
       "airIRmPmPWWHeatingCurrentValue": airIRmPmPWWHeatingCurrentValue,
       "airIRmPmPWWHeatingManOpValue": airIRmPmPWWHeatingManOpValue,
       "airIRmPmHumidifier1": airIRmPmHumidifier1,
       "airIRmPmHumidifier1ManOpEnable": airIRmPmHumidifier1ManOpEnable,
       "airIRmPmHumidifier1Running": airIRmPmHumidifier1Running,
       "airIRmPmHumidifier1ManOpRunning": airIRmPmHumidifier1ManOpRunning,
       "airIRmPmHumidifier1Type": airIRmPmHumidifier1Type,
       "airIRmPmHumidifier1StartHumidity": airIRmPmHumidifier1StartHumidity,
       "airIRmPmHumidifier1Hysteresis": airIRmPmHumidifier1Hysteresis,
       "airIRmPmHumidifier1LinearRange": airIRmPmHumidifier1LinearRange,
       "airIRmPmHumidifier1Runtime": airIRmPmHumidifier1Runtime,
       "airIRmPmHumidifier1CurrentValue": airIRmPmHumidifier1CurrentValue,
       "airIRmPmHumidifier1ManOpValue": airIRmPmHumidifier1ManOpValue,
       "airIRmPmHumidifier2": airIRmPmHumidifier2,
       "airIRmPmHumidifier2ManOpEnable": airIRmPmHumidifier2ManOpEnable,
       "airIRmPmHumidifier2Running": airIRmPmHumidifier2Running,
       "airIRmPmHumidifier2ManOpRunning": airIRmPmHumidifier2ManOpRunning,
       "airIRmPmHumidifier2Type": airIRmPmHumidifier2Type,
       "airIRmPmHumidifier2StartHumidity": airIRmPmHumidifier2StartHumidity,
       "airIRmPmHumidifier2Hysteresis": airIRmPmHumidifier2Hysteresis,
       "airIRmPmHumidifier2LinearRange": airIRmPmHumidifier2LinearRange,
       "airIRmPmHumidifier2Runtime": airIRmPmHumidifier2Runtime,
       "airIRmPmHumidifier2CurrentValue": airIRmPmHumidifier2CurrentValue,
       "airIRmPmHumidifier2ManOpValue": airIRmPmHumidifier2ManOpValue,
       "airIRmPmDehumidification": airIRmPmDehumidification,
       "airIRmPmDehumidificManOpEnable": airIRmPmDehumidificManOpEnable,
       "airIRmPmDehumidificRunning": airIRmPmDehumidificRunning,
       "airIRmPmDehumidificManOpRunning": airIRmPmDehumidificManOpRunning,
       "airIRmPmDehumidificStartHumidity": airIRmPmDehumidificStartHumidity,
       "airIRmPmDehumidificHysteresis": airIRmPmDehumidificHysteresis,
       "airIRmPmDehumidificMinWaterTemp": airIRmPmDehumidificMinWaterTemp,
       "airIRmPmDehumidificMinWaterTempC": airIRmPmDehumidificMinWaterTempC,
       "airIRmPmDehumidificMinWaterTempF": airIRmPmDehumidificMinWaterTempF,
       "airIRmPmDehumidificMaxWaterTemp": airIRmPmDehumidificMaxWaterTemp,
       "airIRmPmDehumidificMaxWaterTempC": airIRmPmDehumidificMaxWaterTempC,
       "airIRmPmDehumidificMaxWaterTempF": airIRmPmDehumidificMaxWaterTempF,
       "airIRmPmDehumidificRuntime": airIRmPmDehumidificRuntime,
       "airIRmPmFan1": airIRmPmFan1,
       "airIRmPmFan1ManOpEnable": airIRmPmFan1ManOpEnable,
       "airIRmPmFan1Running": airIRmPmFan1Running,
       "airIRmPmFan1ManOpRunning": airIRmPmFan1ManOpRunning,
       "airIRmPmFan1Type": airIRmPmFan1Type,
       "airIRmPmFan1Runtime": airIRmPmFan1Runtime,
       "airIRmPmFan1Speed": airIRmPmFan1Speed,
       "airIRmPmFan1ManOpSpeed": airIRmPmFan1ManOpSpeed,
       "airIRmPmFan2": airIRmPmFan2,
       "airIRmPmFan2ManOpEnable": airIRmPmFan2ManOpEnable,
       "airIRmPmFan2Running": airIRmPmFan2Running,
       "airIRmPmFan2ManOpRunning": airIRmPmFan2ManOpRunning,
       "airIRmPmFan2Type": airIRmPmFan2Type,
       "airIRmPmFan2Runtime": airIRmPmFan2Runtime,
       "airIRmPmFan2Speed": airIRmPmFan2Speed,
       "airIRmPmFan2ManOpSpeed": airIRmPmFan2ManOpSpeed,
       "airIRmPmFan3": airIRmPmFan3,
       "airIRmPmFan3ManOpEnable": airIRmPmFan3ManOpEnable,
       "airIRmPmFan3Running": airIRmPmFan3Running,
       "airIRmPmFan3ManOpRunning": airIRmPmFan3ManOpRunning,
       "airIRmPmFan3Type": airIRmPmFan3Type,
       "airIRmPmFan3Runtime": airIRmPmFan3Runtime,
       "airIRmPmFan3Speed": airIRmPmFan3Speed,
       "airIRmPmFan3ManOpSpeed": airIRmPmFan3ManOpSpeed,
       "airIRmPmLouver1": airIRmPmLouver1,
       "airIRmPmLouver1ManOpEnable": airIRmPmLouver1ManOpEnable,
       "airIRmPmLouver1Position": airIRmPmLouver1Position,
       "airIRmPmLouver1ManOpPosition": airIRmPmLouver1ManOpPosition,
       "airIRmPmLouver2": airIRmPmLouver2,
       "airIRmPmLouver2ManOpEnable": airIRmPmLouver2ManOpEnable,
       "airIRmPmLouver2Position": airIRmPmLouver2Position,
       "airIRmPmLouver2ManOpPosition": airIRmPmLouver2ManOpPosition,
       "airIRmPmLouver3": airIRmPmLouver3,
       "airIRmPmLouver3ManOpEnable": airIRmPmLouver3ManOpEnable,
       "airIRmPmLouver3Position": airIRmPmLouver3Position,
       "airIRmPmLouver3ManOpPosition": airIRmPmLouver3ManOpPosition,
       "airIRmPmAuxAlarm1": airIRmPmAuxAlarm1,
       "airIRmPmAuxAlarm2": airIRmPmAuxAlarm2,
       "airIRmPmAuxAlarm3": airIRmPmAuxAlarm3,
       "airIRmPmAuxAlarm4": airIRmPmAuxAlarm4,
       "airIRmPmAuxAlarm5": airIRmPmAuxAlarm5,
       "airIRmPmAlarmBits": airIRmPmAlarmBits,
       "airIRmPmFan1Failure": airIRmPmFan1Failure,
       "airIRmPmFan2Failure": airIRmPmFan2Failure,
       "airIRmPmFan3Failure": airIRmPmFan3Failure,
       "airIRmPmCompressor1Failure": airIRmPmCompressor1Failure,
       "airIRmPmCompressor2Failure": airIRmPmCompressor2Failure,
       "airIRmPmWaterDetector": airIRmPmWaterDetector,
       "airIRmPmPhaseFailure": airIRmPmPhaseFailure,
       "airIRmPmFireSmokeDetector": airIRmPmFireSmokeDetector,
       "airIRmPmReturnAirTemperatureTooHigh": airIRmPmReturnAirTemperatureTooHigh,
       "airIRmPmReturnAirHumidityTooHigh": airIRmPmReturnAirHumidityTooHigh,
       "airIRmPmSupplyAirTemperatureTooHigh": airIRmPmSupplyAirTemperatureTooHigh,
       "airIRmPmSupplyAirHumidityTooHigh": airIRmPmSupplyAirHumidityTooHigh,
       "airIRmPmWaterTemperatureTooHigh": airIRmPmWaterTemperatureTooHigh,
       "airIRmPmReturnAirTemperatureTooLow": airIRmPmReturnAirTemperatureTooLow,
       "airIRmPmReturnAirHumidityTooLow": airIRmPmReturnAirHumidityTooLow,
       "airIRmPmSupplyAirTemperatureTooLow": airIRmPmSupplyAirTemperatureTooLow,
       "airIRmPmSupplyAirHumidityTooLow": airIRmPmSupplyAirHumidityTooLow,
       "airIRmPmWaterTemperatureTooLow": airIRmPmWaterTemperatureTooLow,
       "airIRmPmSensor1Failure": airIRmPmSensor1Failure,
       "airIRmPmSensor2Failure": airIRmPmSensor2Failure,
       "airIRmPmSensor3Failure": airIRmPmSensor3Failure,
       "airIRmPmSensor4Failure": airIRmPmSensor4Failure,
       "airIRmPmSensor5Failure": airIRmPmSensor5Failure,
       "airIRmPmSensor6Failure": airIRmPmSensor6Failure,
       "airIRmPmSensor7Failure": airIRmPmSensor7Failure,
       "airIRmPmSensor8Failure": airIRmPmSensor8Failure,
       "airIRmPmSensor9Failure": airIRmPmSensor9Failure,
       "airIRmPmSensor10Failure": airIRmPmSensor10Failure,
       "airIRmPmSensor11Failure": airIRmPmSensor11Failure,
       "airIRmPmSensor12Failure": airIRmPmSensor12Failure,
       "airIRmPmSensor13Failure": airIRmPmSensor13Failure,
       "airIRmPmSensor14Failure": airIRmPmSensor14Failure,
       "airIRmPmSensor15Failure": airIRmPmSensor15Failure,
       "airIRmPmSensor16Failure": airIRmPmSensor16Failure,
       "airIRmPmSensor17Failure": airIRmPmSensor17Failure,
       "airIRmPmSensor18Failure": airIRmPmSensor18Failure,
       "airIRmPmSensor19Failure": airIRmPmSensor19Failure,
       "airIRmPmSensor20Failure": airIRmPmSensor20Failure,
       "airIRmPmSensor21Failure": airIRmPmSensor21Failure,
       "airIRmPmSensor1Defect": airIRmPmSensor1Defect,
       "airIRmPmSensor2Defect": airIRmPmSensor2Defect,
       "airIRmPmSensor3Defect": airIRmPmSensor3Defect,
       "airIRmPmSensor4Defect": airIRmPmSensor4Defect,
       "airIRmPmSensor5Defect": airIRmPmSensor5Defect,
       "airIRmPmSensor6Defect": airIRmPmSensor6Defect,
       "airIRmPmSensor7Defect": airIRmPmSensor7Defect,
       "airIRmPmSensor8Defect": airIRmPmSensor8Defect,
       "airIRmPmSensor9Defect": airIRmPmSensor9Defect,
       "airIRmPmSensor10Defect": airIRmPmSensor10Defect,
       "airIRmPmSensor11Defect": airIRmPmSensor11Defect,
       "airIRmPmSensor12Defect": airIRmPmSensor12Defect,
       "airIRmPmSensor13Defect": airIRmPmSensor13Defect,
       "airIRmPmSensor14Defect": airIRmPmSensor14Defect,
       "airIRmPmSensor15Defect": airIRmPmSensor15Defect,
       "airIRmPmSensor16Defect": airIRmPmSensor16Defect,
       "airIRmPmSensor17Defect": airIRmPmSensor17Defect,
       "airIRmPmSensor18Defect": airIRmPmSensor18Defect,
       "airIRmPmSensor19Defect": airIRmPmSensor19Defect,
       "airIRmPmSensor20Defect": airIRmPmSensor20Defect,
       "airIRmPmSensor21Defect": airIRmPmSensor21Defect,
       "airIRmPmCompressor1Alarm": airIRmPmCompressor1Alarm,
       "airIRmPmCompressor2Alarm": airIRmPmCompressor2Alarm,
       "airIRmPmCompressor1LowPressure": airIRmPmCompressor1LowPressure,
       "airIRmPmCompressor2LowPressure": airIRmPmCompressor2LowPressure,
       "airIRmPmReheat1Failure": airIRmPmReheat1Failure,
       "airIRmPmReheat2Failure": airIRmPmReheat2Failure,
       "airIRmPmReheat3Failure": airIRmPmReheat3Failure,
       "airIRmPmReheat4Failure": airIRmPmReheat4Failure,
       "airIRmPmDrycooler1Failure": airIRmPmDrycooler1Failure,
       "airIRmPmDrycooler2Failure": airIRmPmDrycooler2Failure,
       "airIRmPmDrycooler3Failure": airIRmPmDrycooler3Failure,
       "airIRmPmDrycooler4Failure": airIRmPmDrycooler4Failure,
       "airIRmPmPump1Failure": airIRmPmPump1Failure,
       "airIRmPmPump2Failure": airIRmPmPump2Failure,
       "airIRmPmPump3Failure": airIRmPmPump3Failure,
       "airIRmPmPump4Failure": airIRmPmPump4Failure,
       "airIRmPmHumidifier1Failure": airIRmPmHumidifier1Failure,
       "airIRmPmHumidifier2Failure": airIRmPmHumidifier2Failure,
       "airIRmPmHumidifier3Failure": airIRmPmHumidifier3Failure,
       "airIRmPmHumidifier1Alarm5us": airIRmPmHumidifier1Alarm5us,
       "airIRmPmHumidifier2Alarm5us": airIRmPmHumidifier2Alarm5us,
       "airIRmPmHumidifier3Alarm5us": airIRmPmHumidifier3Alarm5us,
       "airIRmPmHumidifier1Alarm20us": airIRmPmHumidifier1Alarm20us,
       "airIRmPmHumidifier2Alarm20us": airIRmPmHumidifier2Alarm20us,
       "airIRmPmHumidifier3Alarm20us": airIRmPmHumidifier3Alarm20us,
       "airIRmPmFan1Alarm": airIRmPmFan1Alarm,
       "airIRmPmFan2Alarm": airIRmPmFan2Alarm,
       "airIRmPmFan3Alarm": airIRmPmFan3Alarm,
       "airIRmPmFilter1Clogged": airIRmPmFilter1Clogged,
       "airIRmPmFilter2Clogged": airIRmPmFilter2Clogged,
       "airIRmPmFilter3Clogged": airIRmPmFilter3Clogged,
       "airIRmPmAuxiliaryAlarm1": airIRmPmAuxiliaryAlarm1,
       "airIRmPmAuxiliaryAlarm2": airIRmPmAuxiliaryAlarm2,
       "airIRmPmAuxiliaryAlarm3": airIRmPmAuxiliaryAlarm3,
       "airIRmPmAuxiliaryAlarm4": airIRmPmAuxiliaryAlarm4,
       "airIRmPmAuxiliaryAlarm5": airIRmPmAuxiliaryAlarm5,
       "airIRmPmAuxiliaryAlarm6": airIRmPmAuxiliaryAlarm6,
       "airIRmPmAuxiliaryAlarm7": airIRmPmAuxiliaryAlarm7,
       "airIRmPmAuxiliaryAlarm8": airIRmPmAuxiliaryAlarm8,
       "airIRmPmAuxiliaryAlarm9": airIRmPmAuxiliaryAlarm9,
       "airIRmPmAuxiliaryAlarm10": airIRmPmAuxiliaryAlarm10,
       "airIRmPmHotGasHeatingAlarm": airIRmPmHotGasHeatingAlarm,
       "airIRmPmEEV1PressureSensorError": airIRmPmEEV1PressureSensorError,
       "airIRmPmEEV1TemperatureSensorError": airIRmPmEEV1TemperatureSensorError,
       "airIRmPmEEV1StepperMotorError": airIRmPmEEV1StepperMotorError,
       "airIRmPmEEV2PressureSensorError": airIRmPmEEV2PressureSensorError,
       "airIRmPmEEV2TemperatureSensorError": airIRmPmEEV2TemperatureSensorError,
       "airIRmPmEEV2StepperMotorError": airIRmPmEEV2StepperMotorError,
       "airIRmPmMyZone": airIRmPmMyZone,
       "airIRmPmMyZoneNumber": airIRmPmMyZoneNumber,
       "airIRmPmMyZoneRoomTemperature": airIRmPmMyZoneRoomTemperature,
       "airIRmPmMyZoneRoomTemperatureC": airIRmPmMyZoneRoomTemperatureC,
       "airIRmPmMyZoneRoomTemperatureF": airIRmPmMyZoneRoomTemperatureF,
       "airIRmPmMyZoneRoomHumidity": airIRmPmMyZoneRoomHumidity,
       "airIRmPmMyZoneSupplyTemperature": airIRmPmMyZoneSupplyTemperature,
       "airIRmPmMyZoneSupplyTemperatureC": airIRmPmMyZoneSupplyTemperatureC,
       "airIRmPmMyZoneSupplyTemperatureF": airIRmPmMyZoneSupplyTemperatureF,
       "airIRmPmMyZoneSupplyHumidity": airIRmPmMyZoneSupplyHumidity,
       "airIRmPmMyZoneSequencingTime": airIRmPmMyZoneSequencingTime,
       "airIRmPmMyZoneNumberOfErrorUnits": airIRmPmMyZoneNumberOfErrorUnits,
       "airIRmPmMyZoneEmergencyTemperature": airIRmPmMyZoneEmergencyTemperature,
       "airIRmPmMyZoneEmergencyTemperatureC": airIRmPmMyZoneEmergencyTemperatureC,
       "airIRmPmMyZoneEmergencyTemperatureF": airIRmPmMyZoneEmergencyTemperatureF,
       "airIRmPmMyZoneCWEnergySaveMode": airIRmPmMyZoneCWEnergySaveMode,
       "airIRmPmGlobalZoneData": airIRmPmGlobalZoneData,
       "airIRmPmGlobalZoneDataEmergencyOpMode": airIRmPmGlobalZoneDataEmergencyOpMode,
       "airIRGen3": airIRGen3,
       "airIRG3Ident": airIRG3Ident,
       "airIRG3IdentTableSize": airIRG3IdentTableSize,
       "airIRG3IdentTable": airIRG3IdentTable,
       "airIRG3IdentEntry": airIRG3IdentEntry,
       "airIRG3IdentIndex": airIRG3IdentIndex,
       "airIRG3IdentName": airIRG3IdentName,
       "airIRG3IdentLocation": airIRG3IdentLocation,
       "airIRG3IdentModelNumber": airIRG3IdentModelNumber,
       "airIRG3IdentSerialNumber": airIRG3IdentSerialNumber,
       "airIRG3IdentFirmwareRevision": airIRG3IdentFirmwareRevision,
       "airIRG3IdentHardwareRevision": airIRG3IdentHardwareRevision,
       "airIRG3IdentManufactureDate": airIRG3IdentManufactureDate,
       "airIRG3IdentRDUSysOID": airIRG3IdentRDUSysOID,
       "airIRG3IdentCMSysOID": airIRG3IdentCMSysOID,
       "airIRG3IdentGroupSysOID": airIRG3IdentGroupSysOID,
       "airIRG3Group": airIRG3Group,
       "airIRG3GroupTableSize": airIRG3GroupTableSize,
       "airIRG3GroupStatusTable": airIRG3GroupStatusTable,
       "airIRG3GroupStatusEntry": airIRG3GroupStatusEntry,
       "airIRG3GroupStatusIndex": airIRG3GroupStatusIndex,
       "airIRG3GroupStatusCoolOutput": airIRG3GroupStatusCoolOutput,
       "airIRG3GroupStatusCoolDemand": airIRG3GroupStatusCoolDemand,
       "airIRG3GroupStatusAirFlowUS": airIRG3GroupStatusAirFlowUS,
       "airIRG3GroupStatusAirFlowMetric": airIRG3GroupStatusAirFlowMetric,
       "airIRG3GroupStatusMaxRackInletTempUS": airIRG3GroupStatusMaxRackInletTempUS,
       "airIRG3GroupStatusMaxRackInletTempMetric": airIRG3GroupStatusMaxRackInletTempMetric,
       "airIRG3GroupStatusMinRackInletTempUS": airIRG3GroupStatusMinRackInletTempUS,
       "airIRG3GroupStatusMinRackInletTempMetric": airIRG3GroupStatusMinRackInletTempMetric,
       "airIRG3GroupStatusMaxReturnAirTempUS": airIRG3GroupStatusMaxReturnAirTempUS,
       "airIRG3GroupStatusMaxReturnAirTempMetric": airIRG3GroupStatusMaxReturnAirTempMetric,
       "airIRG3GroupStatusMinReturnAirTempUS": airIRG3GroupStatusMinReturnAirTempUS,
       "airIRG3GroupStatusMinReturnAirTempMetric": airIRG3GroupStatusMinReturnAirTempMetric,
       "airIRG3GroupStatusAvgSupplyTempUS": airIRG3GroupStatusAvgSupplyTempUS,
       "airIRG3GroupStatusAvgSupplyTempMetric": airIRG3GroupStatusAvgSupplyTempMetric,
       "airIRG3GroupStatusAvgReturnTempUS": airIRG3GroupStatusAvgReturnTempUS,
       "airIRG3GroupStatusAvgReturnTempMetric": airIRG3GroupStatusAvgReturnTempMetric,
       "airIRG3GroupStatusAvgFanSpeed": airIRG3GroupStatusAvgFanSpeed,
       "airIRG3GroupStatusAvgAirFlowUS": airIRG3GroupStatusAvgAirFlowUS,
       "airIRG3GroupStatusAvgAirFlowMetric": airIRG3GroupStatusAvgAirFlowMetric,
       "airIRG3GroupStatusTotalAirFlowUS": airIRG3GroupStatusTotalAirFlowUS,
       "airIRG3GroupStatusTotalAirFlowMetric": airIRG3GroupStatusTotalAirFlowMetric,
       "airIRG3GroupSetpointsTable": airIRG3GroupSetpointsTable,
       "airIRG3GroupSetpointsEntry": airIRG3GroupSetpointsEntry,
       "airIRG3GroupSetpointsIndex": airIRG3GroupSetpointsIndex,
       "airIRG3GroupSetpointsCoolSetpointUS": airIRG3GroupSetpointsCoolSetpointUS,
       "airIRG3GroupSetpointsCoolSetpointMetric": airIRG3GroupSetpointsCoolSetpointMetric,
       "airIRG3GroupSetpointsCoolDeadbandUS": airIRG3GroupSetpointsCoolDeadbandUS,
       "airIRG3GroupSetpointsCoolDeadbandMetric": airIRG3GroupSetpointsCoolDeadbandMetric,
       "airIRG3GroupSetpointsFanSpeedPreference": airIRG3GroupSetpointsFanSpeedPreference,
       "airIRG3GroupSetpointsSupplyAirSetpointUS": airIRG3GroupSetpointsSupplyAirSetpointUS,
       "airIRG3GroupSetpointsSupplyAirSetpointMetric": airIRG3GroupSetpointsSupplyAirSetpointMetric,
       "airIRG3GroupSetpointsAirFlowControl": airIRG3GroupSetpointsAirFlowControl,
       "airIRG3GroupSetpointsLightingOnTime": airIRG3GroupSetpointsLightingOnTime,
       "airIRG3GroupConfigTable": airIRG3GroupConfigTable,
       "airIRG3GroupConfigEntry": airIRG3GroupConfigEntry,
       "airIRG3GroupConfigIndex": airIRG3GroupConfigIndex,
       "airIRG3GroupConfigNumberofCoolingUnits": airIRG3GroupConfigNumberofCoolingUnits,
       "airIRG3GroupConfigConfigurationType": airIRG3GroupConfigConfigurationType,
       "airIRG3GroupConfigCapacityControlType": airIRG3GroupConfigCapacityControlType,
       "airIRG3GroupConfigFanSpeedControl": airIRG3GroupConfigFanSpeedControl,
       "airIRG3GroupConfigCoolGainP": airIRG3GroupConfigCoolGainP,
       "airIRG3GroupConfigCoolResetRateI": airIRG3GroupConfigCoolResetRateI,
       "airIRG3GroupConfigCoolDerivativeD": airIRG3GroupConfigCoolDerivativeD,
       "airIRG3GroupConfigCoolPIDReset": airIRG3GroupConfigCoolPIDReset,
       "airIRG3GroupConfigNumberofBackupUnits": airIRG3GroupConfigNumberofBackupUnits,
       "airIRG3GroupConfigRuntimeBalancingEnable": airIRG3GroupConfigRuntimeBalancingEnable,
       "airIRG3GroupConfigLoadAssistEnable": airIRG3GroupConfigLoadAssistEnable,
       "airIRG3Alarms": airIRG3Alarms,
       "airIRG3AlarmsTableSize": airIRG3AlarmsTableSize,
       "airIRG3AlarmsTable": airIRG3AlarmsTable,
       "airIRG3AlarmsEntry": airIRG3AlarmsEntry,
       "airIRG3AlarmsIndex": airIRG3AlarmsIndex,
       "airIRG3AlarmsEventCode": airIRG3AlarmsEventCode,
       "airIRG3AlarmsDescription": airIRG3AlarmsDescription,
       "airIRG3RDU": airIRG3RDU,
       "airIRG3RDUTableSize": airIRG3RDUTableSize,
       "airIRG3RDUStatusTable": airIRG3RDUStatusTable,
       "airIRG3RDUStatusEntry": airIRG3RDUStatusEntry,
       "airIRG3RDUStatusDeviceIndex": airIRG3RDUStatusDeviceIndex,
       "airIRG3RDUID": airIRG3RDUID,
       "airIRG3RDUStatusOnReadyStandby": airIRG3RDUStatusOnReadyStandby,
       "airIRG3RDUStatusOperatingMode": airIRG3RDUStatusOperatingMode,
       "airIRG3RDUStatusLeadPump": airIRG3RDUStatusLeadPump,
       "airIRG3RDUStatusStartupDelay": airIRG3RDUStatusStartupDelay,
       "airIRG3RDUStatusPumpChangeOverInterval": airIRG3RDUStatusPumpChangeOverInterval,
       "airIRG3RDUStatusStopOnLeakDetect": airIRG3RDUStatusStopOnLeakDetect,
       "airIRG3RDUStatusPowerSource": airIRG3RDUStatusPowerSource,
       "airIRG3RDUStatusTotalRDUOutputPower": airIRG3RDUStatusTotalRDUOutputPower,
       "airIRG3RDUStatusInletWaterTempUS": airIRG3RDUStatusInletWaterTempUS,
       "airIRG3RDUStatusInletWaterTempMetric": airIRG3RDUStatusInletWaterTempMetric,
       "airIRG3RDUStatusOutletWaterTempUS": airIRG3RDUStatusOutletWaterTempUS,
       "airIRG3RDUStatusOutletWaterTempMetric": airIRG3RDUStatusOutletWaterTempMetric,
       "airIRG3RDUStatusCondenserSaturationTempUS": airIRG3RDUStatusCondenserSaturationTempUS,
       "airIRG3RDUStatusCondenserSaturationTempMetric": airIRG3RDUStatusCondenserSaturationTempMetric,
       "airIRG3RDUStatusDewPointTempUS": airIRG3RDUStatusDewPointTempUS,
       "airIRG3RDUStatusDewPointTempMetric": airIRG3RDUStatusDewPointTempMetric,
       "airIRG3RDUStatusPumpOutletTempUS": airIRG3RDUStatusPumpOutletTempUS,
       "airIRG3RDUStatusPumpOutletTempMetric": airIRG3RDUStatusPumpOutletTempMetric,
       "airIRG3RDUStatusSubcoolerOutletTempUS": airIRG3RDUStatusSubcoolerOutletTempUS,
       "airIRG3RDUStatusSubcoolerOutletTempMetric": airIRG3RDUStatusSubcoolerOutletTempMetric,
       "airIRG3RDUStatusCondenserOutletTempUS": airIRG3RDUStatusCondenserOutletTempUS,
       "airIRG3RDUStatusCondenserOutletTempMetric": airIRG3RDUStatusCondenserOutletTempMetric,
       "airIRG3RDUStatusCondenserInletTempUS": airIRG3RDUStatusCondenserInletTempUS,
       "airIRG3RDUStatusCondenserInletTempMetric": airIRG3RDUStatusCondenserInletTempMetric,
       "airIRG3RDUStatusCondenserOutletPressureUS": airIRG3RDUStatusCondenserOutletPressureUS,
       "airIRG3RDUStatusCondenserOutletPressureMetric": airIRG3RDUStatusCondenserOutletPressureMetric,
       "airIRG3RDUStatusPump1HeadPressureUS": airIRG3RDUStatusPump1HeadPressureUS,
       "airIRG3RDUStatusPump1HeadPressureMetric": airIRG3RDUStatusPump1HeadPressureMetric,
       "airIRG3RDUStatusPump2HeadPressureUS": airIRG3RDUStatusPump2HeadPressureUS,
       "airIRG3RDUStatusPump2HeadPressureMetric": airIRG3RDUStatusPump2HeadPressureMetric,
       "airIRG3RDUStatusPump1Speed": airIRG3RDUStatusPump1Speed,
       "airIRG3RDUStatusPump2Speed": airIRG3RDUStatusPump2Speed,
       "airIRG3RDUStatusCWValvePosition": airIRG3RDUStatusCWValvePosition,
       "airIRG3RDUStatusReceiverLiquidLevel": airIRG3RDUStatusReceiverLiquidLevel,
       "airIRG3RDUStatusDCPowerSupply1Current": airIRG3RDUStatusDCPowerSupply1Current,
       "airIRG3RDUStatusDCPowerSupply2Current": airIRG3RDUStatusDCPowerSupply2Current,
       "airIRG3RDUStatusTotalDCPowerSupplyCurrent": airIRG3RDUStatusTotalDCPowerSupplyCurrent,
       "airIRG3RDUStatusInputState": airIRG3RDUStatusInputState,
       "airIRG3RDUStatusOutputState": airIRG3RDUStatusOutputState,
       "airIRG3RDUStatusByPassValvePosition": airIRG3RDUStatusByPassValvePosition,
       "airIRG3RDUStatusRefrigerantLeakDetector": airIRG3RDUStatusRefrigerantLeakDetector,
       "airIRG3RDURunHoursTable": airIRG3RDURunHoursTable,
       "airIRG3RDURunHoursEntry": airIRG3RDURunHoursEntry,
       "airIRG3RDURunHoursDeviceIndex": airIRG3RDURunHoursDeviceIndex,
       "airIRG3RDURunHoursRDUID": airIRG3RDURunHoursRDUID,
       "airIRG3RDURunHoursPump1": airIRG3RDURunHoursPump1,
       "airIRG3RDURunHoursPump2": airIRG3RDURunHoursPump2,
       "airIRG3RDURunHoursPowerSupply1": airIRG3RDURunHoursPowerSupply1,
       "airIRG3RDURunHoursPowerSupply2": airIRG3RDURunHoursPowerSupply2,
       "airIRG3RDUServiceIntervalsTable": airIRG3RDUServiceIntervalsTable,
       "airIRG3RDUServiceIntervalsEntry": airIRG3RDUServiceIntervalsEntry,
       "airIRG3RDUServiceIntervalsDeviceIndex": airIRG3RDUServiceIntervalsDeviceIndex,
       "airIRG3RDUServiceIntervalsRDUID": airIRG3RDUServiceIntervalsRDUID,
       "airIRG3RDUServiceIntervalsAirFilterInterval": airIRG3RDUServiceIntervalsAirFilterInterval,
       "airIRG3RDUServiceIntervalsAirFilterAlarm": airIRG3RDUServiceIntervalsAirFilterAlarm,
       "airIRG3RDUThresholdsTable": airIRG3RDUThresholdsTable,
       "airIRG3RDUThresholdsEntry": airIRG3RDUThresholdsEntry,
       "airIRG3RDUThresholdsDeviceIndex": airIRG3RDUThresholdsDeviceIndex,
       "airIRG3RDUThresholdsRDUID": airIRG3RDUThresholdsRDUID,
       "airIRG3RDUThresholdsEnteringFluidTempHighUS": airIRG3RDUThresholdsEnteringFluidTempHighUS,
       "airIRG3RDUThresholdsEnteringFluidTempHighMetric": airIRG3RDUThresholdsEnteringFluidTempHighMetric,
       "airIRG3RDUSetpointsTable": airIRG3RDUSetpointsTable,
       "airIRG3RDUSetpointsEntry": airIRG3RDUSetpointsEntry,
       "airIRG3RDUSetpointsDeviceIndex": airIRG3RDUSetpointsDeviceIndex,
       "airIRG3RDUConfigTable": airIRG3RDUConfigTable,
       "airIRG3RDUConfigEntry": airIRG3RDUConfigEntry,
       "airIRG3RDUConfigDeviceIndex": airIRG3RDUConfigDeviceIndex,
       "airIRG3RDUConfigRDUID": airIRG3RDUConfigRDUID,
       "airIRG3RDUConfigStopOnLeakDetect": airIRG3RDUConfigStopOnLeakDetect,
       "airIRG3RDUConfigStartupDelay": airIRG3RDUConfigStartupDelay,
       "airIRG3RDUConfigPumpChangeOverInterval": airIRG3RDUConfigPumpChangeOverInterval,
       "airIRG3RDUConfigPowerSource": airIRG3RDUConfigPowerSource,
       "airIRG3RDUConfigOutputSource": airIRG3RDUConfigOutputSource,
       "airIRG3RDUConfigInputNormalState": airIRG3RDUConfigInputNormalState,
       "airIRG3RDUConfigOutputNormalState": airIRG3RDUConfigOutputNormalState,
       "airIRG3RDUConfigByPassValveEnabled": airIRG3RDUConfigByPassValveEnabled,
       "airIRG3RDUConfigRefrigerantLeakDetectorEnabled": airIRG3RDUConfigRefrigerantLeakDetectorEnabled,
       "airIRG3RDUConfigCalibrateRefrigerantLeakDetector": airIRG3RDUConfigCalibrateRefrigerantLeakDetector,
       "airIRG3RDUConfigOnReadyStandby": airIRG3RDUConfigOnReadyStandby,
       "airIRG3CM": airIRG3CM,
       "airIRG3CMTableSize": airIRG3CMTableSize,
       "airIRG3CMStatusTable": airIRG3CMStatusTable,
       "airIRG3CMStatusEntry": airIRG3CMStatusEntry,
       "airIRG3CMStatusDeviceIndex": airIRG3CMStatusDeviceIndex,
       "airIRG3CMStatusCMID": airIRG3CMStatusCMID,
       "airIRG3CMStatusOperatingMode": airIRG3CMStatusOperatingMode,
       "airIRG3CMStatusUnitType": airIRG3CMStatusUnitType,
       "airIRG3CMStatusRackInletTempUS": airIRG3CMStatusRackInletTempUS,
       "airIRG3CMStatusRackInletTempMetric": airIRG3CMStatusRackInletTempMetric,
       "airIRG3CMStatusReturnAirTempUS": airIRG3CMStatusReturnAirTempUS,
       "airIRG3CMStatusReturnAirTempMetric": airIRG3CMStatusReturnAirTempMetric,
       "airIRG3CMStatusLiquidTempUS": airIRG3CMStatusLiquidTempUS,
       "airIRG3CMStatusLiquidTempMetric": airIRG3CMStatusLiquidTempMetric,
       "airIRG3CMStatusVaporTempUS": airIRG3CMStatusVaporTempUS,
       "airIRG3CMStatusVaporTempMetric": airIRG3CMStatusVaporTempMetric,
       "airIRG3CMStatusEvaporatorTempUS": airIRG3CMStatusEvaporatorTempUS,
       "airIRG3CMStatusEvaporatorTempMetric": airIRG3CMStatusEvaporatorTempMetric,
       "airIRG3CMStatusLiquidInletPressureUS": airIRG3CMStatusLiquidInletPressureUS,
       "airIRG3CMStatusLiquidInletPressureMetric": airIRG3CMStatusLiquidInletPressureMetric,
       "airIRG3CMStatusVaporOutletPressureUS": airIRG3CMStatusVaporOutletPressureUS,
       "airIRG3CMStatusVaporOutletPressureMetric": airIRG3CMStatusVaporOutletPressureMetric,
       "airIRG3CMStatusExpansionValvePosition": airIRG3CMStatusExpansionValvePosition,
       "airIRG3CMStatusEPRValvePosition": airIRG3CMStatusEPRValvePosition,
       "airIRG3CMStatusLocalDisplayOnOffEnabled": airIRG3CMStatusLocalDisplayOnOffEnabled,
       "airIRG3CMStatusAverageFanSpeed": airIRG3CMStatusAverageFanSpeed,
       "airIRG3CMRunHoursTable": airIRG3CMRunHoursTable,
       "airIRG3CMRunHoursEntry": airIRG3CMRunHoursEntry,
       "airIRG3CMRunHoursDeviceIndex": airIRG3CMRunHoursDeviceIndex,
       "airIRG3CMRunHoursCMID": airIRG3CMRunHoursCMID,
       "airIRG3CMRunHoursFan1": airIRG3CMRunHoursFan1,
       "airIRG3CMRunHoursFan2": airIRG3CMRunHoursFan2,
       "airIRG3CMRunHoursFan3": airIRG3CMRunHoursFan3,
       "airIRG3CMRunHoursFan4": airIRG3CMRunHoursFan4,
       "airIRG3CMRunHoursFan5": airIRG3CMRunHoursFan5,
       "airIRG3CMRunHoursAirFilter": airIRG3CMRunHoursAirFilter,
       "airIRG3CMServiceIntervalsTable": airIRG3CMServiceIntervalsTable,
       "airIRG3CMServiceIntervalsEntry": airIRG3CMServiceIntervalsEntry,
       "airIRG3CMServiceIntervalsDeviceIndex": airIRG3CMServiceIntervalsDeviceIndex,
       "airIRG3CMServiceIntervalsCMID": airIRG3CMServiceIntervalsCMID,
       "airIRG3CMServiceIntervalsAirFilterInterval": airIRG3CMServiceIntervalsAirFilterInterval,
       "airIRG3CMServiceIntervalsAirFilterAlarm": airIRG3CMServiceIntervalsAirFilterAlarm,
       "airIRG3CMThresholdsTable": airIRG3CMThresholdsTable,
       "airIRG3CMThresholdsEntry": airIRG3CMThresholdsEntry,
       "airIRG3CMThresholdsDeviceIndex": airIRG3CMThresholdsDeviceIndex,
       "airIRG3CMThresholdsCMID": airIRG3CMThresholdsCMID,
       "airIRG3CMThresholdsRackInletTempHighUS": airIRG3CMThresholdsRackInletTempHighUS,
       "airIRG3CMThresholdsRackInletTempHighMetric": airIRG3CMThresholdsRackInletTempHighMetric,
       "airIRG3CMThresholdsSupplyAirTempHighUS": airIRG3CMThresholdsSupplyAirTempHighUS,
       "airIRG3CMThresholdsSupplyAirTempHighMetric": airIRG3CMThresholdsSupplyAirTempHighMetric,
       "airIRG3CMThresholdsReturnAirTempHighUS": airIRG3CMThresholdsReturnAirTempHighUS,
       "airIRG3CMThresholdsReturnAirTempHighMetric": airIRG3CMThresholdsReturnAirTempHighMetric,
       "airIRG3CMSetpointsTable": airIRG3CMSetpointsTable,
       "airIRG3CMSetpointsEntry": airIRG3CMSetpointsEntry,
       "airIRG3CMSetpointsDeviceIndex": airIRG3CMSetpointsDeviceIndex,
       "airIRG3CMConfigTable": airIRG3CMConfigTable,
       "airIRG3CMConfigEntry": airIRG3CMConfigEntry,
       "airIRG3CMConfigDeviceIndex": airIRG3CMConfigDeviceIndex,
       "airIRG3CMConfigCMID": airIRG3CMConfigCMID,
       "airIRG3CMConfigStopOnCoolFail": airIRG3CMConfigStopOnCoolFail,
       "airIRG3CMConfigStartupDelay": airIRG3CMConfigStartupDelay,
       "airIRG3CMConfigRemoteOnStandby": airIRG3CMConfigRemoteOnStandby,
       "airIRG3CMConfigPowerSource": airIRG3CMConfigPowerSource,
       "rARU": rARU,
       "rARUIdent": rARUIdent,
       "rARUIdentTable": rARUIdentTable,
       "rARUIdentEntry": rARUIdentEntry,
       "rARUIdentAruIndex": rARUIdentAruIndex,
       "rARUIdentName": rARUIdentName,
       "rARUConfig": rARUConfig,
       "rARUConfigTable": rARUConfigTable,
       "rARUConfigEntry": rARUConfigEntry,
       "rARUConfigAruIndex": rARUConfigAruIndex,
       "rARUConfigAruName": rARUConfigAruName,
       "rARUConfigAruRemoteSetpoint": rARUConfigAruRemoteSetpoint,
       "rARUConfigAruTempOvrdEnableDisable": rARUConfigAruTempOvrdEnableDisable,
       "rARUConfigAruTempOvrdSetpoint": rARUConfigAruTempOvrdSetpoint,
       "rARUConfigAruMasterControl": rARUConfigAruMasterControl,
       "rARUStatus": rARUStatus,
       "rARUStatusAruDeviceCount": rARUStatusAruDeviceCount,
       "rARUStatusSysTempUnits": rARUStatusSysTempUnits,
       "rARUStatusTable": rARUStatusTable,
       "rARUStatusEntry": rARUStatusEntry,
       "rARUStatusAruIndex": rARUStatusAruIndex,
       "rARUStatusAruName": rARUStatusAruName,
       "rARUStatusAruRemoteSetpoint": rARUStatusAruRemoteSetpoint,
       "rARUStatusAruManualSetpoint": rARUStatusAruManualSetpoint,
       "rARUStatusAruTemp1": rARUStatusAruTemp1,
       "rARUStatusAruTemp2": rARUStatusAruTemp2,
       "rARUStatusAruTemp3": rARUStatusAruTemp3,
       "rARUStatusAruTempOvrdEnableDisable": rARUStatusAruTempOvrdEnableDisable,
       "rARUStatusAruTempOvrdSetpoint": rARUStatusAruTempOvrdSetpoint,
       "rARUStatusAruAlarmState": rARUStatusAruAlarmState,
       "rARUStatusAruCommStatus": rARUStatusAruCommStatus,
       "rARUStatusAruTempOvrdStatus": rARUStatusAruTempOvrdStatus,
       "rARUStatusAruMasterControl": rARUStatusAruMasterControl,
       "rARUStatusAruTotalAirflow": rARUStatusAruTotalAirflow,
       "rARUFanStatus": rARUFanStatus,
       "rARUFanStatusTable": rARUFanStatusTable,
       "rARUFanStatusEntry": rARUFanStatusEntry,
       "rARUFanStatusAruIndex": rARUFanStatusAruIndex,
       "rARUFanStatusNominalFanSpeed": rARUFanStatusNominalFanSpeed,
       "rARUFanStatusSelectedFanLevel": rARUFanStatusSelectedFanLevel,
       "rARUFanStatusReplacementThreshold": rARUFanStatusReplacementThreshold,
       "rARUFanStatusFanIndex": rARUFanStatusFanIndex,
       "rARUFanStatusFanOperatingStatus": rARUFanStatusFanOperatingStatus,
       "rARUFanStatusFanRpmSpeed": rARUFanStatusFanRpmSpeed,
       "rARUFanStatusFanFlowRate": rARUFanStatusFanFlowRate,
       "rARUFanStatusFanInServiceDate": rARUFanStatusFanInServiceDate,
       "rARUFanStatusFanRunhourCounter": rARUFanStatusFanRunhourCounter,
       "rARUFanStatusFanRunhourReset": rARUFanStatusFanRunhourReset,
       "rARUPower": rARUPower,
       "rARUPowerStatusTable": rARUPowerStatusTable,
       "rARUPowerStatusEntry": rARUPowerStatusEntry,
       "rARUPowerStatusAruIndex": rARUPowerStatusAruIndex,
       "rARUPowerStatusPrimaryAcPresent": rARUPowerStatusPrimaryAcPresent,
       "rARUPowerStatusAuxiliaryAcPresent": rARUPowerStatusAuxiliaryAcPresent,
       "rARUPowerStatusRedundantAcConfig": rARUPowerStatusRedundantAcConfig,
       "rARUSensors": rARUSensors,
       "rARUSensorsStatusTableSize": rARUSensorsStatusTableSize,
       "rARUSensorsStatusTable": rARUSensorsStatusTable,
       "rARUSensorsStatusEntry": rARUSensorsStatusEntry,
       "rARUSensorsStatusAruIndex": rARUSensorsStatusAruIndex,
       "rARUSensorsStatusSensorNumber": rARUSensorsStatusSensorNumber,
       "rARUSensorsTemperature": rARUSensorsTemperature,
       "rARUSensorsConfigTableSize": rARUSensorsConfigTableSize,
       "rARUSensorsConfigTable": rARUSensorsConfigTable,
       "rARUSensorsConfigEntry": rARUSensorsConfigEntry,
       "rARUSensorsConfigAruIndex": rARUSensorsConfigAruIndex,
       "rARUSensorsConfigSensorNumber": rARUSensorsConfigSensorNumber,
       "rARUSensorsName": rARUSensorsName,
       "rARUSensorsLocation": rARUSensorsLocation,
       "rARUSensorsTempMaxThresh": rARUSensorsTempMaxThresh,
       "rARUSensorsTempHighThresh": rARUSensorsTempHighThresh,
       "rARUSensorsTempLowThresh": rARUSensorsTempLowThresh,
       "rARUSensorsTempMinThresh": rARUSensorsTempMinThresh,
       "rARUSensorsTempThreshHysteresis": rARUSensorsTempThreshHysteresis,
       "rARUSensorsTempShortDecRateThreshValue": rARUSensorsTempShortDecRateThreshValue,
       "rARUSensorsTempShortDecRateThreshTime": rARUSensorsTempShortDecRateThreshTime,
       "rARUSensorsTempShortIncRateThreshValue": rARUSensorsTempShortIncRateThreshValue,
       "rARUSensorsTempShortIncRateThreshTime": rARUSensorsTempShortIncRateThreshTime,
       "rARUSensorsTempLongDecRateThreshValue": rARUSensorsTempLongDecRateThreshValue,
       "rARUSensorsTempLongDecRateThreshTime": rARUSensorsTempLongDecRateThreshTime,
       "rARUSensorsTempLongIncRateThreshValue": rARUSensorsTempLongIncRateThreshValue,
       "rARUSensorsTempLongIncRateThreshTime": rARUSensorsTempLongIncRateThreshTime,
       "xPDU": xPDU,
       "xPDUIdent": xPDUIdent,
       "xPDUIdentProductName": xPDUIdentProductName,
       "xPDUIdentHardwareRev": xPDUIdentHardwareRev,
       "xPDUIdentFirmwareAppRev": xPDUIdentFirmwareAppRev,
       "xPDUIdentFirmwareAppOSRev": xPDUIdentFirmwareAppOSRev,
       "xPDUIdentFirmwareControllerRev": xPDUIdentFirmwareControllerRev,
       "xPDUIdentDateOfManufacture": xPDUIdentDateOfManufacture,
       "xPDUIdentModelNumber": xPDUIdentModelNumber,
       "xPDUIdentSerialNumber": xPDUIdentSerialNumber,
       "xPDUDevice": xPDUDevice,
       "xPDUDeviceNominalMainInputVoltage": xPDUDeviceNominalMainInputVoltage,
       "xPDUDeviceServiceType": xPDUDeviceServiceType,
       "xPDUDeviceNominalOutputVoltage": xPDUDeviceNominalOutputVoltage,
       "xPDUDeviceMainInputBreakerRating": xPDUDeviceMainInputBreakerRating,
       "xPDUDevicePanelBreakerRating": xPDUDevicePanelBreakerRating,
       "xPDUDeviceTransformerPresent": xPDUDeviceTransformerPresent,
       "xPDUDeviceLoadTieBreakerPresent": xPDUDeviceLoadTieBreakerPresent,
       "xPDUDeviceLoadTestPortPresent": xPDUDeviceLoadTestPortPresent,
       "xPDUDeviceFusesPresent": xPDUDeviceFusesPresent,
       "xPDUDeviceFansPresent": xPDUDeviceFansPresent,
       "xPDUDeviceBypassInputPresent": xPDUDeviceBypassInputPresent,
       "xPDUDeviceCrossTieOutputPresent": xPDUDeviceCrossTieOutputPresent,
       "xPDUDeviceEarthGroundMonitorPresent": xPDUDeviceEarthGroundMonitorPresent,
       "xPDUDeviceInfraStruXureType": xPDUDeviceInfraStruXureType,
       "xPDUACMonitoringPoint": xPDUACMonitoringPoint,
       "xPDUMainInput": xPDUMainInput,
       "xPDUMainInputOverVoltThreshold": xPDUMainInputOverVoltThreshold,
       "xPDUMainInputUnderVoltThreshold": xPDUMainInputUnderVoltThreshold,
       "xPDUMainInputVoltageTableSize": xPDUMainInputVoltageTableSize,
       "xPDUMainInputVoltagePhaseTable": xPDUMainInputVoltagePhaseTable,
       "xPDUMainInputVoltagePhaseEntry": xPDUMainInputVoltagePhaseEntry,
       "xPDUMainInputVoltagePhaseIndex": xPDUMainInputVoltagePhaseIndex,
       "xPDUMainInputVoltageLtoL": xPDUMainInputVoltageLtoL,
       "xPDUMainInputVoltageLtoN": xPDUMainInputVoltageLtoN,
       "xPDUBypassInput": xPDUBypassInput,
       "xPDUBypassInputOverVoltThreshold": xPDUBypassInputOverVoltThreshold,
       "xPDUBypassInputUnderVoltThreshold": xPDUBypassInputUnderVoltThreshold,
       "xPDUBypassInputVoltagePhaseTableSize": xPDUBypassInputVoltagePhaseTableSize,
       "xPDUBypassInputVoltagePhaseTable": xPDUBypassInputVoltagePhaseTable,
       "xPDUBypassInputVoltagePhaseEntry": xPDUBypassInputVoltagePhaseEntry,
       "xPDUBypassInputVoltagePhaseIndex": xPDUBypassInputVoltagePhaseIndex,
       "xPDUBypassInputVoltageLtoL": xPDUBypassInputVoltageLtoL,
       "xPDUBypassInputVoltageLtoN": xPDUBypassInputVoltageLtoN,
       "xPDUUPSInput": xPDUUPSInput,
       "xPDUUPSInputVoltagePhaseTableSize": xPDUUPSInputVoltagePhaseTableSize,
       "xPDUUPSInputVoltagePhaseTable": xPDUUPSInputVoltagePhaseTable,
       "xPDUUPSInputVoltagePhaseEntry": xPDUUPSInputVoltagePhaseEntry,
       "xPDUUPSInputVoltagePhaseIndex": xPDUUPSInputVoltagePhaseIndex,
       "xPDUUPSInputVoltageLtoNPresent": xPDUUPSInputVoltageLtoNPresent,
       "xPDUSystemOutput": xPDUSystemOutput,
       "xPDUSystemOutputFrequency": xPDUSystemOutputFrequency,
       "xPDUSystemOutputNeutralCurrent": xPDUSystemOutputNeutralCurrent,
       "xPDUSystemOutputTotalPower": xPDUSystemOutputTotalPower,
       "xPDUSystemOutputTotalApparentPower": xPDUSystemOutputTotalApparentPower,
       "xPDUSystemOutputTotalPowerFactor": xPDUSystemOutputTotalPowerFactor,
       "xPDUSystemOutputFrequencyTolerance": xPDUSystemOutputFrequencyTolerance,
       "xPDUSystemOutputMaxKWPower": xPDUSystemOutputMaxKWPower,
       "xPDUSystemOutputOverVoltThreshold": xPDUSystemOutputOverVoltThreshold,
       "xPDUSystemOutputUnderVoltThreshold": xPDUSystemOutputUnderVoltThreshold,
       "xPDUSystemOutputOverCurrentThreshold": xPDUSystemOutputOverCurrentThreshold,
       "xPDUSystemOutputOverCurrentNeutralThreshold": xPDUSystemOutputOverCurrentNeutralThreshold,
       "xPDUSystemOutputUnderCurrentThreshold": xPDUSystemOutputUnderCurrentThreshold,
       "xPDUSystemOutputTableSize": xPDUSystemOutputTableSize,
       "xPDUSystemOutputPhaseTable": xPDUSystemOutputPhaseTable,
       "xPDUSystemOutputPhaseEntry": xPDUSystemOutputPhaseEntry,
       "xPDUSystemOutputPhaseIndex": xPDUSystemOutputPhaseIndex,
       "xPDUSystemOutputVoltageLtoL": xPDUSystemOutputVoltageLtoL,
       "xPDUSystemOutputVoltageLtoN": xPDUSystemOutputVoltageLtoN,
       "xPDUSystemOutputPhaseCurrent": xPDUSystemOutputPhaseCurrent,
       "xPDUSystemOutputPower": xPDUSystemOutputPower,
       "xPDUSystemOutputApparentPower": xPDUSystemOutputApparentPower,
       "xPDUSystemOutputPowerFactor": xPDUSystemOutputPowerFactor,
       "xPDUGroundMonitorPoint": xPDUGroundMonitorPoint,
       "xPDUGroundCurrent": xPDUGroundCurrent,
       "xPDUGroundCurrentThreshold": xPDUGroundCurrentThreshold,
       "xPDUCircuitBreakers": xPDUCircuitBreakers,
       "xPDUSystemBreakers": xPDUSystemBreakers,
       "xPDUSystemBreakerTableSize": xPDUSystemBreakerTableSize,
       "xPDUSystemBreakerTable": xPDUSystemBreakerTable,
       "xPDUSystemBreakerEntry": xPDUSystemBreakerEntry,
       "xPDUSystemBreakerTableIndex": xPDUSystemBreakerTableIndex,
       "xPDUSystemBreakerDescription": xPDUSystemBreakerDescription,
       "xPDUSystemBreakerPosition": xPDUSystemBreakerPosition,
       "xPDUBranchBreakers": xPDUBranchBreakers,
       "xPDUNumOfBranchBreakers": xPDUNumOfBranchBreakers,
       "xPDUBranchBreakerTableSize": xPDUBranchBreakerTableSize,
       "xPDUBranchBreakerTable": xPDUBranchBreakerTable,
       "xPDUBranchBreakerEntry": xPDUBranchBreakerEntry,
       "xPDUBranchBreakerTableIndex": xPDUBranchBreakerTableIndex,
       "xPDUBranchBreakerRating": xPDUBranchBreakerRating,
       "xPDUBranchBreakerRDPFeed": xPDUBranchBreakerRDPFeed,
       "xPDUBranchBreakerTieIndicator": xPDUBranchBreakerTieIndicator,
       "xPDUBranchBreakerCurrent": xPDUBranchBreakerCurrent,
       "xPDUBranchBreakerOverCurrentThreshold": xPDUBranchBreakerOverCurrentThreshold,
       "xPDUBranchBreakerUnderCurrentThreshold": xPDUBranchBreakerUnderCurrentThreshold,
       "xPDUBranchBreakerMaxCurrentThreshold": xPDUBranchBreakerMaxCurrentThreshold,
       "xPDUBranchBreakerMinCurrentThreshold": xPDUBranchBreakerMinCurrentThreshold,
       "xPDUBranchBreakerName": xPDUBranchBreakerName,
       "xPDUBranchBreakerLocation": xPDUBranchBreakerLocation,
       "xPDUInputContacts": xPDUInputContacts,
       "xPDUInputContactNumContacts": xPDUInputContactNumContacts,
       "xPDUInputContactTableSize": xPDUInputContactTableSize,
       "xPDUInputContactTable": xPDUInputContactTable,
       "xPDUInputContactEntry": xPDUInputContactEntry,
       "xPDUInputContactNumber": xPDUInputContactNumber,
       "xPDUInputContactName": xPDUInputContactName,
       "xPDUInputContactNormalState": xPDUInputContactNormalState,
       "xPDUInputContactCurrentState": xPDUInputContactCurrentState,
       "xPDUOutputRelays": xPDUOutputRelays,
       "xPDUOutputRelaysNumRelays": xPDUOutputRelaysNumRelays,
       "xPDUOutputRelaysTableSize": xPDUOutputRelaysTableSize,
       "xPDUOutputRelayTable": xPDUOutputRelayTable,
       "xPDUOutputRelayEntry": xPDUOutputRelayEntry,
       "xPDUOutputRelayNumber": xPDUOutputRelayNumber,
       "xPDUOutputRelayName": xPDUOutputRelayName,
       "xPDUOutputRelayNormalState": xPDUOutputRelayNormalState,
       "xPDUOutputRelayCurrentState": xPDUOutputRelayCurrentState,
       "xPDUMiscGroup": xPDUMiscGroup,
       "xPDUEPOMode": xPDUEPOMode,
       "xPDUTransformTempStatus": xPDUTransformTempStatus,
       "xPDUCoolingFanStatus": xPDUCoolingFanStatus,
       "battMan": battMan,
       "battManIdent": battManIdent,
       "battManIdentProductName": battManIdentProductName,
       "battManIdentHardwareRev": battManIdentHardwareRev,
       "battManIdentFirmwareRev": battManIdentFirmwareRev,
       "battManIdentDateOfManufacture": battManIdentDateOfManufacture,
       "battManIdentModelNumber": battManIdentModelNumber,
       "battManIdentSerialNumber": battManIdentSerialNumber,
       "battManSystemCalib": battManSystemCalib,
       "battManOhmicValueCorrectionFactor": battManOhmicValueCorrectionFactor,
       "battManUnitCalib": battManUnitCalib,
       "battManUnitCalibTableSize": battManUnitCalibTableSize,
       "battManUnitCalibTable": battManUnitCalibTable,
       "battManUnitCalibEntry": battManUnitCalibEntry,
       "battManUnitCalibIndex": battManUnitCalibIndex,
       "battManUnitSerialNumber": battManUnitSerialNumber,
       "battManBatteryVoltageZeroCalib": battManBatteryVoltageZeroCalib,
       "battManBatteryVoltageSpanCalib": battManBatteryVoltageSpanCalib,
       "battManStringCalib": battManStringCalib,
       "battManStringCalibTableSize": battManStringCalibTableSize,
       "battManStringCalibTable": battManStringCalibTable,
       "battManStringCalibEntry": battManStringCalibEntry,
       "battManStringCalibIndex": battManStringCalibIndex,
       "battManDCCurrentZeroCalib": battManDCCurrentZeroCalib,
       "battManACCurrentZeroCalib": battManACCurrentZeroCalib,
       "battManProbeRange": battManProbeRange,
       "battManBatteryCalib": battManBatteryCalib,
       "battManString1BatteryCalibTableSize": battManString1BatteryCalibTableSize,
       "battManString1BatteryCalibTable": battManString1BatteryCalibTable,
       "battManString1BatteryCalibEntry": battManString1BatteryCalibEntry,
       "battManString1BatteryCalibIndex": battManString1BatteryCalibIndex,
       "battManString1BatteryInterTierOhmicValue": battManString1BatteryInterTierOhmicValue,
       "battManString2BatteryCalibTableSize": battManString2BatteryCalibTableSize,
       "battManString2BatteryCalibTable": battManString2BatteryCalibTable,
       "battManString2BatteryCalibEntry": battManString2BatteryCalibEntry,
       "battManString2BatteryCalibIndex": battManString2BatteryCalibIndex,
       "battManString2BatteryInterTierOhmicValue": battManString2BatteryInterTierOhmicValue,
       "battManConfig": battManConfig,
       "battManConfigApplication": battManConfigApplication,
       "battManConfigBatteryChemistry": battManConfigBatteryChemistry,
       "battManConfigBatteryAHCapacity": battManConfigBatteryAHCapacity,
       "battManConfigNumberofStrings": battManConfigNumberofStrings,
       "battManConfigBatteriesperString": battManConfigBatteriesperString,
       "battManConfigCellsperBattery": battManConfigCellsperBattery,
       "battManConfigMinCellVoltage": battManConfigMinCellVoltage,
       "battManConfigMaxCellVoltage": battManConfigMaxCellVoltage,
       "battManConfigMaxPilotTempF": battManConfigMaxPilotTempF,
       "battManConfigMaxPilotTempC": battManConfigMaxPilotTempC,
       "battManConfigMaxAmbientTempF": battManConfigMaxAmbientTempF,
       "battManConfigMaxAmbientTempC": battManConfigMaxAmbientTempC,
       "battManConfigMinAmbientTempF": battManConfigMinAmbientTempF,
       "battManConfigMinAmbientTempC": battManConfigMinAmbientTempC,
       "battManConfigMaxRippleCurrent": battManConfigMaxRippleCurrent,
       "battManConfigMaxCurrentAcceptanceDeviation": battManConfigMaxCurrentAcceptanceDeviation,
       "battManConfigMonitorWireLength": battManConfigMonitorWireLength,
       "battManConfigDischargeVoltageAlarmLevel": battManConfigDischargeVoltageAlarmLevel,
       "battManConfigAutoAnnunciatorReset": battManConfigAutoAnnunciatorReset,
       "battManConfigSuspendCellVoltage": battManConfigSuspendCellVoltage,
       "battManConfigOhmicTestWaitTime": battManConfigOhmicTestWaitTime,
       "battManConfigNumberOfBoosts": battManConfigNumberOfBoosts,
       "battManAlarm": battManAlarm,
       "battManAlarmManagementController": battManAlarmManagementController,
       "battManAlarmBatteries": battManAlarmBatteries,
       "battManAlarmCharger": battManAlarmCharger,
       "battManAlarmEnvironment": battManAlarmEnvironment,
       "battManSystemStatus": battManSystemStatus,
       "battManSystemAmbientTempC": battManSystemAmbientTempC,
       "battManSystemAmbientTempF": battManSystemAmbientTempF,
       "battManSystemPilotTempC": battManSystemPilotTempC,
       "battManSystemPilotTempF": battManSystemPilotTempF,
       "battManSystemAmbientHighTempAlarm": battManSystemAmbientHighTempAlarm,
       "battManSystemAmbientLowTempAlarm": battManSystemAmbientLowTempAlarm,
       "battManSystemPilotBatteryHighTempAlarm": battManSystemPilotBatteryHighTempAlarm,
       "battManSystemPilotProbeDisconnected": battManSystemPilotProbeDisconnected,
       "battManSystemAmbientProbeDisconnected": battManSystemAmbientProbeDisconnected,
       "battManSystemConfigurationInvalid": battManSystemConfigurationInvalid,
       "battManSystemSuspendVoltage": battManSystemSuspendVoltage,
       "battManStringStatus": battManStringStatus,
       "battManStringTableSize": battManStringTableSize,
       "battManStringTable": battManStringTable,
       "battManStringEntry": battManStringEntry,
       "battManStringIndex": battManStringIndex,
       "battManStringCurrent": battManStringCurrent,
       "battManStringRippleCurrent": battManStringRippleCurrent,
       "battManStringChargerHighVoltageAlarm": battManStringChargerHighVoltageAlarm,
       "battManStringChargerLowVoltageAlarm": battManStringChargerLowVoltageAlarm,
       "battManStringCurrentProbeDisconnected": battManStringCurrentProbeDisconnected,
       "battManStringOnBattery": battManStringOnBattery,
       "battManStringHighRippleCurrent": battManStringHighRippleCurrent,
       "battManStringVoltage": battManStringVoltage,
       "battManStringDischargeLess5Seconds": battManStringDischargeLess5Seconds,
       "battManStringDischarge5to10Seconds": battManStringDischarge5to10Seconds,
       "battManStringDischarge10to60Seconds": battManStringDischarge10to60Seconds,
       "battManStringDischargeMore60Seconds": battManStringDischargeMore60Seconds,
       "battManBatteryStatus": battManBatteryStatus,
       "battManString1BatteryTableSize": battManString1BatteryTableSize,
       "battManString1BatteryTable": battManString1BatteryTable,
       "battManString1BatteryEntry": battManString1BatteryEntry,
       "battManString1BatteryIndex": battManString1BatteryIndex,
       "battManString1BatteryVoltage": battManString1BatteryVoltage,
       "battManString1BatteryLowestVoltage": battManString1BatteryLowestVoltage,
       "battManString1BatteryCellShorted": battManString1BatteryCellShorted,
       "battManString1BatteryOpenFuseOrConnection": battManString1BatteryOpenFuseOrConnection,
       "battManString1BatteryLowCapacity": battManString1BatteryLowCapacity,
       "battManString1BatteryHighOhmicValue": battManString1BatteryHighOhmicValue,
       "battManString1BatteryThermalRunaway": battManString1BatteryThermalRunaway,
       "battManString1BatteryDryout": battManString1BatteryDryout,
       "battManString1BatteryUserHighVoltageAlarm": battManString1BatteryUserHighVoltageAlarm,
       "battManString1BatteryUserLowVoltageAlarm": battManString1BatteryUserLowVoltageAlarm,
       "battManString1BatteryChemHighVoltageAlarm": battManString1BatteryChemHighVoltageAlarm,
       "battManString1BatteryChemLowVoltageAlarm": battManString1BatteryChemLowVoltageAlarm,
       "battManString1BatteryOpenCell": battManString1BatteryOpenCell,
       "battManString2BatteryTableSize": battManString2BatteryTableSize,
       "battManString2BatteryTable": battManString2BatteryTable,
       "battManString2BatteryEntry": battManString2BatteryEntry,
       "battManString2BatteryIndex": battManString2BatteryIndex,
       "battManString2BatteryVoltage": battManString2BatteryVoltage,
       "battManString2BatteryLowestVoltage": battManString2BatteryLowestVoltage,
       "battManString2BatteryCellShorted": battManString2BatteryCellShorted,
       "battManString2BatteryOpenFuseOrConnection": battManString2BatteryOpenFuseOrConnection,
       "battManString2BatteryLowCapacity": battManString2BatteryLowCapacity,
       "battManString2BatteryHighOhmicValue": battManString2BatteryHighOhmicValue,
       "battManString2BatteryThermalRunaway": battManString2BatteryThermalRunaway,
       "battManString2BatteryDryout": battManString2BatteryDryout,
       "battManString2BatteryUserHighVoltageAlarm": battManString2BatteryUserHighVoltageAlarm,
       "battManString2BatteryUserLowVoltageAlarm": battManString2BatteryUserLowVoltageAlarm,
       "battManString2BatteryChemHighVoltageAlarm": battManString2BatteryChemHighVoltageAlarm,
       "battManString2BatteryChemLowVoltageAlarm": battManString2BatteryChemLowVoltageAlarm,
       "battManString2BatteryOpenCell": battManString2BatteryOpenCell,
       "battManInputContactStatus": battManInputContactStatus,
       "battManInputContactTableSize": battManInputContactTableSize,
       "battManInputContactTable": battManInputContactTable,
       "battManInputContactEntry": battManInputContactEntry,
       "battManInputContactIndex": battManInputContactIndex,
       "battManInputContactName": battManInputContactName,
       "battManInputContactAlarmState": battManInputContactAlarmState,
       "battManInputContactState": battManInputContactState,
       "battManInputContactNormalState": battManInputContactNormalState,
       "battManInputContactAlarmDelay": battManInputContactAlarmDelay,
       "battManControl": battManControl,
       "battManRemoteAnnunciatorReset": battManRemoteAnnunciatorReset,
       "battManResetChargeCurrentDeviationBenchmark": battManResetChargeCurrentDeviationBenchmark,
       "battManResetLowestDischargeVoltages": battManResetLowestDischargeVoltages,
       "battManResetDischargeCounters": battManResetDischargeCounters,
       "battManTestResults": battManTestResults,
       "battManString1OhmicValueLastDischargeInfo": battManString1OhmicValueLastDischargeInfo,
       "battManString1OhmicValueTableSize": battManString1OhmicValueTableSize,
       "battManString1OhmicValueTable": battManString1OhmicValueTable,
       "battManString1OhmicValueEntry": battManString1OhmicValueEntry,
       "battManString1OhmicValueIndex": battManString1OhmicValueIndex,
       "battManString1OhmicValueData": battManString1OhmicValueData,
       "battManString1ResponseTestChangeTableSize": battManString1ResponseTestChangeTableSize,
       "battManString1ResponseTestChangeTable": battManString1ResponseTestChangeTable,
       "battManString1ResponseTestChangeEntry": battManString1ResponseTestChangeEntry,
       "battManString1ResponseTestChangeIndex": battManString1ResponseTestChangeIndex,
       "battManString1ResponseTestChangeData": battManString1ResponseTestChangeData,
       "battManString2OhmicValueLastDischargeInfo": battManString2OhmicValueLastDischargeInfo,
       "battManString2OhmicValueTableSize": battManString2OhmicValueTableSize,
       "battManString2OhmicValueTable": battManString2OhmicValueTable,
       "battManString2OhmicValueEntry": battManString2OhmicValueEntry,
       "battManString2OhmicValueIndex": battManString2OhmicValueIndex,
       "battManString2OhmicValueData": battManString2OhmicValueData,
       "battManString2ResponseTestChangeTableSize": battManString2ResponseTestChangeTableSize,
       "battManString2ResponseTestChangeTable": battManString2ResponseTestChangeTable,
       "battManString2ResponseTestChangeEntry": battManString2ResponseTestChangeEntry,
       "battManString2ResponseTestChangeIndex": battManString2ResponseTestChangeIndex,
       "battManString2ResponseTestChangeData": battManString2ResponseTestChangeData,
       "battManUnitStatus": battManUnitStatus,
       "battManUnitStatusTableSize": battManUnitStatusTableSize,
       "battManUnitStatusTable": battManUnitStatusTable,
       "battManUnitStatusEntry": battManUnitStatusEntry,
       "battManUnitStatusIndex": battManUnitStatusIndex,
       "battManUnitStatusSerialNumber": battManUnitStatusSerialNumber,
       "battManUnitHardwareRev": battManUnitHardwareRev,
       "battManUnitFirmwareRev": battManUnitFirmwareRev,
       "battManUnitCommLoss": battManUnitCommLoss,
       "battManUnitRelayStuck": battManUnitRelayStuck,
       "xATS": xATS,
       "xATSIdent": xATSIdent,
       "xATSIdentProductName": xATSIdentProductName,
       "xATSIdentHardwareRev": xATSIdentHardwareRev,
       "xATSIdentFirmwareAppRev": xATSIdentFirmwareAppRev,
       "xATSIdentFirmwareAppOSRev": xATSIdentFirmwareAppOSRev,
       "xATSIdentFirmwareControllerRev": xATSIdentFirmwareControllerRev,
       "xATSIdentDateOfManufacture": xATSIdentDateOfManufacture,
       "xATSIdentModelNumber": xATSIdentModelNumber,
       "xATSIdentSerialNumber": xATSIdentSerialNumber,
       "xATSDevice": xATSDevice,
       "xATSDeviceServiceType": xATSDeviceServiceType,
       "xATSDeviceNominalVoltage": xATSDeviceNominalVoltage,
       "xATSDeviceNominalFrequency": xATSDeviceNominalFrequency,
       "xATSDeviceTransferSwitchRating": xATSDeviceTransferSwitchRating,
       "xATSDeviceDCBackUpPresent": xATSDeviceDCBackUpPresent,
       "xATSSwitch": xATSSwitch,
       "xATSSwitchStatus": xATSSwitchStatus,
       "xATSSwitchStatusSelectedSource": xATSSwitchStatusSelectedSource,
       "xATSSwitchStatusOperationalMode": xATSSwitchStatusOperationalMode,
       "xATSSwitchStatusAutomaticOperationSwitch": xATSSwitchStatusAutomaticOperationSwitch,
       "xATSSwitchStatusEngineStartSignal": xATSSwitchStatusEngineStartSignal,
       "xATSSwitchSettings": xATSSwitchSettings,
       "xATSSwitchSettingsLowVoltageTransferPoint": xATSSwitchSettingsLowVoltageTransferPoint,
       "xATSSwitchSettingsHighVoltageTransferPoint": xATSSwitchSettingsHighVoltageTransferPoint,
       "xATSSwitchSettingsMaxFrequencyDeviation": xATSSwitchSettingsMaxFrequencyDeviation,
       "xATSSwitchSettingsMinPhaseBalance": xATSSwitchSettingsMinPhaseBalance,
       "xATSSwitchSettingsNominalRotation": xATSSwitchSettingsNominalRotation,
       "xATSSwitchSettingsAllowClosedTransfer": xATSSwitchSettingsAllowClosedTransfer,
       "xATSSwitchSettingsMaxSyncTime": xATSSwitchSettingsMaxSyncTime,
       "xATSSwitchSettingsNeutralTransferTime": xATSSwitchSettingsNeutralTransferTime,
       "xATSSwitchSettingsClearLatchedAlarms": xATSSwitchSettingsClearLatchedAlarms,
       "xATSSwitchSettingsSetToFactoryDefaults": xATSSwitchSettingsSetToFactoryDefaults,
       "xATSSwitchTimers": xATSSwitchTimers,
       "xATSSwitchTimersTableSize": xATSSwitchTimersTableSize,
       "xATSSwitchTimersTable": xATSSwitchTimersTable,
       "xATSSwitchTimersEntry": xATSSwitchTimersEntry,
       "xATSSwitchTimersIndex": xATSSwitchTimersIndex,
       "xATSSwitchTimersName": xATSSwitchTimersName,
       "xATSSwitchTimersAbort": xATSSwitchTimersAbort,
       "xATSSwitchTimersStatus": xATSSwitchTimersStatus,
       "xATSSwitchTimersRemainingTime": xATSSwitchTimersRemainingTime,
       "xATSSwitchTimersDelaySetting": xATSSwitchTimersDelaySetting,
       "xATSSwitchBlockMap": xATSSwitchBlockMap,
       "xATSSwitchBlockMapTableSize": xATSSwitchBlockMapTableSize,
       "xATSSwitchBlockMapTable": xATSSwitchBlockMapTable,
       "xATSSwitchBlockMapEntry": xATSSwitchBlockMapEntry,
       "xATSSwitchBlockMapIndex": xATSSwitchBlockMapIndex,
       "xATSSwitchBlockMapName": xATSSwitchBlockMapName,
       "xATSSwitchBlockMapStatus": xATSSwitchBlockMapStatus,
       "xATSSwitchBlockMapSetting": xATSSwitchBlockMapSetting,
       "xATSSwitchStatistics": xATSSwitchStatistics,
       "xATSSwitchStatisticsTableSize": xATSSwitchStatisticsTableSize,
       "xATSSwitchStatisticsTable": xATSSwitchStatisticsTable,
       "xATSSwitchStatisticsEntry": xATSSwitchStatisticsEntry,
       "xATSSwitchStatisticsIndex": xATSSwitchStatisticsIndex,
       "xATSSwitchStatisticsName": xATSSwitchStatisticsName,
       "xATSSwitchStatisticsValue": xATSSwitchStatisticsValue,
       "xATSSwitchStatisticsReset": xATSSwitchStatisticsReset,
       "xATSACMonitoringPoint": xATSACMonitoringPoint,
       "xATSSource1": xATSSource1,
       "xATSSource1Name": xATSSource1Name,
       "xATSSource1Position": xATSSource1Position,
       "xATSSource1Frequency": xATSSource1Frequency,
       "xATSSource1Quality": xATSSource1Quality,
       "xATSSource1Rotation": xATSSource1Rotation,
       "xATSSource1TableSize": xATSSource1TableSize,
       "xATSSource1PhaseTable": xATSSource1PhaseTable,
       "xATSSource1PhaseEntry": xATSSource1PhaseEntry,
       "xATSSource1Index": xATSSource1Index,
       "xATSSource1VoltageLtoL": xATSSource1VoltageLtoL,
       "xATSSource1VoltageLtoN": xATSSource1VoltageLtoN,
       "xATSSource2": xATSSource2,
       "xATSSource2Name": xATSSource2Name,
       "xATSSource2Position": xATSSource2Position,
       "xATSSource2Frequency": xATSSource2Frequency,
       "xATSSource2Quality": xATSSource2Quality,
       "xATSSource2Rotation": xATSSource2Rotation,
       "xATSSource2TableSize": xATSSource2TableSize,
       "xATSSource2PhaseTable": xATSSource2PhaseTable,
       "xATSSource2PhaseEntry": xATSSource2PhaseEntry,
       "xATSSource2Index": xATSSource2Index,
       "xATSSource2VoltageLtoL": xATSSource2VoltageLtoL,
       "xATSSource2VoltageLtoN": xATSSource2VoltageLtoN,
       "xATSSystemOutput": xATSSystemOutput,
       "xATSSystemOutputFrequency": xATSSystemOutputFrequency,
       "xATSSystemOutputTotalPower": xATSSystemOutputTotalPower,
       "xATSSystemOutputTotalApparentPower": xATSSystemOutputTotalApparentPower,
       "xATSSystemOutputTotalPowerFactor": xATSSystemOutputTotalPowerFactor,
       "xATSSystemOutputFrequencyTolerance": xATSSystemOutputFrequencyTolerance,
       "xATSSystemOutputOverVoltThreshold": xATSSystemOutputOverVoltThreshold,
       "xATSSystemOutputUnderVoltThreshold": xATSSystemOutputUnderVoltThreshold,
       "xATSSystemOutputOverCurrentThreshold": xATSSystemOutputOverCurrentThreshold,
       "xATSSystemOutputUnderCurrentThreshold": xATSSystemOutputUnderCurrentThreshold,
       "xATSSystemOutputAlarmDelayThreshold": xATSSystemOutputAlarmDelayThreshold,
       "xATSSystemOutputTableSize": xATSSystemOutputTableSize,
       "xATSSystemOutputPhaseTable": xATSSystemOutputPhaseTable,
       "xATSSystemOutputPhaseEntry": xATSSystemOutputPhaseEntry,
       "xATSSystemOutputPhaseIndex": xATSSystemOutputPhaseIndex,
       "xATSSystemOutputVoltageLtoL": xATSSystemOutputVoltageLtoL,
       "xATSSystemOutputVoltageLtoN": xATSSystemOutputVoltageLtoN,
       "xATSSystemOutputPhaseCurrent": xATSSystemOutputPhaseCurrent,
       "xATSSystemOutputPower": xATSSystemOutputPower,
       "xATSSystemOutputApparentPower": xATSSystemOutputApparentPower,
       "xATSSystemOutputPowerFactor": xATSSystemOutputPowerFactor,
       "xATSTesting": xATSTesting,
       "xATSTestingStatus": xATSTestingStatus,
       "xATSTestingStatusSelectTestProcess": xATSTestingStatusSelectTestProcess,
       "xATSTestingStatusTestStatus": xATSTestingStatusTestStatus,
       "xATSTestingStatusProfileWarmupTime": xATSTestingStatusProfileWarmupTime,
       "xATSTestingStatusProfileLoadedTime": xATSTestingStatusProfileLoadedTime,
       "xATSTestingStatusProfileUnloadedTime": xATSTestingStatusProfileUnloadedTime,
       "xATSTestingResults": xATSTestingResults,
       "xATSTestingResultsLastDateOfTest": xATSTestingResultsLastDateOfTest,
       "xATSTestingResultsLastResult": xATSTestingResultsLastResult,
       "xATSTestingResultsTestLastTestTime": xATSTestingResultsTestLastTestTime,
       "xATSTestingResultsLastCrankDuration": xATSTestingResultsLastCrankDuration,
       "xATSTestingResultsLastWarmupDuration": xATSTestingResultsLastWarmupDuration,
       "xATSTestingResultsLastLoadedDuration": xATSTestingResultsLastLoadedDuration,
       "xATSTestingResultsLastUnloadedDuration": xATSTestingResultsLastUnloadedDuration,
       "xATSTestingSchedule": xATSTestingSchedule,
       "xATSTestingScheduleFrequency": xATSTestingScheduleFrequency,
       "xATSTestingScheduleTestDay": xATSTestingScheduleTestDay,
       "xATSTestingScheduleTestTime": xATSTestingScheduleTestTime,
       "xATSTestingScheduleTestWithLoadInterval": xATSTestingScheduleTestWithLoadInterval,
       "xATSTestingScheduleTestWithLoadSelectMonth": xATSTestingScheduleTestWithLoadSelectMonth,
       "xATSTestingScheduleNextTestDate": xATSTestingScheduleNextTestDate,
       "xATSTestingSimulatePowerFail": xATSTestingSimulatePowerFail,
       "xATSTestingSimulatePowerFailTest": xATSTestingSimulatePowerFailTest,
       "xATSTestingSimulatePowerFailTimeRemaining": xATSTestingSimulatePowerFailTimeRemaining,
       "xATSInputContacts": xATSInputContacts,
       "xATSInputContactNumContacts": xATSInputContactNumContacts,
       "xATSInputContactTableSize": xATSInputContactTableSize,
       "xATSInputContactTable": xATSInputContactTable,
       "xATSInputContactEntry": xATSInputContactEntry,
       "xATSInputContactNumber": xATSInputContactNumber,
       "xATSInputContactName": xATSInputContactName,
       "xATSInputContactNormalState": xATSInputContactNormalState,
       "xATSInputContactCurrentState": xATSInputContactCurrentState,
       "xATSOutputRelays": xATSOutputRelays,
       "xATSOutputRelayNumRelays": xATSOutputRelayNumRelays,
       "xATSOutputRelayTableSize": xATSOutputRelayTableSize,
       "xATSOutputRelayTable": xATSOutputRelayTable,
       "xATSOutputRelayEntry": xATSOutputRelayEntry,
       "xATSOutputRelayNumber": xATSOutputRelayNumber,
       "xATSOutputRelayName": xATSOutputRelayName,
       "xATSOutputRelayNormalState": xATSOutputRelayNormalState,
       "xATSOutputRelayCurrentState": xATSOutputRelayCurrentState,
       "xATSMisc": xATSMisc,
       "generator": generator,
       "xATSGenerator": xATSGenerator,
       "xATSGeneratorIdent": xATSGeneratorIdent,
       "xATSGeneratorIdentModelNumber": xATSGeneratorIdentModelNumber,
       "xATSGeneratorIdentSerialNumber": xATSGeneratorIdentSerialNumber,
       "xATSGeneratorIdentDateofManufacture": xATSGeneratorIdentDateofManufacture,
       "xATSGeneratorIdentVoltageConfiguration": xATSGeneratorIdentVoltageConfiguration,
       "xATSGeneratorIdentMaxPowerRating": xATSGeneratorIdentMaxPowerRating,
       "xATSGeneratorIdentAlternatorFrequency": xATSGeneratorIdentAlternatorFrequency,
       "xATSGeneratorStatus": xATSGeneratorStatus,
       "xATSGeneratorStatusGeneratorName": xATSGeneratorStatusGeneratorName,
       "xATSGeneratorStatusOperational": xATSGeneratorStatusOperational,
       "xATSGeneratorStatusModeSwitchPosition": xATSGeneratorStatusModeSwitchPosition,
       "xATSGeneratorStatusRemoteStart": xATSGeneratorStatusRemoteStart,
       "xATSGeneratorAdvStatus": xATSGeneratorAdvStatus,
       "xATSGeneratorAdvStatusBatteryVoltage": xATSGeneratorAdvStatusBatteryVoltage,
       "xATSGeneratorAdvStatusOilPressure": xATSGeneratorAdvStatusOilPressure,
       "xATSGeneratorAdvStatusCoolantTemperature": xATSGeneratorAdvStatusCoolantTemperature,
       "xATSGeneratorAdvStatusEngineRPM": xATSGeneratorAdvStatusEngineRPM,
       "xATSGeneratorAdvStatusOilLevel": xATSGeneratorAdvStatusOilLevel,
       "xATSGeneratorAdvStatusCoolantLevel": xATSGeneratorAdvStatusCoolantLevel,
       "xATSGeneratorOutput": xATSGeneratorOutput,
       "xATSGeneratorOutputFrequency": xATSGeneratorOutputFrequency,
       "xATSGeneratorOutputTotalPower": xATSGeneratorOutputTotalPower,
       "xATSGeneratorOutputTotalApparentPower": xATSGeneratorOutputTotalApparentPower,
       "xATSGeneratorOutputTotalPowerFactor": xATSGeneratorOutputTotalPowerFactor,
       "xATSGeneratorOutputTableSize": xATSGeneratorOutputTableSize,
       "xATSGeneratorOutputPhaseTable": xATSGeneratorOutputPhaseTable,
       "xATSGeneratorOutputPhaseEntry": xATSGeneratorOutputPhaseEntry,
       "xATSGeneratorOutputPhaseIndex": xATSGeneratorOutputPhaseIndex,
       "xATSGeneratorOutputVoltageLtoL": xATSGeneratorOutputVoltageLtoL,
       "xATSGeneratorOutputVoltageLtoN": xATSGeneratorOutputVoltageLtoN,
       "xATSGeneratorOutputPhaseCurrent": xATSGeneratorOutputPhaseCurrent,
       "xATSGeneratorOutputPower": xATSGeneratorOutputPower,
       "xATSGeneratorOutputApparentPower": xATSGeneratorOutputApparentPower,
       "xATSGeneratorOutputPowerFactor": xATSGeneratorOutputPowerFactor,
       "xATSGeneratorSettings": xATSGeneratorSettings,
       "xATSGeneratorSettingsVoltageAdjust": xATSGeneratorSettingsVoltageAdjust,
       "xATSGeneratorSettingsFrequencyAdjust": xATSGeneratorSettingsFrequencyAdjust,
       "xATSGeneratorSettingsStartDelay": xATSGeneratorSettingsStartDelay,
       "xATSGeneratorSettingsStopDelay": xATSGeneratorSettingsStopDelay,
       "xATSGeneratorSettingsCrankCycleEnable": xATSGeneratorSettingsCrankCycleEnable,
       "xATSGeneratorSettingsCrankTime": xATSGeneratorSettingsCrankTime,
       "xATSGeneratorSettingsCrankRestTime": xATSGeneratorSettingsCrankRestTime,
       "xATSGeneratorSettingsNumberCrank": xATSGeneratorSettingsNumberCrank,
       "xATSGeneratorSettingsMetricUnit": xATSGeneratorSettingsMetricUnit,
       "xATSGeneratorService": xATSGeneratorService,
       "xATSGeneratorServiceTotalRunHoursLifetime": xATSGeneratorServiceTotalRunHoursLifetime,
       "xATSGeneratorServiceEngineStartsLifetime": xATSGeneratorServiceEngineStartsLifetime,
       "xATSGeneratorServiceTotalkWhLifetime": xATSGeneratorServiceTotalkWhLifetime,
       "xATSGeneratorServiceTotalRunHoursSinceMaintenance": xATSGeneratorServiceTotalRunHoursSinceMaintenance,
       "xATSGeneratorServiceEngineStartsSinceMaintenance": xATSGeneratorServiceEngineStartsSinceMaintenance,
       "xATSGeneratorServiceTotalkWhMaintenance": xATSGeneratorServiceTotalkWhMaintenance,
       "xATSGeneratorServiceResetRecord": xATSGeneratorServiceResetRecord,
       "xATSGeneratorServiceRecordResetDate": xATSGeneratorServiceRecordResetDate,
       "xATSGeneratorServiceNextServiceDate": xATSGeneratorServiceNextServiceDate,
       "xATSGeneratorServiceRunHoursUntilServiceDate": xATSGeneratorServiceRunHoursUntilServiceDate,
       "xATSGeneratorServiceRunHoursThreshold": xATSGeneratorServiceRunHoursThreshold,
       "xATSGeneratorServiceCalendarIntervalThreshold": xATSGeneratorServiceCalendarIntervalThreshold,
       "xATSGeneratorFuelSystem": xATSGeneratorFuelSystem,
       "xATSGeneratorFuelSystemType": xATSGeneratorFuelSystemType,
       "xATSGeneratorFuelSystemTankSize": xATSGeneratorFuelSystemTankSize,
       "xATSGeneratorFuelSystemFuelLevel": xATSGeneratorFuelSystemFuelLevel,
       "xATSGeneratorFuelSystemRuntimePower": xATSGeneratorFuelSystemRuntimePower,
       "xATSGeneratorFuelSystemEstimatedRunTime": xATSGeneratorFuelSystemEstimatedRunTime,
       "xATSGeneratorFuelSystemLowRunTimeThreshold": xATSGeneratorFuelSystemLowRunTimeThreshold,
       "xATSGeneratorFuelSystemVeryLowRunTimeThreshold": xATSGeneratorFuelSystemVeryLowRunTimeThreshold,
       "xATSGeneratorFuelSystemLowFuelLevelThreshold": xATSGeneratorFuelSystemLowFuelLevelThreshold,
       "xATSGeneratorFuelSystemVeryLowFuelLevelThreshold": xATSGeneratorFuelSystemVeryLowFuelLevelThreshold,
       "consolePortServer": consolePortServer,
       "cpsAP930x": cpsAP930x,
       "cpsAP930xSys": cpsAP930xSys,
       "apCPSpname": apCPSpname,
       "apCPSversion": apCPSversion,
       "apCPSPower": apCPSPower,
       "apCPSPwNum": apCPSPwNum,
       "apCPSPw1": apCPSPw1,
       "apCPSPw2": apCPSPw2,
       "apCPSPcmcia": apCPSPcmcia,
       "apCPSNPcmcia": apCPSNPcmcia,
       "cpsCardIdentTable": cpsCardIdentTable,
       "cpsCardIdentEntry": cpsCardIdentEntry,
       "cpsCardIdentIndex": cpsCardIdentIndex,
       "cpsCardIdentProd": cpsCardIdentProd,
       "cpsCardIdentMan": cpsCardIdentMan,
       "cpsCardIdentFunc": cpsCardIdentFunc,
       "cpsCardIdentPCI": cpsCardIdentPCI,
       "cpsCardConfTable": cpsCardConfTable,
       "cpsCardConfEntry": cpsCardConfEntry,
       "cpsCardConfIndex": cpsCardConfIndex,
       "cpsCardConfPower": cpsCardConfPower,
       "cpsCardConfType": cpsCardConfType,
       "cpsCardConfInter": cpsCardConfInter,
       "cpsCardConfFunc": cpsCardConfFunc,
       "cpsCardConfCardv": cpsCardConfCardv,
       "cpsCardConfPort1": cpsCardConfPort1,
       "cpsCardConfPort2": cpsCardConfPort2,
       "cpsCardStatusTable": cpsCardStatusTable,
       "cpsCardStatusEntry": cpsCardStatusEntry,
       "cpsCardStatusIndex": cpsCardStatusIndex,
       "cpsCardStatusCard": cpsCardStatusCard,
       "cpsCardStatusFunc": cpsCardStatusFunc,
       "apCPSFlashSize": apCPSFlashSize,
       "apCPSRAMSize": apCPSRAMSize,
       "apCPSCPUfreq": apCPSCPUfreq,
       "apCPSDevId": apCPSDevId,
       "cpsAP930xConf": cpsAP930xConf,
       "cpsHostName": cpsHostName,
       "cpsConsoleBanner": cpsConsoleBanner,
       "cpsMotd": cpsMotd,
       "cpsEthItf": cpsEthItf,
       "cpsEthDhcpc": cpsEthDhcpc,
       "cpsEthIPaddr": cpsEthIPaddr,
       "cpsEthIPmask": cpsEthIPmask,
       "cpsEthMTU": cpsEthMTU,
       "cpsEthIPaddr2": cpsEthIPaddr2,
       "cpsEthIPmask2": cpsEthIPmask2,
       "cpsNameService": cpsNameService,
       "cpsResolverOrder": cpsResolverOrder,
       "cpsMultipleIP": cpsMultipleIP,
       "cpsDNSserv": cpsDNSserv,
       "cpsDNSpriserv": cpsDNSpriserv,
       "cpsDNSsecserv": cpsDNSsecserv,
       "cpsDNSdomain": cpsDNSdomain,
       "cpsSerialPortConf": cpsSerialPortConf,
       "cpsSerialGlobal": cpsSerialGlobal,
       "cpsSerialInclude": cpsSerialInclude,
       "cpsSerialNFS": cpsSerialNFS,
       "cpsSerialLockDir": cpsSerialLockDir,
       "cpsSerialRlogin": cpsSerialRlogin,
       "cpsSerialPppd": cpsSerialPppd,
       "cpsSerialTelnet": cpsSerialTelnet,
       "cpsSerialSsh": cpsSerialSsh,
       "cpsSerialLocalLogins": cpsSerialLocalLogins,
       "cpsSerialFacility": cpsSerialFacility,
       "cpsSerialDBFacility": cpsSerialDBFacility,
       "cpsSerialGroupTable": cpsSerialGroupTable,
       "cpsSerialGroupEntry": cpsSerialGroupEntry,
       "cpsSerialGroupIndex": cpsSerialGroupIndex,
       "cpsSerialGroupName": cpsSerialGroupName,
       "cpsSerialGroupUsers": cpsSerialGroupUsers,
       "cpsSerialSpec": cpsSerialSpec,
       "cpsSerialPortTable": cpsSerialPortTable,
       "cpsSerialPortEntry": cpsSerialPortEntry,
       "cpsSerialPortNumber": cpsSerialPortNumber,
       "cpsSerialPortTty": cpsSerialPortTty,
       "cpsSerialPortName": cpsSerialPortName,
       "cpsSerialPortSpeed": cpsSerialPortSpeed,
       "cpsSerialPortDataSize": cpsSerialPortDataSize,
       "cpsSerialPortStopBits": cpsSerialPortStopBits,
       "cpsSerialPortParity": cpsSerialPortParity,
       "cpsSerialPortFlowCtrl": cpsSerialPortFlowCtrl,
       "cpsSerialPortDTRdelay": cpsSerialPortDTRdelay,
       "cpsSerialPortDCDCtrl": cpsSerialPortDCDCtrl,
       "cpsSerialPortLogUtmp": cpsSerialPortLogUtmp,
       "cpsSerialPortLogWtmp": cpsSerialPortLogWtmp,
       "cpsSerialPortLogform": cpsSerialPortLogform,
       "cpsSerialPortAuthtype": cpsSerialPortAuthtype,
       "cpsSerialPortAuthSrv1": cpsSerialPortAuthSrv1,
       "cpsSerialPortAccSrv1": cpsSerialPortAccSrv1,
       "cpsSerialPortAuthTmo": cpsSerialPortAuthTmo,
       "cpsSerialPortAuthRetr": cpsSerialPortAuthRetr,
       "cpsSerialPortAuthSrv2": cpsSerialPortAuthSrv2,
       "cpsSerialPortAccSrv2": cpsSerialPortAccSrv2,
       "cpsSerialPortAuthSecret": cpsSerialPortAuthSecret,
       "cpsSerialPortAuthRadP": cpsSerialPortAuthRadP,
       "cpsSerialPortAuthAcc": cpsSerialPortAuthAcc,
       "cpsSerialPortProtocol": cpsSerialPortProtocol,
       "cpsSerialPortRemoteIP": cpsSerialPortRemoteIP,
       "cpsSerialPortSocketPort": cpsSerialPortSocketPort,
       "cpsSerialPortRemHost": cpsSerialPortRemHost,
       "cpsSerialPortBanner": cpsSerialPortBanner,
       "cpsSerialPortPrompt": cpsSerialPortPrompt,
       "cpsSerialPortTermType": cpsSerialPortTermType,
       "cpsSerialPortAutomUsr": cpsSerialPortAutomUsr,
       "cpsSerialPortNetMask": cpsSerialPortNetMask,
       "cpsSerialPortPppMtu": cpsSerialPortPppMtu,
       "cpsSerialPortPppMru": cpsSerialPortPppMru,
       "cpsSerialPortPppOptions": cpsSerialPortPppOptions,
       "cpsSerialPortPppFoption": cpsSerialPortPppFoption,
       "cpsSerialPortModemChat": cpsSerialPortModemChat,
       "cpsSerialPortSttyCmd": cpsSerialPortSttyCmd,
       "cpsSerialPortSockTx": cpsSerialPortSockTx,
       "cpsSerialPortSockPoll": cpsSerialPortSockPoll,
       "cpsSerialPortSockIdle": cpsSerialPortSockIdle,
       "cpsSerialPortDBsize": cpsSerialPortDBsize,
       "cpsSerialPortDBtime": cpsSerialPortDBtime,
       "cpsSerialPortDBmode": cpsSerialPortDBmode,
       "cpsSerialPortDBsyslog": cpsSerialPortDBsyslog,
       "cpsSerialPortDBmenu": cpsSerialPortDBmenu,
       "cpsSerialPortDBalarm": cpsSerialPortDBalarm,
       "cpsSerialPortSSHbreak": cpsSerialPortSSHbreak,
       "cpsSerialPortSniffSess": cpsSerialPortSniffSess,
       "cpsSerialPortSniffAdm": cpsSerialPortSniffAdm,
       "cpsSerialPortSniffEsc": cpsSerialPortSniffEsc,
       "cpsSerialPortSniffMsess": cpsSerialPortSniffMsess,
       "cpsSerialPortTelnetMode": cpsSerialPortTelnetMode,
       "cpsSerialPortSysBufSess": cpsSerialPortSysBufSess,
       "cpsSerialPortLFSuppress": cpsSerialPortLFSuppress,
       "cpsSerialPortAutoInput": cpsSerialPortAutoInput,
       "cpsSerialPortAutoOutput": cpsSerialPortAutoOutput,
       "cpsSerialPortBreakInterval": cpsSerialPortBreakInterval,
       "cpsAP930xInfo": cpsAP930xInfo,
       "cpsInfoSerialPortTable": cpsInfoSerialPortTable,
       "cpsInfoSerialPortEntry": cpsInfoSerialPortEntry,
       "cpsInfoSerialPortNumber": cpsInfoSerialPortNumber,
       "cpsInfoSerialPortTty": cpsInfoSerialPortTty,
       "cpsInfoSerialPortName": cpsInfoSerialPortName,
       "cpsInfoSerialPortSpeed": cpsInfoSerialPortSpeed,
       "cpsInfoSerialPortTxBytes": cpsInfoSerialPortTxBytes,
       "cpsInfoSerialPortRXBytes": cpsInfoSerialPortRXBytes,
       "cpsInfoSerialPortErrFrame": cpsInfoSerialPortErrFrame,
       "cpsInfoSerialPortErrParity": cpsInfoSerialPortErrParity,
       "cpsInfoSerialPortErrBreaks": cpsInfoSerialPortErrBreaks,
       "cpsInfoSerialPortErrOverrun": cpsInfoSerialPortErrOverrun,
       "cpsInfoSerialPortSigDTR": cpsInfoSerialPortSigDTR,
       "cpsInfoSerialPortSigCD": cpsInfoSerialPortSigCD,
       "cpsInfoSerialPortSigDSR": cpsInfoSerialPortSigDSR,
       "cpsInfoSerialPortSigRTS": cpsInfoSerialPortSigRTS,
       "cpsInfoSerialPortSigCTS": cpsInfoSerialPortSigCTS,
       "cpsInfoSerialPortSigRI": cpsInfoSerialPortSigRI,
       "cpsAP930xAdm": cpsAP930xAdm,
       "apCPSSave": apCPSSave,
       "apCPSSerialHUP": apCPSSerialHUP,
       "accessControl": accessControl,
       "accessPX": accessPX,
       "accessPXIdent": accessPXIdent,
       "accessPXIdentAlarmStatus": accessPXIdentAlarmStatus,
       "accessPXIdentProductNumber": accessPXIdentProductNumber,
       "accessPXIdentHardwareRev": accessPXIdentHardwareRev,
       "accessPXIdentDateOfManufacture": accessPXIdentDateOfManufacture,
       "accessPXIdentSerialNumber": accessPXIdentSerialNumber,
       "accessPXConfig": accessPXConfig,
       "accessPXConfigCardReaderEnableDisableAction": accessPXConfigCardReaderEnableDisableAction,
       "accessPXConfigAutoRelockTime": accessPXConfigAutoRelockTime,
       "accessPXConfigCardFormat": accessPXConfigCardFormat,
       "accessPXConfigFront": accessPXConfigFront,
       "accessPXConfigFrontDoorLockControl": accessPXConfigFrontDoorLockControl,
       "accessPXConfigFrontDoorMaxOpenTime": accessPXConfigFrontDoorMaxOpenTime,
       "accessPXStatusFront": accessPXStatusFront,
       "accessPXStatusFrontDoorLock": accessPXStatusFrontDoorLock,
       "accessPXStatusFrontDoor": accessPXStatusFrontDoor,
       "accessPXStatusFrontDoorHandle": accessPXStatusFrontDoorHandle,
       "accessPXStatusFrontDoorMaxOpenTime": accessPXStatusFrontDoorMaxOpenTime,
       "accessPXStatusFrontDoorAlarmStatus": accessPXStatusFrontDoorAlarmStatus,
       "accessPXConfigRear": accessPXConfigRear,
       "accessPXConfigRearDoorLockControl": accessPXConfigRearDoorLockControl,
       "accessPXConfigRearDoorMaxOpenTime": accessPXConfigRearDoorMaxOpenTime,
       "accessPXStatusRear": accessPXStatusRear,
       "accessPXStatusRearDoorLock": accessPXStatusRearDoorLock,
       "accessPXStatusRearDoor": accessPXStatusRearDoor,
       "accessPXStatusRearDoorHandle": accessPXStatusRearDoorHandle,
       "accessPXStatusRearDoorMaxOpenTime": accessPXStatusRearDoorMaxOpenTime,
       "accessPXStatusRearDoorAlarmStatus": accessPXStatusRearDoorAlarmStatus,
       "accessPXConfigBeacon": accessPXConfigBeacon,
       "accessPXConfigBeaconName": accessPXConfigBeaconName,
       "accessPXConfigBeaconLocation": accessPXConfigBeaconLocation,
       "accessPXConfigBeaconAction": accessPXConfigBeaconAction,
       "accessPXStatusBeacon": accessPXStatusBeacon,
       "accessPXStatusBeaconName": accessPXStatusBeaconName,
       "accessPXStatusBeaconLocation": accessPXStatusBeaconLocation,
       "accessPXStatusBeaconCurrentState": accessPXStatusBeaconCurrentState,
       "apcLocalDisplay": apcLocalDisplay,
       "apcLocalDisplayIdent": apcLocalDisplayIdent,
       "apcLocalDisplayIdentDisplayType": apcLocalDisplayIdentDisplayType,
       "apcLocalDisplayIdentModelNumber": apcLocalDisplayIdentModelNumber,
       "apcLocalDisplayIdentFirmwareRev": apcLocalDisplayIdentFirmwareRev,
       "apcLocalDisplayIdentOptions": apcLocalDisplayIdentOptions,
       "apcLocalDisplayIdentDateOfManufacture": apcLocalDisplayIdentDateOfManufacture,
       "apcLocalDisplayIdentSerialNumber": apcLocalDisplayIdentSerialNumber,
       "apcLocalDisplayConfig": apcLocalDisplayConfig,
       "apcLocalDisplayConfigAlarmBeeper": apcLocalDisplayConfigAlarmBeeper,
       "apcLocalDisplayConfigBeeperVolume": apcLocalDisplayConfigBeeperVolume,
       "apcLocalDisplayConfigCheckLogIndicator": apcLocalDisplayConfigCheckLogIndicator,
       "apcLocalDisplayConfigKeyClick": apcLocalDisplayConfigKeyClick,
       "apcLocalDisplayConfigContrast": apcLocalDisplayConfigContrast,
       "isxModularDistribution": isxModularDistribution,
       "isxModularDistInfo": isxModularDistInfo,
       "isxModularDistInfoTableSize": isxModularDistInfoTableSize,
       "isxModularDistInfoTable": isxModularDistInfoTable,
       "isxModularDistInfoEntry": isxModularDistInfoEntry,
       "isxModularDistInfoSegmentIndex": isxModularDistInfoSegmentIndex,
       "isxModularDistInfoMeterModelNumber": isxModularDistInfoMeterModelNumber,
       "isxModularDistInfoMeterSerialNumber": isxModularDistInfoMeterSerialNumber,
       "isxModularDistInfoMeterDateOfManufacture": isxModularDistInfoMeterDateOfManufacture,
       "isxModularDistInfoMeterFirmwareRev": isxModularDistInfoMeterFirmwareRev,
       "isxModularDistInfoMeterHardwareRev": isxModularDistInfoMeterHardwareRev,
       "isxModularDistModules": isxModularDistModules,
       "isxModularDistModuleInfoTableSize": isxModularDistModuleInfoTableSize,
       "isxModularDistModuleInfoTable": isxModularDistModuleInfoTable,
       "isxModularDistModuleInfoEntry": isxModularDistModuleInfoEntry,
       "isxModularDistModuleInfoModIndex": isxModularDistModuleInfoModIndex,
       "isxModularDistModuleInfoAlarmStatus": isxModularDistModuleInfoAlarmStatus,
       "isxModularDistModuleInfoModelNumber": isxModularDistModuleInfoModelNumber,
       "isxModularDistModuleInfoSerialNumber": isxModularDistModuleInfoSerialNumber,
       "isxModularDistModuleInfoDateOfManufacture": isxModularDistModuleInfoDateOfManufacture,
       "isxModularDistModuleInfoNumCables": isxModularDistModuleInfoNumCables,
       "isxModularDistModuleBreakerTableSize": isxModularDistModuleBreakerTableSize,
       "isxModularDistModuleBreakerTable": isxModularDistModuleBreakerTable,
       "isxModularDistModuleBreakerEntry": isxModularDistModuleBreakerEntry,
       "isxModularDistModuleBreakerModIndex": isxModularDistModuleBreakerModIndex,
       "isxModularDistModuleBreakerPhaseIndex": isxModularDistModuleBreakerPhaseIndex,
       "isxModularDistModuleBreakerAlarmStatus": isxModularDistModuleBreakerAlarmStatus,
       "isxModularDistModuleBreakerRating": isxModularDistModuleBreakerRating,
       "isxModularDistModuleBreakerPhysicalGroup": isxModularDistModuleBreakerPhysicalGroup,
       "isxModularDistModuleBreakerCableNum": isxModularDistModuleBreakerCableNum,
       "isxModularDistModuleBreakerPosition": isxModularDistModuleBreakerPosition,
       "isxModularDistModuleBreakerPositionAlarms": isxModularDistModuleBreakerPositionAlarms,
       "isxModularDistModuleBreakerCurrent": isxModularDistModuleBreakerCurrent,
       "isxModularDistModuleBreakerPercent": isxModularDistModuleBreakerPercent,
       "isxModularDistModuleBreakerPower": isxModularDistModuleBreakerPower,
       "isxModularDistModuleOutputsTableSize": isxModularDistModuleOutputsTableSize,
       "isxModularDistModuleOutputTable": isxModularDistModuleOutputTable,
       "isxModularDistModuleOutputEntry": isxModularDistModuleOutputEntry,
       "isxModularDistModuleOutputModIndex": isxModularDistModuleOutputModIndex,
       "isxModularDistModuleOutputNumCables": isxModularDistModuleOutputNumCables,
       "isxModularDistModuleOutputCordIndex": isxModularDistModuleOutputCordIndex,
       "isxModularDistModuleOutputName": isxModularDistModuleOutputName,
       "isxModularDistModuleOutputLocation": isxModularDistModuleOutputLocation,
       "isxModularDistModuleOutputStatus": isxModularDistModuleOutputStatus,
       "isxModularDistModuleOutputAlarmGeneration": isxModularDistModuleOutputAlarmGeneration,
       "isxModularDistModuleOutputBreakerMap": isxModularDistModuleOutputBreakerMap,
       "isxModularDistModuleOutputThresholdMin": isxModularDistModuleOutputThresholdMin,
       "isxModularDistModuleOutputThresholdLow": isxModularDistModuleOutputThresholdLow,
       "isxModularDistModuleOutputThresholdHigh": isxModularDistModuleOutputThresholdHigh,
       "isxModularDistModuleOutputThresholdMax": isxModularDistModuleOutputThresholdMax,
       "isxModularDistModuleOutputAlarmMinEnable": isxModularDistModuleOutputAlarmMinEnable,
       "isxModularDistModuleOutputAlarmLowEnable": isxModularDistModuleOutputAlarmLowEnable,
       "isxModularDistModuleOutputAlarmHighEnable": isxModularDistModuleOutputAlarmHighEnable,
       "isxModularDistModuleOutputAlarmMaxEnable": isxModularDistModuleOutputAlarmMaxEnable,
       "isxModularDistModuleOutputCableLength": isxModularDistModuleOutputCableLength,
       "isxModularDistModuleOutputConnectorType": isxModularDistModuleOutputConnectorType,
       "isxModularDistModuleOutputAvailableVoltages": isxModularDistModuleOutputAvailableVoltages,
       "isxModularDistModuleOutputTotalPower": isxModularDistModuleOutputTotalPower,
       "isxModularDistModuleOutputKwhUsage": isxModularDistModuleOutputKwhUsage,
       "isxModularDistModuleOutputKwhReset": isxModularDistModuleOutputKwhReset,
       "isxModularDistModuleOutputKwhResetDate": isxModularDistModuleOutputKwhResetDate,
       "isxModularDistSubFeeds": isxModularDistSubFeeds,
       "isxModularDistSubFeedInfoTableSize": isxModularDistSubFeedInfoTableSize,
       "isxModularDistSubFeedInfoTable": isxModularDistSubFeedInfoTable,
       "isxModularDistSubFeedInfoEntry": isxModularDistSubFeedInfoEntry,
       "isxModularDistSubFeedInfoSubIndex": isxModularDistSubFeedInfoSubIndex,
       "isxModularDistSubFeedInfoName": isxModularDistSubFeedInfoName,
       "isxModularDistSubFeedInfoLocation": isxModularDistSubFeedInfoLocation,
       "isxModularDistSubFeedInfoBreakerRating": isxModularDistSubFeedInfoBreakerRating,
       "isxModularDistSubFeedInfoBreakerPosition": isxModularDistSubFeedInfoBreakerPosition,
       "isxModularDistSubFeedInfoAlarmStatus": isxModularDistSubFeedInfoAlarmStatus,
       "isxModularDistSubFeedInfoAlarmGeneration": isxModularDistSubFeedInfoAlarmGeneration,
       "isxModularDistSubFeedInfoThresholdMin": isxModularDistSubFeedInfoThresholdMin,
       "isxModularDistSubFeedInfoThresholdLow": isxModularDistSubFeedInfoThresholdLow,
       "isxModularDistSubFeedInfoThresholdHigh": isxModularDistSubFeedInfoThresholdHigh,
       "isxModularDistSubFeedInfoThresholdMax": isxModularDistSubFeedInfoThresholdMax,
       "isxModularDistSubFeedInfoAlarmMinEnable": isxModularDistSubFeedInfoAlarmMinEnable,
       "isxModularDistSubFeedInfoAlarmLowEnable": isxModularDistSubFeedInfoAlarmLowEnable,
       "isxModularDistSubFeedInfoAlarmHighEnable": isxModularDistSubFeedInfoAlarmHighEnable,
       "isxModularDistSubFeedInfoAlarmMaxEnable": isxModularDistSubFeedInfoAlarmMaxEnable,
       "isxModularDistSubFeedInfoBreakerAlarmEnable": isxModularDistSubFeedInfoBreakerAlarmEnable,
       "isxModularDistSubFeedInfoTotalPower": isxModularDistSubFeedInfoTotalPower,
       "isxModularDistSubFeedInfoKwhUsage": isxModularDistSubFeedInfoKwhUsage,
       "isxModularDistSubFeedInfoKwhReset": isxModularDistSubFeedInfoKwhReset,
       "isxModularDistSubFeedInfoKwhResetDate": isxModularDistSubFeedInfoKwhResetDate,
       "isxModularDistSubFeedLoadingTableSize": isxModularDistSubFeedLoadingTableSize,
       "isxModularDistSubFeedLoadingTable": isxModularDistSubFeedLoadingTable,
       "isxModularDistSubFeedLoadingEntry": isxModularDistSubFeedLoadingEntry,
       "isxModularDistSubFeedLoadingSubIndex": isxModularDistSubFeedLoadingSubIndex,
       "isxModularDistSubFeedLoadingPhaseIndex": isxModularDistSubFeedLoadingPhaseIndex,
       "isxModularDistSubFeedLoadingAlarmStatus": isxModularDistSubFeedLoadingAlarmStatus,
       "isxModularDistSubFeedLoadingCurrent": isxModularDistSubFeedLoadingCurrent,
       "isxModularDistSubFeedLoadingPercent": isxModularDistSubFeedLoadingPercent,
       "isxModularDistSubFeedLoadingPower": isxModularDistSubFeedLoadingPower,
       "isxModularDistTotals": isxModularDistTotals,
       "isxModularDistSysVoltage": isxModularDistSysVoltage,
       "isxModularDistSysOutputVoltageNominalLineToNeutral": isxModularDistSysOutputVoltageNominalLineToNeutral,
       "isxModularDistSysOutputVoltageNominalLineToLine": isxModularDistSysOutputVoltageNominalLineToLine,
       "isxModularDistSysOutputNominalFrequency": isxModularDistSysOutputNominalFrequency,
       "isxModularDistSysOutputFrequency": isxModularDistSysOutputFrequency,
       "isxModularDistSysOutputVoltageMonitoring": isxModularDistSysOutputVoltageMonitoring,
       "isxModularDistSysOutputVoltageThresholdMin": isxModularDistSysOutputVoltageThresholdMin,
       "isxModularDistSysOutputVoltageThresholdLow": isxModularDistSysOutputVoltageThresholdLow,
       "isxModularDistSysOutputVoltageThresholdHigh": isxModularDistSysOutputVoltageThresholdHigh,
       "isxModularDistSysOutputVoltageThresholdMax": isxModularDistSysOutputVoltageThresholdMax,
       "isxModularDistSysOutputVoltageAlarmMinEnable": isxModularDistSysOutputVoltageAlarmMinEnable,
       "isxModularDistSysOutputVoltageAlarmLowEnable": isxModularDistSysOutputVoltageAlarmLowEnable,
       "isxModularDistSysOutputVoltageAlarmHighEnable": isxModularDistSysOutputVoltageAlarmHighEnable,
       "isxModularDistSysOutputVoltageAlarmMaxEnable": isxModularDistSysOutputVoltageAlarmMaxEnable,
       "isxModularDistSysOutputVoltageFrequencyTolerance": isxModularDistSysOutputVoltageFrequencyTolerance,
       "isxModularDistSysVoltageTable": isxModularDistSysVoltageTable,
       "isxModularDistSysVoltageEntry": isxModularDistSysVoltageEntry,
       "isxModularDistSysVoltagePhaseIndex": isxModularDistSysVoltagePhaseIndex,
       "isxModularDistSysVoltageAlarmStatus": isxModularDistSysVoltageAlarmStatus,
       "isxModularDistSysVoltageLtoN": isxModularDistSysVoltageLtoN,
       "isxModularDistSysVoltageLtoL": isxModularDistSysVoltageLtoL,
       "isxModularDistSysCurrent": isxModularDistSysCurrent,
       "isxModularDistSysCurrentRating": isxModularDistSysCurrentRating,
       "isxModularDistSysCurrentMonitoring": isxModularDistSysCurrentMonitoring,
       "isxModularDistSysCurrentThresholdMin": isxModularDistSysCurrentThresholdMin,
       "isxModularDistSysCurrentThresholdLow": isxModularDistSysCurrentThresholdLow,
       "isxModularDistSysCurrentThresholdHigh": isxModularDistSysCurrentThresholdHigh,
       "isxModularDistSysCurrentThresholdMax": isxModularDistSysCurrentThresholdMax,
       "isxModularDistSysCurrentAlarmMinEnable": isxModularDistSysCurrentAlarmMinEnable,
       "isxModularDistSysCurrentAlarmLowEnable": isxModularDistSysCurrentAlarmLowEnable,
       "isxModularDistSysCurrentAlarmHighEnable": isxModularDistSysCurrentAlarmHighEnable,
       "isxModularDistSysCurrentAlarmMaxEnable": isxModularDistSysCurrentAlarmMaxEnable,
       "isxModularDistSysCurrentTable": isxModularDistSysCurrentTable,
       "isxModularDistSysCurrentEntry": isxModularDistSysCurrentEntry,
       "isxModularDistSysCurrentPhaseIndex": isxModularDistSysCurrentPhaseIndex,
       "isxModularDistSysCurrentAlarmStatus": isxModularDistSysCurrentAlarmStatus,
       "isxModularDistSysCurrentAmps": isxModularDistSysCurrentAmps,
       "isxModularDistSysCurrentPercent": isxModularDistSysCurrentPercent,
       "isxModularDistSysPower": isxModularDistSysPower,
       "isxModularDistSysPowerTotal": isxModularDistSysPowerTotal,
       "isxModularDistSysPowerKwhUsage": isxModularDistSysPowerKwhUsage,
       "isxModularDistSysPowerKwhReset": isxModularDistSysPowerKwhReset,
       "isxModularDistSysPowerKwhResetDate": isxModularDistSysPowerKwhResetDate,
       "isxModularDistSysPowerTable": isxModularDistSysPowerTable,
       "isxModularDistSysPowerEntry": isxModularDistSysPowerEntry,
       "isxModularDistSysPowerPhaseIndex": isxModularDistSysPowerPhaseIndex,
       "isxModularDistSysPowerKw": isxModularDistSysPowerKw,
       "isxModularDistSysPowerKwhPhaseUsage": isxModularDistSysPowerKwhPhaseUsage,
       "isxModularPdu": isxModularPdu,
       "isxModularPduIdent": isxModularPduIdent,
       "isxModularPduIdentModelNumber": isxModularPduIdentModelNumber,
       "isxModularPduIdentSerialNumber": isxModularPduIdentSerialNumber,
       "isxModularPduIdentDateOfManufacture": isxModularPduIdentDateOfManufacture,
       "isxModularPduIdentMonitorCardSerialNumber": isxModularPduIdentMonitorCardSerialNumber,
       "isxModularPduIdentMonitorCardHardwareRev": isxModularPduIdentMonitorCardHardwareRev,
       "isxModularPduIdentMonitorCardFirmwareAppRev": isxModularPduIdentMonitorCardFirmwareAppRev,
       "isxModularPduIdentMonitorCardFirmwareAppOSRev": isxModularPduIdentMonitorCardFirmwareAppOSRev,
       "isxModularPduDevice": isxModularPduDevice,
       "isxModularPduDeviceTransformerPresent": isxModularPduDeviceTransformerPresent,
       "isxModularPduDeviceServiceType": isxModularPduDeviceServiceType,
       "isxModularPduDeviceFansPresent": isxModularPduDeviceFansPresent,
       "isxModularPduDeviceNominalMainInputVoltage": isxModularPduDeviceNominalMainInputVoltage,
       "isxModularPduStatus": isxModularPduStatus,
       "isxModularPduAlarmStatus": isxModularPduAlarmStatus,
       "isxModularPduTransformerTempStatus": isxModularPduTransformerTempStatus,
       "isxModularPduFanStatus": isxModularPduFanStatus,
       "universalInputOutput": universalInputOutput,
       "uioSensor": uioSensor,
       "uioSensorStatusTableSize": uioSensorStatusTableSize,
       "uioSensorStatusTable": uioSensorStatusTable,
       "uioSensorStatusEntry": uioSensorStatusEntry,
       "uioSensorStatusPortID": uioSensorStatusPortID,
       "uioSensorStatusSensorID": uioSensorStatusSensorID,
       "uioSensorStatusSensorName": uioSensorStatusSensorName,
       "uioSensorStatusSensorLocation": uioSensorStatusSensorLocation,
       "uioSensorStatusTemperatureDegF": uioSensorStatusTemperatureDegF,
       "uioSensorStatusTemperatureDegC": uioSensorStatusTemperatureDegC,
       "uioSensorStatusHumidity": uioSensorStatusHumidity,
       "uioSensorStatusViolationStatus": uioSensorStatusViolationStatus,
       "uioSensorStatusAlarmStatus": uioSensorStatusAlarmStatus,
       "uioSensorStatusCommStatus": uioSensorStatusCommStatus,
       "uioInputContact": uioInputContact,
       "uioInputContactStatusTableSize": uioInputContactStatusTableSize,
       "uioInputContactStatusTable": uioInputContactStatusTable,
       "uioInputContactStatusEntry": uioInputContactStatusEntry,
       "uioInputContactStatusPortID": uioInputContactStatusPortID,
       "uioInputContactStatusContactID": uioInputContactStatusContactID,
       "uioInputContactStatusContactName": uioInputContactStatusContactName,
       "uioInputContactStatusContactLocation": uioInputContactStatusContactLocation,
       "uioInputContactStatusCurrentState": uioInputContactStatusCurrentState,
       "uioInputContactStatusAlarmStatus": uioInputContactStatusAlarmStatus,
       "uioInputContactStatusCommStatus": uioInputContactStatusCommStatus,
       "uioOutputRelay": uioOutputRelay,
       "uioOutputRelayStatusTableSize": uioOutputRelayStatusTableSize,
       "uioOutputRelayStatusTable": uioOutputRelayStatusTable,
       "uioOutputRelayStatusEntry": uioOutputRelayStatusEntry,
       "uioOutputRelayStatusPortID": uioOutputRelayStatusPortID,
       "uioOutputRelayStatusRelayID": uioOutputRelayStatusRelayID,
       "uioOutputRelayStatusRelayName": uioOutputRelayStatusRelayName,
       "uioOutputRelayStatusRelayLocation": uioOutputRelayStatusRelayLocation,
       "uioOutputRelayStatusCurrentState": uioOutputRelayStatusCurrentState,
       "uioOutputRelayStatusAlarmStatus": uioOutputRelayStatusAlarmStatus,
       "uioOutputRelayStatusCommStatus": uioOutputRelayStatusCommStatus,
       "rPDU2": rPDU2,
       "rPDU2IdentTableSize": rPDU2IdentTableSize,
       "rPDU2IdentTable": rPDU2IdentTable,
       "rPDU2IdentEntry": rPDU2IdentEntry,
       "rPDU2IdentIndex": rPDU2IdentIndex,
       "rPDU2IdentModule": rPDU2IdentModule,
       "rPDU2IdentName": rPDU2IdentName,
       "rPDU2IdentLocation": rPDU2IdentLocation,
       "rPDU2IdentHardwareRev": rPDU2IdentHardwareRev,
       "rPDU2IdentFirmwareRev": rPDU2IdentFirmwareRev,
       "rPDU2IdentDateOfManufacture": rPDU2IdentDateOfManufacture,
       "rPDU2IdentModelNumber": rPDU2IdentModelNumber,
       "rPDU2IdentSerialNumber": rPDU2IdentSerialNumber,
       "rPDU2DeviceTableSize": rPDU2DeviceTableSize,
       "rPDU2Device": rPDU2Device,
       "rPDU2DeviceConfigTable": rPDU2DeviceConfigTable,
       "rPDU2DeviceConfigEntry": rPDU2DeviceConfigEntry,
       "rPDU2DeviceConfigIndex": rPDU2DeviceConfigIndex,
       "rPDU2DeviceConfigModule": rPDU2DeviceConfigModule,
       "rPDU2DeviceConfigName": rPDU2DeviceConfigName,
       "rPDU2DeviceConfigLocation": rPDU2DeviceConfigLocation,
       "rPDU2DeviceConfigDisplayOrientation": rPDU2DeviceConfigDisplayOrientation,
       "rPDU2DeviceConfigColdstartDelay": rPDU2DeviceConfigColdstartDelay,
       "rPDU2DeviceConfigLowLoadPowerThreshold": rPDU2DeviceConfigLowLoadPowerThreshold,
       "rPDU2DeviceConfigNearOverloadPowerThreshold": rPDU2DeviceConfigNearOverloadPowerThreshold,
       "rPDU2DeviceConfigOverloadPowerThreshold": rPDU2DeviceConfigOverloadPowerThreshold,
       "rPDU2DeviceConfigDevicePeakPowerReset": rPDU2DeviceConfigDevicePeakPowerReset,
       "rPDU2DeviceConfigDeviceEnergyReset": rPDU2DeviceConfigDeviceEnergyReset,
       "rPDU2DeviceConfigOutletsEnergyReset": rPDU2DeviceConfigOutletsEnergyReset,
       "rPDU2DevicePropertiesTable": rPDU2DevicePropertiesTable,
       "rPDU2DevicePropertiesEntry": rPDU2DevicePropertiesEntry,
       "rPDU2DevicePropertiesIndex": rPDU2DevicePropertiesIndex,
       "rPDU2DevicePropertiesModule": rPDU2DevicePropertiesModule,
       "rPDU2DevicePropertiesName": rPDU2DevicePropertiesName,
       "rPDU2DevicePropertiesNumOutlets": rPDU2DevicePropertiesNumOutlets,
       "rPDU2DevicePropertiesNumSwitchedOutlets": rPDU2DevicePropertiesNumSwitchedOutlets,
       "rPDU2DevicePropertiesNumMeteredOutlets": rPDU2DevicePropertiesNumMeteredOutlets,
       "rPDU2DevicePropertiesNumPhases": rPDU2DevicePropertiesNumPhases,
       "rPDU2DevicePropertiesNumMeteredBanks": rPDU2DevicePropertiesNumMeteredBanks,
       "rPDU2DevicePropertiesMaxCurrentRating": rPDU2DevicePropertiesMaxCurrentRating,
       "rPDU2DevicePropertiesOrientation": rPDU2DevicePropertiesOrientation,
       "rPDU2DevicePropertiesOutletLayout": rPDU2DevicePropertiesOutletLayout,
       "rPDU2DevicePropertiesMaxPhaseCurrentRating": rPDU2DevicePropertiesMaxPhaseCurrentRating,
       "rPDU2DeviceStatusTable": rPDU2DeviceStatusTable,
       "rPDU2DeviceStatusEntry": rPDU2DeviceStatusEntry,
       "rPDU2DeviceStatusIndex": rPDU2DeviceStatusIndex,
       "rPDU2DeviceStatusModule": rPDU2DeviceStatusModule,
       "rPDU2DeviceStatusName": rPDU2DeviceStatusName,
       "rPDU2DeviceStatusLoadState": rPDU2DeviceStatusLoadState,
       "rPDU2DeviceStatusPower": rPDU2DeviceStatusPower,
       "rPDU2DeviceStatusPeakPower": rPDU2DeviceStatusPeakPower,
       "rPDU2DeviceStatusPeakPowerTimestamp": rPDU2DeviceStatusPeakPowerTimestamp,
       "rPDU2DeviceStatusPeakPowerStartTime": rPDU2DeviceStatusPeakPowerStartTime,
       "rPDU2DeviceStatusEnergy": rPDU2DeviceStatusEnergy,
       "rPDU2DeviceStatusEnergyStartTime": rPDU2DeviceStatusEnergyStartTime,
       "rPDU2DeviceStatusCommandPending": rPDU2DeviceStatusCommandPending,
       "rPDU2DeviceStatusPowerSupplyAlarm": rPDU2DeviceStatusPowerSupplyAlarm,
       "rPDU2DeviceStatusPowerSupply1Status": rPDU2DeviceStatusPowerSupply1Status,
       "rPDU2DeviceStatusPowerSupply2Status": rPDU2DeviceStatusPowerSupply2Status,
       "rPDU2DeviceStatusOutletsEnergyStartTime": rPDU2DeviceStatusOutletsEnergyStartTime,
       "rPDU2DeviceControlTable": rPDU2DeviceControlTable,
       "rPDU2DeviceControlEntry": rPDU2DeviceControlEntry,
       "rPDU2DeviceControlIndex": rPDU2DeviceControlIndex,
       "rPDU2DeviceControlModule": rPDU2DeviceControlModule,
       "rPDU2DeviceControlName": rPDU2DeviceControlName,
       "rPDU2DeviceControlCommand": rPDU2DeviceControlCommand,
       "rPDU2PhaseTableSize": rPDU2PhaseTableSize,
       "rPDU2Phase": rPDU2Phase,
       "rPDU2PhaseConfigTable": rPDU2PhaseConfigTable,
       "rPDU2PhaseConfigEntry": rPDU2PhaseConfigEntry,
       "rPDU2PhaseConfigIndex": rPDU2PhaseConfigIndex,
       "rPDU2PhaseConfigModule": rPDU2PhaseConfigModule,
       "rPDU2PhaseConfigNumber": rPDU2PhaseConfigNumber,
       "rPDU2PhaseConfigOverloadRestriction": rPDU2PhaseConfigOverloadRestriction,
       "rPDU2PhaseConfigLowLoadCurrentThreshold": rPDU2PhaseConfigLowLoadCurrentThreshold,
       "rPDU2PhaseConfigNearOverloadCurrentThreshold": rPDU2PhaseConfigNearOverloadCurrentThreshold,
       "rPDU2PhaseConfigOverloadCurrentThreshold": rPDU2PhaseConfigOverloadCurrentThreshold,
       "rPDU2PhasePropertiesTable": rPDU2PhasePropertiesTable,
       "rPDU2PhasePropertiesEntry": rPDU2PhasePropertiesEntry,
       "rPDU2PhasePropertiesIndex": rPDU2PhasePropertiesIndex,
       "rPDU2PhasePropertiesModule": rPDU2PhasePropertiesModule,
       "rPDU2PhasePropertiesNumber": rPDU2PhasePropertiesNumber,
       "rPDU2PhaseStatusTable": rPDU2PhaseStatusTable,
       "rPDU2PhaseStatusEntry": rPDU2PhaseStatusEntry,
       "rPDU2PhaseStatusIndex": rPDU2PhaseStatusIndex,
       "rPDU2PhaseStatusModule": rPDU2PhaseStatusModule,
       "rPDU2PhaseStatusNumber": rPDU2PhaseStatusNumber,
       "rPDU2PhaseStatusLoadState": rPDU2PhaseStatusLoadState,
       "rPDU2PhaseStatusCurrent": rPDU2PhaseStatusCurrent,
       "rPDU2PhaseStatusVoltage": rPDU2PhaseStatusVoltage,
       "rPDU2PhaseStatusPower": rPDU2PhaseStatusPower,
       "rPDU2BankTableSize": rPDU2BankTableSize,
       "rPDU2Bank": rPDU2Bank,
       "rPDU2BankConfigTable": rPDU2BankConfigTable,
       "rPDU2BankConfigEntry": rPDU2BankConfigEntry,
       "rPDU2BankConfigIndex": rPDU2BankConfigIndex,
       "rPDU2BankConfigModule": rPDU2BankConfigModule,
       "rPDU2BankConfigNumber": rPDU2BankConfigNumber,
       "rPDU2BankConfigOverloadRestriction": rPDU2BankConfigOverloadRestriction,
       "rPDU2BankConfigLowLoadCurrentThreshold": rPDU2BankConfigLowLoadCurrentThreshold,
       "rPDU2BankConfigNearOverloadCurrentThreshold": rPDU2BankConfigNearOverloadCurrentThreshold,
       "rPDU2BankConfigOverloadCurrentThreshold": rPDU2BankConfigOverloadCurrentThreshold,
       "rPDU2BankPropertiesTable": rPDU2BankPropertiesTable,
       "rPDU2BankPropertiesEntry": rPDU2BankPropertiesEntry,
       "rPDU2BankPropertiesIndex": rPDU2BankPropertiesIndex,
       "rPDU2BankPropertiesModule": rPDU2BankPropertiesModule,
       "rPDU2BankPropertiesNumber": rPDU2BankPropertiesNumber,
       "rPDU2BankPropertiesPhaseLayout": rPDU2BankPropertiesPhaseLayout,
       "rPDU2BankStatusTable": rPDU2BankStatusTable,
       "rPDU2BankStatusEntry": rPDU2BankStatusEntry,
       "rPDU2BankStatusIndex": rPDU2BankStatusIndex,
       "rPDU2BankStatusModule": rPDU2BankStatusModule,
       "rPDU2BankStatusNumber": rPDU2BankStatusNumber,
       "rPDU2BankStatusLoadState": rPDU2BankStatusLoadState,
       "rPDU2BankStatusCurrent": rPDU2BankStatusCurrent,
       "rPDU2Outlet": rPDU2Outlet,
       "rPDU2OutletSwitchedTableSize": rPDU2OutletSwitchedTableSize,
       "rPDU2OutletSwitched": rPDU2OutletSwitched,
       "rPDU2OutletSwitchedConfigTable": rPDU2OutletSwitchedConfigTable,
       "rPDU2OutletSwitchedConfigEntry": rPDU2OutletSwitchedConfigEntry,
       "rPDU2OutletSwitchedConfigIndex": rPDU2OutletSwitchedConfigIndex,
       "rPDU2OutletSwitchedConfigModule": rPDU2OutletSwitchedConfigModule,
       "rPDU2OutletSwitchedConfigName": rPDU2OutletSwitchedConfigName,
       "rPDU2OutletSwitchedConfigNumber": rPDU2OutletSwitchedConfigNumber,
       "rPDU2OutletSwitchedConfigPowerOnTime": rPDU2OutletSwitchedConfigPowerOnTime,
       "rPDU2OutletSwitchedConfigPowerOffTime": rPDU2OutletSwitchedConfigPowerOffTime,
       "rPDU2OutletSwitchedConfigRebootDuration": rPDU2OutletSwitchedConfigRebootDuration,
       "rPDU2OutletSwitchedPropertiesTable": rPDU2OutletSwitchedPropertiesTable,
       "rPDU2OutletSwitchedPropertiesEntry": rPDU2OutletSwitchedPropertiesEntry,
       "rPDU2OutletSwitchedPropertiesIndex": rPDU2OutletSwitchedPropertiesIndex,
       "rPDU2OutletSwitchedPropertiesModule": rPDU2OutletSwitchedPropertiesModule,
       "rPDU2OutletSwitchedPropertiesName": rPDU2OutletSwitchedPropertiesName,
       "rPDU2OutletSwitchedPropertiesNumber": rPDU2OutletSwitchedPropertiesNumber,
       "rPDU2OutletSwitchedPropertiesPhaseLayout": rPDU2OutletSwitchedPropertiesPhaseLayout,
       "rPDU2OutletSwitchedPropertiesBank": rPDU2OutletSwitchedPropertiesBank,
       "rPDU2OutletSwitchedStatusTable": rPDU2OutletSwitchedStatusTable,
       "rPDU2OutletSwitchedStatusEntry": rPDU2OutletSwitchedStatusEntry,
       "rPDU2OutletSwitchedStatusIndex": rPDU2OutletSwitchedStatusIndex,
       "rPDU2OutletSwitchedStatusModule": rPDU2OutletSwitchedStatusModule,
       "rPDU2OutletSwitchedStatusName": rPDU2OutletSwitchedStatusName,
       "rPDU2OutletSwitchedStatusNumber": rPDU2OutletSwitchedStatusNumber,
       "rPDU2OutletSwitchedStatusState": rPDU2OutletSwitchedStatusState,
       "rPDU2OutletSwitchedStatusCommandPending": rPDU2OutletSwitchedStatusCommandPending,
       "rPDU2OutletSwitchedControlTable": rPDU2OutletSwitchedControlTable,
       "rPDU2OutletSwitchedControlEntry": rPDU2OutletSwitchedControlEntry,
       "rPDU2OutletSwitchedControlIndex": rPDU2OutletSwitchedControlIndex,
       "rPDU2OutletSwitchedControlModule": rPDU2OutletSwitchedControlModule,
       "rPDU2OutletSwitchedControlName": rPDU2OutletSwitchedControlName,
       "rPDU2OutletSwitchedControlNumber": rPDU2OutletSwitchedControlNumber,
       "rPDU2OutletSwitchedControlCommand": rPDU2OutletSwitchedControlCommand,
       "rPDU2OutletMeteredTableSize": rPDU2OutletMeteredTableSize,
       "rPDU2OutletMetered": rPDU2OutletMetered,
       "rPDU2OutletMeteredConfigTable": rPDU2OutletMeteredConfigTable,
       "rPDU2OutletMeteredConfigEntry": rPDU2OutletMeteredConfigEntry,
       "rPDU2OutletMeteredConfigIndex": rPDU2OutletMeteredConfigIndex,
       "rPDU2OutletMeteredConfigModule": rPDU2OutletMeteredConfigModule,
       "rPDU2OutletMeteredConfigName": rPDU2OutletMeteredConfigName,
       "rPDU2OutletMeteredConfigNumber": rPDU2OutletMeteredConfigNumber,
       "rPDU2OutletMeteredConfigLowLoadCurrentThreshold": rPDU2OutletMeteredConfigLowLoadCurrentThreshold,
       "rPDU2OutletMeteredConfigNearOverloadCurrentThreshold": rPDU2OutletMeteredConfigNearOverloadCurrentThreshold,
       "rPDU2OutletMeteredConfigOverloadCurrentThreshold": rPDU2OutletMeteredConfigOverloadCurrentThreshold,
       "rPDU2OutletMeteredPropertiesTable": rPDU2OutletMeteredPropertiesTable,
       "rPDU2OutletMeteredPropertiesEntry": rPDU2OutletMeteredPropertiesEntry,
       "rPDU2OutletMeteredPropertiesIndex": rPDU2OutletMeteredPropertiesIndex,
       "rPDU2OutletMeteredPropertiesModule": rPDU2OutletMeteredPropertiesModule,
       "rPDU2OutletMeteredPropertiesName": rPDU2OutletMeteredPropertiesName,
       "rPDU2OutletMeteredPropertiesNumber": rPDU2OutletMeteredPropertiesNumber,
       "rPDU2OutletMeteredPropertiesLayout": rPDU2OutletMeteredPropertiesLayout,
       "rPDU2OutletMeteredPropertiesPowerRating": rPDU2OutletMeteredPropertiesPowerRating,
       "rPDU2OutletMeteredPropertiesBank": rPDU2OutletMeteredPropertiesBank,
       "rPDU2OutletMeteredStatusTable": rPDU2OutletMeteredStatusTable,
       "rPDU2OutletMeteredStatusEntry": rPDU2OutletMeteredStatusEntry,
       "rPDU2OutletMeteredStatusIndex": rPDU2OutletMeteredStatusIndex,
       "rPDU2OutletMeteredStatusModule": rPDU2OutletMeteredStatusModule,
       "rPDU2OutletMeteredStatusName": rPDU2OutletMeteredStatusName,
       "rPDU2OutletMeteredStatusNumber": rPDU2OutletMeteredStatusNumber,
       "rPDU2OutletMeteredStatusState": rPDU2OutletMeteredStatusState,
       "rPDU2OutletMeteredStatusCurrent": rPDU2OutletMeteredStatusCurrent,
       "rPDU2OutletMeteredStatusPower": rPDU2OutletMeteredStatusPower,
       "rPDU2OutletMeteredStatusPeakPower": rPDU2OutletMeteredStatusPeakPower,
       "rPDU2OutletMeteredStatusPeakPowerTimestamp": rPDU2OutletMeteredStatusPeakPowerTimestamp,
       "rPDU2OutletMeteredStatusPeakPowerStartTime": rPDU2OutletMeteredStatusPeakPowerStartTime,
       "rPDU2OutletMeteredStatusEnergy": rPDU2OutletMeteredStatusEnergy,
       "rPDU2Sensor": rPDU2Sensor,
       "rPDU2SensorTempHumidityTableSize": rPDU2SensorTempHumidityTableSize,
       "rPDU2SensorTempHumidity": rPDU2SensorTempHumidity,
       "rPDU2SensorTempHumidityConfigTable": rPDU2SensorTempHumidityConfigTable,
       "rPDU2SensorTempHumidityConfigEntry": rPDU2SensorTempHumidityConfigEntry,
       "rPDU2SensorTempHumidityConfigIndex": rPDU2SensorTempHumidityConfigIndex,
       "rPDU2SensorTempHumidityConfigModule": rPDU2SensorTempHumidityConfigModule,
       "rPDU2SensorTempHumidityConfigName": rPDU2SensorTempHumidityConfigName,
       "rPDU2SensorTempHumidityConfigNumber": rPDU2SensorTempHumidityConfigNumber,
       "rPDU2SensorTempHumidityConfigTemperatureAlarmEnable": rPDU2SensorTempHumidityConfigTemperatureAlarmEnable,
       "rPDU2SensorTempHumidityConfigHumidityAlarmEnable": rPDU2SensorTempHumidityConfigHumidityAlarmEnable,
       "rPDU2SensorTempHumidityConfigTempMaxThreshF": rPDU2SensorTempHumidityConfigTempMaxThreshF,
       "rPDU2SensorTempHumidityConfigTempHighThreshF": rPDU2SensorTempHumidityConfigTempHighThreshF,
       "rPDU2SensorTempHumidityConfigTempHysteresisF": rPDU2SensorTempHumidityConfigTempHysteresisF,
       "rPDU2SensorTempHumidityConfigTempMaxThreshC": rPDU2SensorTempHumidityConfigTempMaxThreshC,
       "rPDU2SensorTempHumidityConfigTempHighThreshC": rPDU2SensorTempHumidityConfigTempHighThreshC,
       "rPDU2SensorTempHumidityConfigTempHysteresisC": rPDU2SensorTempHumidityConfigTempHysteresisC,
       "rPDU2SensorTempHumidityConfigHumidityLowThresh": rPDU2SensorTempHumidityConfigHumidityLowThresh,
       "rPDU2SensorTempHumidityConfigHumidityMinThresh": rPDU2SensorTempHumidityConfigHumidityMinThresh,
       "rPDU2SensorTempHumidityConfigHumidityHysteresis": rPDU2SensorTempHumidityConfigHumidityHysteresis,
       "rPDU2SensorTempHumidityStatusTable": rPDU2SensorTempHumidityStatusTable,
       "rPDU2SensorTempHumidityStatusEntry": rPDU2SensorTempHumidityStatusEntry,
       "rPDU2SensorTempHumidityStatusIndex": rPDU2SensorTempHumidityStatusIndex,
       "rPDU2SensorTempHumidityStatusModule": rPDU2SensorTempHumidityStatusModule,
       "rPDU2SensorTempHumidityStatusName": rPDU2SensorTempHumidityStatusName,
       "rPDU2SensorTempHumidityStatusNumber": rPDU2SensorTempHumidityStatusNumber,
       "rPDU2SensorTempHumidityStatusType": rPDU2SensorTempHumidityStatusType,
       "rPDU2SensorTempHumidityStatusCommStatus": rPDU2SensorTempHumidityStatusCommStatus,
       "rPDU2SensorTempHumidityStatusTempF": rPDU2SensorTempHumidityStatusTempF,
       "rPDU2SensorTempHumidityStatusTempC": rPDU2SensorTempHumidityStatusTempC,
       "rPDU2SensorTempHumidityStatusTempStatus": rPDU2SensorTempHumidityStatusTempStatus,
       "rPDU2SensorTempHumidityStatusRelativeHumidity": rPDU2SensorTempHumidityStatusRelativeHumidity,
       "rPDU2SensorTempHumidityStatusHumidityStatus": rPDU2SensorTempHumidityStatusHumidityStatus,
       "software": software,
       "powerNetSubAgent": powerNetSubAgent,
       "powerNetSoftwareSystem": powerNetSoftwareSystem,
       "powerNetSoftwareSystemDescription": powerNetSoftwareSystemDescription,
       "powerNetSoftwareOid": powerNetSoftwareOid,
       "powerNetSoftwareSystemUpTime": powerNetSoftwareSystemUpTime,
       "powerNetSoftwareConfig": powerNetSoftwareConfig,
       "powerNetSoftwareTableSize": powerNetSoftwareTableSize,
       "powerNetSoftwareTable": powerNetSoftwareTable,
       "powerNetSoftwareEntry": powerNetSoftwareEntry,
       "moduleNumber": moduleNumber,
       "moduleName": moduleName,
       "moduleVersion": moduleVersion,
       "moduleDate": moduleDate,
       "system": system,
       "backUPS": backUPS,
       "smartUPS": smartUPS,
       "smartUPS250": smartUPS250,
       "smartUPS400": smartUPS400,
       "smartUPS600": smartUPS600,
       "smartUPS900": smartUPS900,
       "smartUPS1250": smartUPS1250,
       "smartUPS2000": smartUPS2000,
       "smartUPS450": smartUPS450,
       "smartUPS700": smartUPS700,
       "smartUPS1000": smartUPS1000,
       "smartUPS1400": smartUPS1400,
       "smartUPS2200": smartUPS2200,
       "smartUPS3000": smartUPS3000,
       "smartUPS5000": smartUPS5000,
       "smartUPS7500": smartUPS7500,
       "smartUPS10000": smartUPS10000,
       "smartUPS1500": smartUPS1500,
       "smartUPS3000DSP": smartUPS3000DSP,
       "smartUPS5000DSP": smartUPS5000DSP,
       "smartUPS8000": smartUPS8000,
       "matrixUPS": matrixUPS,
       "matrixUPS3000": matrixUPS3000,
       "matrixUPS5000": matrixUPS5000,
       "masterSwitch": masterSwitch,
       "masterSwitchV1": masterSwitchV1,
       "masterSwitchV2": masterSwitchV2,
       "masterSwitchVM": masterSwitchVM,
       "masterSwitchMSP": masterSwitchMSP,
       "masterSwitchrPDU": masterSwitchrPDU,
       "masterSwitchrPDU2": masterSwitchrPDU2,
       "symmetraUPS": symmetraUPS,
       "symmetraUPS4kVA": symmetraUPS4kVA,
       "symmetraUPS8kVA": symmetraUPS8kVA,
       "symmetraUPS12kVA": symmetraUPS12kVA,
       "symmetraUPS16kVA": symmetraUPS16kVA,
       "dp100E": dp100E,
       "dp300E": dp300E,
       "monitors": monitors,
       "environmental": environmental,
       "environmentalMgtSystem": environmentalMgtSystem,
       "emu2": emu2,
       "mem": mem,
       "redundantSwitch": redundantSwitch,
       "dcPower": dcPower,
       "dm3": dm3,
       "dcmim2": dcmim2,
       "automaticXferSwitch": automaticXferSwitch,
       "netLock": netLock,
       "symmetra3PhaseUPS": symmetra3PhaseUPS,
       "symmetra3PhaseUPS40kVA": symmetra3PhaseUPS40kVA,
       "symmetra3PhaseUPS60kVA": symmetra3PhaseUPS60kVA,
       "symmetra3PhaseUPS80kVA": symmetra3PhaseUPS80kVA,
       "symmetra3PhaseUPS20kVA": symmetra3PhaseUPS20kVA,
       "networkAir": networkAir,
       "airFMSeries": airFMSeries,
       "rackAirRemovalUnit": rackAirRemovalUnit,
       "airPASeries": airPASeries,
       "airIRSC100Series": airIRSC100Series,
       "airIRRC100Series": airIRRC100Series,
       "airIRRP100Series": airIRRP100Series,
       "airIRRP500Series": airIRRP500Series,
       "airIRRD100Series": airIRRD100Series,
       "airInRoomPerimeter": airInRoomPerimeter,
       "infraStruXurePDU": infraStruXurePDU,
       "ais5000UPS": ais5000UPS,
       "ais5000UPS10kVA": ais5000UPS10kVA,
       "ais5000UPS20kVA": ais5000UPS20kVA,
       "ais5000UPS30kVA": ais5000UPS30kVA,
       "ais5000UPS40kVA": ais5000UPS40kVA,
       "ais5000UPS60kVA": ais5000UPS60kVA,
       "ais5000UPS80kVA": ais5000UPS80kVA,
       "ais5000UPS100kVA": ais5000UPS100kVA,
       "smartUPS3Phase": smartUPS3Phase,
       "smartUPS3Phase10kVA": smartUPS3Phase10kVA,
       "smartUPS3Phase15kVA": smartUPS3Phase15kVA,
       "smartUPS3Phase20kVA": smartUPS3Phase20kVA,
       "smartUPS3Phase30kVA": smartUPS3Phase30kVA,
       "smartUPS3Phase40kVA": smartUPS3Phase40kVA,
       "battManager": battManager,
       "infraStruXureATS": infraStruXureATS,
       "conPortServ": conPortServ,
       "conPortServAP930x": conPortServAP930x,
       "gutor": gutor,
       "gutorPEW": gutorPEW,
       "gutorPDW": gutorPDW,
       "gutorWEW": gutorWEW,
       "gutorWDW": gutorWDW,
       "gutorSDC": gutorSDC,
       "accControl": accControl,
       "accPX": accPX,
       "symmetraPX": symmetraPX,
       "symmetraPx48kVA": symmetraPx48kVA,
       "symmetraPx160kVA": symmetraPx160kVA,
       "symmetraPx250kVA": symmetraPx250kVA,
       "symmetraPx500kVA": symmetraPx500kVA,
       "symmetraPx100kVA": symmetraPx100kVA,
       "symmetraPxDisplay": symmetraPxDisplay,
       "isxModDistribution": isxModDistribution,
       "isx24ModuleHalfRackPdu": isx24ModuleHalfRackPdu,
       "isx6ModuleRackPdu": isx6ModuleRackPdu,
       "isxServers": isxServers,
       "isxcBasic": isxcBasic,
       "isxcStandard": isxcStandard,
       "isxcEnterprise": isxcEnterprise,
       "smartUPS2": smartUPS2,
       "galaxy": galaxy,
       "galaxy7000UPS200kVA": galaxy7000UPS200kVA,
       "galaxy7000UPS250kVA": galaxy7000UPS250kVA,
       "galaxy7000UPS300kVA": galaxy7000UPS300kVA,
       "galaxy7000UPS400kVA": galaxy7000UPS400kVA,
       "galaxy7000UPS500kVA": galaxy7000UPS500kVA,
       "galaxy7000SSC800kVA": galaxy7000SSC800kVA,
       "galaxy7000SSC1200kVA": galaxy7000SSC1200kVA,
       "galaxy7000SSC2000kVA": galaxy7000SSC2000kVA,
       "galaxy300UPS10kVA33": galaxy300UPS10kVA33,
       "galaxy300UPS15kVA33": galaxy300UPS15kVA33,
       "galaxy300UPS20kVA33": galaxy300UPS20kVA33,
       "galaxy300UPS30kVA33": galaxy300UPS30kVA33,
       "galaxy300UPS40kVA33": galaxy300UPS40kVA33,
       "galaxy300UPS10kVA31": galaxy300UPS10kVA31,
       "galaxy300UPS15kVA31": galaxy300UPS15kVA31,
       "galaxy300UPS20kVA31": galaxy300UPS20kVA31,
       "galaxy300UPS30kVA31": galaxy300UPS30kVA31,
       "galaxy5000UPS20KVA": galaxy5000UPS20KVA,
       "galaxy5000UPS30KVA": galaxy5000UPS30KVA,
       "galaxy5000UPS40KVA": galaxy5000UPS40KVA,
       "galaxy5000UPS50KVA": galaxy5000UPS50KVA,
       "galaxy5000UPS60KVA": galaxy5000UPS60KVA,
       "galaxy5000UPS80KVA": galaxy5000UPS80KVA,
       "galaxy5000UPS100KVA": galaxy5000UPS100KVA,
       "galaxy5000UPS120KVA": galaxy5000UPS120KVA,
       "galaxy5000UPS130KVA": galaxy5000UPS130KVA,
       "galaxy5500UPS20KVA": galaxy5500UPS20KVA,
       "galaxy5500UPS30KVA": galaxy5500UPS30KVA,
       "galaxy5500UPS40KVA": galaxy5500UPS40KVA,
       "galaxy5500UPS50KVA": galaxy5500UPS50KVA,
       "galaxy5500UPS60KVA": galaxy5500UPS60KVA,
       "galaxy5500UPS80KVA": galaxy5500UPS80KVA,
       "galaxy5500UPS100KVA": galaxy5500UPS100KVA,
       "galaxy5500UPS120KVA": galaxy5500UPS120KVA,
       "galaxy5500UPS130KVA": galaxy5500UPS130KVA,
       "experimental": experimental,
       "apcmgmt": apcmgmt,
       "mconfig": mconfig,
       "mconfigNumTrapReceivers": mconfigNumTrapReceivers,
       "mconfigTrapReceiverTable": mconfigTrapReceiverTable,
       "mconfigTrapReceiverEntry": mconfigTrapReceiverEntry,
       "trapIndex": trapIndex,
       "receiverAddr": receiverAddr,
       "communityString": communityString,
       "severity": severity,
       "acceptThisReceiver": acceptThisReceiver,
       "receiveTrapType": receiveTrapType,
       "mconfigBOOTPEnabled": mconfigBOOTPEnabled,
       "mconfigTFTPServerIP": mconfigTFTPServerIP,
       "newCodeAuthentViaTFTP": newCodeAuthentViaTFTP,
       "mconfigClock": mconfigClock,
       "mconfigClockDate": mconfigClockDate,
       "mconfigClockTime": mconfigClockTime,
       "mcontrol": mcontrol,
       "mcontrolRestartAgent": mcontrolRestartAgent,
       "mtrapargs": mtrapargs,
       "mtrapargsInteger": mtrapargsInteger,
       "mtrapargsIpAddress": mtrapargsIpAddress,
       "mtrapargsString": mtrapargsString,
       "mtrapargsGauge": mtrapargsGauge,
       "mtrapargsTimeTicks": mtrapargsTimeTicks,
       "mtrapargsInteger02": mtrapargsInteger02,
       "mtrapargsInteger03": mtrapargsInteger03,
       "mtrapargsIpAddress02": mtrapargsIpAddress02,
       "mtrapargsIpAddress03": mtrapargsIpAddress03,
       "mtrapargsString02": mtrapargsString02,
       "mtrapargsString03": mtrapargsString03,
       "mtrapargsGauge02": mtrapargsGauge02,
       "mtrapargsGauge03": mtrapargsGauge03,
       "mtrapargsTimeTicks02": mtrapargsTimeTicks02,
       "mtrapargsTimeTicks03": mtrapargsTimeTicks03,
       "mtrapargsString04": mtrapargsString04,
       "mtrapargsString05": mtrapargsString05,
       "mtrapargsInteger04": mtrapargsInteger04,
       "mtrapargsInteger05": mtrapargsInteger05,
       "mtrapargsString06": mtrapargsString06,
       "mtrapargsString07": mtrapargsString07,
       "mtrapargsString08": mtrapargsString08,
       "mtrapargsOctetString": mtrapargsOctetString,
       "mtrapargsOctetString02": mtrapargsOctetString02,
       "mtrapargsOctetString03": mtrapargsOctetString03,
       "mtrapargsOctetString04": mtrapargsOctetString04,
       "mtrapargsOctetString05": mtrapargsOctetString05,
       "mtrapargsOctetString06": mtrapargsOctetString06,
       "mtrapargsOctetString07": mtrapargsOctetString07,
       "mtrapargsOctetString08": mtrapargsOctetString08,
       "mfiletransfer": mfiletransfer,
       "mfiletransferStatus": mfiletransferStatus,
       "mfiletransferStatusLastTransferResult": mfiletransferStatusLastTransferResult,
       "mfiletransferConfig": mfiletransferConfig,
       "mfiletransferConfigSettings": mfiletransferConfigSettings,
       "mfiletransferConfigSettingsFilename": mfiletransferConfigSettingsFilename,
       "mfiletransferConfigTFTP": mfiletransferConfigTFTP,
       "mfiletransferConfigTFTPServerAddress": mfiletransferConfigTFTPServerAddress,
       "mfiletransferConfigFTP": mfiletransferConfigFTP,
       "mfiletransferConfigFTPServerAddress": mfiletransferConfigFTPServerAddress,
       "mfiletransferConfigFTPServerUser": mfiletransferConfigFTPServerUser,
       "mfiletransferConfigFTPServerPassword": mfiletransferConfigFTPServerPassword,
       "mfiletransferControl": mfiletransferControl,
       "mfiletransferControlInitiateFileTransfer": mfiletransferControlInitiateFileTransfer}
)

#
# PySNMP MIB module FIBRONICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/FIBRONICS-MIB
# Produced by pysmi-0.3.4 at Fri Jan 31 21:31:05 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Integer32, Counter64, ObjectIdentity, Unsigned32, Counter32, Bits, enterprises, IpAddress, NotificationType, MibIdentifier, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Integer32", "Counter64", "ObjectIdentity", "Unsigned32", "Counter32", "Bits", "enterprises", "IpAddress", "NotificationType", "MibIdentifier", "Gauge32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fibronics = MibIdentifier((1, 3, 6, 1, 4, 1, 22))
fbr101 = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101))
fbr2 = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2))
fbrStack = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7))
genGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8))
genPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9))
genIntPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 10))
softRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 11))
eth = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12))
tok = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13))
ts = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 14))
ltalk = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 15))
cl = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16))
fbrOID = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 17))
fbrSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 18))
fbrLanSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19))
deviceMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 20))
bRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21))
probe = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 22))
chHWType = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("let18", 1), ("let3", 2), ("let36", 3), ("let18Extended", 4), ("lert40", 5), ("let10", 6), ("fdx100", 7), ("stack", 8), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWType.setStatus('mandatory')
chNumberOfSlots = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumberOfSlots.setStatus('mandatory')
chNumberOfEthernetBuses = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumberOfEthernetBuses.setStatus('mandatory')
chNumberOfTRBuses = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumberOfTRBuses.setStatus('mandatory')
chNumberOfFDDIBuses = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumberOfFDDIBuses.setStatus('mandatory')
chNumberOfLocalTalkBuses = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumberOfLocalTalkBuses.setStatus('mandatory')
chReset = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chReset.setStatus('mandatory')
chFullConfig = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFullConfig.setStatus('mandatory')
chAg = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9))
chGenAgTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 1), )
if mibBuilder.loadTexts: chGenAgTable.setStatus('mandatory')
chGenAgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "chGenAgId"))
if mibBuilder.loadTexts: chGenAgEntry.setStatus('mandatory')
chGenAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chGenAgId.setStatus('mandatory')
chGenAgType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 255))).clone(namedValues=NamedValues(("nma1-et", 1), ("nma1-et-e", 2), ("nma1-tr", 3), ("nma2-et", 4), ("nma2-tr", 5), ("nma2-fddi", 6), ("ielb", 7), ("itlb", 8), ("lts16", 9), ("ierp", 10), ("iefn", 11), ("itfn", 12), ("nm2069", 13), ("nma-rt", 14), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chGenAgType.setStatus('mandatory')
chGenAgMgmtIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 255))).clone(namedValues=NamedValues(("none", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10MBit", 12), ("proteon-80MBit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("t1-carrier", 18), ("cept", 19), ("basicIsdn", 20), ("primaryIsdn", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ip", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chGenAgMgmtIfType.setStatus('mandatory')
chGenAgAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chGenAgAddr.setStatus('mandatory')
chGenAgSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chGenAgSpecificOID.setStatus('mandatory')
chFbrAgTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2), )
if mibBuilder.loadTexts: chFbrAgTable.setStatus('mandatory')
chFbrAgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1), ).setIndexNames((0, "FIBRONICS-MIB", "chFbrAgId"))
if mibBuilder.loadTexts: chFbrAgEntry.setStatus('mandatory')
chFbrAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgId.setStatus('mandatory')
chFbrAgSLIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgSLIPAddress.setStatus('mandatory')
chFbrAgSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgSWVersion.setStatus('mandatory')
chFbrAgKernelVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgKernelVersion.setStatus('mandatory')
chFbrAgCoprocSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgCoprocSWVersion.setStatus('mandatory')
chFbrAgSWFault = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgSWFault.setStatus('mandatory')
chFbrAgMgmtBusSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgMgmtBusSelection.setStatus('mandatory')
chFbrAgCoprocCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("commProblems", 2), ("timeout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgCoprocCommStatus.setStatus('mandatory')
chFbrAgCommDebugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgCommDebugMode.setStatus('mandatory')
chFbrAgConfigChangeTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgConfigChangeTraps.setStatus('mandatory')
chFbrAgFaultTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgFaultTraps.setStatus('mandatory')
chFbrAgTrafficThreshTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgTrafficThreshTraps.setStatus('mandatory')
chFbrAgGroupEnrollDeenrollTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgGroupEnrollDeenrollTraps.setStatus('mandatory')
chFbrAgSoftFaultTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgSoftFaultTraps.setStatus('mandatory')
chFbrAgHubEnrollTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgHubEnrollTraps.setStatus('obsolete')
chFbrAgTempThreshTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgTempThreshTraps.setStatus('mandatory')
chFbrAgSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 17), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgSpecificOID.setStatus('mandatory')
chFbrAgLastAddrConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgLastAddrConfig.setStatus('mandatory')
chFbrAgSecAddrConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgSecAddrConfig.setStatus('mandatory')
chFbrAgSoftwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unLoadable", 1), ("loaded", 2), ("downLoading", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgSoftwareStatus.setStatus('mandatory')
chFbrAgConfigurationSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgConfigurationSymbol.setStatus('mandatory')
chFbrAgIntTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgIntTemp.setStatus('mandatory')
chFbrAgBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgBootVersion.setStatus('mandatory')
chFbrAgSensorFault = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgSensorFault.setStatus('mandatory')
chFbrAgSensorFaultTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgSensorFaultTraps.setStatus('mandatory')
chFbrAgInterProcFault = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgInterProcFault.setStatus('mandatory')
chFbrAgInterProcFaultTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 2, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgInterProcFaultTraps.setStatus('mandatory')
chFbrAgSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3))
chFbrAgMaxNmbOfMngrs = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgMaxNmbOfMngrs.setStatus('mandatory')
chFbrAgPermMngrTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 2), )
if mibBuilder.loadTexts: chFbrAgPermMngrTable.setStatus('mandatory')
chFbrAgPermMngrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 2, 1), ).setIndexNames((0, "FIBRONICS-MIB", "chFbrAgPermMngrId"))
if mibBuilder.loadTexts: chFbrAgPermMngrEntry.setStatus('mandatory')
chFbrAgPermMngrId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgPermMngrId.setStatus('mandatory')
chFbrAgPermMngrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgPermMngrAddr.setStatus('mandatory')
chFbrAgMaxNmbOfNets = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgMaxNmbOfNets.setStatus('mandatory')
chFbrAgRmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 4), )
if mibBuilder.loadTexts: chFbrAgRmtNetTable.setStatus('mandatory')
chFbrAgRmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 4, 1), ).setIndexNames((0, "FIBRONICS-MIB", "chFbrAgRmtNetId"))
if mibBuilder.loadTexts: chFbrAgRmtNetEntry.setStatus('mandatory')
chFbrAgRmtNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chFbrAgRmtNetId.setStatus('mandatory')
chFbrAgRmtNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgRmtNetAddr.setStatus('mandatory')
chFbrAgRmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgRmtNetMask.setStatus('mandatory')
chFbrAgDateTime = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgDateTime.setStatus('mandatory')
chFbrAgReset = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 9, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chFbrAgReset.setStatus('mandatory')
chMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 10))
chMgrTrapRepStatus = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chMgrTrapRepStatus.setStatus('mandatory')
chMgrContPerfRep = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chMgrContPerfRep.setStatus('mandatory')
chMgrMngmtState = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chMgrMngmtState.setStatus('mandatory')
chMgrPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 10, 4), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chMgrPollInterval.setStatus('mandatory')
chHW = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 11))
chHWPSUTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 11, 1), )
if mibBuilder.loadTexts: chHWPSUTable.setStatus('mandatory')
chHWPSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 11, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "chHWPSUId"))
if mibBuilder.loadTexts: chHWPSUEntry.setStatus('mandatory')
chHWPSUId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWPSUId.setStatus('mandatory')
chHWPSUActivityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notActive", 1), ("dormant", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWPSUActivityStatus.setStatus('mandatory')
chHWPSULocation = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWPSULocation.setStatus('mandatory')
chHWPSUVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWPSUVoltage.setStatus('mandatory')
chHWIntTempWarning = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("exceeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWIntTempWarning.setStatus('mandatory')
chHWIntTempThresh = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chHWIntTempThresh.setStatus('mandatory')
chHWPeakIntTemp = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chHWPeakIntTemp.setStatus('mandatory')
chSlotLastChange = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 7, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSlotLastChange.setStatus('mandatory')
genGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1), )
if mibBuilder.loadTexts: genGroupTable.setStatus('mandatory')
genGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "genGroupId"))
if mibBuilder.loadTexts: genGroupEntry.setStatus('mandatory')
genGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupId.setStatus('mandatory')
genGroupSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupSWVersion.setStatus('mandatory')
genGroupKernelVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupKernelVersion.setStatus('mandatory')
genGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 255))).clone(namedValues=NamedValues(("le10b", 1), ("le10b-2", 2), ("le10c", 3), ("le10c-2", 4), ("le15", 5), ("le15-2", 6), ("le20", 7), ("le30x", 8), ("le30x-2", 9), ("le30xd", 10), ("le40x", 11), ("le40xt", 12), ("ltr4-RJ45", 13), ("ltr4-D9", 14), ("ltr4-D25", 15), ("ltr4-FO", 16), ("ltrio-RJ45", 19), ("ltrio-D9", 20), ("ltrio-D25", 21), ("ltrio-FO", 22), ("ltrio-Con1", 23), ("ltrio-Con2", 24), ("le10b-2r", 25), ("le10c-2r", 26), ("le80xt", 27), ("le140xt", 28), ("ielb", 29), ("ltrf4", 30), ("ltrf16", 31), ("lts16", 32), ("le20n", 33), ("ltr104-RJ45", 34), ("le20r", 35), ("llt8", 36), ("le20s", 37), ("le10b2n", 38), ("ltr104-D9", 39), ("ltr104-D25", 40), ("ltrt-RJ45", 41), ("ltrt-D9", 42), ("ltr104f", 43), ("itlb", 44), ("le140xtf", 45), ("le120r", 46), ("le120r-2", 47), ("le140xtc", 48), ("le110b", 49), ("le110bq", 50), ("lcl100", 51), ("le140xtq", 52), ("le20n-fb", 53), ("le20s-fb", 54), ("le140xtf-fb", 55), ("ltr104s", 56), ("lert40-AUI", 57), ("lert40-10BASET", 58), ("lfd104-mic", 59), ("lfd104-stm", 60), ("lfd104-stl", 61), ("lfd104-stp", 62), ("lfd104-utp", 63), ("lfd102-mic", 64), ("lfd102-stm", 65), ("lfd102-sts", 66), ("le140xtn", 67), ("ltr104a", 68), ("le120q", 69), ("le120sq2", 70), ("le120sq5", 71), ("le120q-fb", 72), ("le120sq2-fb", 73), ("le120sq5-fb", 74), ("ltr108t", 75), ("ltr108f", 76), ("lse808", 77), ("lhs", 78), ("ierb", 79), ("iefn", 80), ("itfn", 81), ("itre1", 82), ("istc1", 83), ("iftc", 84), ("ietlb", 85), ("ierp", 86), ("lse108", 87), ("lse208", 88), ("le110cq", 89), ("itre2", 90), ("istc2", 91), ("fer2061", 92), ("le115q", 93), ("sh-t16", 94), ("sh-e8", 95), ("lhb", 96), ("sh-efn", 97), ("sh-tfn", 98), ("itng", 99), ("lace100", 100), ("le140xts", 101), ("le40xtn", 102), ("le80xtn", 103), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupType.setStatus('mandatory')
genGroupDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupDescr.setStatus('mandatory')
genGroupNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupNumberOfPorts.setStatus('mandatory')
genGroupNumberOfIntPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupNumberOfIntPorts.setStatus('mandatory')
genGroupReset = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genGroupReset.setStatus('mandatory')
genGroupAutoMan = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("man", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupAutoMan.setStatus('mandatory')
genGroupFullConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupFullConfig.setStatus('mandatory')
genGroupRedun12 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genGroupRedun12.setStatus('mandatory')
genGroupRedun34 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genGroupRedun34.setStatus('mandatory')
genGroupRedun13_14 = MibScalar((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setLabel("genGroupRedun13-14").setMaxAccess("readwrite")
if mibBuilder.loadTexts: genGroupRedun13_14.setStatus('mandatory')
genGroupStandAloneMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genGroupStandAloneMode.setStatus('mandatory')
genGroupInterProcCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ok", 1), ("commProblems", 2), ("noCommunication", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupInterProcCommStatus.setStatus('mandatory')
genGroupCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ok", 1), ("commProblems", 2), ("noCommunication", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupCommStatus.setStatus('mandatory')
genGroupHWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ok", 1), ("hardwareProblems", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupHWStatus.setStatus('mandatory')
genGroupSupplyVoltageFault = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupSupplyVoltageFault.setStatus('mandatory')
genGroupIntTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupIntTemp.setStatus('mandatory')
genGroupSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 20), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupSpecificOID.setStatus('mandatory')
genGroupConfigurationSymbol = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genGroupConfigurationSymbol.setStatus('mandatory')
genGroupLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 8, 1, 1, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupLastChange.setStatus('mandatory')
genPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1), )
if mibBuilder.loadTexts: genPortTable.setStatus('mandatory')
genPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "genPortGroupId"), (0, "FIBRONICS-MIB", "genPortId"))
if mibBuilder.loadTexts: genPortEntry.setStatus('mandatory')
genPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortGroupId.setStatus('mandatory')
genPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortId.setStatus('mandatory')
genPortFunctionality = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("private", 1), ("repeaterAUI", 2), ("repeaterThin", 3), ("repeater10BaseT", 4), ("tenBaseFSyncAct", 5), ("foirl", 6), ("xcvr", 7), ("lobe", 8), ("ri", 9), ("ro", 10), ("serial", 11), ("localTalk", 12), ("fddi", 13), ("clock", 14), ("genTokenRing", 15), ("dte", 16), ("activeLobe", 17), ("genActiveTokenRing", 18), ("tenBaseFB", 19), ("lse10BaseT", 20), ("lhsFiber", 21), ("wan", 22), ("star", 23), ("activeRI", 24), ("activeRO", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortFunctionality.setStatus('mandatory')
genPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 255))).clone(namedValues=NamedValues(("le10bPort", 1), ("le10cPort", 2), ("le15Port", 3), ("le20Port", 4), ("le30xPort", 5), ("le30xdPort", 6), ("le40xPort", 7), ("le40xtPort", 8), ("lobeRJ45", 9), ("lobeD9", 10), ("lobeD25", 11), ("lobeFO", 12), ("ri104D25", 13), ("ro104D25", 14), ("riRJ45", 15), ("riD9", 16), ("riD25", 17), ("riFO", 18), ("ri104RJ45", 19), ("ri104D9", 20), ("roRJ45", 21), ("roD9", 22), ("roD25", 23), ("roFO", 24), ("ro104RJ45", 25), ("ro104D9", 26), ("le80xtPort", 27), ("le140xtPort", 28), ("ielb-AUIPort", 29), ("ielb-10btPort", 30), ("ltrf4Port", 31), ("ltrf16Port", 32), ("lts16Port", 33), ("llt8Port", 34), ("le20rPort", 35), ("itlbRoPort", 36), ("itlbRiPort", 37), ("itlbDTEPort", 38), ("starFO", 39), ("le10bnPort", 40), ("le120rPort", 41), ("le140xtf-foPort", 42), ("le140xtf-10btPort", 43), ("le140xtcPort", 44), ("le110bPort", 45), ("le110bqPort", 46), ("le140xtqPort", 47), ("lert40-AUIPort", 48), ("lert40-10btPort", 49), ("clock-int", 50), ("clock-ext", 51), ("ri104RJ45S", 52), ("r0104RJ45S", 53), ("lobe104RJ45S", 54), ("le20fbPort", 55), ("le140xtf-fofbPort", 56), ("fddi-micPort1", 57), ("fddi-micPort2", 58), ("fddi-micPort3", 59), ("fddi-stmPort1", 60), ("fddi-stmPort2", 61), ("fddi-stmPort3", 62), ("fddi-stlPort1", 63), ("fddi-stlPort2", 64), ("fddi-stlPort3", 65), ("fddi-stpPort1", 66), ("fddi-stpPort2", 67), ("fddi-stpPort3", 68), ("fddi-utpPort1", 69), ("fddi-utpPort2", 70), ("fddi-utpPort3", 71), ("fddi-stsPort1", 72), ("fddi-stsPort2", 73), ("fddi-stsPort3", 74), ("le140xtnPort", 75), ("ltr104a-lobePort", 76), ("ltr104a-riPort", 77), ("ltr104a-roPort", 78), ("le120qPort", 79), ("le120sq2PortS", 80), ("le120sq2PortM", 81), ("le120sq5Port", 82), ("le120q-fbPort", 83), ("le120sq2-fbPortS", 84), ("le120sq2-fbPortM", 85), ("le120sq5-fbPort", 86), ("ltr108t-lobePort1", 87), ("ltr108t-riPort1", 88), ("ltr108t-roPort1", 89), ("ltr108t-lobePort", 90), ("ltr108f-lobePort", 91), ("ltr108f-starPortFO", 92), ("ltr108f-riPortFO", 93), ("ltr108f-roPortFO", 94), ("lse808Port", 95), ("lhsPort", 96), ("ierbPort", 97), ("iefnPort", 98), ("itfnPort", 99), ("itrePort", 100), ("istcPort", 101), ("iftcPort", 102), ("ietlb-lobePort", 103), ("ietlb-riPort", 104), ("ietlb-roPort", 105), ("ietlb-10BaseTPort", 106), ("ierpPort", 107), ("lse108Port", 108), ("lse208Port", 109), ("le110cqPort", 110), ("ltr108t-starPort1", 111), ("fer2061-10btPort", 112), ("fer2061-AUIPort", 113), ("fer2061-FOPort", 114), ("fer2061-FOSyncPort", 115), ("le115qPort", 116), ("sht-lobePort", 117), ("sht-riRJ45Port", 118), ("sht-riD9Port", 119), ("sht-riFOPort", 120), ("sht-roRJ45Port", 121), ("sht-roD9Port", 122), ("sht-roFOPort", 123), ("lhbPort", 124), ("itngPort", 125), ("le140xtsPort", 126), ("le40xtnPort", 127), ("le80xtnPort", 128), ("unknownPort", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortType.setStatus('mandatory')
genPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortDescr.setStatus('mandatory')
genPortActivityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("notActive", 1), ("dormant", 2), ("active", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortActivityStatus.setStatus('mandatory')
genPortSecurityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genPortSecurityPolicy.setStatus('mandatory')
genPortSecureAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genPortSecureAddresses.setStatus('mandatory')
genPortIntPortConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortIntPortConnection.setStatus('mandatory')
genPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genPortAdminStatus.setStatus('mandatory')
genPortSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 9, 1, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genPortSpecificOID.setStatus('mandatory')
genIntPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 10, 1), )
if mibBuilder.loadTexts: genIntPortTable.setStatus('mandatory')
genIntPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 10, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "genIntPortGroupId"), (0, "FIBRONICS-MIB", "genIntPortId"))
if mibBuilder.loadTexts: genIntPortEntry.setStatus('mandatory')
genIntPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genIntPortGroupId.setStatus('mandatory')
genIntPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genIntPortId.setStatus('mandatory')
genIntPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genIntPortAdminStatus.setStatus('mandatory')
genIntPortActivityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("notActive", 1), ("dormant", 2), ("active", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genIntPortActivityStatus.setStatus('mandatory')
genIntPortBusConnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genIntPortBusConnNumber.setStatus('mandatory')
genIntPortBusConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("ethernet", 1), ("token-ring", 2), ("local-talk", 3), ("fddi", 4), ("high-speed", 5), ("other", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genIntPortBusConnType.setStatus('mandatory')
genIntPortSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 10, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genIntPortSpecificOID.setStatus('mandatory')
genIntPortMonitorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genIntPortMonitorMode.setStatus('mandatory')
softRedundancyTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 11, 1), )
if mibBuilder.loadTexts: softRedundancyTable.setStatus('mandatory')
softRedundancyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 11, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "softRedundancyId"))
if mibBuilder.loadTexts: softRedundancyEntry.setStatus('mandatory')
softRedundancyId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softRedundancyId.setStatus('mandatory')
softRedundancyName = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softRedundancyName.setStatus('mandatory')
softRedundancyGroupId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softRedundancyGroupId1.setStatus('mandatory')
softRedundancyPortId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softRedundancyPortId1.setStatus('mandatory')
softRedundancyGroupId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softRedundancyGroupId2.setStatus('mandatory')
softRedundancyPortId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softRedundancyPortId2.setStatus('mandatory')
softRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softRedundancyStatus.setStatus('mandatory')
ethAg = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 1))
ethAgTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 1, 1), )
if mibBuilder.loadTexts: ethAgTable.setStatus('mandatory')
ethAgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 1, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "ethAgId"))
if mibBuilder.loadTexts: ethAgEntry.setStatus('mandatory')
ethAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethAgId.setStatus('mandatory')
ethAgPerfBusSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethAgPerfBusSelection.setStatus('mandatory')
ethGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2))
ethGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1), )
if mibBuilder.loadTexts: ethGroupTable.setStatus('mandatory')
ethGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "ethGroupId"))
if mibBuilder.loadTexts: ethGroupEntry.setStatus('mandatory')
ethGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupId.setStatus('mandatory')
ethGroupFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupFIFO.setStatus('mandatory')
ethGroup10BTPlus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroup10BTPlus.setStatus('mandatory')
ethGroupIntPortsRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupIntPortsRedundancy.setStatus('mandatory')
ethGroupBackboneMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupBackboneMode.setStatus('mandatory')
ethGroupFOIRLPlusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupFOIRLPlusMode.setStatus('mandatory')
ethGroupWrongPortSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupWrongPortSelection.setStatus('mandatory')
ethGroupBackupBus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupBackupBus.setStatus('mandatory')
ethGroupSingleBusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupSingleBusMode.setStatus('mandatory')
ethGroupSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupSpecificOID.setStatus('mandatory')
ethGroup10FBPlus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroup10FBPlus.setStatus('mandatory')
ethGroupMasterClock = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupMasterClock.setStatus('mandatory')
ethGroupIdleTrx = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGroupIdleTrx.setStatus('mandatory')
ethGroupMJLPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethGroupMJLPStatus.setStatus('mandatory')
ethPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3))
ethPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1), )
if mibBuilder.loadTexts: ethPortTable.setStatus('mandatory')
ethPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "ethPortGroupId"), (0, "FIBRONICS-MIB", "ethPortId"))
if mibBuilder.loadTexts: ethPortEntry.setStatus('mandatory')
ethPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortGroupId.setStatus('mandatory')
ethPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortId.setStatus('mandatory')
ethPortFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255))).clone(namedValues=NamedValues(("ok", 1), ("rld", 2), ("localJabber", 3), ("tld", 4), ("remoteJabber", 5), ("illSeq", 6), ("shortCirc", 7), ("partitionOrLocalJabber", 8), ("remoteFaultOrLockLost", 9), ("remoteFault", 10), ("lockLost", 11), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortFunctionalStatus.setStatus('mandatory')
ethPortManPart = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortManPart.setStatus('mandatory')
ethPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortJabber.setStatus('mandatory')
ethPortNoAUILoop = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortNoAUILoop.setStatus('mandatory')
ethPortMJLP = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortMJLP.setStatus('mandatory')
ethPortFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortFIFO.setStatus('mandatory')
ethPortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("autoPartition", 1), ("notAutoPartition", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortAutoPartitionState.setStatus('mandatory')
ethPortSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortSQETest.setStatus('mandatory')
ethPortLastSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortLastSourceAddr.setStatus('mandatory')
ethPortUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("singleUser", 1), ("multiUser", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortUserStatus.setStatus('mandatory')
ethPortMainBusSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortMainBusSelection.setStatus('mandatory')
ethPortTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortTraffic.setStatus('mandatory')
ethPortFramesReceivedOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortFramesReceivedOK.setStatus('mandatory')
ethPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortRunts.setStatus('mandatory')
ethPortPacketErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortPacketErrors.setStatus('mandatory')
ethPortSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 18), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortSpecificOID.setStatus('mandatory')
ethPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortCollisions.setStatus('mandatory')
ethPortPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortPartitions.setStatus('mandatory')
ethPortPygmys = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethPortPygmys.setStatus('mandatory')
ethIntPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 4))
ethIntPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 4, 1), )
if mibBuilder.loadTexts: ethIntPortTable.setStatus('mandatory')
ethIntPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 4, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "ethIntPortGroupId"), (0, "FIBRONICS-MIB", "ethIntPortId"))
if mibBuilder.loadTexts: ethIntPortEntry.setStatus('mandatory')
ethIntPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntPortGroupId.setStatus('mandatory')
ethIntPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntPortId.setStatus('mandatory')
ethIntPortPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntPortPartition.setStatus('mandatory')
ethIntPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntPortJabber.setStatus('mandatory')
ethIntPortBackedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIntPortBackedUp.setStatus('mandatory')
ethBus = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5))
ethBusPerfTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1), )
if mibBuilder.loadTexts: ethBusPerfTable.setStatus('mandatory')
ethBusPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "ethBusPerfAgId"), (0, "FIBRONICS-MIB", "ethBusPerfId"))
if mibBuilder.loadTexts: ethBusPerfEntry.setStatus('mandatory')
ethBusPerfAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusPerfAgId.setStatus('mandatory')
ethBusPerfId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusPerfId.setStatus('mandatory')
ethBusTrafficBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTrafficBuffer.setStatus('mandatory')
ethBusTrafficThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethBusTrafficThresh.setStatus('mandatory')
ethBusPeakTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusPeakTraffic.setStatus('mandatory')
ethBusTotalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTotalCollisions.setStatus('mandatory')
ethBusTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTotalPackets.setStatus('mandatory')
ethBusTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTotalErrors.setStatus('mandatory')
ethBusTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusTraffic.setStatus('mandatory')
ethBusUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusUtilization.setStatus('mandatory')
ethBusPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusPeakUtilization.setStatus('mandatory')
ethBusClockTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 2), )
if mibBuilder.loadTexts: ethBusClockTable.setStatus('mandatory')
ethBusClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 2, 1), ).setIndexNames((0, "FIBRONICS-MIB", "ethBusClockBusId"), (0, "FIBRONICS-MIB", "ethBusClockId"))
if mibBuilder.loadTexts: ethBusClockEntry.setStatus('mandatory')
ethBusClockBusId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusClockBusId.setStatus('mandatory')
ethBusClockId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusClockId.setStatus('mandatory')
ethBusClockTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ok", 1), ("clockFailure", 2), ("busFailure", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusClockTestResult.setStatus('mandatory')
tokRing = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1))
tokRingTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1), )
if mibBuilder.loadTexts: tokRingTable.setStatus('mandatory')
tokRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "tokRingAgId"), (0, "FIBRONICS-MIB", "tokRingId"))
if mibBuilder.loadTexts: tokRingEntry.setStatus('mandatory')
tokRingAgId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingAgId.setStatus('mandatory')
tokRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingId.setStatus('mandatory')
tokRingLeftSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingLeftSlot.setStatus('mandatory')
tokRingRightSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingRightSlot.setStatus('mandatory')
tokRingTrafficBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingTrafficBuffer.setStatus('mandatory')
tokRingTrafficThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingTrafficThresh.setStatus('mandatory')
tokRingPeakTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingPeakTraffic.setStatus('mandatory')
tokRingNumberOfStations = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingNumberOfStations.setStatus('mandatory')
tokRingConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingConfiguration.setStatus('mandatory')
tokRingBeaconing = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingBeaconing.setStatus('mandatory')
tokRingBeaconingStation = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingBeaconingStation.setStatus('mandatory')
tokRingStationsMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingStationsMatch.setStatus('mandatory')
tokRingTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingTraffic.setStatus('mandatory')
tokRingSecurityMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("perPort", 1), ("perRing", 2), ("disabled", 3), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingSecurityMethod.setStatus('mandatory')
tokRingSecurityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingSecurityPolicy.setStatus('mandatory')
tokRingSecureAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokRingSecureAddr.setStatus('mandatory')
tokRingLastViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingLastViolation.setStatus('mandatory')
tokRingUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingUtilization.setStatus('mandatory')
tokRingPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokRingPeakUtilization.setStatus('mandatory')
tokGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2))
tokGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1), )
if mibBuilder.loadTexts: tokGroupTable.setStatus('mandatory')
tokGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "tokGroupId"))
if mibBuilder.loadTexts: tokGroupEntry.setStatus('mandatory')
tokGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupId.setStatus('mandatory')
tokGroupAutoRightLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupAutoRightLoop.setStatus('mandatory')
tokGroupAutoLeftLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupAutoLeftLoop.setStatus('mandatory')
tokGroupManRightLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupManRightLoop.setStatus('mandatory')
tokGroupManLeftLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupManLeftLoop.setStatus('mandatory')
tokGroupRightNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exist", 1), ("notExist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupRightNeighbor.setStatus('mandatory')
tokGroupLeftNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exist", 1), ("notExist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupLeftNeighbor.setStatus('mandatory')
tokGroupIOMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("single", 1), ("dualRingIn", 2), ("dualRingOut", 3), ("illegalMode", 4), ("lobe", 5), ("intRepeater", 6), ("star", 7), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupIOMode.setStatus('mandatory')
tokGroupBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("modeA", 1), ("modeB", 2), ("modeC", 3), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupBridgeMode.setStatus('mandatory')
tokGroupManLinkLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupManLinkLoop.setStatus('mandatory')
tokGroupManBusLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupManBusLoop.setStatus('mandatory')
tokGroupAutoLinkLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupAutoLinkLoop.setStatus('mandatory')
tokGroupAutoBusLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupAutoBusLoop.setStatus('mandatory')
tokGroupSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 1, 1, 14), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupSpecificOID.setStatus('mandatory')
tokGroupRingTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 2), )
if mibBuilder.loadTexts: tokGroupRingTable.setStatus('mandatory')
tokGroupRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 2, 1), ).setIndexNames((0, "FIBRONICS-MIB", "tokGroupRingGroupId"), (0, "FIBRONICS-MIB", "tokGroupRingId"))
if mibBuilder.loadTexts: tokGroupRingEntry.setStatus('mandatory')
tokGroupRingGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupRingGroupId.setStatus('mandatory')
tokGroupRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupRingId.setStatus('mandatory')
tokGroupRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("oneMegabit", 2), ("fourMegabit", 3), ("sixteenMegabit", 4), ("sixteenMgbEarly", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokGroupRingSpeed.setStatus('mandatory')
tokGroupRingInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInserted", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokGroupRingInserted.setStatus('mandatory')
tokPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3))
tokPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3, 1), )
if mibBuilder.loadTexts: tokPortTable.setStatus('mandatory')
tokPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "tokPortGroupId"), (0, "FIBRONICS-MIB", "tokPortId"))
if mibBuilder.loadTexts: tokPortEntry.setStatus('mandatory')
tokPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortGroupId.setStatus('mandatory')
tokPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortId.setStatus('mandatory')
tokPortBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokPortBypass.setStatus('mandatory')
tokPortConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("connected", 1), ("notConnected", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortConnected.setStatus('mandatory')
tokPortTCP = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokPortTCP.setStatus('mandatory')
tokPortCableFault = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortCableFault.setStatus('mandatory')
tokPortFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 255))).clone(namedValues=NamedValues(("ok", 1), ("rld", 2), ("tld", 4), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortFunctionalStatus.setStatus('mandatory')
tokPortLastSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortLastSourceAddr.setStatus('mandatory')
tokPortSpecificOID = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3, 1, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortSpecificOID.setStatus('mandatory')
tokPortRingSpeedError = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 13, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokPortRingSpeedError.setStatus('mandatory')
tsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 14, 1))
tsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 14, 1, 1), )
if mibBuilder.loadTexts: tsGroupTable.setStatus('mandatory')
tsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 14, 1, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "tsGroupId"))
if mibBuilder.loadTexts: tsGroupEntry.setStatus('mandatory')
tsGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 14, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsGroupId.setStatus('mandatory')
tsGroupLATStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsGroupLATStatus.setStatus('mandatory')
tsGroupOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 14, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("diagnostics", 1), ("diagnosticsFailure", 2), ("loading", 3), ("loadingFailure", 4), ("operational", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsGroupOperationMode.setStatus('mandatory')
ltalkPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 15, 1))
ltalkPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 15, 1, 1), )
if mibBuilder.loadTexts: ltalkPortTable.setStatus('mandatory')
ltalkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 15, 1, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "ltalkPortGroupId"), (0, "FIBRONICS-MIB", "ltalkPortId"))
if mibBuilder.loadTexts: ltalkPortEntry.setStatus('mandatory')
ltalkPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltalkPortGroupId.setStatus('mandatory')
ltalkPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltalkPortId.setStatus('mandatory')
ltalkPortTest = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltalkPortTest.setStatus('mandatory')
ltalkPortTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltalkPortTestResult.setStatus('mandatory')
ltalkPortJam = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 15, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltalkPortJam.setStatus('mandatory')
clGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 1))
clGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 1, 1), )
if mibBuilder.loadTexts: clGroupTable.setStatus('mandatory')
clGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 1, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "clGroupId"))
if mibBuilder.loadTexts: clGroupEntry.setStatus('mandatory')
clGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clGroupId.setStatus('mandatory')
clGroupClockRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clGroupClockRedundancy.setStatus('mandatory')
clGroupMainClock = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clGroupMainClock.setStatus('mandatory')
clGroupTestClocks = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clGroupTestClocks.setStatus('mandatory')
clPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 2))
clPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 2, 1), )
if mibBuilder.loadTexts: clPortTable.setStatus('mandatory')
clPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 2, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "clPortGroupId"), (0, "FIBRONICS-MIB", "clPortId"))
if mibBuilder.loadTexts: clPortEntry.setStatus('mandatory')
clPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPortGroupId.setStatus('mandatory')
clPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPortId.setStatus('mandatory')
clPortFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 16, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPortFunctionalStatus.setStatus('mandatory')
lBoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 17, 1))
lUnknownBoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 17, 1, 1))
lLET18BoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 17, 1, 2))
lLET3BoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 17, 1, 3))
lLET36BoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 17, 1, 4))
lLET18EBoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 17, 1, 5))
lLERT40BoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 17, 1, 6))
lLET10BoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 17, 1, 7))
lFDX100BoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 17, 1, 8))
lSTACKBoxOID = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 17, 1, 9))
iwb = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 1))
iwr = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2))
itr = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3))
iwrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2, 1), )
if mibBuilder.loadTexts: iwrGroupTable.setStatus('mandatory')
iwrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "iwrGroupId"))
if mibBuilder.loadTexts: iwrGroupEntry.setStatus('mandatory')
iwrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrGroupId.setStatus('mandatory')
iwrOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("run", 1), ("boot", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrOperState.setStatus('mandatory')
iwrPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrPMState.setStatus('mandatory')
iwrIOMState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrIOMState.setStatus('mandatory')
iwrWANTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2, 2), )
if mibBuilder.loadTexts: iwrWANTable.setStatus('mandatory')
iwrWANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2, 2, 1), ).setIndexNames((0, "FIBRONICS-MIB", "iwrWANGroupId"), (0, "FIBRONICS-MIB", "iwrWANPortId"))
if mibBuilder.loadTexts: iwrWANEntry.setStatus('mandatory')
iwrWANGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrWANGroupId.setStatus('mandatory')
iwrWANPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrWANPortId.setStatus('mandatory')
iwrWANConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrWANConnection.setStatus('mandatory')
iwrWANPortCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x21", 1), ("rs232", 2), ("v35", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iwrWANPortCableType.setStatus('mandatory')
itrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 1), )
if mibBuilder.loadTexts: itrGroupTable.setStatus('mandatory')
itrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "itrGroupId"))
if mibBuilder.loadTexts: itrGroupEntry.setStatus('mandatory')
itrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrGroupId.setStatus('mandatory')
itrMainSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrMainSWVersion.setStatus('mandatory')
itrConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrConfigState.setStatus('mandatory')
itrModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("oper", 1), ("load", 2), ("setup", 3), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrModuleState.setStatus('mandatory')
itrLinkTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2), )
if mibBuilder.loadTexts: itrLinkTable.setStatus('mandatory')
itrLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2, 1), ).setIndexNames((0, "FIBRONICS-MIB", "itrLinkGroupId"), (0, "FIBRONICS-MIB", "itrLinkPortId"))
if mibBuilder.loadTexts: itrLinkEntry.setStatus('mandatory')
itrLinkGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkGroupId.setStatus('mandatory')
itrLinkPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkPortId.setStatus('mandatory')
itrLinkIf = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("v11", 1), ("v24", 2), ("v35", 3), ("dte-dce", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkIf.setStatus('mandatory')
itrLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("async", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkMode.setStatus('mandatory')
itrLinkAsyncRate = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 255))).clone(namedValues=NamedValues(("r2400", 1), ("r4800", 2), ("r9600", 3), ("r14400", 4), ("r19200", 5), ("r38400", 6), ("r56000", 7), ("r57600", 8), ("r64000", 9), ("r112000", 10), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkAsyncRate.setStatus('mandatory')
itrLinkSyncRate = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 255))).clone(namedValues=NamedValues(("r1200", 1), ("r2400", 2), ("r4800", 3), ("r9600", 4), ("r14400", 5), ("r19200", 6), ("r38400", 7), ("r48000", 8), ("r56000", 9), ("r57600", 10), ("r64000", 11), ("r112000", 12), ("r128000", 13), ("r256000", 14), ("r384000", 15), ("r512000", 16), ("r786000", 17), ("r1024000", 18), ("r1544000", 19), ("r2048000", 20), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkSyncRate.setStatus('mandatory')
itrLinkParity = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkParity.setStatus('mandatory')
itrLinkParityEvenOdd = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkParityEvenOdd.setStatus('mandatory')
itrLinkStopBit = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("none", 3), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: itrLinkStopBit.setStatus('mandatory')
itrLinkRemoteLANConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkRemoteLANConn.setStatus('mandatory')
itrLinkFunctionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 21, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("noRxClk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: itrLinkFunctionalStatus.setStatus('mandatory')
lse = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1))
lseGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1), )
if mibBuilder.loadTexts: lseGroupTable.setStatus('mandatory')
lseGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "lseGroupId"))
if mibBuilder.loadTexts: lseGroupEntry.setStatus('mandatory')
lseGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseGroupId.setStatus('mandatory')
lseGroupFastOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupFastOpen.setStatus('mandatory')
lseGroup10MSqlt = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroup10MSqlt.setStatus('mandatory')
lseGroupSmartSqlt = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupSmartSqlt.setStatus('mandatory')
lseGroupCParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupCParameter.setStatus('mandatory')
lseGroupIPGJamLength = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 112))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupIPGJamLength.setStatus('mandatory')
lseGroupJamLength = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupJamLength.setStatus('mandatory')
lseGroupDataBlinderLength = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(48, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupDataBlinderLength.setStatus('mandatory')
lseGroupIPGDataLength = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(48, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupIPGDataLength.setStatus('mandatory')
lseGroupActiveMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseGroupActiveMonitor.setStatus('mandatory')
lseGroupBackBone = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupBackBone.setStatus('mandatory')
lseGroupSetDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseGroupSetDefaults.setStatus('mandatory')
lseIntPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2))
lseIntPortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1), )
if mibBuilder.loadTexts: lseIntPortTable.setStatus('mandatory')
lseIntPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "lseIntPortGroupId"), (0, "FIBRONICS-MIB", "lseIntPortId"))
if mibBuilder.loadTexts: lseIntPortEntry.setStatus('mandatory')
lseIntPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortGroupId.setStatus('mandatory')
lseIntPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortId.setStatus('mandatory')
lseIntPortIOMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortIOMode.setStatus('mandatory')
lseIntPortResetSwitchCAM = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortResetSwitchCAM.setStatus('mandatory')
lseIntPortVideoPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortVideoPacket.setStatus('mandatory')
lseIntPortPriorityStateMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortPriorityStateMachine.setStatus('mandatory')
lseIntPortActiveBroadcastPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortActiveBroadcastPriority.setStatus('mandatory')
lseIntPortPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("broadcast", 1), ("multicast", 2), ("video", 3), ("regular", 4), ("default", 5), ("mngrTerminal", 6), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortPriorityLevel.setStatus('mandatory')
lseIntPortSuperPriorityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortSuperPriorityEnable.setStatus('mandatory')
lseIntPortRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("generic", 1), ("net", 2), ("dstPort", 3), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRoutingMode.setStatus('mandatory')
lseIntPortGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortGlobal.setStatus('mandatory')
lseIntPortLearnIOCAM = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortLearnIOCAM.setStatus('mandatory')
lseIntPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortSecurity.setStatus('mandatory')
lseIntPortIgnoreBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortIgnoreBusy.setStatus('mandatory')
lseIntPortRetryPriorityLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRetryPriorityLevel1.setStatus('mandatory')
lseIntPortRetryPriorityLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRetryPriorityLevel2.setStatus('mandatory')
lseIntPortRetryPriorityLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRetryPriorityLevel3.setStatus('mandatory')
lseIntPortIgnoreProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("ignore", 1), ("not-ignore", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortIgnoreProtocolType.setStatus('mandatory')
lseIntPortCompanyMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortCompanyMAC.setStatus('mandatory')
lseIntPortTxSafetyZone = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortTxSafetyZone.setStatus('mandatory')
lseIntPortRxSafetyZone = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortRxSafetyZone.setStatus('mandatory')
lseIntPortTxBurstLength = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortTxBurstLength.setStatus('mandatory')
lseIntPortSecurityIntruder = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortSecurityIntruder.setStatus('mandatory')
lseIntPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lseIntPortJabber.setStatus('mandatory')
lseIntPortCAM = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(56, 56)).setFixedLength(56)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortCAM.setStatus('mandatory')
lseIntPortVideoStateMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortVideoStateMachine.setStatus('mandatory')
lseIntPortTransmitWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lseIntPortTransmitWeight.setStatus('mandatory')
lsePort = MibIdentifier((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 3))
lsePortTable = MibTable((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 3, 1), )
if mibBuilder.loadTexts: lsePortTable.setStatus('mandatory')
lsePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 3, 1, 1), ).setIndexNames((0, "FIBRONICS-MIB", "lsePortGroupId"), (0, "FIBRONICS-MIB", "lsePortId"))
if mibBuilder.loadTexts: lsePortEntry.setStatus('mandatory')
lsePortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsePortGroupId.setStatus('mandatory')
lsePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lsePortId.setStatus('mandatory')
lsePortPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 22, 101, 2, 2, 19, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notSupported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsePortPolarity.setStatus('mandatory')
mibBuilder.exportSymbols("FIBRONICS-MIB", chGenAgAddr=chGenAgAddr, tokRingPeakTraffic=tokRingPeakTraffic, tokRingSecureAddr=tokRingSecureAddr, chHWPSUTable=chHWPSUTable, genPortSecurityPolicy=genPortSecurityPolicy, lLERT40BoxOID=lLERT40BoxOID, itrLinkPortId=itrLinkPortId, chMgrMngmtState=chMgrMngmtState, chHWIntTempWarning=chHWIntTempWarning, genGroupNumberOfIntPorts=genGroupNumberOfIntPorts, iwrGroupTable=iwrGroupTable, chFbrAgTempThreshTraps=chFbrAgTempThreshTraps, tokRingTraffic=tokRingTraffic, tokGroupRingTable=tokGroupRingTable, tsGroupOperationMode=tsGroupOperationMode, lseGroupIPGJamLength=lseGroupIPGJamLength, lseIntPortSecurityIntruder=lseIntPortSecurityIntruder, tokGroupEntry=tokGroupEntry, chFbrAgSensorFault=chFbrAgSensorFault, ethGroupTable=ethGroupTable, tokGroupRingId=tokGroupRingId, lseIntPortTxSafetyZone=lseIntPortTxSafetyZone, lseGroupSetDefaults=lseGroupSetDefaults, lseGroupEntry=lseGroupEntry, ethBusTotalErrors=ethBusTotalErrors, tsGroupEntry=tsGroupEntry, lseGroupTable=lseGroupTable, lsePortId=lsePortId, tokPortTCP=tokPortTCP, genGroupTable=genGroupTable, ethGroupId=ethGroupId, genGroupInterProcCommStatus=genGroupInterProcCommStatus, deviceMgr=deviceMgr, lLET10BoxOID=lLET10BoxOID, itrGroupEntry=itrGroupEntry, clGroupMainClock=clGroupMainClock, tokGroupManLinkLoop=tokGroupManLinkLoop, genGroupHWStatus=genGroupHWStatus, softRedundancyName=softRedundancyName, tokGroupAutoLeftLoop=tokGroupAutoLeftLoop, ethIntPortPartition=ethIntPortPartition, ethGroup10BTPlus=ethGroup10BTPlus, lseIntPortIgnoreProtocolType=lseIntPortIgnoreProtocolType, tokGroupAutoRightLoop=tokGroupAutoRightLoop, lsePortPolarity=lsePortPolarity, genIntPortGroupId=genIntPortGroupId, chFbrAgBootVersion=chFbrAgBootVersion, chHWPSUId=chHWPSUId, itrLinkAsyncRate=itrLinkAsyncRate, ethIntPortBackedUp=ethIntPortBackedUp, ltalkPortGroupId=ltalkPortGroupId, chNumberOfTRBuses=chNumberOfTRBuses, clGroupTable=clGroupTable, chFbrAgPermMngrId=chFbrAgPermMngrId, iwrIOMState=iwrIOMState, chFbrAgInterProcFaultTraps=chFbrAgInterProcFaultTraps, itrLinkRemoteLANConn=itrLinkRemoteLANConn, ltalkPort=ltalkPort, tokGroupRingGroupId=tokGroupRingGroupId, lseIntPortId=lseIntPortId, genPortIntPortConnection=genPortIntPortConnection, genIntPort=genIntPort, lseIntPortVideoStateMachine=lseIntPortVideoStateMachine, chFbrAgSpecificOID=chFbrAgSpecificOID, ethBusPerfId=ethBusPerfId, lseGroupCParameter=lseGroupCParameter, lSTACKBoxOID=lSTACKBoxOID, genPortActivityStatus=genPortActivityStatus, lLET18EBoxOID=lLET18EBoxOID, lseIntPortPriorityLevel=lseIntPortPriorityLevel, iwrOperState=iwrOperState, itr=itr, lseIntPortResetSwitchCAM=lseIntPortResetSwitchCAM, ethPortCollisions=ethPortCollisions, itrMainSWVersion=itrMainSWVersion, ethAgTable=ethAgTable, tsGroup=tsGroup, ltalkPortTest=ltalkPortTest, lFDX100BoxOID=lFDX100BoxOID, lseIntPortGlobal=lseIntPortGlobal, ethIntPortGroupId=ethIntPortGroupId, clGroupClockRedundancy=clGroupClockRedundancy, chFbrAgHubEnrollTraps=chFbrAgHubEnrollTraps, ethPortFramesReceivedOK=ethPortFramesReceivedOK, bRouter=bRouter, tokGroupId=tokGroupId, lseIntPortTransmitWeight=lseIntPortTransmitWeight, chFbrAgSoftFaultTraps=chFbrAgSoftFaultTraps, lBoxOID=lBoxOID, ethPortPartitions=ethPortPartitions, ethPortLastSourceAddr=ethPortLastSourceAddr, tokGroupRingEntry=tokGroupRingEntry, chFbrAgIntTemp=chFbrAgIntTemp, genGroupEntry=genGroupEntry, chFbrAgSWFault=chFbrAgSWFault, clPortEntry=clPortEntry, tokGroupTable=tokGroupTable, chGenAgTable=chGenAgTable, softRedundancyId=softRedundancyId, chFbrAgRmtNetMask=chFbrAgRmtNetMask, chFbrAgRmtNetAddr=chFbrAgRmtNetAddr, genIntPortSpecificOID=genIntPortSpecificOID, tokGroupRightNeighbor=tokGroupRightNeighbor, ethGroupMJLPStatus=ethGroupMJLPStatus, lseIntPortCAM=lseIntPortCAM, genIntPortBusConnNumber=genIntPortBusConnNumber, tokPortRingSpeedError=tokPortRingSpeedError, chFbrAgGroupEnrollDeenrollTraps=chFbrAgGroupEnrollDeenrollTraps, probe=probe, tokGroupAutoBusLoop=tokGroupAutoBusLoop, ethPortManPart=ethPortManPart, chMgr=chMgr, ethPortRunts=ethPortRunts, chHWPSULocation=chHWPSULocation, tokPortTable=tokPortTable, lseIntPortEntry=lseIntPortEntry, ethPortMainBusSelection=ethPortMainBusSelection, tsGroupId=tsGroupId, ethBusClockTestResult=ethBusClockTestResult, genGroupSWVersion=genGroupSWVersion, ethPortNoAUILoop=ethPortNoAUILoop, lsePortEntry=lsePortEntry, iwrWANGroupId=iwrWANGroupId, genGroupType=genGroupType, tokPortBypass=tokPortBypass, clPortId=clPortId, genGroupRedun12=genGroupRedun12, lseGroupSmartSqlt=lseGroupSmartSqlt, chFbrAgMaxNmbOfMngrs=chFbrAgMaxNmbOfMngrs, itrGroupId=itrGroupId, genGroupIntTemp=genGroupIntTemp, ethGroupBackupBus=ethGroupBackupBus, ethGroupFIFO=ethGroupFIFO, chFbrAgKernelVersion=chFbrAgKernelVersion, tokRingSecurityPolicy=tokRingSecurityPolicy, genIntPortAdminStatus=genIntPortAdminStatus, lseGroupDataBlinderLength=lseGroupDataBlinderLength, ts=ts, tokRingBeaconingStation=tokRingBeaconingStation, chHWType=chHWType, lUnknownBoxOID=lUnknownBoxOID, genGroupId=genGroupId, softRedundancyPortId1=softRedundancyPortId1, iwb=iwb, genIntPortBusConnType=genIntPortBusConnType, lLET3BoxOID=lLET3BoxOID, lseIntPortRoutingMode=lseIntPortRoutingMode, eth=eth, genIntPortId=genIntPortId, tokPortLastSourceAddr=tokPortLastSourceAddr, ethGroup=ethGroup, clGroupEntry=clGroupEntry, chHW=chHW, softRedundancyPortId2=softRedundancyPortId2, tokGroupLeftNeighbor=tokGroupLeftNeighbor, tokRingConfiguration=tokRingConfiguration, lseGroupJamLength=lseGroupJamLength, ethIntPortEntry=ethIntPortEntry, chFbrAgRmtNetTable=chFbrAgRmtNetTable, chReset=chReset, cl=cl, tokRingNumberOfStations=tokRingNumberOfStations, ethBusPerfAgId=ethBusPerfAgId, chGenAgId=chGenAgId, itrLinkTable=itrLinkTable, genIntPortEntry=genIntPortEntry, ethPortTraffic=ethPortTraffic, genPortId=genPortId, chFbrAgPermMngrEntry=chFbrAgPermMngrEntry, fibronics=fibronics, tokPortSpecificOID=tokPortSpecificOID, genIntPortActivityStatus=genIntPortActivityStatus, lseIntPortCompanyMAC=lseIntPortCompanyMAC, genGroupRedun13_14=genGroupRedun13_14, tokRingId=tokRingId, tokGroupManBusLoop=tokGroupManBusLoop, iwrWANPortId=iwrWANPortId, chFbrAgReset=chFbrAgReset, tokGroupAutoLinkLoop=tokGroupAutoLinkLoop, genGroupDescr=genGroupDescr, tokPortConnected=tokPortConnected, chFbrAgSLIPAddress=chFbrAgSLIPAddress, chFbrAgMgmtBusSelection=chFbrAgMgmtBusSelection, chMgrTrapRepStatus=chMgrTrapRepStatus, ethGroupSpecificOID=ethGroupSpecificOID, genGroupAutoMan=genGroupAutoMan, ethPortAutoPartitionState=ethPortAutoPartitionState, ethPortSpecificOID=ethPortSpecificOID, ethPortSQETest=ethPortSQETest, ethBusTraffic=ethBusTraffic, iwrGroupEntry=iwrGroupEntry, chNumberOfSlots=chNumberOfSlots, lseIntPortJabber=lseIntPortJabber, iwr=iwr, itrModuleState=itrModuleState, clGroup=clGroup, chFbrAgTable=chFbrAgTable, chFbrAgSetup=chFbrAgSetup, tokGroupRingSpeed=tokGroupRingSpeed, softRedundancyTable=softRedundancyTable, tokPortId=tokPortId, lseGroupBackBone=lseGroupBackBone, ethBusPerfEntry=ethBusPerfEntry, ethBusClockEntry=ethBusClockEntry, tokPortCableFault=tokPortCableFault, fbrStack=fbrStack, chGenAgSpecificOID=chGenAgSpecificOID, iwrWANEntry=iwrWANEntry, lseIntPortTxBurstLength=lseIntPortTxBurstLength, tokRingAgId=tokRingAgId, ethBusClockId=ethBusClockId, chHWIntTempThresh=chHWIntTempThresh, ethBusPeakTraffic=ethBusPeakTraffic, fbr2=fbr2, ethBusTrafficThresh=ethBusTrafficThresh, iwrWANPortCableType=iwrWANPortCableType, fbrSecurity=fbrSecurity, ethIntPort=ethIntPort, ethAg=ethAg, chFbrAgSoftwareStatus=chFbrAgSoftwareStatus, chFbrAgConfigurationSymbol=chFbrAgConfigurationSymbol, genGroupReset=genGroupReset, chNumberOfFDDIBuses=chNumberOfFDDIBuses, chFbrAgFaultTraps=chFbrAgFaultTraps, chFbrAgCommDebugMode=chFbrAgCommDebugMode, fbrLanSwitch=fbrLanSwitch, itrLinkIf=itrLinkIf, itrLinkFunctionalStatus=itrLinkFunctionalStatus, ethBusPerfTable=ethBusPerfTable, ethPortFunctionalStatus=ethPortFunctionalStatus, chGenAgMgmtIfType=chGenAgMgmtIfType, lseIntPortIOMode=lseIntPortIOMode, ethPortId=ethPortId, lseIntPortRxSafetyZone=lseIntPortRxSafetyZone, tokPortFunctionalStatus=tokPortFunctionalStatus, fbrOID=fbrOID, softRedundancyGroupId1=softRedundancyGroupId1, tokPortGroupId=tokPortGroupId, ethGroupSingleBusMode=ethGroupSingleBusMode, tokRingTrafficBuffer=tokRingTrafficBuffer, chNumberOfEthernetBuses=chNumberOfEthernetBuses, genPortAdminStatus=genPortAdminStatus, ethAgId=ethAgId, genGroupKernelVersion=genGroupKernelVersion, ethIntPortTable=ethIntPortTable, ethGroupBackboneMode=ethGroupBackboneMode, ethAgEntry=ethAgEntry, lseIntPortRetryPriorityLevel3=lseIntPortRetryPriorityLevel3, tokRingLeftSlot=tokRingLeftSlot, genGroupRedun34=genGroupRedun34, tokRingUtilization=tokRingUtilization, genPortGroupId=genPortGroupId, tokRingStationsMatch=tokRingStationsMatch, genGroup=genGroup)
mibBuilder.exportSymbols("FIBRONICS-MIB", softRedundancyGroupId2=softRedundancyGroupId2, ethPortMJLP=ethPortMJLP, tokRingBeaconing=tokRingBeaconing, genPortDescr=genPortDescr, lseIntPortTable=lseIntPortTable, lseIntPortActiveBroadcastPriority=lseIntPortActiveBroadcastPriority, tsGroupTable=tsGroupTable, tokGroupBridgeMode=tokGroupBridgeMode, chFbrAgSensorFaultTraps=chFbrAgSensorFaultTraps, ethIntPortId=ethIntPortId, ethBusTotalCollisions=ethBusTotalCollisions, chHWPeakIntTemp=chHWPeakIntTemp, clPortTable=clPortTable, lseIntPortRetryPriorityLevel2=lseIntPortRetryPriorityLevel2, ethBusTrafficBuffer=ethBusTrafficBuffer, ltalk=ltalk, chHWPSUEntry=chHWPSUEntry, lseGroupFastOpen=lseGroupFastOpen, chFbrAgInterProcFault=chFbrAgInterProcFault, tsGroupLATStatus=tsGroupLATStatus, tokRing=tokRing, tokRingSecurityMethod=tokRingSecurityMethod, genPortFunctionality=genPortFunctionality, ethBusClockTable=ethBusClockTable, lsePortGroupId=lsePortGroupId, tokGroupSpecificOID=tokGroupSpecificOID, iwrWANTable=iwrWANTable, tokRingEntry=tokRingEntry, clPort=clPort, lseIntPortVideoPacket=lseIntPortVideoPacket, itrLinkEntry=itrLinkEntry, ethBusTotalPackets=ethBusTotalPackets, ethGroupFOIRLPlusMode=ethGroupFOIRLPlusMode, ethGroupMasterClock=ethGroupMasterClock, chFbrAgPermMngrTable=chFbrAgPermMngrTable, tokGroupIOMode=tokGroupIOMode, chHWPSUVoltage=chHWPSUVoltage, lLET36BoxOID=lLET36BoxOID, itrGroupTable=itrGroupTable, itrLinkMode=itrLinkMode, ethPortTable=ethPortTable, ethPortEntry=ethPortEntry, tokRingTable=tokRingTable, tokGroupRingInserted=tokGroupRingInserted, genPort=genPort, tokGroup=tokGroup, ltalkPortId=ltalkPortId, lseIntPortPriorityStateMachine=lseIntPortPriorityStateMachine, ethGroupIdleTrx=ethGroupIdleTrx, chFbrAgLastAddrConfig=chFbrAgLastAddrConfig, tokRingLastViolation=tokRingLastViolation, fbr101=fbr101, itrConfigState=itrConfigState, genGroupConfigurationSymbol=genGroupConfigurationSymbol, lseGroupActiveMonitor=lseGroupActiveMonitor, genPortSpecificOID=genPortSpecificOID, lseIntPortIgnoreBusy=lseIntPortIgnoreBusy, lse=lse, genGroupCommStatus=genGroupCommStatus, ethBusClockBusId=ethBusClockBusId, genGroupFullConfig=genGroupFullConfig, lseGroupIPGDataLength=lseGroupIPGDataLength, clGroupTestClocks=clGroupTestClocks, chFbrAgCoprocSWVersion=chFbrAgCoprocSWVersion, chFbrAgCoprocCommStatus=chFbrAgCoprocCommStatus, tokRingRightSlot=tokRingRightSlot, chFbrAgMaxNmbOfNets=chFbrAgMaxNmbOfNets, itrLinkStopBit=itrLinkStopBit, softRedundancy=softRedundancy, tokGroupManRightLoop=tokGroupManRightLoop, chFullConfig=chFullConfig, lsePort=lsePort, softRedundancyStatus=softRedundancyStatus, chSlotLastChange=chSlotLastChange, chFbrAgId=chFbrAgId, genGroupSpecificOID=genGroupSpecificOID, ethPort=ethPort, chHWPSUActivityStatus=chHWPSUActivityStatus, ethPortJabber=ethPortJabber, genPortEntry=genPortEntry, lseGroupId=lseGroupId, genIntPortTable=genIntPortTable, itrLinkParity=itrLinkParity, lseIntPortSecurity=lseIntPortSecurity, tok=tok, lseIntPortLearnIOCAM=lseIntPortLearnIOCAM, clPortGroupId=clPortGroupId, lseIntPortSuperPriorityEnable=lseIntPortSuperPriorityEnable, chFbrAgConfigChangeTraps=chFbrAgConfigChangeTraps, ethPortPygmys=ethPortPygmys, ethGroup10FBPlus=ethGroup10FBPlus, genGroupSupplyVoltageFault=genGroupSupplyVoltageFault, lsePortTable=lsePortTable, ethIntPortJabber=ethIntPortJabber, chNumberOfLocalTalkBuses=chNumberOfLocalTalkBuses, ethBus=ethBus, genGroupLastChange=genGroupLastChange, lseIntPort=lseIntPort, chFbrAgDateTime=chFbrAgDateTime, ltalkPortTable=ltalkPortTable, tokPort=tokPort, iwrPMState=iwrPMState, itrLinkSyncRate=itrLinkSyncRate, lseIntPortGroupId=lseIntPortGroupId, ltalkPortEntry=ltalkPortEntry, genIntPortMonitorMode=genIntPortMonitorMode, clGroupId=clGroupId, ethGroupEntry=ethGroupEntry, chFbrAgSWVersion=chFbrAgSWVersion, chFbrAgEntry=chFbrAgEntry, ethAgPerfBusSelection=ethAgPerfBusSelection, tokGroupManLeftLoop=tokGroupManLeftLoop, ethPortGroupId=ethPortGroupId, chAg=chAg, chFbrAgSecAddrConfig=chFbrAgSecAddrConfig, chFbrAgPermMngrAddr=chFbrAgPermMngrAddr, ethBusPeakUtilization=ethBusPeakUtilization, chGenAgEntry=chGenAgEntry, itrLinkGroupId=itrLinkGroupId, genGroupNumberOfPorts=genGroupNumberOfPorts, tokRingPeakUtilization=tokRingPeakUtilization, itrLinkParityEvenOdd=itrLinkParityEvenOdd, ltalkPortJam=ltalkPortJam, softRedundancyEntry=softRedundancyEntry, ethBusUtilization=ethBusUtilization, genPortSecureAddresses=genPortSecureAddresses, chGenAgType=chGenAgType, iwrWANConnection=iwrWANConnection, genGroupStandAloneMode=genGroupStandAloneMode, genPortType=genPortType, chMgrPollInterval=chMgrPollInterval, chFbrAgRmtNetEntry=chFbrAgRmtNetEntry, clPortFunctionalStatus=clPortFunctionalStatus, ltalkPortTestResult=ltalkPortTestResult, chFbrAgRmtNetId=chFbrAgRmtNetId, genPortTable=genPortTable, ethGroupIntPortsRedundancy=ethGroupIntPortsRedundancy, chassis=chassis, ethPortUserStatus=ethPortUserStatus, tokRingTrafficThresh=tokRingTrafficThresh, iwrGroupId=iwrGroupId, lseIntPortRetryPriorityLevel1=lseIntPortRetryPriorityLevel1, ethPortFIFO=ethPortFIFO, lLET18BoxOID=lLET18BoxOID, ethGroupWrongPortSelection=ethGroupWrongPortSelection, chMgrContPerfRep=chMgrContPerfRep, ethPortPacketErrors=ethPortPacketErrors, chFbrAgTrafficThreshTraps=chFbrAgTrafficThreshTraps, lseGroup10MSqlt=lseGroup10MSqlt, tokPortEntry=tokPortEntry)

# SNMP MIB module (STMIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/STMIB
# Produced by pysmi-1.5.4 at Mon Oct 14 22:58:00 2024
# On host MacBook-Pro.local platform Darwin version 24.0.0 by user lextm
# Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DisplayString,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions



class NodeAddr(OctetString):
    """Custom type NodeAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )





class NestAddr(OctetString):
    """Custom type NestAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )





class SlotAddr(OctetString):
    """Custom type SlotAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )





class PortAddr(OctetString):
    """Custom type PortAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )





class Ad10PortAddr(OctetString):
    """Custom type Ad10PortAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )





class AsmX50CkAddr(OctetString):
    """Custom type AsmX50CkAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )





class RtmAdPortAddr(OctetString):
    """Custom type RtmAdPortAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )





class BundleAddr(OctetString):
    """Custom type BundleAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )





class ChannelAddr(OctetString):
    """Custom type ChannelAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )





class ChannelStatusAddr(OctetString):
    """Custom type ChannelStatusAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(9, 9),
    )





class RecordIndex(OctetString):
    """Custom type RecordIndex based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )





class AlarmRecord(OctetString):
    """Custom type AlarmRecord based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(64, 64),
    )





class Link2Index(OctetString):
    """Custom type Link2Index based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )





class Link2Addr(OctetString):
    """Custom type Link2Addr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )




# TEXTUAL-CONVENTIONS



# MIB Managed Objects in the order of their OIDs

_Timeplex_ObjectIdentity = ObjectIdentity
timeplex = _Timeplex_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16)
)
_Synchrony_ObjectIdentity = ObjectIdentity
synchrony = _Synchrony_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101)
)
_St50_ObjectIdentity = ObjectIdentity
st50 = _St50_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1)
)
_Security_ObjectIdentity = ObjectIdentity
security = _Security_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1)
)
_ScPartitionHeader_ObjectIdentity = ObjectIdentity
scPartitionHeader = _ScPartitionHeader_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 1)
)


class _ScPartitionControl_Type(Integer32):
    """Custom type scPartitionControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalidateCRC", 2),
          ("validateCRC", 1))
    )


_ScPartitionControl_Type.__name__ = "Integer32"
_ScPartitionControl_Object = MibScalar
scPartitionControl = _ScPartitionControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 1, 1),
    _ScPartitionControl_Type()
)
scPartitionControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scPartitionControl.setStatus("mandatory")


class _ScPartitionCRCCheck_Type(Integer32):
    """Custom type scPartitionCRCCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("succeed", 1))
    )


_ScPartitionCRCCheck_Type.__name__ = "Integer32"
_ScPartitionCRCCheck_Object = MibScalar
scPartitionCRCCheck = _ScPartitionCRCCheck_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 1, 2),
    _ScPartitionCRCCheck_Type()
)
scPartitionCRCCheck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scPartitionCRCCheck.setStatus("mandatory")


class _ScPartitionFlushMode_Type(Integer32):
    """Custom type scPartitionFlushMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_ScPartitionFlushMode_Type.__name__ = "Integer32"
_ScPartitionFlushMode_Object = MibScalar
scPartitionFlushMode = _ScPartitionFlushMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 1, 3),
    _ScPartitionFlushMode_Type()
)
scPartitionFlushMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scPartitionFlushMode.setStatus("mandatory")
_ScSystemProfile_ObjectIdentity = ObjectIdentity
scSystemProfile = _ScSystemProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2)
)


class _ScSysNodeUpdate_Type(Integer32):
    """Custom type scSysNodeUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_ScSysNodeUpdate_Type.__name__ = "Integer32"
_ScSysNodeUpdate_Object = MibScalar
scSysNodeUpdate = _ScSysNodeUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 1),
    _ScSysNodeUpdate_Type()
)
scSysNodeUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scSysNodeUpdate.setStatus("mandatory")


class _ScSysNodeControl_Type(Integer32):
    """Custom type scSysNodeControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("invalidateDatabase", 2),
          ("resetNode", 3),
          ("updateCpiProfile", 5),
          ("updateThroughput", 4),
          ("validateDatabase", 1))
    )


_ScSysNodeControl_Type.__name__ = "Integer32"
_ScSysNodeControl_Object = MibScalar
scSysNodeControl = _ScSysNodeControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 2),
    _ScSysNodeControl_Type()
)
scSysNodeControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scSysNodeControl.setStatus("mandatory")
_ScSysNodeNumber_Type = NodeAddr
_ScSysNodeNumber_Object = MibScalar
scSysNodeNumber = _ScSysNodeNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 3),
    _ScSysNodeNumber_Type()
)
scSysNodeNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSysNodeNumber.setStatus("mandatory")


class _ScSysNodeDate_Type(DisplayString):
    """Custom type scSysNodeDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_ScSysNodeDate_Type.__name__ = "DisplayString"
_ScSysNodeDate_Object = MibScalar
scSysNodeDate = _ScSysNodeDate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 4),
    _ScSysNodeDate_Type()
)
scSysNodeDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSysNodeDate.setStatus("mandatory")


class _ScSysNodeTime_Type(DisplayString):
    """Custom type scSysNodeTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_ScSysNodeTime_Type.__name__ = "DisplayString"
_ScSysNodeTime_Object = MibScalar
scSysNodeTime = _ScSysNodeTime_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 5),
    _ScSysNodeTime_Type()
)
scSysNodeTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSysNodeTime.setStatus("mandatory")


class _ScSysNodeType_Type(Integer32):
    """Custom type scSysNodeType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dedicatedNode", 2),
          ("rootNode", 1),
          ("sharedNode", 3))
    )


_ScSysNodeType_Type.__name__ = "Integer32"
_ScSysNodeType_Object = MibScalar
scSysNodeType = _ScSysNodeType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 6),
    _ScSysNodeType_Type()
)
scSysNodeType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSysNodeType.setStatus("mandatory")


class _ScSysNodePartitionID_Type(Integer32):
    """Custom type scSysNodePartitionID based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_ScSysNodePartitionID_Type.__name__ = "Integer32"
_ScSysNodePartitionID_Object = MibScalar
scSysNodePartitionID = _ScSysNodePartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 7),
    _ScSysNodePartitionID_Type()
)
scSysNodePartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSysNodePartitionID.setStatus("mandatory")


class _ScSysNodeMasterClockPriority_Type(Integer32):
    """Custom type scSysNodeMasterClockPriority based on Integer32"""
    defaultValue = 17

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("master1", 1),
          ("master10", 10),
          ("master11", 11),
          ("master12", 12),
          ("master13", 13),
          ("master14", 14),
          ("master15", 15),
          ("master16", 16),
          ("master2", 2),
          ("master3", 3),
          ("master4", 4),
          ("master5", 5),
          ("master6", 6),
          ("master7", 7),
          ("master8", 8),
          ("master9", 9),
          ("slave", 17))
    )


_ScSysNodeMasterClockPriority_Type.__name__ = "Integer32"
_ScSysNodeMasterClockPriority_Object = MibScalar
scSysNodeMasterClockPriority = _ScSysNodeMasterClockPriority_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 8),
    _ScSysNodeMasterClockPriority_Type()
)
scSysNodeMasterClockPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSysNodeMasterClockPriority.setStatus("mandatory")


class _ScSysNodeMasterClockList_Type(OctetString):
    """Custom type scSysNodeMasterClockList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(32, 32),
    )


_ScSysNodeMasterClockList_Type.__name__ = "OctetString"
_ScSysNodeMasterClockList_Object = MibScalar
scSysNodeMasterClockList = _ScSysNodeMasterClockList_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 9),
    _ScSysNodeMasterClockList_Type()
)
scSysNodeMasterClockList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSysNodeMasterClockList.setStatus("mandatory")


class _ScSysNodeDatabaseVersion_Type(DisplayString):
    """Custom type scSysNodeDatabaseVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_ScSysNodeDatabaseVersion_Type.__name__ = "DisplayString"
_ScSysNodeDatabaseVersion_Object = MibScalar
scSysNodeDatabaseVersion = _ScSysNodeDatabaseVersion_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 10),
    _ScSysNodeDatabaseVersion_Type()
)
scSysNodeDatabaseVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scSysNodeDatabaseVersion.setStatus("mandatory")
_ScSysNodeDefaultRoot_Type = NodeAddr
_ScSysNodeDefaultRoot_Object = MibScalar
scSysNodeDefaultRoot = _ScSysNodeDefaultRoot_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 11),
    _ScSysNodeDefaultRoot_Type()
)
scSysNodeDefaultRoot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSysNodeDefaultRoot.setStatus("mandatory")


class _ScSysNodeCpiProfileUpdate_Type(Integer32):
    """Custom type scSysNodeCpiProfileUpdate based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("updateCpiProfileReq", 2))
    )


_ScSysNodeCpiProfileUpdate_Type.__name__ = "Integer32"
_ScSysNodeCpiProfileUpdate_Object = MibScalar
scSysNodeCpiProfileUpdate = _ScSysNodeCpiProfileUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 12),
    _ScSysNodeCpiProfileUpdate_Type()
)
scSysNodeCpiProfileUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scSysNodeCpiProfileUpdate.setStatus("mandatory")


class _ScSysNodeCpiPasswordControl_Type(Integer32):
    """Custom type scSysNodeCpiPasswordControl based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("enablePassthru", 3))
    )


_ScSysNodeCpiPasswordControl_Type.__name__ = "Integer32"
_ScSysNodeCpiPasswordControl_Object = MibScalar
scSysNodeCpiPasswordControl = _ScSysNodeCpiPasswordControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 13),
    _ScSysNodeCpiPasswordControl_Type()
)
scSysNodeCpiPasswordControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSysNodeCpiPasswordControl.setStatus("mandatory")


class _ScSysNodeCpiPasswordLevel1_Type(DisplayString):
    """Custom type scSysNodeCpiPasswordLevel1 based on DisplayString"""
    defaultValue = OctetString("public")

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_ScSysNodeCpiPasswordLevel1_Type.__name__ = "DisplayString"
_ScSysNodeCpiPasswordLevel1_Object = MibScalar
scSysNodeCpiPasswordLevel1 = _ScSysNodeCpiPasswordLevel1_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 14),
    _ScSysNodeCpiPasswordLevel1_Type()
)
scSysNodeCpiPasswordLevel1.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scSysNodeCpiPasswordLevel1.setStatus("mandatory")


class _ScSysNodeCpiPasswordLevel2_Type(DisplayString):
    """Custom type scSysNodeCpiPasswordLevel2 based on DisplayString"""
    defaultValue = OctetString("public")

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_ScSysNodeCpiPasswordLevel2_Type.__name__ = "DisplayString"
_ScSysNodeCpiPasswordLevel2_Object = MibScalar
scSysNodeCpiPasswordLevel2 = _ScSysNodeCpiPasswordLevel2_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 15),
    _ScSysNodeCpiPasswordLevel2_Type()
)
scSysNodeCpiPasswordLevel2.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scSysNodeCpiPasswordLevel2.setStatus("mandatory")


class _ScSysNodeCpiPasswordLevel3_Type(DisplayString):
    """Custom type scSysNodeCpiPasswordLevel3 based on DisplayString"""
    defaultValue = OctetString("public")

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_ScSysNodeCpiPasswordLevel3_Type.__name__ = "DisplayString"
_ScSysNodeCpiPasswordLevel3_Object = MibScalar
scSysNodeCpiPasswordLevel3 = _ScSysNodeCpiPasswordLevel3_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 16),
    _ScSysNodeCpiPasswordLevel3_Type()
)
scSysNodeCpiPasswordLevel3.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scSysNodeCpiPasswordLevel3.setStatus("mandatory")


class _ScSysNodeCpiSessionTimeOut_Type(Integer32):
    """Custom type scSysNodeCpiSessionTimeOut based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1440),
    )


_ScSysNodeCpiSessionTimeOut_Type.__name__ = "Integer32"
_ScSysNodeCpiSessionTimeOut_Object = MibScalar
scSysNodeCpiSessionTimeOut = _ScSysNodeCpiSessionTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 17),
    _ScSysNodeCpiSessionTimeOut_Type()
)
scSysNodeCpiSessionTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSysNodeCpiSessionTimeOut.setStatus("mandatory")


class _ScSysNodeCpiMaxPassthruSessions_Type(Integer32):
    """Custom type scSysNodeCpiMaxPassthruSessions based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4),
    )


_ScSysNodeCpiMaxPassthruSessions_Type.__name__ = "Integer32"
_ScSysNodeCpiMaxPassthruSessions_Object = MibScalar
scSysNodeCpiMaxPassthruSessions = _ScSysNodeCpiMaxPassthruSessions_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 2, 18),
    _ScSysNodeCpiMaxPassthruSessions_Type()
)
scSysNodeCpiMaxPassthruSessions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSysNodeCpiMaxPassthruSessions.setStatus("mandatory")
_ScRootAccessTable_Object = MibTable
scRootAccessTable = _ScRootAccessTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 3)
)
if mibBuilder.loadTexts:
    scRootAccessTable.setStatus("mandatory")
_ScRootAccessEntry_Object = MibTableRow
scRootAccessEntry = _ScRootAccessEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 3, 1)
)
scRootAccessEntry.setIndexNames(
    (0, "STMIB", "scRootAccessIndex"),
)
if mibBuilder.loadTexts:
    scRootAccessEntry.setStatus("mandatory")


class _ScRootAccessIndex_Type(Integer32):
    """Custom type scRootAccessIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_ScRootAccessIndex_Type.__name__ = "Integer32"
_ScRootAccessIndex_Object = MibTableColumn
scRootAccessIndex = _ScRootAccessIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 3, 1, 1),
    _ScRootAccessIndex_Type()
)
scRootAccessIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scRootAccessIndex.setStatus("mandatory")


class _ScRootAccessControlMode_Type(Integer32):
    """Custom type scRootAccessControlMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("erase", 3))
    )


_ScRootAccessControlMode_Type.__name__ = "Integer32"
_ScRootAccessControlMode_Object = MibTableColumn
scRootAccessControlMode = _ScRootAccessControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 3, 1, 2),
    _ScRootAccessControlMode_Type()
)
scRootAccessControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scRootAccessControlMode.setStatus("mandatory")
_ScRootAccessIp_Type = IpAddress
_ScRootAccessIp_Object = MibTableColumn
scRootAccessIp = _ScRootAccessIp_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 3, 1, 3),
    _ScRootAccessIp_Type()
)
scRootAccessIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scRootAccessIp.setStatus("mandatory")
_ScNodeAccessTable_Object = MibTable
scNodeAccessTable = _ScNodeAccessTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4)
)
if mibBuilder.loadTexts:
    scNodeAccessTable.setStatus("mandatory")
_ScNodeAccessEntry_Object = MibTableRow
scNodeAccessEntry = _ScNodeAccessEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1)
)
scNodeAccessEntry.setIndexNames(
    (0, "STMIB", "scNodeAccessIndex"),
)
if mibBuilder.loadTexts:
    scNodeAccessEntry.setStatus("mandatory")


class _ScNodeAccessIndex_Type(Integer32):
    """Custom type scNodeAccessIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_ScNodeAccessIndex_Type.__name__ = "Integer32"
_ScNodeAccessIndex_Object = MibTableColumn
scNodeAccessIndex = _ScNodeAccessIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 1),
    _ScNodeAccessIndex_Type()
)
scNodeAccessIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scNodeAccessIndex.setStatus("mandatory")


class _ScNodeAccessControlMode_Type(Integer32):
    """Custom type scNodeAccessControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              59,
              60)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("erase", 3),
          ("fullAccess", 59),
          ("tableAccess", 60))
    )


_ScNodeAccessControlMode_Type.__name__ = "Integer32"
_ScNodeAccessControlMode_Object = MibTableColumn
scNodeAccessControlMode = _ScNodeAccessControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 2),
    _ScNodeAccessControlMode_Type()
)
scNodeAccessControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scNodeAccessControlMode.setStatus("mandatory")


class _ScNodeAccessUpdate_Type(Integer32):
    """Custom type scNodeAccessUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("updateThroughputReq", 3))
    )


_ScNodeAccessUpdate_Type.__name__ = "Integer32"
_ScNodeAccessUpdate_Object = MibTableColumn
scNodeAccessUpdate = _ScNodeAccessUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 3),
    _ScNodeAccessUpdate_Type()
)
scNodeAccessUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scNodeAccessUpdate.setStatus("mandatory")


class _ScNodeAccessRootList_Type(OctetString):
    """Custom type scNodeAccessRootList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_ScNodeAccessRootList_Type.__name__ = "OctetString"
_ScNodeAccessRootList_Object = MibTableColumn
scNodeAccessRootList = _ScNodeAccessRootList_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 4),
    _ScNodeAccessRootList_Type()
)
scNodeAccessRootList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scNodeAccessRootList.setStatus("mandatory")


class _ScNodeAccessChPrfList_Type(OctetString):
    """Custom type scNodeAccessChPrfList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(32, 32),
    )


_ScNodeAccessChPrfList_Type.__name__ = "OctetString"
_ScNodeAccessChPrfList_Object = MibTableColumn
scNodeAccessChPrfList = _ScNodeAccessChPrfList_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 5),
    _ScNodeAccessChPrfList_Type()
)
scNodeAccessChPrfList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scNodeAccessChPrfList.setStatus("mandatory")
_ScNodeAccessThroughput_Type = Integer32
_ScNodeAccessThroughput_Object = MibTableColumn
scNodeAccessThroughput = _ScNodeAccessThroughput_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 6),
    _ScNodeAccessThroughput_Type()
)
scNodeAccessThroughput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scNodeAccessThroughput.setStatus("mandatory")


class _ScNodeAccessVoicePrfList_Type(OctetString):
    """Custom type scNodeAccessVoicePrfList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(32, 32),
    )


_ScNodeAccessVoicePrfList_Type.__name__ = "OctetString"
_ScNodeAccessVoicePrfList_Object = MibTableColumn
scNodeAccessVoicePrfList = _ScNodeAccessVoicePrfList_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 7),
    _ScNodeAccessVoicePrfList_Type()
)
scNodeAccessVoicePrfList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scNodeAccessVoicePrfList.setStatus("mandatory")


class _ScNodeAccessLink2TraEntriesMin_Type(Integer32):
    """Custom type scNodeAccessLink2TraEntriesMin based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1728),
    )


_ScNodeAccessLink2TraEntriesMin_Type.__name__ = "Integer32"
_ScNodeAccessLink2TraEntriesMin_Object = MibTableColumn
scNodeAccessLink2TraEntriesMin = _ScNodeAccessLink2TraEntriesMin_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 8),
    _ScNodeAccessLink2TraEntriesMin_Type()
)
scNodeAccessLink2TraEntriesMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scNodeAccessLink2TraEntriesMin.setStatus("mandatory")


class _ScNodeAccessLink2TraEntriesMax_Type(Integer32):
    """Custom type scNodeAccessLink2TraEntriesMax based on Integer32"""
    defaultValue = 1728

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1728),
    )


_ScNodeAccessLink2TraEntriesMax_Type.__name__ = "Integer32"
_ScNodeAccessLink2TraEntriesMax_Object = MibTableColumn
scNodeAccessLink2TraEntriesMax = _ScNodeAccessLink2TraEntriesMax_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 4, 1, 9),
    _ScNodeAccessLink2TraEntriesMax_Type()
)
scNodeAccessLink2TraEntriesMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scNodeAccessLink2TraEntriesMax.setStatus("mandatory")
_ScCommunityTable_Object = MibTable
scCommunityTable = _ScCommunityTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5)
)
if mibBuilder.loadTexts:
    scCommunityTable.setStatus("deprecated")
_ScCommunityEntry_Object = MibTableRow
scCommunityEntry = _ScCommunityEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1)
)
scCommunityEntry.setIndexNames(
    (0, "STMIB", "scCommunityIndex"),
)
if mibBuilder.loadTexts:
    scCommunityEntry.setStatus("deprecated")
_ScCommunityIndex_Type = RecordIndex
_ScCommunityIndex_Object = MibTableColumn
scCommunityIndex = _ScCommunityIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 1),
    _ScCommunityIndex_Type()
)
scCommunityIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scCommunityIndex.setStatus("deprecated")


class _ScCommunityControlMode_Type(Integer32):
    """Custom type scCommunityControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("erase", 3))
    )


_ScCommunityControlMode_Type.__name__ = "Integer32"
_ScCommunityControlMode_Object = MibTableColumn
scCommunityControlMode = _ScCommunityControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 2),
    _ScCommunityControlMode_Type()
)
scCommunityControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCommunityControlMode.setStatus("deprecated")


class _ScCommunityName_Type(DisplayString):
    """Custom type scCommunityName based on DisplayString"""
    defaultValue = OctetString("public")

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 24),
    )


_ScCommunityName_Type.__name__ = "DisplayString"
_ScCommunityName_Object = MibTableColumn
scCommunityName = _ScCommunityName_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 3),
    _ScCommunityName_Type()
)
scCommunityName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCommunityName.setStatus("deprecated")


class _ScCommunityscMap_Type(OctetString):
    """Custom type scCommunityscMap based on OctetString"""
    defaultHexValue = "0303030303030303030303"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(11, 11),
    )


_ScCommunityscMap_Type.__name__ = "OctetString"
_ScCommunityscMap_Object = MibTableColumn
scCommunityscMap = _ScCommunityscMap_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 4),
    _ScCommunityscMap_Type()
)
scCommunityscMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCommunityscMap.setStatus("deprecated")


class _ScCommunityrecfMap_Type(OctetString):
    """Custom type scCommunityrecfMap based on OctetString"""
    defaultHexValue = "03030303030303030303030303"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(13, 13),
    )


_ScCommunityrecfMap_Type.__name__ = "OctetString"
_ScCommunityrecfMap_Object = MibTableColumn
scCommunityrecfMap = _ScCommunityrecfMap_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 5),
    _ScCommunityrecfMap_Type()
)
scCommunityrecfMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCommunityrecfMap.setStatus("deprecated")


class _ScCommunityrestMap_Type(OctetString):
    """Custom type scCommunityrestMap based on OctetString"""
    defaultHexValue = "0303030303030303030303"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(11, 11),
    )


_ScCommunityrestMap_Type.__name__ = "OctetString"
_ScCommunityrestMap_Object = MibTableColumn
scCommunityrestMap = _ScCommunityrestMap_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 6),
    _ScCommunityrestMap_Type()
)
scCommunityrestMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCommunityrestMap.setStatus("deprecated")


class _ScCommunityrestatisticsMap_Type(OctetString):
    """Custom type scCommunityrestatisticsMap based on OctetString"""
    defaultHexValue = "03030303"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_ScCommunityrestatisticsMap_Type.__name__ = "OctetString"
_ScCommunityrestatisticsMap_Object = MibTableColumn
scCommunityrestatisticsMap = _ScCommunityrestatisticsMap_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 7),
    _ScCommunityrestatisticsMap_Type()
)
scCommunityrestatisticsMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCommunityrestatisticsMap.setStatus("deprecated")


class _ScCommunityalMap_Type(OctetString):
    """Custom type scCommunityalMap based on OctetString"""
    defaultHexValue = "03030303"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_ScCommunityalMap_Type.__name__ = "OctetString"
_ScCommunityalMap_Object = MibTableColumn
scCommunityalMap = _ScCommunityalMap_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 5, 1, 8),
    _ScCommunityalMap_Type()
)
scCommunityalMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCommunityalMap.setStatus("deprecated")
_ScTrapAccessTable_Object = MibTable
scTrapAccessTable = _ScTrapAccessTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 6)
)
if mibBuilder.loadTexts:
    scTrapAccessTable.setStatus("mandatory")
_ScTrapAccessEntry_Object = MibTableRow
scTrapAccessEntry = _ScTrapAccessEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 6, 1)
)
scTrapAccessEntry.setIndexNames(
    (0, "STMIB", "scTrapAccessIndex"),
)
if mibBuilder.loadTexts:
    scTrapAccessEntry.setStatus("mandatory")


class _ScTrapAccessIndex_Type(Integer32):
    """Custom type scTrapAccessIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_ScTrapAccessIndex_Type.__name__ = "Integer32"
_ScTrapAccessIndex_Object = MibTableColumn
scTrapAccessIndex = _ScTrapAccessIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 6, 1, 1),
    _ScTrapAccessIndex_Type()
)
scTrapAccessIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scTrapAccessIndex.setStatus("mandatory")


class _ScTrapAccessControlMode_Type(Integer32):
    """Custom type scTrapAccessControlMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("erase", 3))
    )


_ScTrapAccessControlMode_Type.__name__ = "Integer32"
_ScTrapAccessControlMode_Object = MibTableColumn
scTrapAccessControlMode = _ScTrapAccessControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 6, 1, 2),
    _ScTrapAccessControlMode_Type()
)
scTrapAccessControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scTrapAccessControlMode.setStatus("mandatory")
_ScTrapAccessIp_Type = IpAddress
_ScTrapAccessIp_Object = MibTableColumn
scTrapAccessIp = _ScTrapAccessIp_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 6, 1, 3),
    _ScTrapAccessIp_Type()
)
scTrapAccessIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scTrapAccessIp.setStatus("mandatory")
_ScChProfileTable_Object = MibTable
scChProfileTable = _ScChProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7)
)
if mibBuilder.loadTexts:
    scChProfileTable.setStatus("mandatory")
_ScChProfileEntry_Object = MibTableRow
scChProfileEntry = _ScChProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1)
)
scChProfileEntry.setIndexNames(
    (0, "STMIB", "scChProfileIndex"),
)
if mibBuilder.loadTexts:
    scChProfileEntry.setStatus("mandatory")


class _ScChProfileIndex_Type(Integer32):
    """Custom type scChProfileIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_ScChProfileIndex_Type.__name__ = "Integer32"
_ScChProfileIndex_Object = MibTableColumn
scChProfileIndex = _ScChProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 1),
    _ScChProfileIndex_Type()
)
scChProfileIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scChProfileIndex.setStatus("mandatory")


class _ScChProfileControlMode_Type(Integer32):
    """Custom type scChProfileControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("erase", 3))
    )


_ScChProfileControlMode_Type.__name__ = "Integer32"
_ScChProfileControlMode_Object = MibTableColumn
scChProfileControlMode = _ScChProfileControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 2),
    _ScChProfileControlMode_Type()
)
scChProfileControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scChProfileControlMode.setStatus("mandatory")


class _ScChProfileCostType_Type(Integer32):
    """Custom type scChProfileCostType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("delayAndCost", 4),
          ("hops", 1),
          ("queuingDelay", 3),
          ("userDesignatedCost", 2))
    )


_ScChProfileCostType_Type.__name__ = "Integer32"
_ScChProfileCostType_Object = MibTableColumn
scChProfileCostType = _ScChProfileCostType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 3),
    _ScChProfileCostType_Type()
)
scChProfileCostType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scChProfileCostType.setStatus("mandatory")


class _ScChProfileMaxCost_Type(Integer32):
    """Custom type scChProfileMaxCost based on Integer32"""
    defaultValue = 16


_ScChProfileMaxCost_Object = MibTableColumn
scChProfileMaxCost = _ScChProfileMaxCost_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 4),
    _ScChProfileMaxCost_Type()
)
scChProfileMaxCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scChProfileMaxCost.setStatus("mandatory")


class _ScChProfilePriority_Type(Integer32):
    """Custom type scChProfilePriority based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_ScChProfilePriority_Type.__name__ = "Integer32"
_ScChProfilePriority_Object = MibTableColumn
scChProfilePriority = _ScChProfilePriority_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 5),
    _ScChProfilePriority_Type()
)
scChProfilePriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scChProfilePriority.setStatus("mandatory")


class _ScChProfileEncryption_Type(Integer32):
    """Custom type scChProfileEncryption based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("doNotCare", 1),
          ("required", 2))
    )


_ScChProfileEncryption_Type.__name__ = "Integer32"
_ScChProfileEncryption_Object = MibTableColumn
scChProfileEncryption = _ScChProfileEncryption_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 6),
    _ScChProfileEncryption_Type()
)
scChProfileEncryption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scChProfileEncryption.setStatus("mandatory")


class _ScChProfileMaxSatHop_Type(Integer32):
    """Custom type scChProfileMaxSatHop based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 5),
    )


_ScChProfileMaxSatHop_Type.__name__ = "Integer32"
_ScChProfileMaxSatHop_Object = MibTableColumn
scChProfileMaxSatHop = _ScChProfileMaxSatHop_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 7),
    _ScChProfileMaxSatHop_Type()
)
scChProfileMaxSatHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scChProfileMaxSatHop.setStatus("mandatory")


class _ScChProfileErrPerformReq_Type(Integer32):
    """Custom type scChProfileErrPerformReq based on Integer32"""
    defaultValue = 6

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 9),
    )


_ScChProfileErrPerformReq_Type.__name__ = "Integer32"
_ScChProfileErrPerformReq_Object = MibTableColumn
scChProfileErrPerformReq = _ScChProfileErrPerformReq_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 8),
    _ScChProfileErrPerformReq_Type()
)
scChProfileErrPerformReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scChProfileErrPerformReq.setStatus("mandatory")


class _ScChProfileINLGroup_Type(Integer32):
    """Custom type scChProfileINLGroup based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_ScChProfileINLGroup_Type.__name__ = "Integer32"
_ScChProfileINLGroup_Object = MibTableColumn
scChProfileINLGroup = _ScChProfileINLGroup_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 9),
    _ScChProfileINLGroup_Type()
)
scChProfileINLGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scChProfileINLGroup.setStatus("mandatory")


class _ScChProfileOverrideMode_Type(Integer32):
    """Custom type scChProfileOverrideMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_ScChProfileOverrideMode_Type.__name__ = "Integer32"
_ScChProfileOverrideMode_Object = MibTableColumn
scChProfileOverrideMode = _ScChProfileOverrideMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 10),
    _ScChProfileOverrideMode_Type()
)
scChProfileOverrideMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scChProfileOverrideMode.setStatus("mandatory")


class _ScChProfileRetryTimer_Type(Integer32):
    """Custom type scChProfileRetryTimer based on Integer32"""
    defaultValue = 6

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_ScChProfileRetryTimer_Type.__name__ = "Integer32"
_ScChProfileRetryTimer_Object = MibTableColumn
scChProfileRetryTimer = _ScChProfileRetryTimer_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 11),
    _ScChProfileRetryTimer_Type()
)
scChProfileRetryTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scChProfileRetryTimer.setStatus("mandatory")


class _ScChProfileInfoAlarmGen_Type(Integer32):
    """Custom type scChProfileInfoAlarmGen based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_ScChProfileInfoAlarmGen_Type.__name__ = "Integer32"
_ScChProfileInfoAlarmGen_Object = MibTableColumn
scChProfileInfoAlarmGen = _ScChProfileInfoAlarmGen_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 7, 1, 12),
    _ScChProfileInfoAlarmGen_Type()
)
scChProfileInfoAlarmGen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scChProfileInfoAlarmGen.setStatus("mandatory")
_ScSoftloadEntry_ObjectIdentity = ObjectIdentity
scSoftloadEntry = _ScSoftloadEntry_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8)
)


class _ScSoftloadControl_Type(Integer32):
    """Custom type scSoftloadControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("onlineCopy", 2),
          ("startDownload", 1),
          ("startDownloadToRecovery", 3))
    )


_ScSoftloadControl_Type.__name__ = "Integer32"
_ScSoftloadControl_Object = MibScalar
scSoftloadControl = _ScSoftloadControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 1),
    _ScSoftloadControl_Type()
)
scSoftloadControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scSoftloadControl.setStatus("mandatory")


class _ScSoftloadFileName_Type(DisplayString):
    """Custom type scSoftloadFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_ScSoftloadFileName_Type.__name__ = "DisplayString"
_ScSoftloadFileName_Object = MibScalar
scSoftloadFileName = _ScSoftloadFileName_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 2),
    _ScSoftloadFileName_Type()
)
scSoftloadFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSoftloadFileName.setStatus("mandatory")


class _ScSoftloadDirectoryName_Type(DisplayString):
    """Custom type scSoftloadDirectoryName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_ScSoftloadDirectoryName_Type.__name__ = "DisplayString"
_ScSoftloadDirectoryName_Object = MibScalar
scSoftloadDirectoryName = _ScSoftloadDirectoryName_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 3),
    _ScSoftloadDirectoryName_Type()
)
scSoftloadDirectoryName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSoftloadDirectoryName.setStatus("mandatory")
_ScSoftloadDestPort_Type = PortAddr
_ScSoftloadDestPort_Object = MibScalar
scSoftloadDestPort = _ScSoftloadDestPort_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 4),
    _ScSoftloadDestPort_Type()
)
scSoftloadDestPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSoftloadDestPort.setStatus("mandatory")


class _ScSoftloadSoftwareType_Type(Integer32):
    """Custom type scSoftloadSoftwareType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              11,
              12,
              14,
              19,
              20,
              128,
              251,
              252,
              253,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ad10", 128),
          ("ad10Database", 251),
          ("asm", 9),
          ("dsm", 19),
          ("e1m", 6),
          ("e3m", 20),
          ("fsm", 11),
          ("lgm", 8),
          ("mibSchema", 252),
          ("ncp", 1),
          ("rtm", 14),
          ("rtmAdDatabase", 253),
          ("sdm", 12),
          ("sgm", 7),
          ("stDatabase", 255),
          ("t1m", 5),
          ("tableOC", 254))
    )


_ScSoftloadSoftwareType_Type.__name__ = "Integer32"
_ScSoftloadSoftwareType_Object = MibScalar
scSoftloadSoftwareType = _ScSoftloadSoftwareType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 5),
    _ScSoftloadSoftwareType_Type()
)
scSoftloadSoftwareType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSoftloadSoftwareType.setStatus("mandatory")
_ScSoftloadEmsNodeID_Type = NodeAddr
_ScSoftloadEmsNodeID_Object = MibScalar
scSoftloadEmsNodeID = _ScSoftloadEmsNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 6),
    _ScSoftloadEmsNodeID_Type()
)
scSoftloadEmsNodeID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSoftloadEmsNodeID.setStatus("mandatory")
_ScSoftloadSourceEmsIp_Type = IpAddress
_ScSoftloadSourceEmsIp_Object = MibScalar
scSoftloadSourceEmsIp = _ScSoftloadSourceEmsIp_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 7),
    _ScSoftloadSourceEmsIp_Type()
)
scSoftloadSourceEmsIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSoftloadSourceEmsIp.setStatus("mandatory")


class _ScSoftloadTimeout_Type(Integer32):
    """Custom type scSoftloadTimeout based on Integer32"""
    defaultValue = 120

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 300),
    )


_ScSoftloadTimeout_Type.__name__ = "Integer32"
_ScSoftloadTimeout_Object = MibScalar
scSoftloadTimeout = _ScSoftloadTimeout_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 8, 8),
    _ScSoftloadTimeout_Type()
)
scSoftloadTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scSoftloadTimeout.setStatus("mandatory")
_ScCpiAccess_ObjectIdentity = ObjectIdentity
scCpiAccess = _ScCpiAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9)
)


class _ScCpiControl_Type(Integer32):
    """Custom type scCpiControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              40)
        )
    )
    namedValues = NamedValues(
        *(("logoff", 40),
          ("resetCpiPort", 3))
    )


_ScCpiControl_Type.__name__ = "Integer32"
_ScCpiControl_Object = MibScalar
scCpiControl = _ScCpiControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9, 1),
    _ScCpiControl_Type()
)
scCpiControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scCpiControl.setStatus("mandatory")


class _ScCpiControlUpdate_Type(Integer32):
    """Custom type scCpiControlUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_ScCpiControlUpdate_Type.__name__ = "Integer32"
_ScCpiControlUpdate_Object = MibScalar
scCpiControlUpdate = _ScCpiControlUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9, 2),
    _ScCpiControlUpdate_Type()
)
scCpiControlUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scCpiControlUpdate.setStatus("mandatory")


class _ScCpiSpeed_Type(Integer32):
    """Custom type scCpiSpeed based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("a14400", 4),
          ("a19200", 5),
          ("a2400", 1),
          ("a4800", 2),
          ("a9600", 3))
    )


_ScCpiSpeed_Type.__name__ = "Integer32"
_ScCpiSpeed_Object = MibScalar
scCpiSpeed = _ScCpiSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9, 3),
    _ScCpiSpeed_Type()
)
scCpiSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCpiSpeed.setStatus("mandatory")


class _ScCpiDataBits_Type(Integer32):
    """Custom type scCpiDataBits based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("b7", 1),
          ("b8", 2))
    )


_ScCpiDataBits_Type.__name__ = "Integer32"
_ScCpiDataBits_Object = MibScalar
scCpiDataBits = _ScCpiDataBits_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9, 4),
    _ScCpiDataBits_Type()
)
scCpiDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCpiDataBits.setStatus("mandatory")


class _ScCpiParity_Type(Integer32):
    """Custom type scCpiParity based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("even", 3),
          ("noParity", 1),
          ("odd", 2))
    )


_ScCpiParity_Type.__name__ = "Integer32"
_ScCpiParity_Object = MibScalar
scCpiParity = _ScCpiParity_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9, 5),
    _ScCpiParity_Type()
)
scCpiParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCpiParity.setStatus("mandatory")


class _ScCpiStopBits_Type(Integer32):
    """Custom type scCpiStopBits based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("b1", 1),
          ("b2", 2))
    )


_ScCpiStopBits_Type.__name__ = "Integer32"
_ScCpiStopBits_Object = MibScalar
scCpiStopBits = _ScCpiStopBits_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 9, 6),
    _ScCpiStopBits_Type()
)
scCpiStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCpiStopBits.setStatus("mandatory")
_ScModemAccess_ObjectIdentity = ObjectIdentity
scModemAccess = _ScModemAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10)
)


class _ScModemControl_Type(Integer32):
    """Custom type scModemControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              40)
        )
    )
    namedValues = NamedValues(
        *(("enableCpsSession", 1),
          ("logoff", 40),
          ("resetModemPort", 3))
    )


_ScModemControl_Type.__name__ = "Integer32"
_ScModemControl_Object = MibScalar
scModemControl = _ScModemControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 1),
    _ScModemControl_Type()
)
scModemControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scModemControl.setStatus("mandatory")


class _ScModemControlUpdate_Type(Integer32):
    """Custom type scModemControlUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_ScModemControlUpdate_Type.__name__ = "Integer32"
_ScModemControlUpdate_Object = MibScalar
scModemControlUpdate = _ScModemControlUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 2),
    _ScModemControlUpdate_Type()
)
scModemControlUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scModemControlUpdate.setStatus("mandatory")


class _ScModemSpeed_Type(Integer32):
    """Custom type scModemSpeed based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("a14400", 4),
          ("a19200", 5),
          ("a2400", 1),
          ("a4800", 2),
          ("a9600", 3))
    )


_ScModemSpeed_Type.__name__ = "Integer32"
_ScModemSpeed_Object = MibScalar
scModemSpeed = _ScModemSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 3),
    _ScModemSpeed_Type()
)
scModemSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scModemSpeed.setStatus("mandatory")


class _ScModemDataBits_Type(Integer32):
    """Custom type scModemDataBits based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            2
        )
    )
    namedValues = NamedValues(
        ("b8", 2)
    )


_ScModemDataBits_Type.__name__ = "Integer32"
_ScModemDataBits_Object = MibScalar
scModemDataBits = _ScModemDataBits_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 4),
    _ScModemDataBits_Type()
)
scModemDataBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scModemDataBits.setStatus("mandatory")


class _ScModemParity_Type(Integer32):
    """Custom type scModemParity based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("even", 3),
          ("noParity", 1),
          ("odd", 2))
    )


_ScModemParity_Type.__name__ = "Integer32"
_ScModemParity_Object = MibScalar
scModemParity = _ScModemParity_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 5),
    _ScModemParity_Type()
)
scModemParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scModemParity.setStatus("mandatory")


class _ScModemStopBits_Type(Integer32):
    """Custom type scModemStopBits based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("b1", 1),
          ("b2", 2))
    )


_ScModemStopBits_Type.__name__ = "Integer32"
_ScModemStopBits_Object = MibScalar
scModemStopBits = _ScModemStopBits_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 6),
    _ScModemStopBits_Type()
)
scModemStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scModemStopBits.setStatus("mandatory")


class _ScModemControlLead_Type(Integer32):
    """Custom type scModemControlLead based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("eIA", 1),
          ("noEIA", 2))
    )


_ScModemControlLead_Type.__name__ = "Integer32"
_ScModemControlLead_Object = MibScalar
scModemControlLead = _ScModemControlLead_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 10, 7),
    _ScModemControlLead_Type()
)
scModemControlLead.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scModemControlLead.setStatus("mandatory")
_ScIpAccess_ObjectIdentity = ObjectIdentity
scIpAccess = _ScIpAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11)
)
_ScIpProfile_ObjectIdentity = ObjectIdentity
scIpProfile = _ScIpProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1)
)


class _ScIpControl_Type(Integer32):
    """Custom type scIpControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("resetIp", 1)
    )


_ScIpControl_Type.__name__ = "Integer32"
_ScIpControl_Object = MibScalar
scIpControl = _ScIpControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 1),
    _ScIpControl_Type()
)
scIpControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scIpControl.setStatus("mandatory")


class _ScIpControlUpdate_Type(Integer32):
    """Custom type scIpControlUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_ScIpControlUpdate_Type.__name__ = "Integer32"
_ScIpControlUpdate_Object = MibScalar
scIpControlUpdate = _ScIpControlUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 2),
    _ScIpControlUpdate_Type()
)
scIpControlUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scIpControlUpdate.setStatus("mandatory")
_ScIpWANIpAddress_Type = IpAddress
_ScIpWANIpAddress_Object = MibScalar
scIpWANIpAddress = _ScIpWANIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 3),
    _ScIpWANIpAddress_Type()
)
scIpWANIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scIpWANIpAddress.setStatus("mandatory")
_ScIpSubNetworkMask_Type = IpAddress
_ScIpSubNetworkMask_Object = MibScalar
scIpSubNetworkMask = _ScIpSubNetworkMask_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 4),
    _ScIpSubNetworkMask_Type()
)
scIpSubNetworkMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scIpSubNetworkMask.setStatus("mandatory")
_ScIpRootGatewayIp_Type = IpAddress
_ScIpRootGatewayIp_Object = MibScalar
scIpRootGatewayIp = _ScIpRootGatewayIp_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 5),
    _ScIpRootGatewayIp_Type()
)
scIpRootGatewayIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scIpRootGatewayIp.setStatus("mandatory")
_ScIpRootGatewayMask_Type = IpAddress
_ScIpRootGatewayMask_Object = MibScalar
scIpRootGatewayMask = _ScIpRootGatewayMask_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 6),
    _ScIpRootGatewayMask_Type()
)
scIpRootGatewayMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scIpRootGatewayMask.setStatus("mandatory")


class _ScIpRootGatewayEthernet_Type(Integer32):
    """Custom type scIpRootGatewayEthernet based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("e802d3", 1),
          ("ethernetII", 2))
    )


_ScIpRootGatewayEthernet_Type.__name__ = "Integer32"
_ScIpRootGatewayEthernet_Object = MibScalar
scIpRootGatewayEthernet = _ScIpRootGatewayEthernet_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 7),
    _ScIpRootGatewayEthernet_Type()
)
scIpRootGatewayEthernet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scIpRootGatewayEthernet.setStatus("mandatory")
_ScIpDefaultExtGateway_Type = IpAddress
_ScIpDefaultExtGateway_Object = MibScalar
scIpDefaultExtGateway = _ScIpDefaultExtGateway_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 8),
    _ScIpDefaultExtGateway_Type()
)
scIpDefaultExtGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scIpDefaultExtGateway.setStatus("mandatory")
_ScIpSlipAddress_Type = IpAddress
_ScIpSlipAddress_Object = MibScalar
scIpSlipAddress = _ScIpSlipAddress_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 9),
    _ScIpSlipAddress_Type()
)
scIpSlipAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scIpSlipAddress.setStatus("mandatory")
_ScIpSlipMask_Type = IpAddress
_ScIpSlipMask_Object = MibScalar
scIpSlipMask = _ScIpSlipMask_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 1, 10),
    _ScIpSlipMask_Type()
)
scIpSlipMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scIpSlipMask.setStatus("mandatory")
_ScIpOnlineSubnetTable_Object = MibTable
scIpOnlineSubnetTable = _ScIpOnlineSubnetTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 2)
)
if mibBuilder.loadTexts:
    scIpOnlineSubnetTable.setStatus("mandatory")
_ScIpOnlineSubnetEntry_Object = MibTableRow
scIpOnlineSubnetEntry = _ScIpOnlineSubnetEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 2, 1)
)
scIpOnlineSubnetEntry.setIndexNames(
    (0, "STMIB", "scIpOnlineSubnetIndex"),
)
if mibBuilder.loadTexts:
    scIpOnlineSubnetEntry.setStatus("mandatory")


class _ScIpOnlineSubnetIndex_Type(Integer32):
    """Custom type scIpOnlineSubnetIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_ScIpOnlineSubnetIndex_Type.__name__ = "Integer32"
_ScIpOnlineSubnetIndex_Object = MibTableColumn
scIpOnlineSubnetIndex = _ScIpOnlineSubnetIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 2, 1, 1),
    _ScIpOnlineSubnetIndex_Type()
)
scIpOnlineSubnetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scIpOnlineSubnetIndex.setStatus("mandatory")
_ScIpOnlineSubnetAddr_Type = IpAddress
_ScIpOnlineSubnetAddr_Object = MibTableColumn
scIpOnlineSubnetAddr = _ScIpOnlineSubnetAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 2, 1, 2),
    _ScIpOnlineSubnetAddr_Type()
)
scIpOnlineSubnetAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scIpOnlineSubnetAddr.setStatus("mandatory")
_ScIpOfflineSubnetTable_Object = MibTable
scIpOfflineSubnetTable = _ScIpOfflineSubnetTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 3)
)
if mibBuilder.loadTexts:
    scIpOfflineSubnetTable.setStatus("mandatory")
_ScIpOfflineSubnetEntry_Object = MibTableRow
scIpOfflineSubnetEntry = _ScIpOfflineSubnetEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 3, 1)
)
scIpOfflineSubnetEntry.setIndexNames(
    (0, "STMIB", "scIpOfflineSubnetIndex"),
)
if mibBuilder.loadTexts:
    scIpOfflineSubnetEntry.setStatus("mandatory")


class _ScIpOfflineSubnetIndex_Type(Integer32):
    """Custom type scIpOfflineSubnetIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_ScIpOfflineSubnetIndex_Type.__name__ = "Integer32"
_ScIpOfflineSubnetIndex_Object = MibTableColumn
scIpOfflineSubnetIndex = _ScIpOfflineSubnetIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 3, 1, 1),
    _ScIpOfflineSubnetIndex_Type()
)
scIpOfflineSubnetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scIpOfflineSubnetIndex.setStatus("mandatory")


class _ScIpOfflineSubnetControl_Type(Integer32):
    """Custom type scIpOfflineSubnetControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("erase", 3)
    )


_ScIpOfflineSubnetControl_Type.__name__ = "Integer32"
_ScIpOfflineSubnetControl_Object = MibTableColumn
scIpOfflineSubnetControl = _ScIpOfflineSubnetControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 3, 1, 2),
    _ScIpOfflineSubnetControl_Type()
)
scIpOfflineSubnetControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    scIpOfflineSubnetControl.setStatus("mandatory")
_ScIpOfflineSubnetAddr_Type = IpAddress
_ScIpOfflineSubnetAddr_Object = MibTableColumn
scIpOfflineSubnetAddr = _ScIpOfflineSubnetAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 11, 3, 1, 3),
    _ScIpOfflineSubnetAddr_Type()
)
scIpOfflineSubnetAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scIpOfflineSubnetAddr.setStatus("mandatory")
_ScLgmStaticRouteTable_Object = MibTable
scLgmStaticRouteTable = _ScLgmStaticRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12)
)
if mibBuilder.loadTexts:
    scLgmStaticRouteTable.setStatus("mandatory")
_ScLgmStaticRouteEntry_Object = MibTableRow
scLgmStaticRouteEntry = _ScLgmStaticRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1)
)
scLgmStaticRouteEntry.setIndexNames(
    (0, "STMIB", "scLgmStaticRouteNode"),
    (0, "STMIB", "scLgmStaticRouteIndex"),
)
if mibBuilder.loadTexts:
    scLgmStaticRouteEntry.setStatus("mandatory")
_ScLgmStaticRouteNode_Type = NodeAddr
_ScLgmStaticRouteNode_Object = MibTableColumn
scLgmStaticRouteNode = _ScLgmStaticRouteNode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1, 1),
    _ScLgmStaticRouteNode_Type()
)
scLgmStaticRouteNode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scLgmStaticRouteNode.setStatus("mandatory")


class _ScLgmStaticRouteIndex_Type(Integer32):
    """Custom type scLgmStaticRouteIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_ScLgmStaticRouteIndex_Type.__name__ = "Integer32"
_ScLgmStaticRouteIndex_Object = MibTableColumn
scLgmStaticRouteIndex = _ScLgmStaticRouteIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1, 2),
    _ScLgmStaticRouteIndex_Type()
)
scLgmStaticRouteIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scLgmStaticRouteIndex.setStatus("mandatory")


class _ScLgmStaticRouteStartMode_Type(Integer32):
    """Custom type scLgmStaticRouteStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_ScLgmStaticRouteStartMode_Type.__name__ = "Integer32"
_ScLgmStaticRouteStartMode_Object = MibTableColumn
scLgmStaticRouteStartMode = _ScLgmStaticRouteStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1, 3),
    _ScLgmStaticRouteStartMode_Type()
)
scLgmStaticRouteStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scLgmStaticRouteStartMode.setStatus("mandatory")


class _ScLgmStaticRouteNextIafHop_Type(Integer32):
    """Custom type scLgmStaticRouteNextIafHop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32767),
    )


_ScLgmStaticRouteNextIafHop_Type.__name__ = "Integer32"
_ScLgmStaticRouteNextIafHop_Object = MibTableColumn
scLgmStaticRouteNextIafHop = _ScLgmStaticRouteNextIafHop_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1, 4),
    _ScLgmStaticRouteNextIafHop_Type()
)
scLgmStaticRouteNextIafHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scLgmStaticRouteNextIafHop.setStatus("mandatory")
_ScLgmStaticRouteLink2GwyNode_Type = NodeAddr
_ScLgmStaticRouteLink2GwyNode_Object = MibTableColumn
scLgmStaticRouteLink2GwyNode = _ScLgmStaticRouteLink2GwyNode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1, 5),
    _ScLgmStaticRouteLink2GwyNode_Type()
)
scLgmStaticRouteLink2GwyNode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scLgmStaticRouteLink2GwyNode.setStatus("mandatory")


class _ScLgmStaticRoutePathDelay_Type(Integer32):
    """Custom type scLgmStaticRoutePathDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_ScLgmStaticRoutePathDelay_Type.__name__ = "Integer32"
_ScLgmStaticRoutePathDelay_Object = MibTableColumn
scLgmStaticRoutePathDelay = _ScLgmStaticRoutePathDelay_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 12, 1, 6),
    _ScLgmStaticRoutePathDelay_Type()
)
scLgmStaticRoutePathDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scLgmStaticRoutePathDelay.setStatus("mandatory")
_ScVoicePrf_ObjectIdentity = ObjectIdentity
scVoicePrf = _ScVoicePrf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13)
)
_ScVoicePrfNetTable_Object = MibTable
scVoicePrfNetTable = _ScVoicePrfNetTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1)
)
if mibBuilder.loadTexts:
    scVoicePrfNetTable.setStatus("mandatory")
_ScVoicePrfNetEntry_Object = MibTableRow
scVoicePrfNetEntry = _ScVoicePrfNetEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1)
)
scVoicePrfNetEntry.setIndexNames(
    (0, "STMIB", "scVoicePrfNetIndex"),
)
if mibBuilder.loadTexts:
    scVoicePrfNetEntry.setStatus("mandatory")


class _ScVoicePrfNetIndex_Type(Integer32):
    """Custom type scVoicePrfNetIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_ScVoicePrfNetIndex_Type.__name__ = "Integer32"
_ScVoicePrfNetIndex_Object = MibTableColumn
scVoicePrfNetIndex = _ScVoicePrfNetIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 1),
    _ScVoicePrfNetIndex_Type()
)
scVoicePrfNetIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scVoicePrfNetIndex.setStatus("mandatory")


class _ScVoicePrfNetControlMode_Type(Integer32):
    """Custom type scVoicePrfNetControlMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("erase", 3))
    )


_ScVoicePrfNetControlMode_Type.__name__ = "Integer32"
_ScVoicePrfNetControlMode_Object = MibTableColumn
scVoicePrfNetControlMode = _ScVoicePrfNetControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 2),
    _ScVoicePrfNetControlMode_Type()
)
scVoicePrfNetControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNetControlMode.setStatus("mandatory")


class _ScVoicePrfNetCompressMode_Type(Integer32):
    """Custom type scVoicePrfNetCompressMode based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("adpcm", 3),
          ("atc", 2),
          ("pcm", 255),
          ("tCelp", 1))
    )


_ScVoicePrfNetCompressMode_Type.__name__ = "Integer32"
_ScVoicePrfNetCompressMode_Object = MibTableColumn
scVoicePrfNetCompressMode = _ScVoicePrfNetCompressMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 3),
    _ScVoicePrfNetCompressMode_Type()
)
scVoicePrfNetCompressMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNetCompressMode.setStatus("mandatory")


class _ScVoicePrfNetSpeed_Type(Integer32):
    """Custom type scVoicePrfNetSpeed based on Integer32"""
    defaultValue = 480

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(40,
              54,
              56,
              60,
              64,
              68,
              72,
              76,
              80,
              84,
              88,
              92,
              96,
              100,
              104,
              108,
              112,
              116,
              120,
              124,
              128,
              132,
              136,
              140,
              144,
              148,
              152,
              156,
              160,
              164,
              168,
              172,
              176,
              180,
              184,
              188,
              192,
              196,
              200,
              204,
              208,
              212,
              216,
              220,
              224,
              228,
              232,
              236,
              238,
              240,
              270,
              480)
        )
    )
    namedValues = NamedValues(
        *(("b10133", 76),
          ("b10666", 80),
          ("b11200", 84),
          ("b11733", 88),
          ("b12266", 92),
          ("b12800", 96),
          ("b13333", 100),
          ("b13866", 104),
          ("b14400", 108),
          ("b14933", 112),
          ("b15466", 116),
          ("b16000", 120),
          ("b16533", 124),
          ("b17066", 128),
          ("b17600", 132),
          ("b18133", 136),
          ("b18666", 140),
          ("b19200", 144),
          ("b19733", 148),
          ("b20266", 152),
          ("b20800", 156),
          ("b21333", 160),
          ("b21866", 164),
          ("b22400", 168),
          ("b22933", 172),
          ("b23466", 176),
          ("b24000", 180),
          ("b24533", 184),
          ("b25066", 188),
          ("b25600", 192),
          ("b26133", 196),
          ("b26666", 200),
          ("b27200", 204),
          ("b27733", 208),
          ("b28266", 212),
          ("b28800", 216),
          ("b29333", 220),
          ("b29866", 224),
          ("b30400", 228),
          ("b30933", 232),
          ("b31466", 236),
          ("b31733", 238),
          ("b32000", 240),
          ("b36000", 270),
          ("b5333", 40),
          ("b64000", 480),
          ("b7200", 54),
          ("b7466", 56),
          ("b8000", 60),
          ("b8533", 64),
          ("b9066", 68),
          ("b9600", 72))
    )


_ScVoicePrfNetSpeed_Type.__name__ = "Integer32"
_ScVoicePrfNetSpeed_Object = MibTableColumn
scVoicePrfNetSpeed = _ScVoicePrfNetSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 4),
    _ScVoicePrfNetSpeed_Type()
)
scVoicePrfNetSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNetSpeed.setStatus("mandatory")


class _ScVoicePrfNetDTMFRelay_Type(Integer32):
    """Custom type scVoicePrfNetDTMFRelay based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_ScVoicePrfNetDTMFRelay_Type.__name__ = "Integer32"
_ScVoicePrfNetDTMFRelay_Object = MibTableColumn
scVoicePrfNetDTMFRelay = _ScVoicePrfNetDTMFRelay_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 5),
    _ScVoicePrfNetDTMFRelay_Type()
)
scVoicePrfNetDTMFRelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNetDTMFRelay.setStatus("mandatory")


class _ScVoicePrfNetFaxRelay_Type(Integer32):
    """Custom type scVoicePrfNetFaxRelay based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_ScVoicePrfNetFaxRelay_Type.__name__ = "Integer32"
_ScVoicePrfNetFaxRelay_Object = MibTableColumn
scVoicePrfNetFaxRelay = _ScVoicePrfNetFaxRelay_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 6),
    _ScVoicePrfNetFaxRelay_Type()
)
scVoicePrfNetFaxRelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNetFaxRelay.setStatus("mandatory")


class _ScVoicePrfNetFaxNSFMode_Type(Integer32):
    """Custom type scVoicePrfNetFaxNSFMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_ScVoicePrfNetFaxNSFMode_Type.__name__ = "Integer32"
_ScVoicePrfNetFaxNSFMode_Object = MibTableColumn
scVoicePrfNetFaxNSFMode = _ScVoicePrfNetFaxNSFMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 7),
    _ScVoicePrfNetFaxNSFMode_Type()
)
scVoicePrfNetFaxNSFMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNetFaxNSFMode.setStatus("mandatory")


class _ScVoicePrfNetVocoderEnable_Type(Integer32):
    """Custom type scVoicePrfNetVocoderEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("normal", 1))
    )


_ScVoicePrfNetVocoderEnable_Type.__name__ = "Integer32"
_ScVoicePrfNetVocoderEnable_Object = MibTableColumn
scVoicePrfNetVocoderEnable = _ScVoicePrfNetVocoderEnable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 8),
    _ScVoicePrfNetVocoderEnable_Type()
)
scVoicePrfNetVocoderEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNetVocoderEnable.setStatus("mandatory")


class _ScVoicePrfNetDataMode_Type(Integer32):
    """Custom type scVoicePrfNetDataMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_ScVoicePrfNetDataMode_Type.__name__ = "Integer32"
_ScVoicePrfNetDataMode_Object = MibTableColumn
scVoicePrfNetDataMode = _ScVoicePrfNetDataMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 9),
    _ScVoicePrfNetDataMode_Type()
)
scVoicePrfNetDataMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNetDataMode.setStatus("mandatory")


class _ScVoicePrfNetSignalingType_Type(Integer32):
    """Custom type scVoicePrfNetSignalingType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("a", 2),
          ("ab", 3),
          ("abcd", 4),
          ("ac15-dp", 9),
          ("ac15-dtmf", 8),
          ("none", 1))
    )


_ScVoicePrfNetSignalingType_Type.__name__ = "Integer32"
_ScVoicePrfNetSignalingType_Object = MibTableColumn
scVoicePrfNetSignalingType = _ScVoicePrfNetSignalingType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 10),
    _ScVoicePrfNetSignalingType_Type()
)
scVoicePrfNetSignalingType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNetSignalingType.setStatus("mandatory")


class _ScVoicePrfNetSigIdlePttrn_Type(Integer32):
    """Custom type scVoicePrfNetSigIdlePttrn based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("a0-b0-c0-d0", 16),
          ("a0-b0-c0-d1", 8),
          ("a0-b0-c1-d0", 4),
          ("a0-b0-c1-d1", 12),
          ("a0-b1-c0-d0", 2),
          ("a0-b1-c0-d1", 10),
          ("a0-b1-c1-d0", 6),
          ("a0-b1-c1-d1", 14),
          ("a1-b0-c0-d0", 1),
          ("a1-b0-c0-d1", 9),
          ("a1-b0-c1-d0", 5),
          ("a1-b0-c1-d1", 13),
          ("a1-b1-c0-d0", 3),
          ("a1-b1-c0-d1", 11),
          ("a1-b1-c1-d0", 7),
          ("a1-b1-c1-d1", 15))
    )


_ScVoicePrfNetSigIdlePttrn_Type.__name__ = "Integer32"
_ScVoicePrfNetSigIdlePttrn_Object = MibTableColumn
scVoicePrfNetSigIdlePttrn = _ScVoicePrfNetSigIdlePttrn_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 1, 1, 11),
    _ScVoicePrfNetSigIdlePttrn_Type()
)
scVoicePrfNetSigIdlePttrn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNetSigIdlePttrn.setStatus("mandatory")
_ScVoicePrfNodeTable_Object = MibTable
scVoicePrfNodeTable = _ScVoicePrfNodeTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2)
)
if mibBuilder.loadTexts:
    scVoicePrfNodeTable.setStatus("mandatory")
_ScVoicePrfNodeEntry_Object = MibTableRow
scVoicePrfNodeEntry = _ScVoicePrfNodeEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1)
)
scVoicePrfNodeEntry.setIndexNames(
    (0, "STMIB", "scVoicePrfNodeIndex"),
)
if mibBuilder.loadTexts:
    scVoicePrfNodeEntry.setStatus("mandatory")


class _ScVoicePrfNodeIndex_Type(Integer32):
    """Custom type scVoicePrfNodeIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_ScVoicePrfNodeIndex_Type.__name__ = "Integer32"
_ScVoicePrfNodeIndex_Object = MibTableColumn
scVoicePrfNodeIndex = _ScVoicePrfNodeIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 1),
    _ScVoicePrfNodeIndex_Type()
)
scVoicePrfNodeIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scVoicePrfNodeIndex.setStatus("mandatory")


class _ScVoicePrfNodeRdnGrpId_Type(Integer32):
    """Custom type scVoicePrfNodeRdnGrpId based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_ScVoicePrfNodeRdnGrpId_Type.__name__ = "Integer32"
_ScVoicePrfNodeRdnGrpId_Object = MibTableColumn
scVoicePrfNodeRdnGrpId = _ScVoicePrfNodeRdnGrpId_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 2),
    _ScVoicePrfNodeRdnGrpId_Type()
)
scVoicePrfNodeRdnGrpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNodeRdnGrpId.setStatus("mandatory")


class _ScVoicePrfNodeTxAudSrcMode_Type(Integer32):
    """Custom type scVoicePrfNodeTxAudSrcMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("silence", 2),
          ("toneDMW", 3))
    )


_ScVoicePrfNodeTxAudSrcMode_Type.__name__ = "Integer32"
_ScVoicePrfNodeTxAudSrcMode_Object = MibTableColumn
scVoicePrfNodeTxAudSrcMode = _ScVoicePrfNodeTxAudSrcMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 3),
    _ScVoicePrfNodeTxAudSrcMode_Type()
)
scVoicePrfNodeTxAudSrcMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNodeTxAudSrcMode.setStatus("mandatory")


class _ScVoicePrfNodeRxAudOutMode_Type(Integer32):
    """Custom type scVoicePrfNodeRxAudOutMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("silence", 2),
          ("toneDMW", 3))
    )


_ScVoicePrfNodeRxAudOutMode_Type.__name__ = "Integer32"
_ScVoicePrfNodeRxAudOutMode_Object = MibTableColumn
scVoicePrfNodeRxAudOutMode = _ScVoicePrfNodeRxAudOutMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 4),
    _ScVoicePrfNodeRxAudOutMode_Type()
)
scVoicePrfNodeRxAudOutMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNodeRxAudOutMode.setStatus("mandatory")


class _ScVoicePrfNodeEchoCancel_Type(Integer32):
    """Custom type scVoicePrfNodeEchoCancel based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_ScVoicePrfNodeEchoCancel_Type.__name__ = "Integer32"
_ScVoicePrfNodeEchoCancel_Object = MibTableColumn
scVoicePrfNodeEchoCancel = _ScVoicePrfNodeEchoCancel_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 5),
    _ScVoicePrfNodeEchoCancel_Type()
)
scVoicePrfNodeEchoCancel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNodeEchoCancel.setStatus("mandatory")


class _ScVoicePrfNodeNonLinear_Type(Integer32):
    """Custom type scVoicePrfNodeNonLinear based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_ScVoicePrfNodeNonLinear_Type.__name__ = "Integer32"
_ScVoicePrfNodeNonLinear_Object = MibTableColumn
scVoicePrfNodeNonLinear = _ScVoicePrfNodeNonLinear_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 6),
    _ScVoicePrfNodeNonLinear_Type()
)
scVoicePrfNodeNonLinear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNodeNonLinear.setStatus("mandatory")


class _ScVoicePrfNodeTxPCMGain_Type(Integer32):
    """Custom type scVoicePrfNodeTxPCMGain based on Integer32"""
    defaultValue = 166

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_ScVoicePrfNodeTxPCMGain_Type.__name__ = "Integer32"
_ScVoicePrfNodeTxPCMGain_Object = MibTableColumn
scVoicePrfNodeTxPCMGain = _ScVoicePrfNodeTxPCMGain_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 7),
    _ScVoicePrfNodeTxPCMGain_Type()
)
scVoicePrfNodeTxPCMGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNodeTxPCMGain.setStatus("mandatory")


class _ScVoicePrfNodeRxPCMGain_Type(Integer32):
    """Custom type scVoicePrfNodeRxPCMGain based on Integer32"""
    defaultValue = 166

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_ScVoicePrfNodeRxPCMGain_Type.__name__ = "Integer32"
_ScVoicePrfNodeRxPCMGain_Object = MibTableColumn
scVoicePrfNodeRxPCMGain = _ScVoicePrfNodeRxPCMGain_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 8),
    _ScVoicePrfNodeRxPCMGain_Type()
)
scVoicePrfNodeRxPCMGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNodeRxPCMGain.setStatus("mandatory")


class _ScVoicePrfNodePCMPhasorSize_Type(Integer32):
    """Custom type scVoicePrfNodePCMPhasorSize based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 255),
    )


_ScVoicePrfNodePCMPhasorSize_Type.__name__ = "Integer32"
_ScVoicePrfNodePCMPhasorSize_Object = MibTableColumn
scVoicePrfNodePCMPhasorSize = _ScVoicePrfNodePCMPhasorSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 9),
    _ScVoicePrfNodePCMPhasorSize_Type()
)
scVoicePrfNodePCMPhasorSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNodePCMPhasorSize.setStatus("mandatory")


class _ScVoicePrfNodeSubratePhSize_Type(Integer32):
    """Custom type scVoicePrfNodeSubratePhSize based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 100),
    )


_ScVoicePrfNodeSubratePhSize_Type.__name__ = "Integer32"
_ScVoicePrfNodeSubratePhSize_Object = MibTableColumn
scVoicePrfNodeSubratePhSize = _ScVoicePrfNodeSubratePhSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 10),
    _ScVoicePrfNodeSubratePhSize_Type()
)
scVoicePrfNodeSubratePhSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNodeSubratePhSize.setStatus("mandatory")


class _ScVoicePrfNodeNetSigMode_Type(Integer32):
    """Custom type scVoicePrfNodeNetSigMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("link", 3),
          ("st", 2))
    )


_ScVoicePrfNodeNetSigMode_Type.__name__ = "Integer32"
_ScVoicePrfNodeNetSigMode_Object = MibTableColumn
scVoicePrfNodeNetSigMode = _ScVoicePrfNodeNetSigMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 13, 2, 1, 11),
    _ScVoicePrfNodeNetSigMode_Type()
)
scVoicePrfNodeNetSigMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scVoicePrfNodeNetSigMode.setStatus("mandatory")
_ScCmntyAccess_ObjectIdentity = ObjectIdentity
scCmntyAccess = _ScCmntyAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14)
)
_ScCmntyAccessTable_Object = MibTable
scCmntyAccessTable = _ScCmntyAccessTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 1)
)
if mibBuilder.loadTexts:
    scCmntyAccessTable.setStatus("mandatory")
_ScCmntyAccessEntry_Object = MibTableRow
scCmntyAccessEntry = _ScCmntyAccessEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 1, 1)
)
scCmntyAccessEntry.setIndexNames(
    (0, "STMIB", "scCmntyAccessIndex"),
)
if mibBuilder.loadTexts:
    scCmntyAccessEntry.setStatus("mandatory")
_ScCmntyAccessIndex_Type = RecordIndex
_ScCmntyAccessIndex_Object = MibTableColumn
scCmntyAccessIndex = _ScCmntyAccessIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 1, 1, 1),
    _ScCmntyAccessIndex_Type()
)
scCmntyAccessIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scCmntyAccessIndex.setStatus("mandatory")


class _ScCmntyAccessControlMode_Type(Integer32):
    """Custom type scCmntyAccessControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("erase", 3))
    )


_ScCmntyAccessControlMode_Type.__name__ = "Integer32"
_ScCmntyAccessControlMode_Object = MibTableColumn
scCmntyAccessControlMode = _ScCmntyAccessControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 1, 1, 2),
    _ScCmntyAccessControlMode_Type()
)
scCmntyAccessControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyAccessControlMode.setStatus("mandatory")


class _ScCmntyAccessCommunityName_Type(DisplayString):
    """Custom type scCmntyAccessCommunityName based on DisplayString"""
    defaultValue = OctetString("public")

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 24),
    )


_ScCmntyAccessCommunityName_Type.__name__ = "DisplayString"
_ScCmntyAccessCommunityName_Object = MibTableColumn
scCmntyAccessCommunityName = _ScCmntyAccessCommunityName_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 1, 1, 3),
    _ScCmntyAccessCommunityName_Type()
)
scCmntyAccessCommunityName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyAccessCommunityName.setStatus("mandatory")
_ScCmntyMib2Table_Object = MibTable
scCmntyMib2Table = _ScCmntyMib2Table_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2)
)
if mibBuilder.loadTexts:
    scCmntyMib2Table.setStatus("mandatory")
_ScCmntyMib2Entry_Object = MibTableRow
scCmntyMib2Entry = _ScCmntyMib2Entry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1)
)
scCmntyMib2Entry.setIndexNames(
    (0, "STMIB", "scCmntyMib2Index"),
)
if mibBuilder.loadTexts:
    scCmntyMib2Entry.setStatus("mandatory")
_ScCmntyMib2Index_Type = RecordIndex
_ScCmntyMib2Index_Object = MibTableColumn
scCmntyMib2Index = _ScCmntyMib2Index_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 1),
    _ScCmntyMib2Index_Type()
)
scCmntyMib2Index.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scCmntyMib2Index.setStatus("mandatory")


class _ScCmntyMib2SystemAccess_Type(Integer32):
    """Custom type scCmntyMib2SystemAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyMib2SystemAccess_Type.__name__ = "Integer32"
_ScCmntyMib2SystemAccess_Object = MibTableColumn
scCmntyMib2SystemAccess = _ScCmntyMib2SystemAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 2),
    _ScCmntyMib2SystemAccess_Type()
)
scCmntyMib2SystemAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyMib2SystemAccess.setStatus("mandatory")


class _ScCmntyMib2InterfacesAccess_Type(Integer32):
    """Custom type scCmntyMib2InterfacesAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyMib2InterfacesAccess_Type.__name__ = "Integer32"
_ScCmntyMib2InterfacesAccess_Object = MibTableColumn
scCmntyMib2InterfacesAccess = _ScCmntyMib2InterfacesAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 3),
    _ScCmntyMib2InterfacesAccess_Type()
)
scCmntyMib2InterfacesAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyMib2InterfacesAccess.setStatus("mandatory")


class _ScCmntyMib2AtAccess_Type(Integer32):
    """Custom type scCmntyMib2AtAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyMib2AtAccess_Type.__name__ = "Integer32"
_ScCmntyMib2AtAccess_Object = MibTableColumn
scCmntyMib2AtAccess = _ScCmntyMib2AtAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 4),
    _ScCmntyMib2AtAccess_Type()
)
scCmntyMib2AtAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyMib2AtAccess.setStatus("mandatory")


class _ScCmntyMib2IpAccess_Type(Integer32):
    """Custom type scCmntyMib2IpAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyMib2IpAccess_Type.__name__ = "Integer32"
_ScCmntyMib2IpAccess_Object = MibTableColumn
scCmntyMib2IpAccess = _ScCmntyMib2IpAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 5),
    _ScCmntyMib2IpAccess_Type()
)
scCmntyMib2IpAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyMib2IpAccess.setStatus("mandatory")


class _ScCmntyMib2IcmpAccess_Type(Integer32):
    """Custom type scCmntyMib2IcmpAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyMib2IcmpAccess_Type.__name__ = "Integer32"
_ScCmntyMib2IcmpAccess_Object = MibTableColumn
scCmntyMib2IcmpAccess = _ScCmntyMib2IcmpAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 6),
    _ScCmntyMib2IcmpAccess_Type()
)
scCmntyMib2IcmpAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyMib2IcmpAccess.setStatus("mandatory")


class _ScCmntyMib2UdpAccess_Type(Integer32):
    """Custom type scCmntyMib2UdpAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyMib2UdpAccess_Type.__name__ = "Integer32"
_ScCmntyMib2UdpAccess_Object = MibTableColumn
scCmntyMib2UdpAccess = _ScCmntyMib2UdpAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 7),
    _ScCmntyMib2UdpAccess_Type()
)
scCmntyMib2UdpAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyMib2UdpAccess.setStatus("mandatory")


class _ScCmntyMib2SnmpAccess_Type(Integer32):
    """Custom type scCmntyMib2SnmpAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyMib2SnmpAccess_Type.__name__ = "Integer32"
_ScCmntyMib2SnmpAccess_Object = MibTableColumn
scCmntyMib2SnmpAccess = _ScCmntyMib2SnmpAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 2, 1, 8),
    _ScCmntyMib2SnmpAccess_Type()
)
scCmntyMib2SnmpAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyMib2SnmpAccess.setStatus("mandatory")
_ScCmntySecTable_Object = MibTable
scCmntySecTable = _ScCmntySecTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3)
)
if mibBuilder.loadTexts:
    scCmntySecTable.setStatus("mandatory")
_ScCmntySecEntry_Object = MibTableRow
scCmntySecEntry = _ScCmntySecEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1)
)
scCmntySecEntry.setIndexNames(
    (0, "STMIB", "scCmntySecIndex"),
)
if mibBuilder.loadTexts:
    scCmntySecEntry.setStatus("mandatory")
_ScCmntySecIndex_Type = RecordIndex
_ScCmntySecIndex_Object = MibTableColumn
scCmntySecIndex = _ScCmntySecIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 1),
    _ScCmntySecIndex_Type()
)
scCmntySecIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scCmntySecIndex.setStatus("mandatory")


class _ScCmntySecPartHeaderAccess_Type(Integer32):
    """Custom type scCmntySecPartHeaderAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecPartHeaderAccess_Type.__name__ = "Integer32"
_ScCmntySecPartHeaderAccess_Object = MibTableColumn
scCmntySecPartHeaderAccess = _ScCmntySecPartHeaderAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 2),
    _ScCmntySecPartHeaderAccess_Type()
)
scCmntySecPartHeaderAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecPartHeaderAccess.setStatus("mandatory")


class _ScCmntySecSystemProfileAccess_Type(Integer32):
    """Custom type scCmntySecSystemProfileAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecSystemProfileAccess_Type.__name__ = "Integer32"
_ScCmntySecSystemProfileAccess_Object = MibTableColumn
scCmntySecSystemProfileAccess = _ScCmntySecSystemProfileAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 3),
    _ScCmntySecSystemProfileAccess_Type()
)
scCmntySecSystemProfileAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecSystemProfileAccess.setStatus("mandatory")


class _ScCmntySecRootAccess_Type(Integer32):
    """Custom type scCmntySecRootAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecRootAccess_Type.__name__ = "Integer32"
_ScCmntySecRootAccess_Object = MibTableColumn
scCmntySecRootAccess = _ScCmntySecRootAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 4),
    _ScCmntySecRootAccess_Type()
)
scCmntySecRootAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecRootAccess.setStatus("mandatory")


class _ScCmntySecNodeAccess_Type(Integer32):
    """Custom type scCmntySecNodeAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecNodeAccess_Type.__name__ = "Integer32"
_ScCmntySecNodeAccess_Object = MibTableColumn
scCmntySecNodeAccess = _ScCmntySecNodeAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 5),
    _ScCmntySecNodeAccess_Type()
)
scCmntySecNodeAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecNodeAccess.setStatus("mandatory")


class _ScCmntySecTrapAccess_Type(Integer32):
    """Custom type scCmntySecTrapAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecTrapAccess_Type.__name__ = "Integer32"
_ScCmntySecTrapAccess_Object = MibTableColumn
scCmntySecTrapAccess = _ScCmntySecTrapAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 6),
    _ScCmntySecTrapAccess_Type()
)
scCmntySecTrapAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecTrapAccess.setStatus("mandatory")


class _ScCmntySecChanProfileAccess_Type(Integer32):
    """Custom type scCmntySecChanProfileAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecChanProfileAccess_Type.__name__ = "Integer32"
_ScCmntySecChanProfileAccess_Object = MibTableColumn
scCmntySecChanProfileAccess = _ScCmntySecChanProfileAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 7),
    _ScCmntySecChanProfileAccess_Type()
)
scCmntySecChanProfileAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecChanProfileAccess.setStatus("mandatory")


class _ScCmntySecSoftloadAccess_Type(Integer32):
    """Custom type scCmntySecSoftloadAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecSoftloadAccess_Type.__name__ = "Integer32"
_ScCmntySecSoftloadAccess_Object = MibTableColumn
scCmntySecSoftloadAccess = _ScCmntySecSoftloadAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 8),
    _ScCmntySecSoftloadAccess_Type()
)
scCmntySecSoftloadAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecSoftloadAccess.setStatus("mandatory")


class _ScCmntySecCPIAccess_Type(Integer32):
    """Custom type scCmntySecCPIAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecCPIAccess_Type.__name__ = "Integer32"
_ScCmntySecCPIAccess_Object = MibTableColumn
scCmntySecCPIAccess = _ScCmntySecCPIAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 9),
    _ScCmntySecCPIAccess_Type()
)
scCmntySecCPIAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecCPIAccess.setStatus("mandatory")


class _ScCmntySecModemAccess_Type(Integer32):
    """Custom type scCmntySecModemAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecModemAccess_Type.__name__ = "Integer32"
_ScCmntySecModemAccess_Object = MibTableColumn
scCmntySecModemAccess = _ScCmntySecModemAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 10),
    _ScCmntySecModemAccess_Type()
)
scCmntySecModemAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecModemAccess.setStatus("mandatory")


class _ScCmntySecIPAccess_Type(Integer32):
    """Custom type scCmntySecIPAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecIPAccess_Type.__name__ = "Integer32"
_ScCmntySecIPAccess_Object = MibTableColumn
scCmntySecIPAccess = _ScCmntySecIPAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 11),
    _ScCmntySecIPAccess_Type()
)
scCmntySecIPAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecIPAccess.setStatus("mandatory")


class _ScCmntySecLGMRoutingAccess_Type(Integer32):
    """Custom type scCmntySecLGMRoutingAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecLGMRoutingAccess_Type.__name__ = "Integer32"
_ScCmntySecLGMRoutingAccess_Object = MibTableColumn
scCmntySecLGMRoutingAccess = _ScCmntySecLGMRoutingAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 12),
    _ScCmntySecLGMRoutingAccess_Type()
)
scCmntySecLGMRoutingAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecLGMRoutingAccess.setStatus("mandatory")


class _ScCmntySecVoiceProfileAccess_Type(Integer32):
    """Custom type scCmntySecVoiceProfileAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecVoiceProfileAccess_Type.__name__ = "Integer32"
_ScCmntySecVoiceProfileAccess_Object = MibTableColumn
scCmntySecVoiceProfileAccess = _ScCmntySecVoiceProfileAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 13),
    _ScCmntySecVoiceProfileAccess_Type()
)
scCmntySecVoiceProfileAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecVoiceProfileAccess.setStatus("mandatory")


class _ScCmntySecCommunityAccess_Type(Integer32):
    """Custom type scCmntySecCommunityAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntySecCommunityAccess_Type.__name__ = "Integer32"
_ScCmntySecCommunityAccess_Object = MibTableColumn
scCmntySecCommunityAccess = _ScCmntySecCommunityAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 3, 1, 14),
    _ScCmntySecCommunityAccess_Type()
)
scCmntySecCommunityAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntySecCommunityAccess.setStatus("mandatory")
_ScCmntyRecfTable_Object = MibTable
scCmntyRecfTable = _ScCmntyRecfTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4)
)
if mibBuilder.loadTexts:
    scCmntyRecfTable.setStatus("mandatory")
_ScCmntyRecfEntry_Object = MibTableRow
scCmntyRecfEntry = _ScCmntyRecfEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1)
)
scCmntyRecfEntry.setIndexNames(
    (0, "STMIB", "scCmntyRecfIndex"),
)
if mibBuilder.loadTexts:
    scCmntyRecfEntry.setStatus("mandatory")
_ScCmntyRecfIndex_Type = RecordIndex
_ScCmntyRecfIndex_Object = MibTableColumn
scCmntyRecfIndex = _ScCmntyRecfIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 1),
    _ScCmntyRecfIndex_Type()
)
scCmntyRecfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scCmntyRecfIndex.setStatus("mandatory")


class _ScCmntyRecfPartHeader_Type(Integer32):
    """Custom type scCmntyRecfPartHeader based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfPartHeader_Type.__name__ = "Integer32"
_ScCmntyRecfPartHeader_Object = MibTableColumn
scCmntyRecfPartHeader = _ScCmntyRecfPartHeader_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 2),
    _ScCmntyRecfPartHeader_Type()
)
scCmntyRecfPartHeader.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfPartHeader.setStatus("mandatory")


class _ScCmntyRecfNodeAccess_Type(Integer32):
    """Custom type scCmntyRecfNodeAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfNodeAccess_Type.__name__ = "Integer32"
_ScCmntyRecfNodeAccess_Object = MibTableColumn
scCmntyRecfNodeAccess = _ScCmntyRecfNodeAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 3),
    _ScCmntyRecfNodeAccess_Type()
)
scCmntyRecfNodeAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfNodeAccess.setStatus("mandatory")


class _ScCmntyRecfNestAccess_Type(Integer32):
    """Custom type scCmntyRecfNestAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfNestAccess_Type.__name__ = "Integer32"
_ScCmntyRecfNestAccess_Object = MibTableColumn
scCmntyRecfNestAccess = _ScCmntyRecfNestAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 4),
    _ScCmntyRecfNestAccess_Type()
)
scCmntyRecfNestAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfNestAccess.setStatus("mandatory")


class _ScCmntyRecfSlotAccess_Type(Integer32):
    """Custom type scCmntyRecfSlotAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfSlotAccess_Type.__name__ = "Integer32"
_ScCmntyRecfSlotAccess_Object = MibTableColumn
scCmntyRecfSlotAccess = _ScCmntyRecfSlotAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 5),
    _ScCmntyRecfSlotAccess_Type()
)
scCmntyRecfSlotAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfSlotAccess.setStatus("mandatory")


class _ScCmntyRecfModuleAccess_Type(Integer32):
    """Custom type scCmntyRecfModuleAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfModuleAccess_Type.__name__ = "Integer32"
_ScCmntyRecfModuleAccess_Object = MibTableColumn
scCmntyRecfModuleAccess = _ScCmntyRecfModuleAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 6),
    _ScCmntyRecfModuleAccess_Type()
)
scCmntyRecfModuleAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfModuleAccess.setStatus("mandatory")


class _ScCmntyRecfPortAccess_Type(Integer32):
    """Custom type scCmntyRecfPortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfPortAccess_Type.__name__ = "Integer32"
_ScCmntyRecfPortAccess_Object = MibTableColumn
scCmntyRecfPortAccess = _ScCmntyRecfPortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 7),
    _ScCmntyRecfPortAccess_Type()
)
scCmntyRecfPortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfPortAccess.setStatus("mandatory")


class _ScCmntyRecfBundleAccess_Type(Integer32):
    """Custom type scCmntyRecfBundleAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfBundleAccess_Type.__name__ = "Integer32"
_ScCmntyRecfBundleAccess_Object = MibTableColumn
scCmntyRecfBundleAccess = _ScCmntyRecfBundleAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 8),
    _ScCmntyRecfBundleAccess_Type()
)
scCmntyRecfBundleAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfBundleAccess.setStatus("mandatory")


class _ScCmntyRecfINLAccess_Type(Integer32):
    """Custom type scCmntyRecfINLAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfINLAccess_Type.__name__ = "Integer32"
_ScCmntyRecfINLAccess_Object = MibTableColumn
scCmntyRecfINLAccess = _ScCmntyRecfINLAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 9),
    _ScCmntyRecfINLAccess_Type()
)
scCmntyRecfINLAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfINLAccess.setStatus("mandatory")


class _ScCmntyRecfTDMChannelAccess_Type(Integer32):
    """Custom type scCmntyRecfTDMChannelAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfTDMChannelAccess_Type.__name__ = "Integer32"
_ScCmntyRecfTDMChannelAccess_Object = MibTableColumn
scCmntyRecfTDMChannelAccess = _ScCmntyRecfTDMChannelAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 10),
    _ScCmntyRecfTDMChannelAccess_Type()
)
scCmntyRecfTDMChannelAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfTDMChannelAccess.setStatus("mandatory")


class _ScCmntyRecfFrRelayAccess_Type(Integer32):
    """Custom type scCmntyRecfFrRelayAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfFrRelayAccess_Type.__name__ = "Integer32"
_ScCmntyRecfFrRelayAccess_Object = MibTableColumn
scCmntyRecfFrRelayAccess = _ScCmntyRecfFrRelayAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 11),
    _ScCmntyRecfFrRelayAccess_Type()
)
scCmntyRecfFrRelayAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfFrRelayAccess.setStatus("mandatory")


class _ScCmntyRecfAd10PortAccess_Type(Integer32):
    """Custom type scCmntyRecfAd10PortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfAd10PortAccess_Type.__name__ = "Integer32"
_ScCmntyRecfAd10PortAccess_Object = MibTableColumn
scCmntyRecfAd10PortAccess = _ScCmntyRecfAd10PortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 12),
    _ScCmntyRecfAd10PortAccess_Type()
)
scCmntyRecfAd10PortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfAd10PortAccess.setStatus("mandatory")


class _ScCmntyRecfAsmPortAccess_Type(Integer32):
    """Custom type scCmntyRecfAsmPortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfAsmPortAccess_Type.__name__ = "Integer32"
_ScCmntyRecfAsmPortAccess_Object = MibTableColumn
scCmntyRecfAsmPortAccess = _ScCmntyRecfAsmPortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 13),
    _ScCmntyRecfAsmPortAccess_Type()
)
scCmntyRecfAsmPortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfAsmPortAccess.setStatus("mandatory")


class _ScCmntyRecfRtmPortAccess_Type(Integer32):
    """Custom type scCmntyRecfRtmPortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfRtmPortAccess_Type.__name__ = "Integer32"
_ScCmntyRecfRtmPortAccess_Object = MibTableColumn
scCmntyRecfRtmPortAccess = _ScCmntyRecfRtmPortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 14),
    _ScCmntyRecfRtmPortAccess_Type()
)
scCmntyRecfRtmPortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfRtmPortAccess.setStatus("mandatory")


class _ScCmntyRecfLgmPortAccess_Type(Integer32):
    """Custom type scCmntyRecfLgmPortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfLgmPortAccess_Type.__name__ = "Integer32"
_ScCmntyRecfLgmPortAccess_Object = MibTableColumn
scCmntyRecfLgmPortAccess = _ScCmntyRecfLgmPortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 15),
    _ScCmntyRecfLgmPortAccess_Type()
)
scCmntyRecfLgmPortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfLgmPortAccess.setStatus("mandatory")


class _ScCmntyRecfDsmPortAccess_Type(Integer32):
    """Custom type scCmntyRecfDsmPortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfDsmPortAccess_Type.__name__ = "Integer32"
_ScCmntyRecfDsmPortAccess_Object = MibTableColumn
scCmntyRecfDsmPortAccess = _ScCmntyRecfDsmPortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 16),
    _ScCmntyRecfDsmPortAccess_Type()
)
scCmntyRecfDsmPortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfDsmPortAccess.setStatus("mandatory")


class _ScCmntyRecfTranslationAccess_Type(Integer32):
    """Custom type scCmntyRecfTranslationAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfTranslationAccess_Type.__name__ = "Integer32"
_ScCmntyRecfTranslationAccess_Object = MibTableColumn
scCmntyRecfTranslationAccess = _ScCmntyRecfTranslationAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 17),
    _ScCmntyRecfTranslationAccess_Type()
)
scCmntyRecfTranslationAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfTranslationAccess.setStatus("mandatory")


class _ScCmntyRecfHwRscAccess_Type(Integer32):
    """Custom type scCmntyRecfHwRscAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRecfHwRscAccess_Type.__name__ = "Integer32"
_ScCmntyRecfHwRscAccess_Object = MibTableColumn
scCmntyRecfHwRscAccess = _ScCmntyRecfHwRscAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 4, 1, 18),
    _ScCmntyRecfHwRscAccess_Type()
)
scCmntyRecfHwRscAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRecfHwRscAccess.setStatus("mandatory")
_ScCmntyRestTable_Object = MibTable
scCmntyRestTable = _ScCmntyRestTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5)
)
if mibBuilder.loadTexts:
    scCmntyRestTable.setStatus("mandatory")
_ScCmntyRestEntry_Object = MibTableRow
scCmntyRestEntry = _ScCmntyRestEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1)
)
scCmntyRestEntry.setIndexNames(
    (0, "STMIB", "scCmntyRestIndex"),
)
if mibBuilder.loadTexts:
    scCmntyRestEntry.setStatus("mandatory")
_ScCmntyRestIndex_Type = RecordIndex
_ScCmntyRestIndex_Object = MibTableColumn
scCmntyRestIndex = _ScCmntyRestIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 1),
    _ScCmntyRestIndex_Type()
)
scCmntyRestIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scCmntyRestIndex.setStatus("mandatory")


class _ScCmntyRestNodeAccess_Type(Integer32):
    """Custom type scCmntyRestNodeAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestNodeAccess_Type.__name__ = "Integer32"
_ScCmntyRestNodeAccess_Object = MibTableColumn
scCmntyRestNodeAccess = _ScCmntyRestNodeAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 2),
    _ScCmntyRestNodeAccess_Type()
)
scCmntyRestNodeAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestNodeAccess.setStatus("mandatory")


class _ScCmntyRestNestAccess_Type(Integer32):
    """Custom type scCmntyRestNestAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestNestAccess_Type.__name__ = "Integer32"
_ScCmntyRestNestAccess_Object = MibTableColumn
scCmntyRestNestAccess = _ScCmntyRestNestAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 3),
    _ScCmntyRestNestAccess_Type()
)
scCmntyRestNestAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestNestAccess.setStatus("mandatory")


class _ScCmntyRestSlotAccess_Type(Integer32):
    """Custom type scCmntyRestSlotAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestSlotAccess_Type.__name__ = "Integer32"
_ScCmntyRestSlotAccess_Object = MibTableColumn
scCmntyRestSlotAccess = _ScCmntyRestSlotAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 4),
    _ScCmntyRestSlotAccess_Type()
)
scCmntyRestSlotAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestSlotAccess.setStatus("mandatory")


class _ScCmntyRestModuleAccess_Type(Integer32):
    """Custom type scCmntyRestModuleAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestModuleAccess_Type.__name__ = "Integer32"
_ScCmntyRestModuleAccess_Object = MibTableColumn
scCmntyRestModuleAccess = _ScCmntyRestModuleAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 5),
    _ScCmntyRestModuleAccess_Type()
)
scCmntyRestModuleAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestModuleAccess.setStatus("mandatory")


class _ScCmntyRestPortAccess_Type(Integer32):
    """Custom type scCmntyRestPortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestPortAccess_Type.__name__ = "Integer32"
_ScCmntyRestPortAccess_Object = MibTableColumn
scCmntyRestPortAccess = _ScCmntyRestPortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 6),
    _ScCmntyRestPortAccess_Type()
)
scCmntyRestPortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestPortAccess.setStatus("mandatory")


class _ScCmntyRestBundleAccess_Type(Integer32):
    """Custom type scCmntyRestBundleAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestBundleAccess_Type.__name__ = "Integer32"
_ScCmntyRestBundleAccess_Object = MibTableColumn
scCmntyRestBundleAccess = _ScCmntyRestBundleAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 7),
    _ScCmntyRestBundleAccess_Type()
)
scCmntyRestBundleAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestBundleAccess.setStatus("mandatory")


class _ScCmntyRestINLAccess_Type(Integer32):
    """Custom type scCmntyRestINLAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestINLAccess_Type.__name__ = "Integer32"
_ScCmntyRestINLAccess_Object = MibTableColumn
scCmntyRestINLAccess = _ScCmntyRestINLAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 8),
    _ScCmntyRestINLAccess_Type()
)
scCmntyRestINLAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestINLAccess.setStatus("mandatory")


class _ScCmntyRestINLContentsAccess_Type(Integer32):
    """Custom type scCmntyRestINLContentsAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestINLContentsAccess_Type.__name__ = "Integer32"
_ScCmntyRestINLContentsAccess_Object = MibTableColumn
scCmntyRestINLContentsAccess = _ScCmntyRestINLContentsAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 9),
    _ScCmntyRestINLContentsAccess_Type()
)
scCmntyRestINLContentsAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestINLContentsAccess.setStatus("mandatory")


class _ScCmntyRestChannelAccess_Type(Integer32):
    """Custom type scCmntyRestChannelAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestChannelAccess_Type.__name__ = "Integer32"
_ScCmntyRestChannelAccess_Object = MibTableColumn
scCmntyRestChannelAccess = _ScCmntyRestChannelAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 10),
    _ScCmntyRestChannelAccess_Type()
)
scCmntyRestChannelAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestChannelAccess.setStatus("mandatory")


class _ScCmntyRestAd10PortAccess_Type(Integer32):
    """Custom type scCmntyRestAd10PortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestAd10PortAccess_Type.__name__ = "Integer32"
_ScCmntyRestAd10PortAccess_Object = MibTableColumn
scCmntyRestAd10PortAccess = _ScCmntyRestAd10PortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 11),
    _ScCmntyRestAd10PortAccess_Type()
)
scCmntyRestAd10PortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestAd10PortAccess.setStatus("mandatory")


class _ScCmntyRestAsmPortAccess_Type(Integer32):
    """Custom type scCmntyRestAsmPortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestAsmPortAccess_Type.__name__ = "Integer32"
_ScCmntyRestAsmPortAccess_Object = MibTableColumn
scCmntyRestAsmPortAccess = _ScCmntyRestAsmPortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 12),
    _ScCmntyRestAsmPortAccess_Type()
)
scCmntyRestAsmPortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestAsmPortAccess.setStatus("mandatory")


class _ScCmntyRestTrkGrpAccess_Type(Integer32):
    """Custom type scCmntyRestTrkGrpAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestTrkGrpAccess_Type.__name__ = "Integer32"
_ScCmntyRestTrkGrpAccess_Object = MibTableColumn
scCmntyRestTrkGrpAccess = _ScCmntyRestTrkGrpAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 13),
    _ScCmntyRestTrkGrpAccess_Type()
)
scCmntyRestTrkGrpAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestTrkGrpAccess.setStatus("mandatory")


class _ScCmntyRestRtmPortAccess_Type(Integer32):
    """Custom type scCmntyRestRtmPortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestRtmPortAccess_Type.__name__ = "Integer32"
_ScCmntyRestRtmPortAccess_Object = MibTableColumn
scCmntyRestRtmPortAccess = _ScCmntyRestRtmPortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 14),
    _ScCmntyRestRtmPortAccess_Type()
)
scCmntyRestRtmPortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestRtmPortAccess.setStatus("mandatory")


class _ScCmntyRestLgmPortAccess_Type(Integer32):
    """Custom type scCmntyRestLgmPortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestLgmPortAccess_Type.__name__ = "Integer32"
_ScCmntyRestLgmPortAccess_Object = MibTableColumn
scCmntyRestLgmPortAccess = _ScCmntyRestLgmPortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 15),
    _ScCmntyRestLgmPortAccess_Type()
)
scCmntyRestLgmPortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestLgmPortAccess.setStatus("mandatory")


class _ScCmntyRestSafAccess_Type(Integer32):
    """Custom type scCmntyRestSafAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestSafAccess_Type.__name__ = "Integer32"
_ScCmntyRestSafAccess_Object = MibTableColumn
scCmntyRestSafAccess = _ScCmntyRestSafAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 16),
    _ScCmntyRestSafAccess_Type()
)
scCmntyRestSafAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestSafAccess.setStatus("mandatory")


class _ScCmntyRestDsmPortAccess_Type(Integer32):
    """Custom type scCmntyRestDsmPortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestDsmPortAccess_Type.__name__ = "Integer32"
_ScCmntyRestDsmPortAccess_Object = MibTableColumn
scCmntyRestDsmPortAccess = _ScCmntyRestDsmPortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 17),
    _ScCmntyRestDsmPortAccess_Type()
)
scCmntyRestDsmPortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestDsmPortAccess.setStatus("mandatory")


class _ScCmntyRestHwRscAccess_Type(Integer32):
    """Custom type scCmntyRestHwRscAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestHwRscAccess_Type.__name__ = "Integer32"
_ScCmntyRestHwRscAccess_Object = MibTableColumn
scCmntyRestHwRscAccess = _ScCmntyRestHwRscAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 5, 1, 18),
    _ScCmntyRestHwRscAccess_Type()
)
scCmntyRestHwRscAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestHwRscAccess.setStatus("mandatory")
_ScCmntyRestStTable_Object = MibTable
scCmntyRestStTable = _ScCmntyRestStTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6)
)
if mibBuilder.loadTexts:
    scCmntyRestStTable.setStatus("mandatory")
_ScCmntyRestStEntry_Object = MibTableRow
scCmntyRestStEntry = _ScCmntyRestStEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1)
)
scCmntyRestStEntry.setIndexNames(
    (0, "STMIB", "scCmntyRestStIndex"),
)
if mibBuilder.loadTexts:
    scCmntyRestStEntry.setStatus("mandatory")
_ScCmntyRestStIndex_Type = RecordIndex
_ScCmntyRestStIndex_Object = MibTableColumn
scCmntyRestStIndex = _ScCmntyRestStIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1, 1),
    _ScCmntyRestStIndex_Type()
)
scCmntyRestStIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scCmntyRestStIndex.setStatus("mandatory")


class _ScCmntyRestStModuleAccess_Type(Integer32):
    """Custom type scCmntyRestStModuleAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestStModuleAccess_Type.__name__ = "Integer32"
_ScCmntyRestStModuleAccess_Object = MibTableColumn
scCmntyRestStModuleAccess = _ScCmntyRestStModuleAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1, 2),
    _ScCmntyRestStModuleAccess_Type()
)
scCmntyRestStModuleAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestStModuleAccess.setStatus("mandatory")


class _ScCmntyRestStPortAccess_Type(Integer32):
    """Custom type scCmntyRestStPortAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestStPortAccess_Type.__name__ = "Integer32"
_ScCmntyRestStPortAccess_Object = MibTableColumn
scCmntyRestStPortAccess = _ScCmntyRestStPortAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1, 3),
    _ScCmntyRestStPortAccess_Type()
)
scCmntyRestStPortAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestStPortAccess.setStatus("mandatory")


class _ScCmntyRestStINLAccess_Type(Integer32):
    """Custom type scCmntyRestStINLAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestStINLAccess_Type.__name__ = "Integer32"
_ScCmntyRestStINLAccess_Object = MibTableColumn
scCmntyRestStINLAccess = _ScCmntyRestStINLAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1, 4),
    _ScCmntyRestStINLAccess_Type()
)
scCmntyRestStINLAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestStINLAccess.setStatus("mandatory")


class _ScCmntyRestStChannelAccess_Type(Integer32):
    """Custom type scCmntyRestStChannelAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestStChannelAccess_Type.__name__ = "Integer32"
_ScCmntyRestStChannelAccess_Object = MibTableColumn
scCmntyRestStChannelAccess = _ScCmntyRestStChannelAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1, 5),
    _ScCmntyRestStChannelAccess_Type()
)
scCmntyRestStChannelAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestStChannelAccess.setStatus("mandatory")


class _ScCmntyRestStAd10Access_Type(Integer32):
    """Custom type scCmntyRestStAd10Access based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyRestStAd10Access_Type.__name__ = "Integer32"
_ScCmntyRestStAd10Access_Object = MibTableColumn
scCmntyRestStAd10Access = _ScCmntyRestStAd10Access_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 6, 1, 6),
    _ScCmntyRestStAd10Access_Type()
)
scCmntyRestStAd10Access.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyRestStAd10Access.setStatus("mandatory")
_ScCmntyAlmTable_Object = MibTable
scCmntyAlmTable = _ScCmntyAlmTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7)
)
if mibBuilder.loadTexts:
    scCmntyAlmTable.setStatus("mandatory")
_ScCmntyAlmEntry_Object = MibTableRow
scCmntyAlmEntry = _ScCmntyAlmEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1)
)
scCmntyAlmEntry.setIndexNames(
    (0, "STMIB", "scCmntyAlmIndex"),
)
if mibBuilder.loadTexts:
    scCmntyAlmEntry.setStatus("mandatory")
_ScCmntyAlmIndex_Type = RecordIndex
_ScCmntyAlmIndex_Object = MibTableColumn
scCmntyAlmIndex = _ScCmntyAlmIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1, 1),
    _ScCmntyAlmIndex_Type()
)
scCmntyAlmIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scCmntyAlmIndex.setStatus("mandatory")


class _ScCmntyAlmPartHeader_Type(Integer32):
    """Custom type scCmntyAlmPartHeader based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyAlmPartHeader_Type.__name__ = "Integer32"
_ScCmntyAlmPartHeader_Object = MibTableColumn
scCmntyAlmPartHeader = _ScCmntyAlmPartHeader_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1, 2),
    _ScCmntyAlmPartHeader_Type()
)
scCmntyAlmPartHeader.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyAlmPartHeader.setStatus("mandatory")


class _ScCmntyAlmAlarmProfileAccess_Type(Integer32):
    """Custom type scCmntyAlmAlarmProfileAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyAlmAlarmProfileAccess_Type.__name__ = "Integer32"
_ScCmntyAlmAlarmProfileAccess_Object = MibTableColumn
scCmntyAlmAlarmProfileAccess = _ScCmntyAlmAlarmProfileAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1, 3),
    _ScCmntyAlmAlarmProfileAccess_Type()
)
scCmntyAlmAlarmProfileAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyAlmAlarmProfileAccess.setStatus("mandatory")


class _ScCmntyAlmAlarmLogAccess_Type(Integer32):
    """Custom type scCmntyAlmAlarmLogAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyAlmAlarmLogAccess_Type.__name__ = "Integer32"
_ScCmntyAlmAlarmLogAccess_Object = MibTableColumn
scCmntyAlmAlarmLogAccess = _ScCmntyAlmAlarmLogAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1, 4),
    _ScCmntyAlmAlarmLogAccess_Type()
)
scCmntyAlmAlarmLogAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyAlmAlarmLogAccess.setStatus("mandatory")


class _ScCmntyAlmAlarmRecordAccess_Type(Integer32):
    """Custom type scCmntyAlmAlarmRecordAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyAlmAlarmRecordAccess_Type.__name__ = "Integer32"
_ScCmntyAlmAlarmRecordAccess_Object = MibTableColumn
scCmntyAlmAlarmRecordAccess = _ScCmntyAlmAlarmRecordAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1, 5),
    _ScCmntyAlmAlarmRecordAccess_Type()
)
scCmntyAlmAlarmRecordAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyAlmAlarmRecordAccess.setStatus("mandatory")


class _ScCmntyAlmTrapAccess_Type(Integer32):
    """Custom type scCmntyAlmTrapAccess based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAccess", 1),
          ("readOnly", 2),
          ("readWrite", 3))
    )


_ScCmntyAlmTrapAccess_Type.__name__ = "Integer32"
_ScCmntyAlmTrapAccess_Object = MibTableColumn
scCmntyAlmTrapAccess = _ScCmntyAlmTrapAccess_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 1, 14, 7, 1, 6),
    _ScCmntyAlmTrapAccess_Type()
)
scCmntyAlmTrapAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scCmntyAlmTrapAccess.setStatus("mandatory")
_Resource_ObjectIdentity = ObjectIdentity
resource = _Resource_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2)
)
_ReConfig_ObjectIdentity = ObjectIdentity
reConfig = _ReConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1)
)
_RecfPartitionHeader_ObjectIdentity = ObjectIdentity
recfPartitionHeader = _RecfPartitionHeader_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 1)
)


class _RecfPartitionControl_Type(Integer32):
    """Custom type recfPartitionControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalidateCRC", 2),
          ("validateCRC", 1))
    )


_RecfPartitionControl_Type.__name__ = "Integer32"
_RecfPartitionControl_Object = MibScalar
recfPartitionControl = _RecfPartitionControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 1, 1),
    _RecfPartitionControl_Type()
)
recfPartitionControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    recfPartitionControl.setStatus("mandatory")


class _RecfPartitionCRCCheck_Type(Integer32):
    """Custom type recfPartitionCRCCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("succeed", 1))
    )


_RecfPartitionCRCCheck_Type.__name__ = "Integer32"
_RecfPartitionCRCCheck_Object = MibScalar
recfPartitionCRCCheck = _RecfPartitionCRCCheck_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 1, 2),
    _RecfPartitionCRCCheck_Type()
)
recfPartitionCRCCheck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfPartitionCRCCheck.setStatus("mandatory")


class _RecfPartitionFlushMode_Type(Integer32):
    """Custom type recfPartitionFlushMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfPartitionFlushMode_Type.__name__ = "Integer32"
_RecfPartitionFlushMode_Object = MibScalar
recfPartitionFlushMode = _RecfPartitionFlushMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 1, 3),
    _RecfPartitionFlushMode_Type()
)
recfPartitionFlushMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfPartitionFlushMode.setStatus("mandatory")
_RecfNode_ObjectIdentity = ObjectIdentity
recfNode = _RecfNode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2)
)
_RecfNodeEntry_ObjectIdentity = ObjectIdentity
recfNodeEntry = _RecfNodeEntry_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1)
)


class _RecfNodeUpdate_Type(Integer32):
    """Custom type recfNodeUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("updateNestReq", 3))
    )


_RecfNodeUpdate_Type.__name__ = "Integer32"
_RecfNodeUpdate_Object = MibScalar
recfNodeUpdate = _RecfNodeUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 1),
    _RecfNodeUpdate_Type()
)
recfNodeUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfNodeUpdate.setStatus("mandatory")


class _RecfNodeDescr_Type(DisplayString):
    """Custom type recfNodeDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RecfNodeDescr_Type.__name__ = "DisplayString"
_RecfNodeDescr_Object = MibScalar
recfNodeDescr = _RecfNodeDescr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 2),
    _RecfNodeDescr_Type()
)
recfNodeDescr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfNodeDescr.setStatus("mandatory")


class _RecfNodeContact_Type(DisplayString):
    """Custom type recfNodeContact based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RecfNodeContact_Type.__name__ = "DisplayString"
_RecfNodeContact_Object = MibScalar
recfNodeContact = _RecfNodeContact_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 3),
    _RecfNodeContact_Type()
)
recfNodeContact.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfNodeContact.setStatus("mandatory")


class _RecfNodeName_Type(DisplayString):
    """Custom type recfNodeName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RecfNodeName_Type.__name__ = "DisplayString"
_RecfNodeName_Object = MibScalar
recfNodeName = _RecfNodeName_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 4),
    _RecfNodeName_Type()
)
recfNodeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfNodeName.setStatus("mandatory")


class _RecfNodeLocation_Type(DisplayString):
    """Custom type recfNodeLocation based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RecfNodeLocation_Type.__name__ = "DisplayString"
_RecfNodeLocation_Object = MibScalar
recfNodeLocation = _RecfNodeLocation_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 5),
    _RecfNodeLocation_Type()
)
recfNodeLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfNodeLocation.setStatus("mandatory")


class _RecfNodeNumberOfNest_Type(Integer32):
    """Custom type recfNodeNumberOfNest based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_RecfNodeNumberOfNest_Type.__name__ = "Integer32"
_RecfNodeNumberOfNest_Object = MibScalar
recfNodeNumberOfNest = _RecfNodeNumberOfNest_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 6),
    _RecfNodeNumberOfNest_Type()
)
recfNodeNumberOfNest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfNodeNumberOfNest.setStatus("mandatory")


class _RecfNodeClockSwitch_Type(Integer32):
    """Custom type recfNodeClockSwitch based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fast", 2),
          ("normal", 1))
    )


_RecfNodeClockSwitch_Type.__name__ = "Integer32"
_RecfNodeClockSwitch_Object = MibScalar
recfNodeClockSwitch = _RecfNodeClockSwitch_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 7),
    _RecfNodeClockSwitch_Type()
)
recfNodeClockSwitch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfNodeClockSwitch.setStatus("mandatory")


class _RecfNodeAlarmRelay_Type(Integer32):
    """Custom type recfNodeAlarmRelay based on Integer32"""
    defaultValue = 19

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("disableAlarmRelay", 20),
          ("enableAlarmRelay", 19))
    )


_RecfNodeAlarmRelay_Type.__name__ = "Integer32"
_RecfNodeAlarmRelay_Object = MibScalar
recfNodeAlarmRelay = _RecfNodeAlarmRelay_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 1, 8),
    _RecfNodeAlarmRelay_Type()
)
recfNodeAlarmRelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfNodeAlarmRelay.setStatus("mandatory")
_RecfClockTable_Object = MibTable
recfClockTable = _RecfClockTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2)
)
if mibBuilder.loadTexts:
    recfClockTable.setStatus("mandatory")
_RecfClockEntry_Object = MibTableRow
recfClockEntry = _RecfClockEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1)
)
recfClockEntry.setIndexNames(
    (0, "STMIB", "recfClockIndex"),
)
if mibBuilder.loadTexts:
    recfClockEntry.setStatus("mandatory")


class _RecfClockIndex_Type(Integer32):
    """Custom type recfClockIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_RecfClockIndex_Type.__name__ = "Integer32"
_RecfClockIndex_Object = MibTableColumn
recfClockIndex = _RecfClockIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 1),
    _RecfClockIndex_Type()
)
recfClockIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfClockIndex.setStatus("mandatory")


class _RecfClockStartMode_Type(Integer32):
    """Custom type recfClockStartMode based on Integer32"""
    defaultValue = 44

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              44)
        )
    )
    namedValues = NamedValues(
        *(("active", 44),
          ("erase", 3))
    )


_RecfClockStartMode_Type.__name__ = "Integer32"
_RecfClockStartMode_Object = MibTableColumn
recfClockStartMode = _RecfClockStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 2),
    _RecfClockStartMode_Type()
)
recfClockStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfClockStartMode.setStatus("mandatory")


class _RecfClockUpdate_Type(Integer32):
    """Custom type recfClockUpdate based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("updateReq", 2))
    )


_RecfClockUpdate_Type.__name__ = "Integer32"
_RecfClockUpdate_Object = MibTableColumn
recfClockUpdate = _RecfClockUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 3),
    _RecfClockUpdate_Type()
)
recfClockUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfClockUpdate.setStatus("mandatory")


class _RecfClockType_Type(Integer32):
    """Custom type recfClockType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("internal", 1),
          ("portRxDep", 5),
          ("portRxInd", 4),
          ("portTx", 6),
          ("station1", 2),
          ("station2", 3))
    )


_RecfClockType_Type.__name__ = "Integer32"
_RecfClockType_Object = MibTableColumn
recfClockType = _RecfClockType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 4),
    _RecfClockType_Type()
)
recfClockType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfClockType.setStatus("mandatory")


class _RecfClockStationSpeed_Type(Integer32):
    """Custom type recfClockStationSpeed based on Integer32"""
    defaultValue = 52

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86)
        )
    )
    namedValues = NamedValues(
        *(("s1008000", 71),
          ("s1024000", 48),
          ("s1064000", 70),
          ("s1088000", 69),
          ("s112000", 31),
          ("s1120000", 68),
          ("s1152000", 49),
          ("s1176000", 67),
          ("s12000", 13),
          ("s1216000", 66),
          ("s1232000", 65),
          ("s128000", 32),
          ("s1280000", 64),
          ("s1288000", 63),
          ("s1334400", 50),
          ("s1408000", 62),
          ("s14400", 14),
          ("s144000", 33),
          ("s1472000", 61),
          ("s153600", 34),
          ("s1536000", 51),
          ("s1544000", 52),
          ("s16000", 15),
          ("s1600000", 60),
          ("s1664000", 59),
          ("s168000", 35),
          ("s1728000", 58),
          ("s1792000", 57),
          ("s1856000", 56),
          ("s19200", 16),
          ("s192000", 36),
          ("s1920000", 53),
          ("s1984000", 54),
          ("s2048000", 55),
          ("s224000", 37),
          ("s230400", 38),
          ("s2400", 1),
          ("s24000", 17),
          ("s256000", 39),
          ("s280000", 86),
          ("s28800", 18),
          ("s3200", 2),
          ("s32000", 19),
          ("s320000", 85),
          ("s336000", 84),
          ("s3600", 3),
          ("s38400", 20),
          ("s384000", 40),
          ("s392000", 83),
          ("s4000", 4),
          ("s40800", 21),
          ("s448000", 41),
          ("s460800", 42),
          ("s4800", 5),
          ("s48000", 22),
          ("s50000", 23),
          ("s504000", 82),
          ("s512000", 43),
          ("s5600", 6),
          ("s56000", 24),
          ("s560000", 81),
          ("s57600", 25),
          ("s576000", 44),
          ("s6000", 7),
          ("s616000", 80),
          ("s6400", 8),
          ("s64000", 26),
          ("s640000", 79),
          ("s672000", 45),
          ("s704000", 78),
          ("s7200", 9),
          ("s72000", 27),
          ("s728000", 77),
          ("s76800", 28),
          ("s768000", 46),
          ("s784000", 76),
          ("s8000", 10),
          ("s80000", 29),
          ("s832000", 75),
          ("s8400", 11),
          ("s840000", 74),
          ("s896000", 47),
          ("s952000", 73),
          ("s9600", 12),
          ("s96000", 30),
          ("s960000", 72))
    )


_RecfClockStationSpeed_Type.__name__ = "Integer32"
_RecfClockStationSpeed_Object = MibTableColumn
recfClockStationSpeed = _RecfClockStationSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 5),
    _RecfClockStationSpeed_Type()
)
recfClockStationSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfClockStationSpeed.setStatus("mandatory")
_RecfClockPortSource_Type = PortAddr
_RecfClockPortSource_Object = MibTableColumn
recfClockPortSource = _RecfClockPortSource_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 6),
    _RecfClockPortSource_Type()
)
recfClockPortSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfClockPortSource.setStatus("mandatory")


class _RecfClockQuality_Type(Integer32):
    """Custom type recfClockQuality based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 2))
    )


_RecfClockQuality_Type.__name__ = "Integer32"
_RecfClockQuality_Object = MibTableColumn
recfClockQuality = _RecfClockQuality_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 7),
    _RecfClockQuality_Type()
)
recfClockQuality.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfClockQuality.setStatus("mandatory")


class _RecfClockPriority_Type(Integer32):
    """Custom type recfClockPriority based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_RecfClockPriority_Type.__name__ = "Integer32"
_RecfClockPriority_Object = MibTableColumn
recfClockPriority = _RecfClockPriority_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 2, 1, 8),
    _RecfClockPriority_Type()
)
recfClockPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfClockPriority.setStatus("mandatory")
_RecfAvailResourceTable_Object = MibTable
recfAvailResourceTable = _RecfAvailResourceTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 3)
)
if mibBuilder.loadTexts:
    recfAvailResourceTable.setStatus("mandatory")
_RecfAvailResourceEntry_Object = MibTableRow
recfAvailResourceEntry = _RecfAvailResourceEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 3, 1)
)
recfAvailResourceEntry.setIndexNames(
    (0, "STMIB", "recfAvailResourceType"),
)
if mibBuilder.loadTexts:
    recfAvailResourceEntry.setStatus("mandatory")


class _RecfAvailResourceType_Type(Integer32):
    """Custom type recfAvailResourceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("link2TranslationIndex", 1)
    )


_RecfAvailResourceType_Type.__name__ = "Integer32"
_RecfAvailResourceType_Object = MibTableColumn
recfAvailResourceType = _RecfAvailResourceType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 3, 1, 1),
    _RecfAvailResourceType_Type()
)
recfAvailResourceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAvailResourceType.setStatus("mandatory")


class _RecfAvailResourceId_Type(OctetString):
    """Custom type recfAvailResourceId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 6),
    )


_RecfAvailResourceId_Type.__name__ = "OctetString"
_RecfAvailResourceId_Object = MibTableColumn
recfAvailResourceId = _RecfAvailResourceId_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 2, 3, 1, 2),
    _RecfAvailResourceId_Type()
)
recfAvailResourceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAvailResourceId.setStatus("mandatory")
_RecfNestTable_Object = MibTable
recfNestTable = _RecfNestTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 3)
)
if mibBuilder.loadTexts:
    recfNestTable.setStatus("mandatory")
_RecfNestEntry_Object = MibTableRow
recfNestEntry = _RecfNestEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 3, 1)
)
recfNestEntry.setIndexNames(
    (0, "STMIB", "recfNestAddr"),
)
if mibBuilder.loadTexts:
    recfNestEntry.setStatus("mandatory")
_RecfNestAddr_Type = NestAddr
_RecfNestAddr_Object = MibTableColumn
recfNestAddr = _RecfNestAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 3, 1, 1),
    _RecfNestAddr_Type()
)
recfNestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfNestAddr.setStatus("mandatory")


class _RecfNestDesc_Type(DisplayString):
    """Custom type recfNestDesc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_RecfNestDesc_Type.__name__ = "DisplayString"
_RecfNestDesc_Object = MibTableColumn
recfNestDesc = _RecfNestDesc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 3, 1, 2),
    _RecfNestDesc_Type()
)
recfNestDesc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfNestDesc.setStatus("mandatory")
_RecfSlotTable_Object = MibTable
recfSlotTable = _RecfSlotTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4)
)
if mibBuilder.loadTexts:
    recfSlotTable.setStatus("mandatory")
_RecfSlotEntry_Object = MibTableRow
recfSlotEntry = _RecfSlotEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1)
)
recfSlotEntry.setIndexNames(
    (0, "STMIB", "recfSlotAddr"),
)
if mibBuilder.loadTexts:
    recfSlotEntry.setStatus("mandatory")
_RecfSlotAddr_Type = SlotAddr
_RecfSlotAddr_Object = MibTableColumn
recfSlotAddr = _RecfSlotAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 1),
    _RecfSlotAddr_Type()
)
recfSlotAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfSlotAddr.setStatus("mandatory")


class _RecfSlotModuleStartMode_Type(Integer32):
    """Custom type recfSlotModuleStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfSlotModuleStartMode_Type.__name__ = "Integer32"
_RecfSlotModuleStartMode_Object = MibTableColumn
recfSlotModuleStartMode = _RecfSlotModuleStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 2),
    _RecfSlotModuleStartMode_Type()
)
recfSlotModuleStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotModuleStartMode.setStatus("mandatory")


class _RecfSlotUpdate_Type(Integer32):
    """Custom type recfSlotUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3),
          ("updateReq", 2))
    )


_RecfSlotUpdate_Type.__name__ = "Integer32"
_RecfSlotUpdate_Object = MibTableColumn
recfSlotUpdate = _RecfSlotUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 3),
    _RecfSlotUpdate_Type()
)
recfSlotUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfSlotUpdate.setStatus("mandatory")


class _RecfSlotModuleDesc_Type(DisplayString):
    """Custom type recfSlotModuleDesc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 62),
    )


_RecfSlotModuleDesc_Type.__name__ = "DisplayString"
_RecfSlotModuleDesc_Object = MibTableColumn
recfSlotModuleDesc = _RecfSlotModuleDesc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 4),
    _RecfSlotModuleDesc_Type()
)
recfSlotModuleDesc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotModuleDesc.setStatus("mandatory")


class _RecfSlotModuleType_Type(Integer32):
    """Custom type recfSlotModuleType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11,
              12,
              14,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("asm", 9),
          ("dsm", 19),
          ("e1m", 6),
          ("e3m", 20),
          ("fsm", 11),
          ("lgm", 8),
          ("lxm", 3),
          ("ncp", 1),
          ("rtm", 14),
          ("rxm", 4),
          ("sdm", 12),
          ("sgm", 7),
          ("t1m", 5))
    )


_RecfSlotModuleType_Type.__name__ = "Integer32"
_RecfSlotModuleType_Object = MibTableColumn
recfSlotModuleType = _RecfSlotModuleType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 5),
    _RecfSlotModuleType_Type()
)
recfSlotModuleType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotModuleType.setStatus("mandatory")


class _RecfSlotModuleSubType_Type(Integer32):
    """Custom type recfSlotModuleSubType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfSlotModuleSubType_Type.__name__ = "Integer32"
_RecfSlotModuleSubType_Object = MibTableColumn
recfSlotModuleSubType = _RecfSlotModuleSubType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 6),
    _RecfSlotModuleSubType_Type()
)
recfSlotModuleSubType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotModuleSubType.setStatus("mandatory")


class _RecfSlotRedundantMode_Type(Integer32):
    """Custom type recfSlotRedundantMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("group", 3),
          ("none", 1),
          ("oneToOne", 2))
    )


_RecfSlotRedundantMode_Type.__name__ = "Integer32"
_RecfSlotRedundantMode_Object = MibTableColumn
recfSlotRedundantMode = _RecfSlotRedundantMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 7),
    _RecfSlotRedundantMode_Type()
)
recfSlotRedundantMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotRedundantMode.setStatus("mandatory")


class _RecfSlotGroupID_Type(Integer32):
    """Custom type recfSlotGroupID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_RecfSlotGroupID_Type.__name__ = "Integer32"
_RecfSlotGroupID_Object = MibTableColumn
recfSlotGroupID = _RecfSlotGroupID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 8),
    _RecfSlotGroupID_Type()
)
recfSlotGroupID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotGroupID.setStatus("mandatory")


class _RecfSlotModuleMaxBypass_Type(Integer32):
    """Custom type recfSlotModuleMaxBypass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RecfSlotModuleMaxBypass_Type.__name__ = "Integer32"
_RecfSlotModuleMaxBypass_Object = MibTableColumn
recfSlotModuleMaxBypass = _RecfSlotModuleMaxBypass_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 9),
    _RecfSlotModuleMaxBypass_Type()
)
recfSlotModuleMaxBypass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotModuleMaxBypass.setStatus("mandatory")


class _RecfSlotModuleMaxSource_Type(Integer32):
    """Custom type recfSlotModuleMaxSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RecfSlotModuleMaxSource_Type.__name__ = "Integer32"
_RecfSlotModuleMaxSource_Object = MibTableColumn
recfSlotModuleMaxSource = _RecfSlotModuleMaxSource_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 10),
    _RecfSlotModuleMaxSource_Type()
)
recfSlotModuleMaxSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotModuleMaxSource.setStatus("mandatory")


class _RecfSlotModuleStartDiagMask_Type(OctetString):
    """Custom type recfSlotModuleStartDiagMask based on OctetString"""
    defaultHexValue = "00000000"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RecfSlotModuleStartDiagMask_Type.__name__ = "OctetString"
_RecfSlotModuleStartDiagMask_Object = MibTableColumn
recfSlotModuleStartDiagMask = _RecfSlotModuleStartDiagMask_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 11),
    _RecfSlotModuleStartDiagMask_Type()
)
recfSlotModuleStartDiagMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotModuleStartDiagMask.setStatus("mandatory")


class _RecfSlotModuleBgdDiagMask_Type(OctetString):
    """Custom type recfSlotModuleBgdDiagMask based on OctetString"""
    defaultHexValue = "00000000"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RecfSlotModuleBgdDiagMask_Type.__name__ = "OctetString"
_RecfSlotModuleBgdDiagMask_Object = MibTableColumn
recfSlotModuleBgdDiagMask = _RecfSlotModuleBgdDiagMask_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 12),
    _RecfSlotModuleBgdDiagMask_Type()
)
recfSlotModuleBgdDiagMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotModuleBgdDiagMask.setStatus("mandatory")


class _RecfSlotModulePortDiagMask_Type(OctetString):
    """Custom type recfSlotModulePortDiagMask based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(64, 64),
    )


_RecfSlotModulePortDiagMask_Type.__name__ = "OctetString"
_RecfSlotModulePortDiagMask_Object = MibTableColumn
recfSlotModulePortDiagMask = _RecfSlotModulePortDiagMask_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 13),
    _RecfSlotModulePortDiagMask_Type()
)
recfSlotModulePortDiagMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotModulePortDiagMask.setStatus("mandatory")


class _RecfSlotModuleDiagoseMode_Type(Integer32):
    """Custom type recfSlotModuleDiagoseMode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RecfSlotModuleDiagoseMode_Type.__name__ = "Integer32"
_RecfSlotModuleDiagoseMode_Object = MibTableColumn
recfSlotModuleDiagoseMode = _RecfSlotModuleDiagoseMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 14),
    _RecfSlotModuleDiagoseMode_Type()
)
recfSlotModuleDiagoseMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotModuleDiagoseMode.setStatus("mandatory")


class _RecfSlotModuleStartDiagMaskExt_Type(OctetString):
    """Custom type recfSlotModuleStartDiagMaskExt based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RecfSlotModuleStartDiagMaskExt_Type.__name__ = "OctetString"
_RecfSlotModuleStartDiagMaskExt_Object = MibTableColumn
recfSlotModuleStartDiagMaskExt = _RecfSlotModuleStartDiagMaskExt_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 15),
    _RecfSlotModuleStartDiagMaskExt_Type()
)
recfSlotModuleStartDiagMaskExt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotModuleStartDiagMaskExt.setStatus("mandatory")


class _RecfSlotModuleBgdDiagMaskExt_Type(OctetString):
    """Custom type recfSlotModuleBgdDiagMaskExt based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RecfSlotModuleBgdDiagMaskExt_Type.__name__ = "OctetString"
_RecfSlotModuleBgdDiagMaskExt_Object = MibTableColumn
recfSlotModuleBgdDiagMaskExt = _RecfSlotModuleBgdDiagMaskExt_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 4, 1, 16),
    _RecfSlotModuleBgdDiagMaskExt_Type()
)
recfSlotModuleBgdDiagMaskExt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSlotModuleBgdDiagMaskExt.setStatus("mandatory")
_RecfModule_ObjectIdentity = ObjectIdentity
recfModule = _RecfModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5)
)
_RecfModuleFsm16Table_Object = MibTable
recfModuleFsm16Table = _RecfModuleFsm16Table_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 1)
)
if mibBuilder.loadTexts:
    recfModuleFsm16Table.setStatus("mandatory")
_RecfModuleFsm16Entry_Object = MibTableRow
recfModuleFsm16Entry = _RecfModuleFsm16Entry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 1, 1)
)
recfModuleFsm16Entry.setIndexNames(
    (0, "STMIB", "recfModuleFsm16Addr"),
)
if mibBuilder.loadTexts:
    recfModuleFsm16Entry.setStatus("mandatory")
_RecfModuleFsm16Addr_Type = SlotAddr
_RecfModuleFsm16Addr_Object = MibTableColumn
recfModuleFsm16Addr = _RecfModuleFsm16Addr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 1, 1, 1),
    _RecfModuleFsm16Addr_Type()
)
recfModuleFsm16Addr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfModuleFsm16Addr.setStatus("mandatory")


class _RecfModuleFsm16Partition_Type(OctetString):
    """Custom type recfModuleFsm16Partition based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(32, 32),
    )


_RecfModuleFsm16Partition_Type.__name__ = "OctetString"
_RecfModuleFsm16Partition_Object = MibTableColumn
recfModuleFsm16Partition = _RecfModuleFsm16Partition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 1, 1, 2),
    _RecfModuleFsm16Partition_Type()
)
recfModuleFsm16Partition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleFsm16Partition.setStatus("mandatory")
_RecfModuleFsm64Table_Object = MibTable
recfModuleFsm64Table = _RecfModuleFsm64Table_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 2)
)
if mibBuilder.loadTexts:
    recfModuleFsm64Table.setStatus("mandatory")
_RecfModuleFsm64Entry_Object = MibTableRow
recfModuleFsm64Entry = _RecfModuleFsm64Entry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 2, 1)
)
recfModuleFsm64Entry.setIndexNames(
    (0, "STMIB", "recfModuleFsm64Addr"),
)
if mibBuilder.loadTexts:
    recfModuleFsm64Entry.setStatus("mandatory")
_RecfModuleFsm64Addr_Type = SlotAddr
_RecfModuleFsm64Addr_Object = MibTableColumn
recfModuleFsm64Addr = _RecfModuleFsm64Addr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 2, 1, 1),
    _RecfModuleFsm64Addr_Type()
)
recfModuleFsm64Addr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfModuleFsm64Addr.setStatus("mandatory")


class _RecfModuleFsm64Partition_Type(OctetString):
    """Custom type recfModuleFsm64Partition based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(128, 128),
    )


_RecfModuleFsm64Partition_Type.__name__ = "OctetString"
_RecfModuleFsm64Partition_Object = MibTableColumn
recfModuleFsm64Partition = _RecfModuleFsm64Partition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 2, 1, 2),
    _RecfModuleFsm64Partition_Type()
)
recfModuleFsm64Partition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleFsm64Partition.setStatus("mandatory")
_RecfModuleSgmAgTable_Object = MibTable
recfModuleSgmAgTable = _RecfModuleSgmAgTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 3)
)
if mibBuilder.loadTexts:
    recfModuleSgmAgTable.setStatus("mandatory")
_RecfModuleSgmAgEntry_Object = MibTableRow
recfModuleSgmAgEntry = _RecfModuleSgmAgEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 3, 1)
)
recfModuleSgmAgEntry.setIndexNames(
    (0, "STMIB", "recfModuleSgmAgAddr"),
)
if mibBuilder.loadTexts:
    recfModuleSgmAgEntry.setStatus("mandatory")
_RecfModuleSgmAgAddr_Type = SlotAddr
_RecfModuleSgmAgAddr_Object = MibTableColumn
recfModuleSgmAgAddr = _RecfModuleSgmAgAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 3, 1, 1),
    _RecfModuleSgmAgAddr_Type()
)
recfModuleSgmAgAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfModuleSgmAgAddr.setStatus("mandatory")


class _RecfModuleSgmAgPartition_Type(OctetString):
    """Custom type recfModuleSgmAgPartition based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(64, 64),
    )


_RecfModuleSgmAgPartition_Type.__name__ = "OctetString"
_RecfModuleSgmAgPartition_Object = MibTableColumn
recfModuleSgmAgPartition = _RecfModuleSgmAgPartition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 3, 1, 2),
    _RecfModuleSgmAgPartition_Type()
)
recfModuleSgmAgPartition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleSgmAgPartition.setStatus("mandatory")
_RecfModuleAsmTable_Object = MibTable
recfModuleAsmTable = _RecfModuleAsmTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4)
)
if mibBuilder.loadTexts:
    recfModuleAsmTable.setStatus("mandatory")
_RecfModuleAsmEntry_Object = MibTableRow
recfModuleAsmEntry = _RecfModuleAsmEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4, 1)
)
recfModuleAsmEntry.setIndexNames(
    (0, "STMIB", "recfModuleAsmAddr"),
)
if mibBuilder.loadTexts:
    recfModuleAsmEntry.setStatus("mandatory")
_RecfModuleAsmAddr_Type = SlotAddr
_RecfModuleAsmAddr_Object = MibTableColumn
recfModuleAsmAddr = _RecfModuleAsmAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4, 1, 1),
    _RecfModuleAsmAddr_Type()
)
recfModuleAsmAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfModuleAsmAddr.setStatus("mandatory")


class _RecfModuleAsmPartition_Type(OctetString):
    """Custom type recfModuleAsmPartition based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(32, 32),
    )


_RecfModuleAsmPartition_Type.__name__ = "OctetString"
_RecfModuleAsmPartition_Object = MibTableColumn
recfModuleAsmPartition = _RecfModuleAsmPartition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4, 1, 2),
    _RecfModuleAsmPartition_Type()
)
recfModuleAsmPartition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleAsmPartition.setStatus("mandatory")


class _RecfModuleAsmCelpPartition_Type(OctetString):
    """Custom type recfModuleAsmCelpPartition based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(32, 32),
    )


_RecfModuleAsmCelpPartition_Type.__name__ = "OctetString"
_RecfModuleAsmCelpPartition_Object = MibTableColumn
recfModuleAsmCelpPartition = _RecfModuleAsmCelpPartition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4, 1, 3),
    _RecfModuleAsmCelpPartition_Type()
)
recfModuleAsmCelpPartition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleAsmCelpPartition.setStatus("mandatory")


class _RecfModuleAsmMinCelpPorts_Type(Integer32):
    """Custom type recfModuleAsmMinCelpPorts based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RecfModuleAsmMinCelpPorts_Type.__name__ = "Integer32"
_RecfModuleAsmMinCelpPorts_Object = MibTableColumn
recfModuleAsmMinCelpPorts = _RecfModuleAsmMinCelpPorts_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4, 1, 4),
    _RecfModuleAsmMinCelpPorts_Type()
)
recfModuleAsmMinCelpPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleAsmMinCelpPorts.setStatus("mandatory")


class _RecfModuleAsmApplType_Type(Integer32):
    """Custom type recfModuleAsmApplType based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("adpcm", 3),
          ("celp-atc", 2),
          ("mixed", 255),
          ("x50", 1))
    )


_RecfModuleAsmApplType_Type.__name__ = "Integer32"
_RecfModuleAsmApplType_Object = MibTableColumn
recfModuleAsmApplType = _RecfModuleAsmApplType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 4, 1, 5),
    _RecfModuleAsmApplType_Type()
)
recfModuleAsmApplType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleAsmApplType.setStatus("mandatory")
_RecfModuleLgmTable_Object = MibTable
recfModuleLgmTable = _RecfModuleLgmTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 5)
)
if mibBuilder.loadTexts:
    recfModuleLgmTable.setStatus("mandatory")
_RecfModuleLgmEntry_Object = MibTableRow
recfModuleLgmEntry = _RecfModuleLgmEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 5, 1)
)
recfModuleLgmEntry.setIndexNames(
    (0, "STMIB", "recfModuleLgmAddr"),
)
if mibBuilder.loadTexts:
    recfModuleLgmEntry.setStatus("mandatory")
_RecfModuleLgmAddr_Type = SlotAddr
_RecfModuleLgmAddr_Object = MibTableColumn
recfModuleLgmAddr = _RecfModuleLgmAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 5, 1, 1),
    _RecfModuleLgmAddr_Type()
)
recfModuleLgmAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfModuleLgmAddr.setStatus("mandatory")


class _RecfModuleLgmPartition_Type(OctetString):
    """Custom type recfModuleLgmPartition based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RecfModuleLgmPartition_Type.__name__ = "OctetString"
_RecfModuleLgmPartition_Object = MibTableColumn
recfModuleLgmPartition = _RecfModuleLgmPartition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 5, 1, 2),
    _RecfModuleLgmPartition_Type()
)
recfModuleLgmPartition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleLgmPartition.setStatus("mandatory")
_RecfModuleDsm_ObjectIdentity = ObjectIdentity
recfModuleDsm = _RecfModuleDsm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6)
)
_RecfModuleDsmTable_Object = MibTable
recfModuleDsmTable = _RecfModuleDsmTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1)
)
if mibBuilder.loadTexts:
    recfModuleDsmTable.setStatus("mandatory")
_RecfModuleDsmEntry_Object = MibTableRow
recfModuleDsmEntry = _RecfModuleDsmEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1)
)
recfModuleDsmEntry.setIndexNames(
    (0, "STMIB", "recfModuleDsmAddr"),
)
if mibBuilder.loadTexts:
    recfModuleDsmEntry.setStatus("mandatory")
_RecfModuleDsmAddr_Type = SlotAddr
_RecfModuleDsmAddr_Object = MibTableColumn
recfModuleDsmAddr = _RecfModuleDsmAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 1),
    _RecfModuleDsmAddr_Type()
)
recfModuleDsmAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfModuleDsmAddr.setStatus("mandatory")


class _RecfModuleDsmPartitionMap_Type(OctetString):
    """Custom type recfModuleDsmPartitionMap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(128, 128),
    )


_RecfModuleDsmPartitionMap_Type.__name__ = "OctetString"
_RecfModuleDsmPartitionMap_Object = MibTableColumn
recfModuleDsmPartitionMap = _RecfModuleDsmPartitionMap_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 2),
    _RecfModuleDsmPartitionMap_Type()
)
recfModuleDsmPartitionMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleDsmPartitionMap.setStatus("mandatory")


class _RecfModuleDsmPbxProtocol_Type(Integer32):
    """Custom type recfModuleDsmPbxProtocol based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dpnss", 1),
          ("qsig", 2))
    )


_RecfModuleDsmPbxProtocol_Type.__name__ = "Integer32"
_RecfModuleDsmPbxProtocol_Object = MibTableColumn
recfModuleDsmPbxProtocol = _RecfModuleDsmPbxProtocol_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 3),
    _RecfModuleDsmPbxProtocol_Type()
)
recfModuleDsmPbxProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleDsmPbxProtocol.setStatus("mandatory")


class _RecfModuleDsmActiveLev1CDRMode_Type(Integer32):
    """Custom type recfModuleDsmActiveLev1CDRMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfModuleDsmActiveLev1CDRMode_Type.__name__ = "Integer32"
_RecfModuleDsmActiveLev1CDRMode_Object = MibTableColumn
recfModuleDsmActiveLev1CDRMode = _RecfModuleDsmActiveLev1CDRMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 4),
    _RecfModuleDsmActiveLev1CDRMode_Type()
)
recfModuleDsmActiveLev1CDRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleDsmActiveLev1CDRMode.setStatus("mandatory")


class _RecfModuleDsmRecordLev1CDRMode_Type(Integer32):
    """Custom type recfModuleDsmRecordLev1CDRMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfModuleDsmRecordLev1CDRMode_Type.__name__ = "Integer32"
_RecfModuleDsmRecordLev1CDRMode_Object = MibTableColumn
recfModuleDsmRecordLev1CDRMode = _RecfModuleDsmRecordLev1CDRMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 5),
    _RecfModuleDsmRecordLev1CDRMode_Type()
)
recfModuleDsmRecordLev1CDRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleDsmRecordLev1CDRMode.setStatus("mandatory")


class _RecfModuleDsmActiveLev2CDRMode_Type(Integer32):
    """Custom type recfModuleDsmActiveLev2CDRMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfModuleDsmActiveLev2CDRMode_Type.__name__ = "Integer32"
_RecfModuleDsmActiveLev2CDRMode_Object = MibTableColumn
recfModuleDsmActiveLev2CDRMode = _RecfModuleDsmActiveLev2CDRMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 6),
    _RecfModuleDsmActiveLev2CDRMode_Type()
)
recfModuleDsmActiveLev2CDRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleDsmActiveLev2CDRMode.setStatus("mandatory")


class _RecfModuleDsmRecordLev2CDRMode_Type(Integer32):
    """Custom type recfModuleDsmRecordLev2CDRMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfModuleDsmRecordLev2CDRMode_Type.__name__ = "Integer32"
_RecfModuleDsmRecordLev2CDRMode_Object = MibTableColumn
recfModuleDsmRecordLev2CDRMode = _RecfModuleDsmRecordLev2CDRMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 1, 1, 7),
    _RecfModuleDsmRecordLev2CDRMode_Type()
)
recfModuleDsmRecordLev2CDRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModuleDsmRecordLev2CDRMode.setStatus("mandatory")
_RecfModDsmRecCDRLogTable_Object = MibTable
recfModDsmRecCDRLogTable = _RecfModDsmRecCDRLogTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2)
)
if mibBuilder.loadTexts:
    recfModDsmRecCDRLogTable.setStatus("mandatory")
_RecfModDsmRecCDRLogEntry_Object = MibTableRow
recfModDsmRecCDRLogEntry = _RecfModDsmRecCDRLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1)
)
recfModDsmRecCDRLogEntry.setIndexNames(
    (0, "STMIB", "recfModDsmRecCDRLogAddr"),
    (0, "STMIB", "recfModDsmRecCDRLogIndex"),
)
if mibBuilder.loadTexts:
    recfModDsmRecCDRLogEntry.setStatus("mandatory")
_RecfModDsmRecCDRLogAddr_Type = SlotAddr
_RecfModDsmRecCDRLogAddr_Object = MibTableColumn
recfModDsmRecCDRLogAddr = _RecfModDsmRecCDRLogAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1, 1),
    _RecfModDsmRecCDRLogAddr_Type()
)
recfModDsmRecCDRLogAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfModDsmRecCDRLogAddr.setStatus("mandatory")


class _RecfModDsmRecCDRLogIndex_Type(Integer32):
    """Custom type recfModDsmRecCDRLogIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_RecfModDsmRecCDRLogIndex_Type.__name__ = "Integer32"
_RecfModDsmRecCDRLogIndex_Object = MibTableColumn
recfModDsmRecCDRLogIndex = _RecfModDsmRecCDRLogIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1, 2),
    _RecfModDsmRecCDRLogIndex_Type()
)
recfModDsmRecCDRLogIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfModDsmRecCDRLogIndex.setStatus("mandatory")


class _RecfModDsmRecCDRLogControlMode_Type(Integer32):
    """Custom type recfModDsmRecCDRLogControlMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("erase", 3))
    )


_RecfModDsmRecCDRLogControlMode_Type.__name__ = "Integer32"
_RecfModDsmRecCDRLogControlMode_Object = MibTableColumn
recfModDsmRecCDRLogControlMode = _RecfModDsmRecCDRLogControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1, 3),
    _RecfModDsmRecCDRLogControlMode_Type()
)
recfModDsmRecCDRLogControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModDsmRecCDRLogControlMode.setStatus("mandatory")


class _RecfModDsmRecCDRLogSize_Type(Integer32):
    """Custom type recfModDsmRecCDRLogSize based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RecfModDsmRecCDRLogSize_Type.__name__ = "Integer32"
_RecfModDsmRecCDRLogSize_Object = MibTableColumn
recfModDsmRecCDRLogSize = _RecfModDsmRecCDRLogSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1, 4),
    _RecfModDsmRecCDRLogSize_Type()
)
recfModDsmRecCDRLogSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModDsmRecCDRLogSize.setStatus("mandatory")


class _RecfModDsmRecCDRLogOvThrshld_Type(Integer32):
    """Custom type recfModDsmRecCDRLogOvThrshld based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RecfModDsmRecCDRLogOvThrshld_Type.__name__ = "Integer32"
_RecfModDsmRecCDRLogOvThrshld_Object = MibTableColumn
recfModDsmRecCDRLogOvThrshld = _RecfModDsmRecCDRLogOvThrshld_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1, 5),
    _RecfModDsmRecCDRLogOvThrshld_Type()
)
recfModDsmRecCDRLogOvThrshld.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModDsmRecCDRLogOvThrshld.setStatus("mandatory")


class _RecfModDsmRecCDRLogPartitionID_Type(Integer32):
    """Custom type recfModDsmRecCDRLogPartitionID based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfModDsmRecCDRLogPartitionID_Type.__name__ = "Integer32"
_RecfModDsmRecCDRLogPartitionID_Object = MibTableColumn
recfModDsmRecCDRLogPartitionID = _RecfModDsmRecCDRLogPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 5, 6, 2, 1, 6),
    _RecfModDsmRecCDRLogPartitionID_Type()
)
recfModDsmRecCDRLogPartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfModDsmRecCDRLogPartitionID.setStatus("mandatory")
_RecfPort_ObjectIdentity = ObjectIdentity
recfPort = _RecfPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6)
)
_RecfT1mPortTable_Object = MibTable
recfT1mPortTable = _RecfT1mPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1)
)
if mibBuilder.loadTexts:
    recfT1mPortTable.setStatus("mandatory")
_RecfT1mPortEntry_Object = MibTableRow
recfT1mPortEntry = _RecfT1mPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1)
)
recfT1mPortEntry.setIndexNames(
    (0, "STMIB", "recfT1mPortAddr"),
)
if mibBuilder.loadTexts:
    recfT1mPortEntry.setStatus("mandatory")
_RecfT1mPortAddr_Type = PortAddr
_RecfT1mPortAddr_Object = MibTableColumn
recfT1mPortAddr = _RecfT1mPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 1),
    _RecfT1mPortAddr_Type()
)
recfT1mPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfT1mPortAddr.setStatus("mandatory")


class _RecfT1mPortStartMode_Type(Integer32):
    """Custom type recfT1mPortStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfT1mPortStartMode_Type.__name__ = "Integer32"
_RecfT1mPortStartMode_Object = MibTableColumn
recfT1mPortStartMode = _RecfT1mPortStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 2),
    _RecfT1mPortStartMode_Type()
)
recfT1mPortStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortStartMode.setStatus("mandatory")


class _RecfT1mPortUpdate_Type(Integer32):
    """Custom type recfT1mPortUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3),
          ("updateReq", 2))
    )


_RecfT1mPortUpdate_Type.__name__ = "Integer32"
_RecfT1mPortUpdate_Object = MibTableColumn
recfT1mPortUpdate = _RecfT1mPortUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 3),
    _RecfT1mPortUpdate_Type()
)
recfT1mPortUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfT1mPortUpdate.setStatus("mandatory")


class _RecfT1mPortFraming_Type(Integer32):
    """Custom type recfT1mPortFraming based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ansiESF", 3),
          ("attESF", 2),
          ("sf", 1))
    )


_RecfT1mPortFraming_Type.__name__ = "Integer32"
_RecfT1mPortFraming_Object = MibTableColumn
recfT1mPortFraming = _RecfT1mPortFraming_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 4),
    _RecfT1mPortFraming_Type()
)
recfT1mPortFraming.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortFraming.setStatus("mandatory")


class _RecfT1mPortLineCodeType_Type(Integer32):
    """Custom type recfT1mPortLineCodeType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ami", 2),
          ("b8zs", 1),
          ("zeroCodeSuppression", 3))
    )


_RecfT1mPortLineCodeType_Type.__name__ = "Integer32"
_RecfT1mPortLineCodeType_Object = MibTableColumn
recfT1mPortLineCodeType = _RecfT1mPortLineCodeType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 5),
    _RecfT1mPortLineCodeType_Type()
)
recfT1mPortLineCodeType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortLineCodeType.setStatus("mandatory")


class _RecfT1mPortDs1Option_Type(Integer32):
    """Custom type recfT1mPortDs1Option based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("a", 1),
          ("b", 2),
          ("c", 3))
    )


_RecfT1mPortDs1Option_Type.__name__ = "Integer32"
_RecfT1mPortDs1Option_Object = MibTableColumn
recfT1mPortDs1Option = _RecfT1mPortDs1Option_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 6),
    _RecfT1mPortDs1Option_Type()
)
recfT1mPortDs1Option.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortDs1Option.setStatus("mandatory")


class _RecfT1mPortDsx1Distance_Type(Integer32):
    """Custom type recfT1mPortDsx1Distance based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fccOptionA", 6),
          ("from0to133ft", 1),
          ("from134to266ft", 2),
          ("from267to399ft", 3),
          ("from400to533ft", 4),
          ("from534to655ft", 5))
    )


_RecfT1mPortDsx1Distance_Type.__name__ = "Integer32"
_RecfT1mPortDsx1Distance_Object = MibTableColumn
recfT1mPortDsx1Distance = _RecfT1mPortDsx1Distance_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 7),
    _RecfT1mPortDsx1Distance_Type()
)
recfT1mPortDsx1Distance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortDsx1Distance.setStatus("mandatory")


class _RecfT1mPortEquGain_Type(Integer32):
    """Custom type recfT1mPortEquGain based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("g26db", 2),
          ("g36db", 1))
    )


_RecfT1mPortEquGain_Type.__name__ = "Integer32"
_RecfT1mPortEquGain_Object = MibTableColumn
recfT1mPortEquGain = _RecfT1mPortEquGain_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 8),
    _RecfT1mPortEquGain_Type()
)
recfT1mPortEquGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortEquGain.setStatus("mandatory")


class _RecfT1mPortBundleMap_Type(OctetString):
    """Custom type recfT1mPortBundleMap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(24, 24),
    )


_RecfT1mPortBundleMap_Type.__name__ = "OctetString"
_RecfT1mPortBundleMap_Object = MibTableColumn
recfT1mPortBundleMap = _RecfT1mPortBundleMap_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 9),
    _RecfT1mPortBundleMap_Type()
)
recfT1mPortBundleMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortBundleMap.setStatus("mandatory")


class _RecfT1mPortErrorThreshold_Type(Integer32):
    """Custom type recfT1mPortErrorThreshold based on Integer32"""
    defaultValue = 65535

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RecfT1mPortErrorThreshold_Type.__name__ = "Integer32"
_RecfT1mPortErrorThreshold_Object = MibTableColumn
recfT1mPortErrorThreshold = _RecfT1mPortErrorThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 10),
    _RecfT1mPortErrorThreshold_Type()
)
recfT1mPortErrorThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortErrorThreshold.setStatus("mandatory")


class _RecfT1mPortSevereThreshold_Type(Integer32):
    """Custom type recfT1mPortSevereThreshold based on Integer32"""
    defaultValue = 65535

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RecfT1mPortSevereThreshold_Type.__name__ = "Integer32"
_RecfT1mPortSevereThreshold_Object = MibTableColumn
recfT1mPortSevereThreshold = _RecfT1mPortSevereThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 11),
    _RecfT1mPortSevereThreshold_Type()
)
recfT1mPortSevereThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortSevereThreshold.setStatus("mandatory")


class _RecfT1mPortAlarmThreshold_Type(Integer32):
    """Custom type recfT1mPortAlarmThreshold based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 9),
    )


_RecfT1mPortAlarmThreshold_Type.__name__ = "Integer32"
_RecfT1mPortAlarmThreshold_Object = MibTableColumn
recfT1mPortAlarmThreshold = _RecfT1mPortAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 12),
    _RecfT1mPortAlarmThreshold_Type()
)
recfT1mPortAlarmThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortAlarmThreshold.setStatus("mandatory")


class _RecfT1mPortFailThreshold_Type(Integer32):
    """Custom type recfT1mPortFailThreshold based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 9),
    )


_RecfT1mPortFailThreshold_Type.__name__ = "Integer32"
_RecfT1mPortFailThreshold_Object = MibTableColumn
recfT1mPortFailThreshold = _RecfT1mPortFailThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 13),
    _RecfT1mPortFailThreshold_Type()
)
recfT1mPortFailThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortFailThreshold.setStatus("mandatory")


class _RecfT1mPortFailToggleRequest_Type(Integer32):
    """Custom type recfT1mPortFailToggleRequest based on Integer32"""
    defaultValue = 61

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(61,
              62)
        )
    )
    namedValues = NamedValues(
        *(("noToggle", 62),
          ("toggleIfPortFail", 61))
    )


_RecfT1mPortFailToggleRequest_Type.__name__ = "Integer32"
_RecfT1mPortFailToggleRequest_Object = MibTableColumn
recfT1mPortFailToggleRequest = _RecfT1mPortFailToggleRequest_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 14),
    _RecfT1mPortFailToggleRequest_Type()
)
recfT1mPortFailToggleRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortFailToggleRequest.setStatus("mandatory")


class _RecfT1mPortOOSBitPattern_Type(Integer32):
    """Custom type recfT1mPortOOSBitPattern based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("x1a", 2),
          ("x7e", 4),
          ("x7f", 1),
          ("xd5", 3))
    )


_RecfT1mPortOOSBitPattern_Type.__name__ = "Integer32"
_RecfT1mPortOOSBitPattern_Object = MibTableColumn
recfT1mPortOOSBitPattern = _RecfT1mPortOOSBitPattern_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 15),
    _RecfT1mPortOOSBitPattern_Type()
)
recfT1mPortOOSBitPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortOOSBitPattern.setStatus("mandatory")


class _RecfT1mPortOOSASignaling_Type(Integer32):
    """Custom type recfT1mPortOOSASignaling based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mark", 2),
          ("markSpace", 4),
          ("space", 1),
          ("spaceMark", 3))
    )


_RecfT1mPortOOSASignaling_Type.__name__ = "Integer32"
_RecfT1mPortOOSASignaling_Object = MibTableColumn
recfT1mPortOOSASignaling = _RecfT1mPortOOSASignaling_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 16),
    _RecfT1mPortOOSASignaling_Type()
)
recfT1mPortOOSASignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortOOSASignaling.setStatus("mandatory")


class _RecfT1mPortOOSBSignaling_Type(Integer32):
    """Custom type recfT1mPortOOSBSignaling based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mark", 2),
          ("markSpace", 4),
          ("space", 1),
          ("spaceMark", 3))
    )


_RecfT1mPortOOSBSignaling_Type.__name__ = "Integer32"
_RecfT1mPortOOSBSignaling_Object = MibTableColumn
recfT1mPortOOSBSignaling = _RecfT1mPortOOSBSignaling_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 17),
    _RecfT1mPortOOSBSignaling_Type()
)
recfT1mPortOOSBSignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortOOSBSignaling.setStatus("mandatory")


class _RecfT1mPortOOSCDSignaling_Type(Integer32):
    """Custom type recfT1mPortOOSCDSignaling based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("markMark", 2),
          ("markSpace", 4),
          ("spaceMark", 3),
          ("spaceSpace", 1))
    )


_RecfT1mPortOOSCDSignaling_Type.__name__ = "Integer32"
_RecfT1mPortOOSCDSignaling_Object = MibTableColumn
recfT1mPortOOSCDSignaling = _RecfT1mPortOOSCDSignaling_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 18),
    _RecfT1mPortOOSCDSignaling_Type()
)
recfT1mPortOOSCDSignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortOOSCDSignaling.setStatus("mandatory")


class _RecfT1mPortSigInversion_Type(Integer32):
    """Custom type recfT1mPortSigInversion based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inverted", 2),
          ("normal", 1))
    )


_RecfT1mPortSigInversion_Type.__name__ = "Integer32"
_RecfT1mPortSigInversion_Object = MibTableColumn
recfT1mPortSigInversion = _RecfT1mPortSigInversion_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 1, 1, 19),
    _RecfT1mPortSigInversion_Type()
)
recfT1mPortSigInversion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfT1mPortSigInversion.setStatus("deprecated")
_RecfE1mPortTable_Object = MibTable
recfE1mPortTable = _RecfE1mPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2)
)
if mibBuilder.loadTexts:
    recfE1mPortTable.setStatus("mandatory")
_RecfE1mPortEntry_Object = MibTableRow
recfE1mPortEntry = _RecfE1mPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1)
)
recfE1mPortEntry.setIndexNames(
    (0, "STMIB", "recfE1mPortAddr"),
)
if mibBuilder.loadTexts:
    recfE1mPortEntry.setStatus("mandatory")
_RecfE1mPortAddr_Type = PortAddr
_RecfE1mPortAddr_Object = MibTableColumn
recfE1mPortAddr = _RecfE1mPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 1),
    _RecfE1mPortAddr_Type()
)
recfE1mPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfE1mPortAddr.setStatus("mandatory")


class _RecfE1mPortStartMode_Type(Integer32):
    """Custom type recfE1mPortStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfE1mPortStartMode_Type.__name__ = "Integer32"
_RecfE1mPortStartMode_Object = MibTableColumn
recfE1mPortStartMode = _RecfE1mPortStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 2),
    _RecfE1mPortStartMode_Type()
)
recfE1mPortStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortStartMode.setStatus("mandatory")


class _RecfE1mPortUpdate_Type(Integer32):
    """Custom type recfE1mPortUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3),
          ("updateReq", 2))
    )


_RecfE1mPortUpdate_Type.__name__ = "Integer32"
_RecfE1mPortUpdate_Object = MibTableColumn
recfE1mPortUpdate = _RecfE1mPortUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 3),
    _RecfE1mPortUpdate_Type()
)
recfE1mPortUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfE1mPortUpdate.setStatus("mandatory")


class _RecfE1mPortFraming_Type(Integer32):
    """Custom type recfE1mPortFraming based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("g732n", 1),
          ("g732s", 2))
    )


_RecfE1mPortFraming_Type.__name__ = "Integer32"
_RecfE1mPortFraming_Object = MibTableColumn
recfE1mPortFraming = _RecfE1mPortFraming_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 4),
    _RecfE1mPortFraming_Type()
)
recfE1mPortFraming.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortFraming.setStatus("mandatory")


class _RecfE1mPortCrcMultiFrame_Type(Integer32):
    """Custom type recfE1mPortCrcMultiFrame based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfE1mPortCrcMultiFrame_Type.__name__ = "Integer32"
_RecfE1mPortCrcMultiFrame_Object = MibTableColumn
recfE1mPortCrcMultiFrame = _RecfE1mPortCrcMultiFrame_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 5),
    _RecfE1mPortCrcMultiFrame_Type()
)
recfE1mPortCrcMultiFrame.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortCrcMultiFrame.setStatus("mandatory")


class _RecfE1mPortSigInversion_Type(Integer32):
    """Custom type recfE1mPortSigInversion based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inverted", 2),
          ("normal", 1))
    )


_RecfE1mPortSigInversion_Type.__name__ = "Integer32"
_RecfE1mPortSigInversion_Object = MibTableColumn
recfE1mPortSigInversion = _RecfE1mPortSigInversion_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 6),
    _RecfE1mPortSigInversion_Type()
)
recfE1mPortSigInversion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortSigInversion.setStatus("deprecated")


class _RecfE1mPortInternationalBit_Type(Integer32):
    """Custom type recfE1mPortInternationalBit based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_RecfE1mPortInternationalBit_Type.__name__ = "Integer32"
_RecfE1mPortInternationalBit_Object = MibTableColumn
recfE1mPortInternationalBit = _RecfE1mPortInternationalBit_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 7),
    _RecfE1mPortInternationalBit_Type()
)
recfE1mPortInternationalBit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortInternationalBit.setStatus("mandatory")


class _RecfE1mPortNationalBit_Type(Integer32):
    """Custom type recfE1mPortNationalBit based on Integer32"""
    defaultValue = 31

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_RecfE1mPortNationalBit_Type.__name__ = "Integer32"
_RecfE1mPortNationalBit_Object = MibTableColumn
recfE1mPortNationalBit = _RecfE1mPortNationalBit_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 8),
    _RecfE1mPortNationalBit_Type()
)
recfE1mPortNationalBit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortNationalBit.setStatus("mandatory")


class _RecfE1mPortTransmitEBit_Type(Integer32):
    """Custom type recfE1mPortTransmitEBit based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfE1mPortTransmitEBit_Type.__name__ = "Integer32"
_RecfE1mPortTransmitEBit_Object = MibTableColumn
recfE1mPortTransmitEBit = _RecfE1mPortTransmitEBit_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 9),
    _RecfE1mPortTransmitEBit_Type()
)
recfE1mPortTransmitEBit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortTransmitEBit.setStatus("mandatory")


class _RecfE1mPortReceiveEBit_Type(Integer32):
    """Custom type recfE1mPortReceiveEBit based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ignore", 2),
          ("monitor", 1))
    )


_RecfE1mPortReceiveEBit_Type.__name__ = "Integer32"
_RecfE1mPortReceiveEBit_Object = MibTableColumn
recfE1mPortReceiveEBit = _RecfE1mPortReceiveEBit_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 10),
    _RecfE1mPortReceiveEBit_Type()
)
recfE1mPortReceiveEBit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortReceiveEBit.setStatus("mandatory")


class _RecfE1mPortBundleMap_Type(OctetString):
    """Custom type recfE1mPortBundleMap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(31, 31),
    )


_RecfE1mPortBundleMap_Type.__name__ = "OctetString"
_RecfE1mPortBundleMap_Object = MibTableColumn
recfE1mPortBundleMap = _RecfE1mPortBundleMap_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 11),
    _RecfE1mPortBundleMap_Type()
)
recfE1mPortBundleMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortBundleMap.setStatus("mandatory")


class _RecfE1mPortErrorThreshold_Type(Integer32):
    """Custom type recfE1mPortErrorThreshold based on Integer32"""
    defaultValue = 65535

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RecfE1mPortErrorThreshold_Type.__name__ = "Integer32"
_RecfE1mPortErrorThreshold_Object = MibTableColumn
recfE1mPortErrorThreshold = _RecfE1mPortErrorThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 12),
    _RecfE1mPortErrorThreshold_Type()
)
recfE1mPortErrorThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortErrorThreshold.setStatus("mandatory")


class _RecfE1mPortSevereThreshold_Type(Integer32):
    """Custom type recfE1mPortSevereThreshold based on Integer32"""
    defaultValue = 65535

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RecfE1mPortSevereThreshold_Type.__name__ = "Integer32"
_RecfE1mPortSevereThreshold_Object = MibTableColumn
recfE1mPortSevereThreshold = _RecfE1mPortSevereThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 13),
    _RecfE1mPortSevereThreshold_Type()
)
recfE1mPortSevereThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortSevereThreshold.setStatus("mandatory")


class _RecfE1mPortAlarmThreshold_Type(Integer32):
    """Custom type recfE1mPortAlarmThreshold based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 9),
    )


_RecfE1mPortAlarmThreshold_Type.__name__ = "Integer32"
_RecfE1mPortAlarmThreshold_Object = MibTableColumn
recfE1mPortAlarmThreshold = _RecfE1mPortAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 14),
    _RecfE1mPortAlarmThreshold_Type()
)
recfE1mPortAlarmThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortAlarmThreshold.setStatus("mandatory")


class _RecfE1mPortFailThreshold_Type(Integer32):
    """Custom type recfE1mPortFailThreshold based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 9),
    )


_RecfE1mPortFailThreshold_Type.__name__ = "Integer32"
_RecfE1mPortFailThreshold_Object = MibTableColumn
recfE1mPortFailThreshold = _RecfE1mPortFailThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 15),
    _RecfE1mPortFailThreshold_Type()
)
recfE1mPortFailThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortFailThreshold.setStatus("mandatory")


class _RecfE1mPortFailToggleRequest_Type(Integer32):
    """Custom type recfE1mPortFailToggleRequest based on Integer32"""
    defaultValue = 61

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(61,
              62)
        )
    )
    namedValues = NamedValues(
        *(("noToggle", 62),
          ("toggleIfPortFail", 61))
    )


_RecfE1mPortFailToggleRequest_Type.__name__ = "Integer32"
_RecfE1mPortFailToggleRequest_Object = MibTableColumn
recfE1mPortFailToggleRequest = _RecfE1mPortFailToggleRequest_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 16),
    _RecfE1mPortFailToggleRequest_Type()
)
recfE1mPortFailToggleRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortFailToggleRequest.setStatus("mandatory")


class _RecfE1mPortOOSBitPattern_Type(Integer32):
    """Custom type recfE1mPortOOSBitPattern based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("x1a", 2),
          ("x7e", 4),
          ("x7f", 1),
          ("xd5", 3))
    )


_RecfE1mPortOOSBitPattern_Type.__name__ = "Integer32"
_RecfE1mPortOOSBitPattern_Object = MibTableColumn
recfE1mPortOOSBitPattern = _RecfE1mPortOOSBitPattern_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 17),
    _RecfE1mPortOOSBitPattern_Type()
)
recfE1mPortOOSBitPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortOOSBitPattern.setStatus("mandatory")


class _RecfE1mPortOOSASignaling_Type(Integer32):
    """Custom type recfE1mPortOOSASignaling based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mark", 2),
          ("markSpace", 4),
          ("space", 1),
          ("spaceMark", 3))
    )


_RecfE1mPortOOSASignaling_Type.__name__ = "Integer32"
_RecfE1mPortOOSASignaling_Object = MibTableColumn
recfE1mPortOOSASignaling = _RecfE1mPortOOSASignaling_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 18),
    _RecfE1mPortOOSASignaling_Type()
)
recfE1mPortOOSASignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortOOSASignaling.setStatus("mandatory")


class _RecfE1mPortOOSBSignaling_Type(Integer32):
    """Custom type recfE1mPortOOSBSignaling based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mark", 2),
          ("markSpace", 4),
          ("space", 1),
          ("spaceMark", 3))
    )


_RecfE1mPortOOSBSignaling_Type.__name__ = "Integer32"
_RecfE1mPortOOSBSignaling_Object = MibTableColumn
recfE1mPortOOSBSignaling = _RecfE1mPortOOSBSignaling_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 19),
    _RecfE1mPortOOSBSignaling_Type()
)
recfE1mPortOOSBSignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortOOSBSignaling.setStatus("mandatory")


class _RecfE1mPortOOSCDSignaling_Type(Integer32):
    """Custom type recfE1mPortOOSCDSignaling based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("markMark", 2),
          ("markSpace", 4),
          ("spaceMark", 3),
          ("spaceSpace", 1))
    )


_RecfE1mPortOOSCDSignaling_Type.__name__ = "Integer32"
_RecfE1mPortOOSCDSignaling_Object = MibTableColumn
recfE1mPortOOSCDSignaling = _RecfE1mPortOOSCDSignaling_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 2, 1, 20),
    _RecfE1mPortOOSCDSignaling_Type()
)
recfE1mPortOOSCDSignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfE1mPortOOSCDSignaling.setStatus("mandatory")
_RecfSdmPortTable_Object = MibTable
recfSdmPortTable = _RecfSdmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3)
)
if mibBuilder.loadTexts:
    recfSdmPortTable.setStatus("mandatory")
_RecfSdmPortEntry_Object = MibTableRow
recfSdmPortEntry = _RecfSdmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1)
)
recfSdmPortEntry.setIndexNames(
    (0, "STMIB", "recfSdmPortAddr"),
)
if mibBuilder.loadTexts:
    recfSdmPortEntry.setStatus("mandatory")
_RecfSdmPortAddr_Type = PortAddr
_RecfSdmPortAddr_Object = MibTableColumn
recfSdmPortAddr = _RecfSdmPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 1),
    _RecfSdmPortAddr_Type()
)
recfSdmPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfSdmPortAddr.setStatus("mandatory")


class _RecfSdmPortStartMode_Type(Integer32):
    """Custom type recfSdmPortStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfSdmPortStartMode_Type.__name__ = "Integer32"
_RecfSdmPortStartMode_Object = MibTableColumn
recfSdmPortStartMode = _RecfSdmPortStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 2),
    _RecfSdmPortStartMode_Type()
)
recfSdmPortStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortStartMode.setStatus("mandatory")


class _RecfSdmPortUpdate_Type(Integer32):
    """Custom type recfSdmPortUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3),
          ("updateReq", 2))
    )


_RecfSdmPortUpdate_Type.__name__ = "Integer32"
_RecfSdmPortUpdate_Object = MibTableColumn
recfSdmPortUpdate = _RecfSdmPortUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 3),
    _RecfSdmPortUpdate_Type()
)
recfSdmPortUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfSdmPortUpdate.setStatus("mandatory")


class _RecfSdmPortSpeed_Type(Integer32):
    """Custom type recfSdmPortSpeed based on Integer32"""
    defaultValue = 480

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(9,
              18,
              36,
              54,
              72,
              108,
              144,
              288,
              360,
              420,
              480,
              840,
              960,
              1260,
              1440,
              1680,
              1920,
              2100,
              2400,
              2520,
              2880,
              2940,
              3360,
              3780,
              3840,
              4200,
              4320,
              4620,
              4800,
              5040,
              5280,
              5460,
              5760,
              5880,
              6240,
              6300,
              6720,
              7140,
              7200,
              7560,
              7680,
              7980,
              8160,
              8400,
              8640,
              8820,
              9120,
              9240,
              9600,
              9660,
              10080,
              10560,
              11040,
              11520,
              12000,
              12480,
              12960,
              13440,
              13920,
              14400,
              14880,
              15360)
        )
    )
    namedValues = NamedValues(
        *(("b1024k", 7680),
          ("b1088k", 8160),
          ("b1152k", 8640),
          ("b1216k", 9120),
          ("b1280k", 9600),
          ("b128k", 960),
          ("b1408k", 10560),
          ("b1472k", 11040),
          ("b1536k", 11520),
          ("b1600k", 12000),
          ("b1664k", 12480),
          ("b1728k", 12960),
          ("b1792k", 13440),
          ("b1856k", 13920),
          ("b1920k", 14400),
          ("b192k", 1440),
          ("b1984k", 14880),
          ("b2048k", 15360),
          ("b256k", 1920),
          ("b320k", 2400),
          ("b384k", 2880),
          ("b512k", 3840),
          ("b576k", 4320),
          ("b640k", 4800),
          ("b64k", 480),
          ("b704k", 5280),
          ("b768k", 5760),
          ("b832k", 6240),
          ("b960k", 7200),
          ("bsf1344k", 10080),
          ("bsf448k", 3360),
          ("bsf896k", 6720),
          ("s1200", 9),
          ("s14400", 108),
          ("s19200", 144),
          ("s2400", 18),
          ("s38400", 288),
          ("s4800", 36),
          ("s48000", 360),
          ("s7200", 54),
          ("s9600", 72),
          ("sf1008k", 7560),
          ("sf1064k", 7980),
          ("sf1120k", 8400),
          ("sf112k", 840),
          ("sf1176k", 8820),
          ("sf1232k", 9240),
          ("sf1288k", 9660),
          ("sf168k", 1260),
          ("sf224k", 1680),
          ("sf280k", 2100),
          ("sf336k", 2520),
          ("sf392k", 2940),
          ("sf504k", 3780),
          ("sf560k", 4200),
          ("sf56k", 420),
          ("sf616k", 4620),
          ("sf672k", 5040),
          ("sf728k", 5460),
          ("sf784k", 5880),
          ("sf840k", 6300),
          ("sf952k", 7140))
    )


_RecfSdmPortSpeed_Type.__name__ = "Integer32"
_RecfSdmPortSpeed_Object = MibTableColumn
recfSdmPortSpeed = _RecfSdmPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 4),
    _RecfSdmPortSpeed_Type()
)
recfSdmPortSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortSpeed.setStatus("mandatory")


class _RecfSdmPortInterface_Type(Integer32):
    """Custom type recfSdmPortInterface based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("dce1", 4),
          ("dce2", 5),
          ("dce3", 6),
          ("dte1", 1),
          ("dte2", 2),
          ("dte3", 3))
    )


_RecfSdmPortInterface_Type.__name__ = "Integer32"
_RecfSdmPortInterface_Object = MibTableColumn
recfSdmPortInterface = _RecfSdmPortInterface_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 5),
    _RecfSdmPortInterface_Type()
)
recfSdmPortInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortInterface.setStatus("mandatory")


class _RecfSdmPortTxClockSource_Type(Integer32):
    """Custom type recfSdmPortTxClockSource based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("receive", 2),
          ("send", 3),
          ("system", 1))
    )


_RecfSdmPortTxClockSource_Type.__name__ = "Integer32"
_RecfSdmPortTxClockSource_Object = MibTableColumn
recfSdmPortTxClockSource = _RecfSdmPortTxClockSource_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 6),
    _RecfSdmPortTxClockSource_Type()
)
recfSdmPortTxClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortTxClockSource.setStatus("mandatory")


class _RecfSdmPortBitMode_Type(Integer32):
    """Custom type recfSdmPortBitMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("b7bit", 1),
          ("b8bit", 2))
    )


_RecfSdmPortBitMode_Type.__name__ = "Integer32"
_RecfSdmPortBitMode_Object = MibTableColumn
recfSdmPortBitMode = _RecfSdmPortBitMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 7),
    _RecfSdmPortBitMode_Type()
)
recfSdmPortBitMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortBitMode.setStatus("mandatory")


class _RecfSdmPortOOSOper_Type(Integer32):
    """Custom type recfSdmPortOOSOper based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("doNothing", 1),
          ("forceFNS", 2),
          ("mark", 3),
          ("markFF", 4),
          ("space", 5),
          ("spaceFF", 6))
    )


_RecfSdmPortOOSOper_Type.__name__ = "Integer32"
_RecfSdmPortOOSOper_Object = MibTableColumn
recfSdmPortOOSOper = _RecfSdmPortOOSOper_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 8),
    _RecfSdmPortOOSOper_Type()
)
recfSdmPortOOSOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortOOSOper.setStatus("mandatory")


class _RecfSdmPortGen_Type(Integer32):
    """Custom type recfSdmPortGen based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dsrDtr", 2),
          ("trans", 3))
    )


_RecfSdmPortGen_Type.__name__ = "Integer32"
_RecfSdmPortGen_Object = MibTableColumn
recfSdmPortGen = _RecfSdmPortGen_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 9),
    _RecfSdmPortGen_Type()
)
recfSdmPortGen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortGen.setStatus("mandatory")


class _RecfSdmPortPolarity_Type(Integer32):
    """Custom type recfSdmPortPolarity based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inverted", 2),
          ("normal", 1))
    )


_RecfSdmPortPolarity_Type.__name__ = "Integer32"
_RecfSdmPortPolarity_Object = MibTableColumn
recfSdmPortPolarity = _RecfSdmPortPolarity_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 10),
    _RecfSdmPortPolarity_Type()
)
recfSdmPortPolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortPolarity.setStatus("mandatory")


class _RecfSdmPortType_Type(Integer32):
    """Custom type recfSdmPortType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("bandContent", 3),
          ("fsm16Connect", 5),
          ("inl", 4),
          ("io", 2),
          ("null", 1))
    )


_RecfSdmPortType_Type.__name__ = "Integer32"
_RecfSdmPortType_Object = MibTableColumn
recfSdmPortType = _RecfSdmPortType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 11),
    _RecfSdmPortType_Type()
)
recfSdmPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortType.setStatus("mandatory")


class _RecfSdmPortINLNumber_Type(Integer32):
    """Custom type recfSdmPortINLNumber based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_RecfSdmPortINLNumber_Type.__name__ = "Integer32"
_RecfSdmPortINLNumber_Object = MibTableColumn
recfSdmPortINLNumber = _RecfSdmPortINLNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 12),
    _RecfSdmPortINLNumber_Type()
)
recfSdmPortINLNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfSdmPortINLNumber.setStatus("mandatory")


class _RecfSdmDeviceType_Type(Integer32):
    """Custom type recfSdmDeviceType based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfSdmDeviceType_Type.__name__ = "Integer32"
_RecfSdmDeviceType_Object = MibTableColumn
recfSdmDeviceType = _RecfSdmDeviceType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 13),
    _RecfSdmDeviceType_Type()
)
recfSdmDeviceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmDeviceType.setStatus("mandatory")


class _RecfSdmPortPartitionID_Type(Integer32):
    """Custom type recfSdmPortPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfSdmPortPartitionID_Type.__name__ = "Integer32"
_RecfSdmPortPartitionID_Object = MibTableColumn
recfSdmPortPartitionID = _RecfSdmPortPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 14),
    _RecfSdmPortPartitionID_Type()
)
recfSdmPortPartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortPartitionID.setStatus("mandatory")


class _RecfSdmPortFunctions_Type(OctetString):
    """Custom type recfSdmPortFunctions based on OctetString"""
    defaultHexValue = "00"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RecfSdmPortFunctions_Type.__name__ = "OctetString"
_RecfSdmPortFunctions_Object = MibTableColumn
recfSdmPortFunctions = _RecfSdmPortFunctions_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 15),
    _RecfSdmPortFunctions_Type()
)
recfSdmPortFunctions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortFunctions.setStatus("mandatory")


class _RecfSdmPortContentionSet_Type(Integer32):
    """Custom type recfSdmPortContentionSet based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              7,
              8,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disable", 255),
          ("f1nf1", 1),
          ("f2nf2", 2),
          ("f4nf4", 7),
          ("nf4f4", 8))
    )


_RecfSdmPortContentionSet_Type.__name__ = "Integer32"
_RecfSdmPortContentionSet_Object = MibTableColumn
recfSdmPortContentionSet = _RecfSdmPortContentionSet_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 16),
    _RecfSdmPortContentionSet_Type()
)
recfSdmPortContentionSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortContentionSet.setStatus("mandatory")


class _RecfSdmPortLoopbackSupport_Type(Integer32):
    """Custom type recfSdmPortLoopbackSupport based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              5,
              7,
              9,
              11,
              13,
              15)
        )
    )
    namedValues = NamedValues(
        *(("ll", 13),
          ("llRl", 9),
          ("llRlTm", 1),
          ("llTm", 5),
          ("none", 15),
          ("rl", 11),
          ("rlTm", 3),
          ("tm", 7))
    )


_RecfSdmPortLoopbackSupport_Type.__name__ = "Integer32"
_RecfSdmPortLoopbackSupport_Object = MibTableColumn
recfSdmPortLoopbackSupport = _RecfSdmPortLoopbackSupport_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 17),
    _RecfSdmPortLoopbackSupport_Type()
)
recfSdmPortLoopbackSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortLoopbackSupport.setStatus("mandatory")


class _RecfSdmPortSatelliteBuffer_Type(Integer32):
    """Custom type recfSdmPortSatelliteBuffer based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              15)
        )
    )
    namedValues = NamedValues(
        *(("disable", 3),
          ("enable", 15))
    )


_RecfSdmPortSatelliteBuffer_Type.__name__ = "Integer32"
_RecfSdmPortSatelliteBuffer_Object = MibTableColumn
recfSdmPortSatelliteBuffer = _RecfSdmPortSatelliteBuffer_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 18),
    _RecfSdmPortSatelliteBuffer_Type()
)
recfSdmPortSatelliteBuffer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortSatelliteBuffer.setStatus("mandatory")


class _RecfSdmPortFailToggleRequest_Type(Integer32):
    """Custom type recfSdmPortFailToggleRequest based on Integer32"""
    defaultValue = 61

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(61,
              62)
        )
    )
    namedValues = NamedValues(
        *(("noToggle", 62),
          ("toggleIfPortFail", 61))
    )


_RecfSdmPortFailToggleRequest_Type.__name__ = "Integer32"
_RecfSdmPortFailToggleRequest_Object = MibTableColumn
recfSdmPortFailToggleRequest = _RecfSdmPortFailToggleRequest_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 19),
    _RecfSdmPortFailToggleRequest_Type()
)
recfSdmPortFailToggleRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortFailToggleRequest.setStatus("mandatory")


class _RecfSdmPortKGPolarity_Type(Integer32):
    """Custom type recfSdmPortKGPolarity based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("kgNegative", 2),
          ("kgPositive", 1))
    )


_RecfSdmPortKGPolarity_Type.__name__ = "Integer32"
_RecfSdmPortKGPolarity_Object = MibTableColumn
recfSdmPortKGPolarity = _RecfSdmPortKGPolarity_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 20),
    _RecfSdmPortKGPolarity_Type()
)
recfSdmPortKGPolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortKGPolarity.setStatus("mandatory")


class _RecfSdmPortKGSignalType_Type(Integer32):
    """Custom type recfSdmPortKGSignalType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("kgLevel", 2),
          ("kgPulse", 1))
    )


_RecfSdmPortKGSignalType_Type.__name__ = "Integer32"
_RecfSdmPortKGSignalType_Object = MibTableColumn
recfSdmPortKGSignalType = _RecfSdmPortKGSignalType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 21),
    _RecfSdmPortKGSignalType_Type()
)
recfSdmPortKGSignalType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortKGSignalType.setStatus("mandatory")


class _RecfSdmPortKGMode_Type(Integer32):
    """Custom type recfSdmPortKGMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("kgDisable", 2),
          ("kgEnable", 1))
    )


_RecfSdmPortKGMode_Type.__name__ = "Integer32"
_RecfSdmPortKGMode_Object = MibTableColumn
recfSdmPortKGMode = _RecfSdmPortKGMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 6, 3, 1, 22),
    _RecfSdmPortKGMode_Type()
)
recfSdmPortKGMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfSdmPortKGMode.setStatus("mandatory")
_RecfBundleTable_Object = MibTable
recfBundleTable = _RecfBundleTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7)
)
if mibBuilder.loadTexts:
    recfBundleTable.setStatus("mandatory")
_RecfBundleEntry_Object = MibTableRow
recfBundleEntry = _RecfBundleEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1)
)
recfBundleEntry.setIndexNames(
    (0, "STMIB", "recfBundleAddr"),
)
if mibBuilder.loadTexts:
    recfBundleEntry.setStatus("mandatory")
_RecfBundleAddr_Type = BundleAddr
_RecfBundleAddr_Object = MibTableColumn
recfBundleAddr = _RecfBundleAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 1),
    _RecfBundleAddr_Type()
)
recfBundleAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfBundleAddr.setStatus("mandatory")


class _RecfBundleStartMode_Type(Integer32):
    """Custom type recfBundleStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfBundleStartMode_Type.__name__ = "Integer32"
_RecfBundleStartMode_Object = MibTableColumn
recfBundleStartMode = _RecfBundleStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 2),
    _RecfBundleStartMode_Type()
)
recfBundleStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleStartMode.setStatus("mandatory")


class _RecfBundleUpdate_Type(Integer32):
    """Custom type recfBundleUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3),
          ("updateReq", 2))
    )


_RecfBundleUpdate_Type.__name__ = "Integer32"
_RecfBundleUpdate_Object = MibTableColumn
recfBundleUpdate = _RecfBundleUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 3),
    _RecfBundleUpdate_Type()
)
recfBundleUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfBundleUpdate.setStatus("mandatory")


class _RecfBundleSignaling_Type(Integer32):
    """Custom type recfBundleSignaling based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("a", 2),
          ("ab", 3),
          ("abcd", 4),
          ("none", 1))
    )


_RecfBundleSignaling_Type.__name__ = "Integer32"
_RecfBundleSignaling_Object = MibTableColumn
recfBundleSignaling = _RecfBundleSignaling_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 4),
    _RecfBundleSignaling_Type()
)
recfBundleSignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleSignaling.setStatus("mandatory")


class _RecfBundleOOSBitPattern_Type(Integer32):
    """Custom type recfBundleOOSBitPattern based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("x1a", 2),
          ("x7e", 4),
          ("x7f", 1),
          ("xd5", 3))
    )


_RecfBundleOOSBitPattern_Type.__name__ = "Integer32"
_RecfBundleOOSBitPattern_Object = MibTableColumn
recfBundleOOSBitPattern = _RecfBundleOOSBitPattern_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 5),
    _RecfBundleOOSBitPattern_Type()
)
recfBundleOOSBitPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleOOSBitPattern.setStatus("mandatory")


class _RecfBundleOOSASignaling_Type(Integer32):
    """Custom type recfBundleOOSASignaling based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mark", 2),
          ("markSpace", 4),
          ("space", 1),
          ("spaceMark", 3))
    )


_RecfBundleOOSASignaling_Type.__name__ = "Integer32"
_RecfBundleOOSASignaling_Object = MibTableColumn
recfBundleOOSASignaling = _RecfBundleOOSASignaling_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 6),
    _RecfBundleOOSASignaling_Type()
)
recfBundleOOSASignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleOOSASignaling.setStatus("mandatory")


class _RecfBundleOOSBSignaling_Type(Integer32):
    """Custom type recfBundleOOSBSignaling based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mark", 2),
          ("markSpace", 4),
          ("space", 1),
          ("spaceMark", 3))
    )


_RecfBundleOOSBSignaling_Type.__name__ = "Integer32"
_RecfBundleOOSBSignaling_Object = MibTableColumn
recfBundleOOSBSignaling = _RecfBundleOOSBSignaling_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 7),
    _RecfBundleOOSBSignaling_Type()
)
recfBundleOOSBSignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleOOSBSignaling.setStatus("mandatory")


class _RecfBundleOOSCDSignaling_Type(Integer32):
    """Custom type recfBundleOOSCDSignaling based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("markMark", 2),
          ("markSpace", 4),
          ("spaceMark", 3),
          ("spaceSpace", 1))
    )


_RecfBundleOOSCDSignaling_Type.__name__ = "Integer32"
_RecfBundleOOSCDSignaling_Object = MibTableColumn
recfBundleOOSCDSignaling = _RecfBundleOOSCDSignaling_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 8),
    _RecfBundleOOSCDSignaling_Type()
)
recfBundleOOSCDSignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleOOSCDSignaling.setStatus("mandatory")


class _RecfBundleNullIdlePattern_Type(Integer32):
    """Custom type recfBundleNullIdlePattern based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mark", 2),
          ("space", 1))
    )


_RecfBundleNullIdlePattern_Type.__name__ = "Integer32"
_RecfBundleNullIdlePattern_Object = MibTableColumn
recfBundleNullIdlePattern = _RecfBundleNullIdlePattern_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 9),
    _RecfBundleNullIdlePattern_Type()
)
recfBundleNullIdlePattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleNullIdlePattern.setStatus("mandatory")


class _RecfBundleBwCntIdlePattern_Type(Integer32):
    """Custom type recfBundleBwCntIdlePattern based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("a0-b0-c0-d0", 16),
          ("a0-b0-c0-d1", 8),
          ("a0-b0-c1-d0", 4),
          ("a0-b0-c1-d1", 12),
          ("a0-b1-c0-d0", 2),
          ("a0-b1-c0-d1", 10),
          ("a0-b1-c1-d0", 6),
          ("a0-b1-c1-d1", 14),
          ("a1-b0-c0-d0", 1),
          ("a1-b0-c0-d1", 9),
          ("a1-b0-c1-d0", 5),
          ("a1-b0-c1-d1", 13),
          ("a1-b1-c0-d0", 3),
          ("a1-b1-c0-d1", 11),
          ("a1-b1-c1-d0", 7),
          ("a1-b1-c1-d1", 15))
    )


_RecfBundleBwCntIdlePattern_Type.__name__ = "Integer32"
_RecfBundleBwCntIdlePattern_Object = MibTableColumn
recfBundleBwCntIdlePattern = _RecfBundleBwCntIdlePattern_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 10),
    _RecfBundleBwCntIdlePattern_Type()
)
recfBundleBwCntIdlePattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleBwCntIdlePattern.setStatus("mandatory")


class _RecfBundleBusyOutTimer_Type(Integer32):
    """Custom type recfBundleBusyOutTimer based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              10,
              20,
              30,
              40,
              50,
              60,
              70,
              80,
              90,
              100,
              110,
              120,
              130,
              140,
              150,
              160,
              170,
              180,
              190,
              200,
              210,
              220,
              230,
              240,
              255)
        )
    )
    namedValues = NamedValues(
        *(("permanent", 255),
          ("sec10", 10),
          ("sec100", 100),
          ("sec110", 110),
          ("sec120", 120),
          ("sec130", 130),
          ("sec140", 140),
          ("sec150", 150),
          ("sec160", 160),
          ("sec170", 170),
          ("sec180", 180),
          ("sec190", 190),
          ("sec20", 20),
          ("sec200", 200),
          ("sec210", 210),
          ("sec220", 220),
          ("sec230", 230),
          ("sec240", 240),
          ("sec30", 30),
          ("sec40", 40),
          ("sec5", 5),
          ("sec50", 50),
          ("sec60", 60),
          ("sec70", 70),
          ("sec80", 80),
          ("sec90", 90))
    )


_RecfBundleBusyOutTimer_Type.__name__ = "Integer32"
_RecfBundleBusyOutTimer_Object = MibTableColumn
recfBundleBusyOutTimer = _RecfBundleBusyOutTimer_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 11),
    _RecfBundleBusyOutTimer_Type()
)
recfBundleBusyOutTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleBusyOutTimer.setStatus("mandatory")


class _RecfBundleSeizureTime_Type(Integer32):
    """Custom type recfBundleSeizureTime based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("ms100", 2),
          ("ms1000", 20),
          ("ms150", 3),
          ("ms200", 4),
          ("ms250", 5),
          ("ms300", 6),
          ("ms350", 7),
          ("ms400", 8),
          ("ms450", 9),
          ("ms50", 1),
          ("ms500", 10),
          ("ms550", 11),
          ("ms600", 12),
          ("ms650", 13),
          ("ms700", 14),
          ("ms750", 15),
          ("ms800", 16),
          ("ms850", 17),
          ("ms900", 18),
          ("ms950", 19))
    )


_RecfBundleSeizureTime_Type.__name__ = "Integer32"
_RecfBundleSeizureTime_Object = MibTableColumn
recfBundleSeizureTime = _RecfBundleSeizureTime_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 12),
    _RecfBundleSeizureTime_Type()
)
recfBundleSeizureTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleSeizureTime.setStatus("mandatory")


class _RecfBundlePreemptionTime_Type(Integer32):
    """Custom type recfBundlePreemptionTime based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29)
        )
    )
    namedValues = NamedValues(
        *(("ms250", 2),
          ("ms300", 3),
          ("ms350", 4),
          ("ms400", 5),
          ("ms450", 6),
          ("ms500", 7),
          ("ms550", 8),
          ("ms600", 9),
          ("ms650", 10),
          ("ms700", 11),
          ("ms750", 12),
          ("ms800", 13),
          ("ms850", 14),
          ("ms900", 15),
          ("ms950", 16),
          ("none", 1),
          ("s1", 20),
          ("s10", 29),
          ("s2", 21),
          ("s3", 22),
          ("s4", 23),
          ("s5", 24),
          ("s6", 25),
          ("s7", 26),
          ("s8", 27),
          ("s9", 28))
    )


_RecfBundlePreemptionTime_Type.__name__ = "Integer32"
_RecfBundlePreemptionTime_Object = MibTableColumn
recfBundlePreemptionTime = _RecfBundlePreemptionTime_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 13),
    _RecfBundlePreemptionTime_Type()
)
recfBundlePreemptionTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundlePreemptionTime.setStatus("mandatory")


class _RecfBundleOrgDisconnectTime_Type(Integer32):
    """Custom type recfBundleOrgDisconnectTime based on Integer32"""
    defaultValue = 45

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91)
        )
    )
    namedValues = NamedValues(
        *(("ms150", 1),
          ("ms200", 2),
          ("ms250", 3),
          ("ms300", 4),
          ("ms350", 5),
          ("ms400", 6),
          ("ms450", 7),
          ("ms500", 8),
          ("s10", 11),
          ("s100", 29),
          ("s105", 30),
          ("s110", 31),
          ("s115", 32),
          ("s120", 33),
          ("s125", 34),
          ("s130", 35),
          ("s135", 36),
          ("s140", 37),
          ("s145", 38),
          ("s15", 12),
          ("s150", 39),
          ("s155", 40),
          ("s160", 41),
          ("s165", 42),
          ("s170", 43),
          ("s175", 44),
          ("s180", 45),
          ("s185", 46),
          ("s190", 47),
          ("s195", 48),
          ("s20", 13),
          ("s200", 49),
          ("s205", 50),
          ("s210", 51),
          ("s215", 52),
          ("s220", 53),
          ("s225", 54),
          ("s230", 55),
          ("s235", 56),
          ("s240", 57),
          ("s245", 58),
          ("s25", 14),
          ("s250", 59),
          ("s255", 60),
          ("s260", 61),
          ("s265", 62),
          ("s270", 63),
          ("s275", 64),
          ("s280", 65),
          ("s285", 66),
          ("s290", 67),
          ("s295", 68),
          ("s30", 15),
          ("s300", 69),
          ("s305", 70),
          ("s310", 71),
          ("s315", 72),
          ("s320", 73),
          ("s325", 74),
          ("s330", 75),
          ("s335", 76),
          ("s340", 77),
          ("s345", 78),
          ("s35", 16),
          ("s350", 79),
          ("s355", 80),
          ("s360", 81),
          ("s365", 82),
          ("s370", 83),
          ("s375", 84),
          ("s380", 85),
          ("s385", 86),
          ("s390", 87),
          ("s395", 88),
          ("s40", 17),
          ("s400", 89),
          ("s405", 90),
          ("s410", 91),
          ("s45", 18),
          ("s50", 19),
          ("s55", 20),
          ("s60", 21),
          ("s65", 22),
          ("s70", 23),
          ("s75", 24),
          ("s80", 25),
          ("s85", 26),
          ("s90", 27),
          ("s95", 28))
    )


_RecfBundleOrgDisconnectTime_Type.__name__ = "Integer32"
_RecfBundleOrgDisconnectTime_Object = MibTableColumn
recfBundleOrgDisconnectTime = _RecfBundleOrgDisconnectTime_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 14),
    _RecfBundleOrgDisconnectTime_Type()
)
recfBundleOrgDisconnectTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleOrgDisconnectTime.setStatus("mandatory")


class _RecfBundleAttenuationRx_Type(Integer32):
    """Custom type recfBundleAttenuationRx based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("p0db", 2),
          ("p3db", 3),
          ("p6db", 4),
          ("p9db", 5))
    )


_RecfBundleAttenuationRx_Type.__name__ = "Integer32"
_RecfBundleAttenuationRx_Object = MibTableColumn
recfBundleAttenuationRx = _RecfBundleAttenuationRx_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 15),
    _RecfBundleAttenuationRx_Type()
)
recfBundleAttenuationRx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleAttenuationRx.setStatus("mandatory")


class _RecfBundleAttenuationTx_Type(Integer32):
    """Custom type recfBundleAttenuationTx based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("p0db", 2),
          ("p3db", 3),
          ("p6db", 4),
          ("p9db", 5))
    )


_RecfBundleAttenuationTx_Type.__name__ = "Integer32"
_RecfBundleAttenuationTx_Object = MibTableColumn
recfBundleAttenuationTx = _RecfBundleAttenuationTx_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 16),
    _RecfBundleAttenuationTx_Type()
)
recfBundleAttenuationTx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleAttenuationTx.setStatus("mandatory")


class _RecfBundleType_Type(Integer32):
    """Custom type recfBundleType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bandContent", 3),
          ("inl", 4),
          ("io", 2),
          ("null", 1))
    )


_RecfBundleType_Type.__name__ = "Integer32"
_RecfBundleType_Object = MibTableColumn
recfBundleType = _RecfBundleType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 17),
    _RecfBundleType_Type()
)
recfBundleType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleType.setStatus("mandatory")


class _RecfBundleINLNumber_Type(Integer32):
    """Custom type recfBundleINLNumber based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_RecfBundleINLNumber_Type.__name__ = "Integer32"
_RecfBundleINLNumber_Object = MibTableColumn
recfBundleINLNumber = _RecfBundleINLNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 18),
    _RecfBundleINLNumber_Type()
)
recfBundleINLNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfBundleINLNumber.setStatus("mandatory")


class _RecfBundleDeviceType_Type(Integer32):
    """Custom type recfBundleDeviceType based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfBundleDeviceType_Type.__name__ = "Integer32"
_RecfBundleDeviceType_Object = MibTableColumn
recfBundleDeviceType = _RecfBundleDeviceType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 19),
    _RecfBundleDeviceType_Type()
)
recfBundleDeviceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleDeviceType.setStatus("mandatory")


class _RecfBundleContentionSet_Type(Integer32):
    """Custom type recfBundleContentionSet based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("em", 1),
          ("fxo", 4),
          ("fxs", 6),
          ("fxs-ard", 5),
          ("signalInvert", 3))
    )


_RecfBundleContentionSet_Type.__name__ = "Integer32"
_RecfBundleContentionSet_Object = MibTableColumn
recfBundleContentionSet = _RecfBundleContentionSet_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 20),
    _RecfBundleContentionSet_Type()
)
recfBundleContentionSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleContentionSet.setStatus("mandatory")


class _RecfBundlePartitionID_Type(Integer32):
    """Custom type recfBundlePartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfBundlePartitionID_Type.__name__ = "Integer32"
_RecfBundlePartitionID_Object = MibTableColumn
recfBundlePartitionID = _RecfBundlePartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 21),
    _RecfBundlePartitionID_Type()
)
recfBundlePartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundlePartitionID.setStatus("mandatory")


class _RecfBundleBwCntBusyPattern_Type(Integer32):
    """Custom type recfBundleBwCntBusyPattern based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("a0-b0-c0-d0", 16),
          ("a0-b0-c0-d1", 8),
          ("a0-b0-c1-d0", 4),
          ("a0-b0-c1-d1", 12),
          ("a0-b1-c0-d0", 2),
          ("a0-b1-c0-d1", 10),
          ("a0-b1-c1-d0", 6),
          ("a0-b1-c1-d1", 14),
          ("a1-b0-c0-d0", 1),
          ("a1-b0-c0-d1", 9),
          ("a1-b0-c1-d0", 5),
          ("a1-b0-c1-d1", 13),
          ("a1-b1-c0-d0", 3),
          ("a1-b1-c0-d1", 11),
          ("a1-b1-c1-d0", 7),
          ("a1-b1-c1-d1", 15),
          ("oos", 254),
          ("reverse", 255))
    )


_RecfBundleBwCntBusyPattern_Type.__name__ = "Integer32"
_RecfBundleBwCntBusyPattern_Object = MibTableColumn
recfBundleBwCntBusyPattern = _RecfBundleBwCntBusyPattern_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 22),
    _RecfBundleBwCntBusyPattern_Type()
)
recfBundleBwCntBusyPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleBwCntBusyPattern.setStatus("mandatory")


class _RecfBundleSigInversion_Type(Integer32):
    """Custom type recfBundleSigInversion based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inverted", 2),
          ("normal", 1))
    )


_RecfBundleSigInversion_Type.__name__ = "Integer32"
_RecfBundleSigInversion_Object = MibTableColumn
recfBundleSigInversion = _RecfBundleSigInversion_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 23),
    _RecfBundleSigInversion_Type()
)
recfBundleSigInversion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleSigInversion.setStatus("mandatory")


class _RecfBundleDataPolarity_Type(Integer32):
    """Custom type recfBundleDataPolarity based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inverted", 2),
          ("normal", 1))
    )


_RecfBundleDataPolarity_Type.__name__ = "Integer32"
_RecfBundleDataPolarity_Object = MibTableColumn
recfBundleDataPolarity = _RecfBundleDataPolarity_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 24),
    _RecfBundleDataPolarity_Type()
)
recfBundleDataPolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundleDataPolarity.setStatus("mandatory")


class _RecfBundlePCMLaw_Type(Integer32):
    """Custom type recfBundlePCMLaw based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("converted", 2),
          ("native", 1))
    )


_RecfBundlePCMLaw_Type.__name__ = "Integer32"
_RecfBundlePCMLaw_Object = MibTableColumn
recfBundlePCMLaw = _RecfBundlePCMLaw_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 7, 1, 25),
    _RecfBundlePCMLaw_Type()
)
recfBundlePCMLaw.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfBundlePCMLaw.setStatus("mandatory")
_RecfINLTable_Object = MibTable
recfINLTable = _RecfINLTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8)
)
if mibBuilder.loadTexts:
    recfINLTable.setStatus("mandatory")
_RecfINLEntry_Object = MibTableRow
recfINLEntry = _RecfINLEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1)
)
recfINLEntry.setIndexNames(
    (0, "STMIB", "recfINLNumber"),
)
if mibBuilder.loadTexts:
    recfINLEntry.setStatus("mandatory")


class _RecfINLNumber_Type(Integer32):
    """Custom type recfINLNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_RecfINLNumber_Type.__name__ = "Integer32"
_RecfINLNumber_Object = MibTableColumn
recfINLNumber = _RecfINLNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 1),
    _RecfINLNumber_Type()
)
recfINLNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfINLNumber.setStatus("mandatory")
_RecfINLAddr_Type = BundleAddr
_RecfINLAddr_Object = MibTableColumn
recfINLAddr = _RecfINLAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 2),
    _RecfINLAddr_Type()
)
recfINLAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLAddr.setStatus("mandatory")


class _RecfINLStartMode_Type(Integer32):
    """Custom type recfINLStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfINLStartMode_Type.__name__ = "Integer32"
_RecfINLStartMode_Object = MibTableColumn
recfINLStartMode = _RecfINLStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 3),
    _RecfINLStartMode_Type()
)
recfINLStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLStartMode.setStatus("mandatory")


class _RecfINLUpdate_Type(Integer32):
    """Custom type recfINLUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3),
          ("updateReq", 2))
    )


_RecfINLUpdate_Type.__name__ = "Integer32"
_RecfINLUpdate_Object = MibTableColumn
recfINLUpdate = _RecfINLUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 4),
    _RecfINLUpdate_Type()
)
recfINLUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfINLUpdate.setStatus("mandatory")


class _RecfINLArqCir_Type(Integer32):
    """Custom type recfINLArqCir based on Integer32"""
    defaultValue = 9600

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_RecfINLArqCir_Type.__name__ = "Integer32"
_RecfINLArqCir_Object = MibTableColumn
recfINLArqCir = _RecfINLArqCir_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 5),
    _RecfINLArqCir_Type()
)
recfINLArqCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLArqCir.setStatus("mandatory")


class _RecfINLMaxPacketDS0_Type(Integer32):
    """Custom type recfINLMaxPacketDS0 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_RecfINLMaxPacketDS0_Type.__name__ = "Integer32"
_RecfINLMaxPacketDS0_Object = MibTableColumn
recfINLMaxPacketDS0 = _RecfINLMaxPacketDS0_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 6),
    _RecfINLMaxPacketDS0_Type()
)
recfINLMaxPacketDS0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLMaxPacketDS0.setStatus("mandatory")


class _RecfINLPacketCirOccupy_Type(Integer32):
    """Custom type recfINLPacketCirOccupy based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RecfINLPacketCirOccupy_Type.__name__ = "Integer32"
_RecfINLPacketCirOccupy_Object = MibTableColumn
recfINLPacketCirOccupy = _RecfINLPacketCirOccupy_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 7),
    _RecfINLPacketCirOccupy_Type()
)
recfINLPacketCirOccupy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLPacketCirOccupy.setStatus("mandatory")


class _RecfINLMaxTDMDS0_Type(Integer32):
    """Custom type recfINLMaxTDMDS0 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_RecfINLMaxTDMDS0_Type.__name__ = "Integer32"
_RecfINLMaxTDMDS0_Object = MibTableColumn
recfINLMaxTDMDS0 = _RecfINLMaxTDMDS0_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 8),
    _RecfINLMaxTDMDS0_Type()
)
recfINLMaxTDMDS0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLMaxTDMDS0.setStatus("mandatory")


class _RecfINLGroup_Type(OctetString):
    """Custom type recfINLGroup based on OctetString"""
    defaultHexValue = "7f"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RecfINLGroup_Type.__name__ = "OctetString"
_RecfINLGroup_Object = MibTableColumn
recfINLGroup = _RecfINLGroup_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 9),
    _RecfINLGroup_Type()
)
recfINLGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLGroup.setStatus("mandatory")


class _RecfINLCost_Type(Integer32):
    """Custom type recfINLCost based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RecfINLCost_Type.__name__ = "Integer32"
_RecfINLCost_Object = MibTableColumn
recfINLCost = _RecfINLCost_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 10),
    _RecfINLCost_Type()
)
recfINLCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLCost.setStatus("mandatory")


class _RecfINLEncryption_Type(Integer32):
    """Custom type recfINLEncryption based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("encrypted", 2),
          ("normal", 1))
    )


_RecfINLEncryption_Type.__name__ = "Integer32"
_RecfINLEncryption_Object = MibTableColumn
recfINLEncryption = _RecfINLEncryption_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 11),
    _RecfINLEncryption_Type()
)
recfINLEncryption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLEncryption.setStatus("mandatory")


class _RecfINLSatelliteHop_Type(Integer32):
    """Custom type recfINLSatelliteHop based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_RecfINLSatelliteHop_Type.__name__ = "Integer32"
_RecfINLSatelliteHop_Object = MibTableColumn
recfINLSatelliteHop = _RecfINLSatelliteHop_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 12),
    _RecfINLSatelliteHop_Type()
)
recfINLSatelliteHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLSatelliteHop.setStatus("mandatory")


class _RecfINLOOSTimer_Type(Integer32):
    """Custom type recfINLOOSTimer based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_RecfINLOOSTimer_Type.__name__ = "Integer32"
_RecfINLOOSTimer_Object = MibTableColumn
recfINLOOSTimer = _RecfINLOOSTimer_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 13),
    _RecfINLOOSTimer_Type()
)
recfINLOOSTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLOOSTimer.setStatus("mandatory")


class _RecfINLOrig_Type(Integer32):
    """Custom type recfINLOrig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_RecfINLOrig_Type.__name__ = "Integer32"
_RecfINLOrig_Object = MibTableColumn
recfINLOrig = _RecfINLOrig_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 14),
    _RecfINLOrig_Type()
)
recfINLOrig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLOrig.setStatus("mandatory")


class _RecfINLRemoteNodeID_Type(NodeAddr):
    """Custom type recfINLRemoteNodeID based on NodeAddr"""
    defaultHexValue = "0000"


_RecfINLRemoteNodeID_Object = MibTableColumn
recfINLRemoteNodeID = _RecfINLRemoteNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 15),
    _RecfINLRemoteNodeID_Type()
)
recfINLRemoteNodeID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLRemoteNodeID.setStatus("mandatory")


class _RecfINLRemoteINLID_Type(Integer32):
    """Custom type recfINLRemoteINLID based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_RecfINLRemoteINLID_Type.__name__ = "Integer32"
_RecfINLRemoteINLID_Object = MibTableColumn
recfINLRemoteINLID = _RecfINLRemoteINLID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 16),
    _RecfINLRemoteINLID_Type()
)
recfINLRemoteINLID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfINLRemoteINLID.setStatus("mandatory")


class _RecfINLPartitionID_Type(Integer32):
    """Custom type recfINLPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfINLPartitionID_Type.__name__ = "Integer32"
_RecfINLPartitionID_Object = MibTableColumn
recfINLPartitionID = _RecfINLPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 17),
    _RecfINLPartitionID_Type()
)
recfINLPartitionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfINLPartitionID.setStatus("mandatory")


class _RecfINLKGMode_Type(Integer32):
    """Custom type recfINLKGMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("kgDisable", 2),
          ("kgEnable", 1))
    )


_RecfINLKGMode_Type.__name__ = "Integer32"
_RecfINLKGMode_Object = MibTableColumn
recfINLKGMode = _RecfINLKGMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 8, 1, 18),
    _RecfINLKGMode_Type()
)
recfINLKGMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfINLKGMode.setStatus("mandatory")
_RecfTDMChannelTable_Object = MibTable
recfTDMChannelTable = _RecfTDMChannelTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9)
)
if mibBuilder.loadTexts:
    recfTDMChannelTable.setStatus("mandatory")
_RecfTDMChannelEntry_Object = MibTableRow
recfTDMChannelEntry = _RecfTDMChannelEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1)
)
recfTDMChannelEntry.setIndexNames(
    (0, "STMIB", "recfTDMChannelAddr"),
)
if mibBuilder.loadTexts:
    recfTDMChannelEntry.setStatus("mandatory")
_RecfTDMChannelAddr_Type = ChannelAddr
_RecfTDMChannelAddr_Object = MibTableColumn
recfTDMChannelAddr = _RecfTDMChannelAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 1),
    _RecfTDMChannelAddr_Type()
)
recfTDMChannelAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfTDMChannelAddr.setStatus("mandatory")
_RecfTDMChannelDestNodeID_Type = NodeAddr
_RecfTDMChannelDestNodeID_Object = MibTableColumn
recfTDMChannelDestNodeID = _RecfTDMChannelDestNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 2),
    _RecfTDMChannelDestNodeID_Type()
)
recfTDMChannelDestNodeID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfTDMChannelDestNodeID.setStatus("mandatory")
_RecfTDMChannelDestAddr_Type = ChannelAddr
_RecfTDMChannelDestAddr_Object = MibTableColumn
recfTDMChannelDestAddr = _RecfTDMChannelDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 3),
    _RecfTDMChannelDestAddr_Type()
)
recfTDMChannelDestAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfTDMChannelDestAddr.setStatus("mandatory")


class _RecfTDMChannelControlMode_Type(Integer32):
    """Custom type recfTDMChannelControlMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("erase", 3))
    )


_RecfTDMChannelControlMode_Type.__name__ = "Integer32"
_RecfTDMChannelControlMode_Object = MibTableColumn
recfTDMChannelControlMode = _RecfTDMChannelControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 4),
    _RecfTDMChannelControlMode_Type()
)
recfTDMChannelControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfTDMChannelControlMode.setStatus("mandatory")


class _RecfTDMChannelUpdate_Type(Integer32):
    """Custom type recfTDMChannelUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_RecfTDMChannelUpdate_Type.__name__ = "Integer32"
_RecfTDMChannelUpdate_Object = MibTableColumn
recfTDMChannelUpdate = _RecfTDMChannelUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 5),
    _RecfTDMChannelUpdate_Type()
)
recfTDMChannelUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfTDMChannelUpdate.setStatus("mandatory")


class _RecfTDMChannelModuleType_Type(Integer32):
    """Custom type recfTDMChannelModuleType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              11,
              12,
              13,
              14,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("asm", 9),
          ("dsm", 19),
          ("e1m", 6),
          ("e3m", 20),
          ("fsm", 11),
          ("lgm", 8),
          ("rtm", 14),
          ("sdm", 12),
          ("sgm", 7),
          ("sgmAg", 13),
          ("t1m", 5))
    )


_RecfTDMChannelModuleType_Type.__name__ = "Integer32"
_RecfTDMChannelModuleType_Object = MibTableColumn
recfTDMChannelModuleType = _RecfTDMChannelModuleType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 6),
    _RecfTDMChannelModuleType_Type()
)
recfTDMChannelModuleType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfTDMChannelModuleType.setStatus("mandatory")


class _RecfTDMChannelDeviceType_Type(Integer32):
    """Custom type recfTDMChannelDeviceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RecfTDMChannelDeviceType_Type.__name__ = "Integer32"
_RecfTDMChannelDeviceType_Object = MibTableColumn
recfTDMChannelDeviceType = _RecfTDMChannelDeviceType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 7),
    _RecfTDMChannelDeviceType_Type()
)
recfTDMChannelDeviceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfTDMChannelDeviceType.setStatus("mandatory")


class _RecfTDMChannelProfile_Type(Integer32):
    """Custom type recfTDMChannelProfile based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfTDMChannelProfile_Type.__name__ = "Integer32"
_RecfTDMChannelProfile_Object = MibTableColumn
recfTDMChannelProfile = _RecfTDMChannelProfile_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 8),
    _RecfTDMChannelProfile_Type()
)
recfTDMChannelProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfTDMChannelProfile.setStatus("mandatory")


class _RecfTDMChannelOrig_Type(Integer32):
    """Custom type recfTDMChannelOrig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_RecfTDMChannelOrig_Type.__name__ = "Integer32"
_RecfTDMChannelOrig_Object = MibTableColumn
recfTDMChannelOrig = _RecfTDMChannelOrig_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 9),
    _RecfTDMChannelOrig_Type()
)
recfTDMChannelOrig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfTDMChannelOrig.setStatus("mandatory")


class _RecfTDMChannelPartitionID_Type(Integer32):
    """Custom type recfTDMChannelPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfTDMChannelPartitionID_Type.__name__ = "Integer32"
_RecfTDMChannelPartitionID_Object = MibTableColumn
recfTDMChannelPartitionID = _RecfTDMChannelPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 10),
    _RecfTDMChannelPartitionID_Type()
)
recfTDMChannelPartitionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfTDMChannelPartitionID.setStatus("mandatory")


class _RecfTDMChannelState_Type(Integer32):
    """Custom type recfTDMChannelState based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(30,
              33,
              34,
              35,
              41,
              42,
              86,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              104,
              105,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              125,
              128,
              129,
              130,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              255)
        )
    )
    namedValues = NamedValues(
        *(("channelLimitExceeded", 130),
          ("connected", 35),
          ("contentionTerminate", 104),
          ("destBusy", 115),
          ("destChMibOff", 118),
          ("destExceedSharedBw", 120),
          ("destIoUnusable", 112),
          ("destMismatch", 116),
          ("disconnectedSAF", 125),
          ("linkDisconnectError", 94),
          ("noBypassServer", 151),
          ("noDestAgmSaf", 159),
          ("noDestAgmScf", 161),
          ("noDestAsmSaf", 163),
          ("noDestAsmScf", 165),
          ("noDestChMIB", 89),
          ("noDestChProfile", 111),
          ("noDestIoMIB", 90),
          ("noDestLgmSaf", 167),
          ("noDestLgmScf", 169),
          ("noDestRtmSaf", 171),
          ("noDestRtmScf", 173),
          ("noDestServer", 153),
          ("noDestSgmSaf", 155),
          ("noDestSgmScf", 157),
          ("noDestVoicePort", 175),
          ("noInlBw", 41),
          ("noRoute", 42),
          ("noServer", 30),
          ("noSourceChProfile", 110),
          ("noSourceIoMIB", 86),
          ("noSrcAgmSaf", 158),
          ("noSrcAgmScf", 160),
          ("noSrcAsmSaf", 162),
          ("noSrcAsmScf", 164),
          ("noSrcLgmSaf", 166),
          ("noSrcLgmScf", 168),
          ("noSrcRtmSaf", 170),
          ("noSrcRtmScf", 172),
          ("noSrcServer", 152),
          ("noSrcSgmSaf", 154),
          ("noSrcSgmScf", 156),
          ("noSrcVoicePort", 174),
          ("nodeReset", 33),
          ("notApplicable", 255),
          ("notMatchBitMode", 113),
          ("notMatchDeviceType", 91),
          ("notMatchIoSpeed", 92),
          ("notMatchPartition", 93),
          ("notMatchSignalling", 114),
          ("processing", 34),
          ("rejectByDestModule", 129),
          ("rejectBySourceModule", 128),
          ("sourceChMibOff", 117),
          ("sourceExceedSharedBw", 119),
          ("sourceIoUnusable", 88),
          ("userInitiate", 105))
    )


_RecfTDMChannelState_Type.__name__ = "Integer32"
_RecfTDMChannelState_Object = MibTableColumn
recfTDMChannelState = _RecfTDMChannelState_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 11),
    _RecfTDMChannelState_Type()
)
recfTDMChannelState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfTDMChannelState.setStatus("mandatory")


class _RecfTDMChannelDestCheckMode_Type(Integer32):
    """Custom type recfTDMChannelDestCheckMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfTDMChannelDestCheckMode_Type.__name__ = "Integer32"
_RecfTDMChannelDestCheckMode_Object = MibTableColumn
recfTDMChannelDestCheckMode = _RecfTDMChannelDestCheckMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 12),
    _RecfTDMChannelDestCheckMode_Type()
)
recfTDMChannelDestCheckMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfTDMChannelDestCheckMode.setStatus("mandatory")


class _RecfTDMChannelConnectMode_Type(Integer32):
    """Custom type recfTDMChannelConnectMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("autoConnect", 1),
          ("userInitiate", 2))
    )


_RecfTDMChannelConnectMode_Type.__name__ = "Integer32"
_RecfTDMChannelConnectMode_Object = MibTableColumn
recfTDMChannelConnectMode = _RecfTDMChannelConnectMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 13),
    _RecfTDMChannelConnectMode_Type()
)
recfTDMChannelConnectMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfTDMChannelConnectMode.setStatus("mandatory")


class _RecfTDMChannelSpecialPrfType_Type(Integer32):
    """Custom type recfTDMChannelSpecialPrfType based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dataProfile", 2),
          ("none", 255),
          ("voiceProfile", 1))
    )


_RecfTDMChannelSpecialPrfType_Type.__name__ = "Integer32"
_RecfTDMChannelSpecialPrfType_Object = MibTableColumn
recfTDMChannelSpecialPrfType = _RecfTDMChannelSpecialPrfType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 14),
    _RecfTDMChannelSpecialPrfType_Type()
)
recfTDMChannelSpecialPrfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfTDMChannelSpecialPrfType.setStatus("mandatory")


class _RecfTDMChannelSpecialProfile_Type(Integer32):
    """Custom type recfTDMChannelSpecialProfile based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfTDMChannelSpecialProfile_Type.__name__ = "Integer32"
_RecfTDMChannelSpecialProfile_Object = MibTableColumn
recfTDMChannelSpecialProfile = _RecfTDMChannelSpecialProfile_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 15),
    _RecfTDMChannelSpecialProfile_Type()
)
recfTDMChannelSpecialProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfTDMChannelSpecialProfile.setStatus("mandatory")


class _RecfTDMChannelDestNodeType_Type(Integer32):
    """Custom type recfTDMChannelDestNodeType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("link", 2),
          ("st", 1))
    )


_RecfTDMChannelDestNodeType_Type.__name__ = "Integer32"
_RecfTDMChannelDestNodeType_Object = MibTableColumn
recfTDMChannelDestNodeType = _RecfTDMChannelDestNodeType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 9, 1, 16),
    _RecfTDMChannelDestNodeType_Type()
)
recfTDMChannelDestNodeType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfTDMChannelDestNodeType.setStatus("mandatory")
_RecfFrame_ObjectIdentity = ObjectIdentity
recfFrame = _RecfFrame_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10)
)
_RecfFrPortTable_Object = MibTable
recfFrPortTable = _RecfFrPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1)
)
if mibBuilder.loadTexts:
    recfFrPortTable.setStatus("mandatory")
_RecfFrPortEntry_Object = MibTableRow
recfFrPortEntry = _RecfFrPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1)
)
recfFrPortEntry.setIndexNames(
    (0, "STMIB", "recfFrPortAddr"),
)
if mibBuilder.loadTexts:
    recfFrPortEntry.setStatus("mandatory")
_RecfFrPortAddr_Type = PortAddr
_RecfFrPortAddr_Object = MibTableColumn
recfFrPortAddr = _RecfFrPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 1),
    _RecfFrPortAddr_Type()
)
recfFrPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfFrPortAddr.setStatus("mandatory")


class _RecfFrPortDescription_Type(DisplayString):
    """Custom type recfFrPortDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_RecfFrPortDescription_Type.__name__ = "DisplayString"
_RecfFrPortDescription_Object = MibTableColumn
recfFrPortDescription = _RecfFrPortDescription_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 2),
    _RecfFrPortDescription_Type()
)
recfFrPortDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortDescription.setStatus("mandatory")


class _RecfFrPortStartMode_Type(Integer32):
    """Custom type recfFrPortStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfFrPortStartMode_Type.__name__ = "Integer32"
_RecfFrPortStartMode_Object = MibTableColumn
recfFrPortStartMode = _RecfFrPortStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 3),
    _RecfFrPortStartMode_Type()
)
recfFrPortStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortStartMode.setStatus("mandatory")


class _RecfFrPortUpdate_Type(Integer32):
    """Custom type recfFrPortUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_RecfFrPortUpdate_Type.__name__ = "Integer32"
_RecfFrPortUpdate_Object = MibTableColumn
recfFrPortUpdate = _RecfFrPortUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 4),
    _RecfFrPortUpdate_Type()
)
recfFrPortUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfFrPortUpdate.setStatus("mandatory")


class _RecfFrPortLmiActive_Type(Integer32):
    """Custom type recfFrPortLmiActive based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ansi617D", 1),
          ("ccittQ933A", 2),
          ("disabled", 3))
    )


_RecfFrPortLmiActive_Type.__name__ = "Integer32"
_RecfFrPortLmiActive_Object = MibTableColumn
recfFrPortLmiActive = _RecfFrPortLmiActive_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 5),
    _RecfFrPortLmiActive_Type()
)
recfFrPortLmiActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortLmiActive.setStatus("mandatory")


class _RecfFrPortLmiPollingTimer_Type(Integer32):
    """Custom type recfFrPortLmiPollingTimer based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("sec10", 2),
          ("sec15", 3),
          ("sec20", 4),
          ("sec25", 5),
          ("sec30", 6),
          ("sec5", 1))
    )


_RecfFrPortLmiPollingTimer_Type.__name__ = "Integer32"
_RecfFrPortLmiPollingTimer_Object = MibTableColumn
recfFrPortLmiPollingTimer = _RecfFrPortLmiPollingTimer_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 6),
    _RecfFrPortLmiPollingTimer_Type()
)
recfFrPortLmiPollingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortLmiPollingTimer.setStatus("mandatory")


class _RecfFrPortLmiWaitingTimer_Type(Integer32):
    """Custom type recfFrPortLmiWaitingTimer based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("sec10", 2),
          ("sec15", 3),
          ("sec20", 4),
          ("sec25", 5),
          ("sec30", 6),
          ("sec5", 1))
    )


_RecfFrPortLmiWaitingTimer_Type.__name__ = "Integer32"
_RecfFrPortLmiWaitingTimer_Object = MibTableColumn
recfFrPortLmiWaitingTimer = _RecfFrPortLmiWaitingTimer_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 7),
    _RecfFrPortLmiWaitingTimer_Type()
)
recfFrPortLmiWaitingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortLmiWaitingTimer.setStatus("mandatory")


class _RecfFrPortLmiFullEnqInterval_Type(Integer32):
    """Custom type recfFrPortLmiFullEnqInterval based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfFrPortLmiFullEnqInterval_Type.__name__ = "Integer32"
_RecfFrPortLmiFullEnqInterval_Object = MibTableColumn
recfFrPortLmiFullEnqInterval = _RecfFrPortLmiFullEnqInterval_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 8),
    _RecfFrPortLmiFullEnqInterval_Type()
)
recfFrPortLmiFullEnqInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortLmiFullEnqInterval.setStatus("mandatory")


class _RecfFrPortLmiMonitoredEvents_Type(Integer32):
    """Custom type recfFrPortLmiMonitoredEvents based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RecfFrPortLmiMonitoredEvents_Type.__name__ = "Integer32"
_RecfFrPortLmiMonitoredEvents_Object = MibTableColumn
recfFrPortLmiMonitoredEvents = _RecfFrPortLmiMonitoredEvents_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 9),
    _RecfFrPortLmiMonitoredEvents_Type()
)
recfFrPortLmiMonitoredEvents.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortLmiMonitoredEvents.setStatus("mandatory")


class _RecfFrPortErrorThreshold_Type(Integer32):
    """Custom type recfFrPortErrorThreshold based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RecfFrPortErrorThreshold_Type.__name__ = "Integer32"
_RecfFrPortErrorThreshold_Object = MibTableColumn
recfFrPortErrorThreshold = _RecfFrPortErrorThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 10),
    _RecfFrPortErrorThreshold_Type()
)
recfFrPortErrorThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortErrorThreshold.setStatus("mandatory")


class _RecfFrPortDeviceType_Type(Integer32):
    """Custom type recfFrPortDeviceType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ad10", 4),
          ("networkToNetwork", 3),
          ("networkToUser", 1),
          ("regularHdlc", 5),
          ("userToNetwork", 2))
    )


_RecfFrPortDeviceType_Type.__name__ = "Integer32"
_RecfFrPortDeviceType_Object = MibTableColumn
recfFrPortDeviceType = _RecfFrPortDeviceType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 11),
    _RecfFrPortDeviceType_Type()
)
recfFrPortDeviceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortDeviceType.setStatus("mandatory")
_RecfFrPortAd10NodeID_Type = NodeAddr
_RecfFrPortAd10NodeID_Object = MibTableColumn
recfFrPortAd10NodeID = _RecfFrPortAd10NodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 12),
    _RecfFrPortAd10NodeID_Type()
)
recfFrPortAd10NodeID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortAd10NodeID.setStatus("mandatory")
_RecfFrPortAd10PortID_Type = PortAddr
_RecfFrPortAd10PortID_Object = MibTableColumn
recfFrPortAd10PortID = _RecfFrPortAd10PortID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 13),
    _RecfFrPortAd10PortID_Type()
)
recfFrPortAd10PortID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortAd10PortID.setStatus("mandatory")


class _RecfFrPortBitMode_Type(Integer32):
    """Custom type recfFrPortBitMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("b7bit", 1),
          ("b8bit", 2))
    )


_RecfFrPortBitMode_Type.__name__ = "Integer32"
_RecfFrPortBitMode_Object = MibTableColumn
recfFrPortBitMode = _RecfFrPortBitMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 14),
    _RecfFrPortBitMode_Type()
)
recfFrPortBitMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortBitMode.setStatus("mandatory")


class _RecfFrPortMaxFrameSize_Type(Integer32):
    """Custom type recfFrPortMaxFrameSize based on Integer32"""
    defaultValue = 4096

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 4096),
    )


_RecfFrPortMaxFrameSize_Type.__name__ = "Integer32"
_RecfFrPortMaxFrameSize_Object = MibTableColumn
recfFrPortMaxFrameSize = _RecfFrPortMaxFrameSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 15),
    _RecfFrPortMaxFrameSize_Type()
)
recfFrPortMaxFrameSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortMaxFrameSize.setStatus("mandatory")


class _RecfFrPortSharedZeroFlag_Type(Integer32):
    """Custom type recfFrPortSharedZeroFlag based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_RecfFrPortSharedZeroFlag_Type.__name__ = "Integer32"
_RecfFrPortSharedZeroFlag_Object = MibTableColumn
recfFrPortSharedZeroFlag = _RecfFrPortSharedZeroFlag_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 16),
    _RecfFrPortSharedZeroFlag_Type()
)
recfFrPortSharedZeroFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortSharedZeroFlag.setStatus("mandatory")


class _RecfFrPortMaxCIR_Type(Integer32):
    """Custom type recfFrPortMaxCIR based on Integer32"""
    defaultValue = 64000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3000000),
    )


_RecfFrPortMaxCIR_Type.__name__ = "Integer32"
_RecfFrPortMaxCIR_Object = MibTableColumn
recfFrPortMaxCIR = _RecfFrPortMaxCIR_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 17),
    _RecfFrPortMaxCIR_Type()
)
recfFrPortMaxCIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortMaxCIR.setStatus("mandatory")


class _RecfFrPortAvgPktSize_Type(Integer32):
    """Custom type recfFrPortAvgPktSize based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("b128", 3),
          ("b256", 4),
          ("b32", 1),
          ("b64", 2))
    )


_RecfFrPortAvgPktSize_Type.__name__ = "Integer32"
_RecfFrPortAvgPktSize_Object = MibTableColumn
recfFrPortAvgPktSize = _RecfFrPortAvgPktSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 18),
    _RecfFrPortAvgPktSize_Type()
)
recfFrPortAvgPktSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortAvgPktSize.setStatus("mandatory")


class _RecfFrPortAllocationPref_Type(Integer32):
    """Custom type recfFrPortAllocationPref based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dontCare", 1),
          ("fsm16", 2),
          ("fsm64", 3))
    )


_RecfFrPortAllocationPref_Type.__name__ = "Integer32"
_RecfFrPortAllocationPref_Object = MibTableColumn
recfFrPortAllocationPref = _RecfFrPortAllocationPref_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 19),
    _RecfFrPortAllocationPref_Type()
)
recfFrPortAllocationPref.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortAllocationPref.setStatus("mandatory")


class _RecfFrPortBillingSegSize_Type(Integer32):
    """Custom type recfFrPortBillingSegSize based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("b1024", 6),
          ("b128", 3),
          ("b256", 4),
          ("b512", 5),
          ("b64", 2),
          ("pktsize", 1))
    )


_RecfFrPortBillingSegSize_Type.__name__ = "Integer32"
_RecfFrPortBillingSegSize_Object = MibTableColumn
recfFrPortBillingSegSize = _RecfFrPortBillingSegSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 20),
    _RecfFrPortBillingSegSize_Type()
)
recfFrPortBillingSegSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortBillingSegSize.setStatus("mandatory")


class _RecfFrPortBillingControl_Type(Integer32):
    """Custom type recfFrPortBillingControl based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfFrPortBillingControl_Type.__name__ = "Integer32"
_RecfFrPortBillingControl_Object = MibTableColumn
recfFrPortBillingControl = _RecfFrPortBillingControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 21),
    _RecfFrPortBillingControl_Type()
)
recfFrPortBillingControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortBillingControl.setStatus("mandatory")


class _RecfFrPortPartitionID_Type(Integer32):
    """Custom type recfFrPortPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfFrPortPartitionID_Type.__name__ = "Integer32"
_RecfFrPortPartitionID_Object = MibTableColumn
recfFrPortPartitionID = _RecfFrPortPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 22),
    _RecfFrPortPartitionID_Type()
)
recfFrPortPartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortPartitionID.setStatus("mandatory")


class _RecfFrPortEncodingType_Type(Integer32):
    """Custom type recfFrPortEncodingType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("nrz", 1),
          ("nrzb", 2),
          ("nrzi-mark", 3),
          ("nrzi-space", 4))
    )


_RecfFrPortEncodingType_Type.__name__ = "Integer32"
_RecfFrPortEncodingType_Object = MibTableColumn
recfFrPortEncodingType = _RecfFrPortEncodingType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 1, 1, 23),
    _RecfFrPortEncodingType_Type()
)
recfFrPortEncodingType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrPortEncodingType.setStatus("mandatory")
_RecfFrChannelTable_Object = MibTable
recfFrChannelTable = _RecfFrChannelTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2)
)
if mibBuilder.loadTexts:
    recfFrChannelTable.setStatus("mandatory")
_RecfFrChannelEntry_Object = MibTableRow
recfFrChannelEntry = _RecfFrChannelEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1)
)
recfFrChannelEntry.setIndexNames(
    (0, "STMIB", "recfFrChannelAddr"),
)
if mibBuilder.loadTexts:
    recfFrChannelEntry.setStatus("mandatory")
_RecfFrChannelAddr_Type = ChannelAddr
_RecfFrChannelAddr_Object = MibTableColumn
recfFrChannelAddr = _RecfFrChannelAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 1),
    _RecfFrChannelAddr_Type()
)
recfFrChannelAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfFrChannelAddr.setStatus("mandatory")
_RecfFrChannelDestNodeID_Type = NodeAddr
_RecfFrChannelDestNodeID_Object = MibTableColumn
recfFrChannelDestNodeID = _RecfFrChannelDestNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 2),
    _RecfFrChannelDestNodeID_Type()
)
recfFrChannelDestNodeID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelDestNodeID.setStatus("mandatory")
_RecfFrChannelDestAddr_Type = ChannelAddr
_RecfFrChannelDestAddr_Object = MibTableColumn
recfFrChannelDestAddr = _RecfFrChannelDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 3),
    _RecfFrChannelDestAddr_Type()
)
recfFrChannelDestAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelDestAddr.setStatus("mandatory")


class _RecfFrChannelControlMode_Type(Integer32):
    """Custom type recfFrChannelControlMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("erase", 3))
    )


_RecfFrChannelControlMode_Type.__name__ = "Integer32"
_RecfFrChannelControlMode_Object = MibTableColumn
recfFrChannelControlMode = _RecfFrChannelControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 4),
    _RecfFrChannelControlMode_Type()
)
recfFrChannelControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelControlMode.setStatus("mandatory")


class _RecfFrChannelUpdate_Type(Integer32):
    """Custom type recfFrChannelUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_RecfFrChannelUpdate_Type.__name__ = "Integer32"
_RecfFrChannelUpdate_Object = MibTableColumn
recfFrChannelUpdate = _RecfFrChannelUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 5),
    _RecfFrChannelUpdate_Type()
)
recfFrChannelUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfFrChannelUpdate.setStatus("mandatory")


class _RecfFrChannelType_Type(Integer32):
    """Custom type recfFrChannelType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("expressRouting", 3),
          ("regular", 1))
    )


_RecfFrChannelType_Type.__name__ = "Integer32"
_RecfFrChannelType_Object = MibTableColumn
recfFrChannelType = _RecfFrChannelType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 6),
    _RecfFrChannelType_Type()
)
recfFrChannelType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelType.setStatus("mandatory")


class _RecfFrChannelCirTransPriority_Type(Integer32):
    """Custom type recfFrChannelCirTransPriority based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RecfFrChannelCirTransPriority_Type.__name__ = "Integer32"
_RecfFrChannelCirTransPriority_Object = MibTableColumn
recfFrChannelCirTransPriority = _RecfFrChannelCirTransPriority_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 7),
    _RecfFrChannelCirTransPriority_Type()
)
recfFrChannelCirTransPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelCirTransPriority.setStatus("mandatory")


class _RecfFrChannelCIR_Type(Integer32):
    """Custom type recfFrChannelCIR based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_RecfFrChannelCIR_Type.__name__ = "Integer32"
_RecfFrChannelCIR_Object = MibTableColumn
recfFrChannelCIR = _RecfFrChannelCIR_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 8),
    _RecfFrChannelCIR_Type()
)
recfFrChannelCIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelCIR.setStatus("mandatory")


class _RecfFrChannelEIR_Type(Integer32):
    """Custom type recfFrChannelEIR based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_RecfFrChannelEIR_Type.__name__ = "Integer32"
_RecfFrChannelEIR_Object = MibTableColumn
recfFrChannelEIR = _RecfFrChannelEIR_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 9),
    _RecfFrChannelEIR_Type()
)
recfFrChannelEIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelEIR.setStatus("mandatory")


class _RecfFrChannelBc_Type(Integer32):
    """Custom type recfFrChannelBc based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_RecfFrChannelBc_Type.__name__ = "Integer32"
_RecfFrChannelBc_Object = MibTableColumn
recfFrChannelBc = _RecfFrChannelBc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 10),
    _RecfFrChannelBc_Type()
)
recfFrChannelBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelBc.setStatus("mandatory")


class _RecfFrChannelProfile_Type(Integer32):
    """Custom type recfFrChannelProfile based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfFrChannelProfile_Type.__name__ = "Integer32"
_RecfFrChannelProfile_Object = MibTableColumn
recfFrChannelProfile = _RecfFrChannelProfile_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 11),
    _RecfFrChannelProfile_Type()
)
recfFrChannelProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelProfile.setStatus("mandatory")


class _RecfFrChannelOrig_Type(Integer32):
    """Custom type recfFrChannelOrig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_RecfFrChannelOrig_Type.__name__ = "Integer32"
_RecfFrChannelOrig_Object = MibTableColumn
recfFrChannelOrig = _RecfFrChannelOrig_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 12),
    _RecfFrChannelOrig_Type()
)
recfFrChannelOrig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelOrig.setStatus("mandatory")


class _RecfFrChannelPartitionID_Type(Integer32):
    """Custom type recfFrChannelPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfFrChannelPartitionID_Type.__name__ = "Integer32"
_RecfFrChannelPartitionID_Object = MibTableColumn
recfFrChannelPartitionID = _RecfFrChannelPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 13),
    _RecfFrChannelPartitionID_Type()
)
recfFrChannelPartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelPartitionID.setStatus("mandatory")


class _RecfFrChannelState_Type(Integer32):
    """Custom type recfFrChannelState based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(30,
              33,
              34,
              35,
              41,
              42,
              86,
              88,
              89,
              90,
              91,
              92,
              93,
              104,
              105,
              110,
              111,
              112,
              115,
              116,
              117,
              118,
              119,
              120,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              151,
              152,
              153,
              255)
        )
    )
    namedValues = NamedValues(
        *(("bypassNoAvailablePvc", 136),
          ("bypassNoAvailableThroughput", 141),
          ("connected", 35),
          ("contentionTerminate", 104),
          ("destBusy", 115),
          ("destChMibOff", 118),
          ("destExceedSharedBw", 120),
          ("destHdlcExcessDlcis", 131),
          ("destIoUnusable", 112),
          ("destMismatch", 116),
          ("destNoAvailableDlcis", 133),
          ("destNoAvailableModuleMemory", 140),
          ("destNoAvailablePvc", 135),
          ("destNoAvailableThroughput", 138),
          ("noBypassServer", 151),
          ("noDestChMIB", 89),
          ("noDestChProfile", 111),
          ("noDestIoMIB", 90),
          ("noDestServer", 153),
          ("noInlBw", 41),
          ("noRoute", 42),
          ("noServer", 30),
          ("noSourceChProfile", 110),
          ("noSourceIoMIB", 86),
          ("noSrcServer", 152),
          ("nodeReset", 33),
          ("notApplicable", 255),
          ("notMatchDeviceType", 91),
          ("notMatchIoSpeed", 92),
          ("notMatchPartition", 93),
          ("processing", 34),
          ("rejectByDestModule", 129),
          ("rejectBySourceModule", 128),
          ("sourceChMibOff", 117),
          ("sourceExceedSharedBw", 119),
          ("sourceHdlcExcessDlcis", 130),
          ("sourceIoUnusable", 88),
          ("sourceNoAvailableDlcis", 132),
          ("sourceNoAvailableModuleMemory", 139),
          ("sourceNoAvailablePvc", 134),
          ("sourceNoAvailableThroughput", 137),
          ("userInitiate", 105))
    )


_RecfFrChannelState_Type.__name__ = "Integer32"
_RecfFrChannelState_Object = MibTableColumn
recfFrChannelState = _RecfFrChannelState_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 14),
    _RecfFrChannelState_Type()
)
recfFrChannelState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfFrChannelState.setStatus("mandatory")


class _RecfFrChannelDestCheckMode_Type(Integer32):
    """Custom type recfFrChannelDestCheckMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfFrChannelDestCheckMode_Type.__name__ = "Integer32"
_RecfFrChannelDestCheckMode_Object = MibTableColumn
recfFrChannelDestCheckMode = _RecfFrChannelDestCheckMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 15),
    _RecfFrChannelDestCheckMode_Type()
)
recfFrChannelDestCheckMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelDestCheckMode.setStatus("mandatory")


class _RecfFrChannelConnectMode_Type(Integer32):
    """Custom type recfFrChannelConnectMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("autoConnect", 1),
          ("userInitiate", 2))
    )


_RecfFrChannelConnectMode_Type.__name__ = "Integer32"
_RecfFrChannelConnectMode_Object = MibTableColumn
recfFrChannelConnectMode = _RecfFrChannelConnectMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 16),
    _RecfFrChannelConnectMode_Type()
)
recfFrChannelConnectMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfFrChannelConnectMode.setStatus("mandatory")


class _RecfFrChannelModuleType_Type(Integer32):
    """Custom type recfFrChannelModuleType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(11,
              19)
        )
    )
    namedValues = NamedValues(
        *(("dsm", 19),
          ("fsm", 11))
    )


_RecfFrChannelModuleType_Type.__name__ = "Integer32"
_RecfFrChannelModuleType_Object = MibTableColumn
recfFrChannelModuleType = _RecfFrChannelModuleType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 10, 2, 1, 17),
    _RecfFrChannelModuleType_Type()
)
recfFrChannelModuleType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfFrChannelModuleType.setStatus("mandatory")
_RecfAd10Port_ObjectIdentity = ObjectIdentity
recfAd10Port = _RecfAd10Port_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11)
)
_RecfAd10AgmPortTable_Object = MibTable
recfAd10AgmPortTable = _RecfAd10AgmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1)
)
if mibBuilder.loadTexts:
    recfAd10AgmPortTable.setStatus("mandatory")
_RecfAd10AgmPortEntry_Object = MibTableRow
recfAd10AgmPortEntry = _RecfAd10AgmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1)
)
recfAd10AgmPortEntry.setIndexNames(
    (0, "STMIB", "recfAd10AgmPortAddr"),
)
if mibBuilder.loadTexts:
    recfAd10AgmPortEntry.setStatus("mandatory")
_RecfAd10AgmPortAddr_Type = PortAddr
_RecfAd10AgmPortAddr_Object = MibTableColumn
recfAd10AgmPortAddr = _RecfAd10AgmPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1, 1),
    _RecfAd10AgmPortAddr_Type()
)
recfAd10AgmPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAd10AgmPortAddr.setStatus("mandatory")


class _RecfAd10AgmPortStartMode_Type(Integer32):
    """Custom type recfAd10AgmPortStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfAd10AgmPortStartMode_Type.__name__ = "Integer32"
_RecfAd10AgmPortStartMode_Object = MibTableColumn
recfAd10AgmPortStartMode = _RecfAd10AgmPortStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1, 2),
    _RecfAd10AgmPortStartMode_Type()
)
recfAd10AgmPortStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10AgmPortStartMode.setStatus("mandatory")


class _RecfAd10AgmPortUpdate_Type(Integer32):
    """Custom type recfAd10AgmPortUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_RecfAd10AgmPortUpdate_Type.__name__ = "Integer32"
_RecfAd10AgmPortUpdate_Object = MibTableColumn
recfAd10AgmPortUpdate = _RecfAd10AgmPortUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1, 3),
    _RecfAd10AgmPortUpdate_Type()
)
recfAd10AgmPortUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAd10AgmPortUpdate.setStatus("mandatory")


class _RecfAd10AgmPortSpeed_Type(Integer32):
    """Custom type recfAd10AgmPortSpeed based on Integer32"""
    defaultValue = 480

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(144,
              420,
              480,
              960)
        )
    )
    namedValues = NamedValues(
        *(("b128000", 960),
          ("b19200", 144),
          ("b56000", 420),
          ("b64000", 480))
    )


_RecfAd10AgmPortSpeed_Type.__name__ = "Integer32"
_RecfAd10AgmPortSpeed_Object = MibTableColumn
recfAd10AgmPortSpeed = _RecfAd10AgmPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1, 4),
    _RecfAd10AgmPortSpeed_Type()
)
recfAd10AgmPortSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10AgmPortSpeed.setStatus("mandatory")


class _RecfAd10AgmPortDef_Type(OctetString):
    """Custom type recfAd10AgmPortDef based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(64, 64),
    )


_RecfAd10AgmPortDef_Type.__name__ = "OctetString"
_RecfAd10AgmPortDef_Object = MibTableColumn
recfAd10AgmPortDef = _RecfAd10AgmPortDef_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1, 5),
    _RecfAd10AgmPortDef_Type()
)
recfAd10AgmPortDef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAd10AgmPortDef.setStatus("mandatory")


class _RecfAd10AgmPortPartitionID_Type(Integer32):
    """Custom type recfAd10AgmPortPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfAd10AgmPortPartitionID_Type.__name__ = "Integer32"
_RecfAd10AgmPortPartitionID_Object = MibTableColumn
recfAd10AgmPortPartitionID = _RecfAd10AgmPortPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 1, 1, 6),
    _RecfAd10AgmPortPartitionID_Type()
)
recfAd10AgmPortPartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10AgmPortPartitionID.setStatus("mandatory")
_RecfAd10DataPortTable_Object = MibTable
recfAd10DataPortTable = _RecfAd10DataPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2)
)
if mibBuilder.loadTexts:
    recfAd10DataPortTable.setStatus("mandatory")
_RecfAd10DataPortEntry_Object = MibTableRow
recfAd10DataPortEntry = _RecfAd10DataPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1)
)
recfAd10DataPortEntry.setIndexNames(
    (0, "STMIB", "recfAd10DataPortAddr"),
)
if mibBuilder.loadTexts:
    recfAd10DataPortEntry.setStatus("mandatory")
_RecfAd10DataPortAddr_Type = Ad10PortAddr
_RecfAd10DataPortAddr_Object = MibTableColumn
recfAd10DataPortAddr = _RecfAd10DataPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 1),
    _RecfAd10DataPortAddr_Type()
)
recfAd10DataPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAd10DataPortAddr.setStatus("mandatory")


class _RecfAd10DataPortStartMode_Type(Integer32):
    """Custom type recfAd10DataPortStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfAd10DataPortStartMode_Type.__name__ = "Integer32"
_RecfAd10DataPortStartMode_Object = MibTableColumn
recfAd10DataPortStartMode = _RecfAd10DataPortStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 2),
    _RecfAd10DataPortStartMode_Type()
)
recfAd10DataPortStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10DataPortStartMode.setStatus("mandatory")


class _RecfAd10DataPortUpdate_Type(Integer32):
    """Custom type recfAd10DataPortUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_RecfAd10DataPortUpdate_Type.__name__ = "Integer32"
_RecfAd10DataPortUpdate_Object = MibTableColumn
recfAd10DataPortUpdate = _RecfAd10DataPortUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 3),
    _RecfAd10DataPortUpdate_Type()
)
recfAd10DataPortUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAd10DataPortUpdate.setStatus("mandatory")


class _RecfAd10DataPortPhysSlot_Type(Integer32):
    """Custom type recfAd10DataPortPhysSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("a", 1),
          ("b", 2),
          ("c", 3),
          ("d", 4))
    )


_RecfAd10DataPortPhysSlot_Type.__name__ = "Integer32"
_RecfAd10DataPortPhysSlot_Object = MibTableColumn
recfAd10DataPortPhysSlot = _RecfAd10DataPortPhysSlot_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 4),
    _RecfAd10DataPortPhysSlot_Type()
)
recfAd10DataPortPhysSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10DataPortPhysSlot.setStatus("mandatory")


class _RecfAd10DataPortPhysPort_Type(Integer32):
    """Custom type recfAd10DataPortPhysPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_RecfAd10DataPortPhysPort_Type.__name__ = "Integer32"
_RecfAd10DataPortPhysPort_Object = MibTableColumn
recfAd10DataPortPhysPort = _RecfAd10DataPortPhysPort_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 5),
    _RecfAd10DataPortPhysPort_Type()
)
recfAd10DataPortPhysPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10DataPortPhysPort.setStatus("mandatory")


class _RecfAd10DataPortTDMDataRate_Type(Integer32):
    """Custom type recfAd10DataPortTDMDataRate based on Integer32"""
    defaultValue = 65535

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(9,
              18,
              36,
              54,
              72,
              90,
              108,
              120,
              126,
              144,
              180,
              216,
              240,
              288,
              360,
              420,
              65535)
        )
    )
    namedValues = NamedValues(
        *(("b1200", 9),
          ("b12000", 90),
          ("b14400", 108),
          ("b16000", 120),
          ("b16800", 126),
          ("b19200", 144),
          ("b2400", 18),
          ("b24000", 180),
          ("b28800", 216),
          ("b32000", 240),
          ("b38400", 288),
          ("b4800", 36),
          ("b48000", 360),
          ("b56000", 420),
          ("b7200", 54),
          ("b9600", 72),
          ("disabled", 65535))
    )


_RecfAd10DataPortTDMDataRate_Type.__name__ = "Integer32"
_RecfAd10DataPortTDMDataRate_Object = MibTableColumn
recfAd10DataPortTDMDataRate = _RecfAd10DataPortTDMDataRate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 6),
    _RecfAd10DataPortTDMDataRate_Type()
)
recfAd10DataPortTDMDataRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10DataPortTDMDataRate.setStatus("mandatory")


class _RecfAd10DataPortType_Type(Integer32):
    """Custom type recfAd10DataPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bisync", 3),
          ("hdlc", 4),
          ("stat-mux-async", 2),
          ("tdm-sync", 1))
    )


_RecfAd10DataPortType_Type.__name__ = "Integer32"
_RecfAd10DataPortType_Object = MibTableColumn
recfAd10DataPortType = _RecfAd10DataPortType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 2, 1, 7),
    _RecfAd10DataPortType_Type()
)
recfAd10DataPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10DataPortType.setStatus("mandatory")
_RecfAd10VoicePortTable_Object = MibTable
recfAd10VoicePortTable = _RecfAd10VoicePortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3)
)
if mibBuilder.loadTexts:
    recfAd10VoicePortTable.setStatus("mandatory")
_RecfAd10VoicePortEntry_Object = MibTableRow
recfAd10VoicePortEntry = _RecfAd10VoicePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1)
)
recfAd10VoicePortEntry.setIndexNames(
    (0, "STMIB", "recfAd10VoicePortAddr"),
)
if mibBuilder.loadTexts:
    recfAd10VoicePortEntry.setStatus("mandatory")
_RecfAd10VoicePortAddr_Type = Ad10PortAddr
_RecfAd10VoicePortAddr_Object = MibTableColumn
recfAd10VoicePortAddr = _RecfAd10VoicePortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 1),
    _RecfAd10VoicePortAddr_Type()
)
recfAd10VoicePortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAd10VoicePortAddr.setStatus("mandatory")


class _RecfAd10VoicePortStartMode_Type(Integer32):
    """Custom type recfAd10VoicePortStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfAd10VoicePortStartMode_Type.__name__ = "Integer32"
_RecfAd10VoicePortStartMode_Object = MibTableColumn
recfAd10VoicePortStartMode = _RecfAd10VoicePortStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 2),
    _RecfAd10VoicePortStartMode_Type()
)
recfAd10VoicePortStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10VoicePortStartMode.setStatus("mandatory")


class _RecfAd10VoicePortUpdate_Type(Integer32):
    """Custom type recfAd10VoicePortUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_RecfAd10VoicePortUpdate_Type.__name__ = "Integer32"
_RecfAd10VoicePortUpdate_Object = MibTableColumn
recfAd10VoicePortUpdate = _RecfAd10VoicePortUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 3),
    _RecfAd10VoicePortUpdate_Type()
)
recfAd10VoicePortUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAd10VoicePortUpdate.setStatus("mandatory")


class _RecfAd10VoicePortPhysSlot_Type(Integer32):
    """Custom type recfAd10VoicePortPhysSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_RecfAd10VoicePortPhysSlot_Type.__name__ = "Integer32"
_RecfAd10VoicePortPhysSlot_Object = MibTableColumn
recfAd10VoicePortPhysSlot = _RecfAd10VoicePortPhysSlot_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 4),
    _RecfAd10VoicePortPhysSlot_Type()
)
recfAd10VoicePortPhysSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10VoicePortPhysSlot.setStatus("mandatory")


class _RecfAd10VoicePortPhysPort_Type(Integer32):
    """Custom type recfAd10VoicePortPhysPort based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_RecfAd10VoicePortPhysPort_Type.__name__ = "Integer32"
_RecfAd10VoicePortPhysPort_Object = MibTableColumn
recfAd10VoicePortPhysPort = _RecfAd10VoicePortPhysPort_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 5),
    _RecfAd10VoicePortPhysPort_Type()
)
recfAd10VoicePortPhysPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10VoicePortPhysPort.setStatus("mandatory")


class _RecfAd10VoicePortDBAMode_Type(Integer32):
    """Custom type recfAd10VoicePortDBAMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RecfAd10VoicePortDBAMode_Type.__name__ = "Integer32"
_RecfAd10VoicePortDBAMode_Object = MibTableColumn
recfAd10VoicePortDBAMode = _RecfAd10VoicePortDBAMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 6),
    _RecfAd10VoicePortDBAMode_Type()
)
recfAd10VoicePortDBAMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10VoicePortDBAMode.setStatus("mandatory")


class _RecfAd10VoicePortCompressMode_Type(Integer32):
    """Custom type recfAd10VoicePortCompressMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atc", 2),
          ("tCelp", 1))
    )


_RecfAd10VoicePortCompressMode_Type.__name__ = "Integer32"
_RecfAd10VoicePortCompressMode_Object = MibTableColumn
recfAd10VoicePortCompressMode = _RecfAd10VoicePortCompressMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 7),
    _RecfAd10VoicePortCompressMode_Type()
)
recfAd10VoicePortCompressMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10VoicePortCompressMode.setStatus("mandatory")


class _RecfAd10VoicePortFaxMode_Type(Integer32):
    """Custom type recfAd10VoicePortFaxMode based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("faxIIIdisable-NSFdontcare", 3),
          ("faxIIIenable-NSFdisable", 2),
          ("faxIIIenable-NSFenable", 1))
    )


_RecfAd10VoicePortFaxMode_Type.__name__ = "Integer32"
_RecfAd10VoicePortFaxMode_Object = MibTableColumn
recfAd10VoicePortFaxMode = _RecfAd10VoicePortFaxMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 8),
    _RecfAd10VoicePortFaxMode_Type()
)
recfAd10VoicePortFaxMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10VoicePortFaxMode.setStatus("mandatory")


class _RecfAd10VoicePortSpeed_Type(Integer32):
    """Custom type recfAd10VoicePortSpeed based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(40,
              54,
              56,
              60,
              64,
              68,
              72,
              76,
              80,
              84,
              88,
              92,
              96,
              100,
              104,
              108,
              112,
              116,
              120,
              124,
              128,
              132,
              136,
              140,
              144,
              148,
              152,
              156,
              160,
              164,
              168,
              172,
              176,
              180,
              184,
              188,
              192,
              196,
              200,
              204,
              208,
              212,
              216,
              220,
              224,
              228,
              232,
              236,
              240,
              65535)
        )
    )
    namedValues = NamedValues(
        *(("b10133", 76),
          ("b10666", 80),
          ("b11200", 84),
          ("b11733", 88),
          ("b12266", 92),
          ("b12800", 96),
          ("b13333", 100),
          ("b13866", 104),
          ("b14400", 108),
          ("b14933", 112),
          ("b15466", 116),
          ("b16000", 120),
          ("b16533", 124),
          ("b17066", 128),
          ("b17600", 132),
          ("b18133", 136),
          ("b18666", 140),
          ("b19200", 144),
          ("b19733", 148),
          ("b20266", 152),
          ("b20800", 156),
          ("b21333", 160),
          ("b21866", 164),
          ("b22400", 168),
          ("b22933", 172),
          ("b23466", 176),
          ("b24000", 180),
          ("b24533", 184),
          ("b25066", 188),
          ("b25600", 192),
          ("b26133", 196),
          ("b26666", 200),
          ("b27200", 204),
          ("b27733", 208),
          ("b28266", 212),
          ("b28800", 216),
          ("b29333", 220),
          ("b29866", 224),
          ("b30400", 228),
          ("b30933", 232),
          ("b31466", 236),
          ("b32000", 240),
          ("b5333", 40),
          ("b7200", 54),
          ("b7466", 56),
          ("b8000", 60),
          ("b8533", 64),
          ("b9066", 68),
          ("b9600", 72),
          ("disabled", 65535))
    )


_RecfAd10VoicePortSpeed_Type.__name__ = "Integer32"
_RecfAd10VoicePortSpeed_Object = MibTableColumn
recfAd10VoicePortSpeed = _RecfAd10VoicePortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 3, 1, 9),
    _RecfAd10VoicePortSpeed_Type()
)
recfAd10VoicePortSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10VoicePortSpeed.setStatus("mandatory")
_RecfAd10PktBandTable_Object = MibTable
recfAd10PktBandTable = _RecfAd10PktBandTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4)
)
if mibBuilder.loadTexts:
    recfAd10PktBandTable.setStatus("mandatory")
_RecfAd10PktBandEntry_Object = MibTableRow
recfAd10PktBandEntry = _RecfAd10PktBandEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4, 1)
)
recfAd10PktBandEntry.setIndexNames(
    (0, "STMIB", "recfAd10PktBandAddr"),
)
if mibBuilder.loadTexts:
    recfAd10PktBandEntry.setStatus("mandatory")
_RecfAd10PktBandAddr_Type = Ad10PortAddr
_RecfAd10PktBandAddr_Object = MibTableColumn
recfAd10PktBandAddr = _RecfAd10PktBandAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4, 1, 1),
    _RecfAd10PktBandAddr_Type()
)
recfAd10PktBandAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAd10PktBandAddr.setStatus("mandatory")


class _RecfAd10PktBandStartMode_Type(Integer32):
    """Custom type recfAd10PktBandStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("off", 2))
    )


_RecfAd10PktBandStartMode_Type.__name__ = "Integer32"
_RecfAd10PktBandStartMode_Object = MibTableColumn
recfAd10PktBandStartMode = _RecfAd10PktBandStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4, 1, 2),
    _RecfAd10PktBandStartMode_Type()
)
recfAd10PktBandStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10PktBandStartMode.setStatus("mandatory")


class _RecfAd10PktBandUpdate_Type(Integer32):
    """Custom type recfAd10PktBandUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_RecfAd10PktBandUpdate_Type.__name__ = "Integer32"
_RecfAd10PktBandUpdate_Object = MibTableColumn
recfAd10PktBandUpdate = _RecfAd10PktBandUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4, 1, 3),
    _RecfAd10PktBandUpdate_Type()
)
recfAd10PktBandUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAd10PktBandUpdate.setStatus("mandatory")


class _RecfAd10PktBandBaudRate_Type(Integer32):
    """Custom type recfAd10PktBandBaudRate based on Integer32"""
    defaultValue = 72

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(9,
              10,
              12,
              14,
              15,
              16,
              18,
              20,
              21,
              24,
              27,
              28,
              30,
              32,
              35,
              36,
              40,
              42,
              45,
              48,
              54,
              56,
              60,
              63,
              70,
              72,
              80,
              84,
              90,
              96,
              105,
              108,
              112,
              120,
              126,
              135,
              140,
              144,
              160,
              168,
              180,
              189,
              210,
              216,
              224,
              240,
              252,
              270,
              280,
              288,
              315,
              336,
              360,
              378,
              420,
              432,
              480,
              504,
              540,
              560,
              630,
              672,
              720,
              756,
              840,
              864,
              945,
              960)
        )
    )
    namedValues = NamedValues(
        *(("b100800", 756),
          ("b10667", 80),
          ("b11200", 84),
          ("b112000", 840),
          ("b115200", 864),
          ("b1200", 9),
          ("b12000", 90),
          ("b126000", 945),
          ("b12800", 96),
          ("b128000", 960),
          ("b1334", 10),
          ("b14000", 105),
          ("b14400", 108),
          ("b14934", 112),
          ("b1600", 12),
          ("b16000", 120),
          ("b16800", 126),
          ("b18000", 135),
          ("b18667", 140),
          ("b1867", 14),
          ("b19200", 144),
          ("b2000", 15),
          ("b21334", 160),
          ("b2134", 16),
          ("b22400", 168),
          ("b2400", 18),
          ("b24000", 180),
          ("b25200", 189),
          ("b2667", 20),
          ("b2800", 21),
          ("b28000", 210),
          ("b28800", 216),
          ("b29867", 224),
          ("b3200", 24),
          ("b32000", 240),
          ("b33600", 252),
          ("b3600", 27),
          ("b36000", 270),
          ("b37334", 280),
          ("b3734", 28),
          ("b38400", 288),
          ("b4000", 30),
          ("b42000", 315),
          ("b4267", 32),
          ("b44800", 336),
          ("b4667", 35),
          ("b4800", 36),
          ("b48000", 360),
          ("b50400", 378),
          ("b5334", 40),
          ("b5600", 42),
          ("b56000", 420),
          ("b57600", 432),
          ("b6000", 45),
          ("b6400", 48),
          ("b64000", 480),
          ("b67200", 504),
          ("b7200", 54),
          ("b72000", 540),
          ("b74667", 560),
          ("b7467", 56),
          ("b8000", 60),
          ("b8400", 63),
          ("b84000", 630),
          ("b89600", 672),
          ("b9334", 70),
          ("b9600", 72),
          ("b96000", 720))
    )


_RecfAd10PktBandBaudRate_Type.__name__ = "Integer32"
_RecfAd10PktBandBaudRate_Object = MibTableColumn
recfAd10PktBandBaudRate = _RecfAd10PktBandBaudRate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4, 1, 4),
    _RecfAd10PktBandBaudRate_Type()
)
recfAd10PktBandBaudRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10PktBandBaudRate.setStatus("mandatory")


class _RecfAd10PktBandDBAMode_Type(Integer32):
    """Custom type recfAd10PktBandDBAMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RecfAd10PktBandDBAMode_Type.__name__ = "Integer32"
_RecfAd10PktBandDBAMode_Object = MibTableColumn
recfAd10PktBandDBAMode = _RecfAd10PktBandDBAMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 4, 1, 5),
    _RecfAd10PktBandDBAMode_Type()
)
recfAd10PktBandDBAMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10PktBandDBAMode.setStatus("mandatory")
_RecfAd10TrkGrpTable_Object = MibTable
recfAd10TrkGrpTable = _RecfAd10TrkGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5)
)
if mibBuilder.loadTexts:
    recfAd10TrkGrpTable.setStatus("mandatory")
_RecfAd10TrkGrpEntry_Object = MibTableRow
recfAd10TrkGrpEntry = _RecfAd10TrkGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1)
)
recfAd10TrkGrpEntry.setIndexNames(
    (0, "STMIB", "recfAd10TrkGrpAddr"),
)
if mibBuilder.loadTexts:
    recfAd10TrkGrpEntry.setStatus("mandatory")
_RecfAd10TrkGrpAddr_Type = PortAddr
_RecfAd10TrkGrpAddr_Object = MibTableColumn
recfAd10TrkGrpAddr = _RecfAd10TrkGrpAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 1),
    _RecfAd10TrkGrpAddr_Type()
)
recfAd10TrkGrpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAd10TrkGrpAddr.setStatus("mandatory")


class _RecfAd10TrkGrpStartMode_Type(Integer32):
    """Custom type recfAd10TrkGrpStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfAd10TrkGrpStartMode_Type.__name__ = "Integer32"
_RecfAd10TrkGrpStartMode_Object = MibTableColumn
recfAd10TrkGrpStartMode = _RecfAd10TrkGrpStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 2),
    _RecfAd10TrkGrpStartMode_Type()
)
recfAd10TrkGrpStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10TrkGrpStartMode.setStatus("mandatory")
_RecfAd10TrkGrpAgmPort_Type = PortAddr
_RecfAd10TrkGrpAgmPort_Object = MibTableColumn
recfAd10TrkGrpAgmPort = _RecfAd10TrkGrpAgmPort_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 3),
    _RecfAd10TrkGrpAgmPort_Type()
)
recfAd10TrkGrpAgmPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10TrkGrpAgmPort.setStatus("mandatory")


class _RecfAd10TrkGrpLowElement_Type(Integer32):
    """Custom type recfAd10TrkGrpLowElement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_RecfAd10TrkGrpLowElement_Type.__name__ = "Integer32"
_RecfAd10TrkGrpLowElement_Object = MibTableColumn
recfAd10TrkGrpLowElement = _RecfAd10TrkGrpLowElement_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 4),
    _RecfAd10TrkGrpLowElement_Type()
)
recfAd10TrkGrpLowElement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10TrkGrpLowElement.setStatus("mandatory")


class _RecfAd10TrkGrpHighElement_Type(Integer32):
    """Custom type recfAd10TrkGrpHighElement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_RecfAd10TrkGrpHighElement_Type.__name__ = "Integer32"
_RecfAd10TrkGrpHighElement_Object = MibTableColumn
recfAd10TrkGrpHighElement = _RecfAd10TrkGrpHighElement_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 5),
    _RecfAd10TrkGrpHighElement_Type()
)
recfAd10TrkGrpHighElement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10TrkGrpHighElement.setStatus("mandatory")
_RecfAd10TrkGrpRemoteNodeID_Type = NodeAddr
_RecfAd10TrkGrpRemoteNodeID_Object = MibTableColumn
recfAd10TrkGrpRemoteNodeID = _RecfAd10TrkGrpRemoteNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 6),
    _RecfAd10TrkGrpRemoteNodeID_Type()
)
recfAd10TrkGrpRemoteNodeID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10TrkGrpRemoteNodeID.setStatus("mandatory")
_RecfAd10TrkGrpRemoteAddr_Type = PortAddr
_RecfAd10TrkGrpRemoteAddr_Object = MibTableColumn
recfAd10TrkGrpRemoteAddr = _RecfAd10TrkGrpRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 7),
    _RecfAd10TrkGrpRemoteAddr_Type()
)
recfAd10TrkGrpRemoteAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10TrkGrpRemoteAddr.setStatus("mandatory")


class _RecfAd10TrkGrpPartitionID_Type(Integer32):
    """Custom type recfAd10TrkGrpPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfAd10TrkGrpPartitionID_Type.__name__ = "Integer32"
_RecfAd10TrkGrpPartitionID_Object = MibTableColumn
recfAd10TrkGrpPartitionID = _RecfAd10TrkGrpPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 8),
    _RecfAd10TrkGrpPartitionID_Type()
)
recfAd10TrkGrpPartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10TrkGrpPartitionID.setStatus("mandatory")


class _RecfAd10TrkGrpSearchDirection_Type(Integer32):
    """Custom type recfAd10TrkGrpSearchDirection based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("highLow", 2),
          ("lowHigh", 1))
    )


_RecfAd10TrkGrpSearchDirection_Type.__name__ = "Integer32"
_RecfAd10TrkGrpSearchDirection_Object = MibTableColumn
recfAd10TrkGrpSearchDirection = _RecfAd10TrkGrpSearchDirection_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 11, 5, 1, 9),
    _RecfAd10TrkGrpSearchDirection_Type()
)
recfAd10TrkGrpSearchDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAd10TrkGrpSearchDirection.setStatus("mandatory")
_RecfAsmPort_ObjectIdentity = ObjectIdentity
recfAsmPort = _RecfAsmPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12)
)
_RecfAsmX50Table_ObjectIdentity = ObjectIdentity
recfAsmX50Table = _RecfAsmX50Table_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1)
)
_RecfAsmX50PortTable_Object = MibTable
recfAsmX50PortTable = _RecfAsmX50PortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1)
)
if mibBuilder.loadTexts:
    recfAsmX50PortTable.setStatus("mandatory")
_RecfAsmX50PortEntry_Object = MibTableRow
recfAsmX50PortEntry = _RecfAsmX50PortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1)
)
recfAsmX50PortEntry.setIndexNames(
    (0, "STMIB", "recfAsmX50PortAddr"),
)
if mibBuilder.loadTexts:
    recfAsmX50PortEntry.setStatus("mandatory")
_RecfAsmX50PortAddr_Type = PortAddr
_RecfAsmX50PortAddr_Object = MibTableColumn
recfAsmX50PortAddr = _RecfAsmX50PortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 1),
    _RecfAsmX50PortAddr_Type()
)
recfAsmX50PortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAsmX50PortAddr.setStatus("mandatory")


class _RecfAsmX50PortStartMode_Type(Integer32):
    """Custom type recfAsmX50PortStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfAsmX50PortStartMode_Type.__name__ = "Integer32"
_RecfAsmX50PortStartMode_Object = MibTableColumn
recfAsmX50PortStartMode = _RecfAsmX50PortStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 2),
    _RecfAsmX50PortStartMode_Type()
)
recfAsmX50PortStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmX50PortStartMode.setStatus("mandatory")


class _RecfAsmX50PortUpdate_Type(Integer32):
    """Custom type recfAsmX50PortUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_RecfAsmX50PortUpdate_Type.__name__ = "Integer32"
_RecfAsmX50PortUpdate_Object = MibTableColumn
recfAsmX50PortUpdate = _RecfAsmX50PortUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 3),
    _RecfAsmX50PortUpdate_Type()
)
recfAsmX50PortUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAsmX50PortUpdate.setStatus("mandatory")


class _RecfAsmX50PortSpeed_Type(Integer32):
    """Custom type recfAsmX50PortSpeed based on Integer32"""
    defaultValue = 480

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            480
        )
    )
    namedValues = NamedValues(
        ("b64000", 480)
    )


_RecfAsmX50PortSpeed_Type.__name__ = "Integer32"
_RecfAsmX50PortSpeed_Object = MibTableColumn
recfAsmX50PortSpeed = _RecfAsmX50PortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 4),
    _RecfAsmX50PortSpeed_Type()
)
recfAsmX50PortSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAsmX50PortSpeed.setStatus("mandatory")


class _RecfAsmX50PortProtocol_Type(Integer32):
    """Custom type recfAsmX50PortProtocol based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              7)
        )
    )
    namedValues = NamedValues(
        *(("ad7", 7),
          ("div2", 2),
          ("div3", 3))
    )


_RecfAsmX50PortProtocol_Type.__name__ = "Integer32"
_RecfAsmX50PortProtocol_Object = MibTableColumn
recfAsmX50PortProtocol = _RecfAsmX50PortProtocol_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 5),
    _RecfAsmX50PortProtocol_Type()
)
recfAsmX50PortProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmX50PortProtocol.setStatus("mandatory")


class _RecfAsmX50PortIdlePattern_Type(Integer32):
    """Custom type recfAsmX50PortIdlePattern based on Integer32"""
    defaultValue = 45

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_RecfAsmX50PortIdlePattern_Type.__name__ = "Integer32"
_RecfAsmX50PortIdlePattern_Object = MibTableColumn
recfAsmX50PortIdlePattern = _RecfAsmX50PortIdlePattern_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 6),
    _RecfAsmX50PortIdlePattern_Type()
)
recfAsmX50PortIdlePattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmX50PortIdlePattern.setStatus("mandatory")


class _RecfAsmX50PortOosTimer_Type(Integer32):
    """Custom type recfAsmX50PortOosTimer based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 255),
          ("sec10", 10),
          ("sec11", 11),
          ("sec12", 12),
          ("sec13", 13),
          ("sec14", 14),
          ("sec15", 15),
          ("sec16", 16),
          ("sec17", 17),
          ("sec18", 18),
          ("sec19", 19),
          ("sec20", 20),
          ("sec21", 21),
          ("sec22", 22),
          ("sec23", 23),
          ("sec24", 24),
          ("sec25", 25),
          ("sec26", 26),
          ("sec27", 27),
          ("sec28", 28),
          ("sec29", 29),
          ("sec3", 3),
          ("sec30", 30),
          ("sec4", 4),
          ("sec5", 5),
          ("sec6", 6),
          ("sec7", 7),
          ("sec8", 8),
          ("sec9", 9))
    )


_RecfAsmX50PortOosTimer_Type.__name__ = "Integer32"
_RecfAsmX50PortOosTimer_Object = MibTableColumn
recfAsmX50PortOosTimer = _RecfAsmX50PortOosTimer_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 7),
    _RecfAsmX50PortOosTimer_Type()
)
recfAsmX50PortOosTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmX50PortOosTimer.setStatus("mandatory")


class _RecfAsmX50PortPhasorSize_Type(Integer32):
    """Custom type recfAsmX50PortPhasorSize based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("p16", 16),
          ("p4", 4),
          ("p8", 8))
    )


_RecfAsmX50PortPhasorSize_Type.__name__ = "Integer32"
_RecfAsmX50PortPhasorSize_Object = MibTableColumn
recfAsmX50PortPhasorSize = _RecfAsmX50PortPhasorSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 8),
    _RecfAsmX50PortPhasorSize_Type()
)
recfAsmX50PortPhasorSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmX50PortPhasorSize.setStatus("mandatory")


class _RecfAsmX50PortTxHouseKbits_Type(OctetString):
    """Custom type recfAsmX50PortTxHouseKbits based on OctetString"""
    defaultHexValue = "00"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RecfAsmX50PortTxHouseKbits_Type.__name__ = "OctetString"
_RecfAsmX50PortTxHouseKbits_Object = MibTableColumn
recfAsmX50PortTxHouseKbits = _RecfAsmX50PortTxHouseKbits_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 9),
    _RecfAsmX50PortTxHouseKbits_Type()
)
recfAsmX50PortTxHouseKbits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmX50PortTxHouseKbits.setStatus("mandatory")


class _RecfAsmX50PortCircuitMap_Type(OctetString):
    """Custom type recfAsmX50PortCircuitMap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 20),
    )


_RecfAsmX50PortCircuitMap_Type.__name__ = "OctetString"
_RecfAsmX50PortCircuitMap_Object = MibTableColumn
recfAsmX50PortCircuitMap = _RecfAsmX50PortCircuitMap_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 10),
    _RecfAsmX50PortCircuitMap_Type()
)
recfAsmX50PortCircuitMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAsmX50PortCircuitMap.setStatus("mandatory")


class _RecfAsmX50PortPartitionID_Type(Integer32):
    """Custom type recfAsmX50PortPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfAsmX50PortPartitionID_Type.__name__ = "Integer32"
_RecfAsmX50PortPartitionID_Object = MibTableColumn
recfAsmX50PortPartitionID = _RecfAsmX50PortPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 1, 1, 11),
    _RecfAsmX50PortPartitionID_Type()
)
recfAsmX50PortPartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmX50PortPartitionID.setStatus("mandatory")
_RecfAsmX50CkTable_Object = MibTable
recfAsmX50CkTable = _RecfAsmX50CkTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2)
)
if mibBuilder.loadTexts:
    recfAsmX50CkTable.setStatus("mandatory")
_RecfAsmX50CkEntry_Object = MibTableRow
recfAsmX50CkEntry = _RecfAsmX50CkEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1)
)
recfAsmX50CkEntry.setIndexNames(
    (0, "STMIB", "recfAsmX50CkAddr"),
)
if mibBuilder.loadTexts:
    recfAsmX50CkEntry.setStatus("mandatory")
_RecfAsmX50CkAddr_Type = AsmX50CkAddr
_RecfAsmX50CkAddr_Object = MibTableColumn
recfAsmX50CkAddr = _RecfAsmX50CkAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 1),
    _RecfAsmX50CkAddr_Type()
)
recfAsmX50CkAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAsmX50CkAddr.setStatus("mandatory")


class _RecfAsmX50CkStartMode_Type(Integer32):
    """Custom type recfAsmX50CkStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfAsmX50CkStartMode_Type.__name__ = "Integer32"
_RecfAsmX50CkStartMode_Object = MibTableColumn
recfAsmX50CkStartMode = _RecfAsmX50CkStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 2),
    _RecfAsmX50CkStartMode_Type()
)
recfAsmX50CkStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmX50CkStartMode.setStatus("mandatory")


class _RecfAsmX50CkUpdate_Type(Integer32):
    """Custom type recfAsmX50CkUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_RecfAsmX50CkUpdate_Type.__name__ = "Integer32"
_RecfAsmX50CkUpdate_Object = MibTableColumn
recfAsmX50CkUpdate = _RecfAsmX50CkUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 3),
    _RecfAsmX50CkUpdate_Type()
)
recfAsmX50CkUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAsmX50CkUpdate.setStatus("mandatory")


class _RecfAsmX50CkSpeed_Type(Integer32):
    """Custom type recfAsmX50CkSpeed based on Integer32"""
    defaultValue = 72

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(18,
              36,
              72,
              144)
        )
    )
    namedValues = NamedValues(
        *(("s19200", 144),
          ("s2400", 18),
          ("s4800", 36),
          ("s9600", 72))
    )


_RecfAsmX50CkSpeed_Type.__name__ = "Integer32"
_RecfAsmX50CkSpeed_Object = MibTableColumn
recfAsmX50CkSpeed = _RecfAsmX50CkSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 4),
    _RecfAsmX50CkSpeed_Type()
)
recfAsmX50CkSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmX50CkSpeed.setStatus("mandatory")


class _RecfAsmX50CkTimeSlot_Type(Integer32):
    """Custom type recfAsmX50CkTimeSlot based on Integer32"""
    defaultValue = 41

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              41,
              42,
              43,
              44,
              45,
              81,
              83)
        )
    )
    namedValues = NamedValues(
        *(("a", 41),
          ("a1", 1),
          ("a2", 6),
          ("a3", 11),
          ("a4", 16),
          ("ab", 81),
          ("b", 42),
          ("b1", 2),
          ("b2", 7),
          ("b3", 12),
          ("b4", 17),
          ("c", 43),
          ("c1", 3),
          ("c2", 8),
          ("c3", 13),
          ("c4", 18),
          ("cd", 83),
          ("d", 44),
          ("d1", 4),
          ("d2", 9),
          ("d3", 14),
          ("d4", 19),
          ("e", 45),
          ("e1", 5),
          ("e2", 10),
          ("e3", 15),
          ("e4", 20))
    )


_RecfAsmX50CkTimeSlot_Type.__name__ = "Integer32"
_RecfAsmX50CkTimeSlot_Object = MibTableColumn
recfAsmX50CkTimeSlot = _RecfAsmX50CkTimeSlot_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 5),
    _RecfAsmX50CkTimeSlot_Type()
)
recfAsmX50CkTimeSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmX50CkTimeSlot.setStatus("mandatory")


class _RecfAsmX50CkPhasorSize_Type(Integer32):
    """Custom type recfAsmX50CkPhasorSize based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              6,
              8,
              12,
              16)
        )
    )
    namedValues = NamedValues(
        *(("p12", 12),
          ("p16", 16),
          ("p4", 4),
          ("p6", 6),
          ("p8", 8))
    )


_RecfAsmX50CkPhasorSize_Type.__name__ = "Integer32"
_RecfAsmX50CkPhasorSize_Object = MibTableColumn
recfAsmX50CkPhasorSize = _RecfAsmX50CkPhasorSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 6),
    _RecfAsmX50CkPhasorSize_Type()
)
recfAsmX50CkPhasorSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmX50CkPhasorSize.setStatus("mandatory")


class _RecfAsmX50CkSbitConnectState_Type(Integer32):
    """Custom type recfAsmX50CkSbitConnectState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("one", 1),
          ("zero", 2))
    )


_RecfAsmX50CkSbitConnectState_Type.__name__ = "Integer32"
_RecfAsmX50CkSbitConnectState_Object = MibTableColumn
recfAsmX50CkSbitConnectState = _RecfAsmX50CkSbitConnectState_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 1, 2, 1, 7),
    _RecfAsmX50CkSbitConnectState_Type()
)
recfAsmX50CkSbitConnectState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmX50CkSbitConnectState.setStatus("mandatory")
_RecfAsmVoice_ObjectIdentity = ObjectIdentity
recfAsmVoice = _RecfAsmVoice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2)
)
_RecfAsmVoiceTrkGrpTable_Object = MibTable
recfAsmVoiceTrkGrpTable = _RecfAsmVoiceTrkGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1)
)
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpTable.setStatus("mandatory")
_RecfAsmVoiceTrkGrpEntry_Object = MibTableRow
recfAsmVoiceTrkGrpEntry = _RecfAsmVoiceTrkGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1)
)
recfAsmVoiceTrkGrpEntry.setIndexNames(
    (0, "STMIB", "recfAsmVoiceTrkGrpAddr"),
)
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpEntry.setStatus("mandatory")
_RecfAsmVoiceTrkGrpAddr_Type = PortAddr
_RecfAsmVoiceTrkGrpAddr_Object = MibTableColumn
recfAsmVoiceTrkGrpAddr = _RecfAsmVoiceTrkGrpAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 1),
    _RecfAsmVoiceTrkGrpAddr_Type()
)
recfAsmVoiceTrkGrpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpAddr.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpStartMode_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfAsmVoiceTrkGrpStartMode_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpStartMode_Object = MibTableColumn
recfAsmVoiceTrkGrpStartMode = _RecfAsmVoiceTrkGrpStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 2),
    _RecfAsmVoiceTrkGrpStartMode_Type()
)
recfAsmVoiceTrkGrpStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpStartMode.setStatus("mandatory")
_RecfAsmVoiceTrkGrpPort_Type = PortAddr
_RecfAsmVoiceTrkGrpPort_Object = MibTableColumn
recfAsmVoiceTrkGrpPort = _RecfAsmVoiceTrkGrpPort_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 3),
    _RecfAsmVoiceTrkGrpPort_Type()
)
recfAsmVoiceTrkGrpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpPort.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpLowElement_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpLowElement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_RecfAsmVoiceTrkGrpLowElement_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpLowElement_Object = MibTableColumn
recfAsmVoiceTrkGrpLowElement = _RecfAsmVoiceTrkGrpLowElement_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 4),
    _RecfAsmVoiceTrkGrpLowElement_Type()
)
recfAsmVoiceTrkGrpLowElement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpLowElement.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpHighElement_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpHighElement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_RecfAsmVoiceTrkGrpHighElement_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpHighElement_Object = MibTableColumn
recfAsmVoiceTrkGrpHighElement = _RecfAsmVoiceTrkGrpHighElement_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 5),
    _RecfAsmVoiceTrkGrpHighElement_Type()
)
recfAsmVoiceTrkGrpHighElement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpHighElement.setStatus("mandatory")
_RecfAsmVoiceTrkGrpRemoteNodeID_Type = NodeAddr
_RecfAsmVoiceTrkGrpRemoteNodeID_Object = MibTableColumn
recfAsmVoiceTrkGrpRemoteNodeID = _RecfAsmVoiceTrkGrpRemoteNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 6),
    _RecfAsmVoiceTrkGrpRemoteNodeID_Type()
)
recfAsmVoiceTrkGrpRemoteNodeID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpRemoteNodeID.setStatus("mandatory")
_RecfAsmVoiceTrkGrpRemoteAddr_Type = PortAddr
_RecfAsmVoiceTrkGrpRemoteAddr_Object = MibTableColumn
recfAsmVoiceTrkGrpRemoteAddr = _RecfAsmVoiceTrkGrpRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 7),
    _RecfAsmVoiceTrkGrpRemoteAddr_Type()
)
recfAsmVoiceTrkGrpRemoteAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpRemoteAddr.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpPartitionID_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfAsmVoiceTrkGrpPartitionID_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpPartitionID_Object = MibTableColumn
recfAsmVoiceTrkGrpPartitionID = _RecfAsmVoiceTrkGrpPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 8),
    _RecfAsmVoiceTrkGrpPartitionID_Type()
)
recfAsmVoiceTrkGrpPartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpPartitionID.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpCompressMode_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpCompressMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("adpcm", 3),
          ("atc", 2),
          ("tCelp", 1))
    )


_RecfAsmVoiceTrkGrpCompressMode_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpCompressMode_Object = MibTableColumn
recfAsmVoiceTrkGrpCompressMode = _RecfAsmVoiceTrkGrpCompressMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 9),
    _RecfAsmVoiceTrkGrpCompressMode_Type()
)
recfAsmVoiceTrkGrpCompressMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpCompressMode.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpSpeed_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpSpeed based on Integer32"""
    defaultValue = 60

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(40,
              54,
              56,
              60,
              64,
              68,
              72,
              76,
              80,
              84,
              88,
              92,
              96,
              100,
              104,
              108,
              112,
              116,
              120,
              124,
              128,
              132,
              136,
              140,
              144,
              148,
              152,
              156,
              160,
              164,
              168,
              172,
              176,
              180,
              184,
              188,
              192,
              196,
              200,
              204,
              208,
              212,
              216,
              220,
              224,
              228,
              232,
              236,
              238,
              240,
              270)
        )
    )
    namedValues = NamedValues(
        *(("b10133", 76),
          ("b10666", 80),
          ("b11200", 84),
          ("b11733", 88),
          ("b12266", 92),
          ("b12800", 96),
          ("b13333", 100),
          ("b13866", 104),
          ("b14400", 108),
          ("b14933", 112),
          ("b15466", 116),
          ("b16000", 120),
          ("b16533", 124),
          ("b17066", 128),
          ("b17600", 132),
          ("b18133", 136),
          ("b18666", 140),
          ("b19200", 144),
          ("b19733", 148),
          ("b20266", 152),
          ("b20800", 156),
          ("b21333", 160),
          ("b21866", 164),
          ("b22400", 168),
          ("b22933", 172),
          ("b23466", 176),
          ("b24000", 180),
          ("b24533", 184),
          ("b25066", 188),
          ("b25600", 192),
          ("b26133", 196),
          ("b26666", 200),
          ("b27200", 204),
          ("b27733", 208),
          ("b28266", 212),
          ("b28800", 216),
          ("b29333", 220),
          ("b29866", 224),
          ("b30400", 228),
          ("b30933", 232),
          ("b31466", 236),
          ("b31733", 238),
          ("b32000", 240),
          ("b36000", 270),
          ("b5333", 40),
          ("b7200", 54),
          ("b7466", 56),
          ("b8000", 60),
          ("b8533", 64),
          ("b9066", 68),
          ("b9600", 72))
    )


_RecfAsmVoiceTrkGrpSpeed_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpSpeed_Object = MibTableColumn
recfAsmVoiceTrkGrpSpeed = _RecfAsmVoiceTrkGrpSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 10),
    _RecfAsmVoiceTrkGrpSpeed_Type()
)
recfAsmVoiceTrkGrpSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpSpeed.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpSignalingType_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpSignalingType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("a", 2),
          ("ab", 3),
          ("abcd", 4),
          ("ac15-dp", 9),
          ("ac15-dtmf", 8),
          ("none", 1))
    )


_RecfAsmVoiceTrkGrpSignalingType_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpSignalingType_Object = MibTableColumn
recfAsmVoiceTrkGrpSignalingType = _RecfAsmVoiceTrkGrpSignalingType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 11),
    _RecfAsmVoiceTrkGrpSignalingType_Type()
)
recfAsmVoiceTrkGrpSignalingType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpSignalingType.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpDTMFRelay_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpDTMFRelay based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RecfAsmVoiceTrkGrpDTMFRelay_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpDTMFRelay_Object = MibTableColumn
recfAsmVoiceTrkGrpDTMFRelay = _RecfAsmVoiceTrkGrpDTMFRelay_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 12),
    _RecfAsmVoiceTrkGrpDTMFRelay_Type()
)
recfAsmVoiceTrkGrpDTMFRelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpDTMFRelay.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpFaxRelay_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpFaxRelay based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RecfAsmVoiceTrkGrpFaxRelay_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpFaxRelay_Object = MibTableColumn
recfAsmVoiceTrkGrpFaxRelay = _RecfAsmVoiceTrkGrpFaxRelay_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 13),
    _RecfAsmVoiceTrkGrpFaxRelay_Type()
)
recfAsmVoiceTrkGrpFaxRelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpFaxRelay.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpFaxNSFMode_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpFaxNSFMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RecfAsmVoiceTrkGrpFaxNSFMode_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpFaxNSFMode_Object = MibTableColumn
recfAsmVoiceTrkGrpFaxNSFMode = _RecfAsmVoiceTrkGrpFaxNSFMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 14),
    _RecfAsmVoiceTrkGrpFaxNSFMode_Type()
)
recfAsmVoiceTrkGrpFaxNSFMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpFaxNSFMode.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpTxAudSrcMode_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpTxAudSrcMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("silence", 2),
          ("toneDMW", 3))
    )


_RecfAsmVoiceTrkGrpTxAudSrcMode_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpTxAudSrcMode_Object = MibTableColumn
recfAsmVoiceTrkGrpTxAudSrcMode = _RecfAsmVoiceTrkGrpTxAudSrcMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 15),
    _RecfAsmVoiceTrkGrpTxAudSrcMode_Type()
)
recfAsmVoiceTrkGrpTxAudSrcMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpTxAudSrcMode.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpRxAudOutMode_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpRxAudOutMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("silence", 2),
          ("toneDMW", 3))
    )


_RecfAsmVoiceTrkGrpRxAudOutMode_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpRxAudOutMode_Object = MibTableColumn
recfAsmVoiceTrkGrpRxAudOutMode = _RecfAsmVoiceTrkGrpRxAudOutMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 16),
    _RecfAsmVoiceTrkGrpRxAudOutMode_Type()
)
recfAsmVoiceTrkGrpRxAudOutMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpRxAudOutMode.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpEchoCancel_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpEchoCancel based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RecfAsmVoiceTrkGrpEchoCancel_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpEchoCancel_Object = MibTableColumn
recfAsmVoiceTrkGrpEchoCancel = _RecfAsmVoiceTrkGrpEchoCancel_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 17),
    _RecfAsmVoiceTrkGrpEchoCancel_Type()
)
recfAsmVoiceTrkGrpEchoCancel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpEchoCancel.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpNonLinear_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpNonLinear based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RecfAsmVoiceTrkGrpNonLinear_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpNonLinear_Object = MibTableColumn
recfAsmVoiceTrkGrpNonLinear = _RecfAsmVoiceTrkGrpNonLinear_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 18),
    _RecfAsmVoiceTrkGrpNonLinear_Type()
)
recfAsmVoiceTrkGrpNonLinear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpNonLinear.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpDataMode_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpDataMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RecfAsmVoiceTrkGrpDataMode_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpDataMode_Object = MibTableColumn
recfAsmVoiceTrkGrpDataMode = _RecfAsmVoiceTrkGrpDataMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 19),
    _RecfAsmVoiceTrkGrpDataMode_Type()
)
recfAsmVoiceTrkGrpDataMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpDataMode.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpTxPCMGain_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpTxPCMGain based on Integer32"""
    defaultValue = 166

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_RecfAsmVoiceTrkGrpTxPCMGain_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpTxPCMGain_Object = MibTableColumn
recfAsmVoiceTrkGrpTxPCMGain = _RecfAsmVoiceTrkGrpTxPCMGain_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 20),
    _RecfAsmVoiceTrkGrpTxPCMGain_Type()
)
recfAsmVoiceTrkGrpTxPCMGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpTxPCMGain.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpRxPCMGain_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpRxPCMGain based on Integer32"""
    defaultValue = 166

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_RecfAsmVoiceTrkGrpRxPCMGain_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpRxPCMGain_Object = MibTableColumn
recfAsmVoiceTrkGrpRxPCMGain = _RecfAsmVoiceTrkGrpRxPCMGain_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 21),
    _RecfAsmVoiceTrkGrpRxPCMGain_Type()
)
recfAsmVoiceTrkGrpRxPCMGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpRxPCMGain.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpVocoderEnable_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpVocoderEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("normal", 1))
    )


_RecfAsmVoiceTrkGrpVocoderEnable_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpVocoderEnable_Object = MibTableColumn
recfAsmVoiceTrkGrpVocoderEnable = _RecfAsmVoiceTrkGrpVocoderEnable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 22),
    _RecfAsmVoiceTrkGrpVocoderEnable_Type()
)
recfAsmVoiceTrkGrpVocoderEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpVocoderEnable.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpSigIdlePttrn_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpSigIdlePttrn based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("a0-b0-c0-d0", 16),
          ("a0-b0-c0-d1", 8),
          ("a0-b0-c1-d0", 4),
          ("a0-b0-c1-d1", 12),
          ("a0-b1-c0-d0", 2),
          ("a0-b1-c0-d1", 10),
          ("a0-b1-c1-d0", 6),
          ("a0-b1-c1-d1", 14),
          ("a1-b0-c0-d0", 1),
          ("a1-b0-c0-d1", 9),
          ("a1-b0-c1-d0", 5),
          ("a1-b0-c1-d1", 13),
          ("a1-b1-c0-d0", 3),
          ("a1-b1-c0-d1", 11),
          ("a1-b1-c1-d0", 7),
          ("a1-b1-c1-d1", 15))
    )


_RecfAsmVoiceTrkGrpSigIdlePttrn_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpSigIdlePttrn_Object = MibTableColumn
recfAsmVoiceTrkGrpSigIdlePttrn = _RecfAsmVoiceTrkGrpSigIdlePttrn_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 23),
    _RecfAsmVoiceTrkGrpSigIdlePttrn_Type()
)
recfAsmVoiceTrkGrpSigIdlePttrn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpSigIdlePttrn.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpPCMPhasorSize_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpPCMPhasorSize based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 255),
    )


_RecfAsmVoiceTrkGrpPCMPhasorSize_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpPCMPhasorSize_Object = MibTableColumn
recfAsmVoiceTrkGrpPCMPhasorSize = _RecfAsmVoiceTrkGrpPCMPhasorSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 24),
    _RecfAsmVoiceTrkGrpPCMPhasorSize_Type()
)
recfAsmVoiceTrkGrpPCMPhasorSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpPCMPhasorSize.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpSubratePhSize_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpSubratePhSize based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 100),
    )


_RecfAsmVoiceTrkGrpSubratePhSize_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpSubratePhSize_Object = MibTableColumn
recfAsmVoiceTrkGrpSubratePhSize = _RecfAsmVoiceTrkGrpSubratePhSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 25),
    _RecfAsmVoiceTrkGrpSubratePhSize_Type()
)
recfAsmVoiceTrkGrpSubratePhSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpSubratePhSize.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpLocalSigConf_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpLocalSigConf based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fxo", 3),
          ("fxs-ard", 2),
          ("fxs-or-em", 4))
    )


_RecfAsmVoiceTrkGrpLocalSigConf_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpLocalSigConf_Object = MibTableColumn
recfAsmVoiceTrkGrpLocalSigConf = _RecfAsmVoiceTrkGrpLocalSigConf_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 26),
    _RecfAsmVoiceTrkGrpLocalSigConf_Type()
)
recfAsmVoiceTrkGrpLocalSigConf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpLocalSigConf.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpRemoteSigConf_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpRemoteSigConf based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ad10Em", 4),
          ("ad10Fxo", 3),
          ("ad10Fxs", 2),
          ("other", 1))
    )


_RecfAsmVoiceTrkGrpRemoteSigConf_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpRemoteSigConf_Object = MibTableColumn
recfAsmVoiceTrkGrpRemoteSigConf = _RecfAsmVoiceTrkGrpRemoteSigConf_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 27),
    _RecfAsmVoiceTrkGrpRemoteSigConf_Type()
)
recfAsmVoiceTrkGrpRemoteSigConf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpRemoteSigConf.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpRmtSigPattern_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpRmtSigPattern based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("a0-b0-c0-d0", 16),
          ("a0-b0-c0-d1", 8),
          ("a0-b0-c1-d0", 4),
          ("a0-b0-c1-d1", 12),
          ("a0-b1-c0-d0", 2),
          ("a0-b1-c0-d1", 10),
          ("a0-b1-c1-d0", 6),
          ("a0-b1-c1-d1", 14),
          ("a1-b0-c0-d0", 1),
          ("a1-b0-c0-d1", 9),
          ("a1-b0-c1-d0", 5),
          ("a1-b0-c1-d1", 13),
          ("a1-b1-c0-d0", 3),
          ("a1-b1-c0-d1", 11),
          ("a1-b1-c1-d0", 7),
          ("a1-b1-c1-d1", 15))
    )


_RecfAsmVoiceTrkGrpRmtSigPattern_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpRmtSigPattern_Object = MibTableColumn
recfAsmVoiceTrkGrpRmtSigPattern = _RecfAsmVoiceTrkGrpRmtSigPattern_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 28),
    _RecfAsmVoiceTrkGrpRmtSigPattern_Type()
)
recfAsmVoiceTrkGrpRmtSigPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpRmtSigPattern.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpCelpNetSigMd_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpCelpNetSigMd based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("link", 3),
          ("st", 2))
    )


_RecfAsmVoiceTrkGrpCelpNetSigMd_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpCelpNetSigMd_Object = MibTableColumn
recfAsmVoiceTrkGrpCelpNetSigMd = _RecfAsmVoiceTrkGrpCelpNetSigMd_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 29),
    _RecfAsmVoiceTrkGrpCelpNetSigMd_Type()
)
recfAsmVoiceTrkGrpCelpNetSigMd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpCelpNetSigMd.setStatus("mandatory")


class _RecfAsmVoiceTrkGrpSearchDir_Type(Integer32):
    """Custom type recfAsmVoiceTrkGrpSearchDir based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("highLow", 2),
          ("lowHigh", 1))
    )


_RecfAsmVoiceTrkGrpSearchDir_Type.__name__ = "Integer32"
_RecfAsmVoiceTrkGrpSearchDir_Object = MibTableColumn
recfAsmVoiceTrkGrpSearchDir = _RecfAsmVoiceTrkGrpSearchDir_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 12, 2, 1, 1, 30),
    _RecfAsmVoiceTrkGrpSearchDir_Type()
)
recfAsmVoiceTrkGrpSearchDir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfAsmVoiceTrkGrpSearchDir.setStatus("mandatory")
_RecfRtmPort_ObjectIdentity = ObjectIdentity
recfRtmPort = _RecfRtmPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13)
)
_RecfRtmPortTable_Object = MibTable
recfRtmPortTable = _RecfRtmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1)
)
if mibBuilder.loadTexts:
    recfRtmPortTable.setStatus("mandatory")
_RecfRtmPortEntry_Object = MibTableRow
recfRtmPortEntry = _RecfRtmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1, 1)
)
recfRtmPortEntry.setIndexNames(
    (0, "STMIB", "recfRtmPortAddr"),
)
if mibBuilder.loadTexts:
    recfRtmPortEntry.setStatus("mandatory")
_RecfRtmPortAddr_Type = PortAddr
_RecfRtmPortAddr_Object = MibTableColumn
recfRtmPortAddr = _RecfRtmPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1, 1, 1),
    _RecfRtmPortAddr_Type()
)
recfRtmPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfRtmPortAddr.setStatus("mandatory")


class _RecfRtmPortStartMode_Type(Integer32):
    """Custom type recfRtmPortStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfRtmPortStartMode_Type.__name__ = "Integer32"
_RecfRtmPortStartMode_Object = MibTableColumn
recfRtmPortStartMode = _RecfRtmPortStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1, 1, 2),
    _RecfRtmPortStartMode_Type()
)
recfRtmPortStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfRtmPortStartMode.setStatus("mandatory")


class _RecfRtmPortUpdate_Type(Integer32):
    """Custom type recfRtmPortUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_RecfRtmPortUpdate_Type.__name__ = "Integer32"
_RecfRtmPortUpdate_Object = MibTableColumn
recfRtmPortUpdate = _RecfRtmPortUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1, 1, 3),
    _RecfRtmPortUpdate_Type()
)
recfRtmPortUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfRtmPortUpdate.setStatus("mandatory")


class _RecfRtmPortType_Type(Integer32):
    """Custom type recfRtmPortType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ad3", 2),
          ("ad7", 3),
          ("null", 1))
    )


_RecfRtmPortType_Type.__name__ = "Integer32"
_RecfRtmPortType_Object = MibTableColumn
recfRtmPortType = _RecfRtmPortType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1, 1, 4),
    _RecfRtmPortType_Type()
)
recfRtmPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfRtmPortType.setStatus("mandatory")


class _RecfRtmPortPartitionID_Type(Integer32):
    """Custom type recfRtmPortPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfRtmPortPartitionID_Type.__name__ = "Integer32"
_RecfRtmPortPartitionID_Object = MibTableColumn
recfRtmPortPartitionID = _RecfRtmPortPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 1, 1, 5),
    _RecfRtmPortPartitionID_Type()
)
recfRtmPortPartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfRtmPortPartitionID.setStatus("mandatory")
_RecfRtmAdPortTable_Object = MibTable
recfRtmAdPortTable = _RecfRtmAdPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2)
)
if mibBuilder.loadTexts:
    recfRtmAdPortTable.setStatus("mandatory")
_RecfRtmAdPortEntry_Object = MibTableRow
recfRtmAdPortEntry = _RecfRtmAdPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1)
)
recfRtmAdPortEntry.setIndexNames(
    (0, "STMIB", "recfRtmAdPortAddr"),
)
if mibBuilder.loadTexts:
    recfRtmAdPortEntry.setStatus("mandatory")
_RecfRtmAdPortAddr_Type = RtmAdPortAddr
_RecfRtmAdPortAddr_Object = MibTableColumn
recfRtmAdPortAddr = _RecfRtmAdPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 1),
    _RecfRtmAdPortAddr_Type()
)
recfRtmAdPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfRtmAdPortAddr.setStatus("mandatory")


class _RecfRtmAdPortStartMode_Type(Integer32):
    """Custom type recfRtmAdPortStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfRtmAdPortStartMode_Type.__name__ = "Integer32"
_RecfRtmAdPortStartMode_Object = MibTableColumn
recfRtmAdPortStartMode = _RecfRtmAdPortStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 2),
    _RecfRtmAdPortStartMode_Type()
)
recfRtmAdPortStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfRtmAdPortStartMode.setStatus("mandatory")


class _RecfRtmAdPortUpdate_Type(Integer32):
    """Custom type recfRtmAdPortUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3))
    )


_RecfRtmAdPortUpdate_Type.__name__ = "Integer32"
_RecfRtmAdPortUpdate_Object = MibTableColumn
recfRtmAdPortUpdate = _RecfRtmAdPortUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 3),
    _RecfRtmAdPortUpdate_Type()
)
recfRtmAdPortUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfRtmAdPortUpdate.setStatus("mandatory")


class _RecfRtmAdPortSpeed_Type(Integer32):
    """Custom type recfRtmAdPortSpeed based on Integer32"""
    defaultValue = 480

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              9,
              18,
              36,
              60,
              72,
              108,
              144,
              240,
              288,
              360,
              420,
              480,
              960)
        )
    )
    namedValues = NamedValues(
        *(("s1200", 9),
          ("s128000", 960),
          ("s14400", 108),
          ("s150", 2),
          ("s19200", 144),
          ("s2400", 18),
          ("s300", 3),
          ("s32000", 240),
          ("s38400", 288),
          ("s4800", 36),
          ("s48000", 360),
          ("s56000", 420),
          ("s64000", 480),
          ("s8000", 60),
          ("s9600", 72))
    )


_RecfRtmAdPortSpeed_Type.__name__ = "Integer32"
_RecfRtmAdPortSpeed_Object = MibTableColumn
recfRtmAdPortSpeed = _RecfRtmAdPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 4),
    _RecfRtmAdPortSpeed_Type()
)
recfRtmAdPortSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfRtmAdPortSpeed.setStatus("mandatory")


class _RecfRtmAdPortDataBits_Type(Integer32):
    """Custom type recfRtmAdPortDataBits based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("b7", 1),
          ("b8", 2))
    )


_RecfRtmAdPortDataBits_Type.__name__ = "Integer32"
_RecfRtmAdPortDataBits_Object = MibTableColumn
recfRtmAdPortDataBits = _RecfRtmAdPortDataBits_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 5),
    _RecfRtmAdPortDataBits_Type()
)
recfRtmAdPortDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfRtmAdPortDataBits.setStatus("mandatory")


class _RecfRtmAdPortCommMode_Type(Integer32):
    """Custom type recfRtmAdPortCommMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("async", 2),
          ("sync", 1))
    )


_RecfRtmAdPortCommMode_Type.__name__ = "Integer32"
_RecfRtmAdPortCommMode_Object = MibTableColumn
recfRtmAdPortCommMode = _RecfRtmAdPortCommMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 6),
    _RecfRtmAdPortCommMode_Type()
)
recfRtmAdPortCommMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfRtmAdPortCommMode.setStatus("mandatory")


class _RecfRtmAdPortType_Type(Integer32):
    """Custom type recfRtmAdPortType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bandContent", 3),
          ("io", 2),
          ("null", 1))
    )


_RecfRtmAdPortType_Type.__name__ = "Integer32"
_RecfRtmAdPortType_Object = MibTableColumn
recfRtmAdPortType = _RecfRtmAdPortType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 13, 2, 1, 7),
    _RecfRtmAdPortType_Type()
)
recfRtmAdPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfRtmAdPortType.setStatus("mandatory")
_RecfLgmPort_ObjectIdentity = ObjectIdentity
recfLgmPort = _RecfLgmPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14)
)
_RecfLgmPortTable_Object = MibTable
recfLgmPortTable = _RecfLgmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1)
)
if mibBuilder.loadTexts:
    recfLgmPortTable.setStatus("mandatory")
_RecfLgmPortEntry_Object = MibTableRow
recfLgmPortEntry = _RecfLgmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1)
)
recfLgmPortEntry.setIndexNames(
    (0, "STMIB", "recfLgmPortAddr"),
)
if mibBuilder.loadTexts:
    recfLgmPortEntry.setStatus("mandatory")
_RecfLgmPortAddr_Type = PortAddr
_RecfLgmPortAddr_Object = MibTableColumn
recfLgmPortAddr = _RecfLgmPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 1),
    _RecfLgmPortAddr_Type()
)
recfLgmPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfLgmPortAddr.setStatus("mandatory")


class _RecfLgmPortStartMode_Type(Integer32):
    """Custom type recfLgmPortStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfLgmPortStartMode_Type.__name__ = "Integer32"
_RecfLgmPortStartMode_Object = MibTableColumn
recfLgmPortStartMode = _RecfLgmPortStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 2),
    _RecfLgmPortStartMode_Type()
)
recfLgmPortStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortStartMode.setStatus("mandatory")


class _RecfLgmPortUpdate_Type(Integer32):
    """Custom type recfLgmPortUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3),
          ("updateReq", 2))
    )


_RecfLgmPortUpdate_Type.__name__ = "Integer32"
_RecfLgmPortUpdate_Object = MibTableColumn
recfLgmPortUpdate = _RecfLgmPortUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 3),
    _RecfLgmPortUpdate_Type()
)
recfLgmPortUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfLgmPortUpdate.setStatus("mandatory")


class _RecfLgmPortArq_Type(Integer32):
    """Custom type recfLgmPortArq based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("s3200", 1),
          ("s6400", 2),
          ("s9600", 3))
    )


_RecfLgmPortArq_Type.__name__ = "Integer32"
_RecfLgmPortArq_Object = MibTableColumn
recfLgmPortArq = _RecfLgmPortArq_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 4),
    _RecfLgmPortArq_Type()
)
recfLgmPortArq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortArq.setStatus("mandatory")


class _RecfLgmPortGroup_Type(OctetString):
    """Custom type recfLgmPortGroup based on OctetString"""
    defaultHexValue = "7f"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RecfLgmPortGroup_Type.__name__ = "OctetString"
_RecfLgmPortGroup_Object = MibTableColumn
recfLgmPortGroup = _RecfLgmPortGroup_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 5),
    _RecfLgmPortGroup_Type()
)
recfLgmPortGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortGroup.setStatus("mandatory")


class _RecfLgmPortEncryption_Type(Integer32):
    """Custom type recfLgmPortEncryption based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("encrypted", 2),
          ("normal", 1))
    )


_RecfLgmPortEncryption_Type.__name__ = "Integer32"
_RecfLgmPortEncryption_Object = MibTableColumn
recfLgmPortEncryption = _RecfLgmPortEncryption_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 6),
    _RecfLgmPortEncryption_Type()
)
recfLgmPortEncryption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortEncryption.setStatus("mandatory")


class _RecfLgmPortSatelliteHop_Type(Integer32):
    """Custom type recfLgmPortSatelliteHop based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4),
    )


_RecfLgmPortSatelliteHop_Type.__name__ = "Integer32"
_RecfLgmPortSatelliteHop_Object = MibTableColumn
recfLgmPortSatelliteHop = _RecfLgmPortSatelliteHop_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 7),
    _RecfLgmPortSatelliteHop_Type()
)
recfLgmPortSatelliteHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortSatelliteHop.setStatus("mandatory")


class _RecfLgmPortSyncChar_Type(Integer32):
    """Custom type recfLgmPortSyncChar based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              8)
        )
    )
    namedValues = NamedValues(
        *(("syncChar4", 4),
          ("syncChar8", 8))
    )


_RecfLgmPortSyncChar_Type.__name__ = "Integer32"
_RecfLgmPortSyncChar_Object = MibTableColumn
recfLgmPortSyncChar = _RecfLgmPortSyncChar_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 8),
    _RecfLgmPortSyncChar_Type()
)
recfLgmPortSyncChar.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortSyncChar.setStatus("mandatory")


class _RecfLgmPortSyncLevel_Type(Integer32):
    """Custom type recfLgmPortSyncLevel based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("level1", 1),
          ("level2", 2))
    )


_RecfLgmPortSyncLevel_Type.__name__ = "Integer32"
_RecfLgmPortSyncLevel_Object = MibTableColumn
recfLgmPortSyncLevel = _RecfLgmPortSyncLevel_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 9),
    _RecfLgmPortSyncLevel_Type()
)
recfLgmPortSyncLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortSyncLevel.setStatus("mandatory")


class _RecfLgmPortOosTimer_Type(Integer32):
    """Custom type recfLgmPortOosTimer based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 300),
    )


_RecfLgmPortOosTimer_Type.__name__ = "Integer32"
_RecfLgmPortOosTimer_Object = MibTableColumn
recfLgmPortOosTimer = _RecfLgmPortOosTimer_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 10),
    _RecfLgmPortOosTimer_Type()
)
recfLgmPortOosTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortOosTimer.setStatus("mandatory")


class _RecfLgmPortPartitionID_Type(Integer32):
    """Custom type recfLgmPortPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfLgmPortPartitionID_Type.__name__ = "Integer32"
_RecfLgmPortPartitionID_Object = MibTableColumn
recfLgmPortPartitionID = _RecfLgmPortPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 11),
    _RecfLgmPortPartitionID_Type()
)
recfLgmPortPartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortPartitionID.setStatus("mandatory")


class _RecfLgmPortBitMode_Type(Integer32):
    """Custom type recfLgmPortBitMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("b7Bit", 1),
          ("b8Bit", 2))
    )


_RecfLgmPortBitMode_Type.__name__ = "Integer32"
_RecfLgmPortBitMode_Object = MibTableColumn
recfLgmPortBitMode = _RecfLgmPortBitMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 12),
    _RecfLgmPortBitMode_Type()
)
recfLgmPortBitMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortBitMode.setStatus("mandatory")


class _RecfLgmPortInbandSuperrate_Type(Integer32):
    """Custom type recfLgmPortInbandSuperrate based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("forceActive", 2),
          ("nack", 1),
          ("pass", 3))
    )


_RecfLgmPortInbandSuperrate_Type.__name__ = "Integer32"
_RecfLgmPortInbandSuperrate_Object = MibTableColumn
recfLgmPortInbandSuperrate = _RecfLgmPortInbandSuperrate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 13),
    _RecfLgmPortInbandSuperrate_Type()
)
recfLgmPortInbandSuperrate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortInbandSuperrate.setStatus("mandatory")


class _RecfLgmPortInbandSubrate_Type(Integer32):
    """Custom type recfLgmPortInbandSubrate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nack", 1),
          ("pass", 3))
    )


_RecfLgmPortInbandSubrate_Type.__name__ = "Integer32"
_RecfLgmPortInbandSubrate_Object = MibTableColumn
recfLgmPortInbandSubrate = _RecfLgmPortInbandSubrate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 14),
    _RecfLgmPortInbandSubrate_Type()
)
recfLgmPortInbandSubrate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortInbandSubrate.setStatus("mandatory")


class _RecfLgmPortOutbandSuperrate_Type(Integer32):
    """Custom type recfLgmPortOutbandSuperrate based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("forceActive", 2),
          ("nack", 1),
          ("pass", 3))
    )


_RecfLgmPortOutbandSuperrate_Type.__name__ = "Integer32"
_RecfLgmPortOutbandSuperrate_Object = MibTableColumn
recfLgmPortOutbandSuperrate = _RecfLgmPortOutbandSuperrate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 15),
    _RecfLgmPortOutbandSuperrate_Type()
)
recfLgmPortOutbandSuperrate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortOutbandSuperrate.setStatus("mandatory")


class _RecfLgmPortOutbandSubrate_Type(Integer32):
    """Custom type recfLgmPortOutbandSubrate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nack", 1),
          ("pass", 3))
    )


_RecfLgmPortOutbandSubrate_Type.__name__ = "Integer32"
_RecfLgmPortOutbandSubrate_Object = MibTableColumn
recfLgmPortOutbandSubrate = _RecfLgmPortOutbandSubrate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 14, 1, 1, 16),
    _RecfLgmPortOutbandSubrate_Type()
)
recfLgmPortOutbandSubrate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLgmPortOutbandSubrate.setStatus("mandatory")
_RecfDsmPort_ObjectIdentity = ObjectIdentity
recfDsmPort = _RecfDsmPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15)
)
_RecfDsmIDCPortTable_Object = MibTable
recfDsmIDCPortTable = _RecfDsmIDCPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 1)
)
if mibBuilder.loadTexts:
    recfDsmIDCPortTable.setStatus("mandatory")
_RecfDsmIDCPortEntry_Object = MibTableRow
recfDsmIDCPortEntry = _RecfDsmIDCPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 1, 1)
)
recfDsmIDCPortEntry.setIndexNames(
    (0, "STMIB", "recfDsmIDCPortAddr"),
)
if mibBuilder.loadTexts:
    recfDsmIDCPortEntry.setStatus("mandatory")
_RecfDsmIDCPortAddr_Type = PortAddr
_RecfDsmIDCPortAddr_Object = MibTableColumn
recfDsmIDCPortAddr = _RecfDsmIDCPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 1, 1, 1),
    _RecfDsmIDCPortAddr_Type()
)
recfDsmIDCPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfDsmIDCPortAddr.setStatus("mandatory")
_RecfDsmDChPort_ObjectIdentity = ObjectIdentity
recfDsmDChPort = _RecfDsmDChPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2)
)
_RecfDsmDChPortTable_Object = MibTable
recfDsmDChPortTable = _RecfDsmDChPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1)
)
if mibBuilder.loadTexts:
    recfDsmDChPortTable.setStatus("mandatory")
_RecfDsmDChPortEntry_Object = MibTableRow
recfDsmDChPortEntry = _RecfDsmDChPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1)
)
recfDsmDChPortEntry.setIndexNames(
    (0, "STMIB", "recfDsmDChPortAddr"),
)
if mibBuilder.loadTexts:
    recfDsmDChPortEntry.setStatus("mandatory")
_RecfDsmDChPortAddr_Type = PortAddr
_RecfDsmDChPortAddr_Object = MibTableColumn
recfDsmDChPortAddr = _RecfDsmDChPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 1),
    _RecfDsmDChPortAddr_Type()
)
recfDsmDChPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfDsmDChPortAddr.setStatus("mandatory")


class _RecfDsmDChPortStartMode_Type(Integer32):
    """Custom type recfDsmDChPortStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfDsmDChPortStartMode_Type.__name__ = "Integer32"
_RecfDsmDChPortStartMode_Object = MibTableColumn
recfDsmDChPortStartMode = _RecfDsmDChPortStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 2),
    _RecfDsmDChPortStartMode_Type()
)
recfDsmDChPortStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChPortStartMode.setStatus("mandatory")


class _RecfDsmDChPortUpdate_Type(Integer32):
    """Custom type recfDsmDChPortUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetReq", 3),
          ("updateReq", 2))
    )


_RecfDsmDChPortUpdate_Type.__name__ = "Integer32"
_RecfDsmDChPortUpdate_Object = MibTableColumn
recfDsmDChPortUpdate = _RecfDsmDChPortUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 3),
    _RecfDsmDChPortUpdate_Type()
)
recfDsmDChPortUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfDsmDChPortUpdate.setStatus("mandatory")


class _RecfDsmDChPortPartitionID_Type(Integer32):
    """Custom type recfDsmDChPortPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfDsmDChPortPartitionID_Type.__name__ = "Integer32"
_RecfDsmDChPortPartitionID_Object = MibTableColumn
recfDsmDChPortPartitionID = _RecfDsmDChPortPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 4),
    _RecfDsmDChPortPartitionID_Type()
)
recfDsmDChPortPartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChPortPartitionID.setStatus("mandatory")


class _RecfDsmDChPortPbxProtocol_Type(Integer32):
    """Custom type recfDsmDChPortPbxProtocol based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dpnss", 1),
          ("qsig", 2))
    )


_RecfDsmDChPortPbxProtocol_Type.__name__ = "Integer32"
_RecfDsmDChPortPbxProtocol_Object = MibTableColumn
recfDsmDChPortPbxProtocol = _RecfDsmDChPortPbxProtocol_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 5),
    _RecfDsmDChPortPbxProtocol_Type()
)
recfDsmDChPortPbxProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChPortPbxProtocol.setStatus("mandatory")


class _RecfDsmDChPortPbxLayer3Type_Type(Integer32):
    """Custom type recfDsmDChPortPbxLayer3Type based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("master", 1),
          ("slave", 2))
    )


_RecfDsmDChPortPbxLayer3Type_Type.__name__ = "Integer32"
_RecfDsmDChPortPbxLayer3Type_Object = MibTableColumn
recfDsmDChPortPbxLayer3Type = _RecfDsmDChPortPbxLayer3Type_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 6),
    _RecfDsmDChPortPbxLayer3Type_Type()
)
recfDsmDChPortPbxLayer3Type.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChPortPbxLayer3Type.setStatus("mandatory")


class _RecfDsmDChPortPbxLayer2Type_Type(Integer32):
    """Custom type recfDsmDChPortPbxLayer2Type based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("master", 1),
          ("slave", 2))
    )


_RecfDsmDChPortPbxLayer2Type_Type.__name__ = "Integer32"
_RecfDsmDChPortPbxLayer2Type_Object = MibTableColumn
recfDsmDChPortPbxLayer2Type = _RecfDsmDChPortPbxLayer2Type_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 7),
    _RecfDsmDChPortPbxLayer2Type_Type()
)
recfDsmDChPortPbxLayer2Type.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChPortPbxLayer2Type.setStatus("mandatory")


class _RecfDsmDChPortSharedZeroFlag_Type(Integer32):
    """Custom type recfDsmDChPortSharedZeroFlag based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_RecfDsmDChPortSharedZeroFlag_Type.__name__ = "Integer32"
_RecfDsmDChPortSharedZeroFlag_Object = MibTableColumn
recfDsmDChPortSharedZeroFlag = _RecfDsmDChPortSharedZeroFlag_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 8),
    _RecfDsmDChPortSharedZeroFlag_Type()
)
recfDsmDChPortSharedZeroFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChPortSharedZeroFlag.setStatus("mandatory")


class _RecfDsmDChPortEncodingType_Type(Integer32):
    """Custom type recfDsmDChPortEncodingType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("nrz", 1),
          ("nrzb", 2),
          ("nrzi-mark", 3),
          ("nrzi-space", 4))
    )


_RecfDsmDChPortEncodingType_Type.__name__ = "Integer32"
_RecfDsmDChPortEncodingType_Object = MibTableColumn
recfDsmDChPortEncodingType = _RecfDsmDChPortEncodingType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 9),
    _RecfDsmDChPortEncodingType_Type()
)
recfDsmDChPortEncodingType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChPortEncodingType.setStatus("mandatory")


class _RecfDsmDChPortActiveLev1CDRMode_Type(Integer32):
    """Custom type recfDsmDChPortActiveLev1CDRMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfDsmDChPortActiveLev1CDRMode_Type.__name__ = "Integer32"
_RecfDsmDChPortActiveLev1CDRMode_Object = MibTableColumn
recfDsmDChPortActiveLev1CDRMode = _RecfDsmDChPortActiveLev1CDRMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 10),
    _RecfDsmDChPortActiveLev1CDRMode_Type()
)
recfDsmDChPortActiveLev1CDRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChPortActiveLev1CDRMode.setStatus("mandatory")


class _RecfDsmDChPortRecordLev1CDRMode_Type(Integer32):
    """Custom type recfDsmDChPortRecordLev1CDRMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfDsmDChPortRecordLev1CDRMode_Type.__name__ = "Integer32"
_RecfDsmDChPortRecordLev1CDRMode_Object = MibTableColumn
recfDsmDChPortRecordLev1CDRMode = _RecfDsmDChPortRecordLev1CDRMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 11),
    _RecfDsmDChPortRecordLev1CDRMode_Type()
)
recfDsmDChPortRecordLev1CDRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChPortRecordLev1CDRMode.setStatus("mandatory")


class _RecfDsmDChPortActiveLev2CDRMode_Type(Integer32):
    """Custom type recfDsmDChPortActiveLev2CDRMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfDsmDChPortActiveLev2CDRMode_Type.__name__ = "Integer32"
_RecfDsmDChPortActiveLev2CDRMode_Object = MibTableColumn
recfDsmDChPortActiveLev2CDRMode = _RecfDsmDChPortActiveLev2CDRMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 12),
    _RecfDsmDChPortActiveLev2CDRMode_Type()
)
recfDsmDChPortActiveLev2CDRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChPortActiveLev2CDRMode.setStatus("mandatory")


class _RecfDsmDChPortRecordLev2CDRMode_Type(Integer32):
    """Custom type recfDsmDChPortRecordLev2CDRMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RecfDsmDChPortRecordLev2CDRMode_Type.__name__ = "Integer32"
_RecfDsmDChPortRecordLev2CDRMode_Object = MibTableColumn
recfDsmDChPortRecordLev2CDRMode = _RecfDsmDChPortRecordLev2CDRMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 13),
    _RecfDsmDChPortRecordLev2CDRMode_Type()
)
recfDsmDChPortRecordLev2CDRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChPortRecordLev2CDRMode.setStatus("mandatory")


class _RecfDsmDChPortCallsPerSecond_Type(Integer32):
    """Custom type recfDsmDChPortCallsPerSecond based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RecfDsmDChPortCallsPerSecond_Type.__name__ = "Integer32"
_RecfDsmDChPortCallsPerSecond_Object = MibTableColumn
recfDsmDChPortCallsPerSecond = _RecfDsmDChPortCallsPerSecond_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 1, 1, 14),
    _RecfDsmDChPortCallsPerSecond_Type()
)
recfDsmDChPortCallsPerSecond.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChPortCallsPerSecond.setStatus("mandatory")
_RecfDsmDChBChTable_Object = MibTable
recfDsmDChBChTable = _RecfDsmDChBChTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 2)
)
if mibBuilder.loadTexts:
    recfDsmDChBChTable.setStatus("mandatory")
_RecfDsmDChBChEntry_Object = MibTableRow
recfDsmDChBChEntry = _RecfDsmDChBChEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 2, 1)
)
recfDsmDChBChEntry.setIndexNames(
    (0, "STMIB", "recfDsmDChBChAddr"),
    (0, "STMIB", "recfDsmDChBChBundle"),
)
if mibBuilder.loadTexts:
    recfDsmDChBChEntry.setStatus("mandatory")
_RecfDsmDChBChAddr_Type = PortAddr
_RecfDsmDChBChAddr_Object = MibTableColumn
recfDsmDChBChAddr = _RecfDsmDChBChAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 2, 1, 1),
    _RecfDsmDChBChAddr_Type()
)
recfDsmDChBChAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfDsmDChBChAddr.setStatus("mandatory")


class _RecfDsmDChBChBundle_Type(Integer32):
    """Custom type recfDsmDChBChBundle based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_RecfDsmDChBChBundle_Type.__name__ = "Integer32"
_RecfDsmDChBChBundle_Object = MibTableColumn
recfDsmDChBChBundle = _RecfDsmDChBChBundle_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 2, 1, 2),
    _RecfDsmDChBChBundle_Type()
)
recfDsmDChBChBundle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfDsmDChBChBundle.setStatus("mandatory")


class _RecfDsmDChBChDirection_Type(Integer32):
    """Custom type recfDsmDChBChDirection based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("bidirectional", 3),
          ("incoming", 2),
          ("none", 255),
          ("outgoing", 1))
    )


_RecfDsmDChBChDirection_Type.__name__ = "Integer32"
_RecfDsmDChBChDirection_Object = MibTableColumn
recfDsmDChBChDirection = _RecfDsmDChBChDirection_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 2, 1, 3),
    _RecfDsmDChBChDirection_Type()
)
recfDsmDChBChDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChBChDirection.setStatus("mandatory")
_RecfDsmDChExchTable_Object = MibTable
recfDsmDChExchTable = _RecfDsmDChExchTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 3)
)
if mibBuilder.loadTexts:
    recfDsmDChExchTable.setStatus("mandatory")
_RecfDsmDChExchEntry_Object = MibTableRow
recfDsmDChExchEntry = _RecfDsmDChExchEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 3, 1)
)
recfDsmDChExchEntry.setIndexNames(
    (0, "STMIB", "recfDsmDChExchDChAddr"),
    (0, "STMIB", "recfDsmDChExchIndex"),
)
if mibBuilder.loadTexts:
    recfDsmDChExchEntry.setStatus("mandatory")
_RecfDsmDChExchDChAddr_Type = PortAddr
_RecfDsmDChExchDChAddr_Object = MibTableColumn
recfDsmDChExchDChAddr = _RecfDsmDChExchDChAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 3, 1, 1),
    _RecfDsmDChExchDChAddr_Type()
)
recfDsmDChExchDChAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfDsmDChExchDChAddr.setStatus("mandatory")


class _RecfDsmDChExchIndex_Type(Integer32):
    """Custom type recfDsmDChExchIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RecfDsmDChExchIndex_Type.__name__ = "Integer32"
_RecfDsmDChExchIndex_Object = MibTableColumn
recfDsmDChExchIndex = _RecfDsmDChExchIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 3, 1, 2),
    _RecfDsmDChExchIndex_Type()
)
recfDsmDChExchIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfDsmDChExchIndex.setStatus("mandatory")


class _RecfDsmDChExchControlMode_Type(Integer32):
    """Custom type recfDsmDChExchControlMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("erase", 3))
    )


_RecfDsmDChExchControlMode_Type.__name__ = "Integer32"
_RecfDsmDChExchControlMode_Object = MibTableColumn
recfDsmDChExchControlMode = _RecfDsmDChExchControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 3, 1, 3),
    _RecfDsmDChExchControlMode_Type()
)
recfDsmDChExchControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChExchControlMode.setStatus("mandatory")


class _RecfDsmDChExchCode_Type(DisplayString):
    """Custom type recfDsmDChExchCode based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RecfDsmDChExchCode_Type.__name__ = "DisplayString"
_RecfDsmDChExchCode_Object = MibTableColumn
recfDsmDChExchCode = _RecfDsmDChExchCode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 3, 1, 4),
    _RecfDsmDChExchCode_Type()
)
recfDsmDChExchCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChExchCode.setStatus("mandatory")
_RecfDsmDChQOSTable_Object = MibTable
recfDsmDChQOSTable = _RecfDsmDChQOSTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4)
)
if mibBuilder.loadTexts:
    recfDsmDChQOSTable.setStatus("mandatory")
_RecfDsmDChQOSEntry_Object = MibTableRow
recfDsmDChQOSEntry = _RecfDsmDChQOSEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1)
)
recfDsmDChQOSEntry.setIndexNames(
    (0, "STMIB", "recfDsmDChQOSDChAddr"),
    (0, "STMIB", "recfDsmDChQOSIndex"),
)
if mibBuilder.loadTexts:
    recfDsmDChQOSEntry.setStatus("mandatory")
_RecfDsmDChQOSDChAddr_Type = PortAddr
_RecfDsmDChQOSDChAddr_Object = MibTableColumn
recfDsmDChQOSDChAddr = _RecfDsmDChQOSDChAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 1),
    _RecfDsmDChQOSDChAddr_Type()
)
recfDsmDChQOSDChAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfDsmDChQOSDChAddr.setStatus("mandatory")


class _RecfDsmDChQOSIndex_Type(Integer32):
    """Custom type recfDsmDChQOSIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_RecfDsmDChQOSIndex_Type.__name__ = "Integer32"
_RecfDsmDChQOSIndex_Object = MibTableColumn
recfDsmDChQOSIndex = _RecfDsmDChQOSIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 2),
    _RecfDsmDChQOSIndex_Type()
)
recfDsmDChQOSIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfDsmDChQOSIndex.setStatus("mandatory")


class _RecfDsmDChQOSControlMode_Type(Integer32):
    """Custom type recfDsmDChQOSControlMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("erase", 3))
    )


_RecfDsmDChQOSControlMode_Type.__name__ = "Integer32"
_RecfDsmDChQOSControlMode_Object = MibTableColumn
recfDsmDChQOSControlMode = _RecfDsmDChQOSControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 3),
    _RecfDsmDChQOSControlMode_Type()
)
recfDsmDChQOSControlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQOSControlMode.setStatus("mandatory")


class _RecfDsmDChQOSLowBChan_Type(Integer32):
    """Custom type recfDsmDChQOSLowBChan based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_RecfDsmDChQOSLowBChan_Type.__name__ = "Integer32"
_RecfDsmDChQOSLowBChan_Object = MibTableColumn
recfDsmDChQOSLowBChan = _RecfDsmDChQOSLowBChan_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 4),
    _RecfDsmDChQOSLowBChan_Type()
)
recfDsmDChQOSLowBChan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQOSLowBChan.setStatus("mandatory")


class _RecfDsmDChQOSHighBChan_Type(Integer32):
    """Custom type recfDsmDChQOSHighBChan based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_RecfDsmDChQOSHighBChan_Type.__name__ = "Integer32"
_RecfDsmDChQOSHighBChan_Object = MibTableColumn
recfDsmDChQOSHighBChan = _RecfDsmDChQOSHighBChan_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 5),
    _RecfDsmDChQOSHighBChan_Type()
)
recfDsmDChQOSHighBChan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQOSHighBChan.setStatus("mandatory")


class _RecfDsmDChQOSLowExchCode_Type(DisplayString):
    """Custom type recfDsmDChQOSLowExchCode based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RecfDsmDChQOSLowExchCode_Type.__name__ = "DisplayString"
_RecfDsmDChQOSLowExchCode_Object = MibTableColumn
recfDsmDChQOSLowExchCode = _RecfDsmDChQOSLowExchCode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 6),
    _RecfDsmDChQOSLowExchCode_Type()
)
recfDsmDChQOSLowExchCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQOSLowExchCode.setStatus("mandatory")


class _RecfDsmDChQOSHighExchCode_Type(DisplayString):
    """Custom type recfDsmDChQOSHighExchCode based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RecfDsmDChQOSHighExchCode_Type.__name__ = "DisplayString"
_RecfDsmDChQOSHighExchCode_Object = MibTableColumn
recfDsmDChQOSHighExchCode = _RecfDsmDChQOSHighExchCode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 7),
    _RecfDsmDChQOSHighExchCode_Type()
)
recfDsmDChQOSHighExchCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQOSHighExchCode.setStatus("mandatory")


class _RecfDsmDChQOSCallType_Type(Integer32):
    """Custom type recfDsmDChQOSCallType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("data", 2),
          ("voice", 1))
    )


_RecfDsmDChQOSCallType_Type.__name__ = "Integer32"
_RecfDsmDChQOSCallType_Object = MibTableColumn
recfDsmDChQOSCallType = _RecfDsmDChQOSCallType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 8),
    _RecfDsmDChQOSCallType_Type()
)
recfDsmDChQOSCallType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQOSCallType.setStatus("mandatory")


class _RecfDsmDChQOSChPrfIndex_Type(Integer32):
    """Custom type recfDsmDChQOSChPrfIndex based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQOSChPrfIndex_Type.__name__ = "Integer32"
_RecfDsmDChQOSChPrfIndex_Object = MibTableColumn
recfDsmDChQOSChPrfIndex = _RecfDsmDChQOSChPrfIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 9),
    _RecfDsmDChQOSChPrfIndex_Type()
)
recfDsmDChQOSChPrfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQOSChPrfIndex.setStatus("mandatory")


class _RecfDsmDChQOSSpecialPrfIndex_Type(Integer32):
    """Custom type recfDsmDChQOSSpecialPrfIndex based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQOSSpecialPrfIndex_Type.__name__ = "Integer32"
_RecfDsmDChQOSSpecialPrfIndex_Object = MibTableColumn
recfDsmDChQOSSpecialPrfIndex = _RecfDsmDChQOSSpecialPrfIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 4, 1, 10),
    _RecfDsmDChQOSSpecialPrfIndex_Type()
)
recfDsmDChQOSSpecialPrfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQOSSpecialPrfIndex.setStatus("mandatory")
_RecfDsmDChDPNSSTable_Object = MibTable
recfDsmDChDPNSSTable = _RecfDsmDChDPNSSTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5)
)
if mibBuilder.loadTexts:
    recfDsmDChDPNSSTable.setStatus("mandatory")
_RecfDsmDChDPNSSEntry_Object = MibTableRow
recfDsmDChDPNSSEntry = _RecfDsmDChDPNSSEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1)
)
recfDsmDChDPNSSEntry.setIndexNames(
    (0, "STMIB", "recfDsmDChDPNSSAddr"),
)
if mibBuilder.loadTexts:
    recfDsmDChDPNSSEntry.setStatus("mandatory")
_RecfDsmDChDPNSSAddr_Type = PortAddr
_RecfDsmDChDPNSSAddr_Object = MibTableColumn
recfDsmDChDPNSSAddr = _RecfDsmDChDPNSSAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1, 1),
    _RecfDsmDChDPNSSAddr_Type()
)
recfDsmDChDPNSSAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfDsmDChDPNSSAddr.setStatus("mandatory")


class _RecfDsmDChDPNSSNL_Type(Integer32):
    """Custom type recfDsmDChDPNSSNL based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChDPNSSNL_Type.__name__ = "Integer32"
_RecfDsmDChDPNSSNL_Object = MibTableColumn
recfDsmDChDPNSSNL = _RecfDsmDChDPNSSNL_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1, 2),
    _RecfDsmDChDPNSSNL_Type()
)
recfDsmDChDPNSSNL.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChDPNSSNL.setStatus("mandatory")


class _RecfDsmDChDPNSSNT1_Type(Integer32):
    """Custom type recfDsmDChDPNSSNT1 based on Integer32"""
    defaultValue = 50

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChDPNSSNT1_Type.__name__ = "Integer32"
_RecfDsmDChDPNSSNT1_Object = MibTableColumn
recfDsmDChDPNSSNT1 = _RecfDsmDChDPNSSNT1_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1, 3),
    _RecfDsmDChDPNSSNT1_Type()
)
recfDsmDChDPNSSNT1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChDPNSSNT1.setStatus("mandatory")


class _RecfDsmDChDPNSSNT2_Type(Integer32):
    """Custom type recfDsmDChDPNSSNT2 based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RecfDsmDChDPNSSNT2_Type.__name__ = "Integer32"
_RecfDsmDChDPNSSNT2_Object = MibTableColumn
recfDsmDChDPNSSNT2 = _RecfDsmDChDPNSSNT2_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1, 4),
    _RecfDsmDChDPNSSNT2_Type()
)
recfDsmDChDPNSSNT2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChDPNSSNT2.setStatus("mandatory")


class _RecfDsmDChDPNSSUnrecMsgIdle_Type(Integer32):
    """Custom type recfDsmDChDPNSSUnrecMsgIdle based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChDPNSSUnrecMsgIdle_Type.__name__ = "Integer32"
_RecfDsmDChDPNSSUnrecMsgIdle_Object = MibTableColumn
recfDsmDChDPNSSUnrecMsgIdle = _RecfDsmDChDPNSSUnrecMsgIdle_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1, 5),
    _RecfDsmDChDPNSSUnrecMsgIdle_Type()
)
recfDsmDChDPNSSUnrecMsgIdle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChDPNSSUnrecMsgIdle.setStatus("mandatory")


class _RecfDsmDChDPNSSInterDgtTmr_Type(Integer32):
    """Custom type recfDsmDChDPNSSInterDgtTmr based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChDPNSSInterDgtTmr_Type.__name__ = "Integer32"
_RecfDsmDChDPNSSInterDgtTmr_Object = MibTableColumn
recfDsmDChDPNSSInterDgtTmr = _RecfDsmDChDPNSSInterDgtTmr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 5, 1, 6),
    _RecfDsmDChDPNSSInterDgtTmr_Type()
)
recfDsmDChDPNSSInterDgtTmr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChDPNSSInterDgtTmr.setStatus("mandatory")
_RecfDsmDChQSigTable_Object = MibTable
recfDsmDChQSigTable = _RecfDsmDChQSigTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6)
)
if mibBuilder.loadTexts:
    recfDsmDChQSigTable.setStatus("mandatory")
_RecfDsmDChQSigEntry_Object = MibTableRow
recfDsmDChQSigEntry = _RecfDsmDChQSigEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1)
)
recfDsmDChQSigEntry.setIndexNames(
    (0, "STMIB", "recfDsmDChQSigAddr"),
)
if mibBuilder.loadTexts:
    recfDsmDChQSigEntry.setStatus("mandatory")
_RecfDsmDChQSigAddr_Type = PortAddr
_RecfDsmDChQSigAddr_Object = MibTableColumn
recfDsmDChQSigAddr = _RecfDsmDChQSigAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 1),
    _RecfDsmDChQSigAddr_Type()
)
recfDsmDChQSigAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfDsmDChQSigAddr.setStatus("mandatory")


class _RecfDsmDChQSigK_Type(Integer32):
    """Custom type recfDsmDChQSigK based on Integer32"""
    defaultValue = 7

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_RecfDsmDChQSigK_Type.__name__ = "Integer32"
_RecfDsmDChQSigK_Object = MibTableColumn
recfDsmDChQSigK = _RecfDsmDChQSigK_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 2),
    _RecfDsmDChQSigK_Type()
)
recfDsmDChQSigK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigK.setStatus("mandatory")


class _RecfDsmDChQSigN200_Type(Integer32):
    """Custom type recfDsmDChQSigN200 based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQSigN200_Type.__name__ = "Integer32"
_RecfDsmDChQSigN200_Object = MibTableColumn
recfDsmDChQSigN200 = _RecfDsmDChQSigN200_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 3),
    _RecfDsmDChQSigN200_Type()
)
recfDsmDChQSigN200.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigN200.setStatus("mandatory")


class _RecfDsmDChQSigT200_Type(Integer32):
    """Custom type recfDsmDChQSigT200 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQSigT200_Type.__name__ = "Integer32"
_RecfDsmDChQSigT200_Object = MibTableColumn
recfDsmDChQSigT200 = _RecfDsmDChQSigT200_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 4),
    _RecfDsmDChQSigT200_Type()
)
recfDsmDChQSigT200.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigT200.setStatus("mandatory")


class _RecfDsmDChQSigT203_Type(Integer32):
    """Custom type recfDsmDChQSigT203 based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQSigT203_Type.__name__ = "Integer32"
_RecfDsmDChQSigT203_Object = MibTableColumn
recfDsmDChQSigT203 = _RecfDsmDChQSigT203_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 5),
    _RecfDsmDChQSigT203_Type()
)
recfDsmDChQSigT203.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigT203.setStatus("mandatory")


class _RecfDsmDChQSigT302_Type(Integer32):
    """Custom type recfDsmDChQSigT302 based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQSigT302_Type.__name__ = "Integer32"
_RecfDsmDChQSigT302_Object = MibTableColumn
recfDsmDChQSigT302 = _RecfDsmDChQSigT302_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 6),
    _RecfDsmDChQSigT302_Type()
)
recfDsmDChQSigT302.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigT302.setStatus("mandatory")


class _RecfDsmDChQSigT303_Type(Integer32):
    """Custom type recfDsmDChQSigT303 based on Integer32"""
    defaultValue = 6

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQSigT303_Type.__name__ = "Integer32"
_RecfDsmDChQSigT303_Object = MibTableColumn
recfDsmDChQSigT303 = _RecfDsmDChQSigT303_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 7),
    _RecfDsmDChQSigT303_Type()
)
recfDsmDChQSigT303.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigT303.setStatus("mandatory")


class _RecfDsmDChQSigT304_Type(Integer32):
    """Custom type recfDsmDChQSigT304 based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQSigT304_Type.__name__ = "Integer32"
_RecfDsmDChQSigT304_Object = MibTableColumn
recfDsmDChQSigT304 = _RecfDsmDChQSigT304_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 8),
    _RecfDsmDChQSigT304_Type()
)
recfDsmDChQSigT304.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigT304.setStatus("mandatory")


class _RecfDsmDChQSigT305_Type(Integer32):
    """Custom type recfDsmDChQSigT305 based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQSigT305_Type.__name__ = "Integer32"
_RecfDsmDChQSigT305_Object = MibTableColumn
recfDsmDChQSigT305 = _RecfDsmDChQSigT305_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 9),
    _RecfDsmDChQSigT305_Type()
)
recfDsmDChQSigT305.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigT305.setStatus("mandatory")


class _RecfDsmDChQSigT308_Type(Integer32):
    """Custom type recfDsmDChQSigT308 based on Integer32"""
    defaultValue = 6

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQSigT308_Type.__name__ = "Integer32"
_RecfDsmDChQSigT308_Object = MibTableColumn
recfDsmDChQSigT308 = _RecfDsmDChQSigT308_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 10),
    _RecfDsmDChQSigT308_Type()
)
recfDsmDChQSigT308.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigT308.setStatus("mandatory")


class _RecfDsmDChQSigT309_Type(Integer32):
    """Custom type recfDsmDChQSigT309 based on Integer32"""
    defaultValue = 90

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQSigT309_Type.__name__ = "Integer32"
_RecfDsmDChQSigT309_Object = MibTableColumn
recfDsmDChQSigT309 = _RecfDsmDChQSigT309_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 11),
    _RecfDsmDChQSigT309_Type()
)
recfDsmDChQSigT309.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigT309.setStatus("mandatory")


class _RecfDsmDChQSigT314_Type(Integer32):
    """Custom type recfDsmDChQSigT314 based on Integer32"""
    defaultValue = 6

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQSigT314_Type.__name__ = "Integer32"
_RecfDsmDChQSigT314_Object = MibTableColumn
recfDsmDChQSigT314 = _RecfDsmDChQSigT314_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 12),
    _RecfDsmDChQSigT314_Type()
)
recfDsmDChQSigT314.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigT314.setStatus("mandatory")


class _RecfDsmDChQSigT316_Type(Integer32):
    """Custom type recfDsmDChQSigT316 based on Integer32"""
    defaultValue = 20

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQSigT316_Type.__name__ = "Integer32"
_RecfDsmDChQSigT316_Object = MibTableColumn
recfDsmDChQSigT316 = _RecfDsmDChQSigT316_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 13),
    _RecfDsmDChQSigT316_Type()
)
recfDsmDChQSigT316.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigT316.setStatus("mandatory")


class _RecfDsmDChQSigT322_Type(Integer32):
    """Custom type recfDsmDChQSigT322 based on Integer32"""
    defaultValue = 6

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RecfDsmDChQSigT322_Type.__name__ = "Integer32"
_RecfDsmDChQSigT322_Object = MibTableColumn
recfDsmDChQSigT322 = _RecfDsmDChQSigT322_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 15, 2, 6, 1, 14),
    _RecfDsmDChQSigT322_Type()
)
recfDsmDChQSigT322.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfDsmDChQSigT322.setStatus("mandatory")
_RecfTranslation_ObjectIdentity = ObjectIdentity
recfTranslation = _RecfTranslation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16)
)
_RecfLink2TraTable_Object = MibTable
recfLink2TraTable = _RecfLink2TraTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1)
)
if mibBuilder.loadTexts:
    recfLink2TraTable.setStatus("mandatory")
_RecfLink2TraEntry_Object = MibTableRow
recfLink2TraEntry = _RecfLink2TraEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1)
)
recfLink2TraEntry.setIndexNames(
    (0, "STMIB", "recfLink2TraIndex"),
)
if mibBuilder.loadTexts:
    recfLink2TraEntry.setStatus("mandatory")
_RecfLink2TraIndex_Type = Link2Index
_RecfLink2TraIndex_Object = MibTableColumn
recfLink2TraIndex = _RecfLink2TraIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1, 1),
    _RecfLink2TraIndex_Type()
)
recfLink2TraIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfLink2TraIndex.setStatus("mandatory")


class _RecfLink2TraStartMode_Type(Integer32):
    """Custom type recfLink2TraStartMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("erase", 3),
          ("off", 2))
    )


_RecfLink2TraStartMode_Type.__name__ = "Integer32"
_RecfLink2TraStartMode_Object = MibTableColumn
recfLink2TraStartMode = _RecfLink2TraStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1, 2),
    _RecfLink2TraStartMode_Type()
)
recfLink2TraStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLink2TraStartMode.setStatus("mandatory")
_RecfLink2TraStAddr_Type = ChannelAddr
_RecfLink2TraStAddr_Object = MibTableColumn
recfLink2TraStAddr = _RecfLink2TraStAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1, 3),
    _RecfLink2TraStAddr_Type()
)
recfLink2TraStAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfLink2TraStAddr.setStatus("mandatory")
_RecfLink2TraL2Addr_Type = Link2Addr
_RecfLink2TraL2Addr_Object = MibTableColumn
recfLink2TraL2Addr = _RecfLink2TraL2Addr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1, 4),
    _RecfLink2TraL2Addr_Type()
)
recfLink2TraL2Addr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLink2TraL2Addr.setStatus("mandatory")


class _RecfLink2TraFunctions_Type(Integer32):
    """Custom type recfLink2TraFunctions based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("inBand", 2),
          ("none", 1),
          ("outBand", 3))
    )


_RecfLink2TraFunctions_Type.__name__ = "Integer32"
_RecfLink2TraFunctions_Object = MibTableColumn
recfLink2TraFunctions = _RecfLink2TraFunctions_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1, 5),
    _RecfLink2TraFunctions_Type()
)
recfLink2TraFunctions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfLink2TraFunctions.setStatus("mandatory")


class _RecfLink2TraPartition_Type(Integer32):
    """Custom type recfLink2TraPartition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfLink2TraPartition_Type.__name__ = "Integer32"
_RecfLink2TraPartition_Object = MibTableColumn
recfLink2TraPartition = _RecfLink2TraPartition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 16, 1, 1, 6),
    _RecfLink2TraPartition_Type()
)
recfLink2TraPartition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfLink2TraPartition.setStatus("mandatory")
_RecfHwRsc_ObjectIdentity = ObjectIdentity
recfHwRsc = _RecfHwRsc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17)
)
_RecfHwRscEngineTable_Object = MibTable
recfHwRscEngineTable = _RecfHwRscEngineTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1)
)
if mibBuilder.loadTexts:
    recfHwRscEngineTable.setStatus("mandatory")
_RecfHwRscEngineEntry_Object = MibTableRow
recfHwRscEngineEntry = _RecfHwRscEngineEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1)
)
recfHwRscEngineEntry.setIndexNames(
    (0, "STMIB", "recfHwRscEngineModuleAddr"),
    (0, "STMIB", "recfHwRscEngineID"),
)
if mibBuilder.loadTexts:
    recfHwRscEngineEntry.setStatus("mandatory")
_RecfHwRscEngineModuleAddr_Type = SlotAddr
_RecfHwRscEngineModuleAddr_Object = MibTableColumn
recfHwRscEngineModuleAddr = _RecfHwRscEngineModuleAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1, 1),
    _RecfHwRscEngineModuleAddr_Type()
)
recfHwRscEngineModuleAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfHwRscEngineModuleAddr.setStatus("mandatory")


class _RecfHwRscEngineID_Type(Integer32):
    """Custom type recfHwRscEngineID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RecfHwRscEngineID_Type.__name__ = "Integer32"
_RecfHwRscEngineID_Object = MibTableColumn
recfHwRscEngineID = _RecfHwRscEngineID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1, 2),
    _RecfHwRscEngineID_Type()
)
recfHwRscEngineID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfHwRscEngineID.setStatus("mandatory")


class _RecfHwRscEngineStartMode_Type(Integer32):
    """Custom type recfHwRscEngineStartMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("offline", 2))
    )


_RecfHwRscEngineStartMode_Type.__name__ = "Integer32"
_RecfHwRscEngineStartMode_Object = MibTableColumn
recfHwRscEngineStartMode = _RecfHwRscEngineStartMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1, 3),
    _RecfHwRscEngineStartMode_Type()
)
recfHwRscEngineStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfHwRscEngineStartMode.setStatus("mandatory")


class _RecfHwRscEngineUpdate_Type(Integer32):
    """Custom type recfHwRscEngineUpdate based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loaded", 1),
          ("resetRequired", 3))
    )


_RecfHwRscEngineUpdate_Type.__name__ = "Integer32"
_RecfHwRscEngineUpdate_Object = MibTableColumn
recfHwRscEngineUpdate = _RecfHwRscEngineUpdate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1, 4),
    _RecfHwRscEngineUpdate_Type()
)
recfHwRscEngineUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    recfHwRscEngineUpdate.setStatus("mandatory")


class _RecfHwRscEngineApplication_Type(Integer32):
    """Custom type recfHwRscEngineApplication based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("adpcm", 3),
          ("any", 255),
          ("celp-atc", 2),
          ("link", 4),
          ("x50", 1))
    )


_RecfHwRscEngineApplication_Type.__name__ = "Integer32"
_RecfHwRscEngineApplication_Object = MibTableColumn
recfHwRscEngineApplication = _RecfHwRscEngineApplication_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1, 5),
    _RecfHwRscEngineApplication_Type()
)
recfHwRscEngineApplication.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfHwRscEngineApplication.setStatus("mandatory")


class _RecfHwRscEnginePartitionID_Type(Integer32):
    """Custom type recfHwRscEnginePartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RecfHwRscEnginePartitionID_Type.__name__ = "Integer32"
_RecfHwRscEnginePartitionID_Object = MibTableColumn
recfHwRscEnginePartitionID = _RecfHwRscEnginePartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 1, 17, 1, 1, 6),
    _RecfHwRscEnginePartitionID_Type()
)
recfHwRscEnginePartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    recfHwRscEnginePartitionID.setStatus("mandatory")
_ReStatus_ObjectIdentity = ObjectIdentity
reStatus = _ReStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2)
)
_RestNode_ObjectIdentity = ObjectIdentity
restNode = _RestNode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1)
)
_RestNodeEntry_ObjectIdentity = ObjectIdentity
restNodeEntry = _RestNodeEntry_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1)
)


class _RestNodeDiagnostics_Type(Integer32):
    """Custom type restNodeDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(7,
              10,
              11,
              12,
              13,
              17,
              18,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              108,
              109,
              122,
              123)
        )
    )
    namedValues = NamedValues(
        *(("clearNcpBgDiagResults", 122),
          ("clearNcpStartupDiagResults", 123),
          ("disableTestGen", 13),
          ("enableTestGenLocal", 11),
          ("enableTestGenRemote", 12),
          ("selectClock1", 21),
          ("selectClock2", 22),
          ("selectClock3", 23),
          ("selectClock4", 24),
          ("selectClock5", 25),
          ("selectClock6", 26),
          ("selectClock7", 27),
          ("selectClock8", 28),
          ("turnOffMajorAlarmRly", 18),
          ("turnOffMinorAlarmRly", 109),
          ("turnOnMajorAlarmRly", 17),
          ("turnOnMinorAlarmRly", 108),
          ("updateClockTable", 10),
          ("updateNest", 7))
    )


_RestNodeDiagnostics_Type.__name__ = "Integer32"
_RestNodeDiagnostics_Object = MibScalar
restNodeDiagnostics = _RestNodeDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 1),
    _RestNodeDiagnostics_Type()
)
restNodeDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restNodeDiagnostics.setStatus("mandatory")


class _RestNodeStatus_Type(Integer32):
    """Custom type restNodeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(43,
              48,
              49)
        )
    )
    namedValues = NamedValues(
        *(("fail", 43),
          ("initializing", 49),
          ("online", 48))
    )


_RestNodeStatus_Type.__name__ = "Integer32"
_RestNodeStatus_Object = MibScalar
restNodeStatus = _RestNodeStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 2),
    _RestNodeStatus_Type()
)
restNodeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeStatus.setStatus("mandatory")


class _RestNodeCondition_Type(Integer32):
    """Custom type restNodeCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(52,
              57)
        )
    )
    namedValues = NamedValues(
        *(("exception", 52),
          ("normal", 57))
    )


_RestNodeCondition_Type.__name__ = "Integer32"
_RestNodeCondition_Object = MibScalar
restNodeCondition = _RestNodeCondition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 3),
    _RestNodeCondition_Type()
)
restNodeCondition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeCondition.setStatus("mandatory")


class _RestNodeSWRevision_Type(DisplayString):
    """Custom type restNodeSWRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_RestNodeSWRevision_Type.__name__ = "DisplayString"
_RestNodeSWRevision_Object = MibScalar
restNodeSWRevision = _RestNodeSWRevision_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 4),
    _RestNodeSWRevision_Type()
)
restNodeSWRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeSWRevision.setStatus("mandatory")


class _RestNodeMIBRevision_Type(DisplayString):
    """Custom type restNodeMIBRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_RestNodeMIBRevision_Type.__name__ = "DisplayString"
_RestNodeMIBRevision_Object = MibScalar
restNodeMIBRevision = _RestNodeMIBRevision_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 5),
    _RestNodeMIBRevision_Type()
)
restNodeMIBRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeMIBRevision.setStatus("mandatory")
_RestNodeUpTime_Type = Integer32
_RestNodeUpTime_Object = MibScalar
restNodeUpTime = _RestNodeUpTime_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 6),
    _RestNodeUpTime_Type()
)
restNodeUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeUpTime.setStatus("mandatory")


class _RestNodeErrorMinutes_Type(Integer32):
    """Custom type restNodeErrorMinutes based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1440),
    )


_RestNodeErrorMinutes_Type.__name__ = "Integer32"
_RestNodeErrorMinutes_Object = MibScalar
restNodeErrorMinutes = _RestNodeErrorMinutes_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 7),
    _RestNodeErrorMinutes_Type()
)
restNodeErrorMinutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeErrorMinutes.setStatus("mandatory")


class _RestNodeNumOfNest_Type(Integer32):
    """Custom type restNodeNumOfNest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_RestNodeNumOfNest_Type.__name__ = "Integer32"
_RestNodeNumOfNest_Object = MibScalar
restNodeNumOfNest = _RestNodeNumOfNest_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 8),
    _RestNodeNumOfNest_Type()
)
restNodeNumOfNest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeNumOfNest.setStatus("mandatory")
_RestNodePktBandBWAvail_Type = Integer32
_RestNodePktBandBWAvail_Object = MibScalar
restNodePktBandBWAvail = _RestNodePktBandBWAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 9),
    _RestNodePktBandBWAvail_Type()
)
restNodePktBandBWAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodePktBandBWAvail.setStatus("mandatory")
_RestNodePktBandBWMax_Type = Integer32
_RestNodePktBandBWMax_Object = MibScalar
restNodePktBandBWMax = _RestNodePktBandBWMax_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 10),
    _RestNodePktBandBWMax_Type()
)
restNodePktBandBWMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodePktBandBWMax.setStatus("mandatory")


class _RestNodeMasterClockPriority_Type(Integer32):
    """Custom type restNodeMasterClockPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("master1", 1),
          ("master10", 10),
          ("master11", 11),
          ("master12", 12),
          ("master13", 13),
          ("master14", 14),
          ("master15", 15),
          ("master16", 16),
          ("master2", 2),
          ("master3", 3),
          ("master4", 4),
          ("master5", 5),
          ("master6", 6),
          ("master7", 7),
          ("master8", 8),
          ("master9", 9),
          ("slave", 17))
    )


_RestNodeMasterClockPriority_Type.__name__ = "Integer32"
_RestNodeMasterClockPriority_Object = MibScalar
restNodeMasterClockPriority = _RestNodeMasterClockPriority_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 11),
    _RestNodeMasterClockPriority_Type()
)
restNodeMasterClockPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeMasterClockPriority.setStatus("mandatory")


class _RestNodeMasterClockMsg_Type(Integer32):
    """Custom type restNodeMasterClockMsg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("asertingMasterMode", 1),
          ("defaultInternal", 2),
          ("unavailable", 3))
    )


_RestNodeMasterClockMsg_Type.__name__ = "Integer32"
_RestNodeMasterClockMsg_Object = MibScalar
restNodeMasterClockMsg = _RestNodeMasterClockMsg_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 12),
    _RestNodeMasterClockMsg_Type()
)
restNodeMasterClockMsg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeMasterClockMsg.setStatus("mandatory")


class _RestNodeClockTableIndex_Type(Integer32):
    """Custom type restNodeClockTableIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_RestNodeClockTableIndex_Type.__name__ = "Integer32"
_RestNodeClockTableIndex_Object = MibScalar
restNodeClockTableIndex = _RestNodeClockTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 13),
    _RestNodeClockTableIndex_Type()
)
restNodeClockTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeClockTableIndex.setStatus("mandatory")


class _RestNodeClockStatus_Type(Integer32):
    """Custom type restNodeClockStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              9,
              11,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("defaultIntOsc", 17),
          ("hardwareCheck", 14),
          ("locked", 3),
          ("lockedStable", 4),
          ("locking", 5),
          ("relocking", 9),
          ("slaveHoldover", 15),
          ("startup", 16),
          ("waitInternal", 11))
    )


_RestNodeClockStatus_Type.__name__ = "Integer32"
_RestNodeClockStatus_Object = MibScalar
restNodeClockStatus = _RestNodeClockStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 14),
    _RestNodeClockStatus_Type()
)
restNodeClockStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeClockStatus.setStatus("mandatory")


class _RestNodeClockSubStatus_Type(Integer32):
    """Custom type restNodeClockSubStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              6,
              7,
              8,
              10,
              12,
              13,
              255)
        )
    )
    namedValues = NamedValues(
        *(("checkQualifier", 1),
          ("delayFallback", 2),
          ("notApplicable", 255),
          ("preQualifyClock", 6),
          ("qualifyInvalid", 7),
          ("qualifyValid", 8),
          ("requalifying", 10),
          ("waitInvalid", 12),
          ("waitQualify", 13))
    )


_RestNodeClockSubStatus_Type.__name__ = "Integer32"
_RestNodeClockSubStatus_Object = MibScalar
restNodeClockSubStatus = _RestNodeClockSubStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 15),
    _RestNodeClockSubStatus_Type()
)
restNodeClockSubStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeClockSubStatus.setStatus("mandatory")


class _RestNodeClockSourceType_Type(Integer32):
    """Custom type restNodeClockSourceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              255)
        )
    )
    namedValues = NamedValues(
        *(("internal", 1),
          ("notApplicable", 255),
          ("portRxDep", 5),
          ("portRxInd", 4),
          ("portTx", 6),
          ("station1", 2),
          ("station2", 3))
    )


_RestNodeClockSourceType_Type.__name__ = "Integer32"
_RestNodeClockSourceType_Object = MibScalar
restNodeClockSourceType = _RestNodeClockSourceType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 16),
    _RestNodeClockSourceType_Type()
)
restNodeClockSourceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeClockSourceType.setStatus("mandatory")
_RestNodeClockSourcePort_Type = PortAddr
_RestNodeClockSourcePort_Object = MibScalar
restNodeClockSourcePort = _RestNodeClockSourcePort_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 17),
    _RestNodeClockSourcePort_Type()
)
restNodeClockSourcePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeClockSourcePort.setStatus("mandatory")


class _RestNodeClockSourcePriority_Type(Integer32):
    """Custom type restNodeClockSourcePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_RestNodeClockSourcePriority_Type.__name__ = "Integer32"
_RestNodeClockSourcePriority_Object = MibScalar
restNodeClockSourcePriority = _RestNodeClockSourcePriority_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 18),
    _RestNodeClockSourcePriority_Type()
)
restNodeClockSourcePriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeClockSourcePriority.setStatus("mandatory")


class _RestNodeClockSourceQuality_Type(Integer32):
    """Custom type restNodeClockSourceQuality based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 2),
          ("notApplicable", 255))
    )


_RestNodeClockSourceQuality_Type.__name__ = "Integer32"
_RestNodeClockSourceQuality_Object = MibScalar
restNodeClockSourceQuality = _RestNodeClockSourceQuality_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 19),
    _RestNodeClockSourceQuality_Type()
)
restNodeClockSourceQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeClockSourceQuality.setStatus("mandatory")


class _RestNodeClockQualifierStatus_Type(Integer32):
    """Custom type restNodeClockQualifierStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(57,
              58)
        )
    )
    namedValues = NamedValues(
        *(("error", 58),
          ("good", 57))
    )


_RestNodeClockQualifierStatus_Type.__name__ = "Integer32"
_RestNodeClockQualifierStatus_Object = MibScalar
restNodeClockQualifierStatus = _RestNodeClockQualifierStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 20),
    _RestNodeClockQualifierStatus_Type()
)
restNodeClockQualifierStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeClockQualifierStatus.setStatus("mandatory")


class _RestNodeTestGenStatus_Type(Integer32):
    """Custom type restNodeTestGenStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(36,
              57,
              58)
        )
    )
    namedValues = NamedValues(
        *(("error", 58),
          ("good", 57),
          ("idle", 36))
    )


_RestNodeTestGenStatus_Type.__name__ = "Integer32"
_RestNodeTestGenStatus_Object = MibScalar
restNodeTestGenStatus = _RestNodeTestGenStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 21),
    _RestNodeTestGenStatus_Type()
)
restNodeTestGenStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeTestGenStatus.setStatus("mandatory")


class _RestNodeTestGenType_Type(Integer32):
    """Custom type restNodeTestGenType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("local", 2),
          ("none", 1),
          ("remote", 3))
    )


_RestNodeTestGenType_Type.__name__ = "Integer32"
_RestNodeTestGenType_Object = MibScalar
restNodeTestGenType = _RestNodeTestGenType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 22),
    _RestNodeTestGenType_Type()
)
restNodeTestGenType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeTestGenType.setStatus("mandatory")
_RestNodeTestGenTDMChannel_Type = ChannelAddr
_RestNodeTestGenTDMChannel_Object = MibScalar
restNodeTestGenTDMChannel = _RestNodeTestGenTDMChannel_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 23),
    _RestNodeTestGenTDMChannel_Type()
)
restNodeTestGenTDMChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restNodeTestGenTDMChannel.setStatus("mandatory")


class _RestNodeAlarmRelayStatus_Type(Integer32):
    """Custom type restNodeAlarmRelayStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_RestNodeAlarmRelayStatus_Type.__name__ = "Integer32"
_RestNodeAlarmRelayStatus_Object = MibScalar
restNodeAlarmRelayStatus = _RestNodeAlarmRelayStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 24),
    _RestNodeAlarmRelayStatus_Type()
)
restNodeAlarmRelayStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeAlarmRelayStatus.setStatus("mandatory")


class _RestNodeAlarmRelaySubStatus_Type(Integer32):
    """Custom type restNodeAlarmRelaySubStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(40,
              48,
              106,
              107)
        )
    )
    namedValues = NamedValues(
        *(("offOff", 107),
          ("offOn", 40),
          ("onOff", 106),
          ("onOn", 48))
    )


_RestNodeAlarmRelaySubStatus_Type.__name__ = "Integer32"
_RestNodeAlarmRelaySubStatus_Object = MibScalar
restNodeAlarmRelaySubStatus = _RestNodeAlarmRelaySubStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 25),
    _RestNodeAlarmRelaySubStatus_Type()
)
restNodeAlarmRelaySubStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeAlarmRelaySubStatus.setStatus("mandatory")


class _RestNodeCpiStatus_Type(Integer32):
    """Custom type restNodeCpiStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("idle", 1),
          ("inSession", 2))
    )


_RestNodeCpiStatus_Type.__name__ = "Integer32"
_RestNodeCpiStatus_Object = MibScalar
restNodeCpiStatus = _RestNodeCpiStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 26),
    _RestNodeCpiStatus_Type()
)
restNodeCpiStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeCpiStatus.setStatus("mandatory")


class _RestNodeModemStatus_Type(Integer32):
    """Custom type restNodeModemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("idle", 1),
          ("inCpsSession", 2),
          ("inEmsSession", 3))
    )


_RestNodeModemStatus_Type.__name__ = "Integer32"
_RestNodeModemStatus_Object = MibScalar
restNodeModemStatus = _RestNodeModemStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 27),
    _RestNodeModemStatus_Type()
)
restNodeModemStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeModemStatus.setStatus("mandatory")


class _RestNodeSoftloadStatus_Type(Integer32):
    """Custom type restNodeSoftloadStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(36,
              43,
              45,
              65,
              66,
              67,
              80,
              81,
              82,
              83,
              84,
              85,
              101,
              102,
              103,
              104,
              105,
              124,
              126,
              127,
              128,
              129,
              130,
              131)
        )
    )
    namedValues = NamedValues(
        *(("cannotComWithServer", 101),
          ("cannotComWithStandby", 104),
          ("comError", 84),
          ("copyToModule", 128),
          ("copyToOnline", 131),
          ("copyToStandbyNcp", 124),
          ("crcError", 83),
          ("destSlotBusy", 129),
          ("fileNameNotExist", 67),
          ("flashWriteError", 82),
          ("idle", 36),
          ("invalidDestSlot", 130),
          ("invalidFileNameExt", 103),
          ("invalidIPaddress", 102),
          ("invalidNodeID", 85),
          ("loadingInProgress", 127),
          ("maxSessionsInProgress", 126),
          ("miscFailure", 43),
          ("notMatchModuleType", 45),
          ("outOfFlash", 81),
          ("softloading", 66),
          ("standbyCrcError", 105),
          ("success", 65),
          ("unknownModuleType", 80))
    )


_RestNodeSoftloadStatus_Type.__name__ = "Integer32"
_RestNodeSoftloadStatus_Object = MibScalar
restNodeSoftloadStatus = _RestNodeSoftloadStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 28),
    _RestNodeSoftloadStatus_Type()
)
restNodeSoftloadStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeSoftloadStatus.setStatus("mandatory")
_RestNodeSoftloadTotal_Type = Integer32
_RestNodeSoftloadTotal_Object = MibScalar
restNodeSoftloadTotal = _RestNodeSoftloadTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 29),
    _RestNodeSoftloadTotal_Type()
)
restNodeSoftloadTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeSoftloadTotal.setStatus("mandatory")
_RestNodeSoftloadSize_Type = Integer32
_RestNodeSoftloadSize_Object = MibScalar
restNodeSoftloadSize = _RestNodeSoftloadSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 30),
    _RestNodeSoftloadSize_Type()
)
restNodeSoftloadSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeSoftloadSize.setStatus("mandatory")


class _RestNodeSoftloadSoftwareType_Type(Integer32):
    """Custom type restNodeSoftloadSoftwareType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              11,
              12,
              14,
              19,
              20,
              128,
              251,
              252,
              253,
              254,
              255,
              256)
        )
    )
    namedValues = NamedValues(
        *(("ad10", 128),
          ("ad10Database", 251),
          ("asm", 9),
          ("dsm", 19),
          ("e1m", 6),
          ("e3m", 20),
          ("fsm", 11),
          ("lgm", 8),
          ("mibSchema", 252),
          ("ncp", 1),
          ("notApplicable", 256),
          ("rtm", 14),
          ("rtmAdDatabase", 253),
          ("sdm", 12),
          ("sgm", 7),
          ("stDatabase", 255),
          ("t1m", 5),
          ("tableOC", 254))
    )


_RestNodeSoftloadSoftwareType_Type.__name__ = "Integer32"
_RestNodeSoftloadSoftwareType_Object = MibScalar
restNodeSoftloadSoftwareType = _RestNodeSoftloadSoftwareType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 31),
    _RestNodeSoftloadSoftwareType_Type()
)
restNodeSoftloadSoftwareType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeSoftloadSoftwareType.setStatus("mandatory")


class _RestNodeUploadStatus_Type(OctetString):
    """Custom type restNodeUploadStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_RestNodeUploadStatus_Type.__name__ = "OctetString"
_RestNodeUploadStatus_Object = MibScalar
restNodeUploadStatus = _RestNodeUploadStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 32),
    _RestNodeUploadStatus_Type()
)
restNodeUploadStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeUploadStatus.setStatus("mandatory")


class _RestNodeUploadTotal_Type(OctetString):
    """Custom type restNodeUploadTotal based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(32, 32),
    )


_RestNodeUploadTotal_Type.__name__ = "OctetString"
_RestNodeUploadTotal_Object = MibScalar
restNodeUploadTotal = _RestNodeUploadTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 33),
    _RestNodeUploadTotal_Type()
)
restNodeUploadTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeUploadTotal.setStatus("mandatory")


class _RestNodeUploadSize_Type(OctetString):
    """Custom type restNodeUploadSize based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(32, 32),
    )


_RestNodeUploadSize_Type.__name__ = "OctetString"
_RestNodeUploadSize_Object = MibScalar
restNodeUploadSize = _RestNodeUploadSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 34),
    _RestNodeUploadSize_Type()
)
restNodeUploadSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeUploadSize.setStatus("mandatory")


class _RestNodeUploadClientID_Type(OctetString):
    """Custom type restNodeUploadClientID based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_RestNodeUploadClientID_Type.__name__ = "OctetString"
_RestNodeUploadClientID_Object = MibScalar
restNodeUploadClientID = _RestNodeUploadClientID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 35),
    _RestNodeUploadClientID_Type()
)
restNodeUploadClientID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeUploadClientID.setStatus("mandatory")
_RestNodeTotalDsmCallsPerSecond_Type = Integer32
_RestNodeTotalDsmCallsPerSecond_Object = MibScalar
restNodeTotalDsmCallsPerSecond = _RestNodeTotalDsmCallsPerSecond_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 1, 1, 36),
    _RestNodeTotalDsmCallsPerSecond_Type()
)
restNodeTotalDsmCallsPerSecond.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNodeTotalDsmCallsPerSecond.setStatus("mandatory")
_RestNestTable_Object = MibTable
restNestTable = _RestNestTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2)
)
if mibBuilder.loadTexts:
    restNestTable.setStatus("mandatory")
_RestNestEntry_Object = MibTableRow
restNestEntry = _RestNestEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1)
)
restNestEntry.setIndexNames(
    (0, "STMIB", "restNestAddr"),
)
if mibBuilder.loadTexts:
    restNestEntry.setStatus("mandatory")
_RestNestAddr_Type = NestAddr
_RestNestAddr_Object = MibTableColumn
restNestAddr = _RestNestAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 1),
    _RestNestAddr_Type()
)
restNestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestAddr.setStatus("mandatory")


class _RestNestDiagnostics_Type(Integer32):
    """Custom type restNestDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              13,
              14,
              15,
              16,
              21,
              22,
              23,
              24)
        )
    )
    namedValues = NamedValues(
        *(("clearLoopbackLxm", 23),
          ("clearLoopbackRxm", 24),
          ("insert", 4),
          ("remove", 5),
          ("reset", 3),
          ("resetLeftCircuit", 14),
          ("resetRightCircuit", 13),
          ("setLoopbackLxm", 21),
          ("setLoopbackRxm", 22),
          ("toggleLeftCircuit", 16),
          ("toggleRightCircuit", 15))
    )


_RestNestDiagnostics_Type.__name__ = "Integer32"
_RestNestDiagnostics_Object = MibTableColumn
restNestDiagnostics = _RestNestDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 2),
    _RestNestDiagnostics_Type()
)
restNestDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restNestDiagnostics.setStatus("mandatory")


class _RestNestStatus_Type(Integer32):
    """Custom type restNestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(43,
              48,
              49)
        )
    )
    namedValues = NamedValues(
        *(("failed", 43),
          ("initializing", 49),
          ("online", 48))
    )


_RestNestStatus_Type.__name__ = "Integer32"
_RestNestStatus_Object = MibTableColumn
restNestStatus = _RestNestStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 3),
    _RestNestStatus_Type()
)
restNestStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestStatus.setStatus("mandatory")


class _RestNestCondition_Type(Integer32):
    """Custom type restNestCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(52,
              57)
        )
    )
    namedValues = NamedValues(
        *(("exception", 52),
          ("normal", 57))
    )


_RestNestCondition_Type.__name__ = "Integer32"
_RestNestCondition_Object = MibTableColumn
restNestCondition = _RestNestCondition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 4),
    _RestNestCondition_Type()
)
restNestCondition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestCondition.setStatus("mandatory")


class _RestNestNumberOfModules_Type(Integer32):
    """Custom type restNestNumberOfModules based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 17),
    )


_RestNestNumberOfModules_Type.__name__ = "Integer32"
_RestNestNumberOfModules_Object = MibTableColumn
restNestNumberOfModules = _RestNestNumberOfModules_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 5),
    _RestNestNumberOfModules_Type()
)
restNestNumberOfModules.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestNumberOfModules.setStatus("mandatory")


class _RestNestPowerStatus_Type(Integer32):
    """Custom type restNestPowerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(43,
              57)
        )
    )
    namedValues = NamedValues(
        *(("fail", 43),
          ("good", 57))
    )


_RestNestPowerStatus_Type.__name__ = "Integer32"
_RestNestPowerStatus_Object = MibTableColumn
restNestPowerStatus = _RestNestPowerStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 6),
    _RestNestPowerStatus_Type()
)
restNestPowerStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestPowerStatus.setStatus("mandatory")


class _RestNestFanStatus_Type(Integer32):
    """Custom type restNestFanStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(43,
              57)
        )
    )
    namedValues = NamedValues(
        *(("fail", 43),
          ("good", 57))
    )


_RestNestFanStatus_Type.__name__ = "Integer32"
_RestNestFanStatus_Object = MibTableColumn
restNestFanStatus = _RestNestFanStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 7),
    _RestNestFanStatus_Type()
)
restNestFanStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestFanStatus.setStatus("mandatory")


class _RestNestTemperature_Type(Integer32):
    """Custom type restNestTemperature based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("tooHigh", 2))
    )


_RestNestTemperature_Type.__name__ = "Integer32"
_RestNestTemperature_Object = MibTableColumn
restNestTemperature = _RestNestTemperature_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 8),
    _RestNestTemperature_Type()
)
restNestTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestTemperature.setStatus("mandatory")


class _RestNestClockReference1_Type(Integer32):
    """Custom type restNestClockReference1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RestNestClockReference1_Type.__name__ = "Integer32"
_RestNestClockReference1_Object = MibTableColumn
restNestClockReference1 = _RestNestClockReference1_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 9),
    _RestNestClockReference1_Type()
)
restNestClockReference1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestClockReference1.setStatus("mandatory")


class _RestNestClockReference2_Type(Integer32):
    """Custom type restNestClockReference2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RestNestClockReference2_Type.__name__ = "Integer32"
_RestNestClockReference2_Object = MibTableColumn
restNestClockReference2 = _RestNestClockReference2_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 10),
    _RestNestClockReference2_Type()
)
restNestClockReference2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestClockReference2.setStatus("mandatory")


class _RestNestBusLoopbackStatus_Type(Integer32):
    """Custom type restNestBusLoopbackStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              33,
              34)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("leftEnable", 33),
          ("rightEnable", 34))
    )


_RestNestBusLoopbackStatus_Type.__name__ = "Integer32"
_RestNestBusLoopbackStatus_Object = MibTableColumn
restNestBusLoopbackStatus = _RestNestBusLoopbackStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 11),
    _RestNestBusLoopbackStatus_Type()
)
restNestBusLoopbackStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestBusLoopbackStatus.setStatus("mandatory")


class _RestNestSlotPresence_Type(OctetString):
    """Custom type restNestSlotPresence based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestNestSlotPresence_Type.__name__ = "OctetString"
_RestNestSlotPresence_Object = MibTableColumn
restNestSlotPresence = _RestNestSlotPresence_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 12),
    _RestNestSlotPresence_Type()
)
restNestSlotPresence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestSlotPresence.setStatus("mandatory")


class _RestNestActiveRight_Type(Integer32):
    """Custom type restNestActiveRight based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("circuit1", 1),
          ("circuit2", 2),
          ("noRxm", 3))
    )


_RestNestActiveRight_Type.__name__ = "Integer32"
_RestNestActiveRight_Object = MibTableColumn
restNestActiveRight = _RestNestActiveRight_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 13),
    _RestNestActiveRight_Type()
)
restNestActiveRight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestActiveRight.setStatus("mandatory")


class _RestNestActiveLeft_Type(Integer32):
    """Custom type restNestActiveLeft based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("circuit1", 1),
          ("circuit2", 2),
          ("noLxm", 3))
    )


_RestNestActiveLeft_Type.__name__ = "Integer32"
_RestNestActiveLeft_Object = MibTableColumn
restNestActiveLeft = _RestNestActiveLeft_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 14),
    _RestNestActiveLeft_Type()
)
restNestActiveLeft.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestActiveLeft.setStatus("mandatory")


class _RestNestRxmCkt1Status_Type(Integer32):
    """Custom type restNestRxmCkt1Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("noRxm", 3),
          ("pass", 1))
    )


_RestNestRxmCkt1Status_Type.__name__ = "Integer32"
_RestNestRxmCkt1Status_Object = MibTableColumn
restNestRxmCkt1Status = _RestNestRxmCkt1Status_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 15),
    _RestNestRxmCkt1Status_Type()
)
restNestRxmCkt1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestRxmCkt1Status.setStatus("mandatory")


class _RestNestRxmCkt2Status_Type(Integer32):
    """Custom type restNestRxmCkt2Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("noRxm", 3),
          ("pass", 1))
    )


_RestNestRxmCkt2Status_Type.__name__ = "Integer32"
_RestNestRxmCkt2Status_Object = MibTableColumn
restNestRxmCkt2Status = _RestNestRxmCkt2Status_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 16),
    _RestNestRxmCkt2Status_Type()
)
restNestRxmCkt2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestRxmCkt2Status.setStatus("mandatory")


class _RestNestLxmCkt1Status_Type(Integer32):
    """Custom type restNestLxmCkt1Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("noLxm", 3),
          ("pass", 1))
    )


_RestNestLxmCkt1Status_Type.__name__ = "Integer32"
_RestNestLxmCkt1Status_Object = MibTableColumn
restNestLxmCkt1Status = _RestNestLxmCkt1Status_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 17),
    _RestNestLxmCkt1Status_Type()
)
restNestLxmCkt1Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestLxmCkt1Status.setStatus("mandatory")


class _RestNestLxmCkt2Status_Type(Integer32):
    """Custom type restNestLxmCkt2Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("noLxm", 3),
          ("pass", 1))
    )


_RestNestLxmCkt2Status_Type.__name__ = "Integer32"
_RestNestLxmCkt2Status_Object = MibTableColumn
restNestLxmCkt2Status = _RestNestLxmCkt2Status_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 2, 1, 18),
    _RestNestLxmCkt2Status_Type()
)
restNestLxmCkt2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNestLxmCkt2Status.setStatus("mandatory")
_RestSlotTable_Object = MibTable
restSlotTable = _RestSlotTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3)
)
if mibBuilder.loadTexts:
    restSlotTable.setStatus("mandatory")
_RestSlotEntry_Object = MibTableRow
restSlotEntry = _RestSlotEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1)
)
restSlotEntry.setIndexNames(
    (0, "STMIB", "restSlotAddr"),
)
if mibBuilder.loadTexts:
    restSlotEntry.setStatus("mandatory")
_RestSlotAddr_Type = SlotAddr
_RestSlotAddr_Object = MibTableColumn
restSlotAddr = _RestSlotAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 1),
    _RestSlotAddr_Type()
)
restSlotAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotAddr.setStatus("mandatory")


class _RestSlotModuleDiagnostics_Type(Integer32):
    """Custom type restSlotModuleDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              7)
        )
    )
    namedValues = NamedValues(
        *(("insert", 4),
          ("remove", 5),
          ("reset", 3),
          ("update", 7))
    )


_RestSlotModuleDiagnostics_Type.__name__ = "Integer32"
_RestSlotModuleDiagnostics_Object = MibTableColumn
restSlotModuleDiagnostics = _RestSlotModuleDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 2),
    _RestSlotModuleDiagnostics_Type()
)
restSlotModuleDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restSlotModuleDiagnostics.setStatus("mandatory")


class _RestSlotModuleStatus_Type(Integer32):
    """Custom type restSlotModuleStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              43,
              44,
              47,
              53,
              54,
              55)
        )
    )
    namedValues = NamedValues(
        *(("active", 44),
          ("busDisable", 53),
          ("fail", 43),
          ("initializing", 55),
          ("loading", 54),
          ("removed", 5),
          ("standby", 47))
    )


_RestSlotModuleStatus_Type.__name__ = "Integer32"
_RestSlotModuleStatus_Object = MibTableColumn
restSlotModuleStatus = _RestSlotModuleStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 3),
    _RestSlotModuleStatus_Type()
)
restSlotModuleStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotModuleStatus.setStatus("mandatory")


class _RestSlotModuleFailureType_Type(Integer32):
    """Custom type restSlotModuleFailureType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("errorMib", 4),
          ("module", 1),
          ("noMib", 3),
          ("noRTS", 5),
          ("notApplicable", 255),
          ("port", 2))
    )


_RestSlotModuleFailureType_Type.__name__ = "Integer32"
_RestSlotModuleFailureType_Object = MibTableColumn
restSlotModuleFailureType = _RestSlotModuleFailureType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 4),
    _RestSlotModuleFailureType_Type()
)
restSlotModuleFailureType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotModuleFailureType.setStatus("mandatory")


class _RestSlotModuleCondition_Type(Integer32):
    """Custom type restSlotModuleCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(52,
              57)
        )
    )
    namedValues = NamedValues(
        *(("exception", 52),
          ("normal", 57))
    )


_RestSlotModuleCondition_Type.__name__ = "Integer32"
_RestSlotModuleCondition_Object = MibTableColumn
restSlotModuleCondition = _RestSlotModuleCondition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 5),
    _RestSlotModuleCondition_Type()
)
restSlotModuleCondition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotModuleCondition.setStatus("mandatory")


class _RestSlotSWModuleType_Type(Integer32):
    """Custom type restSlotSWModuleType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11,
              12,
              13,
              14,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("asm", 9),
          ("dsm", 19),
          ("e1m", 6),
          ("e3m", 20),
          ("fsm", 11),
          ("lgm", 8),
          ("lxm", 3),
          ("ncp", 1),
          ("rtm", 14),
          ("rxm", 4),
          ("sdm", 12),
          ("sgm", 7),
          ("sgmAg", 13),
          ("t1m", 5))
    )


_RestSlotSWModuleType_Type.__name__ = "Integer32"
_RestSlotSWModuleType_Object = MibTableColumn
restSlotSWModuleType = _RestSlotSWModuleType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 6),
    _RestSlotSWModuleType_Type()
)
restSlotSWModuleType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotSWModuleType.setStatus("mandatory")


class _RestSlotSWModuleSubType_Type(Integer32):
    """Custom type restSlotSWModuleSubType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RestSlotSWModuleSubType_Type.__name__ = "Integer32"
_RestSlotSWModuleSubType_Object = MibTableColumn
restSlotSWModuleSubType = _RestSlotSWModuleSubType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 7),
    _RestSlotSWModuleSubType_Type()
)
restSlotSWModuleSubType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotSWModuleSubType.setStatus("mandatory")
_RestSlotModuleIDFormat_Type = Integer32
_RestSlotModuleIDFormat_Object = MibTableColumn
restSlotModuleIDFormat = _RestSlotModuleIDFormat_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 8),
    _RestSlotModuleIDFormat_Type()
)
restSlotModuleIDFormat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotModuleIDFormat.setStatus("mandatory")


class _RestSlotHWModuleType_Type(Integer32):
    """Custom type restSlotHWModuleType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11,
              12,
              14,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("asm", 9),
          ("dsm", 19),
          ("e1m", 6),
          ("e3m", 20),
          ("fsm", 11),
          ("lgm", 8),
          ("lxm", 3),
          ("ncp", 1),
          ("rtm", 14),
          ("rxm", 4),
          ("sdm", 12),
          ("sgm", 7),
          ("t1m", 5))
    )


_RestSlotHWModuleType_Type.__name__ = "Integer32"
_RestSlotHWModuleType_Object = MibTableColumn
restSlotHWModuleType = _RestSlotHWModuleType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 9),
    _RestSlotHWModuleType_Type()
)
restSlotHWModuleType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotHWModuleType.setStatus("mandatory")


class _RestSlotHWModuleSubType_Type(Integer32):
    """Custom type restSlotHWModuleSubType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RestSlotHWModuleSubType_Type.__name__ = "Integer32"
_RestSlotHWModuleSubType_Object = MibTableColumn
restSlotHWModuleSubType = _RestSlotHWModuleSubType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 10),
    _RestSlotHWModuleSubType_Type()
)
restSlotHWModuleSubType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotHWModuleSubType.setStatus("mandatory")


class _RestSlotModuleAssemblyNum_Type(DisplayString):
    """Custom type restSlotModuleAssemblyNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_RestSlotModuleAssemblyNum_Type.__name__ = "DisplayString"
_RestSlotModuleAssemblyNum_Object = MibTableColumn
restSlotModuleAssemblyNum = _RestSlotModuleAssemblyNum_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 11),
    _RestSlotModuleAssemblyNum_Type()
)
restSlotModuleAssemblyNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotModuleAssemblyNum.setStatus("mandatory")


class _RestSlotModuleRevision_Type(DisplayString):
    """Custom type restSlotModuleRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_RestSlotModuleRevision_Type.__name__ = "DisplayString"
_RestSlotModuleRevision_Object = MibTableColumn
restSlotModuleRevision = _RestSlotModuleRevision_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 12),
    _RestSlotModuleRevision_Type()
)
restSlotModuleRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotModuleRevision.setStatus("mandatory")


class _RestSlotModuleSerialNum_Type(DisplayString):
    """Custom type restSlotModuleSerialNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_RestSlotModuleSerialNum_Type.__name__ = "DisplayString"
_RestSlotModuleSerialNum_Object = MibTableColumn
restSlotModuleSerialNum = _RestSlotModuleSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 13),
    _RestSlotModuleSerialNum_Type()
)
restSlotModuleSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotModuleSerialNum.setStatus("mandatory")


class _RestSlotModuleDateMade_Type(DisplayString):
    """Custom type restSlotModuleDateMade based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_RestSlotModuleDateMade_Type.__name__ = "DisplayString"
_RestSlotModuleDateMade_Object = MibTableColumn
restSlotModuleDateMade = _RestSlotModuleDateMade_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 14),
    _RestSlotModuleDateMade_Type()
)
restSlotModuleDateMade.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotModuleDateMade.setStatus("mandatory")
_RestSlotActiveRedundantSlot_Type = SlotAddr
_RestSlotActiveRedundantSlot_Object = MibTableColumn
restSlotActiveRedundantSlot = _RestSlotActiveRedundantSlot_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 15),
    _RestSlotActiveRedundantSlot_Type()
)
restSlotActiveRedundantSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotActiveRedundantSlot.setStatus("mandatory")


class _RestSlotModuleSWRevision_Type(DisplayString):
    """Custom type restSlotModuleSWRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_RestSlotModuleSWRevision_Type.__name__ = "DisplayString"
_RestSlotModuleSWRevision_Object = MibTableColumn
restSlotModuleSWRevision = _RestSlotModuleSWRevision_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 16),
    _RestSlotModuleSWRevision_Type()
)
restSlotModuleSWRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotModuleSWRevision.setStatus("mandatory")


class _RestSlotStartupDiagResults_Type(OctetString):
    """Custom type restSlotStartupDiagResults based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 8),
    )


_RestSlotStartupDiagResults_Type.__name__ = "OctetString"
_RestSlotStartupDiagResults_Object = MibTableColumn
restSlotStartupDiagResults = _RestSlotStartupDiagResults_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 17),
    _RestSlotStartupDiagResults_Type()
)
restSlotStartupDiagResults.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotStartupDiagResults.setStatus("mandatory")


class _RestSlotBGDiagResults_Type(OctetString):
    """Custom type restSlotBGDiagResults based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 8),
    )


_RestSlotBGDiagResults_Type.__name__ = "OctetString"
_RestSlotBGDiagResults_Object = MibTableColumn
restSlotBGDiagResults = _RestSlotBGDiagResults_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 18),
    _RestSlotBGDiagResults_Type()
)
restSlotBGDiagResults.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotBGDiagResults.setStatus("mandatory")
_RestSlotNumActivePorts_Type = Integer32
_RestSlotNumActivePorts_Object = MibTableColumn
restSlotNumActivePorts = _RestSlotNumActivePorts_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 19),
    _RestSlotNumActivePorts_Type()
)
restSlotNumActivePorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotNumActivePorts.setStatus("mandatory")
_RestSlotNumNormalPorts_Type = Integer32
_RestSlotNumNormalPorts_Object = MibTableColumn
restSlotNumNormalPorts = _RestSlotNumNormalPorts_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 3, 1, 20),
    _RestSlotNumNormalPorts_Type()
)
restSlotNumNormalPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSlotNumNormalPorts.setStatus("mandatory")
_RestModule_ObjectIdentity = ObjectIdentity
restModule = _RestModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4)
)
_RestNcpTable_Object = MibTable
restNcpTable = _RestNcpTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 1)
)
if mibBuilder.loadTexts:
    restNcpTable.setStatus("mandatory")
_RestNcpEntry_Object = MibTableRow
restNcpEntry = _RestNcpEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 1, 1)
)
restNcpEntry.setIndexNames(
    (0, "STMIB", "restNcpAddr"),
)
if mibBuilder.loadTexts:
    restNcpEntry.setStatus("mandatory")
_RestNcpAddr_Type = SlotAddr
_RestNcpAddr_Object = MibTableColumn
restNcpAddr = _RestNcpAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 1, 1, 1),
    _RestNcpAddr_Type()
)
restNcpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpAddr.setStatus("mandatory")


class _RestNcpBootPromRevision_Type(DisplayString):
    """Custom type restNcpBootPromRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_RestNcpBootPromRevision_Type.__name__ = "DisplayString"
_RestNcpBootPromRevision_Object = MibTableColumn
restNcpBootPromRevision = _RestNcpBootPromRevision_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 1, 1, 2),
    _RestNcpBootPromRevision_Type()
)
restNcpBootPromRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpBootPromRevision.setStatus("mandatory")


class _RestNcpMacAddr_Type(DisplayString):
    """Custom type restNcpMacAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 17),
    )


_RestNcpMacAddr_Type.__name__ = "DisplayString"
_RestNcpMacAddr_Object = MibTableColumn
restNcpMacAddr = _RestNcpMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 1, 1, 3),
    _RestNcpMacAddr_Type()
)
restNcpMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpMacAddr.setStatus("mandatory")


class _RestNcpFlashObjectVersions_Type(OctetString):
    """Custom type restNcpFlashObjectVersions based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 120),
    )


_RestNcpFlashObjectVersions_Type.__name__ = "OctetString"
_RestNcpFlashObjectVersions_Object = MibTableColumn
restNcpFlashObjectVersions = _RestNcpFlashObjectVersions_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 1, 1, 4),
    _RestNcpFlashObjectVersions_Type()
)
restNcpFlashObjectVersions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpFlashObjectVersions.setStatus("deprecated")
_RestNcpFlashTable_Object = MibTable
restNcpFlashTable = _RestNcpFlashTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2)
)
if mibBuilder.loadTexts:
    restNcpFlashTable.setStatus("mandatory")
_RestNcpFlashEntry_Object = MibTableRow
restNcpFlashEntry = _RestNcpFlashEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1)
)
restNcpFlashEntry.setIndexNames(
    (0, "STMIB", "restNcpFlashAddr"),
    (0, "STMIB", "restNcpFlashIndex"),
)
if mibBuilder.loadTexts:
    restNcpFlashEntry.setStatus("mandatory")
_RestNcpFlashAddr_Type = SlotAddr
_RestNcpFlashAddr_Object = MibTableColumn
restNcpFlashAddr = _RestNcpFlashAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 1),
    _RestNcpFlashAddr_Type()
)
restNcpFlashAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpFlashAddr.setStatus("mandatory")


class _RestNcpFlashIndex_Type(Integer32):
    """Custom type restNcpFlashIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RestNcpFlashIndex_Type.__name__ = "Integer32"
_RestNcpFlashIndex_Object = MibTableColumn
restNcpFlashIndex = _RestNcpFlashIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 2),
    _RestNcpFlashIndex_Type()
)
restNcpFlashIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpFlashIndex.setStatus("mandatory")


class _RestNcpFlashModuleType_Type(Integer32):
    """Custom type restNcpFlashModuleType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              11,
              12,
              14,
              19,
              20,
              252,
              254)
        )
    )
    namedValues = NamedValues(
        *(("asm", 9),
          ("dsm", 19),
          ("e1m", 6),
          ("e3m", 20),
          ("fsm", 11),
          ("lgm", 8),
          ("mibSchema", 252),
          ("ncp", 1),
          ("rtm", 14),
          ("sdm", 12),
          ("sgm", 7),
          ("t1m", 5),
          ("tableOfContents", 254))
    )


_RestNcpFlashModuleType_Type.__name__ = "Integer32"
_RestNcpFlashModuleType_Object = MibTableColumn
restNcpFlashModuleType = _RestNcpFlashModuleType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 3),
    _RestNcpFlashModuleType_Type()
)
restNcpFlashModuleType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpFlashModuleType.setStatus("mandatory")


class _RestNcpFlashRecoveryIndicator_Type(Integer32):
    """Custom type restNcpFlashRecoveryIndicator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("recovery", 2))
    )


_RestNcpFlashRecoveryIndicator_Type.__name__ = "Integer32"
_RestNcpFlashRecoveryIndicator_Object = MibTableColumn
restNcpFlashRecoveryIndicator = _RestNcpFlashRecoveryIndicator_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 4),
    _RestNcpFlashRecoveryIndicator_Type()
)
restNcpFlashRecoveryIndicator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpFlashRecoveryIndicator.setStatus("mandatory")


class _RestNcpFlashCompressIndicator_Type(Integer32):
    """Custom type restNcpFlashCompressIndicator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("compressed", 1),
          ("uncompressed", 2))
    )


_RestNcpFlashCompressIndicator_Type.__name__ = "Integer32"
_RestNcpFlashCompressIndicator_Object = MibTableColumn
restNcpFlashCompressIndicator = _RestNcpFlashCompressIndicator_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 5),
    _RestNcpFlashCompressIndicator_Type()
)
restNcpFlashCompressIndicator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpFlashCompressIndicator.setStatus("mandatory")


class _RestNcpFlashFileVersionNumber_Type(DisplayString):
    """Custom type restNcpFlashFileVersionNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_RestNcpFlashFileVersionNumber_Type.__name__ = "DisplayString"
_RestNcpFlashFileVersionNumber_Object = MibTableColumn
restNcpFlashFileVersionNumber = _RestNcpFlashFileVersionNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 6),
    _RestNcpFlashFileVersionNumber_Type()
)
restNcpFlashFileVersionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpFlashFileVersionNumber.setStatus("mandatory")


class _RestNcpFlashFileSize_Type(Integer32):
    """Custom type restNcpFlashFileSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_RestNcpFlashFileSize_Type.__name__ = "Integer32"
_RestNcpFlashFileSize_Object = MibTableColumn
restNcpFlashFileSize = _RestNcpFlashFileSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 7),
    _RestNcpFlashFileSize_Type()
)
restNcpFlashFileSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpFlashFileSize.setStatus("mandatory")


class _RestNcpFlashFileStoredCrc_Type(Integer32):
    """Custom type restNcpFlashFileStoredCrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RestNcpFlashFileStoredCrc_Type.__name__ = "Integer32"
_RestNcpFlashFileStoredCrc_Object = MibTableColumn
restNcpFlashFileStoredCrc = _RestNcpFlashFileStoredCrc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 8),
    _RestNcpFlashFileStoredCrc_Type()
)
restNcpFlashFileStoredCrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpFlashFileStoredCrc.setStatus("mandatory")


class _RestNcpFlashFileCrcCheck_Type(Integer32):
    """Custom type restNcpFlashFileCrcCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("notApplicable", 255),
          ("pass", 1))
    )


_RestNcpFlashFileCrcCheck_Type.__name__ = "Integer32"
_RestNcpFlashFileCrcCheck_Object = MibTableColumn
restNcpFlashFileCrcCheck = _RestNcpFlashFileCrcCheck_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 2, 1, 9),
    _RestNcpFlashFileCrcCheck_Type()
)
restNcpFlashFileCrcCheck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restNcpFlashFileCrcCheck.setStatus("mandatory")
_RestFsmTable_Object = MibTable
restFsmTable = _RestFsmTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6)
)
if mibBuilder.loadTexts:
    restFsmTable.setStatus("mandatory")
_RestFsmEntry_Object = MibTableRow
restFsmEntry = _RestFsmEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1)
)
restFsmEntry.setIndexNames(
    (0, "STMIB", "restFsmAddr"),
)
if mibBuilder.loadTexts:
    restFsmEntry.setStatus("mandatory")
_RestFsmAddr_Type = SlotAddr
_RestFsmAddr_Object = MibTableColumn
restFsmAddr = _RestFsmAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 1),
    _RestFsmAddr_Type()
)
restFsmAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmAddr.setStatus("mandatory")
_RestFsmBypassBandwidth_Type = Integer32
_RestFsmBypassBandwidth_Object = MibTableColumn
restFsmBypassBandwidth = _RestFsmBypassBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 2),
    _RestFsmBypassBandwidth_Type()
)
restFsmBypassBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmBypassBandwidth.setStatus("mandatory")
_RestFsmSourceBandwidth_Type = Integer32
_RestFsmSourceBandwidth_Object = MibTableColumn
restFsmSourceBandwidth = _RestFsmSourceBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 3),
    _RestFsmSourceBandwidth_Type()
)
restFsmSourceBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmSourceBandwidth.setStatus("mandatory")
_RestFsmBandwidthAvail_Type = Integer32
_RestFsmBandwidthAvail_Object = MibTableColumn
restFsmBandwidthAvail = _RestFsmBandwidthAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 4),
    _RestFsmBandwidthAvail_Type()
)
restFsmBandwidthAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmBandwidthAvail.setStatus("mandatory")
_RestFsmPortSpeedAvail_Type = Integer32
_RestFsmPortSpeedAvail_Object = MibTableColumn
restFsmPortSpeedAvail = _RestFsmPortSpeedAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 5),
    _RestFsmPortSpeedAvail_Type()
)
restFsmPortSpeedAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmPortSpeedAvail.setStatus("mandatory")
_RestFsmDlciTotal_Type = Integer32
_RestFsmDlciTotal_Object = MibTableColumn
restFsmDlciTotal = _RestFsmDlciTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 6),
    _RestFsmDlciTotal_Type()
)
restFsmDlciTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmDlciTotal.setStatus("mandatory")
_RestFsmDlciAvail_Type = Integer32
_RestFsmDlciAvail_Object = MibTableColumn
restFsmDlciAvail = _RestFsmDlciAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 7),
    _RestFsmDlciAvail_Type()
)
restFsmDlciAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmDlciAvail.setStatus("mandatory")
_RestFsmDlciConfig_Type = Integer32
_RestFsmDlciConfig_Object = MibTableColumn
restFsmDlciConfig = _RestFsmDlciConfig_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 8),
    _RestFsmDlciConfig_Type()
)
restFsmDlciConfig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmDlciConfig.setStatus("mandatory")
_RestFsmBypChanTotal_Type = Integer32
_RestFsmBypChanTotal_Object = MibTableColumn
restFsmBypChanTotal = _RestFsmBypChanTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 9),
    _RestFsmBypChanTotal_Type()
)
restFsmBypChanTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmBypChanTotal.setStatus("mandatory")
_RestFsmBypChanAvail_Type = Integer32
_RestFsmBypChanAvail_Object = MibTableColumn
restFsmBypChanAvail = _RestFsmBypChanAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 10),
    _RestFsmBypChanAvail_Type()
)
restFsmBypChanAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmBypChanAvail.setStatus("mandatory")
_RestFsmCirTotal_Type = Integer32
_RestFsmCirTotal_Object = MibTableColumn
restFsmCirTotal = _RestFsmCirTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 11),
    _RestFsmCirTotal_Type()
)
restFsmCirTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmCirTotal.setStatus("mandatory")
_RestFsmCirAvail_Type = Integer32
_RestFsmCirAvail_Object = MibTableColumn
restFsmCirAvail = _RestFsmCirAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 12),
    _RestFsmCirAvail_Type()
)
restFsmCirAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmCirAvail.setStatus("mandatory")
_RestFsmVciCtrlBlkTotal_Type = Integer32
_RestFsmVciCtrlBlkTotal_Object = MibTableColumn
restFsmVciCtrlBlkTotal = _RestFsmVciCtrlBlkTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 13),
    _RestFsmVciCtrlBlkTotal_Type()
)
restFsmVciCtrlBlkTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmVciCtrlBlkTotal.setStatus("mandatory")
_RestFsmVciCtrlBlkAvail_Type = Integer32
_RestFsmVciCtrlBlkAvail_Object = MibTableColumn
restFsmVciCtrlBlkAvail = _RestFsmVciCtrlBlkAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 14),
    _RestFsmVciCtrlBlkAvail_Type()
)
restFsmVciCtrlBlkAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmVciCtrlBlkAvail.setStatus("mandatory")
_RestFsmTotalBuffers_Type = Integer32
_RestFsmTotalBuffers_Object = MibTableColumn
restFsmTotalBuffers = _RestFsmTotalBuffers_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 15),
    _RestFsmTotalBuffers_Type()
)
restFsmTotalBuffers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmTotalBuffers.setStatus("mandatory")
_RestFsmBuffersAvail_Type = Integer32
_RestFsmBuffersAvail_Object = MibTableColumn
restFsmBuffersAvail = _RestFsmBuffersAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 16),
    _RestFsmBuffersAvail_Type()
)
restFsmBuffersAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmBuffersAvail.setStatus("mandatory")


class _RestFsmCcfSupportIndicator_Type(Integer32):
    """Custom type restFsmCcfSupportIndicator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notSupported", 2),
          ("supported", 1))
    )


_RestFsmCcfSupportIndicator_Type.__name__ = "Integer32"
_RestFsmCcfSupportIndicator_Object = MibTableColumn
restFsmCcfSupportIndicator = _RestFsmCcfSupportIndicator_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 6, 1, 17),
    _RestFsmCcfSupportIndicator_Type()
)
restFsmCcfSupportIndicator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restFsmCcfSupportIndicator.setStatus("mandatory")
_RestSgmAgTable_Object = MibTable
restSgmAgTable = _RestSgmAgTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7)
)
if mibBuilder.loadTexts:
    restSgmAgTable.setStatus("mandatory")
_RestSgmAgEntry_Object = MibTableRow
restSgmAgEntry = _RestSgmAgEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1)
)
restSgmAgEntry.setIndexNames(
    (0, "STMIB", "restSgmAgAddr"),
)
if mibBuilder.loadTexts:
    restSgmAgEntry.setStatus("mandatory")
_RestSgmAgAddr_Type = SlotAddr
_RestSgmAgAddr_Object = MibTableColumn
restSgmAgAddr = _RestSgmAgAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 1),
    _RestSgmAgAddr_Type()
)
restSgmAgAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSgmAgAddr.setStatus("mandatory")
_RestSgmAgmPortAvail_Type = Integer32
_RestSgmAgmPortAvail_Object = MibTableColumn
restSgmAgmPortAvail = _RestSgmAgmPortAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 2),
    _RestSgmAgmPortAvail_Type()
)
restSgmAgmPortAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSgmAgmPortAvail.setStatus("mandatory")
_RestSgmAgmPortTotal_Type = Integer32
_RestSgmAgmPortTotal_Object = MibTableColumn
restSgmAgmPortTotal = _RestSgmAgmPortTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 3),
    _RestSgmAgmPortTotal_Type()
)
restSgmAgmPortTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSgmAgmPortTotal.setStatus("mandatory")
_RestSgmAgSafAvail_Type = Integer32
_RestSgmAgSafAvail_Object = MibTableColumn
restSgmAgSafAvail = _RestSgmAgSafAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 4),
    _RestSgmAgSafAvail_Type()
)
restSgmAgSafAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSgmAgSafAvail.setStatus("mandatory")
_RestSgmAgSafTotal_Type = Integer32
_RestSgmAgSafTotal_Object = MibTableColumn
restSgmAgSafTotal = _RestSgmAgSafTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 5),
    _RestSgmAgSafTotal_Type()
)
restSgmAgSafTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSgmAgSafTotal.setStatus("mandatory")
_RestSgmAgSgmScfAvail_Type = Integer32
_RestSgmAgSgmScfAvail_Object = MibTableColumn
restSgmAgSgmScfAvail = _RestSgmAgSgmScfAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 6),
    _RestSgmAgSgmScfAvail_Type()
)
restSgmAgSgmScfAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSgmAgSgmScfAvail.setStatus("mandatory")
_RestSgmAgSgmScfTotal_Type = Integer32
_RestSgmAgSgmScfTotal_Object = MibTableColumn
restSgmAgSgmScfTotal = _RestSgmAgSgmScfTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 7),
    _RestSgmAgSgmScfTotal_Type()
)
restSgmAgSgmScfTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSgmAgSgmScfTotal.setStatus("mandatory")
_RestSgmAgAgmScfAvail_Type = Integer32
_RestSgmAgAgmScfAvail_Object = MibTableColumn
restSgmAgAgmScfAvail = _RestSgmAgAgmScfAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 8),
    _RestSgmAgAgmScfAvail_Type()
)
restSgmAgAgmScfAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSgmAgAgmScfAvail.setStatus("mandatory")
_RestSgmAgAgmScfTotal_Type = Integer32
_RestSgmAgAgmScfTotal_Object = MibTableColumn
restSgmAgAgmScfTotal = _RestSgmAgAgmScfTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 9),
    _RestSgmAgAgmScfTotal_Type()
)
restSgmAgAgmScfTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSgmAgAgmScfTotal.setStatus("mandatory")
_RestSgmAgAgmCcfAvail_Type = Integer32
_RestSgmAgAgmCcfAvail_Object = MibTableColumn
restSgmAgAgmCcfAvail = _RestSgmAgAgmCcfAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 10),
    _RestSgmAgAgmCcfAvail_Type()
)
restSgmAgAgmCcfAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSgmAgAgmCcfAvail.setStatus("mandatory")
_RestSgmAgAgmCcfTotal_Type = Integer32
_RestSgmAgAgmCcfTotal_Object = MibTableColumn
restSgmAgAgmCcfTotal = _RestSgmAgAgmCcfTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 11),
    _RestSgmAgAgmCcfTotal_Type()
)
restSgmAgAgmCcfTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSgmAgAgmCcfTotal.setStatus("mandatory")


class _RestSgmAgAgmPortCapacity_Type(OctetString):
    """Custom type restSgmAgAgmPortCapacity based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RestSgmAgAgmPortCapacity_Type.__name__ = "OctetString"
_RestSgmAgAgmPortCapacity_Object = MibTableColumn
restSgmAgAgmPortCapacity = _RestSgmAgAgmPortCapacity_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 7, 1, 12),
    _RestSgmAgAgmPortCapacity_Type()
)
restSgmAgAgmPortCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSgmAgAgmPortCapacity.setStatus("mandatory")
_RestAsm_ObjectIdentity = ObjectIdentity
restAsm = _RestAsm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8)
)
_RestAsmModuleTable_Object = MibTable
restAsmModuleTable = _RestAsmModuleTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1)
)
if mibBuilder.loadTexts:
    restAsmModuleTable.setStatus("mandatory")
_RestAsmModuleEntry_Object = MibTableRow
restAsmModuleEntry = _RestAsmModuleEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1)
)
restAsmModuleEntry.setIndexNames(
    (0, "STMIB", "restAsmModuleAddr"),
)
if mibBuilder.loadTexts:
    restAsmModuleEntry.setStatus("mandatory")
_RestAsmModuleAddr_Type = SlotAddr
_RestAsmModuleAddr_Object = MibTableColumn
restAsmModuleAddr = _RestAsmModuleAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 1),
    _RestAsmModuleAddr_Type()
)
restAsmModuleAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModuleAddr.setStatus("mandatory")


class _RestAsmModuleMaxCelp_Type(Integer32):
    """Custom type restAsmModuleMaxCelp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RestAsmModuleMaxCelp_Type.__name__ = "Integer32"
_RestAsmModuleMaxCelp_Object = MibTableColumn
restAsmModuleMaxCelp = _RestAsmModuleMaxCelp_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 2),
    _RestAsmModuleMaxCelp_Type()
)
restAsmModuleMaxCelp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModuleMaxCelp.setStatus("deprecated")


class _RestAsmModuleNumCelpAvail_Type(Integer32):
    """Custom type restAsmModuleNumCelpAvail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RestAsmModuleNumCelpAvail_Type.__name__ = "Integer32"
_RestAsmModuleNumCelpAvail_Object = MibTableColumn
restAsmModuleNumCelpAvail = _RestAsmModuleNumCelpAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 3),
    _RestAsmModuleNumCelpAvail_Type()
)
restAsmModuleNumCelpAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModuleNumCelpAvail.setStatus("deprecated")


class _RestAsmModuleTotalEngines_Type(Integer32):
    """Custom type restAsmModuleTotalEngines based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RestAsmModuleTotalEngines_Type.__name__ = "Integer32"
_RestAsmModuleTotalEngines_Object = MibTableColumn
restAsmModuleTotalEngines = _RestAsmModuleTotalEngines_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 4),
    _RestAsmModuleTotalEngines_Type()
)
restAsmModuleTotalEngines.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModuleTotalEngines.setStatus("mandatory")


class _RestAsmModuleAvailEngines_Type(Integer32):
    """Custom type restAsmModuleAvailEngines based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RestAsmModuleAvailEngines_Type.__name__ = "Integer32"
_RestAsmModuleAvailEngines_Object = MibTableColumn
restAsmModuleAvailEngines = _RestAsmModuleAvailEngines_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 5),
    _RestAsmModuleAvailEngines_Type()
)
restAsmModuleAvailEngines.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModuleAvailEngines.setStatus("mandatory")


class _RestAsmModuleTotalSafScfs_Type(Integer32):
    """Custom type restAsmModuleTotalSafScfs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 448),
    )


_RestAsmModuleTotalSafScfs_Type.__name__ = "Integer32"
_RestAsmModuleTotalSafScfs_Object = MibTableColumn
restAsmModuleTotalSafScfs = _RestAsmModuleTotalSafScfs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 6),
    _RestAsmModuleTotalSafScfs_Type()
)
restAsmModuleTotalSafScfs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModuleTotalSafScfs.setStatus("mandatory")


class _RestAsmModuleAvailSafScfs_Type(Integer32):
    """Custom type restAsmModuleAvailSafScfs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 448),
    )


_RestAsmModuleAvailSafScfs_Type.__name__ = "Integer32"
_RestAsmModuleAvailSafScfs_Object = MibTableColumn
restAsmModuleAvailSafScfs = _RestAsmModuleAvailSafScfs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 1, 1, 7),
    _RestAsmModuleAvailSafScfs_Type()
)
restAsmModuleAvailSafScfs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModuleAvailSafScfs.setStatus("mandatory")
_RestAsmEngineTable_Object = MibTable
restAsmEngineTable = _RestAsmEngineTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2)
)
if mibBuilder.loadTexts:
    restAsmEngineTable.setStatus("deprecated")
_RestAsmEngineEntry_Object = MibTableRow
restAsmEngineEntry = _RestAsmEngineEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1)
)
restAsmEngineEntry.setIndexNames(
    (0, "STMIB", "restAsmEngineModuleAddr"),
    (0, "STMIB", "restAsmEngineID"),
)
if mibBuilder.loadTexts:
    restAsmEngineEntry.setStatus("deprecated")
_RestAsmEngineModuleAddr_Type = SlotAddr
_RestAsmEngineModuleAddr_Object = MibTableColumn
restAsmEngineModuleAddr = _RestAsmEngineModuleAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 1),
    _RestAsmEngineModuleAddr_Type()
)
restAsmEngineModuleAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmEngineModuleAddr.setStatus("deprecated")


class _RestAsmEngineID_Type(Integer32):
    """Custom type restAsmEngineID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RestAsmEngineID_Type.__name__ = "Integer32"
_RestAsmEngineID_Object = MibTableColumn
restAsmEngineID = _RestAsmEngineID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 2),
    _RestAsmEngineID_Type()
)
restAsmEngineID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmEngineID.setStatus("deprecated")


class _RestAsmEngineDiagnostics_Type(Integer32):
    """Custom type restAsmEngineDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("insert", 4),
          ("remove", 5),
          ("reset", 6))
    )


_RestAsmEngineDiagnostics_Type.__name__ = "Integer32"
_RestAsmEngineDiagnostics_Object = MibTableColumn
restAsmEngineDiagnostics = _RestAsmEngineDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 3),
    _RestAsmEngineDiagnostics_Type()
)
restAsmEngineDiagnostics.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    restAsmEngineDiagnostics.setStatus("deprecated")


class _RestAsmEngineStatus_Type(Integer32):
    """Custom type restAsmEngineStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              43)
        )
    )
    namedValues = NamedValues(
        *(("adpcm", 3),
          ("celp", 2),
          ("failed", 43),
          ("free", 4),
          ("normal", 6),
          ("removed", 5),
          ("x50", 1))
    )


_RestAsmEngineStatus_Type.__name__ = "Integer32"
_RestAsmEngineStatus_Object = MibTableColumn
restAsmEngineStatus = _RestAsmEngineStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 4),
    _RestAsmEngineStatus_Type()
)
restAsmEngineStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmEngineStatus.setStatus("deprecated")


class _RestAsmEngineNumPorts_Type(Integer32):
    """Custom type restAsmEngineNumPorts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4),
    )


_RestAsmEngineNumPorts_Type.__name__ = "Integer32"
_RestAsmEngineNumPorts_Object = MibTableColumn
restAsmEngineNumPorts = _RestAsmEngineNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 5),
    _RestAsmEngineNumPorts_Type()
)
restAsmEngineNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmEngineNumPorts.setStatus("deprecated")


class _RestAsmEngineNumSAFs_Type(Integer32):
    """Custom type restAsmEngineNumSAFs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4),
    )


_RestAsmEngineNumSAFs_Type.__name__ = "Integer32"
_RestAsmEngineNumSAFs_Object = MibTableColumn
restAsmEngineNumSAFs = _RestAsmEngineNumSAFs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 6),
    _RestAsmEngineNumSAFs_Type()
)
restAsmEngineNumSAFs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmEngineNumSAFs.setStatus("deprecated")


class _RestAsmEngineNumSCFs_Type(Integer32):
    """Custom type restAsmEngineNumSCFs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 80),
    )


_RestAsmEngineNumSCFs_Type.__name__ = "Integer32"
_RestAsmEngineNumSCFs_Object = MibTableColumn
restAsmEngineNumSCFs = _RestAsmEngineNumSCFs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 7),
    _RestAsmEngineNumSCFs_Type()
)
restAsmEngineNumSCFs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmEngineNumSCFs.setStatus("deprecated")


class _RestAsmEngineApplication_Type(Integer32):
    """Custom type restAsmEngineApplication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("adpcm", 3),
          ("celp-atc", 2),
          ("none", 255),
          ("x50", 1))
    )


_RestAsmEngineApplication_Type.__name__ = "Integer32"
_RestAsmEngineApplication_Object = MibTableColumn
restAsmEngineApplication = _RestAsmEngineApplication_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 2, 1, 8),
    _RestAsmEngineApplication_Type()
)
restAsmEngineApplication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmEngineApplication.setStatus("deprecated")
_RestAsmModApplTable_Object = MibTable
restAsmModApplTable = _RestAsmModApplTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3)
)
if mibBuilder.loadTexts:
    restAsmModApplTable.setStatus("mandatory")
_RestAsmModApplEntry_Object = MibTableRow
restAsmModApplEntry = _RestAsmModApplEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1)
)
restAsmModApplEntry.setIndexNames(
    (0, "STMIB", "restAsmModApplModuleAddr"),
    (0, "STMIB", "restAsmModApplType"),
)
if mibBuilder.loadTexts:
    restAsmModApplEntry.setStatus("mandatory")
_RestAsmModApplModuleAddr_Type = SlotAddr
_RestAsmModApplModuleAddr_Object = MibTableColumn
restAsmModApplModuleAddr = _RestAsmModApplModuleAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 1),
    _RestAsmModApplModuleAddr_Type()
)
restAsmModApplModuleAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModApplModuleAddr.setStatus("mandatory")


class _RestAsmModApplType_Type(Integer32):
    """Custom type restAsmModApplType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("adpcm", 3),
          ("celp-atc", 2),
          ("x50", 1))
    )


_RestAsmModApplType_Type.__name__ = "Integer32"
_RestAsmModApplType_Object = MibTableColumn
restAsmModApplType = _RestAsmModApplType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 2),
    _RestAsmModApplType_Type()
)
restAsmModApplType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModApplType.setStatus("mandatory")


class _RestAsmModApplMaxPortsAllowed_Type(Integer32):
    """Custom type restAsmModApplMaxPortsAllowed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_RestAsmModApplMaxPortsAllowed_Type.__name__ = "Integer32"
_RestAsmModApplMaxPortsAllowed_Object = MibTableColumn
restAsmModApplMaxPortsAllowed = _RestAsmModApplMaxPortsAllowed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 3),
    _RestAsmModApplMaxPortsAllowed_Type()
)
restAsmModApplMaxPortsAllowed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModApplMaxPortsAllowed.setStatus("mandatory")


class _RestAsmModApplCurPortsAllowed_Type(Integer32):
    """Custom type restAsmModApplCurPortsAllowed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_RestAsmModApplCurPortsAllowed_Type.__name__ = "Integer32"
_RestAsmModApplCurPortsAllowed_Object = MibTableColumn
restAsmModApplCurPortsAllowed = _RestAsmModApplCurPortsAllowed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 4),
    _RestAsmModApplCurPortsAllowed_Type()
)
restAsmModApplCurPortsAllowed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModApplCurPortsAllowed.setStatus("mandatory")


class _RestAsmModApplCurPortsAllocated_Type(Integer32):
    """Custom type restAsmModApplCurPortsAllocated based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_RestAsmModApplCurPortsAllocated_Type.__name__ = "Integer32"
_RestAsmModApplCurPortsAllocated_Object = MibTableColumn
restAsmModApplCurPortsAllocated = _RestAsmModApplCurPortsAllocated_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 5),
    _RestAsmModApplCurPortsAllocated_Type()
)
restAsmModApplCurPortsAllocated.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModApplCurPortsAllocated.setStatus("mandatory")


class _RestAsmModApplEnginesUsed_Type(Integer32):
    """Custom type restAsmModApplEnginesUsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RestAsmModApplEnginesUsed_Type.__name__ = "Integer32"
_RestAsmModApplEnginesUsed_Object = MibTableColumn
restAsmModApplEnginesUsed = _RestAsmModApplEnginesUsed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 6),
    _RestAsmModApplEnginesUsed_Type()
)
restAsmModApplEnginesUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModApplEnginesUsed.setStatus("mandatory")


class _RestAsmModApplEnginesRsvd_Type(Integer32):
    """Custom type restAsmModApplEnginesRsvd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RestAsmModApplEnginesRsvd_Type.__name__ = "Integer32"
_RestAsmModApplEnginesRsvd_Object = MibTableColumn
restAsmModApplEnginesRsvd = _RestAsmModApplEnginesRsvd_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 7),
    _RestAsmModApplEnginesRsvd_Type()
)
restAsmModApplEnginesRsvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModApplEnginesRsvd.setStatus("mandatory")


class _RestAsmModApplTotalLicenses_Type(Integer32):
    """Custom type restAsmModApplTotalLicenses based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RestAsmModApplTotalLicenses_Type.__name__ = "Integer32"
_RestAsmModApplTotalLicenses_Object = MibTableColumn
restAsmModApplTotalLicenses = _RestAsmModApplTotalLicenses_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 8),
    _RestAsmModApplTotalLicenses_Type()
)
restAsmModApplTotalLicenses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModApplTotalLicenses.setStatus("mandatory")


class _RestAsmModApplAvailLicenses_Type(Integer32):
    """Custom type restAsmModApplAvailLicenses based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RestAsmModApplAvailLicenses_Type.__name__ = "Integer32"
_RestAsmModApplAvailLicenses_Object = MibTableColumn
restAsmModApplAvailLicenses = _RestAsmModApplAvailLicenses_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 8, 3, 1, 9),
    _RestAsmModApplAvailLicenses_Type()
)
restAsmModApplAvailLicenses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmModApplAvailLicenses.setStatus("mandatory")
_RestRtm_ObjectIdentity = ObjectIdentity
restRtm = _RestRtm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9)
)
_RestRtmModuleTable_Object = MibTable
restRtmModuleTable = _RestRtmModuleTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1)
)
if mibBuilder.loadTexts:
    restRtmModuleTable.setStatus("mandatory")
_RestRtmModuleEntry_Object = MibTableRow
restRtmModuleEntry = _RestRtmModuleEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1, 1)
)
restRtmModuleEntry.setIndexNames(
    (0, "STMIB", "restRtmModuleAddr"),
)
if mibBuilder.loadTexts:
    restRtmModuleEntry.setStatus("mandatory")
_RestRtmModuleAddr_Type = SlotAddr
_RestRtmModuleAddr_Object = MibTableColumn
restRtmModuleAddr = _RestRtmModuleAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1, 1, 1),
    _RestRtmModuleAddr_Type()
)
restRtmModuleAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmModuleAddr.setStatus("mandatory")


class _RestRtmModuleDS0sUsed_Type(Integer32):
    """Custom type restRtmModuleDS0sUsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 24),
    )


_RestRtmModuleDS0sUsed_Type.__name__ = "Integer32"
_RestRtmModuleDS0sUsed_Object = MibTableColumn
restRtmModuleDS0sUsed = _RestRtmModuleDS0sUsed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1, 1, 2),
    _RestRtmModuleDS0sUsed_Type()
)
restRtmModuleDS0sUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmModuleDS0sUsed.setStatus("mandatory")


class _RestRtmModuleDS0sAvail_Type(Integer32):
    """Custom type restRtmModuleDS0sAvail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 24),
    )


_RestRtmModuleDS0sAvail_Type.__name__ = "Integer32"
_RestRtmModuleDS0sAvail_Object = MibTableColumn
restRtmModuleDS0sAvail = _RestRtmModuleDS0sAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1, 1, 3),
    _RestRtmModuleDS0sAvail_Type()
)
restRtmModuleDS0sAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmModuleDS0sAvail.setStatus("mandatory")


class _RestRtmModuleSafsUsed_Type(Integer32):
    """Custom type restRtmModuleSafsUsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_RestRtmModuleSafsUsed_Type.__name__ = "Integer32"
_RestRtmModuleSafsUsed_Object = MibTableColumn
restRtmModuleSafsUsed = _RestRtmModuleSafsUsed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1, 1, 4),
    _RestRtmModuleSafsUsed_Type()
)
restRtmModuleSafsUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmModuleSafsUsed.setStatus("mandatory")


class _RestRtmModuleSafsAvail_Type(Integer32):
    """Custom type restRtmModuleSafsAvail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_RestRtmModuleSafsAvail_Type.__name__ = "Integer32"
_RestRtmModuleSafsAvail_Object = MibTableColumn
restRtmModuleSafsAvail = _RestRtmModuleSafsAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 9, 1, 1, 5),
    _RestRtmModuleSafsAvail_Type()
)
restRtmModuleSafsAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmModuleSafsAvail.setStatus("mandatory")
_RestDsmModule_ObjectIdentity = ObjectIdentity
restDsmModule = _RestDsmModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10)
)
_RestDsmModuleTable_Object = MibTable
restDsmModuleTable = _RestDsmModuleTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1)
)
if mibBuilder.loadTexts:
    restDsmModuleTable.setStatus("mandatory")
_RestDsmModuleEntry_Object = MibTableRow
restDsmModuleEntry = _RestDsmModuleEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1)
)
restDsmModuleEntry.setIndexNames(
    (0, "STMIB", "restDsmModuleAddr"),
)
if mibBuilder.loadTexts:
    restDsmModuleEntry.setStatus("mandatory")
_RestDsmModuleAddr_Type = SlotAddr
_RestDsmModuleAddr_Object = MibTableColumn
restDsmModuleAddr = _RestDsmModuleAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 1),
    _RestDsmModuleAddr_Type()
)
restDsmModuleAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleAddr.setStatus("mandatory")
_RestDsmModuleNumDsmComms_Type = Integer32
_RestDsmModuleNumDsmComms_Object = MibTableColumn
restDsmModuleNumDsmComms = _RestDsmModuleNumDsmComms_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 2),
    _RestDsmModuleNumDsmComms_Type()
)
restDsmModuleNumDsmComms.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleNumDsmComms.setStatus("mandatory")
_RestDsmModuleNumCallsProc_Type = Integer32
_RestDsmModuleNumCallsProc_Object = MibTableColumn
restDsmModuleNumCallsProc = _RestDsmModuleNumCallsProc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 3),
    _RestDsmModuleNumCallsProc_Type()
)
restDsmModuleNumCallsProc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleNumCallsProc.setStatus("mandatory")
_RestDsmModuleNumRmtRteEntries_Type = Integer32
_RestDsmModuleNumRmtRteEntries_Object = MibTableColumn
restDsmModuleNumRmtRteEntries = _RestDsmModuleNumRmtRteEntries_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 4),
    _RestDsmModuleNumRmtRteEntries_Type()
)
restDsmModuleNumRmtRteEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleNumRmtRteEntries.setStatus("mandatory")
_RestDsmModuleNumRmtRteAvail_Type = Integer32
_RestDsmModuleNumRmtRteAvail_Object = MibTableColumn
restDsmModuleNumRmtRteAvail = _RestDsmModuleNumRmtRteAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 5),
    _RestDsmModuleNumRmtRteAvail_Type()
)
restDsmModuleNumRmtRteAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleNumRmtRteAvail.setStatus("mandatory")
_RestDsmModuleNumLocRteEntries_Type = Integer32
_RestDsmModuleNumLocRteEntries_Object = MibTableColumn
restDsmModuleNumLocRteEntries = _RestDsmModuleNumLocRteEntries_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 6),
    _RestDsmModuleNumLocRteEntries_Type()
)
restDsmModuleNumLocRteEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleNumLocRteEntries.setStatus("mandatory")
_RestDsmModuleNumLocRteAvail_Type = Integer32
_RestDsmModuleNumLocRteAvail_Object = MibTableColumn
restDsmModuleNumLocRteAvail = _RestDsmModuleNumLocRteAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 7),
    _RestDsmModuleNumLocRteAvail_Type()
)
restDsmModuleNumLocRteAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleNumLocRteAvail.setStatus("mandatory")
_RestDsmModuleBypassPPSTotal_Type = Integer32
_RestDsmModuleBypassPPSTotal_Object = MibTableColumn
restDsmModuleBypassPPSTotal = _RestDsmModuleBypassPPSTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 8),
    _RestDsmModuleBypassPPSTotal_Type()
)
restDsmModuleBypassPPSTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleBypassPPSTotal.setStatus("mandatory")
_RestDsmModuleBypassPPSAvail_Type = Integer32
_RestDsmModuleBypassPPSAvail_Object = MibTableColumn
restDsmModuleBypassPPSAvail = _RestDsmModuleBypassPPSAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 9),
    _RestDsmModuleBypassPPSAvail_Type()
)
restDsmModuleBypassPPSAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleBypassPPSAvail.setStatus("mandatory")
_RestDsmModuleBypChanTotal_Type = Integer32
_RestDsmModuleBypChanTotal_Object = MibTableColumn
restDsmModuleBypChanTotal = _RestDsmModuleBypChanTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 10),
    _RestDsmModuleBypChanTotal_Type()
)
restDsmModuleBypChanTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleBypChanTotal.setStatus("mandatory")
_RestDsmModuleBypChanAvail_Type = Integer32
_RestDsmModuleBypChanAvail_Object = MibTableColumn
restDsmModuleBypChanAvail = _RestDsmModuleBypChanAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 11),
    _RestDsmModuleBypChanAvail_Type()
)
restDsmModuleBypChanAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleBypChanAvail.setStatus("mandatory")
_RestDsmModuleCirTotal_Type = Integer32
_RestDsmModuleCirTotal_Object = MibTableColumn
restDsmModuleCirTotal = _RestDsmModuleCirTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 12),
    _RestDsmModuleCirTotal_Type()
)
restDsmModuleCirTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleCirTotal.setStatus("mandatory")
_RestDsmModuleCirAvail_Type = Integer32
_RestDsmModuleCirAvail_Object = MibTableColumn
restDsmModuleCirAvail = _RestDsmModuleCirAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 13),
    _RestDsmModuleCirAvail_Type()
)
restDsmModuleCirAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleCirAvail.setStatus("mandatory")
_RestDsmModuleVciCtrlBlkTotal_Type = Integer32
_RestDsmModuleVciCtrlBlkTotal_Object = MibTableColumn
restDsmModuleVciCtrlBlkTotal = _RestDsmModuleVciCtrlBlkTotal_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 14),
    _RestDsmModuleVciCtrlBlkTotal_Type()
)
restDsmModuleVciCtrlBlkTotal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleVciCtrlBlkTotal.setStatus("mandatory")
_RestDsmModuleVciCtrlBlkAvail_Type = Integer32
_RestDsmModuleVciCtrlBlkAvail_Object = MibTableColumn
restDsmModuleVciCtrlBlkAvail = _RestDsmModuleVciCtrlBlkAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 15),
    _RestDsmModuleVciCtrlBlkAvail_Type()
)
restDsmModuleVciCtrlBlkAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleVciCtrlBlkAvail.setStatus("mandatory")
_RestDsmModuleTotalBuffers_Type = Integer32
_RestDsmModuleTotalBuffers_Object = MibTableColumn
restDsmModuleTotalBuffers = _RestDsmModuleTotalBuffers_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 16),
    _RestDsmModuleTotalBuffers_Type()
)
restDsmModuleTotalBuffers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleTotalBuffers.setStatus("mandatory")
_RestDsmModuleBuffersAvail_Type = Integer32
_RestDsmModuleBuffersAvail_Object = MibTableColumn
restDsmModuleBuffersAvail = _RestDsmModuleBuffersAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 17),
    _RestDsmModuleBuffersAvail_Type()
)
restDsmModuleBuffersAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleBuffersAvail.setStatus("mandatory")
_RestDsmModuleTotalRecCDRs_Type = Integer32
_RestDsmModuleTotalRecCDRs_Object = MibTableColumn
restDsmModuleTotalRecCDRs = _RestDsmModuleTotalRecCDRs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 18),
    _RestDsmModuleTotalRecCDRs_Type()
)
restDsmModuleTotalRecCDRs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleTotalRecCDRs.setStatus("mandatory")
_RestDsmModuleRecCDRsAvail_Type = Integer32
_RestDsmModuleRecCDRsAvail_Object = MibTableColumn
restDsmModuleRecCDRsAvail = _RestDsmModuleRecCDRsAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 19),
    _RestDsmModuleRecCDRsAvail_Type()
)
restDsmModuleRecCDRsAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleRecCDRsAvail.setStatus("mandatory")
_RestDsmModuleTotalCallsPerSec_Type = Integer32
_RestDsmModuleTotalCallsPerSec_Object = MibTableColumn
restDsmModuleTotalCallsPerSec = _RestDsmModuleTotalCallsPerSec_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 20),
    _RestDsmModuleTotalCallsPerSec_Type()
)
restDsmModuleTotalCallsPerSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleTotalCallsPerSec.setStatus("mandatory")
_RestDsmModuleCallsPerSecAvail_Type = Integer32
_RestDsmModuleCallsPerSecAvail_Object = MibTableColumn
restDsmModuleCallsPerSecAvail = _RestDsmModuleCallsPerSecAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 21),
    _RestDsmModuleCallsPerSecAvail_Type()
)
restDsmModuleCallsPerSecAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleCallsPerSecAvail.setStatus("mandatory")
_RestDsmModuleCallsPerSecFactor_Type = Integer32
_RestDsmModuleCallsPerSecFactor_Object = MibTableColumn
restDsmModuleCallsPerSecFactor = _RestDsmModuleCallsPerSecFactor_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 22),
    _RestDsmModuleCallsPerSecFactor_Type()
)
restDsmModuleCallsPerSecFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleCallsPerSecFactor.setStatus("mandatory")
_RestDsmModuleBypassFactor_Type = Integer32
_RestDsmModuleBypassFactor_Object = MibTableColumn
restDsmModuleBypassFactor = _RestDsmModuleBypassFactor_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 23),
    _RestDsmModuleBypassFactor_Type()
)
restDsmModuleBypassFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleBypassFactor.setStatus("mandatory")
_RestDsmModuleTotalProcessUnits_Type = Integer32
_RestDsmModuleTotalProcessUnits_Object = MibTableColumn
restDsmModuleTotalProcessUnits = _RestDsmModuleTotalProcessUnits_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 24),
    _RestDsmModuleTotalProcessUnits_Type()
)
restDsmModuleTotalProcessUnits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleTotalProcessUnits.setStatus("mandatory")
_RestDsmModuleProcessUnitsAvail_Type = Integer32
_RestDsmModuleProcessUnitsAvail_Object = MibTableColumn
restDsmModuleProcessUnitsAvail = _RestDsmModuleProcessUnitsAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 1, 1, 25),
    _RestDsmModuleProcessUnitsAvail_Type()
)
restDsmModuleProcessUnitsAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModuleProcessUnitsAvail.setStatus("mandatory")
_RestDsmModRecCDRLogTable_Object = MibTable
restDsmModRecCDRLogTable = _RestDsmModRecCDRLogTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2)
)
if mibBuilder.loadTexts:
    restDsmModRecCDRLogTable.setStatus("mandatory")
_RestDsmModRecCDRLogEntry_Object = MibTableRow
restDsmModRecCDRLogEntry = _RestDsmModRecCDRLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1)
)
restDsmModRecCDRLogEntry.setIndexNames(
    (0, "STMIB", "restDsmModRecCDRLogAddr"),
    (0, "STMIB", "restDsmModRecCDRLogIndex"),
)
if mibBuilder.loadTexts:
    restDsmModRecCDRLogEntry.setStatus("mandatory")
_RestDsmModRecCDRLogAddr_Type = SlotAddr
_RestDsmModRecCDRLogAddr_Object = MibTableColumn
restDsmModRecCDRLogAddr = _RestDsmModRecCDRLogAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1, 1),
    _RestDsmModRecCDRLogAddr_Type()
)
restDsmModRecCDRLogAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRecCDRLogAddr.setStatus("mandatory")


class _RestDsmModRecCDRLogIndex_Type(Integer32):
    """Custom type restDsmModRecCDRLogIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_RestDsmModRecCDRLogIndex_Type.__name__ = "Integer32"
_RestDsmModRecCDRLogIndex_Object = MibTableColumn
restDsmModRecCDRLogIndex = _RestDsmModRecCDRLogIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1, 2),
    _RestDsmModRecCDRLogIndex_Type()
)
restDsmModRecCDRLogIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRecCDRLogIndex.setStatus("mandatory")


class _RestDsmModRecCDRLogStatus_Type(Integer32):
    """Custom type restDsmModRecCDRLogStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("noOverflow", 4),
          ("overThreshold", 5),
          ("overflow", 3))
    )


_RestDsmModRecCDRLogStatus_Type.__name__ = "Integer32"
_RestDsmModRecCDRLogStatus_Object = MibTableColumn
restDsmModRecCDRLogStatus = _RestDsmModRecCDRLogStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1, 3),
    _RestDsmModRecCDRLogStatus_Type()
)
restDsmModRecCDRLogStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRecCDRLogStatus.setStatus("mandatory")
_RestDsmModRecCDRLogLev1Entries_Type = Integer32
_RestDsmModRecCDRLogLev1Entries_Object = MibTableColumn
restDsmModRecCDRLogLev1Entries = _RestDsmModRecCDRLogLev1Entries_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1, 4),
    _RestDsmModRecCDRLogLev1Entries_Type()
)
restDsmModRecCDRLogLev1Entries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRecCDRLogLev1Entries.setStatus("mandatory")
_RestDsmModRecCDRLogLev2Entries_Type = Integer32
_RestDsmModRecCDRLogLev2Entries_Object = MibTableColumn
restDsmModRecCDRLogLev2Entries = _RestDsmModRecCDRLogLev2Entries_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1, 5),
    _RestDsmModRecCDRLogLev2Entries_Type()
)
restDsmModRecCDRLogLev2Entries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRecCDRLogLev2Entries.setStatus("mandatory")


class _RestDsmModRecCDRLogClrEntries_Type(Integer32):
    """Custom type restDsmModRecCDRLogClrEntries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RestDsmModRecCDRLogClrEntries_Type.__name__ = "Integer32"
_RestDsmModRecCDRLogClrEntries_Object = MibTableColumn
restDsmModRecCDRLogClrEntries = _RestDsmModRecCDRLogClrEntries_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 2, 1, 6),
    _RestDsmModRecCDRLogClrEntries_Type()
)
restDsmModRecCDRLogClrEntries.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restDsmModRecCDRLogClrEntries.setStatus("mandatory")
_RestDsmModRecCDRTable_Object = MibTable
restDsmModRecCDRTable = _RestDsmModRecCDRTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 3)
)
if mibBuilder.loadTexts:
    restDsmModRecCDRTable.setStatus("mandatory")
_RestDsmModRecCDREntry_Object = MibTableRow
restDsmModRecCDREntry = _RestDsmModRecCDREntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 3, 1)
)
restDsmModRecCDREntry.setIndexNames(
    (0, "STMIB", "restDsmModRecCDRAddr"),
    (0, "STMIB", "restDsmModRecCDRLogNum"),
    (0, "STMIB", "restDsmModRecCDRIndex"),
)
if mibBuilder.loadTexts:
    restDsmModRecCDREntry.setStatus("mandatory")
_RestDsmModRecCDRAddr_Type = SlotAddr
_RestDsmModRecCDRAddr_Object = MibTableColumn
restDsmModRecCDRAddr = _RestDsmModRecCDRAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 3, 1, 1),
    _RestDsmModRecCDRAddr_Type()
)
restDsmModRecCDRAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRecCDRAddr.setStatus("mandatory")


class _RestDsmModRecCDRLogNum_Type(Integer32):
    """Custom type restDsmModRecCDRLogNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_RestDsmModRecCDRLogNum_Type.__name__ = "Integer32"
_RestDsmModRecCDRLogNum_Object = MibTableColumn
restDsmModRecCDRLogNum = _RestDsmModRecCDRLogNum_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 3, 1, 2),
    _RestDsmModRecCDRLogNum_Type()
)
restDsmModRecCDRLogNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRecCDRLogNum.setStatus("mandatory")


class _RestDsmModRecCDRIndex_Type(Integer32):
    """Custom type restDsmModRecCDRIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )


_RestDsmModRecCDRIndex_Type.__name__ = "Integer32"
_RestDsmModRecCDRIndex_Object = MibTableColumn
restDsmModRecCDRIndex = _RestDsmModRecCDRIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 3, 1, 3),
    _RestDsmModRecCDRIndex_Type()
)
restDsmModRecCDRIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRecCDRIndex.setStatus("mandatory")


class _RestDsmModRecCDRContents_Type(OctetString):
    """Custom type restDsmModRecCDRContents based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(72, 72),
    )


_RestDsmModRecCDRContents_Type.__name__ = "OctetString"
_RestDsmModRecCDRContents_Object = MibTableColumn
restDsmModRecCDRContents = _RestDsmModRecCDRContents_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 3, 1, 4),
    _RestDsmModRecCDRContents_Type()
)
restDsmModRecCDRContents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRecCDRContents.setStatus("mandatory")
_RestDsmModExchTable_Object = MibTable
restDsmModExchTable = _RestDsmModExchTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4)
)
if mibBuilder.loadTexts:
    restDsmModExchTable.setStatus("mandatory")
_RestDsmModExchEntry_Object = MibTableRow
restDsmModExchEntry = _RestDsmModExchEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4, 1)
)
restDsmModExchEntry.setIndexNames(
    (0, "STMIB", "restDsmModExchAddr"),
    (0, "STMIB", "restDsmModExchCallNumLen"),
    (0, "STMIB", "restDsmModExchCallNumber"),
    (0, "STMIB", "restDsmModExchPartition"),
)
if mibBuilder.loadTexts:
    restDsmModExchEntry.setStatus("mandatory")
_RestDsmModExchAddr_Type = SlotAddr
_RestDsmModExchAddr_Object = MibTableColumn
restDsmModExchAddr = _RestDsmModExchAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4, 1, 1),
    _RestDsmModExchAddr_Type()
)
restDsmModExchAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModExchAddr.setStatus("mandatory")


class _RestDsmModExchCallNumLen_Type(Integer32):
    """Custom type restDsmModExchCallNumLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RestDsmModExchCallNumLen_Type.__name__ = "Integer32"
_RestDsmModExchCallNumLen_Object = MibTableColumn
restDsmModExchCallNumLen = _RestDsmModExchCallNumLen_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4, 1, 2),
    _RestDsmModExchCallNumLen_Type()
)
restDsmModExchCallNumLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModExchCallNumLen.setStatus("mandatory")


class _RestDsmModExchCallNumber_Type(DisplayString):
    """Custom type restDsmModExchCallNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_RestDsmModExchCallNumber_Type.__name__ = "DisplayString"
_RestDsmModExchCallNumber_Object = MibTableColumn
restDsmModExchCallNumber = _RestDsmModExchCallNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4, 1, 3),
    _RestDsmModExchCallNumber_Type()
)
restDsmModExchCallNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModExchCallNumber.setStatus("mandatory")


class _RestDsmModExchPartition_Type(Integer32):
    """Custom type restDsmModExchPartition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RestDsmModExchPartition_Type.__name__ = "Integer32"
_RestDsmModExchPartition_Object = MibTableColumn
restDsmModExchPartition = _RestDsmModExchPartition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4, 1, 4),
    _RestDsmModExchPartition_Type()
)
restDsmModExchPartition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModExchPartition.setStatus("mandatory")


class _RestDsmModExchCode_Type(DisplayString):
    """Custom type restDsmModExchCode based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_RestDsmModExchCode_Type.__name__ = "DisplayString"
_RestDsmModExchCode_Object = MibTableColumn
restDsmModExchCode = _RestDsmModExchCode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 4, 1, 5),
    _RestDsmModExchCode_Type()
)
restDsmModExchCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModExchCode.setStatus("mandatory")
_RestDsmModRteTable_Object = MibTable
restDsmModRteTable = _RestDsmModRteTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5)
)
if mibBuilder.loadTexts:
    restDsmModRteTable.setStatus("mandatory")
_RestDsmModRteEntry_Object = MibTableRow
restDsmModRteEntry = _RestDsmModRteEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1)
)
restDsmModRteEntry.setIndexNames(
    (0, "STMIB", "restDsmModRteAddr"),
    (0, "STMIB", "restDsmModRteExchCodeLen"),
    (0, "STMIB", "restDsmModRteExchCode"),
    (0, "STMIB", "restDsmModRtePartition"),
    (0, "STMIB", "restDsmModRteRemoteNode"),
    (0, "STMIB", "restDsmModRteRemoteSlot"),
    (0, "STMIB", "restDsmModRteLocalPortNumber"),
)
if mibBuilder.loadTexts:
    restDsmModRteEntry.setStatus("mandatory")
_RestDsmModRteAddr_Type = SlotAddr
_RestDsmModRteAddr_Object = MibTableColumn
restDsmModRteAddr = _RestDsmModRteAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 1),
    _RestDsmModRteAddr_Type()
)
restDsmModRteAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRteAddr.setStatus("mandatory")


class _RestDsmModRteExchCodeLen_Type(Integer32):
    """Custom type restDsmModRteExchCodeLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RestDsmModRteExchCodeLen_Type.__name__ = "Integer32"
_RestDsmModRteExchCodeLen_Object = MibTableColumn
restDsmModRteExchCodeLen = _RestDsmModRteExchCodeLen_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 2),
    _RestDsmModRteExchCodeLen_Type()
)
restDsmModRteExchCodeLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRteExchCodeLen.setStatus("mandatory")


class _RestDsmModRteExchCode_Type(DisplayString):
    """Custom type restDsmModRteExchCode based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_RestDsmModRteExchCode_Type.__name__ = "DisplayString"
_RestDsmModRteExchCode_Object = MibTableColumn
restDsmModRteExchCode = _RestDsmModRteExchCode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 3),
    _RestDsmModRteExchCode_Type()
)
restDsmModRteExchCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRteExchCode.setStatus("mandatory")


class _RestDsmModRtePartition_Type(Integer32):
    """Custom type restDsmModRtePartition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_RestDsmModRtePartition_Type.__name__ = "Integer32"
_RestDsmModRtePartition_Object = MibTableColumn
restDsmModRtePartition = _RestDsmModRtePartition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 4),
    _RestDsmModRtePartition_Type()
)
restDsmModRtePartition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRtePartition.setStatus("mandatory")
_RestDsmModRteRemoteNode_Type = NodeAddr
_RestDsmModRteRemoteNode_Object = MibTableColumn
restDsmModRteRemoteNode = _RestDsmModRteRemoteNode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 5),
    _RestDsmModRteRemoteNode_Type()
)
restDsmModRteRemoteNode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRteRemoteNode.setStatus("mandatory")
_RestDsmModRteRemoteSlot_Type = SlotAddr
_RestDsmModRteRemoteSlot_Object = MibTableColumn
restDsmModRteRemoteSlot = _RestDsmModRteRemoteSlot_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 6),
    _RestDsmModRteRemoteSlot_Type()
)
restDsmModRteRemoteSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRteRemoteSlot.setStatus("mandatory")


class _RestDsmModRteLocalPortNumber_Type(Integer32):
    """Custom type restDsmModRteLocalPortNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_RestDsmModRteLocalPortNumber_Type.__name__ = "Integer32"
_RestDsmModRteLocalPortNumber_Object = MibTableColumn
restDsmModRteLocalPortNumber = _RestDsmModRteLocalPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 7),
    _RestDsmModRteLocalPortNumber_Type()
)
restDsmModRteLocalPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRteLocalPortNumber.setStatus("mandatory")
_RestDsmModRteLocalPortAddress_Type = PortAddr
_RestDsmModRteLocalPortAddress_Object = MibTableColumn
restDsmModRteLocalPortAddress = _RestDsmModRteLocalPortAddress_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 10, 5, 1, 8),
    _RestDsmModRteLocalPortAddress_Type()
)
restDsmModRteLocalPortAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmModRteLocalPortAddress.setStatus("mandatory")
_RestLgmModule_ObjectIdentity = ObjectIdentity
restLgmModule = _RestLgmModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11)
)
_RestLgmModuleTable_Object = MibTable
restLgmModuleTable = _RestLgmModuleTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1)
)
if mibBuilder.loadTexts:
    restLgmModuleTable.setStatus("mandatory")
_RestLgmModuleEntry_Object = MibTableRow
restLgmModuleEntry = _RestLgmModuleEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1, 1)
)
restLgmModuleEntry.setIndexNames(
    (0, "STMIB", "restLgmModuleAddr"),
)
if mibBuilder.loadTexts:
    restLgmModuleEntry.setStatus("mandatory")
_RestLgmModuleAddr_Type = SlotAddr
_RestLgmModuleAddr_Object = MibTableColumn
restLgmModuleAddr = _RestLgmModuleAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1, 1, 1),
    _RestLgmModuleAddr_Type()
)
restLgmModuleAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmModuleAddr.setStatus("mandatory")
_RestLgmModuleTotalSAFs_Type = Integer32
_RestLgmModuleTotalSAFs_Object = MibTableColumn
restLgmModuleTotalSAFs = _RestLgmModuleTotalSAFs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1, 1, 2),
    _RestLgmModuleTotalSAFs_Type()
)
restLgmModuleTotalSAFs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmModuleTotalSAFs.setStatus("mandatory")
_RestLgmModuleAvailSAFs_Type = Integer32
_RestLgmModuleAvailSAFs_Object = MibTableColumn
restLgmModuleAvailSAFs = _RestLgmModuleAvailSAFs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1, 1, 3),
    _RestLgmModuleAvailSAFs_Type()
)
restLgmModuleAvailSAFs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmModuleAvailSAFs.setStatus("mandatory")
_RestLgmModuleTotalSCFs_Type = Integer32
_RestLgmModuleTotalSCFs_Object = MibTableColumn
restLgmModuleTotalSCFs = _RestLgmModuleTotalSCFs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1, 1, 4),
    _RestLgmModuleTotalSCFs_Type()
)
restLgmModuleTotalSCFs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmModuleTotalSCFs.setStatus("mandatory")
_RestLgmModuleAvailSCFs_Type = Integer32
_RestLgmModuleAvailSCFs_Object = MibTableColumn
restLgmModuleAvailSCFs = _RestLgmModuleAvailSCFs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 4, 11, 1, 1, 5),
    _RestLgmModuleAvailSCFs_Type()
)
restLgmModuleAvailSCFs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmModuleAvailSCFs.setStatus("mandatory")
_RestPortTable_Object = MibTable
restPortTable = _RestPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5)
)
if mibBuilder.loadTexts:
    restPortTable.setStatus("mandatory")
_RestPortEntry_Object = MibTableRow
restPortEntry = _RestPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1)
)
restPortEntry.setIndexNames(
    (0, "STMIB", "restPortAddr"),
)
if mibBuilder.loadTexts:
    restPortEntry.setStatus("mandatory")
_RestPortAddr_Type = PortAddr
_RestPortAddr_Object = MibTableColumn
restPortAddr = _RestPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 1),
    _RestPortAddr_Type()
)
restPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortAddr.setStatus("mandatory")


class _RestPortDiagnostics_Type(Integer32):
    """Custom type restPortDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("clearEvent", 10),
          ("clearLoopback", 8),
          ("insert", 4),
          ("remove", 5),
          ("reset", 6),
          ("setLoopback", 9),
          ("update", 7))
    )


_RestPortDiagnostics_Type.__name__ = "Integer32"
_RestPortDiagnostics_Object = MibTableColumn
restPortDiagnostics = _RestPortDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 2),
    _RestPortDiagnostics_Type()
)
restPortDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restPortDiagnostics.setStatus("mandatory")


class _RestPortStatus_Type(Integer32):
    """Custom type restPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(43,
              44,
              46,
              47,
              51)
        )
    )
    namedValues = NamedValues(
        *(("active", 44),
          ("failed", 43),
          ("inactive", 46),
          ("maintenance", 51),
          ("standby", 47))
    )


_RestPortStatus_Type.__name__ = "Integer32"
_RestPortStatus_Object = MibTableColumn
restPortStatus = _RestPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 3),
    _RestPortStatus_Type()
)
restPortStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortStatus.setStatus("mandatory")


class _RestPortSubStatus_Type(Integer32):
    """Custom type restPortSubStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              5,
              50)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1),
          ("removed", 5),
          ("undefined", 50))
    )


_RestPortSubStatus_Type.__name__ = "Integer32"
_RestPortSubStatus_Object = MibTableColumn
restPortSubStatus = _RestPortSubStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 4),
    _RestPortSubStatus_Type()
)
restPortSubStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortSubStatus.setStatus("mandatory")


class _RestPortCondition_Type(Integer32):
    """Custom type restPortCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(50,
              52,
              57)
        )
    )
    namedValues = NamedValues(
        *(("exception", 52),
          ("normal", 57),
          ("undefined", 50))
    )


_RestPortCondition_Type.__name__ = "Integer32"
_RestPortCondition_Object = MibTableColumn
restPortCondition = _RestPortCondition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 5),
    _RestPortCondition_Type()
)
restPortCondition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortCondition.setStatus("mandatory")


class _RestPortSubCondition_Type(Integer32):
    """Custom type restPortSubCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(29,
              30,
              31,
              33,
              39,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              98,
              99,
              100)
        )
    )
    namedValues = NamedValues(
        *(("berOverFailThreshold", 29),
          ("cfgMismatch", 77),
          ("clockFail", 75),
          ("dnloadRmt", 78),
          ("exceedPowerSpec", 81),
          ("externalLoopback", 82),
          ("layer2Mismatch", 31),
          ("layer2TimeOut", 30),
          ("lmiFail", 74),
          ("los", 98),
          ("losAndRos", 100),
          ("msgTimeout", 76),
          ("none", 71),
          ("oos", 39),
          ("pending", 33),
          ("redAlarm", 72),
          ("remoteEndReset", 83),
          ("ros", 99),
          ("serverLoopback", 80),
          ("stToSt", 79),
          ("yellowAlarm", 73))
    )


_RestPortSubCondition_Type.__name__ = "Integer32"
_RestPortSubCondition_Object = MibTableColumn
restPortSubCondition = _RestPortSubCondition_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 6),
    _RestPortSubCondition_Type()
)
restPortSubCondition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortSubCondition.setStatus("mandatory")


class _RestPortType_Type(Integer32):
    """Custom type restPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              11,
              12,
              13,
              14,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("asm", 9),
          ("dsm", 19),
          ("e1m", 6),
          ("e3m", 20),
          ("fsm", 11),
          ("lgm", 8),
          ("rtm", 14),
          ("sdm", 12),
          ("sgm", 7),
          ("sgmAg", 13),
          ("t1m", 5))
    )


_RestPortType_Type.__name__ = "Integer32"
_RestPortType_Object = MibTableColumn
restPortType = _RestPortType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 7),
    _RestPortType_Type()
)
restPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortType.setStatus("mandatory")


class _RestPortLoopbackType_Type(Integer32):
    """Custom type restPortLoopbackType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("bidirectional", 5),
          ("extBidirectional", 14),
          ("extIdlRim", 16),
          ("extLim", 12),
          ("extRim", 13),
          ("extUlim", 15),
          ("lim", 2),
          ("limDisc", 3),
          ("remoteBus", 17),
          ("rim", 4))
    )


_RestPortLoopbackType_Type.__name__ = "Integer32"
_RestPortLoopbackType_Object = MibTableColumn
restPortLoopbackType = _RestPortLoopbackType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 8),
    _RestPortLoopbackType_Type()
)
restPortLoopbackType.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restPortLoopbackType.setStatus("mandatory")


class _RestPortLoopbackDuration_Type(Integer32):
    """Custom type restPortLoopbackDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RestPortLoopbackDuration_Type.__name__ = "Integer32"
_RestPortLoopbackDuration_Object = MibTableColumn
restPortLoopbackDuration = _RestPortLoopbackDuration_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 9),
    _RestPortLoopbackDuration_Type()
)
restPortLoopbackDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restPortLoopbackDuration.setStatus("mandatory")


class _RestPortLoopbackStatus_Type(Integer32):
    """Custom type restPortLoopbackStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("bidirectional", 5),
          ("extBidirectional", 14),
          ("extIdlRim", 16),
          ("extLim", 12),
          ("extRim", 13),
          ("extUlim", 15),
          ("facility", 8),
          ("lim", 2),
          ("limDisc", 3),
          ("localLoop", 10),
          ("none", 1),
          ("payload", 9),
          ("remoteBus", 17),
          ("remoteLoop", 11),
          ("rim", 4))
    )


_RestPortLoopbackStatus_Type.__name__ = "Integer32"
_RestPortLoopbackStatus_Object = MibTableColumn
restPortLoopbackStatus = _RestPortLoopbackStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 10),
    _RestPortLoopbackStatus_Type()
)
restPortLoopbackStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortLoopbackStatus.setStatus("mandatory")


class _RestPortLoopbackInitiator_Type(Integer32):
    """Custom type restPortLoopbackInitiator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("local", 1),
          ("notApplicable", 255),
          ("remote", 2))
    )


_RestPortLoopbackInitiator_Type.__name__ = "Integer32"
_RestPortLoopbackInitiator_Object = MibTableColumn
restPortLoopbackInitiator = _RestPortLoopbackInitiator_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 11),
    _RestPortLoopbackInitiator_Type()
)
restPortLoopbackInitiator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortLoopbackInitiator.setStatus("mandatory")


class _RestPortErrorIndication_Type(Integer32):
    """Custom type restPortErrorIndication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("set", 1))
    )


_RestPortErrorIndication_Type.__name__ = "Integer32"
_RestPortErrorIndication_Object = MibTableColumn
restPortErrorIndication = _RestPortErrorIndication_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 12),
    _RestPortErrorIndication_Type()
)
restPortErrorIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortErrorIndication.setStatus("mandatory")


class _RestPortSevereIndication_Type(Integer32):
    """Custom type restPortSevereIndication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("set", 1))
    )


_RestPortSevereIndication_Type.__name__ = "Integer32"
_RestPortSevereIndication_Object = MibTableColumn
restPortSevereIndication = _RestPortSevereIndication_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 13),
    _RestPortSevereIndication_Type()
)
restPortSevereIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortSevereIndication.setStatus("mandatory")


class _RestPortBGDiagResults_Type(OctetString):
    """Custom type restPortBGDiagResults based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RestPortBGDiagResults_Type.__name__ = "OctetString"
_RestPortBGDiagResults_Object = MibTableColumn
restPortBGDiagResults = _RestPortBGDiagResults_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 14),
    _RestPortBGDiagResults_Type()
)
restPortBGDiagResults.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortBGDiagResults.setStatus("mandatory")


class _RestPortNumberOfBundles_Type(Integer32):
    """Custom type restPortNumberOfBundles based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_RestPortNumberOfBundles_Type.__name__ = "Integer32"
_RestPortNumberOfBundles_Object = MibTableColumn
restPortNumberOfBundles = _RestPortNumberOfBundles_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 15),
    _RestPortNumberOfBundles_Type()
)
restPortNumberOfBundles.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortNumberOfBundles.setStatus("mandatory")


class _RestPortPhasorStatus_Type(OctetString):
    """Custom type restPortPhasorStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestPortPhasorStatus_Type.__name__ = "OctetString"
_RestPortPhasorStatus_Object = MibTableColumn
restPortPhasorStatus = _RestPortPhasorStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 16),
    _RestPortPhasorStatus_Type()
)
restPortPhasorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortPhasorStatus.setStatus("mandatory")
_RestPortMappedPhy_Type = PortAddr
_RestPortMappedPhy_Object = MibTableColumn
restPortMappedPhy = _RestPortMappedPhy_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 17),
    _RestPortMappedPhy_Type()
)
restPortMappedPhy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortMappedPhy.setStatus("mandatory")


class _RestPortSdmFunction_Type(OctetString):
    """Custom type restPortSdmFunction based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RestPortSdmFunction_Type.__name__ = "OctetString"
_RestPortSdmFunction_Object = MibTableColumn
restPortSdmFunction = _RestPortSdmFunction_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 18),
    _RestPortSdmFunction_Type()
)
restPortSdmFunction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortSdmFunction.setStatus("mandatory")


class _RestPortSdmTFunction_Type(OctetString):
    """Custom type restPortSdmTFunction based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RestPortSdmTFunction_Type.__name__ = "OctetString"
_RestPortSdmTFunction_Object = MibTableColumn
restPortSdmTFunction = _RestPortSdmTFunction_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 19),
    _RestPortSdmTFunction_Type()
)
restPortSdmTFunction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortSdmTFunction.setStatus("mandatory")


class _RestPortBundleInTone_Type(Integer32):
    """Custom type restPortBundleInTone based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_RestPortBundleInTone_Type.__name__ = "Integer32"
_RestPortBundleInTone_Object = MibTableColumn
restPortBundleInTone = _RestPortBundleInTone_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 20),
    _RestPortBundleInTone_Type()
)
restPortBundleInTone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortBundleInTone.setStatus("mandatory")


class _RestPortSdmSignalStatus_Type(Integer32):
    """Custom type restPortSdmSignalStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("los", 2),
          ("losEvent", 4),
          ("notApplicable", 255),
          ("ok", 1))
    )


_RestPortSdmSignalStatus_Type.__name__ = "Integer32"
_RestPortSdmSignalStatus_Object = MibTableColumn
restPortSdmSignalStatus = _RestPortSdmSignalStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 21),
    _RestPortSdmSignalStatus_Type()
)
restPortSdmSignalStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortSdmSignalStatus.setStatus("mandatory")


class _RestPortSdmBipolarViolationInd_Type(Integer32):
    """Custom type restPortSdmBipolarViolationInd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("event", 1),
          ("noEvent", 2),
          ("notApplicable", 255))
    )


_RestPortSdmBipolarViolationInd_Type.__name__ = "Integer32"
_RestPortSdmBipolarViolationInd_Object = MibTableColumn
restPortSdmBipolarViolationInd = _RestPortSdmBipolarViolationInd_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 22),
    _RestPortSdmBipolarViolationInd_Type()
)
restPortSdmBipolarViolationInd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortSdmBipolarViolationInd.setStatus("mandatory")


class _RestPortCapabilities_Type(OctetString):
    """Custom type restPortCapabilities based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 4),
    )


_RestPortCapabilities_Type.__name__ = "OctetString"
_RestPortCapabilities_Object = MibTableColumn
restPortCapabilities = _RestPortCapabilities_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 5, 1, 23),
    _RestPortCapabilities_Type()
)
restPortCapabilities.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPortCapabilities.setStatus("mandatory")
_RestBundleTable_Object = MibTable
restBundleTable = _RestBundleTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6)
)
if mibBuilder.loadTexts:
    restBundleTable.setStatus("mandatory")
_RestBundleEntry_Object = MibTableRow
restBundleEntry = _RestBundleEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1)
)
restBundleEntry.setIndexNames(
    (0, "STMIB", "restBundleAddr"),
)
if mibBuilder.loadTexts:
    restBundleEntry.setStatus("mandatory")
_RestBundleAddr_Type = BundleAddr
_RestBundleAddr_Object = MibTableColumn
restBundleAddr = _RestBundleAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 1),
    _RestBundleAddr_Type()
)
restBundleAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restBundleAddr.setStatus("mandatory")


class _RestBundleDiagnostics_Type(Integer32):
    """Custom type restBundleDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("insert", 4),
          ("remove", 5),
          ("reset", 6),
          ("update", 7))
    )


_RestBundleDiagnostics_Type.__name__ = "Integer32"
_RestBundleDiagnostics_Object = MibTableColumn
restBundleDiagnostics = _RestBundleDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 2),
    _RestBundleDiagnostics_Type()
)
restBundleDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restBundleDiagnostics.setStatus("mandatory")


class _RestBundleStatus_Type(Integer32):
    """Custom type restBundleStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              50)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("inactive", 2),
          ("unknown", 50))
    )


_RestBundleStatus_Type.__name__ = "Integer32"
_RestBundleStatus_Object = MibTableColumn
restBundleStatus = _RestBundleStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 3),
    _RestBundleStatus_Type()
)
restBundleStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restBundleStatus.setStatus("mandatory")


class _RestBundleBwCntStatus_Type(Integer32):
    """Custom type restBundleBwCntStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              50)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 3),
          ("inactive", 2),
          ("unknown", 50))
    )


_RestBundleBwCntStatus_Type.__name__ = "Integer32"
_RestBundleBwCntStatus_Object = MibTableColumn
restBundleBwCntStatus = _RestBundleBwCntStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 4),
    _RestBundleBwCntStatus_Type()
)
restBundleBwCntStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restBundleBwCntStatus.setStatus("mandatory")


class _RestBundleMillwattSignalABCD_Type(Integer32):
    """Custom type restBundleMillwattSignalABCD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("a0-b0-c0-d0", 1),
          ("a0-b0-c0-d1", 2),
          ("a0-b0-c1-d0", 3),
          ("a0-b0-c1-d1", 4),
          ("a0-b1-c0-d0", 5),
          ("a0-b1-c0-d1", 6),
          ("a0-b1-c1-d0", 7),
          ("a0-b1-c1-d1", 8),
          ("a1-b0-c0-d0", 9),
          ("a1-b0-c0-d1", 10),
          ("a1-b0-c1-d0", 11),
          ("a1-b0-c1-d1", 12),
          ("a1-b1-c0-d0", 13),
          ("a1-b1-c0-d1", 14),
          ("a1-b1-c1-d0", 15),
          ("a1-b1-c1-d1", 16),
          ("disable", 255))
    )


_RestBundleMillwattSignalABCD_Type.__name__ = "Integer32"
_RestBundleMillwattSignalABCD_Object = MibTableColumn
restBundleMillwattSignalABCD = _RestBundleMillwattSignalABCD_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 5),
    _RestBundleMillwattSignalABCD_Type()
)
restBundleMillwattSignalABCD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restBundleMillwattSignalABCD.setStatus("mandatory")


class _RestBundleDS0Map_Type(OctetString):
    """Custom type restBundleDS0Map based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RestBundleDS0Map_Type.__name__ = "OctetString"
_RestBundleDS0Map_Object = MibTableColumn
restBundleDS0Map = _RestBundleDS0Map_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 6),
    _RestBundleDS0Map_Type()
)
restBundleDS0Map.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restBundleDS0Map.setStatus("mandatory")


class _RestBundleSignalA_Type(Integer32):
    """Custom type restBundleSignalA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("off", 2),
          ("on", 1))
    )


_RestBundleSignalA_Type.__name__ = "Integer32"
_RestBundleSignalA_Object = MibTableColumn
restBundleSignalA = _RestBundleSignalA_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 7),
    _RestBundleSignalA_Type()
)
restBundleSignalA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restBundleSignalA.setStatus("mandatory")


class _RestBundleSignalB_Type(Integer32):
    """Custom type restBundleSignalB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("off", 2),
          ("on", 1))
    )


_RestBundleSignalB_Type.__name__ = "Integer32"
_RestBundleSignalB_Object = MibTableColumn
restBundleSignalB = _RestBundleSignalB_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 8),
    _RestBundleSignalB_Type()
)
restBundleSignalB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restBundleSignalB.setStatus("mandatory")


class _RestBundleSignalC_Type(Integer32):
    """Custom type restBundleSignalC based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("off", 2),
          ("on", 1))
    )


_RestBundleSignalC_Type.__name__ = "Integer32"
_RestBundleSignalC_Object = MibTableColumn
restBundleSignalC = _RestBundleSignalC_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 9),
    _RestBundleSignalC_Type()
)
restBundleSignalC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restBundleSignalC.setStatus("mandatory")


class _RestBundleSignalD_Type(Integer32):
    """Custom type restBundleSignalD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("off", 2),
          ("on", 1))
    )


_RestBundleSignalD_Type.__name__ = "Integer32"
_RestBundleSignalD_Object = MibTableColumn
restBundleSignalD = _RestBundleSignalD_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 10),
    _RestBundleSignalD_Type()
)
restBundleSignalD.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restBundleSignalD.setStatus("mandatory")


class _RestBundleOutSigA_Type(Integer32):
    """Custom type restBundleOutSigA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("off", 2),
          ("on", 1))
    )


_RestBundleOutSigA_Type.__name__ = "Integer32"
_RestBundleOutSigA_Object = MibTableColumn
restBundleOutSigA = _RestBundleOutSigA_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 11),
    _RestBundleOutSigA_Type()
)
restBundleOutSigA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restBundleOutSigA.setStatus("mandatory")


class _RestBundleOutSigB_Type(Integer32):
    """Custom type restBundleOutSigB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("off", 2),
          ("on", 1))
    )


_RestBundleOutSigB_Type.__name__ = "Integer32"
_RestBundleOutSigB_Object = MibTableColumn
restBundleOutSigB = _RestBundleOutSigB_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 12),
    _RestBundleOutSigB_Type()
)
restBundleOutSigB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restBundleOutSigB.setStatus("mandatory")


class _RestBundleOutSigC_Type(Integer32):
    """Custom type restBundleOutSigC based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("off", 2),
          ("on", 1))
    )


_RestBundleOutSigC_Type.__name__ = "Integer32"
_RestBundleOutSigC_Object = MibTableColumn
restBundleOutSigC = _RestBundleOutSigC_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 13),
    _RestBundleOutSigC_Type()
)
restBundleOutSigC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restBundleOutSigC.setStatus("mandatory")


class _RestBundleOutSigD_Type(Integer32):
    """Custom type restBundleOutSigD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("off", 2),
          ("on", 1))
    )


_RestBundleOutSigD_Type.__name__ = "Integer32"
_RestBundleOutSigD_Object = MibTableColumn
restBundleOutSigD = _RestBundleOutSigD_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 6, 1, 14),
    _RestBundleOutSigD_Type()
)
restBundleOutSigD.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restBundleOutSigD.setStatus("mandatory")
_RestINLTable_Object = MibTable
restINLTable = _RestINLTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7)
)
if mibBuilder.loadTexts:
    restINLTable.setStatus("mandatory")
_RestINLEntry_Object = MibTableRow
restINLEntry = _RestINLEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1)
)
restINLEntry.setIndexNames(
    (0, "STMIB", "restINLNumber"),
)
if mibBuilder.loadTexts:
    restINLEntry.setStatus("mandatory")


class _RestINLNumber_Type(Integer32):
    """Custom type restINLNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_RestINLNumber_Type.__name__ = "Integer32"
_RestINLNumber_Object = MibTableColumn
restINLNumber = _RestINLNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 1),
    _RestINLNumber_Type()
)
restINLNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLNumber.setStatus("mandatory")
_RestINLAddr_Type = BundleAddr
_RestINLAddr_Object = MibTableColumn
restINLAddr = _RestINLAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 2),
    _RestINLAddr_Type()
)
restINLAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLAddr.setStatus("mandatory")


class _RestINLDiagnostics_Type(Integer32):
    """Custom type restINLDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5,
              6,
              7,
              8,
              9,
              63,
              64,
              79)
        )
    )
    namedValues = NamedValues(
        *(("clearINLBERWindowFill", 64),
          ("clearINLTotalCRCErrors", 63),
          ("clearLoopback", 8),
          ("disable", 2),
          ("enable", 1),
          ("insert", 4),
          ("remove", 5),
          ("reset", 6),
          ("restart", 79),
          ("setLoopback", 9),
          ("update", 7))
    )


_RestINLDiagnostics_Type.__name__ = "Integer32"
_RestINLDiagnostics_Object = MibTableColumn
restINLDiagnostics = _RestINLDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 3),
    _RestINLDiagnostics_Type()
)
restINLDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restINLDiagnostics.setStatus("mandatory")


class _RestINLStatus_Type(Integer32):
    """Custom type restINLStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(33,
              38,
              39,
              51)
        )
    )
    namedValues = NamedValues(
        *(("inService", 38),
          ("maintenance", 51),
          ("outOfService", 39),
          ("pending", 33))
    )


_RestINLStatus_Type.__name__ = "Integer32"
_RestINLStatus_Object = MibTableColumn
restINLStatus = _RestINLStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 4),
    _RestINLStatus_Type()
)
restINLStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLStatus.setStatus("mandatory")


class _RestINLSubStatus_Type(Integer32):
    """Custom type restINLSubStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RestINLSubStatus_Type.__name__ = "Integer32"
_RestINLSubStatus_Object = MibTableColumn
restINLSubStatus = _RestINLSubStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 5),
    _RestINLSubStatus_Type()
)
restINLSubStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLSubStatus.setStatus("mandatory")


class _RestINLLocalBERLevel_Type(Integer32):
    """Custom type restINLLocalBERLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RestINLLocalBERLevel_Type.__name__ = "Integer32"
_RestINLLocalBERLevel_Object = MibTableColumn
restINLLocalBERLevel = _RestINLLocalBERLevel_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 6),
    _RestINLLocalBERLevel_Type()
)
restINLLocalBERLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLLocalBERLevel.setStatus("mandatory")


class _RestINLLocalBERQuality_Type(Integer32):
    """Custom type restINLLocalBERQuality based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("accepted", 1),
          ("notCalculatedYet", 3),
          ("unaccepted", 2))
    )


_RestINLLocalBERQuality_Type.__name__ = "Integer32"
_RestINLLocalBERQuality_Object = MibTableColumn
restINLLocalBERQuality = _RestINLLocalBERQuality_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 7),
    _RestINLLocalBERQuality_Type()
)
restINLLocalBERQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLLocalBERQuality.setStatus("mandatory")
_RestINLRemoteNodeID_Type = NodeAddr
_RestINLRemoteNodeID_Object = MibTableColumn
restINLRemoteNodeID = _RestINLRemoteNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 8),
    _RestINLRemoteNodeID_Type()
)
restINLRemoteNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLRemoteNodeID.setStatus("mandatory")
_RestINLRemotePortAddr_Type = BundleAddr
_RestINLRemotePortAddr_Object = MibTableColumn
restINLRemotePortAddr = _RestINLRemotePortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 9),
    _RestINLRemotePortAddr_Type()
)
restINLRemotePortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLRemotePortAddr.setStatus("mandatory")


class _RestINLRemoteINLID_Type(Integer32):
    """Custom type restINLRemoteINLID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_RestINLRemoteINLID_Type.__name__ = "Integer32"
_RestINLRemoteINLID_Object = MibTableColumn
restINLRemoteINLID = _RestINLRemoteINLID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 10),
    _RestINLRemoteINLID_Type()
)
restINLRemoteINLID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLRemoteINLID.setStatus("mandatory")


class _RestINLRemoteBERLevel_Type(Integer32):
    """Custom type restINLRemoteBERLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_RestINLRemoteBERLevel_Type.__name__ = "Integer32"
_RestINLRemoteBERLevel_Object = MibTableColumn
restINLRemoteBERLevel = _RestINLRemoteBERLevel_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 11),
    _RestINLRemoteBERLevel_Type()
)
restINLRemoteBERLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLRemoteBERLevel.setStatus("mandatory")


class _RestINLRemoteBERQuality_Type(Integer32):
    """Custom type restINLRemoteBERQuality based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("accepted", 1),
          ("notCalculatedYet", 3),
          ("unaccepted", 2))
    )


_RestINLRemoteBERQuality_Type.__name__ = "Integer32"
_RestINLRemoteBERQuality_Object = MibTableColumn
restINLRemoteBERQuality = _RestINLRemoteBERQuality_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 12),
    _RestINLRemoteBERQuality_Type()
)
restINLRemoteBERQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLRemoteBERQuality.setStatus("mandatory")
_RestINLAvailableTDMBw_Type = Integer32
_RestINLAvailableTDMBw_Object = MibTableColumn
restINLAvailableTDMBw = _RestINLAvailableTDMBw_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 13),
    _RestINLAvailableTDMBw_Type()
)
restINLAvailableTDMBw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLAvailableTDMBw.setStatus("mandatory")
_RestINLAvailablePacketBw_Type = Integer32
_RestINLAvailablePacketBw_Object = MibTableColumn
restINLAvailablePacketBw = _RestINLAvailablePacketBw_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 14),
    _RestINLAvailablePacketBw_Type()
)
restINLAvailablePacketBw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLAvailablePacketBw.setStatus("mandatory")


class _RestINLLoopbackDuration_Type(Integer32):
    """Custom type restINLLoopbackDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RestINLLoopbackDuration_Type.__name__ = "Integer32"
_RestINLLoopbackDuration_Object = MibTableColumn
restINLLoopbackDuration = _RestINLLoopbackDuration_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 15),
    _RestINLLoopbackDuration_Type()
)
restINLLoopbackDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restINLLoopbackDuration.setStatus("mandatory")


class _RestINLLoopbackStatus_Type(Integer32):
    """Custom type restINLLoopbackStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("external", 4),
          ("none", 1),
          ("originator", 2),
          ("terminator", 3))
    )


_RestINLLoopbackStatus_Type.__name__ = "Integer32"
_RestINLLoopbackStatus_Object = MibTableColumn
restINLLoopbackStatus = _RestINLLoopbackStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 16),
    _RestINLLoopbackStatus_Type()
)
restINLLoopbackStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLLoopbackStatus.setStatus("mandatory")
_RestINLTotalCRCErrors_Type = Integer32
_RestINLTotalCRCErrors_Object = MibTableColumn
restINLTotalCRCErrors = _RestINLTotalCRCErrors_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 17),
    _RestINLTotalCRCErrors_Type()
)
restINLTotalCRCErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLTotalCRCErrors.setStatus("mandatory")


class _RestINLBERWindowFill_Type(DisplayString):
    """Custom type restINLBERWindowFill based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 5),
    )


_RestINLBERWindowFill_Type.__name__ = "DisplayString"
_RestINLBERWindowFill_Object = MibTableColumn
restINLBERWindowFill = _RestINLBERWindowFill_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 18),
    _RestINLBERWindowFill_Type()
)
restINLBERWindowFill.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLBERWindowFill.setStatus("mandatory")
_RestINLNumTdmCh_Type = Integer32
_RestINLNumTdmCh_Object = MibTableColumn
restINLNumTdmCh = _RestINLNumTdmCh_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 19),
    _RestINLNumTdmCh_Type()
)
restINLNumTdmCh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLNumTdmCh.setStatus("mandatory")
_RestINLNumFrCh_Type = Integer32
_RestINLNumFrCh_Object = MibTableColumn
restINLNumFrCh = _RestINLNumFrCh_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 20),
    _RestINLNumFrCh_Type()
)
restINLNumFrCh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLNumFrCh.setStatus("mandatory")
_RestINLSpeed_Type = Integer32
_RestINLSpeed_Object = MibTableColumn
restINLSpeed = _RestINLSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 21),
    _RestINLSpeed_Type()
)
restINLSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLSpeed.setStatus("mandatory")
_RestINLNumSaf_Type = Integer32
_RestINLNumSaf_Object = MibTableColumn
restINLNumSaf = _RestINLNumSaf_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 22),
    _RestINLNumSaf_Type()
)
restINLNumSaf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLNumSaf.setStatus("mandatory")


class _RestINLLOSMode_Type(Integer32):
    """Custom type restINLLOSMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("localInSync", 2),
          ("localOutOfSync", 1),
          ("notApplicable", 255))
    )


_RestINLLOSMode_Type.__name__ = "Integer32"
_RestINLLOSMode_Object = MibTableColumn
restINLLOSMode = _RestINLLOSMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 23),
    _RestINLLOSMode_Type()
)
restINLLOSMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLLOSMode.setStatus("mandatory")


class _RestINLBusFrameMode_Type(Integer32):
    """Custom type restINLBusFrameMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("addbackMode", 1),
          ("fallbackMode", 2),
          ("notApplicable", 255))
    )


_RestINLBusFrameMode_Type.__name__ = "Integer32"
_RestINLBusFrameMode_Object = MibTableColumn
restINLBusFrameMode = _RestINLBusFrameMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 7, 1, 24),
    _RestINLBusFrameMode_Type()
)
restINLBusFrameMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLBusFrameMode.setStatus("mandatory")
_RestINLContentsTable_Object = MibTable
restINLContentsTable = _RestINLContentsTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8)
)
if mibBuilder.loadTexts:
    restINLContentsTable.setStatus("mandatory")
_RestINLContentsEntry_Object = MibTableRow
restINLContentsEntry = _RestINLContentsEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1)
)
restINLContentsEntry.setIndexNames(
    (0, "STMIB", "restINLContentsINLNumber"),
    (0, "STMIB", "restINLContentsSeqNumber"),
)
if mibBuilder.loadTexts:
    restINLContentsEntry.setStatus("mandatory")


class _RestINLContentsINLNumber_Type(Integer32):
    """Custom type restINLContentsINLNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_RestINLContentsINLNumber_Type.__name__ = "Integer32"
_RestINLContentsINLNumber_Object = MibTableColumn
restINLContentsINLNumber = _RestINLContentsINLNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1, 1),
    _RestINLContentsINLNumber_Type()
)
restINLContentsINLNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLContentsINLNumber.setStatus("mandatory")


class _RestINLContentsSeqNumber_Type(Integer32):
    """Custom type restINLContentsSeqNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RestINLContentsSeqNumber_Type.__name__ = "Integer32"
_RestINLContentsSeqNumber_Object = MibTableColumn
restINLContentsSeqNumber = _RestINLContentsSeqNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1, 2),
    _RestINLContentsSeqNumber_Type()
)
restINLContentsSeqNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLContentsSeqNumber.setStatus("mandatory")
_RestINLContentsSourceNodeID_Type = NodeAddr
_RestINLContentsSourceNodeID_Object = MibTableColumn
restINLContentsSourceNodeID = _RestINLContentsSourceNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1, 3),
    _RestINLContentsSourceNodeID_Type()
)
restINLContentsSourceNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLContentsSourceNodeID.setStatus("mandatory")
_RestINLContentsSourceAddr_Type = ChannelAddr
_RestINLContentsSourceAddr_Object = MibTableColumn
restINLContentsSourceAddr = _RestINLContentsSourceAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1, 4),
    _RestINLContentsSourceAddr_Type()
)
restINLContentsSourceAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLContentsSourceAddr.setStatus("mandatory")
_RestINLContentsDestNodeID_Type = NodeAddr
_RestINLContentsDestNodeID_Object = MibTableColumn
restINLContentsDestNodeID = _RestINLContentsDestNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1, 5),
    _RestINLContentsDestNodeID_Type()
)
restINLContentsDestNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLContentsDestNodeID.setStatus("mandatory")
_RestINLContentsDestAddr_Type = ChannelAddr
_RestINLContentsDestAddr_Object = MibTableColumn
restINLContentsDestAddr = _RestINLContentsDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 8, 1, 6),
    _RestINLContentsDestAddr_Type()
)
restINLContentsDestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restINLContentsDestAddr.setStatus("mandatory")
_RestChannel_ObjectIdentity = ObjectIdentity
restChannel = _RestChannel_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9)
)
_RestChannelTable_Object = MibTable
restChannelTable = _RestChannelTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1)
)
if mibBuilder.loadTexts:
    restChannelTable.setStatus("mandatory")
_RestChannelEntry_Object = MibTableRow
restChannelEntry = _RestChannelEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1)
)
restChannelEntry.setIndexNames(
    (0, "STMIB", "restChannelStatusAddr"),
)
if mibBuilder.loadTexts:
    restChannelEntry.setStatus("mandatory")
_RestChannelStatusAddr_Type = ChannelStatusAddr
_RestChannelStatusAddr_Object = MibTableColumn
restChannelStatusAddr = _RestChannelStatusAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 1),
    _RestChannelStatusAddr_Type()
)
restChannelStatusAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelStatusAddr.setStatus("mandatory")
_RestChannelSourceNodeID_Type = NodeAddr
_RestChannelSourceNodeID_Object = MibTableColumn
restChannelSourceNodeID = _RestChannelSourceNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 2),
    _RestChannelSourceNodeID_Type()
)
restChannelSourceNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelSourceNodeID.setStatus("mandatory")
_RestChannelSourceAddr_Type = ChannelAddr
_RestChannelSourceAddr_Object = MibTableColumn
restChannelSourceAddr = _RestChannelSourceAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 3),
    _RestChannelSourceAddr_Type()
)
restChannelSourceAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelSourceAddr.setStatus("mandatory")
_RestChannelDestNodeID_Type = NodeAddr
_RestChannelDestNodeID_Object = MibTableColumn
restChannelDestNodeID = _RestChannelDestNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 4),
    _RestChannelDestNodeID_Type()
)
restChannelDestNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelDestNodeID.setStatus("mandatory")
_RestChannelDestAddr_Type = ChannelAddr
_RestChannelDestAddr_Object = MibTableColumn
restChannelDestAddr = _RestChannelDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 5),
    _RestChannelDestAddr_Type()
)
restChannelDestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelDestAddr.setStatus("mandatory")


class _RestChannelDiagnostics_Type(Integer32):
    """Custom type restChannelDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(6,
              8,
              9,
              35,
              36)
        )
    )
    namedValues = NamedValues(
        *(("clearLoopback", 8),
          ("connect", 35),
          ("disconnect", 36),
          ("reset", 6),
          ("setLoopback", 9))
    )


_RestChannelDiagnostics_Type.__name__ = "Integer32"
_RestChannelDiagnostics_Object = MibTableColumn
restChannelDiagnostics = _RestChannelDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 6),
    _RestChannelDiagnostics_Type()
)
restChannelDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restChannelDiagnostics.setStatus("mandatory")


class _RestChannelDirectNodeConnect_Type(OctetString):
    """Custom type restChannelDirectNodeConnect based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 36),
    )


_RestChannelDirectNodeConnect_Type.__name__ = "OctetString"
_RestChannelDirectNodeConnect_Object = MibTableColumn
restChannelDirectNodeConnect = _RestChannelDirectNodeConnect_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 7),
    _RestChannelDirectNodeConnect_Type()
)
restChannelDirectNodeConnect.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restChannelDirectNodeConnect.setStatus("mandatory")


class _RestChannelDirectPathConnect_Type(OctetString):
    """Custom type restChannelDirectPathConnect based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 88),
    )


_RestChannelDirectPathConnect_Type.__name__ = "OctetString"
_RestChannelDirectPathConnect_Object = MibTableColumn
restChannelDirectPathConnect = _RestChannelDirectPathConnect_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 8),
    _RestChannelDirectPathConnect_Type()
)
restChannelDirectPathConnect.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restChannelDirectPathConnect.setStatus("mandatory")


class _RestChannelStatus_Type(Integer32):
    """Custom type restChannelStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(9,
              30,
              33,
              34,
              35,
              36,
              37,
              41,
              42,
              76,
              77,
              78,
              121,
              132)
        )
    )
    namedValues = NamedValues(
        *(("connected", 35),
          ("connecting", 34),
          ("disconnected", 36),
          ("disconnecting", 37),
          ("loopback", 9),
          ("pending", 33),
          ("retryAuto", 121),
          ("retryDestIoInUse", 77),
          ("retryDestIoUnusable", 76),
          ("retryExceedShareBW", 78),
          ("retryNoBW", 41),
          ("retryNoDlci", 132),
          ("retryNoRoute", 42),
          ("retryNoServer", 30))
    )


_RestChannelStatus_Type.__name__ = "Integer32"
_RestChannelStatus_Object = MibTableColumn
restChannelStatus = _RestChannelStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 9),
    _RestChannelStatus_Type()
)
restChannelStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelStatus.setStatus("mandatory")


class _RestChannelSubStatus_Type(Integer32):
    """Custom type restChannelSubStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(36,
              55,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175)
        )
    )
    namedValues = NamedValues(
        *(("noBypassServer", 151),
          ("noDestAgmSaf", 159),
          ("noDestAgmScf", 161),
          ("noDestAsmSaf", 163),
          ("noDestAsmScf", 165),
          ("noDestLgmSaf", 167),
          ("noDestLgmScf", 169),
          ("noDestRtmSaf", 171),
          ("noDestRtmScf", 173),
          ("noDestServer", 153),
          ("noDestSgmSaf", 155),
          ("noDestSgmScf", 157),
          ("noDestVoicePort", 175),
          ("noSrcAgmSaf", 158),
          ("noSrcAgmScf", 160),
          ("noSrcAsmSaf", 162),
          ("noSrcAsmScf", 164),
          ("noSrcLgmSaf", 166),
          ("noSrcLgmScf", 168),
          ("noSrcRtmSaf", 170),
          ("noSrcRtmScf", 172),
          ("noSrcServer", 152),
          ("noSrcSgmSaf", 154),
          ("noSrcSgmScf", 156),
          ("noSrcVoicePort", 174),
          ("none", 36),
          ("waitForRTSAck", 55))
    )


_RestChannelSubStatus_Type.__name__ = "Integer32"
_RestChannelSubStatus_Object = MibTableColumn
restChannelSubStatus = _RestChannelSubStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 10),
    _RestChannelSubStatus_Type()
)
restChannelSubStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelSubStatus.setStatus("mandatory")


class _RestChannelType_Type(Integer32):
    """Custom type restChannelType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5,
              9)
        )
    )
    namedValues = NamedValues(
        *(("packet", 2),
          ("subrate", 4),
          ("tdm", 1),
          ("trunkGroup", 5),
          ("voice", 9))
    )


_RestChannelType_Type.__name__ = "Integer32"
_RestChannelType_Object = MibTableColumn
restChannelType = _RestChannelType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 11),
    _RestChannelType_Type()
)
restChannelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelType.setStatus("mandatory")
_RestChannelBandwidth_Type = Integer32
_RestChannelBandwidth_Object = MibTableColumn
restChannelBandwidth = _RestChannelBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 12),
    _RestChannelBandwidth_Type()
)
restChannelBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelBandwidth.setStatus("mandatory")
_RestChannelBypassCount_Type = Integer32
_RestChannelBypassCount_Object = MibTableColumn
restChannelBypassCount = _RestChannelBypassCount_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 13),
    _RestChannelBypassCount_Type()
)
restChannelBypassCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelBypassCount.setStatus("mandatory")


class _RestChannelPath_Type(OctetString):
    """Custom type restChannelPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 85),
    )


_RestChannelPath_Type.__name__ = "OctetString"
_RestChannelPath_Object = MibTableColumn
restChannelPath = _RestChannelPath_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 14),
    _RestChannelPath_Type()
)
restChannelPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelPath.setStatus("deprecated")


class _RestChannelRouteQuality_Type(Integer32):
    """Custom type restChannelRouteQuality based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(56,
              57)
        )
    )
    namedValues = NamedValues(
        *(("asSpecified", 57),
          ("overriden", 56))
    )


_RestChannelRouteQuality_Type.__name__ = "Integer32"
_RestChannelRouteQuality_Object = MibTableColumn
restChannelRouteQuality = _RestChannelRouteQuality_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 15),
    _RestChannelRouteQuality_Type()
)
restChannelRouteQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelRouteQuality.setStatus("mandatory")
_RestChannelConnectTime_Type = Integer32
_RestChannelConnectTime_Object = MibTableColumn
restChannelConnectTime = _RestChannelConnectTime_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 16),
    _RestChannelConnectTime_Type()
)
restChannelConnectTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelConnectTime.setStatus("mandatory")
_RestChannelRetryCounter_Type = Integer32
_RestChannelRetryCounter_Object = MibTableColumn
restChannelRetryCounter = _RestChannelRetryCounter_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 17),
    _RestChannelRetryCounter_Type()
)
restChannelRetryCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelRetryCounter.setStatus("mandatory")
_RestChannelLoopbackNode_Type = NodeAddr
_RestChannelLoopbackNode_Object = MibTableColumn
restChannelLoopbackNode = _RestChannelLoopbackNode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 18),
    _RestChannelLoopbackNode_Type()
)
restChannelLoopbackNode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelLoopbackNode.setStatus("mandatory")


class _RestChannelNodalSubratePath_Type(OctetString):
    """Custom type restChannelNodalSubratePath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 96),
    )


_RestChannelNodalSubratePath_Type.__name__ = "OctetString"
_RestChannelNodalSubratePath_Object = MibTableColumn
restChannelNodalSubratePath = _RestChannelNodalSubratePath_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 19),
    _RestChannelNodalSubratePath_Type()
)
restChannelNodalSubratePath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelNodalSubratePath.setStatus("mandatory")
_RestChannelDChOrigNode_Type = NodeAddr
_RestChannelDChOrigNode_Object = MibTableColumn
restChannelDChOrigNode = _RestChannelDChOrigNode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 20),
    _RestChannelDChOrigNode_Type()
)
restChannelDChOrigNode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelDChOrigNode.setStatus("mandatory")
_RestChannelDChOrigAddr_Type = PortAddr
_RestChannelDChOrigAddr_Object = MibTableColumn
restChannelDChOrigAddr = _RestChannelDChOrigAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 21),
    _RestChannelDChOrigAddr_Type()
)
restChannelDChOrigAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelDChOrigAddr.setStatus("mandatory")
_RestChannelDChTermNode_Type = NodeAddr
_RestChannelDChTermNode_Object = MibTableColumn
restChannelDChTermNode = _RestChannelDChTermNode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 22),
    _RestChannelDChTermNode_Type()
)
restChannelDChTermNode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelDChTermNode.setStatus("mandatory")
_RestChannelDChTermAddr_Type = PortAddr
_RestChannelDChTermAddr_Object = MibTableColumn
restChannelDChTermAddr = _RestChannelDChTermAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 23),
    _RestChannelDChTermAddr_Type()
)
restChannelDChTermAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelDChTermAddr.setStatus("mandatory")
_RestChannelLoopbackModAddr_Type = SlotAddr
_RestChannelLoopbackModAddr_Object = MibTableColumn
restChannelLoopbackModAddr = _RestChannelLoopbackModAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 24),
    _RestChannelLoopbackModAddr_Type()
)
restChannelLoopbackModAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restChannelLoopbackModAddr.setStatus("mandatory")


class _RestChannelNetworkPath_Type(OctetString):
    """Custom type restChannelNetworkPath based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 204),
    )


_RestChannelNetworkPath_Type.__name__ = "OctetString"
_RestChannelNetworkPath_Object = MibTableColumn
restChannelNetworkPath = _RestChannelNetworkPath_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 1, 1, 25),
    _RestChannelNetworkPath_Type()
)
restChannelNetworkPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restChannelNetworkPath.setStatus("mandatory")
_RestPktChannelTable_Object = MibTable
restPktChannelTable = _RestPktChannelTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2)
)
if mibBuilder.loadTexts:
    restPktChannelTable.setStatus("mandatory")
_RestPktChannelEntry_Object = MibTableRow
restPktChannelEntry = _RestPktChannelEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1)
)
restPktChannelEntry.setIndexNames(
    (0, "STMIB", "restPktChannelAddr"),
)
if mibBuilder.loadTexts:
    restPktChannelEntry.setStatus("mandatory")
_RestPktChannelAddr_Type = ChannelAddr
_RestPktChannelAddr_Object = MibTableColumn
restPktChannelAddr = _RestPktChannelAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 1),
    _RestPktChannelAddr_Type()
)
restPktChannelAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChannelAddr.setStatus("mandatory")


class _RestPktChannelDiagnostics_Type(Integer32):
    """Custom type restPktChannelDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(11,
              12,
              13,
              15)
        )
    )
    namedValues = NamedValues(
        *(("disablePktPing", 15),
          ("disablePktTestGen", 13),
          ("enablePktTestGenLocal", 11),
          ("enablePktTestGenRemote", 12))
    )


_RestPktChannelDiagnostics_Type.__name__ = "Integer32"
_RestPktChannelDiagnostics_Object = MibTableColumn
restPktChannelDiagnostics = _RestPktChannelDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 2),
    _RestPktChannelDiagnostics_Type()
)
restPktChannelDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restPktChannelDiagnostics.setStatus("mandatory")


class _RestPktChannelTestGenStatus_Type(Integer32):
    """Custom type restPktChannelTestGenStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(44,
              45,
              46)
        )
    )
    namedValues = NamedValues(
        *(("activeLocal", 44),
          ("activeRemote", 45),
          ("inactive", 46))
    )


_RestPktChannelTestGenStatus_Type.__name__ = "Integer32"
_RestPktChannelTestGenStatus_Object = MibTableColumn
restPktChannelTestGenStatus = _RestPktChannelTestGenStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 3),
    _RestPktChannelTestGenStatus_Type()
)
restPktChannelTestGenStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChannelTestGenStatus.setStatus("mandatory")
_RestPktChannelTestGenFrSent_Type = Integer32
_RestPktChannelTestGenFrSent_Object = MibTableColumn
restPktChannelTestGenFrSent = _RestPktChannelTestGenFrSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 4),
    _RestPktChannelTestGenFrSent_Type()
)
restPktChannelTestGenFrSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChannelTestGenFrSent.setStatus("mandatory")
_RestPktChannelTestGenFrRcvOK_Type = Integer32
_RestPktChannelTestGenFrRcvOK_Object = MibTableColumn
restPktChannelTestGenFrRcvOK = _RestPktChannelTestGenFrRcvOK_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 5),
    _RestPktChannelTestGenFrRcvOK_Type()
)
restPktChannelTestGenFrRcvOK.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChannelTestGenFrRcvOK.setStatus("mandatory")
_RestPktChannelTestGenFrRcvErr_Type = Integer32
_RestPktChannelTestGenFrRcvErr_Object = MibTableColumn
restPktChannelTestGenFrRcvErr = _RestPktChannelTestGenFrRcvErr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 6),
    _RestPktChannelTestGenFrRcvErr_Type()
)
restPktChannelTestGenFrRcvErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChannelTestGenFrRcvErr.setStatus("mandatory")
_RestPktChannelTestGenFrTimeOut_Type = Integer32
_RestPktChannelTestGenFrTimeOut_Object = MibTableColumn
restPktChannelTestGenFrTimeOut = _RestPktChannelTestGenFrTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 7),
    _RestPktChannelTestGenFrTimeOut_Type()
)
restPktChannelTestGenFrTimeOut.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChannelTestGenFrTimeOut.setStatus("mandatory")


class _RestPktChannelPingStatus_Type(Integer32):
    """Custom type restPktChannelPingStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("inactive", 2))
    )


_RestPktChannelPingStatus_Type.__name__ = "Integer32"
_RestPktChannelPingStatus_Object = MibTableColumn
restPktChannelPingStatus = _RestPktChannelPingStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 8),
    _RestPktChannelPingStatus_Type()
)
restPktChannelPingStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChannelPingStatus.setStatus("mandatory")


class _RestPktChannelPingNumTimes_Type(Integer32):
    """Custom type restPktChannelPingNumTimes based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RestPktChannelPingNumTimes_Type.__name__ = "Integer32"
_RestPktChannelPingNumTimes_Object = MibTableColumn
restPktChannelPingNumTimes = _RestPktChannelPingNumTimes_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 9),
    _RestPktChannelPingNumTimes_Type()
)
restPktChannelPingNumTimes.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restPktChannelPingNumTimes.setStatus("mandatory")


class _RestPktChannelPingNumRemaining_Type(Integer32):
    """Custom type restPktChannelPingNumRemaining based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RestPktChannelPingNumRemaining_Type.__name__ = "Integer32"
_RestPktChannelPingNumRemaining_Object = MibTableColumn
restPktChannelPingNumRemaining = _RestPktChannelPingNumRemaining_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 10),
    _RestPktChannelPingNumRemaining_Type()
)
restPktChannelPingNumRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChannelPingNumRemaining.setStatus("mandatory")


class _RestPktChannelCommStatus_Type(Integer32):
    """Custom type restPktChannelCommStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("inactive", 2),
          ("notApplicable", 255))
    )


_RestPktChannelCommStatus_Type.__name__ = "Integer32"
_RestPktChannelCommStatus_Object = MibTableColumn
restPktChannelCommStatus = _RestPktChannelCommStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 2, 1, 11),
    _RestPktChannelCommStatus_Type()
)
restPktChannelCommStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChannelCommStatus.setStatus("mandatory")
_RestPktChPingTable_Object = MibTable
restPktChPingTable = _RestPktChPingTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3)
)
if mibBuilder.loadTexts:
    restPktChPingTable.setStatus("mandatory")
_RestPktChPingEntry_Object = MibTableRow
restPktChPingEntry = _RestPktChPingEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3, 1)
)
restPktChPingEntry.setIndexNames(
    (0, "STMIB", "restPktChPingAddr"),
    (0, "STMIB", "restPktChPingHopNumber"),
)
if mibBuilder.loadTexts:
    restPktChPingEntry.setStatus("mandatory")
_RestPktChPingAddr_Type = ChannelAddr
_RestPktChPingAddr_Object = MibTableColumn
restPktChPingAddr = _RestPktChPingAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3, 1, 1),
    _RestPktChPingAddr_Type()
)
restPktChPingAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChPingAddr.setStatus("mandatory")


class _RestPktChPingHopNumber_Type(Integer32):
    """Custom type restPktChPingHopNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 17),
    )


_RestPktChPingHopNumber_Type.__name__ = "Integer32"
_RestPktChPingHopNumber_Object = MibTableColumn
restPktChPingHopNumber = _RestPktChPingHopNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3, 1, 2),
    _RestPktChPingHopNumber_Type()
)
restPktChPingHopNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChPingHopNumber.setStatus("mandatory")
_RestPktChPingDelay_Type = Integer32
_RestPktChPingDelay_Object = MibTableColumn
restPktChPingDelay = _RestPktChPingDelay_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3, 1, 3),
    _RestPktChPingDelay_Type()
)
restPktChPingDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChPingDelay.setStatus("mandatory")


class _RestPktChPingOrigTermCong_Type(Integer32):
    """Custom type restPktChPingOrigTermCong based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 4),
          ("normal", 1),
          ("red", 3),
          ("yellow", 2))
    )


_RestPktChPingOrigTermCong_Type.__name__ = "Integer32"
_RestPktChPingOrigTermCong_Object = MibTableColumn
restPktChPingOrigTermCong = _RestPktChPingOrigTermCong_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3, 1, 4),
    _RestPktChPingOrigTermCong_Type()
)
restPktChPingOrigTermCong.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChPingOrigTermCong.setStatus("mandatory")


class _RestPktChPingTermOrigCong_Type(Integer32):
    """Custom type restPktChPingTermOrigCong based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 4),
          ("normal", 1),
          ("red", 3),
          ("yellow", 2))
    )


_RestPktChPingTermOrigCong_Type.__name__ = "Integer32"
_RestPktChPingTermOrigCong_Object = MibTableColumn
restPktChPingTermOrigCong = _RestPktChPingTermOrigCong_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 9, 3, 1, 5),
    _RestPktChPingTermOrigCong_Type()
)
restPktChPingTermOrigCong.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restPktChPingTermOrigCong.setStatus("mandatory")
_RestAd10Port_ObjectIdentity = ObjectIdentity
restAd10Port = _RestAd10Port_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10)
)
_RestAd10AgmPortTable_Object = MibTable
restAd10AgmPortTable = _RestAd10AgmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1)
)
if mibBuilder.loadTexts:
    restAd10AgmPortTable.setStatus("mandatory")
_RestAd10AgmPortEntry_Object = MibTableRow
restAd10AgmPortEntry = _RestAd10AgmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1)
)
restAd10AgmPortEntry.setIndexNames(
    (0, "STMIB", "restAd10AgmPortAddr"),
)
if mibBuilder.loadTexts:
    restAd10AgmPortEntry.setStatus("mandatory")
_RestAd10AgmPortAddr_Type = PortAddr
_RestAd10AgmPortAddr_Object = MibTableColumn
restAd10AgmPortAddr = _RestAd10AgmPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 1),
    _RestAd10AgmPortAddr_Type()
)
restAd10AgmPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10AgmPortAddr.setStatus("mandatory")


class _RestAd10AgmPortControl_Type(Integer32):
    """Custom type restAd10AgmPortControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tdmMuxSwitch", 1),
          ("unitReset", 2),
          ("updateHw", 3))
    )


_RestAd10AgmPortControl_Type.__name__ = "Integer32"
_RestAd10AgmPortControl_Object = MibTableColumn
restAd10AgmPortControl = _RestAd10AgmPortControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 2),
    _RestAd10AgmPortControl_Type()
)
restAd10AgmPortControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restAd10AgmPortControl.setStatus("mandatory")


class _RestAd10AgmPortCpSpeed_Type(Integer32):
    """Custom type restAd10AgmPortCpSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("a1200", 2),
          ("a2400", 3),
          ("a300", 1),
          ("a9600", 4))
    )


_RestAd10AgmPortCpSpeed_Type.__name__ = "Integer32"
_RestAd10AgmPortCpSpeed_Object = MibTableColumn
restAd10AgmPortCpSpeed = _RestAd10AgmPortCpSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 3),
    _RestAd10AgmPortCpSpeed_Type()
)
restAd10AgmPortCpSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10AgmPortCpSpeed.setStatus("mandatory")


class _RestAd10AgmPortCpTermType_Type(Integer32):
    """Custom type restAd10AgmPortCpTermType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ascii", 1),
          ("vt100", 2))
    )


_RestAd10AgmPortCpTermType_Type.__name__ = "Integer32"
_RestAd10AgmPortCpTermType_Object = MibTableColumn
restAd10AgmPortCpTermType = _RestAd10AgmPortCpTermType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 4),
    _RestAd10AgmPortCpTermType_Type()
)
restAd10AgmPortCpTermType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10AgmPortCpTermType.setStatus("mandatory")


class _RestAd10AgmPortCpMode_Type(Integer32):
    """Custom type restAd10AgmPortCpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_RestAd10AgmPortCpMode_Type.__name__ = "Integer32"
_RestAd10AgmPortCpMode_Object = MibTableColumn
restAd10AgmPortCpMode = _RestAd10AgmPortCpMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 5),
    _RestAd10AgmPortCpMode_Type()
)
restAd10AgmPortCpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10AgmPortCpMode.setStatus("mandatory")


class _RestAd10Date_Type(DisplayString):
    """Custom type restAd10Date based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_RestAd10Date_Type.__name__ = "DisplayString"
_RestAd10Date_Object = MibTableColumn
restAd10Date = _RestAd10Date_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 6),
    _RestAd10Date_Type()
)
restAd10Date.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10Date.setStatus("mandatory")


class _RestAd10Time_Type(DisplayString):
    """Custom type restAd10Time based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_RestAd10Time_Type.__name__ = "DisplayString"
_RestAd10Time_Object = MibTableColumn
restAd10Time = _RestAd10Time_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 7),
    _RestAd10Time_Type()
)
restAd10Time.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10Time.setStatus("mandatory")


class _RestAd10VersionLabel_Type(DisplayString):
    """Custom type restAd10VersionLabel based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 20),
    )


_RestAd10VersionLabel_Type.__name__ = "DisplayString"
_RestAd10VersionLabel_Object = MibTableColumn
restAd10VersionLabel = _RestAd10VersionLabel_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 8),
    _RestAd10VersionLabel_Type()
)
restAd10VersionLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10VersionLabel.setStatus("mandatory")


class _RestAd10UnitSerialNumberStr_Type(DisplayString):
    """Custom type restAd10UnitSerialNumberStr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 6),
    )


_RestAd10UnitSerialNumberStr_Type.__name__ = "DisplayString"
_RestAd10UnitSerialNumberStr_Object = MibTableColumn
restAd10UnitSerialNumberStr = _RestAd10UnitSerialNumberStr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 9),
    _RestAd10UnitSerialNumberStr_Type()
)
restAd10UnitSerialNumberStr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10UnitSerialNumberStr.setStatus("mandatory")


class _RestAd10UnitType_Type(Integer32):
    """Custom type restAd10UnitType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("accessPlus", 7),
          ("ad10", 8),
          ("atixSt50", 6),
          ("universalType", 9))
    )


_RestAd10UnitType_Type.__name__ = "Integer32"
_RestAd10UnitType_Object = MibTableColumn
restAd10UnitType = _RestAd10UnitType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 10),
    _RestAd10UnitType_Type()
)
restAd10UnitType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10UnitType.setStatus("mandatory")


class _RestAd10HWConfig_Type(OctetString):
    """Custom type restAd10HWConfig based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(384, 384),
    )


_RestAd10HWConfig_Type.__name__ = "OctetString"
_RestAd10HWConfig_Object = MibTableColumn
restAd10HWConfig = _RestAd10HWConfig_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 11),
    _RestAd10HWConfig_Type()
)
restAd10HWConfig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10HWConfig.setStatus("mandatory")


class _RestAd10NetworkInterface_Type(Integer32):
    """Custom type restAd10NetworkInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("rs232", 1),
          ("rs422", 3),
          ("v11", 4),
          ("v35", 2))
    )


_RestAd10NetworkInterface_Type.__name__ = "Integer32"
_RestAd10NetworkInterface_Object = MibTableColumn
restAd10NetworkInterface = _RestAd10NetworkInterface_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 12),
    _RestAd10NetworkInterface_Type()
)
restAd10NetworkInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10NetworkInterface.setStatus("mandatory")


class _RestAd10NetworkClockConf_Type(Integer32):
    """Custom type restAd10NetworkClockConf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("external", 1),
          ("internal", 3),
          ("slave", 2))
    )


_RestAd10NetworkClockConf_Type.__name__ = "Integer32"
_RestAd10NetworkClockConf_Object = MibTableColumn
restAd10NetworkClockConf = _RestAd10NetworkClockConf_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 13),
    _RestAd10NetworkClockConf_Type()
)
restAd10NetworkClockConf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10NetworkClockConf.setStatus("mandatory")


class _RestAd10TdmMuxSwitchStatus_Type(Integer32):
    """Custom type restAd10TdmMuxSwitchStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("inactive", 2))
    )


_RestAd10TdmMuxSwitchStatus_Type.__name__ = "Integer32"
_RestAd10TdmMuxSwitchStatus_Object = MibTableColumn
restAd10TdmMuxSwitchStatus = _RestAd10TdmMuxSwitchStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 14),
    _RestAd10TdmMuxSwitchStatus_Type()
)
restAd10TdmMuxSwitchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10TdmMuxSwitchStatus.setStatus("mandatory")


class _RestAd10SoftloadStatus_Type(Integer32):
    """Custom type restAd10SoftloadStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(36,
              65,
              66,
              109,
              110,
              111,
              112)
        )
    )
    namedValues = NamedValues(
        *(("ad10LinkDown", 112),
          ("idle", 36),
          ("infoIncorrect", 111),
          ("resetTimeout", 110),
          ("responseTimeout", 109),
          ("softloading", 66),
          ("success", 65))
    )


_RestAd10SoftloadStatus_Type.__name__ = "Integer32"
_RestAd10SoftloadStatus_Object = MibTableColumn
restAd10SoftloadStatus = _RestAd10SoftloadStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 15),
    _RestAd10SoftloadStatus_Type()
)
restAd10SoftloadStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10SoftloadStatus.setStatus("mandatory")
_RestAd10SoftloadFileSize_Type = Integer32
_RestAd10SoftloadFileSize_Object = MibTableColumn
restAd10SoftloadFileSize = _RestAd10SoftloadFileSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 16),
    _RestAd10SoftloadFileSize_Type()
)
restAd10SoftloadFileSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10SoftloadFileSize.setStatus("mandatory")
_RestAd10SoftloadTransferred_Type = Integer32
_RestAd10SoftloadTransferred_Object = MibTableColumn
restAd10SoftloadTransferred = _RestAd10SoftloadTransferred_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 17),
    _RestAd10SoftloadTransferred_Type()
)
restAd10SoftloadTransferred.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10SoftloadTransferred.setStatus("mandatory")
_RestAd10SoftloadStartTime_Type = Integer32
_RestAd10SoftloadStartTime_Object = MibTableColumn
restAd10SoftloadStartTime = _RestAd10SoftloadStartTime_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 18),
    _RestAd10SoftloadStartTime_Type()
)
restAd10SoftloadStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10SoftloadStartTime.setStatus("mandatory")
_RestAd10SoftloadCompletionTime_Type = Integer32
_RestAd10SoftloadCompletionTime_Object = MibTableColumn
restAd10SoftloadCompletionTime = _RestAd10SoftloadCompletionTime_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 1, 1, 19),
    _RestAd10SoftloadCompletionTime_Type()
)
restAd10SoftloadCompletionTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10SoftloadCompletionTime.setStatus("mandatory")
_RestAd10DataPortTable_Object = MibTable
restAd10DataPortTable = _RestAd10DataPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2)
)
if mibBuilder.loadTexts:
    restAd10DataPortTable.setStatus("mandatory")
_RestAd10DataPortEntry_Object = MibTableRow
restAd10DataPortEntry = _RestAd10DataPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1)
)
restAd10DataPortEntry.setIndexNames(
    (0, "STMIB", "restAd10DataPortAddr"),
)
if mibBuilder.loadTexts:
    restAd10DataPortEntry.setStatus("mandatory")
_RestAd10DataPortAddr_Type = Ad10PortAddr
_RestAd10DataPortAddr_Object = MibTableColumn
restAd10DataPortAddr = _RestAd10DataPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 1),
    _RestAd10DataPortAddr_Type()
)
restAd10DataPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10DataPortAddr.setStatus("mandatory")


class _RestAd10DataPortDiagnostics_Type(Integer32):
    """Custom type restAd10DataPortDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("insert", 4),
          ("remove", 5),
          ("reset", 6))
    )


_RestAd10DataPortDiagnostics_Type.__name__ = "Integer32"
_RestAd10DataPortDiagnostics_Object = MibTableColumn
restAd10DataPortDiagnostics = _RestAd10DataPortDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 2),
    _RestAd10DataPortDiagnostics_Type()
)
restAd10DataPortDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restAd10DataPortDiagnostics.setStatus("mandatory")


class _RestAd10DataPortMode_Type(Integer32):
    """Custom type restAd10DataPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("bertTowardNetwork", 5),
          ("bertTowardSubscriber", 4),
          ("disableDiagnostics", 3),
          ("loopNetwork", 7),
          ("loopSubscriber", 6),
          ("offline", 1),
          ("online", 2))
    )


_RestAd10DataPortMode_Type.__name__ = "Integer32"
_RestAd10DataPortMode_Object = MibTableColumn
restAd10DataPortMode = _RestAd10DataPortMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 3),
    _RestAd10DataPortMode_Type()
)
restAd10DataPortMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortMode.setStatus("mandatory")


class _RestAd10DataPortIntfType_Type(Integer32):
    """Custom type restAd10DataPortIntfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("rs232", 1),
          ("rs422", 3),
          ("v11", 4),
          ("v35", 2))
    )


_RestAd10DataPortIntfType_Type.__name__ = "Integer32"
_RestAd10DataPortIntfType_Object = MibTableColumn
restAd10DataPortIntfType = _RestAd10DataPortIntfType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 4),
    _RestAd10DataPortIntfType_Type()
)
restAd10DataPortIntfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10DataPortIntfType.setStatus("mandatory")


class _RestAd10DataPortClockMode_Type(Integer32):
    """Custom type restAd10DataPortClockMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("derived", 5),
          ("external", 3),
          ("internal", 2),
          ("notApplicable", 1),
          ("txExternal", 4))
    )


_RestAd10DataPortClockMode_Type.__name__ = "Integer32"
_RestAd10DataPortClockMode_Object = MibTableColumn
restAd10DataPortClockMode = _RestAd10DataPortClockMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 5),
    _RestAd10DataPortClockMode_Type()
)
restAd10DataPortClockMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortClockMode.setStatus("mandatory")


class _RestAd10DataPortClockRate_Type(Integer32):
    """Custom type restAd10DataPortClockRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20480),
    )


_RestAd10DataPortClockRate_Type.__name__ = "Integer32"
_RestAd10DataPortClockRate_Object = MibTableColumn
restAd10DataPortClockRate = _RestAd10DataPortClockRate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 6),
    _RestAd10DataPortClockRate_Type()
)
restAd10DataPortClockRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortClockRate.setStatus("mandatory")


class _RestAd10DataPortCtsOOS_Type(Integer32):
    """Custom type restAd10DataPortCtsOOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("forceOff", 1),
          ("forceOn", 2),
          ("freeze", 3))
    )


_RestAd10DataPortCtsOOS_Type.__name__ = "Integer32"
_RestAd10DataPortCtsOOS_Object = MibTableColumn
restAd10DataPortCtsOOS = _RestAd10DataPortCtsOOS_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 7),
    _RestAd10DataPortCtsOOS_Type()
)
restAd10DataPortCtsOOS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortCtsOOS.setStatus("mandatory")


class _RestAd10DataPortCtsSig_Type(Integer32):
    """Custom type restAd10DataPortCtsSig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("dtr", 6),
          ("forceOff", 1),
          ("forceOn", 2),
          ("loopLocalDtr", 4),
          ("loopLocalRts", 3),
          ("rts", 5),
          ("rtsAndDtr", 7),
          ("rtsOrDtr", 8))
    )


_RestAd10DataPortCtsSig_Type.__name__ = "Integer32"
_RestAd10DataPortCtsSig_Object = MibTableColumn
restAd10DataPortCtsSig = _RestAd10DataPortCtsSig_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 8),
    _RestAd10DataPortCtsSig_Type()
)
restAd10DataPortCtsSig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortCtsSig.setStatus("mandatory")


class _RestAd10DataPortDcdOOS_Type(Integer32):
    """Custom type restAd10DataPortDcdOOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("forceOff", 1),
          ("forceOn", 2),
          ("freeze", 3))
    )


_RestAd10DataPortDcdOOS_Type.__name__ = "Integer32"
_RestAd10DataPortDcdOOS_Object = MibTableColumn
restAd10DataPortDcdOOS = _RestAd10DataPortDcdOOS_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 9),
    _RestAd10DataPortDcdOOS_Type()
)
restAd10DataPortDcdOOS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortDcdOOS.setStatus("mandatory")


class _RestAd10DataPortDcdSig_Type(Integer32):
    """Custom type restAd10DataPortDcdSig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("dtr", 6),
          ("forceOff", 1),
          ("forceOn", 2),
          ("loopLocalDtr", 4),
          ("loopLocalRts", 3),
          ("rts", 5),
          ("rtsAndDtr", 7),
          ("rtsOrDtr", 8))
    )


_RestAd10DataPortDcdSig_Type.__name__ = "Integer32"
_RestAd10DataPortDcdSig_Object = MibTableColumn
restAd10DataPortDcdSig = _RestAd10DataPortDcdSig_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 10),
    _RestAd10DataPortDcdSig_Type()
)
restAd10DataPortDcdSig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortDcdSig.setStatus("mandatory")


class _RestAd10DataPortDsrOOS_Type(Integer32):
    """Custom type restAd10DataPortDsrOOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("forceOff", 1),
          ("forceOn", 2),
          ("freeze", 3))
    )


_RestAd10DataPortDsrOOS_Type.__name__ = "Integer32"
_RestAd10DataPortDsrOOS_Object = MibTableColumn
restAd10DataPortDsrOOS = _RestAd10DataPortDsrOOS_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 11),
    _RestAd10DataPortDsrOOS_Type()
)
restAd10DataPortDsrOOS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortDsrOOS.setStatus("mandatory")


class _RestAd10DataPortDsrSig_Type(Integer32):
    """Custom type restAd10DataPortDsrSig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("dtr", 6),
          ("forceOff", 1),
          ("forceOn", 2),
          ("loopLocalDtr", 4),
          ("loopLocalRts", 3),
          ("rts", 5),
          ("rtsAndDtr", 7),
          ("rtsOrDtr", 8))
    )


_RestAd10DataPortDsrSig_Type.__name__ = "Integer32"
_RestAd10DataPortDsrSig_Object = MibTableColumn
restAd10DataPortDsrSig = _RestAd10DataPortDsrSig_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 12),
    _RestAd10DataPortDsrSig_Type()
)
restAd10DataPortDsrSig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortDsrSig.setStatus("mandatory")


class _RestAd10DataPortRtsLoopDelay_Type(Integer32):
    """Custom type restAd10DataPortRtsLoopDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RestAd10DataPortRtsLoopDelay_Type.__name__ = "Integer32"
_RestAd10DataPortRtsLoopDelay_Object = MibTableColumn
restAd10DataPortRtsLoopDelay = _RestAd10DataPortRtsLoopDelay_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 13),
    _RestAd10DataPortRtsLoopDelay_Type()
)
restAd10DataPortRtsLoopDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortRtsLoopDelay.setStatus("mandatory")


class _RestAd10DataPortDtrLoopDelay_Type(Integer32):
    """Custom type restAd10DataPortDtrLoopDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RestAd10DataPortDtrLoopDelay_Type.__name__ = "Integer32"
_RestAd10DataPortDtrLoopDelay_Object = MibTableColumn
restAd10DataPortDtrLoopDelay = _RestAd10DataPortDtrLoopDelay_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 14),
    _RestAd10DataPortDtrLoopDelay_Type()
)
restAd10DataPortDtrLoopDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortDtrLoopDelay.setStatus("mandatory")


class _RestAd10DataPortAsyncDataBits_Type(Integer32):
    """Custom type restAd10DataPortAsyncDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("b5bit", 1),
          ("b6bit", 2),
          ("b7bit", 3),
          ("b8bit", 4))
    )


_RestAd10DataPortAsyncDataBits_Type.__name__ = "Integer32"
_RestAd10DataPortAsyncDataBits_Object = MibTableColumn
restAd10DataPortAsyncDataBits = _RestAd10DataPortAsyncDataBits_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 15),
    _RestAd10DataPortAsyncDataBits_Type()
)
restAd10DataPortAsyncDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortAsyncDataBits.setStatus("mandatory")


class _RestAd10DataPortAsyncStopBits_Type(Integer32):
    """Custom type restAd10DataPortAsyncStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("one", 1),
          ("oneAndHalf", 2),
          ("two", 3))
    )


_RestAd10DataPortAsyncStopBits_Type.__name__ = "Integer32"
_RestAd10DataPortAsyncStopBits_Object = MibTableColumn
restAd10DataPortAsyncStopBits = _RestAd10DataPortAsyncStopBits_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 16),
    _RestAd10DataPortAsyncStopBits_Type()
)
restAd10DataPortAsyncStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortAsyncStopBits.setStatus("mandatory")


class _RestAd10DataPortAsyncParity_Type(Integer32):
    """Custom type restAd10DataPortAsyncParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("even", 2),
          ("none", 1),
          ("odd", 3))
    )


_RestAd10DataPortAsyncParity_Type.__name__ = "Integer32"
_RestAd10DataPortAsyncParity_Object = MibTableColumn
restAd10DataPortAsyncParity = _RestAd10DataPortAsyncParity_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 17),
    _RestAd10DataPortAsyncParity_Type()
)
restAd10DataPortAsyncParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortAsyncParity.setStatus("mandatory")


class _RestAd10DataPortAsyncSubMode_Type(Integer32):
    """Custom type restAd10DataPortAsyncSubMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RestAd10DataPortAsyncSubMode_Type.__name__ = "Integer32"
_RestAd10DataPortAsyncSubMode_Object = MibTableColumn
restAd10DataPortAsyncSubMode = _RestAd10DataPortAsyncSubMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 18),
    _RestAd10DataPortAsyncSubMode_Type()
)
restAd10DataPortAsyncSubMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortAsyncSubMode.setStatus("mandatory")


class _RestAd10DataPortAsyncSubChar_Type(Integer32):
    """Custom type restAd10DataPortAsyncSubChar based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RestAd10DataPortAsyncSubChar_Type.__name__ = "Integer32"
_RestAd10DataPortAsyncSubChar_Object = MibTableColumn
restAd10DataPortAsyncSubChar = _RestAd10DataPortAsyncSubChar_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 19),
    _RestAd10DataPortAsyncSubChar_Type()
)
restAd10DataPortAsyncSubChar.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortAsyncSubChar.setStatus("mandatory")


class _RestAd10DataPortPktFlowControl_Type(Integer32):
    """Custom type restAd10DataPortPktFlowControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ctsDtr", 1),
          ("xonXoff", 2))
    )


_RestAd10DataPortPktFlowControl_Type.__name__ = "Integer32"
_RestAd10DataPortPktFlowControl_Object = MibTableColumn
restAd10DataPortPktFlowControl = _RestAd10DataPortPktFlowControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 20),
    _RestAd10DataPortPktFlowControl_Type()
)
restAd10DataPortPktFlowControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortPktFlowControl.setStatus("mandatory")


class _RestAd10DataPortPktTxFlow_Type(Integer32):
    """Custom type restAd10DataPortPktTxFlow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RestAd10DataPortPktTxFlow_Type.__name__ = "Integer32"
_RestAd10DataPortPktTxFlow_Object = MibTableColumn
restAd10DataPortPktTxFlow = _RestAd10DataPortPktTxFlow_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 21),
    _RestAd10DataPortPktTxFlow_Type()
)
restAd10DataPortPktTxFlow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortPktTxFlow.setStatus("mandatory")


class _RestAd10DataPortPktRxFlow_Type(Integer32):
    """Custom type restAd10DataPortPktRxFlow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RestAd10DataPortPktRxFlow_Type.__name__ = "Integer32"
_RestAd10DataPortPktRxFlow_Object = MibTableColumn
restAd10DataPortPktRxFlow = _RestAd10DataPortPktRxFlow_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 22),
    _RestAd10DataPortPktRxFlow_Type()
)
restAd10DataPortPktRxFlow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortPktRxFlow.setStatus("mandatory")


class _RestAd10DataPortPktBuildTimeOut_Type(Integer32):
    """Custom type restAd10DataPortPktBuildTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 500),
    )


_RestAd10DataPortPktBuildTimeOut_Type.__name__ = "Integer32"
_RestAd10DataPortPktBuildTimeOut_Object = MibTableColumn
restAd10DataPortPktBuildTimeOut = _RestAd10DataPortPktBuildTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 23),
    _RestAd10DataPortPktBuildTimeOut_Type()
)
restAd10DataPortPktBuildTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortPktBuildTimeOut.setStatus("mandatory")


class _RestAd10DataPortPktRxThreshold_Type(Integer32):
    """Custom type restAd10DataPortPktRxThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RestAd10DataPortPktRxThreshold_Type.__name__ = "Integer32"
_RestAd10DataPortPktRxThreshold_Object = MibTableColumn
restAd10DataPortPktRxThreshold = _RestAd10DataPortPktRxThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 24),
    _RestAd10DataPortPktRxThreshold_Type()
)
restAd10DataPortPktRxThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortPktRxThreshold.setStatus("mandatory")


class _RestAd10DataPortPktTxThreshold_Type(Integer32):
    """Custom type restAd10DataPortPktTxThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RestAd10DataPortPktTxThreshold_Type.__name__ = "Integer32"
_RestAd10DataPortPktTxThreshold_Object = MibTableColumn
restAd10DataPortPktTxThreshold = _RestAd10DataPortPktTxThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 25),
    _RestAd10DataPortPktTxThreshold_Type()
)
restAd10DataPortPktTxThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortPktTxThreshold.setStatus("mandatory")


class _RestAd10DataPortPktMinRxFrag_Type(Integer32):
    """Custom type restAd10DataPortPktMinRxFrag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 200),
    )


_RestAd10DataPortPktMinRxFrag_Type.__name__ = "Integer32"
_RestAd10DataPortPktMinRxFrag_Object = MibTableColumn
restAd10DataPortPktMinRxFrag = _RestAd10DataPortPktMinRxFrag_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 26),
    _RestAd10DataPortPktMinRxFrag_Type()
)
restAd10DataPortPktMinRxFrag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortPktMinRxFrag.setStatus("mandatory")


class _RestAd10DataPortBiSyncCharType_Type(Integer32):
    """Custom type restAd10DataPortBiSyncCharType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ascii7", 1),
          ("ascii8", 2),
          ("ebcdic", 3))
    )


_RestAd10DataPortBiSyncCharType_Type.__name__ = "Integer32"
_RestAd10DataPortBiSyncCharType_Object = MibTableColumn
restAd10DataPortBiSyncCharType = _RestAd10DataPortBiSyncCharType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 27),
    _RestAd10DataPortBiSyncCharType_Type()
)
restAd10DataPortBiSyncCharType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortBiSyncCharType.setStatus("mandatory")


class _RestAd10DataPortBiSyncParity_Type(Integer32):
    """Custom type restAd10DataPortBiSyncParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("even", 3),
          ("high", 1),
          ("low", 2),
          ("notApplicable", 255),
          ("odd", 4))
    )


_RestAd10DataPortBiSyncParity_Type.__name__ = "Integer32"
_RestAd10DataPortBiSyncParity_Object = MibTableColumn
restAd10DataPortBiSyncParity = _RestAd10DataPortBiSyncParity_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 28),
    _RestAd10DataPortBiSyncParity_Type()
)
restAd10DataPortBiSyncParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortBiSyncParity.setStatus("mandatory")


class _RestAd10DataPortBiSyncIdleFill_Type(Integer32):
    """Custom type restAd10DataPortBiSyncIdleFill based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("idle", 1),
          ("sync", 2))
    )


_RestAd10DataPortBiSyncIdleFill_Type.__name__ = "Integer32"
_RestAd10DataPortBiSyncIdleFill_Object = MibTableColumn
restAd10DataPortBiSyncIdleFill = _RestAd10DataPortBiSyncIdleFill_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 29),
    _RestAd10DataPortBiSyncIdleFill_Type()
)
restAd10DataPortBiSyncIdleFill.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortBiSyncIdleFill.setStatus("mandatory")


class _RestAd10DataPortBiSyncMinPair_Type(Integer32):
    """Custom type restAd10DataPortBiSyncMinPair based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RestAd10DataPortBiSyncMinPair_Type.__name__ = "Integer32"
_RestAd10DataPortBiSyncMinPair_Object = MibTableColumn
restAd10DataPortBiSyncMinPair = _RestAd10DataPortBiSyncMinPair_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 30),
    _RestAd10DataPortBiSyncMinPair_Type()
)
restAd10DataPortBiSyncMinPair.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortBiSyncMinPair.setStatus("mandatory")


class _RestAd10DataPortBiSyncSyncChar_Type(Integer32):
    """Custom type restAd10DataPortBiSyncSyncChar based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RestAd10DataPortBiSyncSyncChar_Type.__name__ = "Integer32"
_RestAd10DataPortBiSyncSyncChar_Object = MibTableColumn
restAd10DataPortBiSyncSyncChar = _RestAd10DataPortBiSyncSyncChar_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 31),
    _RestAd10DataPortBiSyncSyncChar_Type()
)
restAd10DataPortBiSyncSyncChar.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortBiSyncSyncChar.setStatus("mandatory")


class _RestAd10DataPortBiSyncPadChar_Type(Integer32):
    """Custom type restAd10DataPortBiSyncPadChar based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RestAd10DataPortBiSyncPadChar_Type.__name__ = "Integer32"
_RestAd10DataPortBiSyncPadChar_Object = MibTableColumn
restAd10DataPortBiSyncPadChar = _RestAd10DataPortBiSyncPadChar_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 32),
    _RestAd10DataPortBiSyncPadChar_Type()
)
restAd10DataPortBiSyncPadChar.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortBiSyncPadChar.setStatus("mandatory")


class _RestAd10DataPortHdlcCrcType_Type(Integer32):
    """Custom type restAd10DataPortHdlcCrcType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("crc16", 1),
          ("crc32", 2))
    )


_RestAd10DataPortHdlcCrcType_Type.__name__ = "Integer32"
_RestAd10DataPortHdlcCrcType_Object = MibTableColumn
restAd10DataPortHdlcCrcType = _RestAd10DataPortHdlcCrcType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 33),
    _RestAd10DataPortHdlcCrcType_Type()
)
restAd10DataPortHdlcCrcType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortHdlcCrcType.setStatus("mandatory")


class _RestAd10DataPortHdlcLineCode_Type(Integer32):
    """Custom type restAd10DataPortHdlcLineCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nrz", 1),
          ("nrzi", 2))
    )


_RestAd10DataPortHdlcLineCode_Type.__name__ = "Integer32"
_RestAd10DataPortHdlcLineCode_Object = MibTableColumn
restAd10DataPortHdlcLineCode = _RestAd10DataPortHdlcLineCode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 34),
    _RestAd10DataPortHdlcLineCode_Type()
)
restAd10DataPortHdlcLineCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortHdlcLineCode.setStatus("mandatory")


class _RestAd10DataPortHdlcIdleFill_Type(Integer32):
    """Custom type restAd10DataPortHdlcIdleFill based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("flag", 2),
          ("idle", 1))
    )


_RestAd10DataPortHdlcIdleFill_Type.__name__ = "Integer32"
_RestAd10DataPortHdlcIdleFill_Object = MibTableColumn
restAd10DataPortHdlcIdleFill = _RestAd10DataPortHdlcIdleFill_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 35),
    _RestAd10DataPortHdlcIdleFill_Type()
)
restAd10DataPortHdlcIdleFill.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortHdlcIdleFill.setStatus("mandatory")


class _RestAd10DataPortHdlcMinFlags_Type(Integer32):
    """Custom type restAd10DataPortHdlcMinFlags based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RestAd10DataPortHdlcMinFlags_Type.__name__ = "Integer32"
_RestAd10DataPortHdlcMinFlags_Object = MibTableColumn
restAd10DataPortHdlcMinFlags = _RestAd10DataPortHdlcMinFlags_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 36),
    _RestAd10DataPortHdlcMinFlags_Type()
)
restAd10DataPortHdlcMinFlags.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortHdlcMinFlags.setStatus("mandatory")


class _RestAd10DataPortModemSigInfo_Type(OctetString):
    """Custom type restAd10DataPortModemSigInfo based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RestAd10DataPortModemSigInfo_Type.__name__ = "OctetString"
_RestAd10DataPortModemSigInfo_Object = MibTableColumn
restAd10DataPortModemSigInfo = _RestAd10DataPortModemSigInfo_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 37),
    _RestAd10DataPortModemSigInfo_Type()
)
restAd10DataPortModemSigInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10DataPortModemSigInfo.setStatus("mandatory")


class _RestAd10DataPortVcMapDlci_Type(Integer32):
    """Custom type restAd10DataPortVcMapDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_RestAd10DataPortVcMapDlci_Type.__name__ = "Integer32"
_RestAd10DataPortVcMapDlci_Object = MibTableColumn
restAd10DataPortVcMapDlci = _RestAd10DataPortVcMapDlci_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 38),
    _RestAd10DataPortVcMapDlci_Type()
)
restAd10DataPortVcMapDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortVcMapDlci.setStatus("mandatory")


class _RestAd10DataPortVcMapCir_Type(Integer32):
    """Custom type restAd10DataPortVcMapCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1280),
    )


_RestAd10DataPortVcMapCir_Type.__name__ = "Integer32"
_RestAd10DataPortVcMapCir_Object = MibTableColumn
restAd10DataPortVcMapCir = _RestAd10DataPortVcMapCir_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 39),
    _RestAd10DataPortVcMapCir_Type()
)
restAd10DataPortVcMapCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortVcMapCir.setStatus("mandatory")


class _RestAd10DataPortTDMDataRate_Type(Integer32):
    """Custom type restAd10DataPortTDMDataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(9,
              18,
              36,
              54,
              72,
              90,
              108,
              120,
              126,
              144,
              180,
              216,
              240,
              288,
              360,
              420,
              65535)
        )
    )
    namedValues = NamedValues(
        *(("b1200", 9),
          ("b12000", 90),
          ("b14400", 108),
          ("b16000", 120),
          ("b16800", 126),
          ("b19200", 144),
          ("b2400", 18),
          ("b24000", 180),
          ("b28800", 216),
          ("b32000", 240),
          ("b38400", 288),
          ("b4800", 36),
          ("b48000", 360),
          ("b56000", 420),
          ("b7200", 54),
          ("b9600", 72),
          ("disabled", 65535))
    )


_RestAd10DataPortTDMDataRate_Type.__name__ = "Integer32"
_RestAd10DataPortTDMDataRate_Object = MibTableColumn
restAd10DataPortTDMDataRate = _RestAd10DataPortTDMDataRate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 40),
    _RestAd10DataPortTDMDataRate_Type()
)
restAd10DataPortTDMDataRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10DataPortTDMDataRate.setStatus("mandatory")


class _RestAd10DataPortType_Type(Integer32):
    """Custom type restAd10DataPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bisync", 3),
          ("hdlc", 4),
          ("stat-mux-async", 2),
          ("tdm-sync", 1))
    )


_RestAd10DataPortType_Type.__name__ = "Integer32"
_RestAd10DataPortType_Object = MibTableColumn
restAd10DataPortType = _RestAd10DataPortType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 41),
    _RestAd10DataPortType_Type()
)
restAd10DataPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10DataPortType.setStatus("mandatory")


class _RestAd10DataPortDtrFlLpDlyDelta_Type(Integer32):
    """Custom type restAd10DataPortDtrFlLpDlyDelta based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RestAd10DataPortDtrFlLpDlyDelta_Type.__name__ = "Integer32"
_RestAd10DataPortDtrFlLpDlyDelta_Object = MibTableColumn
restAd10DataPortDtrFlLpDlyDelta = _RestAd10DataPortDtrFlLpDlyDelta_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 42),
    _RestAd10DataPortDtrFlLpDlyDelta_Type()
)
restAd10DataPortDtrFlLpDlyDelta.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortDtrFlLpDlyDelta.setStatus("mandatory")


class _RestAd10DataPortRtsFlLpDlyDelta_Type(Integer32):
    """Custom type restAd10DataPortRtsFlLpDlyDelta based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_RestAd10DataPortRtsFlLpDlyDelta_Type.__name__ = "Integer32"
_RestAd10DataPortRtsFlLpDlyDelta_Object = MibTableColumn
restAd10DataPortRtsFlLpDlyDelta = _RestAd10DataPortRtsFlLpDlyDelta_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 2, 1, 43),
    _RestAd10DataPortRtsFlLpDlyDelta_Type()
)
restAd10DataPortRtsFlLpDlyDelta.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10DataPortRtsFlLpDlyDelta.setStatus("mandatory")
_RestAd10VoicePortTable_Object = MibTable
restAd10VoicePortTable = _RestAd10VoicePortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3)
)
if mibBuilder.loadTexts:
    restAd10VoicePortTable.setStatus("mandatory")
_RestAd10VoicePortEntry_Object = MibTableRow
restAd10VoicePortEntry = _RestAd10VoicePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1)
)
restAd10VoicePortEntry.setIndexNames(
    (0, "STMIB", "restAd10VoicePortAddr"),
)
if mibBuilder.loadTexts:
    restAd10VoicePortEntry.setStatus("mandatory")
_RestAd10VoicePortAddr_Type = Ad10PortAddr
_RestAd10VoicePortAddr_Object = MibTableColumn
restAd10VoicePortAddr = _RestAd10VoicePortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 1),
    _RestAd10VoicePortAddr_Type()
)
restAd10VoicePortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10VoicePortAddr.setStatus("mandatory")


class _RestAd10VoicePortDiagnostics_Type(Integer32):
    """Custom type restAd10VoicePortDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("insert", 4),
          ("remove", 5),
          ("reset", 6))
    )


_RestAd10VoicePortDiagnostics_Type.__name__ = "Integer32"
_RestAd10VoicePortDiagnostics_Object = MibTableColumn
restAd10VoicePortDiagnostics = _RestAd10VoicePortDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 2),
    _RestAd10VoicePortDiagnostics_Type()
)
restAd10VoicePortDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restAd10VoicePortDiagnostics.setStatus("mandatory")


class _RestAd10VoicePortMode_Type(Integer32):
    """Custom type restAd10VoicePortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("bertTowardNetwork", 5),
          ("disableDiagnosis", 3),
          ("loopNet", 7),
          ("loopSub", 6),
          ("offline", 1),
          ("online", 2),
          ("subDMW", 4))
    )


_RestAd10VoicePortMode_Type.__name__ = "Integer32"
_RestAd10VoicePortMode_Object = MibTableColumn
restAd10VoicePortMode = _RestAd10VoicePortMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 3),
    _RestAd10VoicePortMode_Type()
)
restAd10VoicePortMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortMode.setStatus("mandatory")


class _RestAd10VoicePortInterface_Type(Integer32):
    """Custom type restAd10VoicePortInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("ac15", 14),
          ("emTypeI", 9),
          ("emTypeII", 10),
          ("emTypeIII", 11),
          ("emTypeIV", 12),
          ("emTypeV", 13),
          ("fxo", 1),
          ("fxsGndStartContRing", 5),
          ("fxsGndStartInterRing", 6),
          ("fxsLoopStartContRing", 7),
          ("fxsLoopStartInterRing", 8),
          ("ss5", 15))
    )


_RestAd10VoicePortInterface_Type.__name__ = "Integer32"
_RestAd10VoicePortInterface_Object = MibTableColumn
restAd10VoicePortInterface = _RestAd10VoicePortInterface_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 4),
    _RestAd10VoicePortInterface_Type()
)
restAd10VoicePortInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortInterface.setStatus("mandatory")


class _RestAd10VoicePortEchoCancel_Type(Integer32):
    """Custom type restAd10VoicePortEchoCancel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RestAd10VoicePortEchoCancel_Type.__name__ = "Integer32"
_RestAd10VoicePortEchoCancel_Object = MibTableColumn
restAd10VoicePortEchoCancel = _RestAd10VoicePortEchoCancel_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 5),
    _RestAd10VoicePortEchoCancel_Type()
)
restAd10VoicePortEchoCancel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortEchoCancel.setStatus("mandatory")


class _RestAd10VoicePortToneMode_Type(Integer32):
    """Custom type restAd10VoicePortToneMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RestAd10VoicePortToneMode_Type.__name__ = "Integer32"
_RestAd10VoicePortToneMode_Object = MibTableColumn
restAd10VoicePortToneMode = _RestAd10VoicePortToneMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 6),
    _RestAd10VoicePortToneMode_Type()
)
restAd10VoicePortToneMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortToneMode.setStatus("mandatory")


class _RestAd10VoicePortNonLinear_Type(Integer32):
    """Custom type restAd10VoicePortNonLinear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RestAd10VoicePortNonLinear_Type.__name__ = "Integer32"
_RestAd10VoicePortNonLinear_Object = MibTableColumn
restAd10VoicePortNonLinear = _RestAd10VoicePortNonLinear_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 7),
    _RestAd10VoicePortNonLinear_Type()
)
restAd10VoicePortNonLinear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortNonLinear.setStatus("mandatory")


class _RestAd10VoicePortEMPolarity_Type(Integer32):
    """Custom type restAd10VoicePortEMPolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("notApplicable", 255),
          ("reverse", 1))
    )


_RestAd10VoicePortEMPolarity_Type.__name__ = "Integer32"
_RestAd10VoicePortEMPolarity_Object = MibTableColumn
restAd10VoicePortEMPolarity = _RestAd10VoicePortEMPolarity_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 8),
    _RestAd10VoicePortEMPolarity_Type()
)
restAd10VoicePortEMPolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortEMPolarity.setStatus("mandatory")


class _RestAd10VoicePortUncfgCktSig_Type(Integer32):
    """Custom type restAd10VoicePortUncfgCktSig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("busy", 2),
          ("idle", 1))
    )


_RestAd10VoicePortUncfgCktSig_Type.__name__ = "Integer32"
_RestAd10VoicePortUncfgCktSig_Object = MibTableColumn
restAd10VoicePortUncfgCktSig = _RestAd10VoicePortUncfgCktSig_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 9),
    _RestAd10VoicePortUncfgCktSig_Type()
)
restAd10VoicePortUncfgCktSig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortUncfgCktSig.setStatus("mandatory")


class _RestAd10VoicePortHookStateRx_Type(Integer32):
    """Custom type restAd10VoicePortHookStateRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_RestAd10VoicePortHookStateRx_Type.__name__ = "Integer32"
_RestAd10VoicePortHookStateRx_Object = MibTableColumn
restAd10VoicePortHookStateRx = _RestAd10VoicePortHookStateRx_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 10),
    _RestAd10VoicePortHookStateRx_Type()
)
restAd10VoicePortHookStateRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10VoicePortHookStateRx.setStatus("mandatory")


class _RestAd10VoicePortHookStateTx_Type(Integer32):
    """Custom type restAd10VoicePortHookStateTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_RestAd10VoicePortHookStateTx_Type.__name__ = "Integer32"
_RestAd10VoicePortHookStateTx_Object = MibTableColumn
restAd10VoicePortHookStateTx = _RestAd10VoicePortHookStateTx_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 11),
    _RestAd10VoicePortHookStateTx_Type()
)
restAd10VoicePortHookStateTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10VoicePortHookStateTx.setStatus("mandatory")


class _RestAd10VoicePortTxLevel_Type(Integer32):
    """Custom type restAd10VoicePortTxLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RestAd10VoicePortTxLevel_Type.__name__ = "Integer32"
_RestAd10VoicePortTxLevel_Object = MibTableColumn
restAd10VoicePortTxLevel = _RestAd10VoicePortTxLevel_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 12),
    _RestAd10VoicePortTxLevel_Type()
)
restAd10VoicePortTxLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortTxLevel.setStatus("mandatory")


class _RestAd10VoicePortRcvLevel_Type(Integer32):
    """Custom type restAd10VoicePortRcvLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RestAd10VoicePortRcvLevel_Type.__name__ = "Integer32"
_RestAd10VoicePortRcvLevel_Object = MibTableColumn
restAd10VoicePortRcvLevel = _RestAd10VoicePortRcvLevel_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 13),
    _RestAd10VoicePortRcvLevel_Type()
)
restAd10VoicePortRcvLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortRcvLevel.setStatus("mandatory")


class _RestAd10VoicePortTermination_Type(Integer32):
    """Custom type restAd10VoicePortTermination based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("r600ohms", 1),
          ("r900ohmsOrComplex", 2))
    )


_RestAd10VoicePortTermination_Type.__name__ = "Integer32"
_RestAd10VoicePortTermination_Object = MibTableColumn
restAd10VoicePortTermination = _RestAd10VoicePortTermination_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 14),
    _RestAd10VoicePortTermination_Type()
)
restAd10VoicePortTermination.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortTermination.setStatus("mandatory")


class _RestAd10VoicePortWire_Type(Integer32):
    """Custom type restAd10VoicePortWire based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("w2wire", 2),
          ("w4wire", 1))
    )


_RestAd10VoicePortWire_Type.__name__ = "Integer32"
_RestAd10VoicePortWire_Object = MibTableColumn
restAd10VoicePortWire = _RestAd10VoicePortWire_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 15),
    _RestAd10VoicePortWire_Type()
)
restAd10VoicePortWire.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortWire.setStatus("mandatory")


class _RestAd10VoicePortAc15Dial_Type(Integer32):
    """Custom type restAd10VoicePortAc15Dial based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dtmf", 1),
          ("notApplicable", 255),
          ("pulse", 2))
    )


_RestAd10VoicePortAc15Dial_Type.__name__ = "Integer32"
_RestAd10VoicePortAc15Dial_Object = MibTableColumn
restAd10VoicePortAc15Dial = _RestAd10VoicePortAc15Dial_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 16),
    _RestAd10VoicePortAc15Dial_Type()
)
restAd10VoicePortAc15Dial.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortAc15Dial.setStatus("mandatory")


class _RestAd10VoicePortTelcoIntType_Type(Integer32):
    """Custom type restAd10VoicePortTelcoIntType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("austel", 3),
          ("babt", 2),
          ("us", 1))
    )


_RestAd10VoicePortTelcoIntType_Type.__name__ = "Integer32"
_RestAd10VoicePortTelcoIntType_Object = MibTableColumn
restAd10VoicePortTelcoIntType = _RestAd10VoicePortTelcoIntType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 17),
    _RestAd10VoicePortTelcoIntType_Type()
)
restAd10VoicePortTelcoIntType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10VoicePortTelcoIntType.setStatus("mandatory")


class _RestAd10VoicePortSpeed_Type(Integer32):
    """Custom type restAd10VoicePortSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(40,
              54,
              56,
              60,
              64,
              68,
              72,
              76,
              80,
              84,
              88,
              92,
              96,
              100,
              104,
              108,
              112,
              116,
              120,
              124,
              128,
              132,
              136,
              140,
              144,
              148,
              152,
              156,
              160,
              164,
              168,
              172,
              176,
              180,
              184,
              188,
              192,
              196,
              200,
              204,
              208,
              212,
              216,
              220,
              224,
              228,
              232,
              236,
              240,
              65535)
        )
    )
    namedValues = NamedValues(
        *(("b10133", 76),
          ("b10666", 80),
          ("b11200", 84),
          ("b11733", 88),
          ("b12266", 92),
          ("b12800", 96),
          ("b13333", 100),
          ("b13866", 104),
          ("b14400", 108),
          ("b14933", 112),
          ("b15466", 116),
          ("b16000", 120),
          ("b16533", 124),
          ("b17066", 128),
          ("b17600", 132),
          ("b18133", 136),
          ("b18666", 140),
          ("b19200", 144),
          ("b19733", 148),
          ("b20266", 152),
          ("b20800", 156),
          ("b21333", 160),
          ("b21866", 164),
          ("b22400", 168),
          ("b22933", 172),
          ("b23466", 176),
          ("b24000", 180),
          ("b24533", 184),
          ("b25066", 188),
          ("b25600", 192),
          ("b26133", 196),
          ("b26666", 200),
          ("b27200", 204),
          ("b27733", 208),
          ("b28266", 212),
          ("b28800", 216),
          ("b29333", 220),
          ("b29866", 224),
          ("b30400", 228),
          ("b30933", 232),
          ("b31466", 236),
          ("b32000", 240),
          ("b5333", 40),
          ("b7200", 54),
          ("b7466", 56),
          ("b8000", 60),
          ("b8533", 64),
          ("b9066", 68),
          ("b9600", 72),
          ("disabled", 65535))
    )


_RestAd10VoicePortSpeed_Type.__name__ = "Integer32"
_RestAd10VoicePortSpeed_Object = MibTableColumn
restAd10VoicePortSpeed = _RestAd10VoicePortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 18),
    _RestAd10VoicePortSpeed_Type()
)
restAd10VoicePortSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10VoicePortSpeed.setStatus("mandatory")


class _RestAd10VoicePortCompressMode_Type(Integer32):
    """Custom type restAd10VoicePortCompressMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atc", 2),
          ("tCelp", 1))
    )


_RestAd10VoicePortCompressMode_Type.__name__ = "Integer32"
_RestAd10VoicePortCompressMode_Object = MibTableColumn
restAd10VoicePortCompressMode = _RestAd10VoicePortCompressMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 19),
    _RestAd10VoicePortCompressMode_Type()
)
restAd10VoicePortCompressMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10VoicePortCompressMode.setStatus("mandatory")


class _RestAd10VoicePortFaxMode_Type(Integer32):
    """Custom type restAd10VoicePortFaxMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("faxIIIdisable-NSFdontcare", 3),
          ("faxIIIenable-NSFdisable", 2),
          ("faxIIIenable-NSFenable", 1))
    )


_RestAd10VoicePortFaxMode_Type.__name__ = "Integer32"
_RestAd10VoicePortFaxMode_Object = MibTableColumn
restAd10VoicePortFaxMode = _RestAd10VoicePortFaxMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 20),
    _RestAd10VoicePortFaxMode_Type()
)
restAd10VoicePortFaxMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10VoicePortFaxMode.setStatus("mandatory")


class _RestAd10VoicePortOOSAudio_Type(Integer32):
    """Custom type restAd10VoicePortOOSAudio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fastBusy", 1),
          ("silence", 2))
    )


_RestAd10VoicePortOOSAudio_Type.__name__ = "Integer32"
_RestAd10VoicePortOOSAudio_Object = MibTableColumn
restAd10VoicePortOOSAudio = _RestAd10VoicePortOOSAudio_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 21),
    _RestAd10VoicePortOOSAudio_Type()
)
restAd10VoicePortOOSAudio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortOOSAudio.setStatus("mandatory")


class _RestAd10VoicePortCelpNetSigMd_Type(Integer32):
    """Custom type restAd10VoicePortCelpNetSigMd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("link", 3),
          ("st", 2))
    )


_RestAd10VoicePortCelpNetSigMd_Type.__name__ = "Integer32"
_RestAd10VoicePortCelpNetSigMd_Object = MibTableColumn
restAd10VoicePortCelpNetSigMd = _RestAd10VoicePortCelpNetSigMd_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 22),
    _RestAd10VoicePortCelpNetSigMd_Type()
)
restAd10VoicePortCelpNetSigMd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10VoicePortCelpNetSigMd.setStatus("mandatory")


class _RestAd10VoicePortCelpNetSigSt_Type(Integer32):
    """Custom type restAd10VoicePortCelpNetSigSt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("indeterminate", 1),
          ("link", 3),
          ("st", 2))
    )


_RestAd10VoicePortCelpNetSigSt_Type.__name__ = "Integer32"
_RestAd10VoicePortCelpNetSigSt_Object = MibTableColumn
restAd10VoicePortCelpNetSigSt = _RestAd10VoicePortCelpNetSigSt_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 3, 1, 23),
    _RestAd10VoicePortCelpNetSigSt_Type()
)
restAd10VoicePortCelpNetSigSt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10VoicePortCelpNetSigSt.setStatus("mandatory")
_RestAd10PktBandTable_Object = MibTable
restAd10PktBandTable = _RestAd10PktBandTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4)
)
if mibBuilder.loadTexts:
    restAd10PktBandTable.setStatus("mandatory")
_RestAd10PktBandEntry_Object = MibTableRow
restAd10PktBandEntry = _RestAd10PktBandEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1)
)
restAd10PktBandEntry.setIndexNames(
    (0, "STMIB", "restAd10PktBandAddr"),
)
if mibBuilder.loadTexts:
    restAd10PktBandEntry.setStatus("mandatory")
_RestAd10PktBandAddr_Type = Ad10PortAddr
_RestAd10PktBandAddr_Object = MibTableColumn
restAd10PktBandAddr = _RestAd10PktBandAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 1),
    _RestAd10PktBandAddr_Type()
)
restAd10PktBandAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10PktBandAddr.setStatus("mandatory")


class _RestAd10PktBandDiagnostics_Type(Integer32):
    """Custom type restAd10PktBandDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("insert", 4),
          ("remove", 5),
          ("reset", 6))
    )


_RestAd10PktBandDiagnostics_Type.__name__ = "Integer32"
_RestAd10PktBandDiagnostics_Object = MibTableColumn
restAd10PktBandDiagnostics = _RestAd10PktBandDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 2),
    _RestAd10PktBandDiagnostics_Type()
)
restAd10PktBandDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restAd10PktBandDiagnostics.setStatus("mandatory")


class _RestAd10PktBandStatMuxMode_Type(Integer32):
    """Custom type restAd10PktBandStatMuxMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("bertTowardNetwork", 5),
          ("bertTowardSub", 4),
          ("disableDiagnosis", 3),
          ("loopNet", 7),
          ("loopSub", 6),
          ("offline", 1),
          ("online", 2))
    )


_RestAd10PktBandStatMuxMode_Type.__name__ = "Integer32"
_RestAd10PktBandStatMuxMode_Object = MibTableColumn
restAd10PktBandStatMuxMode = _RestAd10PktBandStatMuxMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 3),
    _RestAd10PktBandStatMuxMode_Type()
)
restAd10PktBandStatMuxMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10PktBandStatMuxMode.setStatus("deprecated")


class _RestAd10PktBandMaxSegSize_Type(Integer32):
    """Custom type restAd10PktBandMaxSegSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("b256bytes", 2),
          ("b64bytes", 1))
    )


_RestAd10PktBandMaxSegSize_Type.__name__ = "Integer32"
_RestAd10PktBandMaxSegSize_Object = MibTableColumn
restAd10PktBandMaxSegSize = _RestAd10PktBandMaxSegSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 4),
    _RestAd10PktBandMaxSegSize_Type()
)
restAd10PktBandMaxSegSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restAd10PktBandMaxSegSize.setStatus("mandatory")


class _RestAd10PktBandBaudRate_Type(Integer32):
    """Custom type restAd10PktBandBaudRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(9,
              10,
              12,
              14,
              15,
              16,
              18,
              20,
              21,
              24,
              27,
              28,
              30,
              32,
              35,
              36,
              40,
              42,
              45,
              48,
              54,
              56,
              60,
              63,
              70,
              72,
              80,
              84,
              90,
              96,
              105,
              108,
              112,
              120,
              126,
              135,
              140,
              144,
              160,
              168,
              180,
              189,
              210,
              216,
              224,
              240,
              252,
              270,
              280,
              288,
              315,
              336,
              360,
              378,
              420,
              432,
              480,
              504,
              540,
              560,
              630,
              672,
              720,
              756,
              840,
              864,
              945,
              960,
              65535)
        )
    )
    namedValues = NamedValues(
        *(("b100800", 756),
          ("b10667", 80),
          ("b11200", 84),
          ("b112000", 840),
          ("b115200", 864),
          ("b1200", 9),
          ("b12000", 90),
          ("b126000", 945),
          ("b12800", 96),
          ("b128000", 960),
          ("b1334", 10),
          ("b14000", 105),
          ("b14400", 108),
          ("b14934", 112),
          ("b1600", 12),
          ("b16000", 120),
          ("b16800", 126),
          ("b18000", 135),
          ("b18667", 140),
          ("b1867", 14),
          ("b19200", 144),
          ("b2000", 15),
          ("b21334", 160),
          ("b2134", 16),
          ("b22400", 168),
          ("b2400", 18),
          ("b24000", 180),
          ("b25200", 189),
          ("b2667", 20),
          ("b2800", 21),
          ("b28000", 210),
          ("b28800", 216),
          ("b29867", 224),
          ("b3200", 24),
          ("b32000", 240),
          ("b33600", 252),
          ("b3600", 27),
          ("b36000", 270),
          ("b37334", 280),
          ("b3734", 28),
          ("b38400", 288),
          ("b4000", 30),
          ("b42000", 315),
          ("b4267", 32),
          ("b44800", 336),
          ("b4667", 35),
          ("b4800", 36),
          ("b48000", 360),
          ("b50400", 378),
          ("b5334", 40),
          ("b5600", 42),
          ("b56000", 420),
          ("b57600", 432),
          ("b6000", 45),
          ("b6400", 48),
          ("b64000", 480),
          ("b67200", 504),
          ("b7200", 54),
          ("b72000", 540),
          ("b74667", 560),
          ("b7467", 56),
          ("b8000", 60),
          ("b8400", 63),
          ("b84000", 630),
          ("b89600", 672),
          ("b9334", 70),
          ("b9600", 72),
          ("b96000", 720),
          ("disabled", 65535))
    )


_RestAd10PktBandBaudRate_Type.__name__ = "Integer32"
_RestAd10PktBandBaudRate_Object = MibTableColumn
restAd10PktBandBaudRate = _RestAd10PktBandBaudRate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 5),
    _RestAd10PktBandBaudRate_Type()
)
restAd10PktBandBaudRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10PktBandBaudRate.setStatus("mandatory")
_RestAd10PktBandMinBandwidth_Type = Integer32
_RestAd10PktBandMinBandwidth_Object = MibTableColumn
restAd10PktBandMinBandwidth = _RestAd10PktBandMinBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 6),
    _RestAd10PktBandMinBandwidth_Type()
)
restAd10PktBandMinBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10PktBandMinBandwidth.setStatus("mandatory")
_RestAd10PktBandCurBandwidth_Type = Integer32
_RestAd10PktBandCurBandwidth_Object = MibTableColumn
restAd10PktBandCurBandwidth = _RestAd10PktBandCurBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 7),
    _RestAd10PktBandCurBandwidth_Type()
)
restAd10PktBandCurBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10PktBandCurBandwidth.setStatus("mandatory")
_RestAd10PktBandMaxBandwidth_Type = Integer32
_RestAd10PktBandMaxBandwidth_Object = MibTableColumn
restAd10PktBandMaxBandwidth = _RestAd10PktBandMaxBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 10, 4, 1, 8),
    _RestAd10PktBandMaxBandwidth_Type()
)
restAd10PktBandMaxBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAd10PktBandMaxBandwidth.setStatus("mandatory")
_RestAsmPort_ObjectIdentity = ObjectIdentity
restAsmPort = _RestAsmPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11)
)
_RestAsmX50Table_ObjectIdentity = ObjectIdentity
restAsmX50Table = _RestAsmX50Table_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1)
)
_RestAsmX50PortTable_Object = MibTable
restAsmX50PortTable = _RestAsmX50PortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1)
)
if mibBuilder.loadTexts:
    restAsmX50PortTable.setStatus("mandatory")
_RestAsmX50PortEntry_Object = MibTableRow
restAsmX50PortEntry = _RestAsmX50PortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1, 1)
)
restAsmX50PortEntry.setIndexNames(
    (0, "STMIB", "restAsmX50PortAddr"),
)
if mibBuilder.loadTexts:
    restAsmX50PortEntry.setStatus("mandatory")
_RestAsmX50PortAddr_Type = PortAddr
_RestAsmX50PortAddr_Object = MibTableColumn
restAsmX50PortAddr = _RestAsmX50PortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1, 1, 1),
    _RestAsmX50PortAddr_Type()
)
restAsmX50PortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmX50PortAddr.setStatus("mandatory")


class _RestAsmX50PortEngine_Type(Integer32):
    """Custom type restAsmX50PortEngine based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RestAsmX50PortEngine_Type.__name__ = "Integer32"
_RestAsmX50PortEngine_Object = MibTableColumn
restAsmX50PortEngine = _RestAsmX50PortEngine_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1, 1, 2),
    _RestAsmX50PortEngine_Type()
)
restAsmX50PortEngine.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmX50PortEngine.setStatus("mandatory")


class _RestAsmX50PortRxHouseKbits_Type(OctetString):
    """Custom type restAsmX50PortRxHouseKbits based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RestAsmX50PortRxHouseKbits_Type.__name__ = "OctetString"
_RestAsmX50PortRxHouseKbits_Object = MibTableColumn
restAsmX50PortRxHouseKbits = _RestAsmX50PortRxHouseKbits_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1, 1, 3),
    _RestAsmX50PortRxHouseKbits_Type()
)
restAsmX50PortRxHouseKbits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmX50PortRxHouseKbits.setStatus("mandatory")


class _RestAsmX50PortCktTimeSlotMap_Type(OctetString):
    """Custom type restAsmX50PortCktTimeSlotMap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 20),
    )


_RestAsmX50PortCktTimeSlotMap_Type.__name__ = "OctetString"
_RestAsmX50PortCktTimeSlotMap_Object = MibTableColumn
restAsmX50PortCktTimeSlotMap = _RestAsmX50PortCktTimeSlotMap_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1, 1, 4),
    _RestAsmX50PortCktTimeSlotMap_Type()
)
restAsmX50PortCktTimeSlotMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmX50PortCktTimeSlotMap.setStatus("mandatory")


class _RestAsmX50PortAggrStatus_Type(Integer32):
    """Custom type restAsmX50PortAggrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              6,
              8,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("inSync", 2),
          ("loopback", 17),
          ("los", 4),
          ("losRos", 8),
          ("oos", 16),
          ("pending", 1),
          ("ros", 6))
    )


_RestAsmX50PortAggrStatus_Type.__name__ = "Integer32"
_RestAsmX50PortAggrStatus_Object = MibTableColumn
restAsmX50PortAggrStatus = _RestAsmX50PortAggrStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 1, 1, 5),
    _RestAsmX50PortAggrStatus_Type()
)
restAsmX50PortAggrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmX50PortAggrStatus.setStatus("mandatory")
_RestAsmX50CkTable_Object = MibTable
restAsmX50CkTable = _RestAsmX50CkTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 2)
)
if mibBuilder.loadTexts:
    restAsmX50CkTable.setStatus("mandatory")
_RestAsmX50CkEntry_Object = MibTableRow
restAsmX50CkEntry = _RestAsmX50CkEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 2, 1)
)
restAsmX50CkEntry.setIndexNames(
    (0, "STMIB", "restAsmX50CkAddr"),
)
if mibBuilder.loadTexts:
    restAsmX50CkEntry.setStatus("mandatory")
_RestAsmX50CkAddr_Type = AsmX50CkAddr
_RestAsmX50CkAddr_Object = MibTableColumn
restAsmX50CkAddr = _RestAsmX50CkAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 2, 1, 1),
    _RestAsmX50CkAddr_Type()
)
restAsmX50CkAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmX50CkAddr.setStatus("mandatory")


class _RestAsmX50CkDiagnostics_Type(Integer32):
    """Custom type restAsmX50CkDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("insert", 4),
          ("remove", 5),
          ("reset", 6))
    )


_RestAsmX50CkDiagnostics_Type.__name__ = "Integer32"
_RestAsmX50CkDiagnostics_Object = MibTableColumn
restAsmX50CkDiagnostics = _RestAsmX50CkDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 2, 1, 2),
    _RestAsmX50CkDiagnostics_Type()
)
restAsmX50CkDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restAsmX50CkDiagnostics.setStatus("mandatory")


class _RestAsmX50CkSbitStatus_Type(Integer32):
    """Custom type restAsmX50CkSbitStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("one", 1),
          ("zero", 2))
    )


_RestAsmX50CkSbitStatus_Type.__name__ = "Integer32"
_RestAsmX50CkSbitStatus_Object = MibTableColumn
restAsmX50CkSbitStatus = _RestAsmX50CkSbitStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 2, 1, 3),
    _RestAsmX50CkSbitStatus_Type()
)
restAsmX50CkSbitStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmX50CkSbitStatus.setStatus("mandatory")


class _RestAsmX50CkPhasorStatus_Type(OctetString):
    """Custom type restAsmX50CkPhasorStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestAsmX50CkPhasorStatus_Type.__name__ = "OctetString"
_RestAsmX50CkPhasorStatus_Object = MibTableColumn
restAsmX50CkPhasorStatus = _RestAsmX50CkPhasorStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 1, 2, 1, 4),
    _RestAsmX50CkPhasorStatus_Type()
)
restAsmX50CkPhasorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmX50CkPhasorStatus.setStatus("mandatory")
_RestAsmVoice_ObjectIdentity = ObjectIdentity
restAsmVoice = _RestAsmVoice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2)
)
_RestAsmVoicePortTable_Object = MibTable
restAsmVoicePortTable = _RestAsmVoicePortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1)
)
if mibBuilder.loadTexts:
    restAsmVoicePortTable.setStatus("mandatory")
_RestAsmVoicePortEntry_Object = MibTableRow
restAsmVoicePortEntry = _RestAsmVoicePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1)
)
restAsmVoicePortEntry.setIndexNames(
    (0, "STMIB", "restAsmVoicePortChannelAddr"),
)
if mibBuilder.loadTexts:
    restAsmVoicePortEntry.setStatus("mandatory")
_RestAsmVoicePortChannelAddr_Type = ChannelAddr
_RestAsmVoicePortChannelAddr_Object = MibTableColumn
restAsmVoicePortChannelAddr = _RestAsmVoicePortChannelAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 1),
    _RestAsmVoicePortChannelAddr_Type()
)
restAsmVoicePortChannelAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortChannelAddr.setStatus("mandatory")
_RestAsmVoicePortAddr_Type = PortAddr
_RestAsmVoicePortAddr_Object = MibTableColumn
restAsmVoicePortAddr = _RestAsmVoicePortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 2),
    _RestAsmVoicePortAddr_Type()
)
restAsmVoicePortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortAddr.setStatus("mandatory")
_RestAsmVoicePortTrkGrpAddr_Type = PortAddr
_RestAsmVoicePortTrkGrpAddr_Object = MibTableColumn
restAsmVoicePortTrkGrpAddr = _RestAsmVoicePortTrkGrpAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 3),
    _RestAsmVoicePortTrkGrpAddr_Type()
)
restAsmVoicePortTrkGrpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortTrkGrpAddr.setStatus("mandatory")


class _RestAsmVoicePortEngine_Type(Integer32):
    """Custom type restAsmVoicePortEngine based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RestAsmVoicePortEngine_Type.__name__ = "Integer32"
_RestAsmVoicePortEngine_Object = MibTableColumn
restAsmVoicePortEngine = _RestAsmVoicePortEngine_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 4),
    _RestAsmVoicePortEngine_Type()
)
restAsmVoicePortEngine.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortEngine.setStatus("mandatory")


class _RestAsmVoicePortPacketSize_Type(Integer32):
    """Custom type restAsmVoicePortPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(20, 60),
    )


_RestAsmVoicePortPacketSize_Type.__name__ = "Integer32"
_RestAsmVoicePortPacketSize_Object = MibTableColumn
restAsmVoicePortPacketSize = _RestAsmVoicePortPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 5),
    _RestAsmVoicePortPacketSize_Type()
)
restAsmVoicePortPacketSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortPacketSize.setStatus("mandatory")


class _RestAsmVoicePortBlockSize_Type(Integer32):
    """Custom type restAsmVoicePortBlockSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(120, 240),
    )


_RestAsmVoicePortBlockSize_Type.__name__ = "Integer32"
_RestAsmVoicePortBlockSize_Object = MibTableColumn
restAsmVoicePortBlockSize = _RestAsmVoicePortBlockSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 6),
    _RestAsmVoicePortBlockSize_Type()
)
restAsmVoicePortBlockSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortBlockSize.setStatus("mandatory")


class _RestAsmVoicePortEchoCanceller_Type(OctetString):
    """Custom type restAsmVoicePortEchoCanceller based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RestAsmVoicePortEchoCanceller_Type.__name__ = "OctetString"
_RestAsmVoicePortEchoCanceller_Object = MibTableColumn
restAsmVoicePortEchoCanceller = _RestAsmVoicePortEchoCanceller_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 7),
    _RestAsmVoicePortEchoCanceller_Type()
)
restAsmVoicePortEchoCanceller.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortEchoCanceller.setStatus("mandatory")


class _RestAsmVoicePortDTMFRelay_Type(OctetString):
    """Custom type restAsmVoicePortDTMFRelay based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RestAsmVoicePortDTMFRelay_Type.__name__ = "OctetString"
_RestAsmVoicePortDTMFRelay_Object = MibTableColumn
restAsmVoicePortDTMFRelay = _RestAsmVoicePortDTMFRelay_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 8),
    _RestAsmVoicePortDTMFRelay_Type()
)
restAsmVoicePortDTMFRelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortDTMFRelay.setStatus("mandatory")


class _RestAsmVoicePortFaxRelay_Type(OctetString):
    """Custom type restAsmVoicePortFaxRelay based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RestAsmVoicePortFaxRelay_Type.__name__ = "OctetString"
_RestAsmVoicePortFaxRelay_Object = MibTableColumn
restAsmVoicePortFaxRelay = _RestAsmVoicePortFaxRelay_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 9),
    _RestAsmVoicePortFaxRelay_Type()
)
restAsmVoicePortFaxRelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortFaxRelay.setStatus("mandatory")


class _RestAsmVoicePortPacket_Type(OctetString):
    """Custom type restAsmVoicePortPacket based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_RestAsmVoicePortPacket_Type.__name__ = "OctetString"
_RestAsmVoicePortPacket_Object = MibTableColumn
restAsmVoicePortPacket = _RestAsmVoicePortPacket_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 10),
    _RestAsmVoicePortPacket_Type()
)
restAsmVoicePortPacket.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortPacket.setStatus("mandatory")


class _RestAsmVoicePortSubratePhasor_Type(OctetString):
    """Custom type restAsmVoicePortSubratePhasor based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestAsmVoicePortSubratePhasor_Type.__name__ = "OctetString"
_RestAsmVoicePortSubratePhasor_Object = MibTableColumn
restAsmVoicePortSubratePhasor = _RestAsmVoicePortSubratePhasor_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 11),
    _RestAsmVoicePortSubratePhasor_Type()
)
restAsmVoicePortSubratePhasor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortSubratePhasor.setStatus("mandatory")


class _RestAsmVoicePortSignalingLOS_Type(Integer32):
    """Custom type restAsmVoicePortSignalingLOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inSync", 1),
          ("los", 2))
    )


_RestAsmVoicePortSignalingLOS_Type.__name__ = "Integer32"
_RestAsmVoicePortSignalingLOS_Object = MibTableColumn
restAsmVoicePortSignalingLOS = _RestAsmVoicePortSignalingLOS_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 12),
    _RestAsmVoicePortSignalingLOS_Type()
)
restAsmVoicePortSignalingLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortSignalingLOS.setStatus("mandatory")


class _RestAsmVoicePortFrameLOS_Type(Integer32):
    """Custom type restAsmVoicePortFrameLOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inSync", 1),
          ("los", 2))
    )


_RestAsmVoicePortFrameLOS_Type.__name__ = "Integer32"
_RestAsmVoicePortFrameLOS_Object = MibTableColumn
restAsmVoicePortFrameLOS = _RestAsmVoicePortFrameLOS_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 13),
    _RestAsmVoicePortFrameLOS_Type()
)
restAsmVoicePortFrameLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortFrameLOS.setStatus("mandatory")


class _RestAsmVoicePortCelpNetSigSt_Type(Integer32):
    """Custom type restAsmVoicePortCelpNetSigSt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("indeterminate", 1),
          ("link", 3),
          ("st", 2))
    )


_RestAsmVoicePortCelpNetSigSt_Type.__name__ = "Integer32"
_RestAsmVoicePortCelpNetSigSt_Object = MibTableColumn
restAsmVoicePortCelpNetSigSt = _RestAsmVoicePortCelpNetSigSt_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 11, 2, 1, 1, 14),
    _RestAsmVoicePortCelpNetSigSt_Type()
)
restAsmVoicePortCelpNetSigSt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restAsmVoicePortCelpNetSigSt.setStatus("mandatory")
_RestTrunkGroup_ObjectIdentity = ObjectIdentity
restTrunkGroup = _RestTrunkGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12)
)
_RestTrkGrpTable_Object = MibTable
restTrkGrpTable = _RestTrkGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 1)
)
if mibBuilder.loadTexts:
    restTrkGrpTable.setStatus("mandatory")
_RestTrkGrpEntry_Object = MibTableRow
restTrkGrpEntry = _RestTrkGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 1, 1)
)
restTrkGrpEntry.setIndexNames(
    (0, "STMIB", "restTrkGrpAddr"),
)
if mibBuilder.loadTexts:
    restTrkGrpEntry.setStatus("mandatory")
_RestTrkGrpAddr_Type = PortAddr
_RestTrkGrpAddr_Object = MibTableColumn
restTrkGrpAddr = _RestTrkGrpAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 1, 1, 1),
    _RestTrkGrpAddr_Type()
)
restTrkGrpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restTrkGrpAddr.setStatus("mandatory")


class _RestTrkGrpStatus_Type(Integer32):
    """Custom type restTrkGrpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("inactive", 2))
    )


_RestTrkGrpStatus_Type.__name__ = "Integer32"
_RestTrkGrpStatus_Object = MibTableColumn
restTrkGrpStatus = _RestTrkGrpStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 1, 1, 2),
    _RestTrkGrpStatus_Type()
)
restTrkGrpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restTrkGrpStatus.setStatus("mandatory")
_RestTrkGrpContentsTable_Object = MibTable
restTrkGrpContentsTable = _RestTrkGrpContentsTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2)
)
if mibBuilder.loadTexts:
    restTrkGrpContentsTable.setStatus("mandatory")
_RestTrkGrpContentsEntry_Object = MibTableRow
restTrkGrpContentsEntry = _RestTrkGrpContentsEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1)
)
restTrkGrpContentsEntry.setIndexNames(
    (0, "STMIB", "restTrkGrpContentsAddr"),
    (0, "STMIB", "restTrkGrpContentsSequenceID"),
)
if mibBuilder.loadTexts:
    restTrkGrpContentsEntry.setStatus("mandatory")
_RestTrkGrpContentsAddr_Type = PortAddr
_RestTrkGrpContentsAddr_Object = MibTableColumn
restTrkGrpContentsAddr = _RestTrkGrpContentsAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 1),
    _RestTrkGrpContentsAddr_Type()
)
restTrkGrpContentsAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restTrkGrpContentsAddr.setStatus("mandatory")


class _RestTrkGrpContentsSequenceID_Type(Integer32):
    """Custom type restTrkGrpContentsSequenceID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RestTrkGrpContentsSequenceID_Type.__name__ = "Integer32"
_RestTrkGrpContentsSequenceID_Object = MibTableColumn
restTrkGrpContentsSequenceID = _RestTrkGrpContentsSequenceID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 2),
    _RestTrkGrpContentsSequenceID_Type()
)
restTrkGrpContentsSequenceID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restTrkGrpContentsSequenceID.setStatus("mandatory")
_RestTrkGrpContentsSrcNodeID_Type = NodeAddr
_RestTrkGrpContentsSrcNodeID_Object = MibTableColumn
restTrkGrpContentsSrcNodeID = _RestTrkGrpContentsSrcNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 3),
    _RestTrkGrpContentsSrcNodeID_Type()
)
restTrkGrpContentsSrcNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restTrkGrpContentsSrcNodeID.setStatus("mandatory")
_RestTrkGrpContentsSrcTrkGrpAddr_Type = PortAddr
_RestTrkGrpContentsSrcTrkGrpAddr_Object = MibTableColumn
restTrkGrpContentsSrcTrkGrpAddr = _RestTrkGrpContentsSrcTrkGrpAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 4),
    _RestTrkGrpContentsSrcTrkGrpAddr_Type()
)
restTrkGrpContentsSrcTrkGrpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restTrkGrpContentsSrcTrkGrpAddr.setStatus("mandatory")
_RestTrkGrpContentsSrcChAddr_Type = ChannelAddr
_RestTrkGrpContentsSrcChAddr_Object = MibTableColumn
restTrkGrpContentsSrcChAddr = _RestTrkGrpContentsSrcChAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 5),
    _RestTrkGrpContentsSrcChAddr_Type()
)
restTrkGrpContentsSrcChAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restTrkGrpContentsSrcChAddr.setStatus("mandatory")
_RestTrkGrpContentsDstNodeID_Type = NodeAddr
_RestTrkGrpContentsDstNodeID_Object = MibTableColumn
restTrkGrpContentsDstNodeID = _RestTrkGrpContentsDstNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 6),
    _RestTrkGrpContentsDstNodeID_Type()
)
restTrkGrpContentsDstNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restTrkGrpContentsDstNodeID.setStatus("mandatory")
_RestTrkGrpContentsDstTrkGrpAddr_Type = PortAddr
_RestTrkGrpContentsDstTrkGrpAddr_Object = MibTableColumn
restTrkGrpContentsDstTrkGrpAddr = _RestTrkGrpContentsDstTrkGrpAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 7),
    _RestTrkGrpContentsDstTrkGrpAddr_Type()
)
restTrkGrpContentsDstTrkGrpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restTrkGrpContentsDstTrkGrpAddr.setStatus("mandatory")
_RestTrkGrpContentsDstChAddr_Type = ChannelAddr
_RestTrkGrpContentsDstChAddr_Object = MibTableColumn
restTrkGrpContentsDstChAddr = _RestTrkGrpContentsDstChAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 12, 2, 1, 8),
    _RestTrkGrpContentsDstChAddr_Type()
)
restTrkGrpContentsDstChAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restTrkGrpContentsDstChAddr.setStatus("mandatory")
_RestRtmPort_ObjectIdentity = ObjectIdentity
restRtmPort = _RestRtmPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13)
)
_RestRtmPortTable_Object = MibTable
restRtmPortTable = _RestRtmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1)
)
if mibBuilder.loadTexts:
    restRtmPortTable.setStatus("mandatory")
_RestRtmPortEntry_Object = MibTableRow
restRtmPortEntry = _RestRtmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1)
)
restRtmPortEntry.setIndexNames(
    (0, "STMIB", "restRtmPortAddr"),
)
if mibBuilder.loadTexts:
    restRtmPortEntry.setStatus("mandatory")
_RestRtmPortAddr_Type = PortAddr
_RestRtmPortAddr_Object = MibTableColumn
restRtmPortAddr = _RestRtmPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 1),
    _RestRtmPortAddr_Type()
)
restRtmPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmPortAddr.setStatus("mandatory")
_RestRtmPortAdFmtRevision_Type = Integer32
_RestRtmPortAdFmtRevision_Object = MibTableColumn
restRtmPortAdFmtRevision = _RestRtmPortAdFmtRevision_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 2),
    _RestRtmPortAdFmtRevision_Type()
)
restRtmPortAdFmtRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmPortAdFmtRevision.setStatus("mandatory")


class _RestRtmPortAdType_Type(Integer32):
    """Custom type restRtmPortAdType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ad3", 2),
          ("ad7", 3))
    )


_RestRtmPortAdType_Type.__name__ = "Integer32"
_RestRtmPortAdType_Object = MibTableColumn
restRtmPortAdType = _RestRtmPortAdType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 3),
    _RestRtmPortAdType_Type()
)
restRtmPortAdType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmPortAdType.setStatus("mandatory")


class _RestRtmPortAdSubtype_Type(Integer32):
    """Custom type restRtmPortAdSubtype based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("daughterBrdInt", 2),
          ("integralInt", 1),
          ("sipexChipInt", 3))
    )


_RestRtmPortAdSubtype_Type.__name__ = "Integer32"
_RestRtmPortAdSubtype_Object = MibTableColumn
restRtmPortAdSubtype = _RestRtmPortAdSubtype_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 4),
    _RestRtmPortAdSubtype_Type()
)
restRtmPortAdSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmPortAdSubtype.setStatus("mandatory")


class _RestRtmPortAdAssemblyNmb_Type(DisplayString):
    """Custom type restRtmPortAdAssemblyNmb based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RestRtmPortAdAssemblyNmb_Type.__name__ = "DisplayString"
_RestRtmPortAdAssemblyNmb_Object = MibTableColumn
restRtmPortAdAssemblyNmb = _RestRtmPortAdAssemblyNmb_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 5),
    _RestRtmPortAdAssemblyNmb_Type()
)
restRtmPortAdAssemblyNmb.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmPortAdAssemblyNmb.setStatus("mandatory")


class _RestRtmPortAdMotherBrdAssmNmb_Type(DisplayString):
    """Custom type restRtmPortAdMotherBrdAssmNmb based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RestRtmPortAdMotherBrdAssmNmb_Type.__name__ = "DisplayString"
_RestRtmPortAdMotherBrdAssmNmb_Object = MibTableColumn
restRtmPortAdMotherBrdAssmNmb = _RestRtmPortAdMotherBrdAssmNmb_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 6),
    _RestRtmPortAdMotherBrdAssmNmb_Type()
)
restRtmPortAdMotherBrdAssmNmb.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmPortAdMotherBrdAssmNmb.setStatus("mandatory")


class _RestRtmPortAdSerialNmb_Type(DisplayString):
    """Custom type restRtmPortAdSerialNmb based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RestRtmPortAdSerialNmb_Type.__name__ = "DisplayString"
_RestRtmPortAdSerialNmb_Object = MibTableColumn
restRtmPortAdSerialNmb = _RestRtmPortAdSerialNmb_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 7),
    _RestRtmPortAdSerialNmb_Type()
)
restRtmPortAdSerialNmb.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmPortAdSerialNmb.setStatus("mandatory")


class _RestRtmPortAdManufactDate_Type(DisplayString):
    """Custom type restRtmPortAdManufactDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_RestRtmPortAdManufactDate_Type.__name__ = "DisplayString"
_RestRtmPortAdManufactDate_Object = MibTableColumn
restRtmPortAdManufactDate = _RestRtmPortAdManufactDate_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 8),
    _RestRtmPortAdManufactDate_Type()
)
restRtmPortAdManufactDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmPortAdManufactDate.setStatus("mandatory")
_RestRtmPortAdRamSize_Type = Integer32
_RestRtmPortAdRamSize_Object = MibTableColumn
restRtmPortAdRamSize = _RestRtmPortAdRamSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 9),
    _RestRtmPortAdRamSize_Type()
)
restRtmPortAdRamSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmPortAdRamSize.setStatus("mandatory")


class _RestRtmPortAdModDiagResult_Type(OctetString):
    """Custom type restRtmPortAdModDiagResult based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestRtmPortAdModDiagResult_Type.__name__ = "OctetString"
_RestRtmPortAdModDiagResult_Object = MibTableColumn
restRtmPortAdModDiagResult = _RestRtmPortAdModDiagResult_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 10),
    _RestRtmPortAdModDiagResult_Type()
)
restRtmPortAdModDiagResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmPortAdModDiagResult.setStatus("mandatory")


class _RestRtmPortAdPortDiagResult_Type(OctetString):
    """Custom type restRtmPortAdPortDiagResult based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestRtmPortAdPortDiagResult_Type.__name__ = "OctetString"
_RestRtmPortAdPortDiagResult_Object = MibTableColumn
restRtmPortAdPortDiagResult = _RestRtmPortAdPortDiagResult_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 11),
    _RestRtmPortAdPortDiagResult_Type()
)
restRtmPortAdPortDiagResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmPortAdPortDiagResult.setStatus("mandatory")


class _RestRtmPortAdCpMode_Type(Integer32):
    """Custom type restRtmPortAdCpMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RestRtmPortAdCpMode_Type.__name__ = "Integer32"
_RestRtmPortAdCpMode_Object = MibTableColumn
restRtmPortAdCpMode = _RestRtmPortAdCpMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 12),
    _RestRtmPortAdCpMode_Type()
)
restRtmPortAdCpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restRtmPortAdCpMode.setStatus("mandatory")


class _RestRtmPortAdCpSpeed_Type(Integer32):
    """Custom type restRtmPortAdCpSpeed based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("a19200", 2),
          ("a9600", 1))
    )


_RestRtmPortAdCpSpeed_Type.__name__ = "Integer32"
_RestRtmPortAdCpSpeed_Object = MibTableColumn
restRtmPortAdCpSpeed = _RestRtmPortAdCpSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 1, 1, 13),
    _RestRtmPortAdCpSpeed_Type()
)
restRtmPortAdCpSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restRtmPortAdCpSpeed.setStatus("mandatory")
_RestRtmAdPortTable_Object = MibTable
restRtmAdPortTable = _RestRtmAdPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2)
)
if mibBuilder.loadTexts:
    restRtmAdPortTable.setStatus("mandatory")
_RestRtmAdPortEntry_Object = MibTableRow
restRtmAdPortEntry = _RestRtmAdPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1)
)
restRtmAdPortEntry.setIndexNames(
    (0, "STMIB", "restRtmAdPortAddr"),
)
if mibBuilder.loadTexts:
    restRtmAdPortEntry.setStatus("mandatory")
_RestRtmAdPortAddr_Type = RtmAdPortAddr
_RestRtmAdPortAddr_Object = MibTableColumn
restRtmAdPortAddr = _RestRtmAdPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 1),
    _RestRtmAdPortAddr_Type()
)
restRtmAdPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmAdPortAddr.setStatus("mandatory")


class _RestRtmAdPortDiagnostics_Type(Integer32):
    """Custom type restRtmAdPortDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("clearLoopback", 8),
          ("insert", 4),
          ("remove", 5),
          ("reset", 6),
          ("setLoopback", 9))
    )


_RestRtmAdPortDiagnostics_Type.__name__ = "Integer32"
_RestRtmAdPortDiagnostics_Object = MibTableColumn
restRtmAdPortDiagnostics = _RestRtmAdPortDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 2),
    _RestRtmAdPortDiagnostics_Type()
)
restRtmAdPortDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restRtmAdPortDiagnostics.setStatus("mandatory")


class _RestRtmAdPortInterface_Type(Integer32):
    """Custom type restRtmAdPortInterface based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dce1", 1),
          ("dce3", 3))
    )


_RestRtmAdPortInterface_Type.__name__ = "Integer32"
_RestRtmAdPortInterface_Object = MibTableColumn
restRtmAdPortInterface = _RestRtmAdPortInterface_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 3),
    _RestRtmAdPortInterface_Type()
)
restRtmAdPortInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restRtmAdPortInterface.setStatus("mandatory")


class _RestRtmAdPortStopBits_Type(Integer32):
    """Custom type restRtmAdPortStopBits based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("oneStopBit", 1),
          ("twoStopBit", 2))
    )


_RestRtmAdPortStopBits_Type.__name__ = "Integer32"
_RestRtmAdPortStopBits_Object = MibTableColumn
restRtmAdPortStopBits = _RestRtmAdPortStopBits_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 4),
    _RestRtmAdPortStopBits_Type()
)
restRtmAdPortStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restRtmAdPortStopBits.setStatus("mandatory")


class _RestRtmAdPortGeneration_Type(Integer32):
    """Custom type restRtmAdPortGeneration based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("autogen", 2),
          ("transparent", 1))
    )


_RestRtmAdPortGeneration_Type.__name__ = "Integer32"
_RestRtmAdPortGeneration_Object = MibTableColumn
restRtmAdPortGeneration = _RestRtmAdPortGeneration_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 5),
    _RestRtmAdPortGeneration_Type()
)
restRtmAdPortGeneration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restRtmAdPortGeneration.setStatus("mandatory")


class _RestRtmAdPortContention_Type(Integer32):
    """Custom type restRtmAdPortContention based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("f1nf1", 2),
          ("f2nf2", 3),
          ("nobwc", 1))
    )


_RestRtmAdPortContention_Type.__name__ = "Integer32"
_RestRtmAdPortContention_Object = MibTableColumn
restRtmAdPortContention = _RestRtmAdPortContention_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 6),
    _RestRtmAdPortContention_Type()
)
restRtmAdPortContention.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restRtmAdPortContention.setStatus("mandatory")


class _RestRtmAdPortOosOper_Type(Integer32):
    """Custom type restRtmAdPortOosOper based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("doNothing", 1),
          ("forceFn", 2),
          ("mark", 3),
          ("markFf", 4),
          ("space", 5),
          ("spaceFf", 6))
    )


_RestRtmAdPortOosOper_Type.__name__ = "Integer32"
_RestRtmAdPortOosOper_Object = MibTableColumn
restRtmAdPortOosOper = _RestRtmAdPortOosOper_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 7),
    _RestRtmAdPortOosOper_Type()
)
restRtmAdPortOosOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restRtmAdPortOosOper.setStatus("mandatory")


class _RestRtmAdPortState_Type(Integer32):
    """Custom type restRtmAdPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("defined", 2),
          ("online", 3),
          ("undefined", 1))
    )


_RestRtmAdPortState_Type.__name__ = "Integer32"
_RestRtmAdPortState_Object = MibTableColumn
restRtmAdPortState = _RestRtmAdPortState_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 8),
    _RestRtmAdPortState_Type()
)
restRtmAdPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmAdPortState.setStatus("mandatory")


class _RestRtmAdPortForcedFunc_Type(OctetString):
    """Custom type restRtmAdPortForcedFunc based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestRtmAdPortForcedFunc_Type.__name__ = "OctetString"
_RestRtmAdPortForcedFunc_Object = MibTableColumn
restRtmAdPortForcedFunc = _RestRtmAdPortForcedFunc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 9),
    _RestRtmAdPortForcedFunc_Type()
)
restRtmAdPortForcedFunc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restRtmAdPortForcedFunc.setStatus("mandatory")


class _RestRtmAdPortLoopbackType_Type(Integer32):
    """Custom type restRtmAdPortLoopbackType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8,
              16,
              32)
        )
    )
    namedValues = NamedValues(
        *(("adLim", 2),
          ("adLimDisc", 4),
          ("adRim", 1),
          ("rtmBidirectional", 32),
          ("rtmLim", 16),
          ("rtmRim", 8))
    )


_RestRtmAdPortLoopbackType_Type.__name__ = "Integer32"
_RestRtmAdPortLoopbackType_Object = MibTableColumn
restRtmAdPortLoopbackType = _RestRtmAdPortLoopbackType_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 10),
    _RestRtmAdPortLoopbackType_Type()
)
restRtmAdPortLoopbackType.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restRtmAdPortLoopbackType.setStatus("mandatory")


class _RestRtmAdPortLoopbackStatus_Type(Integer32):
    """Custom type restRtmAdPortLoopbackStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8,
              16,
              32,
              64,
              128,
              255)
        )
    )
    namedValues = NamedValues(
        *(("adLim", 2),
          ("adLimDisc", 4),
          ("adLocalLl", 64),
          ("adLocalRl", 128),
          ("adRim", 1),
          ("none", 255),
          ("rtmBidirectional", 32),
          ("rtmLim", 16),
          ("rtmRim", 8))
    )


_RestRtmAdPortLoopbackStatus_Type.__name__ = "Integer32"
_RestRtmAdPortLoopbackStatus_Object = MibTableColumn
restRtmAdPortLoopbackStatus = _RestRtmAdPortLoopbackStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 11),
    _RestRtmAdPortLoopbackStatus_Type()
)
restRtmAdPortLoopbackStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmAdPortLoopbackStatus.setStatus("mandatory")


class _RestRtmAdPortElecInterface_Type(Integer32):
    """Custom type restRtmAdPortElecInterface based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              10)
        )
    )
    namedValues = NamedValues(
        *(("noInterface", 10),
          ("v24", 1),
          ("v35", 2),
          ("x21", 3))
    )


_RestRtmAdPortElecInterface_Type.__name__ = "Integer32"
_RestRtmAdPortElecInterface_Object = MibTableColumn
restRtmAdPortElecInterface = _RestRtmAdPortElecInterface_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 12),
    _RestRtmAdPortElecInterface_Type()
)
restRtmAdPortElecInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmAdPortElecInterface.setStatus("mandatory")


class _RestRtmAdPortElIntStatus_Type(Integer32):
    """Custom type restRtmAdPortElIntStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nonProgrammable", 1),
          ("programmable", 2))
    )


_RestRtmAdPortElIntStatus_Type.__name__ = "Integer32"
_RestRtmAdPortElIntStatus_Object = MibTableColumn
restRtmAdPortElIntStatus = _RestRtmAdPortElIntStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 13),
    _RestRtmAdPortElIntStatus_Type()
)
restRtmAdPortElIntStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmAdPortElIntStatus.setStatus("mandatory")


class _RestRtmAdPortParSubstitution_Type(Integer32):
    """Custom type restRtmAdPortParSubstitution based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_RestRtmAdPortParSubstitution_Type.__name__ = "Integer32"
_RestRtmAdPortParSubstitution_Object = MibTableColumn
restRtmAdPortParSubstitution = _RestRtmAdPortParSubstitution_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 14),
    _RestRtmAdPortParSubstitution_Type()
)
restRtmAdPortParSubstitution.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restRtmAdPortParSubstitution.setStatus("mandatory")


class _RestRtmAdPortParSubstChar_Type(Integer32):
    """Custom type restRtmAdPortParSubstChar based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RestRtmAdPortParSubstChar_Type.__name__ = "Integer32"
_RestRtmAdPortParSubstChar_Object = MibTableColumn
restRtmAdPortParSubstChar = _RestRtmAdPortParSubstChar_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 15),
    _RestRtmAdPortParSubstChar_Type()
)
restRtmAdPortParSubstChar.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restRtmAdPortParSubstChar.setStatus("mandatory")


class _RestRtmAdPortPhasorStatus_Type(OctetString):
    """Custom type restRtmAdPortPhasorStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestRtmAdPortPhasorStatus_Type.__name__ = "OctetString"
_RestRtmAdPortPhasorStatus_Object = MibTableColumn
restRtmAdPortPhasorStatus = _RestRtmAdPortPhasorStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 16),
    _RestRtmAdPortPhasorStatus_Type()
)
restRtmAdPortPhasorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmAdPortPhasorStatus.setStatus("mandatory")


class _RestRtmAdPortAdPhasorStatus_Type(OctetString):
    """Custom type restRtmAdPortAdPhasorStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestRtmAdPortAdPhasorStatus_Type.__name__ = "OctetString"
_RestRtmAdPortAdPhasorStatus_Object = MibTableColumn
restRtmAdPortAdPhasorStatus = _RestRtmAdPortAdPhasorStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 17),
    _RestRtmAdPortAdPhasorStatus_Type()
)
restRtmAdPortAdPhasorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmAdPortAdPhasorStatus.setStatus("mandatory")


class _RestRtmAdPortAdFunctions_Type(OctetString):
    """Custom type restRtmAdPortAdFunctions based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestRtmAdPortAdFunctions_Type.__name__ = "OctetString"
_RestRtmAdPortAdFunctions_Object = MibTableColumn
restRtmAdPortAdFunctions = _RestRtmAdPortAdFunctions_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 18),
    _RestRtmAdPortAdFunctions_Type()
)
restRtmAdPortAdFunctions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restRtmAdPortAdFunctions.setStatus("mandatory")


class _RestRtmAdPortParity_Type(Integer32):
    """Custom type restRtmAdPortParity based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("parEven", 2),
          ("parNone", 1),
          ("parOdd", 3))
    )


_RestRtmAdPortParity_Type.__name__ = "Integer32"
_RestRtmAdPortParity_Object = MibTableColumn
restRtmAdPortParity = _RestRtmAdPortParity_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 13, 2, 1, 19),
    _RestRtmAdPortParity_Type()
)
restRtmAdPortParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    restRtmAdPortParity.setStatus("mandatory")
_RestLgmPort_ObjectIdentity = ObjectIdentity
restLgmPort = _RestLgmPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14)
)
_RestLgmPortTable_Object = MibTable
restLgmPortTable = _RestLgmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1)
)
if mibBuilder.loadTexts:
    restLgmPortTable.setStatus("mandatory")
_RestLgmPortEntry_Object = MibTableRow
restLgmPortEntry = _RestLgmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1)
)
restLgmPortEntry.setIndexNames(
    (0, "STMIB", "restLgmPortAddr"),
)
if mibBuilder.loadTexts:
    restLgmPortEntry.setStatus("mandatory")
_RestLgmPortAddr_Type = PortAddr
_RestLgmPortAddr_Object = MibTableColumn
restLgmPortAddr = _RestLgmPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 1),
    _RestLgmPortAddr_Type()
)
restLgmPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortAddr.setStatus("mandatory")


class _RestLgmPortLocalBERQuality_Type(Integer32):
    """Custom type restLgmPortLocalBERQuality based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fair", 4),
          ("good", 5),
          ("notAvailable", 1),
          ("pend", 2),
          ("poor", 3),
          ("veryGood", 6))
    )


_RestLgmPortLocalBERQuality_Type.__name__ = "Integer32"
_RestLgmPortLocalBERQuality_Object = MibTableColumn
restLgmPortLocalBERQuality = _RestLgmPortLocalBERQuality_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 2),
    _RestLgmPortLocalBERQuality_Type()
)
restLgmPortLocalBERQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortLocalBERQuality.setStatus("mandatory")


class _RestLgmPortBERWindowFill_Type(DisplayString):
    """Custom type restLgmPortBERWindowFill based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 7),
    )


_RestLgmPortBERWindowFill_Type.__name__ = "DisplayString"
_RestLgmPortBERWindowFill_Object = MibTableColumn
restLgmPortBERWindowFill = _RestLgmPortBERWindowFill_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 3),
    _RestLgmPortBERWindowFill_Type()
)
restLgmPortBERWindowFill.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortBERWindowFill.setStatus("mandatory")


class _RestLgmPortRemoteNodeID_Type(Integer32):
    """Custom type restLgmPortRemoteNodeID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000),
    )


_RestLgmPortRemoteNodeID_Type.__name__ = "Integer32"
_RestLgmPortRemoteNodeID_Object = MibTableColumn
restLgmPortRemoteNodeID = _RestLgmPortRemoteNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 4),
    _RestLgmPortRemoteNodeID_Type()
)
restLgmPortRemoteNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortRemoteNodeID.setStatus("mandatory")
_RestLgmPortRemotePortAddr_Type = PortAddr
_RestLgmPortRemotePortAddr_Object = MibTableColumn
restLgmPortRemotePortAddr = _RestLgmPortRemotePortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 5),
    _RestLgmPortRemotePortAddr_Type()
)
restLgmPortRemotePortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortRemotePortAddr.setStatus("mandatory")


class _RestLgmPortRemoteBERQuality_Type(Integer32):
    """Custom type restLgmPortRemoteBERQuality based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fair", 4),
          ("good", 5),
          ("notAvailable", 1),
          ("pend", 2),
          ("poor", 3),
          ("veryGood", 6))
    )


_RestLgmPortRemoteBERQuality_Type.__name__ = "Integer32"
_RestLgmPortRemoteBERQuality_Object = MibTableColumn
restLgmPortRemoteBERQuality = _RestLgmPortRemoteBERQuality_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 6),
    _RestLgmPortRemoteBERQuality_Type()
)
restLgmPortRemoteBERQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortRemoteBERQuality.setStatus("mandatory")
_RestLgmPortRemoteRevision_Type = Integer32
_RestLgmPortRemoteRevision_Object = MibTableColumn
restLgmPortRemoteRevision = _RestLgmPortRemoteRevision_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 7),
    _RestLgmPortRemoteRevision_Type()
)
restLgmPortRemoteRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortRemoteRevision.setStatus("mandatory")
_RestLgmPortAvailableBw_Type = Integer32
_RestLgmPortAvailableBw_Object = MibTableColumn
restLgmPortAvailableBw = _RestLgmPortAvailableBw_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 8),
    _RestLgmPortAvailableBw_Type()
)
restLgmPortAvailableBw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortAvailableBw.setStatus("mandatory")
_RestLgmPortUsedBw_Type = Integer32
_RestLgmPortUsedBw_Object = MibTableColumn
restLgmPortUsedBw = _RestLgmPortUsedBw_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 9),
    _RestLgmPortUsedBw_Type()
)
restLgmPortUsedBw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortUsedBw.setStatus("mandatory")
_RestLgmPortNumCh_Type = Integer32
_RestLgmPortNumCh_Object = MibTableColumn
restLgmPortNumCh = _RestLgmPortNumCh_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 10),
    _RestLgmPortNumCh_Type()
)
restLgmPortNumCh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortNumCh.setStatus("mandatory")
_RestLgmPortLgmPort_Type = PortAddr
_RestLgmPortLgmPort_Object = MibTableColumn
restLgmPortLgmPort = _RestLgmPortLgmPort_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 11),
    _RestLgmPortLgmPort_Type()
)
restLgmPortLgmPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortLgmPort.setStatus("mandatory")
_RestLgmPortLinkSpeed_Type = Integer32
_RestLgmPortLinkSpeed_Object = MibTableColumn
restLgmPortLinkSpeed = _RestLgmPortLinkSpeed_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 12),
    _RestLgmPortLinkSpeed_Type()
)
restLgmPortLinkSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortLinkSpeed.setStatus("mandatory")


class _RestLgmPortDiagnostics_Type(Integer32):
    """Custom type restLgmPortDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              64)
        )
    )
    namedValues = NamedValues(
        *(("clearVILCBerWindowFill", 64),
          ("disable", 2),
          ("enable", 1))
    )


_RestLgmPortDiagnostics_Type.__name__ = "Integer32"
_RestLgmPortDiagnostics_Object = MibTableColumn
restLgmPortDiagnostics = _RestLgmPortDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 13),
    _RestLgmPortDiagnostics_Type()
)
restLgmPortDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restLgmPortDiagnostics.setStatus("mandatory")


class _RestLgmPortSyncState_Type(Integer32):
    """Custom type restLgmPortSyncState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("inSync", 1),
          ("los", 2),
          ("losAndRos", 4),
          ("ros", 3))
    )


_RestLgmPortSyncState_Type.__name__ = "Integer32"
_RestLgmPortSyncState_Object = MibTableColumn
restLgmPortSyncState = _RestLgmPortSyncState_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 1, 1, 14),
    _RestLgmPortSyncState_Type()
)
restLgmPortSyncState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmPortSyncState.setStatus("mandatory")
_RestLgmContentsTable_Object = MibTable
restLgmContentsTable = _RestLgmContentsTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2)
)
if mibBuilder.loadTexts:
    restLgmContentsTable.setStatus("mandatory")
_RestLgmContentsEntry_Object = MibTableRow
restLgmContentsEntry = _RestLgmContentsEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1)
)
restLgmContentsEntry.setIndexNames(
    (0, "STMIB", "restLgmContentsAddr"),
    (0, "STMIB", "restLgmContentsSequenceID"),
)
if mibBuilder.loadTexts:
    restLgmContentsEntry.setStatus("mandatory")
_RestLgmContentsAddr_Type = PortAddr
_RestLgmContentsAddr_Object = MibTableColumn
restLgmContentsAddr = _RestLgmContentsAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1, 1),
    _RestLgmContentsAddr_Type()
)
restLgmContentsAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmContentsAddr.setStatus("mandatory")


class _RestLgmContentsSequenceID_Type(Integer32):
    """Custom type restLgmContentsSequenceID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RestLgmContentsSequenceID_Type.__name__ = "Integer32"
_RestLgmContentsSequenceID_Object = MibTableColumn
restLgmContentsSequenceID = _RestLgmContentsSequenceID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1, 2),
    _RestLgmContentsSequenceID_Type()
)
restLgmContentsSequenceID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmContentsSequenceID.setStatus("mandatory")
_RestLgmContentsSourceNodeID_Type = NodeAddr
_RestLgmContentsSourceNodeID_Object = MibTableColumn
restLgmContentsSourceNodeID = _RestLgmContentsSourceNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1, 3),
    _RestLgmContentsSourceNodeID_Type()
)
restLgmContentsSourceNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmContentsSourceNodeID.setStatus("mandatory")
_RestLgmContentsSourceAddr_Type = ChannelAddr
_RestLgmContentsSourceAddr_Object = MibTableColumn
restLgmContentsSourceAddr = _RestLgmContentsSourceAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1, 4),
    _RestLgmContentsSourceAddr_Type()
)
restLgmContentsSourceAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmContentsSourceAddr.setStatus("mandatory")
_RestLgmContentsDestNodeID_Type = NodeAddr
_RestLgmContentsDestNodeID_Object = MibTableColumn
restLgmContentsDestNodeID = _RestLgmContentsDestNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1, 5),
    _RestLgmContentsDestNodeID_Type()
)
restLgmContentsDestNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmContentsDestNodeID.setStatus("mandatory")
_RestLgmContentsDestAddr_Type = ChannelAddr
_RestLgmContentsDestAddr_Object = MibTableColumn
restLgmContentsDestAddr = _RestLgmContentsDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 14, 2, 1, 6),
    _RestLgmContentsDestAddr_Type()
)
restLgmContentsDestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restLgmContentsDestAddr.setStatus("mandatory")
_RestSaf_ObjectIdentity = ObjectIdentity
restSaf = _RestSaf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15)
)
_RestSafTable_Object = MibTable
restSafTable = _RestSafTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1)
)
if mibBuilder.loadTexts:
    restSafTable.setStatus("mandatory")
_RestSafEntry_Object = MibTableRow
restSafEntry = _RestSafEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1)
)
restSafEntry.setIndexNames(
    (0, "STMIB", "restSafAddr"),
)
if mibBuilder.loadTexts:
    restSafEntry.setStatus("mandatory")
_RestSafAddr_Type = PortAddr
_RestSafAddr_Object = MibTableColumn
restSafAddr = _RestSafAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 1),
    _RestSafAddr_Type()
)
restSafAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafAddr.setStatus("mandatory")


class _RestSafStatus_Type(Integer32):
    """Custom type restSafStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("frameSwitch", 3),
          ("inSync", 1),
          ("outOfSync", 2))
    )


_RestSafStatus_Type.__name__ = "Integer32"
_RestSafStatus_Object = MibTableColumn
restSafStatus = _RestSafStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 2),
    _RestSafStatus_Type()
)
restSafStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafStatus.setStatus("mandatory")


class _RestSafSubStatus_Type(Integer32):
    """Custom type restSafSubStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("noError", 255),
          ("syncError", 1))
    )


_RestSafSubStatus_Type.__name__ = "Integer32"
_RestSafSubStatus_Object = MibTableColumn
restSafSubStatus = _RestSafSubStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 3),
    _RestSafSubStatus_Type()
)
restSafSubStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafSubStatus.setStatus("mandatory")
_RestSafRemoteNode_Type = NodeAddr
_RestSafRemoteNode_Object = MibTableColumn
restSafRemoteNode = _RestSafRemoteNode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 4),
    _RestSafRemoteNode_Type()
)
restSafRemoteNode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafRemoteNode.setStatus("mandatory")
_RestSafRemoteAddr_Type = PortAddr
_RestSafRemoteAddr_Object = MibTableColumn
restSafRemoteAddr = _RestSafRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 5),
    _RestSafRemoteAddr_Type()
)
restSafRemoteAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafRemoteAddr.setStatus("mandatory")


class _RestSafInlNumber_Type(Integer32):
    """Custom type restSafInlNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_RestSafInlNumber_Type.__name__ = "Integer32"
_RestSafInlNumber_Object = MibTableColumn
restSafInlNumber = _RestSafInlNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 6),
    _RestSafInlNumber_Type()
)
restSafInlNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafInlNumber.setStatus("mandatory")


class _RestSafBandwidthAvail_Type(Integer32):
    """Custom type restSafBandwidthAvail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64000),
    )


_RestSafBandwidthAvail_Type.__name__ = "Integer32"
_RestSafBandwidthAvail_Object = MibTableColumn
restSafBandwidthAvail = _RestSafBandwidthAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 7),
    _RestSafBandwidthAvail_Type()
)
restSafBandwidthAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafBandwidthAvail.setStatus("mandatory")


class _RestSafNumChannels_Type(Integer32):
    """Custom type restSafNumChannels based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 47),
    )


_RestSafNumChannels_Type.__name__ = "Integer32"
_RestSafNumChannels_Object = MibTableColumn
restSafNumChannels = _RestSafNumChannels_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 8),
    _RestSafNumChannels_Type()
)
restSafNumChannels.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafNumChannels.setStatus("mandatory")


class _RestSafHWPhasorStatus_Type(OctetString):
    """Custom type restSafHWPhasorStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestSafHWPhasorStatus_Type.__name__ = "OctetString"
_RestSafHWPhasorStatus_Object = MibTableColumn
restSafHWPhasorStatus = _RestSafHWPhasorStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 9),
    _RestSafHWPhasorStatus_Type()
)
restSafHWPhasorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafHWPhasorStatus.setStatus("deprecated")


class _RestSafSWPhasorStatus_Type(OctetString):
    """Custom type restSafSWPhasorStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestSafSWPhasorStatus_Type.__name__ = "OctetString"
_RestSafSWPhasorStatus_Object = MibTableColumn
restSafSWPhasorStatus = _RestSafSWPhasorStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 10),
    _RestSafSWPhasorStatus_Type()
)
restSafSWPhasorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafSWPhasorStatus.setStatus("deprecated")


class _RestSafModNumChannels_Type(Integer32):
    """Custom type restSafModNumChannels based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 47),
    )


_RestSafModNumChannels_Type.__name__ = "Integer32"
_RestSafModNumChannels_Object = MibTableColumn
restSafModNumChannels = _RestSafModNumChannels_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 11),
    _RestSafModNumChannels_Type()
)
restSafModNumChannels.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafModNumChannels.setStatus("mandatory")


class _RestSafModBandwidthAvail_Type(Integer32):
    """Custom type restSafModBandwidthAvail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64000),
    )


_RestSafModBandwidthAvail_Type.__name__ = "Integer32"
_RestSafModBandwidthAvail_Object = MibTableColumn
restSafModBandwidthAvail = _RestSafModBandwidthAvail_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 12),
    _RestSafModBandwidthAvail_Type()
)
restSafModBandwidthAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafModBandwidthAvail.setStatus("mandatory")


class _RestSafDiagnostics_Type(Integer32):
    """Custom type restSafDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("clearLoopback", 8),
          ("clearStats", 3),
          ("setLoopback", 9))
    )


_RestSafDiagnostics_Type.__name__ = "Integer32"
_RestSafDiagnostics_Object = MibTableColumn
restSafDiagnostics = _RestSafDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 13),
    _RestSafDiagnostics_Type()
)
restSafDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restSafDiagnostics.setStatus("mandatory")


class _RestSafFrameSwitchLocation_Type(Integer32):
    """Custom type restSafFrameSwitchLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_RestSafFrameSwitchLocation_Type.__name__ = "Integer32"
_RestSafFrameSwitchLocation_Object = MibTableColumn
restSafFrameSwitchLocation = _RestSafFrameSwitchLocation_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 14),
    _RestSafFrameSwitchLocation_Type()
)
restSafFrameSwitchLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafFrameSwitchLocation.setStatus("mandatory")


class _RestSafFrameSwitchIndicator_Type(Integer32):
    """Custom type restSafFrameSwitchIndicator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_RestSafFrameSwitchIndicator_Type.__name__ = "Integer32"
_RestSafFrameSwitchIndicator_Object = MibTableColumn
restSafFrameSwitchIndicator = _RestSafFrameSwitchIndicator_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 15),
    _RestSafFrameSwitchIndicator_Type()
)
restSafFrameSwitchIndicator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafFrameSwitchIndicator.setStatus("mandatory")


class _RestSafRemoteStatus_Type(Integer32):
    """Custom type restSafRemoteStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("in-service", 1),
          ("out-of-service", 2))
    )


_RestSafRemoteStatus_Type.__name__ = "Integer32"
_RestSafRemoteStatus_Object = MibTableColumn
restSafRemoteStatus = _RestSafRemoteStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 16),
    _RestSafRemoteStatus_Type()
)
restSafRemoteStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafRemoteStatus.setStatus("mandatory")
_RestSafSyncErrors_Type = Counter32
_RestSafSyncErrors_Object = MibTableColumn
restSafSyncErrors = _RestSafSyncErrors_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 17),
    _RestSafSyncErrors_Type()
)
restSafSyncErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafSyncErrors.setStatus("mandatory")
_RestSafOosErrors_Type = Counter32
_RestSafOosErrors_Object = MibTableColumn
restSafOosErrors = _RestSafOosErrors_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 18),
    _RestSafOosErrors_Type()
)
restSafOosErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafOosErrors.setStatus("mandatory")


class _RestSafPhasorStatus_Type(OctetString):
    """Custom type restSafPhasorStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_RestSafPhasorStatus_Type.__name__ = "OctetString"
_RestSafPhasorStatus_Object = MibTableColumn
restSafPhasorStatus = _RestSafPhasorStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 1, 1, 19),
    _RestSafPhasorStatus_Type()
)
restSafPhasorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafPhasorStatus.setStatus("mandatory")
_RestSafContentsTable_Object = MibTable
restSafContentsTable = _RestSafContentsTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2)
)
if mibBuilder.loadTexts:
    restSafContentsTable.setStatus("mandatory")
_RestSafContentsEntry_Object = MibTableRow
restSafContentsEntry = _RestSafContentsEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1)
)
restSafContentsEntry.setIndexNames(
    (0, "STMIB", "restSafContentsAddr"),
    (0, "STMIB", "restSafContentsSeqNum"),
)
if mibBuilder.loadTexts:
    restSafContentsEntry.setStatus("mandatory")
_RestSafContentsAddr_Type = PortAddr
_RestSafContentsAddr_Object = MibTableColumn
restSafContentsAddr = _RestSafContentsAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1, 1),
    _RestSafContentsAddr_Type()
)
restSafContentsAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafContentsAddr.setStatus("mandatory")


class _RestSafContentsSeqNum_Type(Integer32):
    """Custom type restSafContentsSeqNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RestSafContentsSeqNum_Type.__name__ = "Integer32"
_RestSafContentsSeqNum_Object = MibTableColumn
restSafContentsSeqNum = _RestSafContentsSeqNum_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1, 2),
    _RestSafContentsSeqNum_Type()
)
restSafContentsSeqNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafContentsSeqNum.setStatus("mandatory")
_RestSafContentsSrcNode_Type = NodeAddr
_RestSafContentsSrcNode_Object = MibTableColumn
restSafContentsSrcNode = _RestSafContentsSrcNode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1, 3),
    _RestSafContentsSrcNode_Type()
)
restSafContentsSrcNode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafContentsSrcNode.setStatus("mandatory")
_RestSafContentsSrcAddr_Type = ChannelAddr
_RestSafContentsSrcAddr_Object = MibTableColumn
restSafContentsSrcAddr = _RestSafContentsSrcAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1, 4),
    _RestSafContentsSrcAddr_Type()
)
restSafContentsSrcAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafContentsSrcAddr.setStatus("mandatory")
_RestSafContentsDestNode_Type = NodeAddr
_RestSafContentsDestNode_Object = MibTableColumn
restSafContentsDestNode = _RestSafContentsDestNode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1, 5),
    _RestSafContentsDestNode_Type()
)
restSafContentsDestNode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafContentsDestNode.setStatus("mandatory")
_RestSafContentsDestAddr_Type = ChannelAddr
_RestSafContentsDestAddr_Object = MibTableColumn
restSafContentsDestAddr = _RestSafContentsDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 15, 2, 1, 6),
    _RestSafContentsDestAddr_Type()
)
restSafContentsDestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restSafContentsDestAddr.setStatus("mandatory")
_RestDsmPort_ObjectIdentity = ObjectIdentity
restDsmPort = _RestDsmPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16)
)
_RestDsmDChPortTable_Object = MibTable
restDsmDChPortTable = _RestDsmDChPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 1)
)
if mibBuilder.loadTexts:
    restDsmDChPortTable.setStatus("mandatory")
_RestDsmDChPortEntry_Object = MibTableRow
restDsmDChPortEntry = _RestDsmDChPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 1, 1)
)
restDsmDChPortEntry.setIndexNames(
    (0, "STMIB", "restDsmDChPortAddr"),
)
if mibBuilder.loadTexts:
    restDsmDChPortEntry.setStatus("mandatory")
_RestDsmDChPortAddr_Type = PortAddr
_RestDsmDChPortAddr_Object = MibTableColumn
restDsmDChPortAddr = _RestDsmDChPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 1, 1, 1),
    _RestDsmDChPortAddr_Type()
)
restDsmDChPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChPortAddr.setStatus("mandatory")


class _RestDsmDChPortDiagnostics_Type(Integer32):
    """Custom type restDsmDChPortDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("layer2Reset", 1)
    )


_RestDsmDChPortDiagnostics_Type.__name__ = "Integer32"
_RestDsmDChPortDiagnostics_Object = MibTableColumn
restDsmDChPortDiagnostics = _RestDsmDChPortDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 1, 1, 2),
    _RestDsmDChPortDiagnostics_Type()
)
restDsmDChPortDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restDsmDChPortDiagnostics.setStatus("mandatory")
_RestDsmDChPortNumCallsInProc_Type = Integer32
_RestDsmDChPortNumCallsInProc_Object = MibTableColumn
restDsmDChPortNumCallsInProc = _RestDsmDChPortNumCallsInProc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 1, 1, 3),
    _RestDsmDChPortNumCallsInProc_Type()
)
restDsmDChPortNumCallsInProc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChPortNumCallsInProc.setStatus("mandatory")
_RestDsmDChPortNumCallsConn_Type = Integer32
_RestDsmDChPortNumCallsConn_Object = MibTableColumn
restDsmDChPortNumCallsConn = _RestDsmDChPortNumCallsConn_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 1, 1, 4),
    _RestDsmDChPortNumCallsConn_Type()
)
restDsmDChPortNumCallsConn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChPortNumCallsConn.setStatus("mandatory")
_RestDsmDChCallRealTable_Object = MibTable
restDsmDChCallRealTable = _RestDsmDChCallRealTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2)
)
if mibBuilder.loadTexts:
    restDsmDChCallRealTable.setStatus("mandatory")
_RestDsmDChCallRealEntry_Object = MibTableRow
restDsmDChCallRealEntry = _RestDsmDChCallRealEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1)
)
restDsmDChCallRealEntry.setIndexNames(
    (0, "STMIB", "restDsmDChCallRealAddr"),
    (0, "STMIB", "restDsmDChCallRealBundle"),
)
if mibBuilder.loadTexts:
    restDsmDChCallRealEntry.setStatus("mandatory")
_RestDsmDChCallRealAddr_Type = PortAddr
_RestDsmDChCallRealAddr_Object = MibTableColumn
restDsmDChCallRealAddr = _RestDsmDChCallRealAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 1),
    _RestDsmDChCallRealAddr_Type()
)
restDsmDChCallRealAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallRealAddr.setStatus("mandatory")


class _RestDsmDChCallRealBundle_Type(Integer32):
    """Custom type restDsmDChCallRealBundle based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_RestDsmDChCallRealBundle_Type.__name__ = "Integer32"
_RestDsmDChCallRealBundle_Object = MibTableColumn
restDsmDChCallRealBundle = _RestDsmDChCallRealBundle_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 2),
    _RestDsmDChCallRealBundle_Type()
)
restDsmDChCallRealBundle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallRealBundle.setStatus("mandatory")


class _RestDsmDChCallRealCDRContents_Type(OctetString):
    """Custom type restDsmDChCallRealCDRContents based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 112),
    )


_RestDsmDChCallRealCDRContents_Type.__name__ = "OctetString"
_RestDsmDChCallRealCDRContents_Object = MibTableColumn
restDsmDChCallRealCDRContents = _RestDsmDChCallRealCDRContents_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 3),
    _RestDsmDChCallRealCDRContents_Type()
)
restDsmDChCallRealCDRContents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallRealCDRContents.setStatus("mandatory")


class _RestDsmDChCallRealDiagnostics_Type(Integer32):
    """Custom type restDsmDChCallRealDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("resetLayer2", 1)
    )


_RestDsmDChCallRealDiagnostics_Type.__name__ = "Integer32"
_RestDsmDChCallRealDiagnostics_Object = MibTableColumn
restDsmDChCallRealDiagnostics = _RestDsmDChCallRealDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 4),
    _RestDsmDChCallRealDiagnostics_Type()
)
restDsmDChCallRealDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restDsmDChCallRealDiagnostics.setStatus("mandatory")


class _RestDsmDChCallRealLayer2Status_Type(Integer32):
    """Custom type restDsmDChCallRealLayer2Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("in-service", 2),
          ("layer2Mismatch", 4),
          ("layer2Timeout", 3),
          ("notApplicable", 255),
          ("pending", 1))
    )


_RestDsmDChCallRealLayer2Status_Type.__name__ = "Integer32"
_RestDsmDChCallRealLayer2Status_Object = MibTableColumn
restDsmDChCallRealLayer2Status = _RestDsmDChCallRealLayer2Status_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 5),
    _RestDsmDChCallRealLayer2Status_Type()
)
restDsmDChCallRealLayer2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallRealLayer2Status.setStatus("mandatory")


class _RestDsmDChCallRealLayer2State_Type(Integer32):
    """Custom type restDsmDChCallRealLayer2State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              255)
        )
    )
    namedValues = NamedValues(
        *(("assignAwaitingTEI", 130),
          ("assignedTEI", 132),
          ("awaitingEstablishment", 133),
          ("awaitingRelease", 134),
          ("establishAwaitingTEI", 131),
          ("idle", 1),
          ("multipleFrameEstablished", 135),
          ("notApplicable", 255),
          ("outOfService", 5),
          ("ready", 2),
          ("timeRecovery", 136),
          ("unassignedTEI", 129),
          ("waitingForEstablishment", 4),
          ("waitingForResponse", 3))
    )


_RestDsmDChCallRealLayer2State_Type.__name__ = "Integer32"
_RestDsmDChCallRealLayer2State_Object = MibTableColumn
restDsmDChCallRealLayer2State = _RestDsmDChCallRealLayer2State_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 6),
    _RestDsmDChCallRealLayer2State_Type()
)
restDsmDChCallRealLayer2State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallRealLayer2State.setStatus("mandatory")


class _RestDsmDChCallRealLayer3State_Type(Integer32):
    """Custom type restDsmDChCallRealLayer3State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              129,
              130,
              131,
              132,
              133,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              144,
              146,
              148,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              255)
        )
    )
    namedValues = NamedValues(
        *(("asaiTr1State", 161),
          ("awaitCCMIn", 8),
          ("awaitCCMOut", 7),
          ("awaitNAMIn", 6),
          ("awaitNAMOut", 5),
          ("awaitRelease", 14),
          ("broadcastState", 180),
          ("callActive", 139),
          ("callBarred", 12),
          ("callClearing", 11),
          ("callDelivered", 133),
          ("callInit", 130),
          ("callPassive", 158),
          ("callPresent", 135),
          ("callReceived", 136),
          ("callRejecting", 10),
          ("cancelRequest", 160),
          ("connectRequest", 137),
          ("deactivateRequested", 170),
          ("deactivated", 168),
          ("disconnectIndication", 141),
          ("disconnectRequest", 140),
          ("establishWait", 156),
          ("idle", 2),
          ("idleState", 155),
          ("inactive", 1),
          ("incomingCallProceeding", 138),
          ("incomingService", 4),
          ("nilHoldActiveU10", 179),
          ("nilHoldActiveU3", 177),
          ("nilHoldActiveU4", 178),
          ("nilHoldReqU10", 173),
          ("nilHoldReqU3", 171),
          ("nilHoldReqU4", 172),
          ("nilRetrieveU10", 176),
          ("nilRetrieveU3", 174),
          ("nilRetrieveU4", 175),
          ("notApplicable", 255),
          ("nullState", 129),
          ("outgoingCallProceeding", 132),
          ("outgoingService", 3),
          ("overlapReceive", 154),
          ("overlapSending", 131),
          ("passiveAwaitingConf", 157),
          ("preIdle", 13),
          ("reactivateRequested", 169),
          ("registerRequest", 159),
          ("releaseRequest", 148),
          ("resumeRequest", 146),
          ("setupComplete", 9),
          ("suspendRequest", 144),
          ("u10AwaitingDisc", 166),
          ("u10CallOnHold", 167),
          ("u10ConferenceRequest", 164),
          ("u10HoldRequest", 162),
          ("u10ReconnectRequest", 165),
          ("u10TransferRequest", 163))
    )


_RestDsmDChCallRealLayer3State_Type.__name__ = "Integer32"
_RestDsmDChCallRealLayer3State_Object = MibTableColumn
restDsmDChCallRealLayer3State = _RestDsmDChCallRealLayer3State_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 7),
    _RestDsmDChCallRealLayer3State_Type()
)
restDsmDChCallRealLayer3State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallRealLayer3State.setStatus("mandatory")


class _RestDsmDChCallRealTransitState_Type(Integer32):
    """Custom type restDsmDChCallRealTransitState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 9),
          ("awaitAdditionalDigits", 4),
          ("awaitCallRealChannelResponse", 13),
          ("awaitDigits", 3),
          ("awaitIncomingRelease", 10),
          ("awaitNcp", 18),
          ("awaitNcpDisconnect", 17),
          ("awaitNcpRelease", 16),
          ("awaitNcpReleaseNoResponse", 15),
          ("awaitNcpReleaseResponse", 14),
          ("awaitOutgoingRelease", 11),
          ("awaitTwoWayRelease", 12),
          ("callAlerting", 8),
          ("idle", 2),
          ("inactive", 1),
          ("incomingCallProceeding", 6),
          ("notApplicable", 255),
          ("overlap", 5),
          ("transitCallProceeding", 7))
    )


_RestDsmDChCallRealTransitState_Type.__name__ = "Integer32"
_RestDsmDChCallRealTransitState_Object = MibTableColumn
restDsmDChCallRealTransitState = _RestDsmDChCallRealTransitState_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 2, 1, 8),
    _RestDsmDChCallRealTransitState_Type()
)
restDsmDChCallRealTransitState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallRealTransitState.setStatus("mandatory")
_RestDsmDChCallVirtTable_Object = MibTable
restDsmDChCallVirtTable = _RestDsmDChCallVirtTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3)
)
if mibBuilder.loadTexts:
    restDsmDChCallVirtTable.setStatus("mandatory")
_RestDsmDChCallVirtEntry_Object = MibTableRow
restDsmDChCallVirtEntry = _RestDsmDChCallVirtEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1)
)
restDsmDChCallVirtEntry.setIndexNames(
    (0, "STMIB", "restDsmDChCallVirtAddr"),
    (0, "STMIB", "restDsmDChCallVirtNumber"),
)
if mibBuilder.loadTexts:
    restDsmDChCallVirtEntry.setStatus("mandatory")
_RestDsmDChCallVirtAddr_Type = PortAddr
_RestDsmDChCallVirtAddr_Object = MibTableColumn
restDsmDChCallVirtAddr = _RestDsmDChCallVirtAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 1),
    _RestDsmDChCallVirtAddr_Type()
)
restDsmDChCallVirtAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallVirtAddr.setStatus("mandatory")


class _RestDsmDChCallVirtNumber_Type(Integer32):
    """Custom type restDsmDChCallVirtNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 480),
    )


_RestDsmDChCallVirtNumber_Type.__name__ = "Integer32"
_RestDsmDChCallVirtNumber_Object = MibTableColumn
restDsmDChCallVirtNumber = _RestDsmDChCallVirtNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 2),
    _RestDsmDChCallVirtNumber_Type()
)
restDsmDChCallVirtNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallVirtNumber.setStatus("mandatory")


class _RestDsmDChCallVirtCDRContents_Type(OctetString):
    """Custom type restDsmDChCallVirtCDRContents based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 112),
    )


_RestDsmDChCallVirtCDRContents_Type.__name__ = "OctetString"
_RestDsmDChCallVirtCDRContents_Object = MibTableColumn
restDsmDChCallVirtCDRContents = _RestDsmDChCallVirtCDRContents_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 3),
    _RestDsmDChCallVirtCDRContents_Type()
)
restDsmDChCallVirtCDRContents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallVirtCDRContents.setStatus("mandatory")


class _RestDsmDChCallVirtDiagnostics_Type(Integer32):
    """Custom type restDsmDChCallVirtDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("resetLayer2", 1)
    )


_RestDsmDChCallVirtDiagnostics_Type.__name__ = "Integer32"
_RestDsmDChCallVirtDiagnostics_Object = MibTableColumn
restDsmDChCallVirtDiagnostics = _RestDsmDChCallVirtDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 4),
    _RestDsmDChCallVirtDiagnostics_Type()
)
restDsmDChCallVirtDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restDsmDChCallVirtDiagnostics.setStatus("mandatory")


class _RestDsmDChCallVirtLayer2Status_Type(Integer32):
    """Custom type restDsmDChCallVirtLayer2Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("in-service", 2),
          ("layer2Mismatch", 4),
          ("layer2Timeout", 3),
          ("notApplicable", 255),
          ("pending", 1))
    )


_RestDsmDChCallVirtLayer2Status_Type.__name__ = "Integer32"
_RestDsmDChCallVirtLayer2Status_Object = MibTableColumn
restDsmDChCallVirtLayer2Status = _RestDsmDChCallVirtLayer2Status_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 5),
    _RestDsmDChCallVirtLayer2Status_Type()
)
restDsmDChCallVirtLayer2Status.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallVirtLayer2Status.setStatus("mandatory")


class _RestDsmDChCallVirtLayer2State_Type(Integer32):
    """Custom type restDsmDChCallVirtLayer2State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              255)
        )
    )
    namedValues = NamedValues(
        *(("assignAwaitingTEI", 130),
          ("assignedTEI", 132),
          ("awaitingEstablishment", 133),
          ("awaitingRelease", 134),
          ("establishAwaitingTEI", 131),
          ("idle", 1),
          ("multipleFrameEstablished", 135),
          ("notApplicable", 255),
          ("outOfService", 5),
          ("ready", 2),
          ("timeRecovery", 136),
          ("unassignedTEI", 129),
          ("waitingForEstablishment", 4),
          ("waitingForResponse", 3))
    )


_RestDsmDChCallVirtLayer2State_Type.__name__ = "Integer32"
_RestDsmDChCallVirtLayer2State_Object = MibTableColumn
restDsmDChCallVirtLayer2State = _RestDsmDChCallVirtLayer2State_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 6),
    _RestDsmDChCallVirtLayer2State_Type()
)
restDsmDChCallVirtLayer2State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallVirtLayer2State.setStatus("mandatory")


class _RestDsmDChCallVirtLayer3State_Type(Integer32):
    """Custom type restDsmDChCallVirtLayer3State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              129,
              130,
              131,
              132,
              133,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              144,
              146,
              148,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              255)
        )
    )
    namedValues = NamedValues(
        *(("asaiTr1State", 161),
          ("awaitCCMIn", 8),
          ("awaitCCMOut", 7),
          ("awaitNAMIn", 6),
          ("awaitNAMOut", 5),
          ("awaitRelease", 14),
          ("broadcastState", 180),
          ("callActive", 139),
          ("callBarred", 12),
          ("callClearing", 11),
          ("callDelivered", 133),
          ("callInit", 130),
          ("callPassive", 158),
          ("callPresent", 135),
          ("callReceived", 136),
          ("callRejecting", 10),
          ("cancelRequest", 160),
          ("connectRequest", 137),
          ("deactivateRequested", 170),
          ("deactivated", 168),
          ("disconnectIndication", 141),
          ("disconnectRequest", 140),
          ("establishWait", 156),
          ("idle", 2),
          ("idleState", 155),
          ("inactive", 1),
          ("incomingCallProceeding", 138),
          ("incomingService", 4),
          ("nilHoldActiveU10", 179),
          ("nilHoldActiveU3", 177),
          ("nilHoldActiveU4", 178),
          ("nilHoldReqU10", 173),
          ("nilHoldReqU3", 171),
          ("nilHoldReqU4", 172),
          ("nilRetrieveU10", 176),
          ("nilRetrieveU3", 174),
          ("nilRetrieveU4", 175),
          ("notApplicable", 255),
          ("nullState", 129),
          ("outgoingCallProceeding", 132),
          ("outgoingService", 3),
          ("overlapReceive", 154),
          ("overlapSending", 131),
          ("passiveAwaitingConf", 157),
          ("preIdle", 13),
          ("reactivateRequested", 169),
          ("registerRequest", 159),
          ("releaseRequest", 148),
          ("resumeRequest", 146),
          ("setupComplete", 9),
          ("suspendRequest", 144),
          ("u10AwaitingDisc", 166),
          ("u10CallOnHold", 167),
          ("u10ConferenceRequest", 164),
          ("u10HoldRequest", 162),
          ("u10ReconnectRequest", 165),
          ("u10TransferRequest", 163))
    )


_RestDsmDChCallVirtLayer3State_Type.__name__ = "Integer32"
_RestDsmDChCallVirtLayer3State_Object = MibTableColumn
restDsmDChCallVirtLayer3State = _RestDsmDChCallVirtLayer3State_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 7),
    _RestDsmDChCallVirtLayer3State_Type()
)
restDsmDChCallVirtLayer3State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallVirtLayer3State.setStatus("mandatory")


class _RestDsmDChCallVirtTransitState_Type(Integer32):
    """Custom type restDsmDChCallVirtTransitState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 9),
          ("awaitAdditionalDigits", 4),
          ("awaitCallVirtChannelResponse", 13),
          ("awaitDigits", 3),
          ("awaitIncomingRelease", 10),
          ("awaitNcp", 18),
          ("awaitNcpDisconnect", 17),
          ("awaitNcpRelease", 16),
          ("awaitNcpReleaseNoResponse", 15),
          ("awaitNcpReleaseResponse", 14),
          ("awaitOutgoingRelease", 11),
          ("awaitTwoWayRelease", 12),
          ("callAlerting", 8),
          ("idle", 2),
          ("inactive", 1),
          ("incomingCallProceeding", 6),
          ("notApplicable", 255),
          ("overlap", 5),
          ("transitCallProceeding", 7))
    )


_RestDsmDChCallVirtTransitState_Type.__name__ = "Integer32"
_RestDsmDChCallVirtTransitState_Object = MibTableColumn
restDsmDChCallVirtTransitState = _RestDsmDChCallVirtTransitState_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 16, 3, 1, 8),
    _RestDsmDChCallVirtTransitState_Type()
)
restDsmDChCallVirtTransitState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restDsmDChCallVirtTransitState.setStatus("mandatory")
_RestHwRsc_ObjectIdentity = ObjectIdentity
restHwRsc = _RestHwRsc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17)
)
_RestHwRscEngineTable_Object = MibTable
restHwRscEngineTable = _RestHwRscEngineTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1)
)
if mibBuilder.loadTexts:
    restHwRscEngineTable.setStatus("mandatory")
_RestHwRscEngineEntry_Object = MibTableRow
restHwRscEngineEntry = _RestHwRscEngineEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1)
)
restHwRscEngineEntry.setIndexNames(
    (0, "STMIB", "restHwRscEngineModAddr"),
    (0, "STMIB", "restHwRscEngineID"),
)
if mibBuilder.loadTexts:
    restHwRscEngineEntry.setStatus("mandatory")
_RestHwRscEngineModAddr_Type = SlotAddr
_RestHwRscEngineModAddr_Object = MibTableColumn
restHwRscEngineModAddr = _RestHwRscEngineModAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 1),
    _RestHwRscEngineModAddr_Type()
)
restHwRscEngineModAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineModAddr.setStatus("mandatory")


class _RestHwRscEngineID_Type(Integer32):
    """Custom type restHwRscEngineID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RestHwRscEngineID_Type.__name__ = "Integer32"
_RestHwRscEngineID_Object = MibTableColumn
restHwRscEngineID = _RestHwRscEngineID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 2),
    _RestHwRscEngineID_Type()
)
restHwRscEngineID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineID.setStatus("mandatory")


class _RestHwRscEngineDiagnostics_Type(Integer32):
    """Custom type restHwRscEngineDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("insert", 4),
          ("remove", 5),
          ("reset", 6))
    )


_RestHwRscEngineDiagnostics_Type.__name__ = "Integer32"
_RestHwRscEngineDiagnostics_Object = MibTableColumn
restHwRscEngineDiagnostics = _RestHwRscEngineDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 3),
    _RestHwRscEngineDiagnostics_Type()
)
restHwRscEngineDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restHwRscEngineDiagnostics.setStatus("mandatory")


class _RestHwRscEngineStatus_Type(Integer32):
    """Custom type restHwRscEngineStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              43)
        )
    )
    namedValues = NamedValues(
        *(("failed", 43),
          ("normal", 6),
          ("removed", 5))
    )


_RestHwRscEngineStatus_Type.__name__ = "Integer32"
_RestHwRscEngineStatus_Object = MibTableColumn
restHwRscEngineStatus = _RestHwRscEngineStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 4),
    _RestHwRscEngineStatus_Type()
)
restHwRscEngineStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineStatus.setStatus("mandatory")


class _RestHwRscEngineApplication_Type(Integer32):
    """Custom type restHwRscEngineApplication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("adpcm", 3),
          ("celp-atc", 2),
          ("link", 4),
          ("none", 255),
          ("x50", 1))
    )


_RestHwRscEngineApplication_Type.__name__ = "Integer32"
_RestHwRscEngineApplication_Object = MibTableColumn
restHwRscEngineApplication = _RestHwRscEngineApplication_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 5),
    _RestHwRscEngineApplication_Type()
)
restHwRscEngineApplication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineApplication.setStatus("mandatory")
_RestHwRscEngineMaxPorts_Type = Integer32
_RestHwRscEngineMaxPorts_Object = MibTableColumn
restHwRscEngineMaxPorts = _RestHwRscEngineMaxPorts_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 6),
    _RestHwRscEngineMaxPorts_Type()
)
restHwRscEngineMaxPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineMaxPorts.setStatus("mandatory")
_RestHwRscEngineNumPorts_Type = Integer32
_RestHwRscEngineNumPorts_Object = MibTableColumn
restHwRscEngineNumPorts = _RestHwRscEngineNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 7),
    _RestHwRscEngineNumPorts_Type()
)
restHwRscEngineNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineNumPorts.setStatus("mandatory")
_RestHwRscEngineMaxSAFs_Type = Integer32
_RestHwRscEngineMaxSAFs_Object = MibTableColumn
restHwRscEngineMaxSAFs = _RestHwRscEngineMaxSAFs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 8),
    _RestHwRscEngineMaxSAFs_Type()
)
restHwRscEngineMaxSAFs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineMaxSAFs.setStatus("mandatory")
_RestHwRscEngineNumSAFs_Type = Integer32
_RestHwRscEngineNumSAFs_Object = MibTableColumn
restHwRscEngineNumSAFs = _RestHwRscEngineNumSAFs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 9),
    _RestHwRscEngineNumSAFs_Type()
)
restHwRscEngineNumSAFs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineNumSAFs.setStatus("mandatory")
_RestHwRscEngineMaxSCFs_Type = Integer32
_RestHwRscEngineMaxSCFs_Object = MibTableColumn
restHwRscEngineMaxSCFs = _RestHwRscEngineMaxSCFs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 10),
    _RestHwRscEngineMaxSCFs_Type()
)
restHwRscEngineMaxSCFs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineMaxSCFs.setStatus("mandatory")
_RestHwRscEngineNumSCFs_Type = Integer32
_RestHwRscEngineNumSCFs_Object = MibTableColumn
restHwRscEngineNumSCFs = _RestHwRscEngineNumSCFs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 11),
    _RestHwRscEngineNumSCFs_Type()
)
restHwRscEngineNumSCFs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineNumSCFs.setStatus("mandatory")
_RestHwRscEngineMaxLoad_Type = Integer32
_RestHwRscEngineMaxLoad_Object = MibTableColumn
restHwRscEngineMaxLoad = _RestHwRscEngineMaxLoad_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 12),
    _RestHwRscEngineMaxLoad_Type()
)
restHwRscEngineMaxLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineMaxLoad.setStatus("mandatory")
_RestHwRscEngineCurLoad_Type = Integer32
_RestHwRscEngineCurLoad_Object = MibTableColumn
restHwRscEngineCurLoad = _RestHwRscEngineCurLoad_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 13),
    _RestHwRscEngineCurLoad_Type()
)
restHwRscEngineCurLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineCurLoad.setStatus("mandatory")


class _RestHwRscEngineSubStatus_Type(Integer32):
    """Custom type restHwRscEngineSubStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("noWellAndAlive", 2),
          ("none", 255),
          ("startupDiagnosticsFailure", 1))
    )


_RestHwRscEngineSubStatus_Type.__name__ = "Integer32"
_RestHwRscEngineSubStatus_Object = MibTableColumn
restHwRscEngineSubStatus = _RestHwRscEngineSubStatus_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 2, 17, 1, 1, 14),
    _RestHwRscEngineSubStatus_Type()
)
restHwRscEngineSubStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restHwRscEngineSubStatus.setStatus("mandatory")
_ReStatistics_ObjectIdentity = ObjectIdentity
reStatistics = _ReStatistics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3)
)
_RestStatPort_ObjectIdentity = ObjectIdentity
restStatPort = _RestStatPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1)
)
_RestStatPortT1mTable_Object = MibTable
restStatPortT1mTable = _RestStatPortT1mTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1)
)
if mibBuilder.loadTexts:
    restStatPortT1mTable.setStatus("mandatory")
_RestStatPortT1mEntry_Object = MibTableRow
restStatPortT1mEntry = _RestStatPortT1mEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1)
)
restStatPortT1mEntry.setIndexNames(
    (0, "STMIB", "restStatPortT1mAddr"),
    (0, "STMIB", "restStatPortT1mIndex"),
)
if mibBuilder.loadTexts:
    restStatPortT1mEntry.setStatus("mandatory")
_RestStatPortT1mAddr_Type = PortAddr
_RestStatPortT1mAddr_Object = MibTableColumn
restStatPortT1mAddr = _RestStatPortT1mAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 1),
    _RestStatPortT1mAddr_Type()
)
restStatPortT1mAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortT1mAddr.setStatus("mandatory")


class _RestStatPortT1mIndex_Type(Integer32):
    """Custom type restStatPortT1mIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 96),
    )


_RestStatPortT1mIndex_Type.__name__ = "Integer32"
_RestStatPortT1mIndex_Object = MibTableColumn
restStatPortT1mIndex = _RestStatPortT1mIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 2),
    _RestStatPortT1mIndex_Type()
)
restStatPortT1mIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortT1mIndex.setStatus("mandatory")
_RestStatPortT1mStartTime_Type = Integer32
_RestStatPortT1mStartTime_Object = MibTableColumn
restStatPortT1mStartTime = _RestStatPortT1mStartTime_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 3),
    _RestStatPortT1mStartTime_Type()
)
restStatPortT1mStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortT1mStartTime.setStatus("mandatory")
_RestStatPortT1mErrSec_Type = Integer32
_RestStatPortT1mErrSec_Object = MibTableColumn
restStatPortT1mErrSec = _RestStatPortT1mErrSec_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 4),
    _RestStatPortT1mErrSec_Type()
)
restStatPortT1mErrSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortT1mErrSec.setStatus("mandatory")
_RestStatPortT1mSevErrSec_Type = Integer32
_RestStatPortT1mSevErrSec_Object = MibTableColumn
restStatPortT1mSevErrSec = _RestStatPortT1mSevErrSec_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 5),
    _RestStatPortT1mSevErrSec_Type()
)
restStatPortT1mSevErrSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortT1mSevErrSec.setStatus("mandatory")
_RestStatPortT1mBstyErrSec_Type = Integer32
_RestStatPortT1mBstyErrSec_Object = MibTableColumn
restStatPortT1mBstyErrSec = _RestStatPortT1mBstyErrSec_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 6),
    _RestStatPortT1mBstyErrSec_Type()
)
restStatPortT1mBstyErrSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortT1mBstyErrSec.setStatus("mandatory")
_RestStatPortT1mUnavailSec_Type = Integer32
_RestStatPortT1mUnavailSec_Object = MibTableColumn
restStatPortT1mUnavailSec = _RestStatPortT1mUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 7),
    _RestStatPortT1mUnavailSec_Type()
)
restStatPortT1mUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortT1mUnavailSec.setStatus("mandatory")
_RestStatPortT1mLostFrame_Type = Integer32
_RestStatPortT1mLostFrame_Object = MibTableColumn
restStatPortT1mLostFrame = _RestStatPortT1mLostFrame_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 8),
    _RestStatPortT1mLostFrame_Type()
)
restStatPortT1mLostFrame.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortT1mLostFrame.setStatus("mandatory")


class _RestStatPortT1mControlMode_Type(Integer32):
    """Custom type restStatPortT1mControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("clearStats", 3)
    )


_RestStatPortT1mControlMode_Type.__name__ = "Integer32"
_RestStatPortT1mControlMode_Object = MibTableColumn
restStatPortT1mControlMode = _RestStatPortT1mControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 1, 1, 9),
    _RestStatPortT1mControlMode_Type()
)
restStatPortT1mControlMode.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatPortT1mControlMode.setStatus("mandatory")
_RestStatPortE1mTable_Object = MibTable
restStatPortE1mTable = _RestStatPortE1mTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2)
)
if mibBuilder.loadTexts:
    restStatPortE1mTable.setStatus("mandatory")
_RestStatPortE1mEntry_Object = MibTableRow
restStatPortE1mEntry = _RestStatPortE1mEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1)
)
restStatPortE1mEntry.setIndexNames(
    (0, "STMIB", "restStatPortE1mAddr"),
    (0, "STMIB", "restStatPortE1mIndex"),
)
if mibBuilder.loadTexts:
    restStatPortE1mEntry.setStatus("mandatory")
_RestStatPortE1mAddr_Type = PortAddr
_RestStatPortE1mAddr_Object = MibTableColumn
restStatPortE1mAddr = _RestStatPortE1mAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 1),
    _RestStatPortE1mAddr_Type()
)
restStatPortE1mAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortE1mAddr.setStatus("mandatory")


class _RestStatPortE1mIndex_Type(Integer32):
    """Custom type restStatPortE1mIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 96),
    )


_RestStatPortE1mIndex_Type.__name__ = "Integer32"
_RestStatPortE1mIndex_Object = MibTableColumn
restStatPortE1mIndex = _RestStatPortE1mIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 2),
    _RestStatPortE1mIndex_Type()
)
restStatPortE1mIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortE1mIndex.setStatus("mandatory")
_RestStatPortE1mStartTime_Type = Integer32
_RestStatPortE1mStartTime_Object = MibTableColumn
restStatPortE1mStartTime = _RestStatPortE1mStartTime_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 3),
    _RestStatPortE1mStartTime_Type()
)
restStatPortE1mStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortE1mStartTime.setStatus("mandatory")
_RestStatPortE1mErrSec_Type = Integer32
_RestStatPortE1mErrSec_Object = MibTableColumn
restStatPortE1mErrSec = _RestStatPortE1mErrSec_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 4),
    _RestStatPortE1mErrSec_Type()
)
restStatPortE1mErrSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortE1mErrSec.setStatus("mandatory")
_RestStatPortE1mSevErrSec_Type = Integer32
_RestStatPortE1mSevErrSec_Object = MibTableColumn
restStatPortE1mSevErrSec = _RestStatPortE1mSevErrSec_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 5),
    _RestStatPortE1mSevErrSec_Type()
)
restStatPortE1mSevErrSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortE1mSevErrSec.setStatus("mandatory")
_RestStatPortE1mBstyErrSec_Type = Integer32
_RestStatPortE1mBstyErrSec_Object = MibTableColumn
restStatPortE1mBstyErrSec = _RestStatPortE1mBstyErrSec_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 6),
    _RestStatPortE1mBstyErrSec_Type()
)
restStatPortE1mBstyErrSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortE1mBstyErrSec.setStatus("mandatory")
_RestStatPortE1mUnavailSec_Type = Integer32
_RestStatPortE1mUnavailSec_Object = MibTableColumn
restStatPortE1mUnavailSec = _RestStatPortE1mUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 7),
    _RestStatPortE1mUnavailSec_Type()
)
restStatPortE1mUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortE1mUnavailSec.setStatus("mandatory")
_RestStatPortE1mLostFrame_Type = Integer32
_RestStatPortE1mLostFrame_Object = MibTableColumn
restStatPortE1mLostFrame = _RestStatPortE1mLostFrame_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 8),
    _RestStatPortE1mLostFrame_Type()
)
restStatPortE1mLostFrame.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortE1mLostFrame.setStatus("mandatory")


class _RestStatPortE1mControlMode_Type(Integer32):
    """Custom type restStatPortE1mControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("clearStats", 3)
    )


_RestStatPortE1mControlMode_Type.__name__ = "Integer32"
_RestStatPortE1mControlMode_Object = MibTableColumn
restStatPortE1mControlMode = _RestStatPortE1mControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 2, 1, 9),
    _RestStatPortE1mControlMode_Type()
)
restStatPortE1mControlMode.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatPortE1mControlMode.setStatus("mandatory")
_RestStatPortPktTable_Object = MibTable
restStatPortPktTable = _RestStatPortPktTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3)
)
if mibBuilder.loadTexts:
    restStatPortPktTable.setStatus("mandatory")
_RestStatPortPktEntry_Object = MibTableRow
restStatPortPktEntry = _RestStatPortPktEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1)
)
restStatPortPktEntry.setIndexNames(
    (0, "STMIB", "restStatPortPktAddr"),
)
if mibBuilder.loadTexts:
    restStatPortPktEntry.setStatus("mandatory")
_RestStatPortPktAddr_Type = PortAddr
_RestStatPortPktAddr_Object = MibTableColumn
restStatPortPktAddr = _RestStatPortPktAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 1),
    _RestStatPortPktAddr_Type()
)
restStatPortPktAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktAddr.setStatus("mandatory")


class _RestStatPortPktControlMode_Type(Integer32):
    """Custom type restStatPortPktControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("clearStats", 3)
    )


_RestStatPortPktControlMode_Type.__name__ = "Integer32"
_RestStatPortPktControlMode_Object = MibTableColumn
restStatPortPktControlMode = _RestStatPortPktControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 2),
    _RestStatPortPktControlMode_Type()
)
restStatPortPktControlMode.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatPortPktControlMode.setStatus("mandatory")
_RestStatPortPktSegmentSent_Type = Counter32
_RestStatPortPktSegmentSent_Object = MibTableColumn
restStatPortPktSegmentSent = _RestStatPortPktSegmentSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 3),
    _RestStatPortPktSegmentSent_Type()
)
restStatPortPktSegmentSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktSegmentSent.setStatus("mandatory")
_RestStatPortPktSegmentRecv_Type = Counter32
_RestStatPortPktSegmentRecv_Object = MibTableColumn
restStatPortPktSegmentRecv = _RestStatPortPktSegmentRecv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 4),
    _RestStatPortPktSegmentRecv_Type()
)
restStatPortPktSegmentRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktSegmentRecv.setStatus("mandatory")
_RestStatPortPktOctetSent_Type = Counter32
_RestStatPortPktOctetSent_Object = MibTableColumn
restStatPortPktOctetSent = _RestStatPortPktOctetSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 5),
    _RestStatPortPktOctetSent_Type()
)
restStatPortPktOctetSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktOctetSent.setStatus("mandatory")
_RestStatPortPktOctetRecv_Type = Counter32
_RestStatPortPktOctetRecv_Object = MibTableColumn
restStatPortPktOctetRecv = _RestStatPortPktOctetRecv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 6),
    _RestStatPortPktOctetRecv_Type()
)
restStatPortPktOctetRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktOctetRecv.setStatus("mandatory")
_RestStatPortPktDlciDiscard_Type = Counter32
_RestStatPortPktDlciDiscard_Object = MibTableColumn
restStatPortPktDlciDiscard = _RestStatPortPktDlciDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 7),
    _RestStatPortPktDlciDiscard_Type()
)
restStatPortPktDlciDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktDlciDiscard.setStatus("mandatory")
_RestStatPortPktBadAddrDiscard_Type = Counter32
_RestStatPortPktBadAddrDiscard_Object = MibTableColumn
restStatPortPktBadAddrDiscard = _RestStatPortPktBadAddrDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 8),
    _RestStatPortPktBadAddrDiscard_Type()
)
restStatPortPktBadAddrDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktBadAddrDiscard.setStatus("mandatory")
_RestStatPortPktOvrszeDiscard_Type = Counter32
_RestStatPortPktOvrszeDiscard_Object = MibTableColumn
restStatPortPktOvrszeDiscard = _RestStatPortPktOvrszeDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 9),
    _RestStatPortPktOvrszeDiscard_Type()
)
restStatPortPktOvrszeDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktOvrszeDiscard.setStatus("mandatory")
_RestStatPortPktUnderszeDiscard_Type = Counter32
_RestStatPortPktUnderszeDiscard_Object = MibTableColumn
restStatPortPktUnderszeDiscard = _RestStatPortPktUnderszeDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 10),
    _RestStatPortPktUnderszeDiscard_Type()
)
restStatPortPktUnderszeDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktUnderszeDiscard.setStatus("mandatory")
_RestStatPortPktCRCDiscard_Type = Counter32
_RestStatPortPktCRCDiscard_Object = MibTableColumn
restStatPortPktCRCDiscard = _RestStatPortPktCRCDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 11),
    _RestStatPortPktCRCDiscard_Type()
)
restStatPortPktCRCDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktCRCDiscard.setStatus("mandatory")
_RestStatPortPktSwOvrRunDiscard_Type = Counter32
_RestStatPortPktSwOvrRunDiscard_Object = MibTableColumn
restStatPortPktSwOvrRunDiscard = _RestStatPortPktSwOvrRunDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 12),
    _RestStatPortPktSwOvrRunDiscard_Type()
)
restStatPortPktSwOvrRunDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktSwOvrRunDiscard.setStatus("mandatory")
_RestStatPortPktUnderRunDiscard_Type = Counter32
_RestStatPortPktUnderRunDiscard_Object = MibTableColumn
restStatPortPktUnderRunDiscard = _RestStatPortPktUnderRunDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 13),
    _RestStatPortPktUnderRunDiscard_Type()
)
restStatPortPktUnderRunDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktUnderRunDiscard.setStatus("mandatory")
_RestStatPortPktAbortDiscard_Type = Counter32
_RestStatPortPktAbortDiscard_Object = MibTableColumn
restStatPortPktAbortDiscard = _RestStatPortPktAbortDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 14),
    _RestStatPortPktAbortDiscard_Type()
)
restStatPortPktAbortDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktAbortDiscard.setStatus("mandatory")
_RestStatPortPktHwOvrRunDiscard_Type = Counter32
_RestStatPortPktHwOvrRunDiscard_Object = MibTableColumn
restStatPortPktHwOvrRunDiscard = _RestStatPortPktHwOvrRunDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 15),
    _RestStatPortPktHwOvrRunDiscard_Type()
)
restStatPortPktHwOvrRunDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktHwOvrRunDiscard.setStatus("mandatory")
_RestStatPortPktLmiSegmentSent_Type = Counter32
_RestStatPortPktLmiSegmentSent_Object = MibTableColumn
restStatPortPktLmiSegmentSent = _RestStatPortPktLmiSegmentSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 16),
    _RestStatPortPktLmiSegmentSent_Type()
)
restStatPortPktLmiSegmentSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktLmiSegmentSent.setStatus("mandatory")
_RestStatPortPktLmiSegmentRecv_Type = Counter32
_RestStatPortPktLmiSegmentRecv_Object = MibTableColumn
restStatPortPktLmiSegmentRecv = _RestStatPortPktLmiSegmentRecv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 17),
    _RestStatPortPktLmiSegmentRecv_Type()
)
restStatPortPktLmiSegmentRecv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktLmiSegmentRecv.setStatus("mandatory")
_RestStatPortPktLmiSyntaxErr_Type = Counter32
_RestStatPortPktLmiSyntaxErr_Object = MibTableColumn
restStatPortPktLmiSyntaxErr = _RestStatPortPktLmiSyntaxErr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 18),
    _RestStatPortPktLmiSyntaxErr_Type()
)
restStatPortPktLmiSyntaxErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktLmiSyntaxErr.setStatus("mandatory")
_RestStatPortPktLmiWrongSeq_Type = Counter32
_RestStatPortPktLmiWrongSeq_Object = MibTableColumn
restStatPortPktLmiWrongSeq = _RestStatPortPktLmiWrongSeq_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 19),
    _RestStatPortPktLmiWrongSeq_Type()
)
restStatPortPktLmiWrongSeq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktLmiWrongSeq.setStatus("mandatory")
_RestStatPortPktLmiPollTimeOut_Type = Counter32
_RestStatPortPktLmiPollTimeOut_Object = MibTableColumn
restStatPortPktLmiPollTimeOut = _RestStatPortPktLmiPollTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 20),
    _RestStatPortPktLmiPollTimeOut_Type()
)
restStatPortPktLmiPollTimeOut.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktLmiPollTimeOut.setStatus("mandatory")
_RestStatPortPktLmiWaitTimeOut_Type = Counter32
_RestStatPortPktLmiWaitTimeOut_Object = MibTableColumn
restStatPortPktLmiWaitTimeOut = _RestStatPortPktLmiWaitTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 21),
    _RestStatPortPktLmiWaitTimeOut_Type()
)
restStatPortPktLmiWaitTimeOut.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktLmiWaitTimeOut.setStatus("mandatory")
_RestStatPortPktLmiTxSeqNum_Type = Integer32
_RestStatPortPktLmiTxSeqNum_Object = MibTableColumn
restStatPortPktLmiTxSeqNum = _RestStatPortPktLmiTxSeqNum_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 22),
    _RestStatPortPktLmiTxSeqNum_Type()
)
restStatPortPktLmiTxSeqNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktLmiTxSeqNum.setStatus("mandatory")
_RestStatPortPktLmiRxSeqNum_Type = Integer32
_RestStatPortPktLmiRxSeqNum_Object = MibTableColumn
restStatPortPktLmiRxSeqNum = _RestStatPortPktLmiRxSeqNum_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 23),
    _RestStatPortPktLmiRxSeqNum_Type()
)
restStatPortPktLmiRxSeqNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktLmiRxSeqNum.setStatus("mandatory")
_RestStatPortPktLmiNumGoodEvents_Type = Integer32
_RestStatPortPktLmiNumGoodEvents_Object = MibTableColumn
restStatPortPktLmiNumGoodEvents = _RestStatPortPktLmiNumGoodEvents_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 24),
    _RestStatPortPktLmiNumGoodEvents_Type()
)
restStatPortPktLmiNumGoodEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktLmiNumGoodEvents.setStatus("mandatory")
_RestStatPortPktLmiNumBadEvents_Type = Integer32
_RestStatPortPktLmiNumBadEvents_Object = MibTableColumn
restStatPortPktLmiNumBadEvents = _RestStatPortPktLmiNumBadEvents_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 25),
    _RestStatPortPktLmiNumBadEvents_Type()
)
restStatPortPktLmiNumBadEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktLmiNumBadEvents.setStatus("mandatory")


class _RestStatPortPktLmiEventHistory_Type(OctetString):
    """Custom type restStatPortPktLmiEventHistory based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RestStatPortPktLmiEventHistory_Type.__name__ = "OctetString"
_RestStatPortPktLmiEventHistory_Object = MibTableColumn
restStatPortPktLmiEventHistory = _RestStatPortPktLmiEventHistory_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 3, 1, 26),
    _RestStatPortPktLmiEventHistory_Type()
)
restStatPortPktLmiEventHistory.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortPktLmiEventHistory.setStatus("mandatory")
_RestStatPortAsmX50Table_Object = MibTable
restStatPortAsmX50Table = _RestStatPortAsmX50Table_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4)
)
if mibBuilder.loadTexts:
    restStatPortAsmX50Table.setStatus("mandatory")
_RestStatPortAsmX50Entry_Object = MibTableRow
restStatPortAsmX50Entry = _RestStatPortAsmX50Entry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4, 1)
)
restStatPortAsmX50Entry.setIndexNames(
    (0, "STMIB", "restStatPortAsmX50Addr"),
)
if mibBuilder.loadTexts:
    restStatPortAsmX50Entry.setStatus("mandatory")
_RestStatPortAsmX50Addr_Type = PortAddr
_RestStatPortAsmX50Addr_Object = MibTableColumn
restStatPortAsmX50Addr = _RestStatPortAsmX50Addr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4, 1, 1),
    _RestStatPortAsmX50Addr_Type()
)
restStatPortAsmX50Addr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortAsmX50Addr.setStatus("mandatory")


class _RestStatPortAsmX50Control_Type(Integer32):
    """Custom type restStatPortAsmX50Control based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("clearStats", 1)
    )


_RestStatPortAsmX50Control_Type.__name__ = "Integer32"
_RestStatPortAsmX50Control_Object = MibTableColumn
restStatPortAsmX50Control = _RestStatPortAsmX50Control_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4, 1, 2),
    _RestStatPortAsmX50Control_Type()
)
restStatPortAsmX50Control.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatPortAsmX50Control.setStatus("mandatory")
_RestStatPortAsmX50RxFrameErrors_Type = Counter32
_RestStatPortAsmX50RxFrameErrors_Object = MibTableColumn
restStatPortAsmX50RxFrameErrors = _RestStatPortAsmX50RxFrameErrors_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4, 1, 3),
    _RestStatPortAsmX50RxFrameErrors_Type()
)
restStatPortAsmX50RxFrameErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortAsmX50RxFrameErrors.setStatus("mandatory")
_RestStatPortAsmX50LocalOs_Type = Counter32
_RestStatPortAsmX50LocalOs_Object = MibTableColumn
restStatPortAsmX50LocalOs = _RestStatPortAsmX50LocalOs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4, 1, 4),
    _RestStatPortAsmX50LocalOs_Type()
)
restStatPortAsmX50LocalOs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortAsmX50LocalOs.setStatus("mandatory")
_RestStatPortAsmX50RemoteOs_Type = Counter32
_RestStatPortAsmX50RemoteOs_Object = MibTableColumn
restStatPortAsmX50RemoteOs = _RestStatPortAsmX50RemoteOs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 4, 1, 5),
    _RestStatPortAsmX50RemoteOs_Type()
)
restStatPortAsmX50RemoteOs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortAsmX50RemoteOs.setStatus("mandatory")
_RestStatPortRtmTable_Object = MibTable
restStatPortRtmTable = _RestStatPortRtmTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5)
)
if mibBuilder.loadTexts:
    restStatPortRtmTable.setStatus("mandatory")
_RestStatPortRtmEntry_Object = MibTableRow
restStatPortRtmEntry = _RestStatPortRtmEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1)
)
restStatPortRtmEntry.setIndexNames(
    (0, "STMIB", "restStatPortRtmAddr"),
)
if mibBuilder.loadTexts:
    restStatPortRtmEntry.setStatus("mandatory")
_RestStatPortRtmAddr_Type = PortAddr
_RestStatPortRtmAddr_Object = MibTableColumn
restStatPortRtmAddr = _RestStatPortRtmAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 1),
    _RestStatPortRtmAddr_Type()
)
restStatPortRtmAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortRtmAddr.setStatus("mandatory")


class _RestStatPortRtmControl_Type(Integer32):
    """Custom type restStatPortRtmControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("clearStats", 3)
    )


_RestStatPortRtmControl_Type.__name__ = "Integer32"
_RestStatPortRtmControl_Object = MibTableColumn
restStatPortRtmControl = _RestStatPortRtmControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 2),
    _RestStatPortRtmControl_Type()
)
restStatPortRtmControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatPortRtmControl.setStatus("mandatory")
_RestStatPortRtmUIFarEndBlkErr_Type = Counter32
_RestStatPortRtmUIFarEndBlkErr_Object = MibTableColumn
restStatPortRtmUIFarEndBlkErr = _RestStatPortRtmUIFarEndBlkErr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 3),
    _RestStatPortRtmUIFarEndBlkErr_Type()
)
restStatPortRtmUIFarEndBlkErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortRtmUIFarEndBlkErr.setStatus("mandatory")
_RestStatPortRtmUINearEndBlkErr_Type = Counter32
_RestStatPortRtmUINearEndBlkErr_Object = MibTableColumn
restStatPortRtmUINearEndBlkErr = _RestStatPortRtmUINearEndBlkErr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 4),
    _RestStatPortRtmUINearEndBlkErr_Type()
)
restStatPortRtmUINearEndBlkErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortRtmUINearEndBlkErr.setStatus("mandatory")
_RestStatPortRtmAdUIFarEndBlkErr_Type = Counter32
_RestStatPortRtmAdUIFarEndBlkErr_Object = MibTableColumn
restStatPortRtmAdUIFarEndBlkErr = _RestStatPortRtmAdUIFarEndBlkErr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 5),
    _RestStatPortRtmAdUIFarEndBlkErr_Type()
)
restStatPortRtmAdUIFarEndBlkErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortRtmAdUIFarEndBlkErr.setStatus("mandatory")
_RestStatPortRtmAdUINrEndBlkErr_Type = Counter32
_RestStatPortRtmAdUINrEndBlkErr_Object = MibTableColumn
restStatPortRtmAdUINrEndBlkErr = _RestStatPortRtmAdUINrEndBlkErr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 6),
    _RestStatPortRtmAdUINrEndBlkErr_Type()
)
restStatPortRtmAdUINrEndBlkErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortRtmAdUINrEndBlkErr.setStatus("mandatory")
_RestStatPortRtmOOSTransitions_Type = Counter32
_RestStatPortRtmOOSTransitions_Object = MibTableColumn
restStatPortRtmOOSTransitions = _RestStatPortRtmOOSTransitions_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 5, 1, 7),
    _RestStatPortRtmOOSTransitions_Type()
)
restStatPortRtmOOSTransitions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortRtmOOSTransitions.setStatus("mandatory")
_RestStatPortAsmVoiceTable_Object = MibTable
restStatPortAsmVoiceTable = _RestStatPortAsmVoiceTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6)
)
if mibBuilder.loadTexts:
    restStatPortAsmVoiceTable.setStatus("mandatory")
_RestStatPortAsmVoiceEntry_Object = MibTableRow
restStatPortAsmVoiceEntry = _RestStatPortAsmVoiceEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6, 1)
)
restStatPortAsmVoiceEntry.setIndexNames(
    (0, "STMIB", "restStatPortAsmVoiceChanAddr"),
)
if mibBuilder.loadTexts:
    restStatPortAsmVoiceEntry.setStatus("mandatory")
_RestStatPortAsmVoiceChanAddr_Type = ChannelAddr
_RestStatPortAsmVoiceChanAddr_Object = MibTableColumn
restStatPortAsmVoiceChanAddr = _RestStatPortAsmVoiceChanAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6, 1, 1),
    _RestStatPortAsmVoiceChanAddr_Type()
)
restStatPortAsmVoiceChanAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortAsmVoiceChanAddr.setStatus("mandatory")


class _RestStatPortAsmVoiceControl_Type(Integer32):
    """Custom type restStatPortAsmVoiceControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("clearStats", 3)
    )


_RestStatPortAsmVoiceControl_Type.__name__ = "Integer32"
_RestStatPortAsmVoiceControl_Object = MibTableColumn
restStatPortAsmVoiceControl = _RestStatPortAsmVoiceControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6, 1, 2),
    _RestStatPortAsmVoiceControl_Type()
)
restStatPortAsmVoiceControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatPortAsmVoiceControl.setStatus("mandatory")
_RestStatPortAsmVoiceFrameOOSs_Type = Counter32
_RestStatPortAsmVoiceFrameOOSs_Object = MibTableColumn
restStatPortAsmVoiceFrameOOSs = _RestStatPortAsmVoiceFrameOOSs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6, 1, 3),
    _RestStatPortAsmVoiceFrameOOSs_Type()
)
restStatPortAsmVoiceFrameOOSs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortAsmVoiceFrameOOSs.setStatus("mandatory")
_RestStatPortAsmVoiceSignalOOSs_Type = Counter32
_RestStatPortAsmVoiceSignalOOSs_Object = MibTableColumn
restStatPortAsmVoiceSignalOOSs = _RestStatPortAsmVoiceSignalOOSs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6, 1, 4),
    _RestStatPortAsmVoiceSignalOOSs_Type()
)
restStatPortAsmVoiceSignalOOSs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortAsmVoiceSignalOOSs.setStatus("mandatory")
_RestStatPortAsmVoiceHighBERs_Type = Counter32
_RestStatPortAsmVoiceHighBERs_Object = MibTableColumn
restStatPortAsmVoiceHighBERs = _RestStatPortAsmVoiceHighBERs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 6, 1, 5),
    _RestStatPortAsmVoiceHighBERs_Type()
)
restStatPortAsmVoiceHighBERs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortAsmVoiceHighBERs.setStatus("mandatory")
_RestStatPortLgmTable_Object = MibTable
restStatPortLgmTable = _RestStatPortLgmTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7)
)
if mibBuilder.loadTexts:
    restStatPortLgmTable.setStatus("mandatory")
_RestStatPortLgmEntry_Object = MibTableRow
restStatPortLgmEntry = _RestStatPortLgmEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1)
)
restStatPortLgmEntry.setIndexNames(
    (0, "STMIB", "restStatPortLgmAddr"),
)
if mibBuilder.loadTexts:
    restStatPortLgmEntry.setStatus("mandatory")
_RestStatPortLgmAddr_Type = PortAddr
_RestStatPortLgmAddr_Object = MibTableColumn
restStatPortLgmAddr = _RestStatPortLgmAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 1),
    _RestStatPortLgmAddr_Type()
)
restStatPortLgmAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortLgmAddr.setStatus("mandatory")


class _RestStatPortLgmControlMode_Type(Integer32):
    """Custom type restStatPortLgmControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("clearStats", 1)
    )


_RestStatPortLgmControlMode_Type.__name__ = "Integer32"
_RestStatPortLgmControlMode_Object = MibTableColumn
restStatPortLgmControlMode = _RestStatPortLgmControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 2),
    _RestStatPortLgmControlMode_Type()
)
restStatPortLgmControlMode.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatPortLgmControlMode.setStatus("mandatory")


class _RestStatPortLgmBadSync_Type(Integer32):
    """Custom type restStatPortLgmBadSync based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65536),
    )


_RestStatPortLgmBadSync_Type.__name__ = "Integer32"
_RestStatPortLgmBadSync_Object = MibTableColumn
restStatPortLgmBadSync = _RestStatPortLgmBadSync_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 3),
    _RestStatPortLgmBadSync_Type()
)
restStatPortLgmBadSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortLgmBadSync.setStatus("mandatory")


class _RestStatPortLgmOosCount_Type(Integer32):
    """Custom type restStatPortLgmOosCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65536),
    )


_RestStatPortLgmOosCount_Type.__name__ = "Integer32"
_RestStatPortLgmOosCount_Object = MibTableColumn
restStatPortLgmOosCount = _RestStatPortLgmOosCount_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 4),
    _RestStatPortLgmOosCount_Type()
)
restStatPortLgmOosCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortLgmOosCount.setStatus("mandatory")


class _RestStatPortLgmFrameSent_Type(Integer32):
    """Custom type restStatPortLgmFrameSent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65536),
    )


_RestStatPortLgmFrameSent_Type.__name__ = "Integer32"
_RestStatPortLgmFrameSent_Object = MibTableColumn
restStatPortLgmFrameSent = _RestStatPortLgmFrameSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 5),
    _RestStatPortLgmFrameSent_Type()
)
restStatPortLgmFrameSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortLgmFrameSent.setStatus("mandatory")


class _RestStatPortLgmFrameRecd_Type(Integer32):
    """Custom type restStatPortLgmFrameRecd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65536),
    )


_RestStatPortLgmFrameRecd_Type.__name__ = "Integer32"
_RestStatPortLgmFrameRecd_Object = MibTableColumn
restStatPortLgmFrameRecd = _RestStatPortLgmFrameRecd_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 6),
    _RestStatPortLgmFrameRecd_Type()
)
restStatPortLgmFrameRecd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortLgmFrameRecd.setStatus("mandatory")


class _RestStatPortLgmFrameReTx_Type(Integer32):
    """Custom type restStatPortLgmFrameReTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65536),
    )


_RestStatPortLgmFrameReTx_Type.__name__ = "Integer32"
_RestStatPortLgmFrameReTx_Object = MibTableColumn
restStatPortLgmFrameReTx = _RestStatPortLgmFrameReTx_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 7),
    _RestStatPortLgmFrameReTx_Type()
)
restStatPortLgmFrameReTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortLgmFrameReTx.setStatus("mandatory")


class _RestStatPortLgmFrameNak_Type(Integer32):
    """Custom type restStatPortLgmFrameNak based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65536),
    )


_RestStatPortLgmFrameNak_Type.__name__ = "Integer32"
_RestStatPortLgmFrameNak_Object = MibTableColumn
restStatPortLgmFrameNak = _RestStatPortLgmFrameNak_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 8),
    _RestStatPortLgmFrameNak_Type()
)
restStatPortLgmFrameNak.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortLgmFrameNak.setStatus("mandatory")


class _RestStatPortLgmSabmSent_Type(Integer32):
    """Custom type restStatPortLgmSabmSent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65536),
    )


_RestStatPortLgmSabmSent_Type.__name__ = "Integer32"
_RestStatPortLgmSabmSent_Object = MibTableColumn
restStatPortLgmSabmSent = _RestStatPortLgmSabmSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 9),
    _RestStatPortLgmSabmSent_Type()
)
restStatPortLgmSabmSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortLgmSabmSent.setStatus("mandatory")


class _RestStatPortLgmSabmRecd_Type(Integer32):
    """Custom type restStatPortLgmSabmRecd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65536),
    )


_RestStatPortLgmSabmRecd_Type.__name__ = "Integer32"
_RestStatPortLgmSabmRecd_Object = MibTableColumn
restStatPortLgmSabmRecd = _RestStatPortLgmSabmRecd_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 10),
    _RestStatPortLgmSabmRecd_Type()
)
restStatPortLgmSabmRecd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortLgmSabmRecd.setStatus("mandatory")


class _RestStatPortLgmRnrSent_Type(Integer32):
    """Custom type restStatPortLgmRnrSent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65536),
    )


_RestStatPortLgmRnrSent_Type.__name__ = "Integer32"
_RestStatPortLgmRnrSent_Object = MibTableColumn
restStatPortLgmRnrSent = _RestStatPortLgmRnrSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 11),
    _RestStatPortLgmRnrSent_Type()
)
restStatPortLgmRnrSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortLgmRnrSent.setStatus("mandatory")


class _RestStatPortLgmRnrRecd_Type(Integer32):
    """Custom type restStatPortLgmRnrRecd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65536),
    )


_RestStatPortLgmRnrRecd_Type.__name__ = "Integer32"
_RestStatPortLgmRnrRecd_Object = MibTableColumn
restStatPortLgmRnrRecd = _RestStatPortLgmRnrRecd_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 7, 1, 12),
    _RestStatPortLgmRnrRecd_Type()
)
restStatPortLgmRnrRecd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortLgmRnrRecd.setStatus("mandatory")
_RestStatPortDsm_ObjectIdentity = ObjectIdentity
restStatPortDsm = _RestStatPortDsm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8)
)
_RestStatPortDsmDChTable_Object = MibTable
restStatPortDsmDChTable = _RestStatPortDsmDChTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1)
)
if mibBuilder.loadTexts:
    restStatPortDsmDChTable.setStatus("mandatory")
_RestStatPortDsmDChEntry_Object = MibTableRow
restStatPortDsmDChEntry = _RestStatPortDsmDChEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1)
)
restStatPortDsmDChEntry.setIndexNames(
    (0, "STMIB", "restStatPortDsmDChAddr"),
)
if mibBuilder.loadTexts:
    restStatPortDsmDChEntry.setStatus("mandatory")
_RestStatPortDsmDChAddr_Type = PortAddr
_RestStatPortDsmDChAddr_Object = MibTableColumn
restStatPortDsmDChAddr = _RestStatPortDsmDChAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 1),
    _RestStatPortDsmDChAddr_Type()
)
restStatPortDsmDChAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChAddr.setStatus("mandatory")


class _RestStatPortDsmDChControlMode_Type(Integer32):
    """Custom type restStatPortDsmDChControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("clearStats", 3)
    )


_RestStatPortDsmDChControlMode_Type.__name__ = "Integer32"
_RestStatPortDsmDChControlMode_Object = MibTableColumn
restStatPortDsmDChControlMode = _RestStatPortDsmDChControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 2),
    _RestStatPortDsmDChControlMode_Type()
)
restStatPortDsmDChControlMode.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChControlMode.setStatus("mandatory")
_RestStatPortDsmDChOrigAttempts_Type = Counter32
_RestStatPortDsmDChOrigAttempts_Object = MibTableColumn
restStatPortDsmDChOrigAttempts = _RestStatPortDsmDChOrigAttempts_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 3),
    _RestStatPortDsmDChOrigAttempts_Type()
)
restStatPortDsmDChOrigAttempts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChOrigAttempts.setStatus("mandatory")
_RestStatPortDsmDChTermAttempts_Type = Counter32
_RestStatPortDsmDChTermAttempts_Object = MibTableColumn
restStatPortDsmDChTermAttempts = _RestStatPortDsmDChTermAttempts_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 4),
    _RestStatPortDsmDChTermAttempts_Type()
)
restStatPortDsmDChTermAttempts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChTermAttempts.setStatus("mandatory")
_RestStatPortDsmDChPbxLayer2Errs_Type = Counter32
_RestStatPortDsmDChPbxLayer2Errs_Object = MibTableColumn
restStatPortDsmDChPbxLayer2Errs = _RestStatPortDsmDChPbxLayer2Errs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 5),
    _RestStatPortDsmDChPbxLayer2Errs_Type()
)
restStatPortDsmDChPbxLayer2Errs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChPbxLayer2Errs.setStatus("mandatory")
_RestStatPortDsmDChPbxLayer3Errs_Type = Counter32
_RestStatPortDsmDChPbxLayer3Errs_Object = MibTableColumn
restStatPortDsmDChPbxLayer3Errs = _RestStatPortDsmDChPbxLayer3Errs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 6),
    _RestStatPortDsmDChPbxLayer3Errs_Type()
)
restStatPortDsmDChPbxLayer3Errs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChPbxLayer3Errs.setStatus("mandatory")
_RestStatPortDsmDChPbxLinkResets_Type = Counter32
_RestStatPortDsmDChPbxLinkResets_Object = MibTableColumn
restStatPortDsmDChPbxLinkResets = _RestStatPortDsmDChPbxLinkResets_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 7),
    _RestStatPortDsmDChPbxLinkResets_Type()
)
restStatPortDsmDChPbxLinkResets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChPbxLinkResets.setStatus("mandatory")
_RestStatPortDsmDChPbxDisconns_Type = Counter32
_RestStatPortDsmDChPbxDisconns_Object = MibTableColumn
restStatPortDsmDChPbxDisconns = _RestStatPortDsmDChPbxDisconns_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 8),
    _RestStatPortDsmDChPbxDisconns_Type()
)
restStatPortDsmDChPbxDisconns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChPbxDisconns.setStatus("mandatory")
_RestStatPortDsmDChPbxUnkExchs_Type = Counter32
_RestStatPortDsmDChPbxUnkExchs_Object = MibTableColumn
restStatPortDsmDChPbxUnkExchs = _RestStatPortDsmDChPbxUnkExchs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 9),
    _RestStatPortDsmDChPbxUnkExchs_Type()
)
restStatPortDsmDChPbxUnkExchs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChPbxUnkExchs.setStatus("mandatory")
_RestStatPortDsmDChPbxNoBws_Type = Counter32
_RestStatPortDsmDChPbxNoBws_Object = MibTableColumn
restStatPortDsmDChPbxNoBws = _RestStatPortDsmDChPbxNoBws_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 10),
    _RestStatPortDsmDChPbxNoBws_Type()
)
restStatPortDsmDChPbxNoBws.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChPbxNoBws.setStatus("mandatory")
_RestStatPortDsmDChPbxNoCmprs_Type = Counter32
_RestStatPortDsmDChPbxNoCmprs_Object = MibTableColumn
restStatPortDsmDChPbxNoCmprs = _RestStatPortDsmDChPbxNoCmprs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 11),
    _RestStatPortDsmDChPbxNoCmprs_Type()
)
restStatPortDsmDChPbxNoCmprs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChPbxNoCmprs.setStatus("mandatory")
_RestStatPortDsmDChPbxNoBchs_Type = Counter32
_RestStatPortDsmDChPbxNoBchs_Object = MibTableColumn
restStatPortDsmDChPbxNoBchs = _RestStatPortDsmDChPbxNoBchs_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 12),
    _RestStatPortDsmDChPbxNoBchs_Type()
)
restStatPortDsmDChPbxNoBchs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChPbxNoBchs.setStatus("mandatory")
_RestStatPortDsmDChPbxOtherFails_Type = Counter32
_RestStatPortDsmDChPbxOtherFails_Object = MibTableColumn
restStatPortDsmDChPbxOtherFails = _RestStatPortDsmDChPbxOtherFails_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 13),
    _RestStatPortDsmDChPbxOtherFails_Type()
)
restStatPortDsmDChPbxOtherFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChPbxOtherFails.setStatus("mandatory")
_RestStatPortDsmDChNetDisconns_Type = Counter32
_RestStatPortDsmDChNetDisconns_Object = MibTableColumn
restStatPortDsmDChNetDisconns = _RestStatPortDsmDChNetDisconns_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 14),
    _RestStatPortDsmDChNetDisconns_Type()
)
restStatPortDsmDChNetDisconns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChNetDisconns.setStatus("mandatory")
_RestStatPortDsmDChNetOtherFails_Type = Counter32
_RestStatPortDsmDChNetOtherFails_Object = MibTableColumn
restStatPortDsmDChNetOtherFails = _RestStatPortDsmDChNetOtherFails_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 1, 8, 1, 1, 15),
    _RestStatPortDsmDChNetOtherFails_Type()
)
restStatPortDsmDChNetOtherFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatPortDsmDChNetOtherFails.setStatus("mandatory")
_RestStatCh_ObjectIdentity = ObjectIdentity
restStatCh = _RestStatCh_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2)
)
_RestStatChPktTable_Object = MibTable
restStatChPktTable = _RestStatChPktTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1)
)
if mibBuilder.loadTexts:
    restStatChPktTable.setStatus("mandatory")
_RestStatChPktEntry_Object = MibTableRow
restStatChPktEntry = _RestStatChPktEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1)
)
restStatChPktEntry.setIndexNames(
    (0, "STMIB", "restStatChPktAddr"),
)
if mibBuilder.loadTexts:
    restStatChPktEntry.setStatus("mandatory")
_RestStatChPktAddr_Type = ChannelAddr
_RestStatChPktAddr_Object = MibTableColumn
restStatChPktAddr = _RestStatChPktAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 1),
    _RestStatChPktAddr_Type()
)
restStatChPktAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktAddr.setStatus("mandatory")
_RestStatChPktSourceNodeID_Type = NodeAddr
_RestStatChPktSourceNodeID_Object = MibTableColumn
restStatChPktSourceNodeID = _RestStatChPktSourceNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 2),
    _RestStatChPktSourceNodeID_Type()
)
restStatChPktSourceNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSourceNodeID.setStatus("mandatory")
_RestStatChPktSourceChAddr_Type = ChannelAddr
_RestStatChPktSourceChAddr_Object = MibTableColumn
restStatChPktSourceChAddr = _RestStatChPktSourceChAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 3),
    _RestStatChPktSourceChAddr_Type()
)
restStatChPktSourceChAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSourceChAddr.setStatus("mandatory")
_RestStatChPktDestNodeID_Type = NodeAddr
_RestStatChPktDestNodeID_Object = MibTableColumn
restStatChPktDestNodeID = _RestStatChPktDestNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 4),
    _RestStatChPktDestNodeID_Type()
)
restStatChPktDestNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktDestNodeID.setStatus("mandatory")
_RestStatChPktDestChAddr_Type = ChannelAddr
_RestStatChPktDestChAddr_Object = MibTableColumn
restStatChPktDestChAddr = _RestStatChPktDestChAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 5),
    _RestStatChPktDestChAddr_Type()
)
restStatChPktDestChAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktDestChAddr.setStatus("mandatory")


class _RestStatChPktControlMode_Type(Integer32):
    """Custom type restStatChPktControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("clearStats", 3)
    )


_RestStatChPktControlMode_Type.__name__ = "Integer32"
_RestStatChPktControlMode_Object = MibTableColumn
restStatChPktControlMode = _RestStatChPktControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 6),
    _RestStatChPktControlMode_Type()
)
restStatChPktControlMode.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatChPktControlMode.setStatus("mandatory")
_RestStatChPktSegmentsToUser_Type = Integer32
_RestStatChPktSegmentsToUser_Object = MibTableColumn
restStatChPktSegmentsToUser = _RestStatChPktSegmentsToUser_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 7),
    _RestStatChPktSegmentsToUser_Type()
)
restStatChPktSegmentsToUser.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSegmentsToUser.setStatus("mandatory")
_RestStatChPktSegmentsToNetwork_Type = Integer32
_RestStatChPktSegmentsToNetwork_Object = MibTableColumn
restStatChPktSegmentsToNetwork = _RestStatChPktSegmentsToNetwork_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 8),
    _RestStatChPktSegmentsToNetwork_Type()
)
restStatChPktSegmentsToNetwork.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSegmentsToNetwork.setStatus("mandatory")
_RestStatChPktYellowThreshold_Type = Integer32
_RestStatChPktYellowThreshold_Object = MibTableColumn
restStatChPktYellowThreshold = _RestStatChPktYellowThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 9),
    _RestStatChPktYellowThreshold_Type()
)
restStatChPktYellowThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktYellowThreshold.setStatus("mandatory")
_RestStatChPktRedThreshold_Type = Integer32
_RestStatChPktRedThreshold_Object = MibTableColumn
restStatChPktRedThreshold = _RestStatChPktRedThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 10),
    _RestStatChPktRedThreshold_Type()
)
restStatChPktRedThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktRedThreshold.setStatus("mandatory")
_RestStatChPktCritThreshold_Type = Integer32
_RestStatChPktCritThreshold_Object = MibTableColumn
restStatChPktCritThreshold = _RestStatChPktCritThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 11),
    _RestStatChPktCritThreshold_Type()
)
restStatChPktCritThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktCritThreshold.setStatus("mandatory")


class _RestStatChPktPortCongMode_Type(Integer32):
    """Custom type restStatChPktPortCongMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 4),
          ("normal", 1),
          ("red", 3),
          ("yellow", 2))
    )


_RestStatChPktPortCongMode_Type.__name__ = "Integer32"
_RestStatChPktPortCongMode_Object = MibTableColumn
restStatChPktPortCongMode = _RestStatChPktPortCongMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 12),
    _RestStatChPktPortCongMode_Type()
)
restStatChPktPortCongMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortCongMode.setStatus("mandatory")


class _RestStatChPktNetCongMode_Type(Integer32):
    """Custom type restStatChPktNetCongMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 4),
          ("normal", 1),
          ("red", 3),
          ("yellow", 2))
    )


_RestStatChPktNetCongMode_Type.__name__ = "Integer32"
_RestStatChPktNetCongMode_Object = MibTableColumn
restStatChPktNetCongMode = _RestStatChPktNetCongMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 13),
    _RestStatChPktNetCongMode_Type()
)
restStatChPktNetCongMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetCongMode.setStatus("mandatory")


class _RestStatChPktRemoteCongMode_Type(Integer32):
    """Custom type restStatChPktRemoteCongMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 4),
          ("normal", 1),
          ("red", 3),
          ("yellow", 2))
    )


_RestStatChPktRemoteCongMode_Type.__name__ = "Integer32"
_RestStatChPktRemoteCongMode_Object = MibTableColumn
restStatChPktRemoteCongMode = _RestStatChPktRemoteCongMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 14),
    _RestStatChPktRemoteCongMode_Type()
)
restStatChPktRemoteCongMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktRemoteCongMode.setStatus("mandatory")
_RestStatChPktCIRCredit_Type = Integer32
_RestStatChPktCIRCredit_Object = MibTableColumn
restStatChPktCIRCredit = _RestStatChPktCIRCredit_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 15),
    _RestStatChPktCIRCredit_Type()
)
restStatChPktCIRCredit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktCIRCredit.setStatus("mandatory")
_RestStatChPktEIRCredit_Type = Integer32
_RestStatChPktEIRCredit_Object = MibTableColumn
restStatChPktEIRCredit = _RestStatChPktEIRCredit_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 16),
    _RestStatChPktEIRCredit_Type()
)
restStatChPktEIRCredit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktEIRCredit.setStatus("mandatory")
_RestStatChPktFECNSent_Type = Counter32
_RestStatChPktFECNSent_Object = MibTableColumn
restStatChPktFECNSent = _RestStatChPktFECNSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 17),
    _RestStatChPktFECNSent_Type()
)
restStatChPktFECNSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktFECNSent.setStatus("mandatory")
_RestStatChPktBECNSent_Type = Counter32
_RestStatChPktBECNSent_Object = MibTableColumn
restStatChPktBECNSent = _RestStatChPktBECNSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 18),
    _RestStatChPktBECNSent_Type()
)
restStatChPktBECNSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBECNSent.setStatus("mandatory")
_RestStatChPktPortCIRSegSent_Type = Counter32
_RestStatChPktPortCIRSegSent_Object = MibTableColumn
restStatChPktPortCIRSegSent = _RestStatChPktPortCIRSegSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 19),
    _RestStatChPktPortCIRSegSent_Type()
)
restStatChPktPortCIRSegSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortCIRSegSent.setStatus("mandatory")
_RestStatChPktPortCIRSegRcv_Type = Counter32
_RestStatChPktPortCIRSegRcv_Object = MibTableColumn
restStatChPktPortCIRSegRcv = _RestStatChPktPortCIRSegRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 20),
    _RestStatChPktPortCIRSegRcv_Type()
)
restStatChPktPortCIRSegRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortCIRSegRcv.setStatus("mandatory")
_RestStatChPktPortEIRSegSent_Type = Counter32
_RestStatChPktPortEIRSegSent_Object = MibTableColumn
restStatChPktPortEIRSegSent = _RestStatChPktPortEIRSegSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 21),
    _RestStatChPktPortEIRSegSent_Type()
)
restStatChPktPortEIRSegSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortEIRSegSent.setStatus("mandatory")
_RestStatChPktPortEIRSegRcv_Type = Counter32
_RestStatChPktPortEIRSegRcv_Object = MibTableColumn
restStatChPktPortEIRSegRcv = _RestStatChPktPortEIRSegRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 22),
    _RestStatChPktPortEIRSegRcv_Type()
)
restStatChPktPortEIRSegRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortEIRSegRcv.setStatus("mandatory")
_RestStatChPktPortCIROctetSent_Type = Counter32
_RestStatChPktPortCIROctetSent_Object = MibTableColumn
restStatChPktPortCIROctetSent = _RestStatChPktPortCIROctetSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 23),
    _RestStatChPktPortCIROctetSent_Type()
)
restStatChPktPortCIROctetSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortCIROctetSent.setStatus("mandatory")
_RestStatChPktPortCIROctetRcv_Type = Counter32
_RestStatChPktPortCIROctetRcv_Object = MibTableColumn
restStatChPktPortCIROctetRcv = _RestStatChPktPortCIROctetRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 24),
    _RestStatChPktPortCIROctetRcv_Type()
)
restStatChPktPortCIROctetRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortCIROctetRcv.setStatus("mandatory")
_RestStatChPktPortEIROctetSent_Type = Counter32
_RestStatChPktPortEIROctetSent_Object = MibTableColumn
restStatChPktPortEIROctetSent = _RestStatChPktPortEIROctetSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 25),
    _RestStatChPktPortEIROctetSent_Type()
)
restStatChPktPortEIROctetSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortEIROctetSent.setStatus("mandatory")
_RestStatChPktPortEIROctetRcv_Type = Counter32
_RestStatChPktPortEIROctetRcv_Object = MibTableColumn
restStatChPktPortEIROctetRcv = _RestStatChPktPortEIROctetRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 26),
    _RestStatChPktPortEIROctetRcv_Type()
)
restStatChPktPortEIROctetRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortEIROctetRcv.setStatus("mandatory")
_RestStatChPktPortCIRSegDrops_Type = Counter32
_RestStatChPktPortCIRSegDrops_Object = MibTableColumn
restStatChPktPortCIRSegDrops = _RestStatChPktPortCIRSegDrops_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 27),
    _RestStatChPktPortCIRSegDrops_Type()
)
restStatChPktPortCIRSegDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortCIRSegDrops.setStatus("mandatory")
_RestStatChPktPortEIRSegDrops_Type = Counter32
_RestStatChPktPortEIRSegDrops_Object = MibTableColumn
restStatChPktPortEIRSegDrops = _RestStatChPktPortEIRSegDrops_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 28),
    _RestStatChPktPortEIRSegDrops_Type()
)
restStatChPktPortEIRSegDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortEIRSegDrops.setStatus("mandatory")
_RestStatChPktPortCIROctetDrops_Type = Counter32
_RestStatChPktPortCIROctetDrops_Object = MibTableColumn
restStatChPktPortCIROctetDrops = _RestStatChPktPortCIROctetDrops_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 29),
    _RestStatChPktPortCIROctetDrops_Type()
)
restStatChPktPortCIROctetDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortCIROctetDrops.setStatus("mandatory")
_RestStatChPktPortEIROctetDrops_Type = Counter32
_RestStatChPktPortEIROctetDrops_Object = MibTableColumn
restStatChPktPortEIROctetDrops = _RestStatChPktPortEIROctetDrops_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 30),
    _RestStatChPktPortEIROctetDrops_Type()
)
restStatChPktPortEIROctetDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktPortEIROctetDrops.setStatus("mandatory")
_RestStatChPktNetCIRSegSent_Type = Counter32
_RestStatChPktNetCIRSegSent_Object = MibTableColumn
restStatChPktNetCIRSegSent = _RestStatChPktNetCIRSegSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 31),
    _RestStatChPktNetCIRSegSent_Type()
)
restStatChPktNetCIRSegSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetCIRSegSent.setStatus("mandatory")
_RestStatChPktNetCIRSegRcv_Type = Counter32
_RestStatChPktNetCIRSegRcv_Object = MibTableColumn
restStatChPktNetCIRSegRcv = _RestStatChPktNetCIRSegRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 32),
    _RestStatChPktNetCIRSegRcv_Type()
)
restStatChPktNetCIRSegRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetCIRSegRcv.setStatus("mandatory")
_RestStatChPktNetEIRSegSent_Type = Counter32
_RestStatChPktNetEIRSegSent_Object = MibTableColumn
restStatChPktNetEIRSegSent = _RestStatChPktNetEIRSegSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 33),
    _RestStatChPktNetEIRSegSent_Type()
)
restStatChPktNetEIRSegSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetEIRSegSent.setStatus("mandatory")
_RestStatChPktNetEIRSegRcv_Type = Counter32
_RestStatChPktNetEIRSegRcv_Object = MibTableColumn
restStatChPktNetEIRSegRcv = _RestStatChPktNetEIRSegRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 34),
    _RestStatChPktNetEIRSegRcv_Type()
)
restStatChPktNetEIRSegRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetEIRSegRcv.setStatus("mandatory")
_RestStatChPktNetCIROctetSent_Type = Counter32
_RestStatChPktNetCIROctetSent_Object = MibTableColumn
restStatChPktNetCIROctetSent = _RestStatChPktNetCIROctetSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 35),
    _RestStatChPktNetCIROctetSent_Type()
)
restStatChPktNetCIROctetSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetCIROctetSent.setStatus("mandatory")
_RestStatChPktNetCIROctetRcv_Type = Counter32
_RestStatChPktNetCIROctetRcv_Object = MibTableColumn
restStatChPktNetCIROctetRcv = _RestStatChPktNetCIROctetRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 36),
    _RestStatChPktNetCIROctetRcv_Type()
)
restStatChPktNetCIROctetRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetCIROctetRcv.setStatus("mandatory")
_RestStatChPktNetEIROctetSent_Type = Counter32
_RestStatChPktNetEIROctetSent_Object = MibTableColumn
restStatChPktNetEIROctetSent = _RestStatChPktNetEIROctetSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 37),
    _RestStatChPktNetEIROctetSent_Type()
)
restStatChPktNetEIROctetSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetEIROctetSent.setStatus("mandatory")
_RestStatChPktNetEIROctetRcv_Type = Counter32
_RestStatChPktNetEIROctetRcv_Object = MibTableColumn
restStatChPktNetEIROctetRcv = _RestStatChPktNetEIROctetRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 38),
    _RestStatChPktNetEIROctetRcv_Type()
)
restStatChPktNetEIROctetRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetEIROctetRcv.setStatus("mandatory")
_RestStatChPktNetCIRSegDrops_Type = Counter32
_RestStatChPktNetCIRSegDrops_Object = MibTableColumn
restStatChPktNetCIRSegDrops = _RestStatChPktNetCIRSegDrops_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 39),
    _RestStatChPktNetCIRSegDrops_Type()
)
restStatChPktNetCIRSegDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetCIRSegDrops.setStatus("mandatory")
_RestStatChPktNetEIRSegDrops_Type = Counter32
_RestStatChPktNetEIRSegDrops_Object = MibTableColumn
restStatChPktNetEIRSegDrops = _RestStatChPktNetEIRSegDrops_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 40),
    _RestStatChPktNetEIRSegDrops_Type()
)
restStatChPktNetEIRSegDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetEIRSegDrops.setStatus("mandatory")
_RestStatChPktNetCIROctetDrops_Type = Counter32
_RestStatChPktNetCIROctetDrops_Object = MibTableColumn
restStatChPktNetCIROctetDrops = _RestStatChPktNetCIROctetDrops_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 41),
    _RestStatChPktNetCIROctetDrops_Type()
)
restStatChPktNetCIROctetDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetCIROctetDrops.setStatus("mandatory")
_RestStatChPktNetEIROctetDrops_Type = Counter32
_RestStatChPktNetEIROctetDrops_Object = MibTableColumn
restStatChPktNetEIROctetDrops = _RestStatChPktNetEIROctetDrops_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 42),
    _RestStatChPktNetEIROctetDrops_Type()
)
restStatChPktNetEIROctetDrops.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktNetEIROctetDrops.setStatus("mandatory")
_RestStatChPktSegEIRDiscard_Type = Counter32
_RestStatChPktSegEIRDiscard_Object = MibTableColumn
restStatChPktSegEIRDiscard = _RestStatChPktSegEIRDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 43),
    _RestStatChPktSegEIRDiscard_Type()
)
restStatChPktSegEIRDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSegEIRDiscard.setStatus("mandatory")
_RestStatChPktSegSeqDiscard_Type = Counter32
_RestStatChPktSegSeqDiscard_Object = MibTableColumn
restStatChPktSegSeqDiscard = _RestStatChPktSegSeqDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 44),
    _RestStatChPktSegSeqDiscard_Type()
)
restStatChPktSegSeqDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSegSeqDiscard.setStatus("mandatory")
_RestStatChPktSegCongPortDiscard_Type = Counter32
_RestStatChPktSegCongPortDiscard_Object = MibTableColumn
restStatChPktSegCongPortDiscard = _RestStatChPktSegCongPortDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 45),
    _RestStatChPktSegCongPortDiscard_Type()
)
restStatChPktSegCongPortDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSegCongPortDiscard.setStatus("mandatory")
_RestStatChPktSegCongNetDiscard_Type = Counter32
_RestStatChPktSegCongNetDiscard_Object = MibTableColumn
restStatChPktSegCongNetDiscard = _RestStatChPktSegCongNetDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 46),
    _RestStatChPktSegCongNetDiscard_Type()
)
restStatChPktSegCongNetDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSegCongNetDiscard.setStatus("mandatory")
_RestStatChPktSegExcDiscard_Type = Counter32
_RestStatChPktSegExcDiscard_Object = MibTableColumn
restStatChPktSegExcDiscard = _RestStatChPktSegExcDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 47),
    _RestStatChPktSegExcDiscard_Type()
)
restStatChPktSegExcDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSegExcDiscard.setStatus("mandatory")
_RestStatChPktSegUnderszDiscard_Type = Counter32
_RestStatChPktSegUnderszDiscard_Object = MibTableColumn
restStatChPktSegUnderszDiscard = _RestStatChPktSegUnderszDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 48),
    _RestStatChPktSegUnderszDiscard_Type()
)
restStatChPktSegUnderszDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSegUnderszDiscard.setStatus("mandatory")
_RestStatChPktSegV120ErrDiscard_Type = Counter32
_RestStatChPktSegV120ErrDiscard_Object = MibTableColumn
restStatChPktSegV120ErrDiscard = _RestStatChPktSegV120ErrDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 49),
    _RestStatChPktSegV120ErrDiscard_Type()
)
restStatChPktSegV120ErrDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSegV120ErrDiscard.setStatus("mandatory")
_RestStatChPktSegInacPortDiscard_Type = Counter32
_RestStatChPktSegInacPortDiscard_Object = MibTableColumn
restStatChPktSegInacPortDiscard = _RestStatChPktSegInacPortDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 50),
    _RestStatChPktSegInacPortDiscard_Type()
)
restStatChPktSegInacPortDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSegInacPortDiscard.setStatus("mandatory")
_RestStatChPktSegInacNetDiscard_Type = Counter32
_RestStatChPktSegInacNetDiscard_Object = MibTableColumn
restStatChPktSegInacNetDiscard = _RestStatChPktSegInacNetDiscard_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 1, 1, 51),
    _RestStatChPktSegInacNetDiscard_Type()
)
restStatChPktSegInacNetDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktSegInacNetDiscard.setStatus("mandatory")
_RestStatChPktBypTable_Object = MibTable
restStatChPktBypTable = _RestStatChPktBypTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2)
)
if mibBuilder.loadTexts:
    restStatChPktBypTable.setStatus("mandatory")
_RestStatChPktBypEntry_Object = MibTableRow
restStatChPktBypEntry = _RestStatChPktBypEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1)
)
restStatChPktBypEntry.setIndexNames(
    (0, "STMIB", "restStatChPktBypNodeID"),
    (0, "STMIB", "restStatChPktBypAddr"),
)
if mibBuilder.loadTexts:
    restStatChPktBypEntry.setStatus("mandatory")
_RestStatChPktBypNodeID_Type = NodeAddr
_RestStatChPktBypNodeID_Object = MibTableColumn
restStatChPktBypNodeID = _RestStatChPktBypNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 1),
    _RestStatChPktBypNodeID_Type()
)
restStatChPktBypNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypNodeID.setStatus("mandatory")
_RestStatChPktBypAddr_Type = ChannelAddr
_RestStatChPktBypAddr_Object = MibTableColumn
restStatChPktBypAddr = _RestStatChPktBypAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 2),
    _RestStatChPktBypAddr_Type()
)
restStatChPktBypAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypAddr.setStatus("mandatory")
_RestStatChPktBypSourceNodeID_Type = NodeAddr
_RestStatChPktBypSourceNodeID_Object = MibTableColumn
restStatChPktBypSourceNodeID = _RestStatChPktBypSourceNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 3),
    _RestStatChPktBypSourceNodeID_Type()
)
restStatChPktBypSourceNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypSourceNodeID.setStatus("mandatory")
_RestStatChPktBypSourceChAddr_Type = ChannelAddr
_RestStatChPktBypSourceChAddr_Object = MibTableColumn
restStatChPktBypSourceChAddr = _RestStatChPktBypSourceChAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 4),
    _RestStatChPktBypSourceChAddr_Type()
)
restStatChPktBypSourceChAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypSourceChAddr.setStatus("mandatory")
_RestStatChPktBypDestNodeID_Type = NodeAddr
_RestStatChPktBypDestNodeID_Object = MibTableColumn
restStatChPktBypDestNodeID = _RestStatChPktBypDestNodeID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 5),
    _RestStatChPktBypDestNodeID_Type()
)
restStatChPktBypDestNodeID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypDestNodeID.setStatus("mandatory")
_RestStatChPktBypDestChAddr_Type = ChannelAddr
_RestStatChPktBypDestChAddr_Object = MibTableColumn
restStatChPktBypDestChAddr = _RestStatChPktBypDestChAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 6),
    _RestStatChPktBypDestChAddr_Type()
)
restStatChPktBypDestChAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypDestChAddr.setStatus("mandatory")


class _RestStatChPktBypControlMode_Type(Integer32):
    """Custom type restStatChPktBypControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("clearStats", 3)
    )


_RestStatChPktBypControlMode_Type.__name__ = "Integer32"
_RestStatChPktBypControlMode_Object = MibTableColumn
restStatChPktBypControlMode = _RestStatChPktBypControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 7),
    _RestStatChPktBypControlMode_Type()
)
restStatChPktBypControlMode.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatChPktBypControlMode.setStatus("mandatory")
_RestStatChPktBypSegmentsToSrc_Type = Integer32
_RestStatChPktBypSegmentsToSrc_Object = MibTableColumn
restStatChPktBypSegmentsToSrc = _RestStatChPktBypSegmentsToSrc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 8),
    _RestStatChPktBypSegmentsToSrc_Type()
)
restStatChPktBypSegmentsToSrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypSegmentsToSrc.setStatus("mandatory")
_RestStatChPktBypSegmentsToDst_Type = Integer32
_RestStatChPktBypSegmentsToDst_Object = MibTableColumn
restStatChPktBypSegmentsToDst = _RestStatChPktBypSegmentsToDst_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 9),
    _RestStatChPktBypSegmentsToDst_Type()
)
restStatChPktBypSegmentsToDst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypSegmentsToDst.setStatus("mandatory")
_RestStatChPktBypYellowThreshold_Type = Integer32
_RestStatChPktBypYellowThreshold_Object = MibTableColumn
restStatChPktBypYellowThreshold = _RestStatChPktBypYellowThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 10),
    _RestStatChPktBypYellowThreshold_Type()
)
restStatChPktBypYellowThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypYellowThreshold.setStatus("mandatory")
_RestStatChPktBypRedThreshold_Type = Integer32
_RestStatChPktBypRedThreshold_Object = MibTableColumn
restStatChPktBypRedThreshold = _RestStatChPktBypRedThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 11),
    _RestStatChPktBypRedThreshold_Type()
)
restStatChPktBypRedThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypRedThreshold.setStatus("mandatory")
_RestStatChPktBypCritThreshold_Type = Integer32
_RestStatChPktBypCritThreshold_Object = MibTableColumn
restStatChPktBypCritThreshold = _RestStatChPktBypCritThreshold_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 12),
    _RestStatChPktBypCritThreshold_Type()
)
restStatChPktBypCritThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypCritThreshold.setStatus("mandatory")


class _RestStatChPktBypInCongMode_Type(Integer32):
    """Custom type restStatChPktBypInCongMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 4),
          ("normal", 1),
          ("red", 3),
          ("yellow", 2))
    )


_RestStatChPktBypInCongMode_Type.__name__ = "Integer32"
_RestStatChPktBypInCongMode_Object = MibTableColumn
restStatChPktBypInCongMode = _RestStatChPktBypInCongMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 13),
    _RestStatChPktBypInCongMode_Type()
)
restStatChPktBypInCongMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInCongMode.setStatus("mandatory")


class _RestStatChPktBypOutCongMode_Type(Integer32):
    """Custom type restStatChPktBypOutCongMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 4),
          ("normal", 1),
          ("red", 3),
          ("yellow", 2))
    )


_RestStatChPktBypOutCongMode_Type.__name__ = "Integer32"
_RestStatChPktBypOutCongMode_Object = MibTableColumn
restStatChPktBypOutCongMode = _RestStatChPktBypOutCongMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 14),
    _RestStatChPktBypOutCongMode_Type()
)
restStatChPktBypOutCongMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutCongMode.setStatus("mandatory")
_RestStatChPktBypInCIRSegSent_Type = Counter32
_RestStatChPktBypInCIRSegSent_Object = MibTableColumn
restStatChPktBypInCIRSegSent = _RestStatChPktBypInCIRSegSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 15),
    _RestStatChPktBypInCIRSegSent_Type()
)
restStatChPktBypInCIRSegSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInCIRSegSent.setStatus("mandatory")
_RestStatChPktBypInCIRSegRcv_Type = Counter32
_RestStatChPktBypInCIRSegRcv_Object = MibTableColumn
restStatChPktBypInCIRSegRcv = _RestStatChPktBypInCIRSegRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 16),
    _RestStatChPktBypInCIRSegRcv_Type()
)
restStatChPktBypInCIRSegRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInCIRSegRcv.setStatus("mandatory")
_RestStatChPktBypInEIRSegSent_Type = Counter32
_RestStatChPktBypInEIRSegSent_Object = MibTableColumn
restStatChPktBypInEIRSegSent = _RestStatChPktBypInEIRSegSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 17),
    _RestStatChPktBypInEIRSegSent_Type()
)
restStatChPktBypInEIRSegSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInEIRSegSent.setStatus("mandatory")
_RestStatChPktBypInEIRSegRcv_Type = Counter32
_RestStatChPktBypInEIRSegRcv_Object = MibTableColumn
restStatChPktBypInEIRSegRcv = _RestStatChPktBypInEIRSegRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 18),
    _RestStatChPktBypInEIRSegRcv_Type()
)
restStatChPktBypInEIRSegRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInEIRSegRcv.setStatus("mandatory")
_RestStatChPktBypInCIROctetSent_Type = Counter32
_RestStatChPktBypInCIROctetSent_Object = MibTableColumn
restStatChPktBypInCIROctetSent = _RestStatChPktBypInCIROctetSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 19),
    _RestStatChPktBypInCIROctetSent_Type()
)
restStatChPktBypInCIROctetSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInCIROctetSent.setStatus("mandatory")
_RestStatChPktBypInCIROctetRcv_Type = Counter32
_RestStatChPktBypInCIROctetRcv_Object = MibTableColumn
restStatChPktBypInCIROctetRcv = _RestStatChPktBypInCIROctetRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 20),
    _RestStatChPktBypInCIROctetRcv_Type()
)
restStatChPktBypInCIROctetRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInCIROctetRcv.setStatus("mandatory")
_RestStatChPktBypInEIROctetSent_Type = Counter32
_RestStatChPktBypInEIROctetSent_Object = MibTableColumn
restStatChPktBypInEIROctetSent = _RestStatChPktBypInEIROctetSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 21),
    _RestStatChPktBypInEIROctetSent_Type()
)
restStatChPktBypInEIROctetSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInEIROctetSent.setStatus("mandatory")
_RestStatChPktBypInEIROctetRcv_Type = Counter32
_RestStatChPktBypInEIROctetRcv_Object = MibTableColumn
restStatChPktBypInEIROctetRcv = _RestStatChPktBypInEIROctetRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 22),
    _RestStatChPktBypInEIROctetRcv_Type()
)
restStatChPktBypInEIROctetRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInEIROctetRcv.setStatus("mandatory")
_RestStatChPktBypInCIRSegDrop_Type = Counter32
_RestStatChPktBypInCIRSegDrop_Object = MibTableColumn
restStatChPktBypInCIRSegDrop = _RestStatChPktBypInCIRSegDrop_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 23),
    _RestStatChPktBypInCIRSegDrop_Type()
)
restStatChPktBypInCIRSegDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInCIRSegDrop.setStatus("mandatory")
_RestStatChPktBypInEIRSegDrop_Type = Counter32
_RestStatChPktBypInEIRSegDrop_Object = MibTableColumn
restStatChPktBypInEIRSegDrop = _RestStatChPktBypInEIRSegDrop_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 24),
    _RestStatChPktBypInEIRSegDrop_Type()
)
restStatChPktBypInEIRSegDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInEIRSegDrop.setStatus("mandatory")
_RestStatChPktBypInCIROctetDrop_Type = Counter32
_RestStatChPktBypInCIROctetDrop_Object = MibTableColumn
restStatChPktBypInCIROctetDrop = _RestStatChPktBypInCIROctetDrop_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 25),
    _RestStatChPktBypInCIROctetDrop_Type()
)
restStatChPktBypInCIROctetDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInCIROctetDrop.setStatus("mandatory")
_RestStatChPktBypInEIROctetDrop_Type = Counter32
_RestStatChPktBypInEIROctetDrop_Object = MibTableColumn
restStatChPktBypInEIROctetDrop = _RestStatChPktBypInEIROctetDrop_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 26),
    _RestStatChPktBypInEIROctetDrop_Type()
)
restStatChPktBypInEIROctetDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypInEIROctetDrop.setStatus("mandatory")
_RestStatChPktBypOutCIRSegSent_Type = Counter32
_RestStatChPktBypOutCIRSegSent_Object = MibTableColumn
restStatChPktBypOutCIRSegSent = _RestStatChPktBypOutCIRSegSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 27),
    _RestStatChPktBypOutCIRSegSent_Type()
)
restStatChPktBypOutCIRSegSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutCIRSegSent.setStatus("mandatory")
_RestStatChPktBypOutCIRSegRcv_Type = Counter32
_RestStatChPktBypOutCIRSegRcv_Object = MibTableColumn
restStatChPktBypOutCIRSegRcv = _RestStatChPktBypOutCIRSegRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 28),
    _RestStatChPktBypOutCIRSegRcv_Type()
)
restStatChPktBypOutCIRSegRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutCIRSegRcv.setStatus("mandatory")
_RestStatChPktBypOutEIRSegSent_Type = Counter32
_RestStatChPktBypOutEIRSegSent_Object = MibTableColumn
restStatChPktBypOutEIRSegSent = _RestStatChPktBypOutEIRSegSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 29),
    _RestStatChPktBypOutEIRSegSent_Type()
)
restStatChPktBypOutEIRSegSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutEIRSegSent.setStatus("mandatory")
_RestStatChPktBypOutEIRSegRcv_Type = Counter32
_RestStatChPktBypOutEIRSegRcv_Object = MibTableColumn
restStatChPktBypOutEIRSegRcv = _RestStatChPktBypOutEIRSegRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 30),
    _RestStatChPktBypOutEIRSegRcv_Type()
)
restStatChPktBypOutEIRSegRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutEIRSegRcv.setStatus("mandatory")
_RestStatChPktBypOutCIROctetSent_Type = Counter32
_RestStatChPktBypOutCIROctetSent_Object = MibTableColumn
restStatChPktBypOutCIROctetSent = _RestStatChPktBypOutCIROctetSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 31),
    _RestStatChPktBypOutCIROctetSent_Type()
)
restStatChPktBypOutCIROctetSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutCIROctetSent.setStatus("mandatory")
_RestStatChPktBypOutCIROctetRcv_Type = Counter32
_RestStatChPktBypOutCIROctetRcv_Object = MibTableColumn
restStatChPktBypOutCIROctetRcv = _RestStatChPktBypOutCIROctetRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 32),
    _RestStatChPktBypOutCIROctetRcv_Type()
)
restStatChPktBypOutCIROctetRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutCIROctetRcv.setStatus("mandatory")
_RestStatChPktBypOutEIROctetSent_Type = Counter32
_RestStatChPktBypOutEIROctetSent_Object = MibTableColumn
restStatChPktBypOutEIROctetSent = _RestStatChPktBypOutEIROctetSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 33),
    _RestStatChPktBypOutEIROctetSent_Type()
)
restStatChPktBypOutEIROctetSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutEIROctetSent.setStatus("mandatory")
_RestStatChPktBypOutEIROctetRcv_Type = Counter32
_RestStatChPktBypOutEIROctetRcv_Object = MibTableColumn
restStatChPktBypOutEIROctetRcv = _RestStatChPktBypOutEIROctetRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 34),
    _RestStatChPktBypOutEIROctetRcv_Type()
)
restStatChPktBypOutEIROctetRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutEIROctetRcv.setStatus("mandatory")
_RestStatChPktBypOutCIRSegDrop_Type = Counter32
_RestStatChPktBypOutCIRSegDrop_Object = MibTableColumn
restStatChPktBypOutCIRSegDrop = _RestStatChPktBypOutCIRSegDrop_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 35),
    _RestStatChPktBypOutCIRSegDrop_Type()
)
restStatChPktBypOutCIRSegDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutCIRSegDrop.setStatus("mandatory")
_RestStatChPktBypOutEIRSegDrop_Type = Counter32
_RestStatChPktBypOutEIRSegDrop_Object = MibTableColumn
restStatChPktBypOutEIRSegDrop = _RestStatChPktBypOutEIRSegDrop_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 36),
    _RestStatChPktBypOutEIRSegDrop_Type()
)
restStatChPktBypOutEIRSegDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutEIRSegDrop.setStatus("mandatory")
_RestStatChPktBypOutCIROctetDrop_Type = Counter32
_RestStatChPktBypOutCIROctetDrop_Object = MibTableColumn
restStatChPktBypOutCIROctetDrop = _RestStatChPktBypOutCIROctetDrop_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 37),
    _RestStatChPktBypOutCIROctetDrop_Type()
)
restStatChPktBypOutCIROctetDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutCIROctetDrop.setStatus("mandatory")
_RestStatChPktBypOutEIROctetDrop_Type = Counter32
_RestStatChPktBypOutEIROctetDrop_Object = MibTableColumn
restStatChPktBypOutEIROctetDrop = _RestStatChPktBypOutEIROctetDrop_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 38),
    _RestStatChPktBypOutEIROctetDrop_Type()
)
restStatChPktBypOutEIROctetDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypOutEIROctetDrop.setStatus("mandatory")
_RestStatChPktBypSegSrcEIRDisc_Type = Counter32
_RestStatChPktBypSegSrcEIRDisc_Object = MibTableColumn
restStatChPktBypSegSrcEIRDisc = _RestStatChPktBypSegSrcEIRDisc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 39),
    _RestStatChPktBypSegSrcEIRDisc_Type()
)
restStatChPktBypSegSrcEIRDisc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypSegSrcEIRDisc.setStatus("mandatory")
_RestStatChPktBypSegDstEIRDisc_Type = Counter32
_RestStatChPktBypSegDstEIRDisc_Object = MibTableColumn
restStatChPktBypSegDstEIRDisc = _RestStatChPktBypSegDstEIRDisc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 40),
    _RestStatChPktBypSegDstEIRDisc_Type()
)
restStatChPktBypSegDstEIRDisc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypSegDstEIRDisc.setStatus("mandatory")
_RestStatChPktBypSegSrcDstConDsc_Type = Counter32
_RestStatChPktBypSegSrcDstConDsc_Object = MibTableColumn
restStatChPktBypSegSrcDstConDsc = _RestStatChPktBypSegSrcDstConDsc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 41),
    _RestStatChPktBypSegSrcDstConDsc_Type()
)
restStatChPktBypSegSrcDstConDsc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypSegSrcDstConDsc.setStatus("mandatory")
_RestStatChPktBypSegDstSrcConDsc_Type = Counter32
_RestStatChPktBypSegDstSrcConDsc_Object = MibTableColumn
restStatChPktBypSegDstSrcConDsc = _RestStatChPktBypSegDstSrcConDsc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 42),
    _RestStatChPktBypSegDstSrcConDsc_Type()
)
restStatChPktBypSegDstSrcConDsc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypSegDstSrcConDsc.setStatus("mandatory")
_RestStatChPktBypSegInacSrcDisc_Type = Counter32
_RestStatChPktBypSegInacSrcDisc_Object = MibTableColumn
restStatChPktBypSegInacSrcDisc = _RestStatChPktBypSegInacSrcDisc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 43),
    _RestStatChPktBypSegInacSrcDisc_Type()
)
restStatChPktBypSegInacSrcDisc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypSegInacSrcDisc.setStatus("mandatory")
_RestStatChPktBypSegInacDstDisc_Type = Counter32
_RestStatChPktBypSegInacDstDisc_Object = MibTableColumn
restStatChPktBypSegInacDstDisc = _RestStatChPktBypSegInacDstDisc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 2, 2, 1, 44),
    _RestStatChPktBypSegInacDstDisc_Type()
)
restStatChPktBypSegInacDstDisc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatChPktBypSegInacDstDisc.setStatus("mandatory")
_RestStatInl_ObjectIdentity = ObjectIdentity
restStatInl = _RestStatInl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3)
)
_RestStatInlTable_Object = MibTable
restStatInlTable = _RestStatInlTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1)
)
if mibBuilder.loadTexts:
    restStatInlTable.setStatus("mandatory")
_RestStatInlEntry_Object = MibTableRow
restStatInlEntry = _RestStatInlEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1, 1)
)
restStatInlEntry.setIndexNames(
    (0, "STMIB", "restStatInlNumber"),
    (0, "STMIB", "restStatInlIndex"),
)
if mibBuilder.loadTexts:
    restStatInlEntry.setStatus("mandatory")


class _RestStatInlNumber_Type(Integer32):
    """Custom type restStatInlNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_RestStatInlNumber_Type.__name__ = "Integer32"
_RestStatInlNumber_Object = MibTableColumn
restStatInlNumber = _RestStatInlNumber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1, 1, 1),
    _RestStatInlNumber_Type()
)
restStatInlNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatInlNumber.setStatus("mandatory")


class _RestStatInlIndex_Type(Integer32):
    """Custom type restStatInlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_RestStatInlIndex_Type.__name__ = "Integer32"
_RestStatInlIndex_Object = MibTableColumn
restStatInlIndex = _RestStatInlIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1, 1, 2),
    _RestStatInlIndex_Type()
)
restStatInlIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatInlIndex.setStatus("mandatory")
_RestStatInlStartTime_Type = Integer32
_RestStatInlStartTime_Object = MibTableColumn
restStatInlStartTime = _RestStatInlStartTime_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1, 1, 3),
    _RestStatInlStartTime_Type()
)
restStatInlStartTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    restStatInlStartTime.setStatus("mandatory")
_RestStatInlPktOctetSent_Type = Integer32
_RestStatInlPktOctetSent_Object = MibTableColumn
restStatInlPktOctetSent = _RestStatInlPktOctetSent_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1, 1, 4),
    _RestStatInlPktOctetSent_Type()
)
restStatInlPktOctetSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatInlPktOctetSent.setStatus("mandatory")
_RestStatInlPktOctetRcv_Type = Integer32
_RestStatInlPktOctetRcv_Object = MibTableColumn
restStatInlPktOctetRcv = _RestStatInlPktOctetRcv_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 3, 1, 1, 5),
    _RestStatInlPktOctetRcv_Type()
)
restStatInlPktOctetRcv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatInlPktOctetRcv.setStatus("mandatory")
_RestStatAd10_ObjectIdentity = ObjectIdentity
restStatAd10 = _RestStatAd10_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4)
)
_RestStatAd10DataPortTable_Object = MibTable
restStatAd10DataPortTable = _RestStatAd10DataPortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1)
)
if mibBuilder.loadTexts:
    restStatAd10DataPortTable.setStatus("mandatory")
_RestStatAd10DataPortEntry_Object = MibTableRow
restStatAd10DataPortEntry = _RestStatAd10DataPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1)
)
restStatAd10DataPortEntry.setIndexNames(
    (0, "STMIB", "restStatAd10DataPortAddr"),
)
if mibBuilder.loadTexts:
    restStatAd10DataPortEntry.setStatus("mandatory")
_RestStatAd10DataPortAddr_Type = Ad10PortAddr
_RestStatAd10DataPortAddr_Object = MibTableColumn
restStatAd10DataPortAddr = _RestStatAd10DataPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 1),
    _RestStatAd10DataPortAddr_Type()
)
restStatAd10DataPortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortAddr.setStatus("mandatory")


class _RestStatAd10DataPortControl_Type(Integer32):
    """Custom type restStatAd10DataPortControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clearBertStats", 2),
          ("clearStats", 1))
    )


_RestStatAd10DataPortControl_Type.__name__ = "Integer32"
_RestStatAd10DataPortControl_Object = MibTableColumn
restStatAd10DataPortControl = _RestStatAd10DataPortControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 2),
    _RestStatAd10DataPortControl_Type()
)
restStatAd10DataPortControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortControl.setStatus("mandatory")
_RestStatAd10DataPortTxTotFrames_Type = Counter32
_RestStatAd10DataPortTxTotFrames_Object = MibTableColumn
restStatAd10DataPortTxTotFrames = _RestStatAd10DataPortTxTotFrames_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 3),
    _RestStatAd10DataPortTxTotFrames_Type()
)
restStatAd10DataPortTxTotFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortTxTotFrames.setStatus("mandatory")
_RestStatAd10DataPortRxTotFrames_Type = Counter32
_RestStatAd10DataPortRxTotFrames_Object = MibTableColumn
restStatAd10DataPortRxTotFrames = _RestStatAd10DataPortRxTotFrames_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 4),
    _RestStatAd10DataPortRxTotFrames_Type()
)
restStatAd10DataPortRxTotFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortRxTotFrames.setStatus("mandatory")
_RestStatAd10DataPortRxFrSeqErr_Type = Counter32
_RestStatAd10DataPortRxFrSeqErr_Object = MibTableColumn
restStatAd10DataPortRxFrSeqErr = _RestStatAd10DataPortRxFrSeqErr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 5),
    _RestStatAd10DataPortRxFrSeqErr_Type()
)
restStatAd10DataPortRxFrSeqErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortRxFrSeqErr.setStatus("mandatory")
_RestStatAd10DataPortRxFrHdrErr_Type = Counter32
_RestStatAd10DataPortRxFrHdrErr_Object = MibTableColumn
restStatAd10DataPortRxFrHdrErr = _RestStatAd10DataPortRxFrHdrErr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 6),
    _RestStatAd10DataPortRxFrHdrErr_Type()
)
restStatAd10DataPortRxFrHdrErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortRxFrHdrErr.setStatus("mandatory")
_RestStatAd10DataPortRxCongDisc_Type = Counter32
_RestStatAd10DataPortRxCongDisc_Object = MibTableColumn
restStatAd10DataPortRxCongDisc = _RestStatAd10DataPortRxCongDisc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 7),
    _RestStatAd10DataPortRxCongDisc_Type()
)
restStatAd10DataPortRxCongDisc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortRxCongDisc.setStatus("mandatory")
_RestStatAd10DataPortTxCongDisc_Type = Counter32
_RestStatAd10DataPortTxCongDisc_Object = MibTableColumn
restStatAd10DataPortTxCongDisc = _RestStatAd10DataPortTxCongDisc_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 8),
    _RestStatAd10DataPortTxCongDisc_Type()
)
restStatAd10DataPortTxCongDisc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortTxCongDisc.setStatus("mandatory")
_RestStatAd10DataPortRxBecnCount_Type = Counter32
_RestStatAd10DataPortRxBecnCount_Object = MibTableColumn
restStatAd10DataPortRxBecnCount = _RestStatAd10DataPortRxBecnCount_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 9),
    _RestStatAd10DataPortRxBecnCount_Type()
)
restStatAd10DataPortRxBecnCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortRxBecnCount.setStatus("mandatory")
_RestStatAd10DataPortTxBecnCount_Type = Counter32
_RestStatAd10DataPortTxBecnCount_Object = MibTableColumn
restStatAd10DataPortTxBecnCount = _RestStatAd10DataPortTxBecnCount_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 10),
    _RestStatAd10DataPortTxBecnCount_Type()
)
restStatAd10DataPortTxBecnCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortTxBecnCount.setStatus("mandatory")
_RestStatAd10DataPortTxSCCOvrRun_Type = Counter32
_RestStatAd10DataPortTxSCCOvrRun_Object = MibTableColumn
restStatAd10DataPortTxSCCOvrRun = _RestStatAd10DataPortTxSCCOvrRun_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 11),
    _RestStatAd10DataPortTxSCCOvrRun_Type()
)
restStatAd10DataPortTxSCCOvrRun.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortTxSCCOvrRun.setStatus("mandatory")
_RestStatAd10DataPortRxSCCUndRun_Type = Counter32
_RestStatAd10DataPortRxSCCUndRun_Object = MibTableColumn
restStatAd10DataPortRxSCCUndRun = _RestStatAd10DataPortRxSCCUndRun_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 12),
    _RestStatAd10DataPortRxSCCUndRun_Type()
)
restStatAd10DataPortRxSCCUndRun.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortRxSCCUndRun.setStatus("mandatory")
_RestStatAd10DataPortTxSCCAbort_Type = Counter32
_RestStatAd10DataPortTxSCCAbort_Object = MibTableColumn
restStatAd10DataPortTxSCCAbort = _RestStatAd10DataPortTxSCCAbort_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 13),
    _RestStatAd10DataPortTxSCCAbort_Type()
)
restStatAd10DataPortTxSCCAbort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortTxSCCAbort.setStatus("mandatory")
_RestStatAd10DataPortTxFrOvrSize_Type = Counter32
_RestStatAd10DataPortTxFrOvrSize_Object = MibTableColumn
restStatAd10DataPortTxFrOvrSize = _RestStatAd10DataPortTxFrOvrSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 14),
    _RestStatAd10DataPortTxFrOvrSize_Type()
)
restStatAd10DataPortTxFrOvrSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortTxFrOvrSize.setStatus("mandatory")
_RestStatAd10DataPortTxFifoFlCtl_Type = Counter32
_RestStatAd10DataPortTxFifoFlCtl_Object = MibTableColumn
restStatAd10DataPortTxFifoFlCtl = _RestStatAd10DataPortTxFifoFlCtl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 15),
    _RestStatAd10DataPortTxFifoFlCtl_Type()
)
restStatAd10DataPortTxFifoFlCtl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortTxFifoFlCtl.setStatus("mandatory")
_RestStatAd10DataPortRxMinSegHt_Type = Counter32
_RestStatAd10DataPortRxMinSegHt_Object = MibTableColumn
restStatAd10DataPortRxMinSegHt = _RestStatAd10DataPortRxMinSegHt_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 16),
    _RestStatAd10DataPortRxMinSegHt_Type()
)
restStatAd10DataPortRxMinSegHt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortRxMinSegHt.setStatus("mandatory")
_RestStatAd10DataPortBertSynLoss_Type = Counter32
_RestStatAd10DataPortBertSynLoss_Object = MibTableColumn
restStatAd10DataPortBertSynLoss = _RestStatAd10DataPortBertSynLoss_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 17),
    _RestStatAd10DataPortBertSynLoss_Type()
)
restStatAd10DataPortBertSynLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortBertSynLoss.setStatus("mandatory")
_RestStatAd10DataPortBertByteCnt_Type = Counter32
_RestStatAd10DataPortBertByteCnt_Object = MibTableColumn
restStatAd10DataPortBertByteCnt = _RestStatAd10DataPortBertByteCnt_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 18),
    _RestStatAd10DataPortBertByteCnt_Type()
)
restStatAd10DataPortBertByteCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortBertByteCnt.setStatus("mandatory")
_RestStatAd10DataPortBertBitErr_Type = Counter32
_RestStatAd10DataPortBertBitErr_Object = MibTableColumn
restStatAd10DataPortBertBitErr = _RestStatAd10DataPortBertBitErr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 1, 1, 19),
    _RestStatAd10DataPortBertBitErr_Type()
)
restStatAd10DataPortBertBitErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10DataPortBertBitErr.setStatus("mandatory")
_RestStatAd10VoicePortTable_Object = MibTable
restStatAd10VoicePortTable = _RestStatAd10VoicePortTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2)
)
if mibBuilder.loadTexts:
    restStatAd10VoicePortTable.setStatus("mandatory")
_RestStatAd10VoicePortEntry_Object = MibTableRow
restStatAd10VoicePortEntry = _RestStatAd10VoicePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1)
)
restStatAd10VoicePortEntry.setIndexNames(
    (0, "STMIB", "restStatAd10VoicePortAddr"),
)
if mibBuilder.loadTexts:
    restStatAd10VoicePortEntry.setStatus("mandatory")
_RestStatAd10VoicePortAddr_Type = Ad10PortAddr
_RestStatAd10VoicePortAddr_Object = MibTableColumn
restStatAd10VoicePortAddr = _RestStatAd10VoicePortAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1, 1),
    _RestStatAd10VoicePortAddr_Type()
)
restStatAd10VoicePortAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10VoicePortAddr.setStatus("mandatory")


class _RestStatAd10VoicePortControl_Type(Integer32):
    """Custom type restStatAd10VoicePortControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clearBertStats", 2),
          ("clearStats", 1))
    )


_RestStatAd10VoicePortControl_Type.__name__ = "Integer32"
_RestStatAd10VoicePortControl_Object = MibTableColumn
restStatAd10VoicePortControl = _RestStatAd10VoicePortControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1, 2),
    _RestStatAd10VoicePortControl_Type()
)
restStatAd10VoicePortControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatAd10VoicePortControl.setStatus("mandatory")
_RestStatAd10VoicePortHber_Type = Counter32
_RestStatAd10VoicePortHber_Object = MibTableColumn
restStatAd10VoicePortHber = _RestStatAd10VoicePortHber_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1, 3),
    _RestStatAd10VoicePortHber_Type()
)
restStatAd10VoicePortHber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10VoicePortHber.setStatus("mandatory")
_RestStatAd10VoicePortSyncLoss_Type = Counter32
_RestStatAd10VoicePortSyncLoss_Object = MibTableColumn
restStatAd10VoicePortSyncLoss = _RestStatAd10VoicePortSyncLoss_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1, 4),
    _RestStatAd10VoicePortSyncLoss_Type()
)
restStatAd10VoicePortSyncLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10VoicePortSyncLoss.setStatus("mandatory")
_RestStatAd10VoicePortBertByte_Type = Counter32
_RestStatAd10VoicePortBertByte_Object = MibTableColumn
restStatAd10VoicePortBertByte = _RestStatAd10VoicePortBertByte_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1, 5),
    _RestStatAd10VoicePortBertByte_Type()
)
restStatAd10VoicePortBertByte.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10VoicePortBertByte.setStatus("mandatory")
_RestStatAd10VoicePortBertBitErr_Type = Counter32
_RestStatAd10VoicePortBertBitErr_Object = MibTableColumn
restStatAd10VoicePortBertBitErr = _RestStatAd10VoicePortBertBitErr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 2, 1, 6),
    _RestStatAd10VoicePortBertBitErr_Type()
)
restStatAd10VoicePortBertBitErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10VoicePortBertBitErr.setStatus("mandatory")
_RestStatAd10PktBandTable_Object = MibTable
restStatAd10PktBandTable = _RestStatAd10PktBandTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3)
)
if mibBuilder.loadTexts:
    restStatAd10PktBandTable.setStatus("mandatory")
_RestStatAd10PktBandEntry_Object = MibTableRow
restStatAd10PktBandEntry = _RestStatAd10PktBandEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1)
)
restStatAd10PktBandEntry.setIndexNames(
    (0, "STMIB", "restStatAd10PktBandAddr"),
)
if mibBuilder.loadTexts:
    restStatAd10PktBandEntry.setStatus("mandatory")
_RestStatAd10PktBandAddr_Type = Ad10PortAddr
_RestStatAd10PktBandAddr_Object = MibTableColumn
restStatAd10PktBandAddr = _RestStatAd10PktBandAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 1),
    _RestStatAd10PktBandAddr_Type()
)
restStatAd10PktBandAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10PktBandAddr.setStatus("mandatory")


class _RestStatAd10PktBandControl_Type(Integer32):
    """Custom type restStatAd10PktBandControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("clearStats", 1)
    )


_RestStatAd10PktBandControl_Type.__name__ = "Integer32"
_RestStatAd10PktBandControl_Object = MibTableColumn
restStatAd10PktBandControl = _RestStatAd10PktBandControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 2),
    _RestStatAd10PktBandControl_Type()
)
restStatAd10PktBandControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatAd10PktBandControl.setStatus("mandatory")
_RestStatAd10PktBandTxTotFrames_Type = Counter32
_RestStatAd10PktBandTxTotFrames_Object = MibTableColumn
restStatAd10PktBandTxTotFrames = _RestStatAd10PktBandTxTotFrames_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 3),
    _RestStatAd10PktBandTxTotFrames_Type()
)
restStatAd10PktBandTxTotFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10PktBandTxTotFrames.setStatus("mandatory")
_RestStatAd10PktBandRxTotFrames_Type = Counter32
_RestStatAd10PktBandRxTotFrames_Object = MibTableColumn
restStatAd10PktBandRxTotFrames = _RestStatAd10PktBandRxTotFrames_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 4),
    _RestStatAd10PktBandRxTotFrames_Type()
)
restStatAd10PktBandRxTotFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10PktBandRxTotFrames.setStatus("mandatory")
_RestStatAd10PktBandRxFrErr_Type = Counter32
_RestStatAd10PktBandRxFrErr_Object = MibTableColumn
restStatAd10PktBandRxFrErr = _RestStatAd10PktBandRxFrErr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 5),
    _RestStatAd10PktBandRxFrErr_Type()
)
restStatAd10PktBandRxFrErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10PktBandRxFrErr.setStatus("mandatory")
_RestStatAd10PktBandRxSCCOvrRun_Type = Counter32
_RestStatAd10PktBandRxSCCOvrRun_Object = MibTableColumn
restStatAd10PktBandRxSCCOvrRun = _RestStatAd10PktBandRxSCCOvrRun_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 6),
    _RestStatAd10PktBandRxSCCOvrRun_Type()
)
restStatAd10PktBandRxSCCOvrRun.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10PktBandRxSCCOvrRun.setStatus("mandatory")
_RestStatAd10PktBandTxSCCUndRun_Type = Counter32
_RestStatAd10PktBandTxSCCUndRun_Object = MibTableColumn
restStatAd10PktBandTxSCCUndRun = _RestStatAd10PktBandTxSCCUndRun_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 7),
    _RestStatAd10PktBandTxSCCUndRun_Type()
)
restStatAd10PktBandTxSCCUndRun.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10PktBandTxSCCUndRun.setStatus("mandatory")
_RestStatAd10PktBandRxSCCAbort_Type = Counter32
_RestStatAd10PktBandRxSCCAbort_Object = MibTableColumn
restStatAd10PktBandRxSCCAbort = _RestStatAd10PktBandRxSCCAbort_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 8),
    _RestStatAd10PktBandRxSCCAbort_Type()
)
restStatAd10PktBandRxSCCAbort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10PktBandRxSCCAbort.setStatus("mandatory")
_RestStatAd10PktBandRxInvDlci_Type = Counter32
_RestStatAd10PktBandRxInvDlci_Object = MibTableColumn
restStatAd10PktBandRxInvDlci = _RestStatAd10PktBandRxInvDlci_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 9),
    _RestStatAd10PktBandRxInvDlci_Type()
)
restStatAd10PktBandRxInvDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10PktBandRxInvDlci.setStatus("mandatory")
_RestStatAd10PktBandRxFrOvrSize_Type = Counter32
_RestStatAd10PktBandRxFrOvrSize_Object = MibTableColumn
restStatAd10PktBandRxFrOvrSize = _RestStatAd10PktBandRxFrOvrSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 10),
    _RestStatAd10PktBandRxFrOvrSize_Type()
)
restStatAd10PktBandRxFrOvrSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10PktBandRxFrOvrSize.setStatus("mandatory")
_RestStatAd10PktBandRxCrcErr_Type = Counter32
_RestStatAd10PktBandRxCrcErr_Object = MibTableColumn
restStatAd10PktBandRxCrcErr = _RestStatAd10PktBandRxCrcErr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 4, 3, 1, 11),
    _RestStatAd10PktBandRxCrcErr_Type()
)
restStatAd10PktBandRxCrcErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatAd10PktBandRxCrcErr.setStatus("mandatory")
_RestStatModule_ObjectIdentity = ObjectIdentity
restStatModule = _RestStatModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5)
)
_RestStatModDsmTable_Object = MibTable
restStatModDsmTable = _RestStatModDsmTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5, 1)
)
if mibBuilder.loadTexts:
    restStatModDsmTable.setStatus("mandatory")
_RestStatModDsmEntry_Object = MibTableRow
restStatModDsmEntry = _RestStatModDsmEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5, 1, 1)
)
restStatModDsmEntry.setIndexNames(
    (0, "STMIB", "restStatModDsmAddr"),
)
if mibBuilder.loadTexts:
    restStatModDsmEntry.setStatus("mandatory")
_RestStatModDsmAddr_Type = SlotAddr
_RestStatModDsmAddr_Object = MibTableColumn
restStatModDsmAddr = _RestStatModDsmAddr_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5, 1, 1, 1),
    _RestStatModDsmAddr_Type()
)
restStatModDsmAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatModDsmAddr.setStatus("mandatory")


class _RestStatModDsmControlMode_Type(Integer32):
    """Custom type restStatModDsmControlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("clearStats", 3)
    )


_RestStatModDsmControlMode_Type.__name__ = "Integer32"
_RestStatModDsmControlMode_Object = MibTableColumn
restStatModDsmControlMode = _RestStatModDsmControlMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5, 1, 1, 2),
    _RestStatModDsmControlMode_Type()
)
restStatModDsmControlMode.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    restStatModDsmControlMode.setStatus("mandatory")
_RestStatModDsmRejectOrigCalls_Type = Counter32
_RestStatModDsmRejectOrigCalls_Object = MibTableColumn
restStatModDsmRejectOrigCalls = _RestStatModDsmRejectOrigCalls_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5, 1, 1, 3),
    _RestStatModDsmRejectOrigCalls_Type()
)
restStatModDsmRejectOrigCalls.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatModDsmRejectOrigCalls.setStatus("mandatory")
_RestStatModDsmRejectTermCalls_Type = Counter32
_RestStatModDsmRejectTermCalls_Object = MibTableColumn
restStatModDsmRejectTermCalls = _RestStatModDsmRejectTermCalls_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 2, 3, 5, 1, 1, 4),
    _RestStatModDsmRejectTermCalls_Type()
)
restStatModDsmRejectTermCalls.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    restStatModDsmRejectTermCalls.setStatus("mandatory")
_Alarm_ObjectIdentity = ObjectIdentity
alarm = _Alarm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3)
)
_AlPartitionHeader_ObjectIdentity = ObjectIdentity
alPartitionHeader = _AlPartitionHeader_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 1)
)


class _AlPartitionControl_Type(Integer32):
    """Custom type alPartitionControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalidateCRC", 2),
          ("validateCRC", 1))
    )


_AlPartitionControl_Type.__name__ = "Integer32"
_AlPartitionControl_Object = MibScalar
alPartitionControl = _AlPartitionControl_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 1, 1),
    _AlPartitionControl_Type()
)
alPartitionControl.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    alPartitionControl.setStatus("mandatory")


class _AlPartitionCRCCheck_Type(Integer32):
    """Custom type alPartitionCRCCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("succeed", 1))
    )


_AlPartitionCRCCheck_Type.__name__ = "Integer32"
_AlPartitionCRCCheck_Object = MibScalar
alPartitionCRCCheck = _AlPartitionCRCCheck_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 1, 2),
    _AlPartitionCRCCheck_Type()
)
alPartitionCRCCheck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alPartitionCRCCheck.setStatus("mandatory")


class _AlPartitionFlushMode_Type(Integer32):
    """Custom type alPartitionFlushMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AlPartitionFlushMode_Type.__name__ = "Integer32"
_AlPartitionFlushMode_Object = MibScalar
alPartitionFlushMode = _AlPartitionFlushMode_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 1, 3),
    _AlPartitionFlushMode_Type()
)
alPartitionFlushMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alPartitionFlushMode.setStatus("mandatory")
_AlSystemProfile_ObjectIdentity = ObjectIdentity
alSystemProfile = _AlSystemProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 2)
)


class _AlSysLogSize_Type(OctetString):
    """Custom type alSysLogSize based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(32, 32),
    )


_AlSysLogSize_Type.__name__ = "OctetString"
_AlSysLogSize_Object = MibScalar
alSysLogSize = _AlSysLogSize_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 2, 1),
    _AlSysLogSize_Type()
)
alSysLogSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alSysLogSize.setStatus("mandatory")
_AlSysLogSizeAvailable_Type = Integer32
_AlSysLogSizeAvailable_Object = MibScalar
alSysLogSizeAvailable = _AlSysLogSizeAvailable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 2, 2),
    _AlSysLogSizeAvailable_Type()
)
alSysLogSizeAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alSysLogSizeAvailable.setStatus("mandatory")
_AlLogTable_Object = MibTable
alLogTable = _AlLogTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3)
)
if mibBuilder.loadTexts:
    alLogTable.setStatus("mandatory")
_AlLogEntry_Object = MibTableRow
alLogEntry = _AlLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1)
)
alLogEntry.setIndexNames(
    (0, "STMIB", "alLogIndex"),
)
if mibBuilder.loadTexts:
    alLogEntry.setStatus("mandatory")


class _AlLogIndex_Type(Integer32):
    """Custom type alLogIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_AlLogIndex_Type.__name__ = "Integer32"
_AlLogIndex_Object = MibTableColumn
alLogIndex = _AlLogIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 1),
    _AlLogIndex_Type()
)
alLogIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alLogIndex.setStatus("mandatory")


class _AlLogDiagnostics_Type(Integer32):
    """Custom type alLogDiagnostics based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("clearAlarmLog", 3),
          ("clearOverflow", 5),
          ("disableLogging", 4),
          ("disableNotification", 2),
          ("enableNotification", 1))
    )


_AlLogDiagnostics_Type.__name__ = "Integer32"
_AlLogDiagnostics_Object = MibTableColumn
alLogDiagnostics = _AlLogDiagnostics_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 2),
    _AlLogDiagnostics_Type()
)
alLogDiagnostics.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    alLogDiagnostics.setStatus("mandatory")


class _AlLogState_Type(Integer32):
    """Custom type alLogState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("loggingDisabled", 5),
          ("notificationOff", 2),
          ("notificationOffWoverflow", 4),
          ("notificationOn", 1),
          ("notificationOnWoverflow", 3))
    )


_AlLogState_Type.__name__ = "Integer32"
_AlLogState_Object = MibTableColumn
alLogState = _AlLogState_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 3),
    _AlLogState_Type()
)
alLogState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alLogState.setStatus("mandatory")
_AlLogTotalEntries_Type = Integer32
_AlLogTotalEntries_Object = MibTableColumn
alLogTotalEntries = _AlLogTotalEntries_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 4),
    _AlLogTotalEntries_Type()
)
alLogTotalEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alLogTotalEntries.setStatus("mandatory")
_AlLogAvailableEntries_Type = Integer32
_AlLogAvailableEntries_Object = MibTableColumn
alLogAvailableEntries = _AlLogAvailableEntries_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 5),
    _AlLogAvailableEntries_Type()
)
alLogAvailableEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alLogAvailableEntries.setStatus("mandatory")


class _AlLogNotificationList_Type(OctetString):
    """Custom type alLogNotificationList based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(32, 32),
    )


_AlLogNotificationList_Type.__name__ = "OctetString"
_AlLogNotificationList_Object = MibTableColumn
alLogNotificationList = _AlLogNotificationList_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 6),
    _AlLogNotificationList_Type()
)
alLogNotificationList.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alLogNotificationList.setStatus("mandatory")
_AlLogClearEntries_Type = Integer32
_AlLogClearEntries_Object = MibTableColumn
alLogClearEntries = _AlLogClearEntries_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 7),
    _AlLogClearEntries_Type()
)
alLogClearEntries.setMaxAccess("write-only")
if mibBuilder.loadTexts:
    alLogClearEntries.setStatus("mandatory")


class _AlLogPartitionID_Type(Integer32):
    """Custom type alLogPartitionID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1023),
    )


_AlLogPartitionID_Type.__name__ = "Integer32"
_AlLogPartitionID_Object = MibTableColumn
alLogPartitionID = _AlLogPartitionID_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 3, 1, 8),
    _AlLogPartitionID_Type()
)
alLogPartitionID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alLogPartitionID.setStatus("mandatory")
_AlLogRecTable_Object = MibTable
alLogRecTable = _AlLogRecTable_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 4)
)
if mibBuilder.loadTexts:
    alLogRecTable.setStatus("mandatory")
_AlLogRecEntry_Object = MibTableRow
alLogRecEntry = _AlLogRecEntry_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 4, 1)
)
alLogRecEntry.setIndexNames(
    (0, "STMIB", "alLogRecIndex"),
)
if mibBuilder.loadTexts:
    alLogRecEntry.setStatus("mandatory")
_AlLogRecIndex_Type = RecordIndex
_AlLogRecIndex_Object = MibTableColumn
alLogRecIndex = _AlLogRecIndex_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 4, 1, 1),
    _AlLogRecIndex_Type()
)
alLogRecIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alLogRecIndex.setStatus("mandatory")
_AlLogRecContents_Type = AlarmRecord
_AlLogRecContents_Object = MibTableColumn
alLogRecContents = _AlLogRecContents_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 4, 1, 2),
    _AlLogRecContents_Type()
)
alLogRecContents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alLogRecContents.setStatus("mandatory")


class _AlTrapContents_Type(OctetString):
    """Custom type alTrapContents based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(10, 10),
    )


_AlTrapContents_Type.__name__ = "OctetString"
_AlTrapContents_Object = MibScalar
alTrapContents = _AlTrapContents_Object(
    (1, 3, 6, 1, 4, 1, 16, 101, 1, 3, 5),
    _AlTrapContents_Type()
)
alTrapContents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    alTrapContents.setStatus("mandatory")

# Managed Objects groups


# Notification objects


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "STMIB",
    **{"NodeAddr": NodeAddr,
       "NestAddr": NestAddr,
       "SlotAddr": SlotAddr,
       "PortAddr": PortAddr,
       "Ad10PortAddr": Ad10PortAddr,
       "AsmX50CkAddr": AsmX50CkAddr,
       "RtmAdPortAddr": RtmAdPortAddr,
       "BundleAddr": BundleAddr,
       "ChannelAddr": ChannelAddr,
       "ChannelStatusAddr": ChannelStatusAddr,
       "RecordIndex": RecordIndex,
       "AlarmRecord": AlarmRecord,
       "Link2Index": Link2Index,
       "Link2Addr": Link2Addr,
       "timeplex": timeplex,
       "synchrony": synchrony,
       "st50": st50,
       "security": security,
       "scPartitionHeader": scPartitionHeader,
       "scPartitionControl": scPartitionControl,
       "scPartitionCRCCheck": scPartitionCRCCheck,
       "scPartitionFlushMode": scPartitionFlushMode,
       "scSystemProfile": scSystemProfile,
       "scSysNodeUpdate": scSysNodeUpdate,
       "scSysNodeControl": scSysNodeControl,
       "scSysNodeNumber": scSysNodeNumber,
       "scSysNodeDate": scSysNodeDate,
       "scSysNodeTime": scSysNodeTime,
       "scSysNodeType": scSysNodeType,
       "scSysNodePartitionID": scSysNodePartitionID,
       "scSysNodeMasterClockPriority": scSysNodeMasterClockPriority,
       "scSysNodeMasterClockList": scSysNodeMasterClockList,
       "scSysNodeDatabaseVersion": scSysNodeDatabaseVersion,
       "scSysNodeDefaultRoot": scSysNodeDefaultRoot,
       "scSysNodeCpiProfileUpdate": scSysNodeCpiProfileUpdate,
       "scSysNodeCpiPasswordControl": scSysNodeCpiPasswordControl,
       "scSysNodeCpiPasswordLevel1": scSysNodeCpiPasswordLevel1,
       "scSysNodeCpiPasswordLevel2": scSysNodeCpiPasswordLevel2,
       "scSysNodeCpiPasswordLevel3": scSysNodeCpiPasswordLevel3,
       "scSysNodeCpiSessionTimeOut": scSysNodeCpiSessionTimeOut,
       "scSysNodeCpiMaxPassthruSessions": scSysNodeCpiMaxPassthruSessions,
       "scRootAccessTable": scRootAccessTable,
       "scRootAccessEntry": scRootAccessEntry,
       "scRootAccessIndex": scRootAccessIndex,
       "scRootAccessControlMode": scRootAccessControlMode,
       "scRootAccessIp": scRootAccessIp,
       "scNodeAccessTable": scNodeAccessTable,
       "scNodeAccessEntry": scNodeAccessEntry,
       "scNodeAccessIndex": scNodeAccessIndex,
       "scNodeAccessControlMode": scNodeAccessControlMode,
       "scNodeAccessUpdate": scNodeAccessUpdate,
       "scNodeAccessRootList": scNodeAccessRootList,
       "scNodeAccessChPrfList": scNodeAccessChPrfList,
       "scNodeAccessThroughput": scNodeAccessThroughput,
       "scNodeAccessVoicePrfList": scNodeAccessVoicePrfList,
       "scNodeAccessLink2TraEntriesMin": scNodeAccessLink2TraEntriesMin,
       "scNodeAccessLink2TraEntriesMax": scNodeAccessLink2TraEntriesMax,
       "scCommunityTable": scCommunityTable,
       "scCommunityEntry": scCommunityEntry,
       "scCommunityIndex": scCommunityIndex,
       "scCommunityControlMode": scCommunityControlMode,
       "scCommunityName": scCommunityName,
       "scCommunityscMap": scCommunityscMap,
       "scCommunityrecfMap": scCommunityrecfMap,
       "scCommunityrestMap": scCommunityrestMap,
       "scCommunityrestatisticsMap": scCommunityrestatisticsMap,
       "scCommunityalMap": scCommunityalMap,
       "scTrapAccessTable": scTrapAccessTable,
       "scTrapAccessEntry": scTrapAccessEntry,
       "scTrapAccessIndex": scTrapAccessIndex,
       "scTrapAccessControlMode": scTrapAccessControlMode,
       "scTrapAccessIp": scTrapAccessIp,
       "scChProfileTable": scChProfileTable,
       "scChProfileEntry": scChProfileEntry,
       "scChProfileIndex": scChProfileIndex,
       "scChProfileControlMode": scChProfileControlMode,
       "scChProfileCostType": scChProfileCostType,
       "scChProfileMaxCost": scChProfileMaxCost,
       "scChProfilePriority": scChProfilePriority,
       "scChProfileEncryption": scChProfileEncryption,
       "scChProfileMaxSatHop": scChProfileMaxSatHop,
       "scChProfileErrPerformReq": scChProfileErrPerformReq,
       "scChProfileINLGroup": scChProfileINLGroup,
       "scChProfileOverrideMode": scChProfileOverrideMode,
       "scChProfileRetryTimer": scChProfileRetryTimer,
       "scChProfileInfoAlarmGen": scChProfileInfoAlarmGen,
       "scSoftloadEntry": scSoftloadEntry,
       "scSoftloadControl": scSoftloadControl,
       "scSoftloadFileName": scSoftloadFileName,
       "scSoftloadDirectoryName": scSoftloadDirectoryName,
       "scSoftloadDestPort": scSoftloadDestPort,
       "scSoftloadSoftwareType": scSoftloadSoftwareType,
       "scSoftloadEmsNodeID": scSoftloadEmsNodeID,
       "scSoftloadSourceEmsIp": scSoftloadSourceEmsIp,
       "scSoftloadTimeout": scSoftloadTimeout,
       "scCpiAccess": scCpiAccess,
       "scCpiControl": scCpiControl,
       "scCpiControlUpdate": scCpiControlUpdate,
       "scCpiSpeed": scCpiSpeed,
       "scCpiDataBits": scCpiDataBits,
       "scCpiParity": scCpiParity,
       "scCpiStopBits": scCpiStopBits,
       "scModemAccess": scModemAccess,
       "scModemControl": scModemControl,
       "scModemControlUpdate": scModemControlUpdate,
       "scModemSpeed": scModemSpeed,
       "scModemDataBits": scModemDataBits,
       "scModemParity": scModemParity,
       "scModemStopBits": scModemStopBits,
       "scModemControlLead": scModemControlLead,
       "scIpAccess": scIpAccess,
       "scIpProfile": scIpProfile,
       "scIpControl": scIpControl,
       "scIpControlUpdate": scIpControlUpdate,
       "scIpWANIpAddress": scIpWANIpAddress,
       "scIpSubNetworkMask": scIpSubNetworkMask,
       "scIpRootGatewayIp": scIpRootGatewayIp,
       "scIpRootGatewayMask": scIpRootGatewayMask,
       "scIpRootGatewayEthernet": scIpRootGatewayEthernet,
       "scIpDefaultExtGateway": scIpDefaultExtGateway,
       "scIpSlipAddress": scIpSlipAddress,
       "scIpSlipMask": scIpSlipMask,
       "scIpOnlineSubnetTable": scIpOnlineSubnetTable,
       "scIpOnlineSubnetEntry": scIpOnlineSubnetEntry,
       "scIpOnlineSubnetIndex": scIpOnlineSubnetIndex,
       "scIpOnlineSubnetAddr": scIpOnlineSubnetAddr,
       "scIpOfflineSubnetTable": scIpOfflineSubnetTable,
       "scIpOfflineSubnetEntry": scIpOfflineSubnetEntry,
       "scIpOfflineSubnetIndex": scIpOfflineSubnetIndex,
       "scIpOfflineSubnetControl": scIpOfflineSubnetControl,
       "scIpOfflineSubnetAddr": scIpOfflineSubnetAddr,
       "scLgmStaticRouteTable": scLgmStaticRouteTable,
       "scLgmStaticRouteEntry": scLgmStaticRouteEntry,
       "scLgmStaticRouteNode": scLgmStaticRouteNode,
       "scLgmStaticRouteIndex": scLgmStaticRouteIndex,
       "scLgmStaticRouteStartMode": scLgmStaticRouteStartMode,
       "scLgmStaticRouteNextIafHop": scLgmStaticRouteNextIafHop,
       "scLgmStaticRouteLink2GwyNode": scLgmStaticRouteLink2GwyNode,
       "scLgmStaticRoutePathDelay": scLgmStaticRoutePathDelay,
       "scVoicePrf": scVoicePrf,
       "scVoicePrfNetTable": scVoicePrfNetTable,
       "scVoicePrfNetEntry": scVoicePrfNetEntry,
       "scVoicePrfNetIndex": scVoicePrfNetIndex,
       "scVoicePrfNetControlMode": scVoicePrfNetControlMode,
       "scVoicePrfNetCompressMode": scVoicePrfNetCompressMode,
       "scVoicePrfNetSpeed": scVoicePrfNetSpeed,
       "scVoicePrfNetDTMFRelay": scVoicePrfNetDTMFRelay,
       "scVoicePrfNetFaxRelay": scVoicePrfNetFaxRelay,
       "scVoicePrfNetFaxNSFMode": scVoicePrfNetFaxNSFMode,
       "scVoicePrfNetVocoderEnable": scVoicePrfNetVocoderEnable,
       "scVoicePrfNetDataMode": scVoicePrfNetDataMode,
       "scVoicePrfNetSignalingType": scVoicePrfNetSignalingType,
       "scVoicePrfNetSigIdlePttrn": scVoicePrfNetSigIdlePttrn,
       "scVoicePrfNodeTable": scVoicePrfNodeTable,
       "scVoicePrfNodeEntry": scVoicePrfNodeEntry,
       "scVoicePrfNodeIndex": scVoicePrfNodeIndex,
       "scVoicePrfNodeRdnGrpId": scVoicePrfNodeRdnGrpId,
       "scVoicePrfNodeTxAudSrcMode": scVoicePrfNodeTxAudSrcMode,
       "scVoicePrfNodeRxAudOutMode": scVoicePrfNodeRxAudOutMode,
       "scVoicePrfNodeEchoCancel": scVoicePrfNodeEchoCancel,
       "scVoicePrfNodeNonLinear": scVoicePrfNodeNonLinear,
       "scVoicePrfNodeTxPCMGain": scVoicePrfNodeTxPCMGain,
       "scVoicePrfNodeRxPCMGain": scVoicePrfNodeRxPCMGain,
       "scVoicePrfNodePCMPhasorSize": scVoicePrfNodePCMPhasorSize,
       "scVoicePrfNodeSubratePhSize": scVoicePrfNodeSubratePhSize,
       "scVoicePrfNodeNetSigMode": scVoicePrfNodeNetSigMode,
       "scCmntyAccess": scCmntyAccess,
       "scCmntyAccessTable": scCmntyAccessTable,
       "scCmntyAccessEntry": scCmntyAccessEntry,
       "scCmntyAccessIndex": scCmntyAccessIndex,
       "scCmntyAccessControlMode": scCmntyAccessControlMode,
       "scCmntyAccessCommunityName": scCmntyAccessCommunityName,
       "scCmntyMib2Table": scCmntyMib2Table,
       "scCmntyMib2Entry": scCmntyMib2Entry,
       "scCmntyMib2Index": scCmntyMib2Index,
       "scCmntyMib2SystemAccess": scCmntyMib2SystemAccess,
       "scCmntyMib2InterfacesAccess": scCmntyMib2InterfacesAccess,
       "scCmntyMib2AtAccess": scCmntyMib2AtAccess,
       "scCmntyMib2IpAccess": scCmntyMib2IpAccess,
       "scCmntyMib2IcmpAccess": scCmntyMib2IcmpAccess,
       "scCmntyMib2UdpAccess": scCmntyMib2UdpAccess,
       "scCmntyMib2SnmpAccess": scCmntyMib2SnmpAccess,
       "scCmntySecTable": scCmntySecTable,
       "scCmntySecEntry": scCmntySecEntry,
       "scCmntySecIndex": scCmntySecIndex,
       "scCmntySecPartHeaderAccess": scCmntySecPartHeaderAccess,
       "scCmntySecSystemProfileAccess": scCmntySecSystemProfileAccess,
       "scCmntySecRootAccess": scCmntySecRootAccess,
       "scCmntySecNodeAccess": scCmntySecNodeAccess,
       "scCmntySecTrapAccess": scCmntySecTrapAccess,
       "scCmntySecChanProfileAccess": scCmntySecChanProfileAccess,
       "scCmntySecSoftloadAccess": scCmntySecSoftloadAccess,
       "scCmntySecCPIAccess": scCmntySecCPIAccess,
       "scCmntySecModemAccess": scCmntySecModemAccess,
       "scCmntySecIPAccess": scCmntySecIPAccess,
       "scCmntySecLGMRoutingAccess": scCmntySecLGMRoutingAccess,
       "scCmntySecVoiceProfileAccess": scCmntySecVoiceProfileAccess,
       "scCmntySecCommunityAccess": scCmntySecCommunityAccess,
       "scCmntyRecfTable": scCmntyRecfTable,
       "scCmntyRecfEntry": scCmntyRecfEntry,
       "scCmntyRecfIndex": scCmntyRecfIndex,
       "scCmntyRecfPartHeader": scCmntyRecfPartHeader,
       "scCmntyRecfNodeAccess": scCmntyRecfNodeAccess,
       "scCmntyRecfNestAccess": scCmntyRecfNestAccess,
       "scCmntyRecfSlotAccess": scCmntyRecfSlotAccess,
       "scCmntyRecfModuleAccess": scCmntyRecfModuleAccess,
       "scCmntyRecfPortAccess": scCmntyRecfPortAccess,
       "scCmntyRecfBundleAccess": scCmntyRecfBundleAccess,
       "scCmntyRecfINLAccess": scCmntyRecfINLAccess,
       "scCmntyRecfTDMChannelAccess": scCmntyRecfTDMChannelAccess,
       "scCmntyRecfFrRelayAccess": scCmntyRecfFrRelayAccess,
       "scCmntyRecfAd10PortAccess": scCmntyRecfAd10PortAccess,
       "scCmntyRecfAsmPortAccess": scCmntyRecfAsmPortAccess,
       "scCmntyRecfRtmPortAccess": scCmntyRecfRtmPortAccess,
       "scCmntyRecfLgmPortAccess": scCmntyRecfLgmPortAccess,
       "scCmntyRecfDsmPortAccess": scCmntyRecfDsmPortAccess,
       "scCmntyRecfTranslationAccess": scCmntyRecfTranslationAccess,
       "scCmntyRecfHwRscAccess": scCmntyRecfHwRscAccess,
       "scCmntyRestTable": scCmntyRestTable,
       "scCmntyRestEntry": scCmntyRestEntry,
       "scCmntyRestIndex": scCmntyRestIndex,
       "scCmntyRestNodeAccess": scCmntyRestNodeAccess,
       "scCmntyRestNestAccess": scCmntyRestNestAccess,
       "scCmntyRestSlotAccess": scCmntyRestSlotAccess,
       "scCmntyRestModuleAccess": scCmntyRestModuleAccess,
       "scCmntyRestPortAccess": scCmntyRestPortAccess,
       "scCmntyRestBundleAccess": scCmntyRestBundleAccess,
       "scCmntyRestINLAccess": scCmntyRestINLAccess,
       "scCmntyRestINLContentsAccess": scCmntyRestINLContentsAccess,
       "scCmntyRestChannelAccess": scCmntyRestChannelAccess,
       "scCmntyRestAd10PortAccess": scCmntyRestAd10PortAccess,
       "scCmntyRestAsmPortAccess": scCmntyRestAsmPortAccess,
       "scCmntyRestTrkGrpAccess": scCmntyRestTrkGrpAccess,
       "scCmntyRestRtmPortAccess": scCmntyRestRtmPortAccess,
       "scCmntyRestLgmPortAccess": scCmntyRestLgmPortAccess,
       "scCmntyRestSafAccess": scCmntyRestSafAccess,
       "scCmntyRestDsmPortAccess": scCmntyRestDsmPortAccess,
       "scCmntyRestHwRscAccess": scCmntyRestHwRscAccess,
       "scCmntyRestStTable": scCmntyRestStTable,
       "scCmntyRestStEntry": scCmntyRestStEntry,
       "scCmntyRestStIndex": scCmntyRestStIndex,
       "scCmntyRestStModuleAccess": scCmntyRestStModuleAccess,
       "scCmntyRestStPortAccess": scCmntyRestStPortAccess,
       "scCmntyRestStINLAccess": scCmntyRestStINLAccess,
       "scCmntyRestStChannelAccess": scCmntyRestStChannelAccess,
       "scCmntyRestStAd10Access": scCmntyRestStAd10Access,
       "scCmntyAlmTable": scCmntyAlmTable,
       "scCmntyAlmEntry": scCmntyAlmEntry,
       "scCmntyAlmIndex": scCmntyAlmIndex,
       "scCmntyAlmPartHeader": scCmntyAlmPartHeader,
       "scCmntyAlmAlarmProfileAccess": scCmntyAlmAlarmProfileAccess,
       "scCmntyAlmAlarmLogAccess": scCmntyAlmAlarmLogAccess,
       "scCmntyAlmAlarmRecordAccess": scCmntyAlmAlarmRecordAccess,
       "scCmntyAlmTrapAccess": scCmntyAlmTrapAccess,
       "resource": resource,
       "reConfig": reConfig,
       "recfPartitionHeader": recfPartitionHeader,
       "recfPartitionControl": recfPartitionControl,
       "recfPartitionCRCCheck": recfPartitionCRCCheck,
       "recfPartitionFlushMode": recfPartitionFlushMode,
       "recfNode": recfNode,
       "recfNodeEntry": recfNodeEntry,
       "recfNodeUpdate": recfNodeUpdate,
       "recfNodeDescr": recfNodeDescr,
       "recfNodeContact": recfNodeContact,
       "recfNodeName": recfNodeName,
       "recfNodeLocation": recfNodeLocation,
       "recfNodeNumberOfNest": recfNodeNumberOfNest,
       "recfNodeClockSwitch": recfNodeClockSwitch,
       "recfNodeAlarmRelay": recfNodeAlarmRelay,
       "recfClockTable": recfClockTable,
       "recfClockEntry": recfClockEntry,
       "recfClockIndex": recfClockIndex,
       "recfClockStartMode": recfClockStartMode,
       "recfClockUpdate": recfClockUpdate,
       "recfClockType": recfClockType,
       "recfClockStationSpeed": recfClockStationSpeed,
       "recfClockPortSource": recfClockPortSource,
       "recfClockQuality": recfClockQuality,
       "recfClockPriority": recfClockPriority,
       "recfAvailResourceTable": recfAvailResourceTable,
       "recfAvailResourceEntry": recfAvailResourceEntry,
       "recfAvailResourceType": recfAvailResourceType,
       "recfAvailResourceId": recfAvailResourceId,
       "recfNestTable": recfNestTable,
       "recfNestEntry": recfNestEntry,
       "recfNestAddr": recfNestAddr,
       "recfNestDesc": recfNestDesc,
       "recfSlotTable": recfSlotTable,
       "recfSlotEntry": recfSlotEntry,
       "recfSlotAddr": recfSlotAddr,
       "recfSlotModuleStartMode": recfSlotModuleStartMode,
       "recfSlotUpdate": recfSlotUpdate,
       "recfSlotModuleDesc": recfSlotModuleDesc,
       "recfSlotModuleType": recfSlotModuleType,
       "recfSlotModuleSubType": recfSlotModuleSubType,
       "recfSlotRedundantMode": recfSlotRedundantMode,
       "recfSlotGroupID": recfSlotGroupID,
       "recfSlotModuleMaxBypass": recfSlotModuleMaxBypass,
       "recfSlotModuleMaxSource": recfSlotModuleMaxSource,
       "recfSlotModuleStartDiagMask": recfSlotModuleStartDiagMask,
       "recfSlotModuleBgdDiagMask": recfSlotModuleBgdDiagMask,
       "recfSlotModulePortDiagMask": recfSlotModulePortDiagMask,
       "recfSlotModuleDiagoseMode": recfSlotModuleDiagoseMode,
       "recfSlotModuleStartDiagMaskExt": recfSlotModuleStartDiagMaskExt,
       "recfSlotModuleBgdDiagMaskExt": recfSlotModuleBgdDiagMaskExt,
       "recfModule": recfModule,
       "recfModuleFsm16Table": recfModuleFsm16Table,
       "recfModuleFsm16Entry": recfModuleFsm16Entry,
       "recfModuleFsm16Addr": recfModuleFsm16Addr,
       "recfModuleFsm16Partition": recfModuleFsm16Partition,
       "recfModuleFsm64Table": recfModuleFsm64Table,
       "recfModuleFsm64Entry": recfModuleFsm64Entry,
       "recfModuleFsm64Addr": recfModuleFsm64Addr,
       "recfModuleFsm64Partition": recfModuleFsm64Partition,
       "recfModuleSgmAgTable": recfModuleSgmAgTable,
       "recfModuleSgmAgEntry": recfModuleSgmAgEntry,
       "recfModuleSgmAgAddr": recfModuleSgmAgAddr,
       "recfModuleSgmAgPartition": recfModuleSgmAgPartition,
       "recfModuleAsmTable": recfModuleAsmTable,
       "recfModuleAsmEntry": recfModuleAsmEntry,
       "recfModuleAsmAddr": recfModuleAsmAddr,
       "recfModuleAsmPartition": recfModuleAsmPartition,
       "recfModuleAsmCelpPartition": recfModuleAsmCelpPartition,
       "recfModuleAsmMinCelpPorts": recfModuleAsmMinCelpPorts,
       "recfModuleAsmApplType": recfModuleAsmApplType,
       "recfModuleLgmTable": recfModuleLgmTable,
       "recfModuleLgmEntry": recfModuleLgmEntry,
       "recfModuleLgmAddr": recfModuleLgmAddr,
       "recfModuleLgmPartition": recfModuleLgmPartition,
       "recfModuleDsm": recfModuleDsm,
       "recfModuleDsmTable": recfModuleDsmTable,
       "recfModuleDsmEntry": recfModuleDsmEntry,
       "recfModuleDsmAddr": recfModuleDsmAddr,
       "recfModuleDsmPartitionMap": recfModuleDsmPartitionMap,
       "recfModuleDsmPbxProtocol": recfModuleDsmPbxProtocol,
       "recfModuleDsmActiveLev1CDRMode": recfModuleDsmActiveLev1CDRMode,
       "recfModuleDsmRecordLev1CDRMode": recfModuleDsmRecordLev1CDRMode,
       "recfModuleDsmActiveLev2CDRMode": recfModuleDsmActiveLev2CDRMode,
       "recfModuleDsmRecordLev2CDRMode": recfModuleDsmRecordLev2CDRMode,
       "recfModDsmRecCDRLogTable": recfModDsmRecCDRLogTable,
       "recfModDsmRecCDRLogEntry": recfModDsmRecCDRLogEntry,
       "recfModDsmRecCDRLogAddr": recfModDsmRecCDRLogAddr,
       "recfModDsmRecCDRLogIndex": recfModDsmRecCDRLogIndex,
       "recfModDsmRecCDRLogControlMode": recfModDsmRecCDRLogControlMode,
       "recfModDsmRecCDRLogSize": recfModDsmRecCDRLogSize,
       "recfModDsmRecCDRLogOvThrshld": recfModDsmRecCDRLogOvThrshld,
       "recfModDsmRecCDRLogPartitionID": recfModDsmRecCDRLogPartitionID,
       "recfPort": recfPort,
       "recfT1mPortTable": recfT1mPortTable,
       "recfT1mPortEntry": recfT1mPortEntry,
       "recfT1mPortAddr": recfT1mPortAddr,
       "recfT1mPortStartMode": recfT1mPortStartMode,
       "recfT1mPortUpdate": recfT1mPortUpdate,
       "recfT1mPortFraming": recfT1mPortFraming,
       "recfT1mPortLineCodeType": recfT1mPortLineCodeType,
       "recfT1mPortDs1Option": recfT1mPortDs1Option,
       "recfT1mPortDsx1Distance": recfT1mPortDsx1Distance,
       "recfT1mPortEquGain": recfT1mPortEquGain,
       "recfT1mPortBundleMap": recfT1mPortBundleMap,
       "recfT1mPortErrorThreshold": recfT1mPortErrorThreshold,
       "recfT1mPortSevereThreshold": recfT1mPortSevereThreshold,
       "recfT1mPortAlarmThreshold": recfT1mPortAlarmThreshold,
       "recfT1mPortFailThreshold": recfT1mPortFailThreshold,
       "recfT1mPortFailToggleRequest": recfT1mPortFailToggleRequest,
       "recfT1mPortOOSBitPattern": recfT1mPortOOSBitPattern,
       "recfT1mPortOOSASignaling": recfT1mPortOOSASignaling,
       "recfT1mPortOOSBSignaling": recfT1mPortOOSBSignaling,
       "recfT1mPortOOSCDSignaling": recfT1mPortOOSCDSignaling,
       "recfT1mPortSigInversion": recfT1mPortSigInversion,
       "recfE1mPortTable": recfE1mPortTable,
       "recfE1mPortEntry": recfE1mPortEntry,
       "recfE1mPortAddr": recfE1mPortAddr,
       "recfE1mPortStartMode": recfE1mPortStartMode,
       "recfE1mPortUpdate": recfE1mPortUpdate,
       "recfE1mPortFraming": recfE1mPortFraming,
       "recfE1mPortCrcMultiFrame": recfE1mPortCrcMultiFrame,
       "recfE1mPortSigInversion": recfE1mPortSigInversion,
       "recfE1mPortInternationalBit": recfE1mPortInternationalBit,
       "recfE1mPortNationalBit": recfE1mPortNationalBit,
       "recfE1mPortTransmitEBit": recfE1mPortTransmitEBit,
       "recfE1mPortReceiveEBit": recfE1mPortReceiveEBit,
       "recfE1mPortBundleMap": recfE1mPortBundleMap,
       "recfE1mPortErrorThreshold": recfE1mPortErrorThreshold,
       "recfE1mPortSevereThreshold": recfE1mPortSevereThreshold,
       "recfE1mPortAlarmThreshold": recfE1mPortAlarmThreshold,
       "recfE1mPortFailThreshold": recfE1mPortFailThreshold,
       "recfE1mPortFailToggleRequest": recfE1mPortFailToggleRequest,
       "recfE1mPortOOSBitPattern": recfE1mPortOOSBitPattern,
       "recfE1mPortOOSASignaling": recfE1mPortOOSASignaling,
       "recfE1mPortOOSBSignaling": recfE1mPortOOSBSignaling,
       "recfE1mPortOOSCDSignaling": recfE1mPortOOSCDSignaling,
       "recfSdmPortTable": recfSdmPortTable,
       "recfSdmPortEntry": recfSdmPortEntry,
       "recfSdmPortAddr": recfSdmPortAddr,
       "recfSdmPortStartMode": recfSdmPortStartMode,
       "recfSdmPortUpdate": recfSdmPortUpdate,
       "recfSdmPortSpeed": recfSdmPortSpeed,
       "recfSdmPortInterface": recfSdmPortInterface,
       "recfSdmPortTxClockSource": recfSdmPortTxClockSource,
       "recfSdmPortBitMode": recfSdmPortBitMode,
       "recfSdmPortOOSOper": recfSdmPortOOSOper,
       "recfSdmPortGen": recfSdmPortGen,
       "recfSdmPortPolarity": recfSdmPortPolarity,
       "recfSdmPortType": recfSdmPortType,
       "recfSdmPortINLNumber": recfSdmPortINLNumber,
       "recfSdmDeviceType": recfSdmDeviceType,
       "recfSdmPortPartitionID": recfSdmPortPartitionID,
       "recfSdmPortFunctions": recfSdmPortFunctions,
       "recfSdmPortContentionSet": recfSdmPortContentionSet,
       "recfSdmPortLoopbackSupport": recfSdmPortLoopbackSupport,
       "recfSdmPortSatelliteBuffer": recfSdmPortSatelliteBuffer,
       "recfSdmPortFailToggleRequest": recfSdmPortFailToggleRequest,
       "recfSdmPortKGPolarity": recfSdmPortKGPolarity,
       "recfSdmPortKGSignalType": recfSdmPortKGSignalType,
       "recfSdmPortKGMode": recfSdmPortKGMode,
       "recfBundleTable": recfBundleTable,
       "recfBundleEntry": recfBundleEntry,
       "recfBundleAddr": recfBundleAddr,
       "recfBundleStartMode": recfBundleStartMode,
       "recfBundleUpdate": recfBundleUpdate,
       "recfBundleSignaling": recfBundleSignaling,
       "recfBundleOOSBitPattern": recfBundleOOSBitPattern,
       "recfBundleOOSASignaling": recfBundleOOSASignaling,
       "recfBundleOOSBSignaling": recfBundleOOSBSignaling,
       "recfBundleOOSCDSignaling": recfBundleOOSCDSignaling,
       "recfBundleNullIdlePattern": recfBundleNullIdlePattern,
       "recfBundleBwCntIdlePattern": recfBundleBwCntIdlePattern,
       "recfBundleBusyOutTimer": recfBundleBusyOutTimer,
       "recfBundleSeizureTime": recfBundleSeizureTime,
       "recfBundlePreemptionTime": recfBundlePreemptionTime,
       "recfBundleOrgDisconnectTime": recfBundleOrgDisconnectTime,
       "recfBundleAttenuationRx": recfBundleAttenuationRx,
       "recfBundleAttenuationTx": recfBundleAttenuationTx,
       "recfBundleType": recfBundleType,
       "recfBundleINLNumber": recfBundleINLNumber,
       "recfBundleDeviceType": recfBundleDeviceType,
       "recfBundleContentionSet": recfBundleContentionSet,
       "recfBundlePartitionID": recfBundlePartitionID,
       "recfBundleBwCntBusyPattern": recfBundleBwCntBusyPattern,
       "recfBundleSigInversion": recfBundleSigInversion,
       "recfBundleDataPolarity": recfBundleDataPolarity,
       "recfBundlePCMLaw": recfBundlePCMLaw,
       "recfINLTable": recfINLTable,
       "recfINLEntry": recfINLEntry,
       "recfINLNumber": recfINLNumber,
       "recfINLAddr": recfINLAddr,
       "recfINLStartMode": recfINLStartMode,
       "recfINLUpdate": recfINLUpdate,
       "recfINLArqCir": recfINLArqCir,
       "recfINLMaxPacketDS0": recfINLMaxPacketDS0,
       "recfINLPacketCirOccupy": recfINLPacketCirOccupy,
       "recfINLMaxTDMDS0": recfINLMaxTDMDS0,
       "recfINLGroup": recfINLGroup,
       "recfINLCost": recfINLCost,
       "recfINLEncryption": recfINLEncryption,
       "recfINLSatelliteHop": recfINLSatelliteHop,
       "recfINLOOSTimer": recfINLOOSTimer,
       "recfINLOrig": recfINLOrig,
       "recfINLRemoteNodeID": recfINLRemoteNodeID,
       "recfINLRemoteINLID": recfINLRemoteINLID,
       "recfINLPartitionID": recfINLPartitionID,
       "recfINLKGMode": recfINLKGMode,
       "recfTDMChannelTable": recfTDMChannelTable,
       "recfTDMChannelEntry": recfTDMChannelEntry,
       "recfTDMChannelAddr": recfTDMChannelAddr,
       "recfTDMChannelDestNodeID": recfTDMChannelDestNodeID,
       "recfTDMChannelDestAddr": recfTDMChannelDestAddr,
       "recfTDMChannelControlMode": recfTDMChannelControlMode,
       "recfTDMChannelUpdate": recfTDMChannelUpdate,
       "recfTDMChannelModuleType": recfTDMChannelModuleType,
       "recfTDMChannelDeviceType": recfTDMChannelDeviceType,
       "recfTDMChannelProfile": recfTDMChannelProfile,
       "recfTDMChannelOrig": recfTDMChannelOrig,
       "recfTDMChannelPartitionID": recfTDMChannelPartitionID,
       "recfTDMChannelState": recfTDMChannelState,
       "recfTDMChannelDestCheckMode": recfTDMChannelDestCheckMode,
       "recfTDMChannelConnectMode": recfTDMChannelConnectMode,
       "recfTDMChannelSpecialPrfType": recfTDMChannelSpecialPrfType,
       "recfTDMChannelSpecialProfile": recfTDMChannelSpecialProfile,
       "recfTDMChannelDestNodeType": recfTDMChannelDestNodeType,
       "recfFrame": recfFrame,
       "recfFrPortTable": recfFrPortTable,
       "recfFrPortEntry": recfFrPortEntry,
       "recfFrPortAddr": recfFrPortAddr,
       "recfFrPortDescription": recfFrPortDescription,
       "recfFrPortStartMode": recfFrPortStartMode,
       "recfFrPortUpdate": recfFrPortUpdate,
       "recfFrPortLmiActive": recfFrPortLmiActive,
       "recfFrPortLmiPollingTimer": recfFrPortLmiPollingTimer,
       "recfFrPortLmiWaitingTimer": recfFrPortLmiWaitingTimer,
       "recfFrPortLmiFullEnqInterval": recfFrPortLmiFullEnqInterval,
       "recfFrPortLmiMonitoredEvents": recfFrPortLmiMonitoredEvents,
       "recfFrPortErrorThreshold": recfFrPortErrorThreshold,
       "recfFrPortDeviceType": recfFrPortDeviceType,
       "recfFrPortAd10NodeID": recfFrPortAd10NodeID,
       "recfFrPortAd10PortID": recfFrPortAd10PortID,
       "recfFrPortBitMode": recfFrPortBitMode,
       "recfFrPortMaxFrameSize": recfFrPortMaxFrameSize,
       "recfFrPortSharedZeroFlag": recfFrPortSharedZeroFlag,
       "recfFrPortMaxCIR": recfFrPortMaxCIR,
       "recfFrPortAvgPktSize": recfFrPortAvgPktSize,
       "recfFrPortAllocationPref": recfFrPortAllocationPref,
       "recfFrPortBillingSegSize": recfFrPortBillingSegSize,
       "recfFrPortBillingControl": recfFrPortBillingControl,
       "recfFrPortPartitionID": recfFrPortPartitionID,
       "recfFrPortEncodingType": recfFrPortEncodingType,
       "recfFrChannelTable": recfFrChannelTable,
       "recfFrChannelEntry": recfFrChannelEntry,
       "recfFrChannelAddr": recfFrChannelAddr,
       "recfFrChannelDestNodeID": recfFrChannelDestNodeID,
       "recfFrChannelDestAddr": recfFrChannelDestAddr,
       "recfFrChannelControlMode": recfFrChannelControlMode,
       "recfFrChannelUpdate": recfFrChannelUpdate,
       "recfFrChannelType": recfFrChannelType,
       "recfFrChannelCirTransPriority": recfFrChannelCirTransPriority,
       "recfFrChannelCIR": recfFrChannelCIR,
       "recfFrChannelEIR": recfFrChannelEIR,
       "recfFrChannelBc": recfFrChannelBc,
       "recfFrChannelProfile": recfFrChannelProfile,
       "recfFrChannelOrig": recfFrChannelOrig,
       "recfFrChannelPartitionID": recfFrChannelPartitionID,
       "recfFrChannelState": recfFrChannelState,
       "recfFrChannelDestCheckMode": recfFrChannelDestCheckMode,
       "recfFrChannelConnectMode": recfFrChannelConnectMode,
       "recfFrChannelModuleType": recfFrChannelModuleType,
       "recfAd10Port": recfAd10Port,
       "recfAd10AgmPortTable": recfAd10AgmPortTable,
       "recfAd10AgmPortEntry": recfAd10AgmPortEntry,
       "recfAd10AgmPortAddr": recfAd10AgmPortAddr,
       "recfAd10AgmPortStartMode": recfAd10AgmPortStartMode,
       "recfAd10AgmPortUpdate": recfAd10AgmPortUpdate,
       "recfAd10AgmPortSpeed": recfAd10AgmPortSpeed,
       "recfAd10AgmPortDef": recfAd10AgmPortDef,
       "recfAd10AgmPortPartitionID": recfAd10AgmPortPartitionID,
       "recfAd10DataPortTable": recfAd10DataPortTable,
       "recfAd10DataPortEntry": recfAd10DataPortEntry,
       "recfAd10DataPortAddr": recfAd10DataPortAddr,
       "recfAd10DataPortStartMode": recfAd10DataPortStartMode,
       "recfAd10DataPortUpdate": recfAd10DataPortUpdate,
       "recfAd10DataPortPhysSlot": recfAd10DataPortPhysSlot,
       "recfAd10DataPortPhysPort": recfAd10DataPortPhysPort,
       "recfAd10DataPortTDMDataRate": recfAd10DataPortTDMDataRate,
       "recfAd10DataPortType": recfAd10DataPortType,
       "recfAd10VoicePortTable": recfAd10VoicePortTable,
       "recfAd10VoicePortEntry": recfAd10VoicePortEntry,
       "recfAd10VoicePortAddr": recfAd10VoicePortAddr,
       "recfAd10VoicePortStartMode": recfAd10VoicePortStartMode,
       "recfAd10VoicePortUpdate": recfAd10VoicePortUpdate,
       "recfAd10VoicePortPhysSlot": recfAd10VoicePortPhysSlot,
       "recfAd10VoicePortPhysPort": recfAd10VoicePortPhysPort,
       "recfAd10VoicePortDBAMode": recfAd10VoicePortDBAMode,
       "recfAd10VoicePortCompressMode": recfAd10VoicePortCompressMode,
       "recfAd10VoicePortFaxMode": recfAd10VoicePortFaxMode,
       "recfAd10VoicePortSpeed": recfAd10VoicePortSpeed,
       "recfAd10PktBandTable": recfAd10PktBandTable,
       "recfAd10PktBandEntry": recfAd10PktBandEntry,
       "recfAd10PktBandAddr": recfAd10PktBandAddr,
       "recfAd10PktBandStartMode": recfAd10PktBandStartMode,
       "recfAd10PktBandUpdate": recfAd10PktBandUpdate,
       "recfAd10PktBandBaudRate": recfAd10PktBandBaudRate,
       "recfAd10PktBandDBAMode": recfAd10PktBandDBAMode,
       "recfAd10TrkGrpTable": recfAd10TrkGrpTable,
       "recfAd10TrkGrpEntry": recfAd10TrkGrpEntry,
       "recfAd10TrkGrpAddr": recfAd10TrkGrpAddr,
       "recfAd10TrkGrpStartMode": recfAd10TrkGrpStartMode,
       "recfAd10TrkGrpAgmPort": recfAd10TrkGrpAgmPort,
       "recfAd10TrkGrpLowElement": recfAd10TrkGrpLowElement,
       "recfAd10TrkGrpHighElement": recfAd10TrkGrpHighElement,
       "recfAd10TrkGrpRemoteNodeID": recfAd10TrkGrpRemoteNodeID,
       "recfAd10TrkGrpRemoteAddr": recfAd10TrkGrpRemoteAddr,
       "recfAd10TrkGrpPartitionID": recfAd10TrkGrpPartitionID,
       "recfAd10TrkGrpSearchDirection": recfAd10TrkGrpSearchDirection,
       "recfAsmPort": recfAsmPort,
       "recfAsmX50Table": recfAsmX50Table,
       "recfAsmX50PortTable": recfAsmX50PortTable,
       "recfAsmX50PortEntry": recfAsmX50PortEntry,
       "recfAsmX50PortAddr": recfAsmX50PortAddr,
       "recfAsmX50PortStartMode": recfAsmX50PortStartMode,
       "recfAsmX50PortUpdate": recfAsmX50PortUpdate,
       "recfAsmX50PortSpeed": recfAsmX50PortSpeed,
       "recfAsmX50PortProtocol": recfAsmX50PortProtocol,
       "recfAsmX50PortIdlePattern": recfAsmX50PortIdlePattern,
       "recfAsmX50PortOosTimer": recfAsmX50PortOosTimer,
       "recfAsmX50PortPhasorSize": recfAsmX50PortPhasorSize,
       "recfAsmX50PortTxHouseKbits": recfAsmX50PortTxHouseKbits,
       "recfAsmX50PortCircuitMap": recfAsmX50PortCircuitMap,
       "recfAsmX50PortPartitionID": recfAsmX50PortPartitionID,
       "recfAsmX50CkTable": recfAsmX50CkTable,
       "recfAsmX50CkEntry": recfAsmX50CkEntry,
       "recfAsmX50CkAddr": recfAsmX50CkAddr,
       "recfAsmX50CkStartMode": recfAsmX50CkStartMode,
       "recfAsmX50CkUpdate": recfAsmX50CkUpdate,
       "recfAsmX50CkSpeed": recfAsmX50CkSpeed,
       "recfAsmX50CkTimeSlot": recfAsmX50CkTimeSlot,
       "recfAsmX50CkPhasorSize": recfAsmX50CkPhasorSize,
       "recfAsmX50CkSbitConnectState": recfAsmX50CkSbitConnectState,
       "recfAsmVoice": recfAsmVoice,
       "recfAsmVoiceTrkGrpTable": recfAsmVoiceTrkGrpTable,
       "recfAsmVoiceTrkGrpEntry": recfAsmVoiceTrkGrpEntry,
       "recfAsmVoiceTrkGrpAddr": recfAsmVoiceTrkGrpAddr,
       "recfAsmVoiceTrkGrpStartMode": recfAsmVoiceTrkGrpStartMode,
       "recfAsmVoiceTrkGrpPort": recfAsmVoiceTrkGrpPort,
       "recfAsmVoiceTrkGrpLowElement": recfAsmVoiceTrkGrpLowElement,
       "recfAsmVoiceTrkGrpHighElement": recfAsmVoiceTrkGrpHighElement,
       "recfAsmVoiceTrkGrpRemoteNodeID": recfAsmVoiceTrkGrpRemoteNodeID,
       "recfAsmVoiceTrkGrpRemoteAddr": recfAsmVoiceTrkGrpRemoteAddr,
       "recfAsmVoiceTrkGrpPartitionID": recfAsmVoiceTrkGrpPartitionID,
       "recfAsmVoiceTrkGrpCompressMode": recfAsmVoiceTrkGrpCompressMode,
       "recfAsmVoiceTrkGrpSpeed": recfAsmVoiceTrkGrpSpeed,
       "recfAsmVoiceTrkGrpSignalingType": recfAsmVoiceTrkGrpSignalingType,
       "recfAsmVoiceTrkGrpDTMFRelay": recfAsmVoiceTrkGrpDTMFRelay,
       "recfAsmVoiceTrkGrpFaxRelay": recfAsmVoiceTrkGrpFaxRelay,
       "recfAsmVoiceTrkGrpFaxNSFMode": recfAsmVoiceTrkGrpFaxNSFMode,
       "recfAsmVoiceTrkGrpTxAudSrcMode": recfAsmVoiceTrkGrpTxAudSrcMode,
       "recfAsmVoiceTrkGrpRxAudOutMode": recfAsmVoiceTrkGrpRxAudOutMode,
       "recfAsmVoiceTrkGrpEchoCancel": recfAsmVoiceTrkGrpEchoCancel,
       "recfAsmVoiceTrkGrpNonLinear": recfAsmVoiceTrkGrpNonLinear,
       "recfAsmVoiceTrkGrpDataMode": recfAsmVoiceTrkGrpDataMode,
       "recfAsmVoiceTrkGrpTxPCMGain": recfAsmVoiceTrkGrpTxPCMGain,
       "recfAsmVoiceTrkGrpRxPCMGain": recfAsmVoiceTrkGrpRxPCMGain,
       "recfAsmVoiceTrkGrpVocoderEnable": recfAsmVoiceTrkGrpVocoderEnable,
       "recfAsmVoiceTrkGrpSigIdlePttrn": recfAsmVoiceTrkGrpSigIdlePttrn,
       "recfAsmVoiceTrkGrpPCMPhasorSize": recfAsmVoiceTrkGrpPCMPhasorSize,
       "recfAsmVoiceTrkGrpSubratePhSize": recfAsmVoiceTrkGrpSubratePhSize,
       "recfAsmVoiceTrkGrpLocalSigConf": recfAsmVoiceTrkGrpLocalSigConf,
       "recfAsmVoiceTrkGrpRemoteSigConf": recfAsmVoiceTrkGrpRemoteSigConf,
       "recfAsmVoiceTrkGrpRmtSigPattern": recfAsmVoiceTrkGrpRmtSigPattern,
       "recfAsmVoiceTrkGrpCelpNetSigMd": recfAsmVoiceTrkGrpCelpNetSigMd,
       "recfAsmVoiceTrkGrpSearchDir": recfAsmVoiceTrkGrpSearchDir,
       "recfRtmPort": recfRtmPort,
       "recfRtmPortTable": recfRtmPortTable,
       "recfRtmPortEntry": recfRtmPortEntry,
       "recfRtmPortAddr": recfRtmPortAddr,
       "recfRtmPortStartMode": recfRtmPortStartMode,
       "recfRtmPortUpdate": recfRtmPortUpdate,
       "recfRtmPortType": recfRtmPortType,
       "recfRtmPortPartitionID": recfRtmPortPartitionID,
       "recfRtmAdPortTable": recfRtmAdPortTable,
       "recfRtmAdPortEntry": recfRtmAdPortEntry,
       "recfRtmAdPortAddr": recfRtmAdPortAddr,
       "recfRtmAdPortStartMode": recfRtmAdPortStartMode,
       "recfRtmAdPortUpdate": recfRtmAdPortUpdate,
       "recfRtmAdPortSpeed": recfRtmAdPortSpeed,
       "recfRtmAdPortDataBits": recfRtmAdPortDataBits,
       "recfRtmAdPortCommMode": recfRtmAdPortCommMode,
       "recfRtmAdPortType": recfRtmAdPortType,
       "recfLgmPort": recfLgmPort,
       "recfLgmPortTable": recfLgmPortTable,
       "recfLgmPortEntry": recfLgmPortEntry,
       "recfLgmPortAddr": recfLgmPortAddr,
       "recfLgmPortStartMode": recfLgmPortStartMode,
       "recfLgmPortUpdate": recfLgmPortUpdate,
       "recfLgmPortArq": recfLgmPortArq,
       "recfLgmPortGroup": recfLgmPortGroup,
       "recfLgmPortEncryption": recfLgmPortEncryption,
       "recfLgmPortSatelliteHop": recfLgmPortSatelliteHop,
       "recfLgmPortSyncChar": recfLgmPortSyncChar,
       "recfLgmPortSyncLevel": recfLgmPortSyncLevel,
       "recfLgmPortOosTimer": recfLgmPortOosTimer,
       "recfLgmPortPartitionID": recfLgmPortPartitionID,
       "recfLgmPortBitMode": recfLgmPortBitMode,
       "recfLgmPortInbandSuperrate": recfLgmPortInbandSuperrate,
       "recfLgmPortInbandSubrate": recfLgmPortInbandSubrate,
       "recfLgmPortOutbandSuperrate": recfLgmPortOutbandSuperrate,
       "recfLgmPortOutbandSubrate": recfLgmPortOutbandSubrate,
       "recfDsmPort": recfDsmPort,
       "recfDsmIDCPortTable": recfDsmIDCPortTable,
       "recfDsmIDCPortEntry": recfDsmIDCPortEntry,
       "recfDsmIDCPortAddr": recfDsmIDCPortAddr,
       "recfDsmDChPort": recfDsmDChPort,
       "recfDsmDChPortTable": recfDsmDChPortTable,
       "recfDsmDChPortEntry": recfDsmDChPortEntry,
       "recfDsmDChPortAddr": recfDsmDChPortAddr,
       "recfDsmDChPortStartMode": recfDsmDChPortStartMode,
       "recfDsmDChPortUpdate": recfDsmDChPortUpdate,
       "recfDsmDChPortPartitionID": recfDsmDChPortPartitionID,
       "recfDsmDChPortPbxProtocol": recfDsmDChPortPbxProtocol,
       "recfDsmDChPortPbxLayer3Type": recfDsmDChPortPbxLayer3Type,
       "recfDsmDChPortPbxLayer2Type": recfDsmDChPortPbxLayer2Type,
       "recfDsmDChPortSharedZeroFlag": recfDsmDChPortSharedZeroFlag,
       "recfDsmDChPortEncodingType": recfDsmDChPortEncodingType,
       "recfDsmDChPortActiveLev1CDRMode": recfDsmDChPortActiveLev1CDRMode,
       "recfDsmDChPortRecordLev1CDRMode": recfDsmDChPortRecordLev1CDRMode,
       "recfDsmDChPortActiveLev2CDRMode": recfDsmDChPortActiveLev2CDRMode,
       "recfDsmDChPortRecordLev2CDRMode": recfDsmDChPortRecordLev2CDRMode,
       "recfDsmDChPortCallsPerSecond": recfDsmDChPortCallsPerSecond,
       "recfDsmDChBChTable": recfDsmDChBChTable,
       "recfDsmDChBChEntry": recfDsmDChBChEntry,
       "recfDsmDChBChAddr": recfDsmDChBChAddr,
       "recfDsmDChBChBundle": recfDsmDChBChBundle,
       "recfDsmDChBChDirection": recfDsmDChBChDirection,
       "recfDsmDChExchTable": recfDsmDChExchTable,
       "recfDsmDChExchEntry": recfDsmDChExchEntry,
       "recfDsmDChExchDChAddr": recfDsmDChExchDChAddr,
       "recfDsmDChExchIndex": recfDsmDChExchIndex,
       "recfDsmDChExchControlMode": recfDsmDChExchControlMode,
       "recfDsmDChExchCode": recfDsmDChExchCode,
       "recfDsmDChQOSTable": recfDsmDChQOSTable,
       "recfDsmDChQOSEntry": recfDsmDChQOSEntry,
       "recfDsmDChQOSDChAddr": recfDsmDChQOSDChAddr,
       "recfDsmDChQOSIndex": recfDsmDChQOSIndex,
       "recfDsmDChQOSControlMode": recfDsmDChQOSControlMode,
       "recfDsmDChQOSLowBChan": recfDsmDChQOSLowBChan,
       "recfDsmDChQOSHighBChan": recfDsmDChQOSHighBChan,
       "recfDsmDChQOSLowExchCode": recfDsmDChQOSLowExchCode,
       "recfDsmDChQOSHighExchCode": recfDsmDChQOSHighExchCode,
       "recfDsmDChQOSCallType": recfDsmDChQOSCallType,
       "recfDsmDChQOSChPrfIndex": recfDsmDChQOSChPrfIndex,
       "recfDsmDChQOSSpecialPrfIndex": recfDsmDChQOSSpecialPrfIndex,
       "recfDsmDChDPNSSTable": recfDsmDChDPNSSTable,
       "recfDsmDChDPNSSEntry": recfDsmDChDPNSSEntry,
       "recfDsmDChDPNSSAddr": recfDsmDChDPNSSAddr,
       "recfDsmDChDPNSSNL": recfDsmDChDPNSSNL,
       "recfDsmDChDPNSSNT1": recfDsmDChDPNSSNT1,
       "recfDsmDChDPNSSNT2": recfDsmDChDPNSSNT2,
       "recfDsmDChDPNSSUnrecMsgIdle": recfDsmDChDPNSSUnrecMsgIdle,
       "recfDsmDChDPNSSInterDgtTmr": recfDsmDChDPNSSInterDgtTmr,
       "recfDsmDChQSigTable": recfDsmDChQSigTable,
       "recfDsmDChQSigEntry": recfDsmDChQSigEntry,
       "recfDsmDChQSigAddr": recfDsmDChQSigAddr,
       "recfDsmDChQSigK": recfDsmDChQSigK,
       "recfDsmDChQSigN200": recfDsmDChQSigN200,
       "recfDsmDChQSigT200": recfDsmDChQSigT200,
       "recfDsmDChQSigT203": recfDsmDChQSigT203,
       "recfDsmDChQSigT302": recfDsmDChQSigT302,
       "recfDsmDChQSigT303": recfDsmDChQSigT303,
       "recfDsmDChQSigT304": recfDsmDChQSigT304,
       "recfDsmDChQSigT305": recfDsmDChQSigT305,
       "recfDsmDChQSigT308": recfDsmDChQSigT308,
       "recfDsmDChQSigT309": recfDsmDChQSigT309,
       "recfDsmDChQSigT314": recfDsmDChQSigT314,
       "recfDsmDChQSigT316": recfDsmDChQSigT316,
       "recfDsmDChQSigT322": recfDsmDChQSigT322,
       "recfTranslation": recfTranslation,
       "recfLink2TraTable": recfLink2TraTable,
       "recfLink2TraEntry": recfLink2TraEntry,
       "recfLink2TraIndex": recfLink2TraIndex,
       "recfLink2TraStartMode": recfLink2TraStartMode,
       "recfLink2TraStAddr": recfLink2TraStAddr,
       "recfLink2TraL2Addr": recfLink2TraL2Addr,
       "recfLink2TraFunctions": recfLink2TraFunctions,
       "recfLink2TraPartition": recfLink2TraPartition,
       "recfHwRsc": recfHwRsc,
       "recfHwRscEngineTable": recfHwRscEngineTable,
       "recfHwRscEngineEntry": recfHwRscEngineEntry,
       "recfHwRscEngineModuleAddr": recfHwRscEngineModuleAddr,
       "recfHwRscEngineID": recfHwRscEngineID,
       "recfHwRscEngineStartMode": recfHwRscEngineStartMode,
       "recfHwRscEngineUpdate": recfHwRscEngineUpdate,
       "recfHwRscEngineApplication": recfHwRscEngineApplication,
       "recfHwRscEnginePartitionID": recfHwRscEnginePartitionID,
       "reStatus": reStatus,
       "restNode": restNode,
       "restNodeEntry": restNodeEntry,
       "restNodeDiagnostics": restNodeDiagnostics,
       "restNodeStatus": restNodeStatus,
       "restNodeCondition": restNodeCondition,
       "restNodeSWRevision": restNodeSWRevision,
       "restNodeMIBRevision": restNodeMIBRevision,
       "restNodeUpTime": restNodeUpTime,
       "restNodeErrorMinutes": restNodeErrorMinutes,
       "restNodeNumOfNest": restNodeNumOfNest,
       "restNodePktBandBWAvail": restNodePktBandBWAvail,
       "restNodePktBandBWMax": restNodePktBandBWMax,
       "restNodeMasterClockPriority": restNodeMasterClockPriority,
       "restNodeMasterClockMsg": restNodeMasterClockMsg,
       "restNodeClockTableIndex": restNodeClockTableIndex,
       "restNodeClockStatus": restNodeClockStatus,
       "restNodeClockSubStatus": restNodeClockSubStatus,
       "restNodeClockSourceType": restNodeClockSourceType,
       "restNodeClockSourcePort": restNodeClockSourcePort,
       "restNodeClockSourcePriority": restNodeClockSourcePriority,
       "restNodeClockSourceQuality": restNodeClockSourceQuality,
       "restNodeClockQualifierStatus": restNodeClockQualifierStatus,
       "restNodeTestGenStatus": restNodeTestGenStatus,
       "restNodeTestGenType": restNodeTestGenType,
       "restNodeTestGenTDMChannel": restNodeTestGenTDMChannel,
       "restNodeAlarmRelayStatus": restNodeAlarmRelayStatus,
       "restNodeAlarmRelaySubStatus": restNodeAlarmRelaySubStatus,
       "restNodeCpiStatus": restNodeCpiStatus,
       "restNodeModemStatus": restNodeModemStatus,
       "restNodeSoftloadStatus": restNodeSoftloadStatus,
       "restNodeSoftloadTotal": restNodeSoftloadTotal,
       "restNodeSoftloadSize": restNodeSoftloadSize,
       "restNodeSoftloadSoftwareType": restNodeSoftloadSoftwareType,
       "restNodeUploadStatus": restNodeUploadStatus,
       "restNodeUploadTotal": restNodeUploadTotal,
       "restNodeUploadSize": restNodeUploadSize,
       "restNodeUploadClientID": restNodeUploadClientID,
       "restNodeTotalDsmCallsPerSecond": restNodeTotalDsmCallsPerSecond,
       "restNestTable": restNestTable,
       "restNestEntry": restNestEntry,
       "restNestAddr": restNestAddr,
       "restNestDiagnostics": restNestDiagnostics,
       "restNestStatus": restNestStatus,
       "restNestCondition": restNestCondition,
       "restNestNumberOfModules": restNestNumberOfModules,
       "restNestPowerStatus": restNestPowerStatus,
       "restNestFanStatus": restNestFanStatus,
       "restNestTemperature": restNestTemperature,
       "restNestClockReference1": restNestClockReference1,
       "restNestClockReference2": restNestClockReference2,
       "restNestBusLoopbackStatus": restNestBusLoopbackStatus,
       "restNestSlotPresence": restNestSlotPresence,
       "restNestActiveRight": restNestActiveRight,
       "restNestActiveLeft": restNestActiveLeft,
       "restNestRxmCkt1Status": restNestRxmCkt1Status,
       "restNestRxmCkt2Status": restNestRxmCkt2Status,
       "restNestLxmCkt1Status": restNestLxmCkt1Status,
       "restNestLxmCkt2Status": restNestLxmCkt2Status,
       "restSlotTable": restSlotTable,
       "restSlotEntry": restSlotEntry,
       "restSlotAddr": restSlotAddr,
       "restSlotModuleDiagnostics": restSlotModuleDiagnostics,
       "restSlotModuleStatus": restSlotModuleStatus,
       "restSlotModuleFailureType": restSlotModuleFailureType,
       "restSlotModuleCondition": restSlotModuleCondition,
       "restSlotSWModuleType": restSlotSWModuleType,
       "restSlotSWModuleSubType": restSlotSWModuleSubType,
       "restSlotModuleIDFormat": restSlotModuleIDFormat,
       "restSlotHWModuleType": restSlotHWModuleType,
       "restSlotHWModuleSubType": restSlotHWModuleSubType,
       "restSlotModuleAssemblyNum": restSlotModuleAssemblyNum,
       "restSlotModuleRevision": restSlotModuleRevision,
       "restSlotModuleSerialNum": restSlotModuleSerialNum,
       "restSlotModuleDateMade": restSlotModuleDateMade,
       "restSlotActiveRedundantSlot": restSlotActiveRedundantSlot,
       "restSlotModuleSWRevision": restSlotModuleSWRevision,
       "restSlotStartupDiagResults": restSlotStartupDiagResults,
       "restSlotBGDiagResults": restSlotBGDiagResults,
       "restSlotNumActivePorts": restSlotNumActivePorts,
       "restSlotNumNormalPorts": restSlotNumNormalPorts,
       "restModule": restModule,
       "restNcpTable": restNcpTable,
       "restNcpEntry": restNcpEntry,
       "restNcpAddr": restNcpAddr,
       "restNcpBootPromRevision": restNcpBootPromRevision,
       "restNcpMacAddr": restNcpMacAddr,
       "restNcpFlashObjectVersions": restNcpFlashObjectVersions,
       "restNcpFlashTable": restNcpFlashTable,
       "restNcpFlashEntry": restNcpFlashEntry,
       "restNcpFlashAddr": restNcpFlashAddr,
       "restNcpFlashIndex": restNcpFlashIndex,
       "restNcpFlashModuleType": restNcpFlashModuleType,
       "restNcpFlashRecoveryIndicator": restNcpFlashRecoveryIndicator,
       "restNcpFlashCompressIndicator": restNcpFlashCompressIndicator,
       "restNcpFlashFileVersionNumber": restNcpFlashFileVersionNumber,
       "restNcpFlashFileSize": restNcpFlashFileSize,
       "restNcpFlashFileStoredCrc": restNcpFlashFileStoredCrc,
       "restNcpFlashFileCrcCheck": restNcpFlashFileCrcCheck,
       "restFsmTable": restFsmTable,
       "restFsmEntry": restFsmEntry,
       "restFsmAddr": restFsmAddr,
       "restFsmBypassBandwidth": restFsmBypassBandwidth,
       "restFsmSourceBandwidth": restFsmSourceBandwidth,
       "restFsmBandwidthAvail": restFsmBandwidthAvail,
       "restFsmPortSpeedAvail": restFsmPortSpeedAvail,
       "restFsmDlciTotal": restFsmDlciTotal,
       "restFsmDlciAvail": restFsmDlciAvail,
       "restFsmDlciConfig": restFsmDlciConfig,
       "restFsmBypChanTotal": restFsmBypChanTotal,
       "restFsmBypChanAvail": restFsmBypChanAvail,
       "restFsmCirTotal": restFsmCirTotal,
       "restFsmCirAvail": restFsmCirAvail,
       "restFsmVciCtrlBlkTotal": restFsmVciCtrlBlkTotal,
       "restFsmVciCtrlBlkAvail": restFsmVciCtrlBlkAvail,
       "restFsmTotalBuffers": restFsmTotalBuffers,
       "restFsmBuffersAvail": restFsmBuffersAvail,
       "restFsmCcfSupportIndicator": restFsmCcfSupportIndicator,
       "restSgmAgTable": restSgmAgTable,
       "restSgmAgEntry": restSgmAgEntry,
       "restSgmAgAddr": restSgmAgAddr,
       "restSgmAgmPortAvail": restSgmAgmPortAvail,
       "restSgmAgmPortTotal": restSgmAgmPortTotal,
       "restSgmAgSafAvail": restSgmAgSafAvail,
       "restSgmAgSafTotal": restSgmAgSafTotal,
       "restSgmAgSgmScfAvail": restSgmAgSgmScfAvail,
       "restSgmAgSgmScfTotal": restSgmAgSgmScfTotal,
       "restSgmAgAgmScfAvail": restSgmAgAgmScfAvail,
       "restSgmAgAgmScfTotal": restSgmAgAgmScfTotal,
       "restSgmAgAgmCcfAvail": restSgmAgAgmCcfAvail,
       "restSgmAgAgmCcfTotal": restSgmAgAgmCcfTotal,
       "restSgmAgAgmPortCapacity": restSgmAgAgmPortCapacity,
       "restAsm": restAsm,
       "restAsmModuleTable": restAsmModuleTable,
       "restAsmModuleEntry": restAsmModuleEntry,
       "restAsmModuleAddr": restAsmModuleAddr,
       "restAsmModuleMaxCelp": restAsmModuleMaxCelp,
       "restAsmModuleNumCelpAvail": restAsmModuleNumCelpAvail,
       "restAsmModuleTotalEngines": restAsmModuleTotalEngines,
       "restAsmModuleAvailEngines": restAsmModuleAvailEngines,
       "restAsmModuleTotalSafScfs": restAsmModuleTotalSafScfs,
       "restAsmModuleAvailSafScfs": restAsmModuleAvailSafScfs,
       "restAsmEngineTable": restAsmEngineTable,
       "restAsmEngineEntry": restAsmEngineEntry,
       "restAsmEngineModuleAddr": restAsmEngineModuleAddr,
       "restAsmEngineID": restAsmEngineID,
       "restAsmEngineDiagnostics": restAsmEngineDiagnostics,
       "restAsmEngineStatus": restAsmEngineStatus,
       "restAsmEngineNumPorts": restAsmEngineNumPorts,
       "restAsmEngineNumSAFs": restAsmEngineNumSAFs,
       "restAsmEngineNumSCFs": restAsmEngineNumSCFs,
       "restAsmEngineApplication": restAsmEngineApplication,
       "restAsmModApplTable": restAsmModApplTable,
       "restAsmModApplEntry": restAsmModApplEntry,
       "restAsmModApplModuleAddr": restAsmModApplModuleAddr,
       "restAsmModApplType": restAsmModApplType,
       "restAsmModApplMaxPortsAllowed": restAsmModApplMaxPortsAllowed,
       "restAsmModApplCurPortsAllowed": restAsmModApplCurPortsAllowed,
       "restAsmModApplCurPortsAllocated": restAsmModApplCurPortsAllocated,
       "restAsmModApplEnginesUsed": restAsmModApplEnginesUsed,
       "restAsmModApplEnginesRsvd": restAsmModApplEnginesRsvd,
       "restAsmModApplTotalLicenses": restAsmModApplTotalLicenses,
       "restAsmModApplAvailLicenses": restAsmModApplAvailLicenses,
       "restRtm": restRtm,
       "restRtmModuleTable": restRtmModuleTable,
       "restRtmModuleEntry": restRtmModuleEntry,
       "restRtmModuleAddr": restRtmModuleAddr,
       "restRtmModuleDS0sUsed": restRtmModuleDS0sUsed,
       "restRtmModuleDS0sAvail": restRtmModuleDS0sAvail,
       "restRtmModuleSafsUsed": restRtmModuleSafsUsed,
       "restRtmModuleSafsAvail": restRtmModuleSafsAvail,
       "restDsmModule": restDsmModule,
       "restDsmModuleTable": restDsmModuleTable,
       "restDsmModuleEntry": restDsmModuleEntry,
       "restDsmModuleAddr": restDsmModuleAddr,
       "restDsmModuleNumDsmComms": restDsmModuleNumDsmComms,
       "restDsmModuleNumCallsProc": restDsmModuleNumCallsProc,
       "restDsmModuleNumRmtRteEntries": restDsmModuleNumRmtRteEntries,
       "restDsmModuleNumRmtRteAvail": restDsmModuleNumRmtRteAvail,
       "restDsmModuleNumLocRteEntries": restDsmModuleNumLocRteEntries,
       "restDsmModuleNumLocRteAvail": restDsmModuleNumLocRteAvail,
       "restDsmModuleBypassPPSTotal": restDsmModuleBypassPPSTotal,
       "restDsmModuleBypassPPSAvail": restDsmModuleBypassPPSAvail,
       "restDsmModuleBypChanTotal": restDsmModuleBypChanTotal,
       "restDsmModuleBypChanAvail": restDsmModuleBypChanAvail,
       "restDsmModuleCirTotal": restDsmModuleCirTotal,
       "restDsmModuleCirAvail": restDsmModuleCirAvail,
       "restDsmModuleVciCtrlBlkTotal": restDsmModuleVciCtrlBlkTotal,
       "restDsmModuleVciCtrlBlkAvail": restDsmModuleVciCtrlBlkAvail,
       "restDsmModuleTotalBuffers": restDsmModuleTotalBuffers,
       "restDsmModuleBuffersAvail": restDsmModuleBuffersAvail,
       "restDsmModuleTotalRecCDRs": restDsmModuleTotalRecCDRs,
       "restDsmModuleRecCDRsAvail": restDsmModuleRecCDRsAvail,
       "restDsmModuleTotalCallsPerSec": restDsmModuleTotalCallsPerSec,
       "restDsmModuleCallsPerSecAvail": restDsmModuleCallsPerSecAvail,
       "restDsmModuleCallsPerSecFactor": restDsmModuleCallsPerSecFactor,
       "restDsmModuleBypassFactor": restDsmModuleBypassFactor,
       "restDsmModuleTotalProcessUnits": restDsmModuleTotalProcessUnits,
       "restDsmModuleProcessUnitsAvail": restDsmModuleProcessUnitsAvail,
       "restDsmModRecCDRLogTable": restDsmModRecCDRLogTable,
       "restDsmModRecCDRLogEntry": restDsmModRecCDRLogEntry,
       "restDsmModRecCDRLogAddr": restDsmModRecCDRLogAddr,
       "restDsmModRecCDRLogIndex": restDsmModRecCDRLogIndex,
       "restDsmModRecCDRLogStatus": restDsmModRecCDRLogStatus,
       "restDsmModRecCDRLogLev1Entries": restDsmModRecCDRLogLev1Entries,
       "restDsmModRecCDRLogLev2Entries": restDsmModRecCDRLogLev2Entries,
       "restDsmModRecCDRLogClrEntries": restDsmModRecCDRLogClrEntries,
       "restDsmModRecCDRTable": restDsmModRecCDRTable,
       "restDsmModRecCDREntry": restDsmModRecCDREntry,
       "restDsmModRecCDRAddr": restDsmModRecCDRAddr,
       "restDsmModRecCDRLogNum": restDsmModRecCDRLogNum,
       "restDsmModRecCDRIndex": restDsmModRecCDRIndex,
       "restDsmModRecCDRContents": restDsmModRecCDRContents,
       "restDsmModExchTable": restDsmModExchTable,
       "restDsmModExchEntry": restDsmModExchEntry,
       "restDsmModExchAddr": restDsmModExchAddr,
       "restDsmModExchCallNumLen": restDsmModExchCallNumLen,
       "restDsmModExchCallNumber": restDsmModExchCallNumber,
       "restDsmModExchPartition": restDsmModExchPartition,
       "restDsmModExchCode": restDsmModExchCode,
       "restDsmModRteTable": restDsmModRteTable,
       "restDsmModRteEntry": restDsmModRteEntry,
       "restDsmModRteAddr": restDsmModRteAddr,
       "restDsmModRteExchCodeLen": restDsmModRteExchCodeLen,
       "restDsmModRteExchCode": restDsmModRteExchCode,
       "restDsmModRtePartition": restDsmModRtePartition,
       "restDsmModRteRemoteNode": restDsmModRteRemoteNode,
       "restDsmModRteRemoteSlot": restDsmModRteRemoteSlot,
       "restDsmModRteLocalPortNumber": restDsmModRteLocalPortNumber,
       "restDsmModRteLocalPortAddress": restDsmModRteLocalPortAddress,
       "restLgmModule": restLgmModule,
       "restLgmModuleTable": restLgmModuleTable,
       "restLgmModuleEntry": restLgmModuleEntry,
       "restLgmModuleAddr": restLgmModuleAddr,
       "restLgmModuleTotalSAFs": restLgmModuleTotalSAFs,
       "restLgmModuleAvailSAFs": restLgmModuleAvailSAFs,
       "restLgmModuleTotalSCFs": restLgmModuleTotalSCFs,
       "restLgmModuleAvailSCFs": restLgmModuleAvailSCFs,
       "restPortTable": restPortTable,
       "restPortEntry": restPortEntry,
       "restPortAddr": restPortAddr,
       "restPortDiagnostics": restPortDiagnostics,
       "restPortStatus": restPortStatus,
       "restPortSubStatus": restPortSubStatus,
       "restPortCondition": restPortCondition,
       "restPortSubCondition": restPortSubCondition,
       "restPortType": restPortType,
       "restPortLoopbackType": restPortLoopbackType,
       "restPortLoopbackDuration": restPortLoopbackDuration,
       "restPortLoopbackStatus": restPortLoopbackStatus,
       "restPortLoopbackInitiator": restPortLoopbackInitiator,
       "restPortErrorIndication": restPortErrorIndication,
       "restPortSevereIndication": restPortSevereIndication,
       "restPortBGDiagResults": restPortBGDiagResults,
       "restPortNumberOfBundles": restPortNumberOfBundles,
       "restPortPhasorStatus": restPortPhasorStatus,
       "restPortMappedPhy": restPortMappedPhy,
       "restPortSdmFunction": restPortSdmFunction,
       "restPortSdmTFunction": restPortSdmTFunction,
       "restPortBundleInTone": restPortBundleInTone,
       "restPortSdmSignalStatus": restPortSdmSignalStatus,
       "restPortSdmBipolarViolationInd": restPortSdmBipolarViolationInd,
       "restPortCapabilities": restPortCapabilities,
       "restBundleTable": restBundleTable,
       "restBundleEntry": restBundleEntry,
       "restBundleAddr": restBundleAddr,
       "restBundleDiagnostics": restBundleDiagnostics,
       "restBundleStatus": restBundleStatus,
       "restBundleBwCntStatus": restBundleBwCntStatus,
       "restBundleMillwattSignalABCD": restBundleMillwattSignalABCD,
       "restBundleDS0Map": restBundleDS0Map,
       "restBundleSignalA": restBundleSignalA,
       "restBundleSignalB": restBundleSignalB,
       "restBundleSignalC": restBundleSignalC,
       "restBundleSignalD": restBundleSignalD,
       "restBundleOutSigA": restBundleOutSigA,
       "restBundleOutSigB": restBundleOutSigB,
       "restBundleOutSigC": restBundleOutSigC,
       "restBundleOutSigD": restBundleOutSigD,
       "restINLTable": restINLTable,
       "restINLEntry": restINLEntry,
       "restINLNumber": restINLNumber,
       "restINLAddr": restINLAddr,
       "restINLDiagnostics": restINLDiagnostics,
       "restINLStatus": restINLStatus,
       "restINLSubStatus": restINLSubStatus,
       "restINLLocalBERLevel": restINLLocalBERLevel,
       "restINLLocalBERQuality": restINLLocalBERQuality,
       "restINLRemoteNodeID": restINLRemoteNodeID,
       "restINLRemotePortAddr": restINLRemotePortAddr,
       "restINLRemoteINLID": restINLRemoteINLID,
       "restINLRemoteBERLevel": restINLRemoteBERLevel,
       "restINLRemoteBERQuality": restINLRemoteBERQuality,
       "restINLAvailableTDMBw": restINLAvailableTDMBw,
       "restINLAvailablePacketBw": restINLAvailablePacketBw,
       "restINLLoopbackDuration": restINLLoopbackDuration,
       "restINLLoopbackStatus": restINLLoopbackStatus,
       "restINLTotalCRCErrors": restINLTotalCRCErrors,
       "restINLBERWindowFill": restINLBERWindowFill,
       "restINLNumTdmCh": restINLNumTdmCh,
       "restINLNumFrCh": restINLNumFrCh,
       "restINLSpeed": restINLSpeed,
       "restINLNumSaf": restINLNumSaf,
       "restINLLOSMode": restINLLOSMode,
       "restINLBusFrameMode": restINLBusFrameMode,
       "restINLContentsTable": restINLContentsTable,
       "restINLContentsEntry": restINLContentsEntry,
       "restINLContentsINLNumber": restINLContentsINLNumber,
       "restINLContentsSeqNumber": restINLContentsSeqNumber,
       "restINLContentsSourceNodeID": restINLContentsSourceNodeID,
       "restINLContentsSourceAddr": restINLContentsSourceAddr,
       "restINLContentsDestNodeID": restINLContentsDestNodeID,
       "restINLContentsDestAddr": restINLContentsDestAddr,
       "restChannel": restChannel,
       "restChannelTable": restChannelTable,
       "restChannelEntry": restChannelEntry,
       "restChannelStatusAddr": restChannelStatusAddr,
       "restChannelSourceNodeID": restChannelSourceNodeID,
       "restChannelSourceAddr": restChannelSourceAddr,
       "restChannelDestNodeID": restChannelDestNodeID,
       "restChannelDestAddr": restChannelDestAddr,
       "restChannelDiagnostics": restChannelDiagnostics,
       "restChannelDirectNodeConnect": restChannelDirectNodeConnect,
       "restChannelDirectPathConnect": restChannelDirectPathConnect,
       "restChannelStatus": restChannelStatus,
       "restChannelSubStatus": restChannelSubStatus,
       "restChannelType": restChannelType,
       "restChannelBandwidth": restChannelBandwidth,
       "restChannelBypassCount": restChannelBypassCount,
       "restChannelPath": restChannelPath,
       "restChannelRouteQuality": restChannelRouteQuality,
       "restChannelConnectTime": restChannelConnectTime,
       "restChannelRetryCounter": restChannelRetryCounter,
       "restChannelLoopbackNode": restChannelLoopbackNode,
       "restChannelNodalSubratePath": restChannelNodalSubratePath,
       "restChannelDChOrigNode": restChannelDChOrigNode,
       "restChannelDChOrigAddr": restChannelDChOrigAddr,
       "restChannelDChTermNode": restChannelDChTermNode,
       "restChannelDChTermAddr": restChannelDChTermAddr,
       "restChannelLoopbackModAddr": restChannelLoopbackModAddr,
       "restChannelNetworkPath": restChannelNetworkPath,
       "restPktChannelTable": restPktChannelTable,
       "restPktChannelEntry": restPktChannelEntry,
       "restPktChannelAddr": restPktChannelAddr,
       "restPktChannelDiagnostics": restPktChannelDiagnostics,
       "restPktChannelTestGenStatus": restPktChannelTestGenStatus,
       "restPktChannelTestGenFrSent": restPktChannelTestGenFrSent,
       "restPktChannelTestGenFrRcvOK": restPktChannelTestGenFrRcvOK,
       "restPktChannelTestGenFrRcvErr": restPktChannelTestGenFrRcvErr,
       "restPktChannelTestGenFrTimeOut": restPktChannelTestGenFrTimeOut,
       "restPktChannelPingStatus": restPktChannelPingStatus,
       "restPktChannelPingNumTimes": restPktChannelPingNumTimes,
       "restPktChannelPingNumRemaining": restPktChannelPingNumRemaining,
       "restPktChannelCommStatus": restPktChannelCommStatus,
       "restPktChPingTable": restPktChPingTable,
       "restPktChPingEntry": restPktChPingEntry,
       "restPktChPingAddr": restPktChPingAddr,
       "restPktChPingHopNumber": restPktChPingHopNumber,
       "restPktChPingDelay": restPktChPingDelay,
       "restPktChPingOrigTermCong": restPktChPingOrigTermCong,
       "restPktChPingTermOrigCong": restPktChPingTermOrigCong,
       "restAd10Port": restAd10Port,
       "restAd10AgmPortTable": restAd10AgmPortTable,
       "restAd10AgmPortEntry": restAd10AgmPortEntry,
       "restAd10AgmPortAddr": restAd10AgmPortAddr,
       "restAd10AgmPortControl": restAd10AgmPortControl,
       "restAd10AgmPortCpSpeed": restAd10AgmPortCpSpeed,
       "restAd10AgmPortCpTermType": restAd10AgmPortCpTermType,
       "restAd10AgmPortCpMode": restAd10AgmPortCpMode,
       "restAd10Date": restAd10Date,
       "restAd10Time": restAd10Time,
       "restAd10VersionLabel": restAd10VersionLabel,
       "restAd10UnitSerialNumberStr": restAd10UnitSerialNumberStr,
       "restAd10UnitType": restAd10UnitType,
       "restAd10HWConfig": restAd10HWConfig,
       "restAd10NetworkInterface": restAd10NetworkInterface,
       "restAd10NetworkClockConf": restAd10NetworkClockConf,
       "restAd10TdmMuxSwitchStatus": restAd10TdmMuxSwitchStatus,
       "restAd10SoftloadStatus": restAd10SoftloadStatus,
       "restAd10SoftloadFileSize": restAd10SoftloadFileSize,
       "restAd10SoftloadTransferred": restAd10SoftloadTransferred,
       "restAd10SoftloadStartTime": restAd10SoftloadStartTime,
       "restAd10SoftloadCompletionTime": restAd10SoftloadCompletionTime,
       "restAd10DataPortTable": restAd10DataPortTable,
       "restAd10DataPortEntry": restAd10DataPortEntry,
       "restAd10DataPortAddr": restAd10DataPortAddr,
       "restAd10DataPortDiagnostics": restAd10DataPortDiagnostics,
       "restAd10DataPortMode": restAd10DataPortMode,
       "restAd10DataPortIntfType": restAd10DataPortIntfType,
       "restAd10DataPortClockMode": restAd10DataPortClockMode,
       "restAd10DataPortClockRate": restAd10DataPortClockRate,
       "restAd10DataPortCtsOOS": restAd10DataPortCtsOOS,
       "restAd10DataPortCtsSig": restAd10DataPortCtsSig,
       "restAd10DataPortDcdOOS": restAd10DataPortDcdOOS,
       "restAd10DataPortDcdSig": restAd10DataPortDcdSig,
       "restAd10DataPortDsrOOS": restAd10DataPortDsrOOS,
       "restAd10DataPortDsrSig": restAd10DataPortDsrSig,
       "restAd10DataPortRtsLoopDelay": restAd10DataPortRtsLoopDelay,
       "restAd10DataPortDtrLoopDelay": restAd10DataPortDtrLoopDelay,
       "restAd10DataPortAsyncDataBits": restAd10DataPortAsyncDataBits,
       "restAd10DataPortAsyncStopBits": restAd10DataPortAsyncStopBits,
       "restAd10DataPortAsyncParity": restAd10DataPortAsyncParity,
       "restAd10DataPortAsyncSubMode": restAd10DataPortAsyncSubMode,
       "restAd10DataPortAsyncSubChar": restAd10DataPortAsyncSubChar,
       "restAd10DataPortPktFlowControl": restAd10DataPortPktFlowControl,
       "restAd10DataPortPktTxFlow": restAd10DataPortPktTxFlow,
       "restAd10DataPortPktRxFlow": restAd10DataPortPktRxFlow,
       "restAd10DataPortPktBuildTimeOut": restAd10DataPortPktBuildTimeOut,
       "restAd10DataPortPktRxThreshold": restAd10DataPortPktRxThreshold,
       "restAd10DataPortPktTxThreshold": restAd10DataPortPktTxThreshold,
       "restAd10DataPortPktMinRxFrag": restAd10DataPortPktMinRxFrag,
       "restAd10DataPortBiSyncCharType": restAd10DataPortBiSyncCharType,
       "restAd10DataPortBiSyncParity": restAd10DataPortBiSyncParity,
       "restAd10DataPortBiSyncIdleFill": restAd10DataPortBiSyncIdleFill,
       "restAd10DataPortBiSyncMinPair": restAd10DataPortBiSyncMinPair,
       "restAd10DataPortBiSyncSyncChar": restAd10DataPortBiSyncSyncChar,
       "restAd10DataPortBiSyncPadChar": restAd10DataPortBiSyncPadChar,
       "restAd10DataPortHdlcCrcType": restAd10DataPortHdlcCrcType,
       "restAd10DataPortHdlcLineCode": restAd10DataPortHdlcLineCode,
       "restAd10DataPortHdlcIdleFill": restAd10DataPortHdlcIdleFill,
       "restAd10DataPortHdlcMinFlags": restAd10DataPortHdlcMinFlags,
       "restAd10DataPortModemSigInfo": restAd10DataPortModemSigInfo,
       "restAd10DataPortVcMapDlci": restAd10DataPortVcMapDlci,
       "restAd10DataPortVcMapCir": restAd10DataPortVcMapCir,
       "restAd10DataPortTDMDataRate": restAd10DataPortTDMDataRate,
       "restAd10DataPortType": restAd10DataPortType,
       "restAd10DataPortDtrFlLpDlyDelta": restAd10DataPortDtrFlLpDlyDelta,
       "restAd10DataPortRtsFlLpDlyDelta": restAd10DataPortRtsFlLpDlyDelta,
       "restAd10VoicePortTable": restAd10VoicePortTable,
       "restAd10VoicePortEntry": restAd10VoicePortEntry,
       "restAd10VoicePortAddr": restAd10VoicePortAddr,
       "restAd10VoicePortDiagnostics": restAd10VoicePortDiagnostics,
       "restAd10VoicePortMode": restAd10VoicePortMode,
       "restAd10VoicePortInterface": restAd10VoicePortInterface,
       "restAd10VoicePortEchoCancel": restAd10VoicePortEchoCancel,
       "restAd10VoicePortToneMode": restAd10VoicePortToneMode,
       "restAd10VoicePortNonLinear": restAd10VoicePortNonLinear,
       "restAd10VoicePortEMPolarity": restAd10VoicePortEMPolarity,
       "restAd10VoicePortUncfgCktSig": restAd10VoicePortUncfgCktSig,
       "restAd10VoicePortHookStateRx": restAd10VoicePortHookStateRx,
       "restAd10VoicePortHookStateTx": restAd10VoicePortHookStateTx,
       "restAd10VoicePortTxLevel": restAd10VoicePortTxLevel,
       "restAd10VoicePortRcvLevel": restAd10VoicePortRcvLevel,
       "restAd10VoicePortTermination": restAd10VoicePortTermination,
       "restAd10VoicePortWire": restAd10VoicePortWire,
       "restAd10VoicePortAc15Dial": restAd10VoicePortAc15Dial,
       "restAd10VoicePortTelcoIntType": restAd10VoicePortTelcoIntType,
       "restAd10VoicePortSpeed": restAd10VoicePortSpeed,
       "restAd10VoicePortCompressMode": restAd10VoicePortCompressMode,
       "restAd10VoicePortFaxMode": restAd10VoicePortFaxMode,
       "restAd10VoicePortOOSAudio": restAd10VoicePortOOSAudio,
       "restAd10VoicePortCelpNetSigMd": restAd10VoicePortCelpNetSigMd,
       "restAd10VoicePortCelpNetSigSt": restAd10VoicePortCelpNetSigSt,
       "restAd10PktBandTable": restAd10PktBandTable,
       "restAd10PktBandEntry": restAd10PktBandEntry,
       "restAd10PktBandAddr": restAd10PktBandAddr,
       "restAd10PktBandDiagnostics": restAd10PktBandDiagnostics,
       "restAd10PktBandStatMuxMode": restAd10PktBandStatMuxMode,
       "restAd10PktBandMaxSegSize": restAd10PktBandMaxSegSize,
       "restAd10PktBandBaudRate": restAd10PktBandBaudRate,
       "restAd10PktBandMinBandwidth": restAd10PktBandMinBandwidth,
       "restAd10PktBandCurBandwidth": restAd10PktBandCurBandwidth,
       "restAd10PktBandMaxBandwidth": restAd10PktBandMaxBandwidth,
       "restAsmPort": restAsmPort,
       "restAsmX50Table": restAsmX50Table,
       "restAsmX50PortTable": restAsmX50PortTable,
       "restAsmX50PortEntry": restAsmX50PortEntry,
       "restAsmX50PortAddr": restAsmX50PortAddr,
       "restAsmX50PortEngine": restAsmX50PortEngine,
       "restAsmX50PortRxHouseKbits": restAsmX50PortRxHouseKbits,
       "restAsmX50PortCktTimeSlotMap": restAsmX50PortCktTimeSlotMap,
       "restAsmX50PortAggrStatus": restAsmX50PortAggrStatus,
       "restAsmX50CkTable": restAsmX50CkTable,
       "restAsmX50CkEntry": restAsmX50CkEntry,
       "restAsmX50CkAddr": restAsmX50CkAddr,
       "restAsmX50CkDiagnostics": restAsmX50CkDiagnostics,
       "restAsmX50CkSbitStatus": restAsmX50CkSbitStatus,
       "restAsmX50CkPhasorStatus": restAsmX50CkPhasorStatus,
       "restAsmVoice": restAsmVoice,
       "restAsmVoicePortTable": restAsmVoicePortTable,
       "restAsmVoicePortEntry": restAsmVoicePortEntry,
       "restAsmVoicePortChannelAddr": restAsmVoicePortChannelAddr,
       "restAsmVoicePortAddr": restAsmVoicePortAddr,
       "restAsmVoicePortTrkGrpAddr": restAsmVoicePortTrkGrpAddr,
       "restAsmVoicePortEngine": restAsmVoicePortEngine,
       "restAsmVoicePortPacketSize": restAsmVoicePortPacketSize,
       "restAsmVoicePortBlockSize": restAsmVoicePortBlockSize,
       "restAsmVoicePortEchoCanceller": restAsmVoicePortEchoCanceller,
       "restAsmVoicePortDTMFRelay": restAsmVoicePortDTMFRelay,
       "restAsmVoicePortFaxRelay": restAsmVoicePortFaxRelay,
       "restAsmVoicePortPacket": restAsmVoicePortPacket,
       "restAsmVoicePortSubratePhasor": restAsmVoicePortSubratePhasor,
       "restAsmVoicePortSignalingLOS": restAsmVoicePortSignalingLOS,
       "restAsmVoicePortFrameLOS": restAsmVoicePortFrameLOS,
       "restAsmVoicePortCelpNetSigSt": restAsmVoicePortCelpNetSigSt,
       "restTrunkGroup": restTrunkGroup,
       "restTrkGrpTable": restTrkGrpTable,
       "restTrkGrpEntry": restTrkGrpEntry,
       "restTrkGrpAddr": restTrkGrpAddr,
       "restTrkGrpStatus": restTrkGrpStatus,
       "restTrkGrpContentsTable": restTrkGrpContentsTable,
       "restTrkGrpContentsEntry": restTrkGrpContentsEntry,
       "restTrkGrpContentsAddr": restTrkGrpContentsAddr,
       "restTrkGrpContentsSequenceID": restTrkGrpContentsSequenceID,
       "restTrkGrpContentsSrcNodeID": restTrkGrpContentsSrcNodeID,
       "restTrkGrpContentsSrcTrkGrpAddr": restTrkGrpContentsSrcTrkGrpAddr,
       "restTrkGrpContentsSrcChAddr": restTrkGrpContentsSrcChAddr,
       "restTrkGrpContentsDstNodeID": restTrkGrpContentsDstNodeID,
       "restTrkGrpContentsDstTrkGrpAddr": restTrkGrpContentsDstTrkGrpAddr,
       "restTrkGrpContentsDstChAddr": restTrkGrpContentsDstChAddr,
       "restRtmPort": restRtmPort,
       "restRtmPortTable": restRtmPortTable,
       "restRtmPortEntry": restRtmPortEntry,
       "restRtmPortAddr": restRtmPortAddr,
       "restRtmPortAdFmtRevision": restRtmPortAdFmtRevision,
       "restRtmPortAdType": restRtmPortAdType,
       "restRtmPortAdSubtype": restRtmPortAdSubtype,
       "restRtmPortAdAssemblyNmb": restRtmPortAdAssemblyNmb,
       "restRtmPortAdMotherBrdAssmNmb": restRtmPortAdMotherBrdAssmNmb,
       "restRtmPortAdSerialNmb": restRtmPortAdSerialNmb,
       "restRtmPortAdManufactDate": restRtmPortAdManufactDate,
       "restRtmPortAdRamSize": restRtmPortAdRamSize,
       "restRtmPortAdModDiagResult": restRtmPortAdModDiagResult,
       "restRtmPortAdPortDiagResult": restRtmPortAdPortDiagResult,
       "restRtmPortAdCpMode": restRtmPortAdCpMode,
       "restRtmPortAdCpSpeed": restRtmPortAdCpSpeed,
       "restRtmAdPortTable": restRtmAdPortTable,
       "restRtmAdPortEntry": restRtmAdPortEntry,
       "restRtmAdPortAddr": restRtmAdPortAddr,
       "restRtmAdPortDiagnostics": restRtmAdPortDiagnostics,
       "restRtmAdPortInterface": restRtmAdPortInterface,
       "restRtmAdPortStopBits": restRtmAdPortStopBits,
       "restRtmAdPortGeneration": restRtmAdPortGeneration,
       "restRtmAdPortContention": restRtmAdPortContention,
       "restRtmAdPortOosOper": restRtmAdPortOosOper,
       "restRtmAdPortState": restRtmAdPortState,
       "restRtmAdPortForcedFunc": restRtmAdPortForcedFunc,
       "restRtmAdPortLoopbackType": restRtmAdPortLoopbackType,
       "restRtmAdPortLoopbackStatus": restRtmAdPortLoopbackStatus,
       "restRtmAdPortElecInterface": restRtmAdPortElecInterface,
       "restRtmAdPortElIntStatus": restRtmAdPortElIntStatus,
       "restRtmAdPortParSubstitution": restRtmAdPortParSubstitution,
       "restRtmAdPortParSubstChar": restRtmAdPortParSubstChar,
       "restRtmAdPortPhasorStatus": restRtmAdPortPhasorStatus,
       "restRtmAdPortAdPhasorStatus": restRtmAdPortAdPhasorStatus,
       "restRtmAdPortAdFunctions": restRtmAdPortAdFunctions,
       "restRtmAdPortParity": restRtmAdPortParity,
       "restLgmPort": restLgmPort,
       "restLgmPortTable": restLgmPortTable,
       "restLgmPortEntry": restLgmPortEntry,
       "restLgmPortAddr": restLgmPortAddr,
       "restLgmPortLocalBERQuality": restLgmPortLocalBERQuality,
       "restLgmPortBERWindowFill": restLgmPortBERWindowFill,
       "restLgmPortRemoteNodeID": restLgmPortRemoteNodeID,
       "restLgmPortRemotePortAddr": restLgmPortRemotePortAddr,
       "restLgmPortRemoteBERQuality": restLgmPortRemoteBERQuality,
       "restLgmPortRemoteRevision": restLgmPortRemoteRevision,
       "restLgmPortAvailableBw": restLgmPortAvailableBw,
       "restLgmPortUsedBw": restLgmPortUsedBw,
       "restLgmPortNumCh": restLgmPortNumCh,
       "restLgmPortLgmPort": restLgmPortLgmPort,
       "restLgmPortLinkSpeed": restLgmPortLinkSpeed,
       "restLgmPortDiagnostics": restLgmPortDiagnostics,
       "restLgmPortSyncState": restLgmPortSyncState,
       "restLgmContentsTable": restLgmContentsTable,
       "restLgmContentsEntry": restLgmContentsEntry,
       "restLgmContentsAddr": restLgmContentsAddr,
       "restLgmContentsSequenceID": restLgmContentsSequenceID,
       "restLgmContentsSourceNodeID": restLgmContentsSourceNodeID,
       "restLgmContentsSourceAddr": restLgmContentsSourceAddr,
       "restLgmContentsDestNodeID": restLgmContentsDestNodeID,
       "restLgmContentsDestAddr": restLgmContentsDestAddr,
       "restSaf": restSaf,
       "restSafTable": restSafTable,
       "restSafEntry": restSafEntry,
       "restSafAddr": restSafAddr,
       "restSafStatus": restSafStatus,
       "restSafSubStatus": restSafSubStatus,
       "restSafRemoteNode": restSafRemoteNode,
       "restSafRemoteAddr": restSafRemoteAddr,
       "restSafInlNumber": restSafInlNumber,
       "restSafBandwidthAvail": restSafBandwidthAvail,
       "restSafNumChannels": restSafNumChannels,
       "restSafHWPhasorStatus": restSafHWPhasorStatus,
       "restSafSWPhasorStatus": restSafSWPhasorStatus,
       "restSafModNumChannels": restSafModNumChannels,
       "restSafModBandwidthAvail": restSafModBandwidthAvail,
       "restSafDiagnostics": restSafDiagnostics,
       "restSafFrameSwitchLocation": restSafFrameSwitchLocation,
       "restSafFrameSwitchIndicator": restSafFrameSwitchIndicator,
       "restSafRemoteStatus": restSafRemoteStatus,
       "restSafSyncErrors": restSafSyncErrors,
       "restSafOosErrors": restSafOosErrors,
       "restSafPhasorStatus": restSafPhasorStatus,
       "restSafContentsTable": restSafContentsTable,
       "restSafContentsEntry": restSafContentsEntry,
       "restSafContentsAddr": restSafContentsAddr,
       "restSafContentsSeqNum": restSafContentsSeqNum,
       "restSafContentsSrcNode": restSafContentsSrcNode,
       "restSafContentsSrcAddr": restSafContentsSrcAddr,
       "restSafContentsDestNode": restSafContentsDestNode,
       "restSafContentsDestAddr": restSafContentsDestAddr,
       "restDsmPort": restDsmPort,
       "restDsmDChPortTable": restDsmDChPortTable,
       "restDsmDChPortEntry": restDsmDChPortEntry,
       "restDsmDChPortAddr": restDsmDChPortAddr,
       "restDsmDChPortDiagnostics": restDsmDChPortDiagnostics,
       "restDsmDChPortNumCallsInProc": restDsmDChPortNumCallsInProc,
       "restDsmDChPortNumCallsConn": restDsmDChPortNumCallsConn,
       "restDsmDChCallRealTable": restDsmDChCallRealTable,
       "restDsmDChCallRealEntry": restDsmDChCallRealEntry,
       "restDsmDChCallRealAddr": restDsmDChCallRealAddr,
       "restDsmDChCallRealBundle": restDsmDChCallRealBundle,
       "restDsmDChCallRealCDRContents": restDsmDChCallRealCDRContents,
       "restDsmDChCallRealDiagnostics": restDsmDChCallRealDiagnostics,
       "restDsmDChCallRealLayer2Status": restDsmDChCallRealLayer2Status,
       "restDsmDChCallRealLayer2State": restDsmDChCallRealLayer2State,
       "restDsmDChCallRealLayer3State": restDsmDChCallRealLayer3State,
       "restDsmDChCallRealTransitState": restDsmDChCallRealTransitState,
       "restDsmDChCallVirtTable": restDsmDChCallVirtTable,
       "restDsmDChCallVirtEntry": restDsmDChCallVirtEntry,
       "restDsmDChCallVirtAddr": restDsmDChCallVirtAddr,
       "restDsmDChCallVirtNumber": restDsmDChCallVirtNumber,
       "restDsmDChCallVirtCDRContents": restDsmDChCallVirtCDRContents,
       "restDsmDChCallVirtDiagnostics": restDsmDChCallVirtDiagnostics,
       "restDsmDChCallVirtLayer2Status": restDsmDChCallVirtLayer2Status,
       "restDsmDChCallVirtLayer2State": restDsmDChCallVirtLayer2State,
       "restDsmDChCallVirtLayer3State": restDsmDChCallVirtLayer3State,
       "restDsmDChCallVirtTransitState": restDsmDChCallVirtTransitState,
       "restHwRsc": restHwRsc,
       "restHwRscEngineTable": restHwRscEngineTable,
       "restHwRscEngineEntry": restHwRscEngineEntry,
       "restHwRscEngineModAddr": restHwRscEngineModAddr,
       "restHwRscEngineID": restHwRscEngineID,
       "restHwRscEngineDiagnostics": restHwRscEngineDiagnostics,
       "restHwRscEngineStatus": restHwRscEngineStatus,
       "restHwRscEngineApplication": restHwRscEngineApplication,
       "restHwRscEngineMaxPorts": restHwRscEngineMaxPorts,
       "restHwRscEngineNumPorts": restHwRscEngineNumPorts,
       "restHwRscEngineMaxSAFs": restHwRscEngineMaxSAFs,
       "restHwRscEngineNumSAFs": restHwRscEngineNumSAFs,
       "restHwRscEngineMaxSCFs": restHwRscEngineMaxSCFs,
       "restHwRscEngineNumSCFs": restHwRscEngineNumSCFs,
       "restHwRscEngineMaxLoad": restHwRscEngineMaxLoad,
       "restHwRscEngineCurLoad": restHwRscEngineCurLoad,
       "restHwRscEngineSubStatus": restHwRscEngineSubStatus,
       "reStatistics": reStatistics,
       "restStatPort": restStatPort,
       "restStatPortT1mTable": restStatPortT1mTable,
       "restStatPortT1mEntry": restStatPortT1mEntry,
       "restStatPortT1mAddr": restStatPortT1mAddr,
       "restStatPortT1mIndex": restStatPortT1mIndex,
       "restStatPortT1mStartTime": restStatPortT1mStartTime,
       "restStatPortT1mErrSec": restStatPortT1mErrSec,
       "restStatPortT1mSevErrSec": restStatPortT1mSevErrSec,
       "restStatPortT1mBstyErrSec": restStatPortT1mBstyErrSec,
       "restStatPortT1mUnavailSec": restStatPortT1mUnavailSec,
       "restStatPortT1mLostFrame": restStatPortT1mLostFrame,
       "restStatPortT1mControlMode": restStatPortT1mControlMode,
       "restStatPortE1mTable": restStatPortE1mTable,
       "restStatPortE1mEntry": restStatPortE1mEntry,
       "restStatPortE1mAddr": restStatPortE1mAddr,
       "restStatPortE1mIndex": restStatPortE1mIndex,
       "restStatPortE1mStartTime": restStatPortE1mStartTime,
       "restStatPortE1mErrSec": restStatPortE1mErrSec,
       "restStatPortE1mSevErrSec": restStatPortE1mSevErrSec,
       "restStatPortE1mBstyErrSec": restStatPortE1mBstyErrSec,
       "restStatPortE1mUnavailSec": restStatPortE1mUnavailSec,
       "restStatPortE1mLostFrame": restStatPortE1mLostFrame,
       "restStatPortE1mControlMode": restStatPortE1mControlMode,
       "restStatPortPktTable": restStatPortPktTable,
       "restStatPortPktEntry": restStatPortPktEntry,
       "restStatPortPktAddr": restStatPortPktAddr,
       "restStatPortPktControlMode": restStatPortPktControlMode,
       "restStatPortPktSegmentSent": restStatPortPktSegmentSent,
       "restStatPortPktSegmentRecv": restStatPortPktSegmentRecv,
       "restStatPortPktOctetSent": restStatPortPktOctetSent,
       "restStatPortPktOctetRecv": restStatPortPktOctetRecv,
       "restStatPortPktDlciDiscard": restStatPortPktDlciDiscard,
       "restStatPortPktBadAddrDiscard": restStatPortPktBadAddrDiscard,
       "restStatPortPktOvrszeDiscard": restStatPortPktOvrszeDiscard,
       "restStatPortPktUnderszeDiscard": restStatPortPktUnderszeDiscard,
       "restStatPortPktCRCDiscard": restStatPortPktCRCDiscard,
       "restStatPortPktSwOvrRunDiscard": restStatPortPktSwOvrRunDiscard,
       "restStatPortPktUnderRunDiscard": restStatPortPktUnderRunDiscard,
       "restStatPortPktAbortDiscard": restStatPortPktAbortDiscard,
       "restStatPortPktHwOvrRunDiscard": restStatPortPktHwOvrRunDiscard,
       "restStatPortPktLmiSegmentSent": restStatPortPktLmiSegmentSent,
       "restStatPortPktLmiSegmentRecv": restStatPortPktLmiSegmentRecv,
       "restStatPortPktLmiSyntaxErr": restStatPortPktLmiSyntaxErr,
       "restStatPortPktLmiWrongSeq": restStatPortPktLmiWrongSeq,
       "restStatPortPktLmiPollTimeOut": restStatPortPktLmiPollTimeOut,
       "restStatPortPktLmiWaitTimeOut": restStatPortPktLmiWaitTimeOut,
       "restStatPortPktLmiTxSeqNum": restStatPortPktLmiTxSeqNum,
       "restStatPortPktLmiRxSeqNum": restStatPortPktLmiRxSeqNum,
       "restStatPortPktLmiNumGoodEvents": restStatPortPktLmiNumGoodEvents,
       "restStatPortPktLmiNumBadEvents": restStatPortPktLmiNumBadEvents,
       "restStatPortPktLmiEventHistory": restStatPortPktLmiEventHistory,
       "restStatPortAsmX50Table": restStatPortAsmX50Table,
       "restStatPortAsmX50Entry": restStatPortAsmX50Entry,
       "restStatPortAsmX50Addr": restStatPortAsmX50Addr,
       "restStatPortAsmX50Control": restStatPortAsmX50Control,
       "restStatPortAsmX50RxFrameErrors": restStatPortAsmX50RxFrameErrors,
       "restStatPortAsmX50LocalOs": restStatPortAsmX50LocalOs,
       "restStatPortAsmX50RemoteOs": restStatPortAsmX50RemoteOs,
       "restStatPortRtmTable": restStatPortRtmTable,
       "restStatPortRtmEntry": restStatPortRtmEntry,
       "restStatPortRtmAddr": restStatPortRtmAddr,
       "restStatPortRtmControl": restStatPortRtmControl,
       "restStatPortRtmUIFarEndBlkErr": restStatPortRtmUIFarEndBlkErr,
       "restStatPortRtmUINearEndBlkErr": restStatPortRtmUINearEndBlkErr,
       "restStatPortRtmAdUIFarEndBlkErr": restStatPortRtmAdUIFarEndBlkErr,
       "restStatPortRtmAdUINrEndBlkErr": restStatPortRtmAdUINrEndBlkErr,
       "restStatPortRtmOOSTransitions": restStatPortRtmOOSTransitions,
       "restStatPortAsmVoiceTable": restStatPortAsmVoiceTable,
       "restStatPortAsmVoiceEntry": restStatPortAsmVoiceEntry,
       "restStatPortAsmVoiceChanAddr": restStatPortAsmVoiceChanAddr,
       "restStatPortAsmVoiceControl": restStatPortAsmVoiceControl,
       "restStatPortAsmVoiceFrameOOSs": restStatPortAsmVoiceFrameOOSs,
       "restStatPortAsmVoiceSignalOOSs": restStatPortAsmVoiceSignalOOSs,
       "restStatPortAsmVoiceHighBERs": restStatPortAsmVoiceHighBERs,
       "restStatPortLgmTable": restStatPortLgmTable,
       "restStatPortLgmEntry": restStatPortLgmEntry,
       "restStatPortLgmAddr": restStatPortLgmAddr,
       "restStatPortLgmControlMode": restStatPortLgmControlMode,
       "restStatPortLgmBadSync": restStatPortLgmBadSync,
       "restStatPortLgmOosCount": restStatPortLgmOosCount,
       "restStatPortLgmFrameSent": restStatPortLgmFrameSent,
       "restStatPortLgmFrameRecd": restStatPortLgmFrameRecd,
       "restStatPortLgmFrameReTx": restStatPortLgmFrameReTx,
       "restStatPortLgmFrameNak": restStatPortLgmFrameNak,
       "restStatPortLgmSabmSent": restStatPortLgmSabmSent,
       "restStatPortLgmSabmRecd": restStatPortLgmSabmRecd,
       "restStatPortLgmRnrSent": restStatPortLgmRnrSent,
       "restStatPortLgmRnrRecd": restStatPortLgmRnrRecd,
       "restStatPortDsm": restStatPortDsm,
       "restStatPortDsmDChTable": restStatPortDsmDChTable,
       "restStatPortDsmDChEntry": restStatPortDsmDChEntry,
       "restStatPortDsmDChAddr": restStatPortDsmDChAddr,
       "restStatPortDsmDChControlMode": restStatPortDsmDChControlMode,
       "restStatPortDsmDChOrigAttempts": restStatPortDsmDChOrigAttempts,
       "restStatPortDsmDChTermAttempts": restStatPortDsmDChTermAttempts,
       "restStatPortDsmDChPbxLayer2Errs": restStatPortDsmDChPbxLayer2Errs,
       "restStatPortDsmDChPbxLayer3Errs": restStatPortDsmDChPbxLayer3Errs,
       "restStatPortDsmDChPbxLinkResets": restStatPortDsmDChPbxLinkResets,
       "restStatPortDsmDChPbxDisconns": restStatPortDsmDChPbxDisconns,
       "restStatPortDsmDChPbxUnkExchs": restStatPortDsmDChPbxUnkExchs,
       "restStatPortDsmDChPbxNoBws": restStatPortDsmDChPbxNoBws,
       "restStatPortDsmDChPbxNoCmprs": restStatPortDsmDChPbxNoCmprs,
       "restStatPortDsmDChPbxNoBchs": restStatPortDsmDChPbxNoBchs,
       "restStatPortDsmDChPbxOtherFails": restStatPortDsmDChPbxOtherFails,
       "restStatPortDsmDChNetDisconns": restStatPortDsmDChNetDisconns,
       "restStatPortDsmDChNetOtherFails": restStatPortDsmDChNetOtherFails,
       "restStatCh": restStatCh,
       "restStatChPktTable": restStatChPktTable,
       "restStatChPktEntry": restStatChPktEntry,
       "restStatChPktAddr": restStatChPktAddr,
       "restStatChPktSourceNodeID": restStatChPktSourceNodeID,
       "restStatChPktSourceChAddr": restStatChPktSourceChAddr,
       "restStatChPktDestNodeID": restStatChPktDestNodeID,
       "restStatChPktDestChAddr": restStatChPktDestChAddr,
       "restStatChPktControlMode": restStatChPktControlMode,
       "restStatChPktSegmentsToUser": restStatChPktSegmentsToUser,
       "restStatChPktSegmentsToNetwork": restStatChPktSegmentsToNetwork,
       "restStatChPktYellowThreshold": restStatChPktYellowThreshold,
       "restStatChPktRedThreshold": restStatChPktRedThreshold,
       "restStatChPktCritThreshold": restStatChPktCritThreshold,
       "restStatChPktPortCongMode": restStatChPktPortCongMode,
       "restStatChPktNetCongMode": restStatChPktNetCongMode,
       "restStatChPktRemoteCongMode": restStatChPktRemoteCongMode,
       "restStatChPktCIRCredit": restStatChPktCIRCredit,
       "restStatChPktEIRCredit": restStatChPktEIRCredit,
       "restStatChPktFECNSent": restStatChPktFECNSent,
       "restStatChPktBECNSent": restStatChPktBECNSent,
       "restStatChPktPortCIRSegSent": restStatChPktPortCIRSegSent,
       "restStatChPktPortCIRSegRcv": restStatChPktPortCIRSegRcv,
       "restStatChPktPortEIRSegSent": restStatChPktPortEIRSegSent,
       "restStatChPktPortEIRSegRcv": restStatChPktPortEIRSegRcv,
       "restStatChPktPortCIROctetSent": restStatChPktPortCIROctetSent,
       "restStatChPktPortCIROctetRcv": restStatChPktPortCIROctetRcv,
       "restStatChPktPortEIROctetSent": restStatChPktPortEIROctetSent,
       "restStatChPktPortEIROctetRcv": restStatChPktPortEIROctetRcv,
       "restStatChPktPortCIRSegDrops": restStatChPktPortCIRSegDrops,
       "restStatChPktPortEIRSegDrops": restStatChPktPortEIRSegDrops,
       "restStatChPktPortCIROctetDrops": restStatChPktPortCIROctetDrops,
       "restStatChPktPortEIROctetDrops": restStatChPktPortEIROctetDrops,
       "restStatChPktNetCIRSegSent": restStatChPktNetCIRSegSent,
       "restStatChPktNetCIRSegRcv": restStatChPktNetCIRSegRcv,
       "restStatChPktNetEIRSegSent": restStatChPktNetEIRSegSent,
       "restStatChPktNetEIRSegRcv": restStatChPktNetEIRSegRcv,
       "restStatChPktNetCIROctetSent": restStatChPktNetCIROctetSent,
       "restStatChPktNetCIROctetRcv": restStatChPktNetCIROctetRcv,
       "restStatChPktNetEIROctetSent": restStatChPktNetEIROctetSent,
       "restStatChPktNetEIROctetRcv": restStatChPktNetEIROctetRcv,
       "restStatChPktNetCIRSegDrops": restStatChPktNetCIRSegDrops,
       "restStatChPktNetEIRSegDrops": restStatChPktNetEIRSegDrops,
       "restStatChPktNetCIROctetDrops": restStatChPktNetCIROctetDrops,
       "restStatChPktNetEIROctetDrops": restStatChPktNetEIROctetDrops,
       "restStatChPktSegEIRDiscard": restStatChPktSegEIRDiscard,
       "restStatChPktSegSeqDiscard": restStatChPktSegSeqDiscard,
       "restStatChPktSegCongPortDiscard": restStatChPktSegCongPortDiscard,
       "restStatChPktSegCongNetDiscard": restStatChPktSegCongNetDiscard,
       "restStatChPktSegExcDiscard": restStatChPktSegExcDiscard,
       "restStatChPktSegUnderszDiscard": restStatChPktSegUnderszDiscard,
       "restStatChPktSegV120ErrDiscard": restStatChPktSegV120ErrDiscard,
       "restStatChPktSegInacPortDiscard": restStatChPktSegInacPortDiscard,
       "restStatChPktSegInacNetDiscard": restStatChPktSegInacNetDiscard,
       "restStatChPktBypTable": restStatChPktBypTable,
       "restStatChPktBypEntry": restStatChPktBypEntry,
       "restStatChPktBypNodeID": restStatChPktBypNodeID,
       "restStatChPktBypAddr": restStatChPktBypAddr,
       "restStatChPktBypSourceNodeID": restStatChPktBypSourceNodeID,
       "restStatChPktBypSourceChAddr": restStatChPktBypSourceChAddr,
       "restStatChPktBypDestNodeID": restStatChPktBypDestNodeID,
       "restStatChPktBypDestChAddr": restStatChPktBypDestChAddr,
       "restStatChPktBypControlMode": restStatChPktBypControlMode,
       "restStatChPktBypSegmentsToSrc": restStatChPktBypSegmentsToSrc,
       "restStatChPktBypSegmentsToDst": restStatChPktBypSegmentsToDst,
       "restStatChPktBypYellowThreshold": restStatChPktBypYellowThreshold,
       "restStatChPktBypRedThreshold": restStatChPktBypRedThreshold,
       "restStatChPktBypCritThreshold": restStatChPktBypCritThreshold,
       "restStatChPktBypInCongMode": restStatChPktBypInCongMode,
       "restStatChPktBypOutCongMode": restStatChPktBypOutCongMode,
       "restStatChPktBypInCIRSegSent": restStatChPktBypInCIRSegSent,
       "restStatChPktBypInCIRSegRcv": restStatChPktBypInCIRSegRcv,
       "restStatChPktBypInEIRSegSent": restStatChPktBypInEIRSegSent,
       "restStatChPktBypInEIRSegRcv": restStatChPktBypInEIRSegRcv,
       "restStatChPktBypInCIROctetSent": restStatChPktBypInCIROctetSent,
       "restStatChPktBypInCIROctetRcv": restStatChPktBypInCIROctetRcv,
       "restStatChPktBypInEIROctetSent": restStatChPktBypInEIROctetSent,
       "restStatChPktBypInEIROctetRcv": restStatChPktBypInEIROctetRcv,
       "restStatChPktBypInCIRSegDrop": restStatChPktBypInCIRSegDrop,
       "restStatChPktBypInEIRSegDrop": restStatChPktBypInEIRSegDrop,
       "restStatChPktBypInCIROctetDrop": restStatChPktBypInCIROctetDrop,
       "restStatChPktBypInEIROctetDrop": restStatChPktBypInEIROctetDrop,
       "restStatChPktBypOutCIRSegSent": restStatChPktBypOutCIRSegSent,
       "restStatChPktBypOutCIRSegRcv": restStatChPktBypOutCIRSegRcv,
       "restStatChPktBypOutEIRSegSent": restStatChPktBypOutEIRSegSent,
       "restStatChPktBypOutEIRSegRcv": restStatChPktBypOutEIRSegRcv,
       "restStatChPktBypOutCIROctetSent": restStatChPktBypOutCIROctetSent,
       "restStatChPktBypOutCIROctetRcv": restStatChPktBypOutCIROctetRcv,
       "restStatChPktBypOutEIROctetSent": restStatChPktBypOutEIROctetSent,
       "restStatChPktBypOutEIROctetRcv": restStatChPktBypOutEIROctetRcv,
       "restStatChPktBypOutCIRSegDrop": restStatChPktBypOutCIRSegDrop,
       "restStatChPktBypOutEIRSegDrop": restStatChPktBypOutEIRSegDrop,
       "restStatChPktBypOutCIROctetDrop": restStatChPktBypOutCIROctetDrop,
       "restStatChPktBypOutEIROctetDrop": restStatChPktBypOutEIROctetDrop,
       "restStatChPktBypSegSrcEIRDisc": restStatChPktBypSegSrcEIRDisc,
       "restStatChPktBypSegDstEIRDisc": restStatChPktBypSegDstEIRDisc,
       "restStatChPktBypSegSrcDstConDsc": restStatChPktBypSegSrcDstConDsc,
       "restStatChPktBypSegDstSrcConDsc": restStatChPktBypSegDstSrcConDsc,
       "restStatChPktBypSegInacSrcDisc": restStatChPktBypSegInacSrcDisc,
       "restStatChPktBypSegInacDstDisc": restStatChPktBypSegInacDstDisc,
       "restStatInl": restStatInl,
       "restStatInlTable": restStatInlTable,
       "restStatInlEntry": restStatInlEntry,
       "restStatInlNumber": restStatInlNumber,
       "restStatInlIndex": restStatInlIndex,
       "restStatInlStartTime": restStatInlStartTime,
       "restStatInlPktOctetSent": restStatInlPktOctetSent,
       "restStatInlPktOctetRcv": restStatInlPktOctetRcv,
       "restStatAd10": restStatAd10,
       "restStatAd10DataPortTable": restStatAd10DataPortTable,
       "restStatAd10DataPortEntry": restStatAd10DataPortEntry,
       "restStatAd10DataPortAddr": restStatAd10DataPortAddr,
       "restStatAd10DataPortControl": restStatAd10DataPortControl,
       "restStatAd10DataPortTxTotFrames": restStatAd10DataPortTxTotFrames,
       "restStatAd10DataPortRxTotFrames": restStatAd10DataPortRxTotFrames,
       "restStatAd10DataPortRxFrSeqErr": restStatAd10DataPortRxFrSeqErr,
       "restStatAd10DataPortRxFrHdrErr": restStatAd10DataPortRxFrHdrErr,
       "restStatAd10DataPortRxCongDisc": restStatAd10DataPortRxCongDisc,
       "restStatAd10DataPortTxCongDisc": restStatAd10DataPortTxCongDisc,
       "restStatAd10DataPortRxBecnCount": restStatAd10DataPortRxBecnCount,
       "restStatAd10DataPortTxBecnCount": restStatAd10DataPortTxBecnCount,
       "restStatAd10DataPortTxSCCOvrRun": restStatAd10DataPortTxSCCOvrRun,
       "restStatAd10DataPortRxSCCUndRun": restStatAd10DataPortRxSCCUndRun,
       "restStatAd10DataPortTxSCCAbort": restStatAd10DataPortTxSCCAbort,
       "restStatAd10DataPortTxFrOvrSize": restStatAd10DataPortTxFrOvrSize,
       "restStatAd10DataPortTxFifoFlCtl": restStatAd10DataPortTxFifoFlCtl,
       "restStatAd10DataPortRxMinSegHt": restStatAd10DataPortRxMinSegHt,
       "restStatAd10DataPortBertSynLoss": restStatAd10DataPortBertSynLoss,
       "restStatAd10DataPortBertByteCnt": restStatAd10DataPortBertByteCnt,
       "restStatAd10DataPortBertBitErr": restStatAd10DataPortBertBitErr,
       "restStatAd10VoicePortTable": restStatAd10VoicePortTable,
       "restStatAd10VoicePortEntry": restStatAd10VoicePortEntry,
       "restStatAd10VoicePortAddr": restStatAd10VoicePortAddr,
       "restStatAd10VoicePortControl": restStatAd10VoicePortControl,
       "restStatAd10VoicePortHber": restStatAd10VoicePortHber,
       "restStatAd10VoicePortSyncLoss": restStatAd10VoicePortSyncLoss,
       "restStatAd10VoicePortBertByte": restStatAd10VoicePortBertByte,
       "restStatAd10VoicePortBertBitErr": restStatAd10VoicePortBertBitErr,
       "restStatAd10PktBandTable": restStatAd10PktBandTable,
       "restStatAd10PktBandEntry": restStatAd10PktBandEntry,
       "restStatAd10PktBandAddr": restStatAd10PktBandAddr,
       "restStatAd10PktBandControl": restStatAd10PktBandControl,
       "restStatAd10PktBandTxTotFrames": restStatAd10PktBandTxTotFrames,
       "restStatAd10PktBandRxTotFrames": restStatAd10PktBandRxTotFrames,
       "restStatAd10PktBandRxFrErr": restStatAd10PktBandRxFrErr,
       "restStatAd10PktBandRxSCCOvrRun": restStatAd10PktBandRxSCCOvrRun,
       "restStatAd10PktBandTxSCCUndRun": restStatAd10PktBandTxSCCUndRun,
       "restStatAd10PktBandRxSCCAbort": restStatAd10PktBandRxSCCAbort,
       "restStatAd10PktBandRxInvDlci": restStatAd10PktBandRxInvDlci,
       "restStatAd10PktBandRxFrOvrSize": restStatAd10PktBandRxFrOvrSize,
       "restStatAd10PktBandRxCrcErr": restStatAd10PktBandRxCrcErr,
       "restStatModule": restStatModule,
       "restStatModDsmTable": restStatModDsmTable,
       "restStatModDsmEntry": restStatModDsmEntry,
       "restStatModDsmAddr": restStatModDsmAddr,
       "restStatModDsmControlMode": restStatModDsmControlMode,
       "restStatModDsmRejectOrigCalls": restStatModDsmRejectOrigCalls,
       "restStatModDsmRejectTermCalls": restStatModDsmRejectTermCalls,
       "alarm": alarm,
       "alPartitionHeader": alPartitionHeader,
       "alPartitionControl": alPartitionControl,
       "alPartitionCRCCheck": alPartitionCRCCheck,
       "alPartitionFlushMode": alPartitionFlushMode,
       "alSystemProfile": alSystemProfile,
       "alSysLogSize": alSysLogSize,
       "alSysLogSizeAvailable": alSysLogSizeAvailable,
       "alLogTable": alLogTable,
       "alLogEntry": alLogEntry,
       "alLogIndex": alLogIndex,
       "alLogDiagnostics": alLogDiagnostics,
       "alLogState": alLogState,
       "alLogTotalEntries": alLogTotalEntries,
       "alLogAvailableEntries": alLogAvailableEntries,
       "alLogNotificationList": alLogNotificationList,
       "alLogClearEntries": alLogClearEntries,
       "alLogPartitionID": alLogPartitionID,
       "alLogRecTable": alLogRecTable,
       "alLogRecEntry": alLogRecEntry,
       "alLogRecIndex": alLogRecIndex,
       "alLogRecContents": alLogRecContents,
       "alTrapContents": alTrapContents}
)

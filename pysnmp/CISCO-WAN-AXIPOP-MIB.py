# SNMP MIB module (CISCO-WAN-AXIPOP-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/CISCO-WAN-AXIPOP-MIB
# Produced by pysmi-1.5.4 at Mon Oct 14 21:12:52 2024
# On host MacBook-Pro.local platform Darwin version 24.0.0 by user lextm
# Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(atm,
 atmAddressRegistration,
 atmLineCnfGrp,
 atmLineCntGrp,
 atmLmiSignaling,
 ausmChan,
 ausmPort,
 ausmPortCnf,
 ausmPortCnt,
 axisDiagnostics,
 basisAsm,
 basisLines,
 bbChanCnfGrp,
 bbChanCntGrp,
 bbChanStateGrp,
 bbIfCnf,
 bbIfCnfResPartGrp,
 bbIfCnt,
 bbIfStateGrp,
 cardGeneric,
 cardSpecific,
 cesmChan,
 circuitEmulation,
 dsx0Vism,
 frChan,
 frPort,
 frPortCnf,
 frPortCnfResPartGrp,
 frPortCnfSig,
 frPortCnfX21PortGrp,
 frPortCnt,
 frPortCntSig,
 frPortServiceQueGrp,
 frameRelay,
 par,
 rpmChanGrp,
 rpmInterface,
 rpmPort,
 virtualInterface,
 vismChanCnfGrp,
 vismChanGrp,
 vismPort,
 voice,
 x21) = mibBuilder.importSymbols(
    "BASIS-MIB",
    "atm",
    "atmAddressRegistration",
    "atmLineCnfGrp",
    "atmLineCntGrp",
    "atmLmiSignaling",
    "ausmChan",
    "ausmPort",
    "ausmPortCnf",
    "ausmPortCnt",
    "axisDiagnostics",
    "basisAsm",
    "basisLines",
    "bbChanCnfGrp",
    "bbChanCntGrp",
    "bbChanStateGrp",
    "bbIfCnf",
    "bbIfCnfResPartGrp",
    "bbIfCnt",
    "bbIfStateGrp",
    "cardGeneric",
    "cardSpecific",
    "cesmChan",
    "circuitEmulation",
    "dsx0Vism",
    "frChan",
    "frPort",
    "frPortCnf",
    "frPortCnfResPartGrp",
    "frPortCnfSig",
    "frPortCnfX21PortGrp",
    "frPortCnt",
    "frPortCntSig",
    "frPortServiceQueGrp",
    "frameRelay",
    "par",
    "rpmChanGrp",
    "rpmInterface",
    "rpmPort",
    "virtualInterface",
    "vismChanCnfGrp",
    "vismChanGrp",
    "vismPort",
    "voice",
    "x21")

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "iso")

(DisplayString,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions



class AtmAddress(OctetString):
    """Custom type AtmAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )





class RpmNsapAddress(OctetString):
    """Custom type RpmNsapAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 20),
    )





class IfNsapAddress(OctetString):
    """Custom type IfNsapAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 20),
    )





class NetPrefix(OctetString):
    """Custom type NetPrefix based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 13),
    )





class TruthValue(Integer32):
    """Custom type TruthValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 2),
          ("true", 1))
    )




# TEXTUAL-CONVENTIONS



# MIB Managed Objects in the order of their OIDs

_AsmAlarmTable_Object = MibTable
asmAlarmTable = _AsmAlarmTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1)
)
if mibBuilder.loadTexts:
    asmAlarmTable.setStatus("mandatory")
_AsmAlarmEntry_Object = MibTableRow
asmAlarmEntry = _AsmAlarmEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1)
)
asmAlarmEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "asmAlarmNum"),
)
if mibBuilder.loadTexts:
    asmAlarmEntry.setStatus("mandatory")
_AsmAlarmNum_Type = Integer32
_AsmAlarmNum_Object = MibTableColumn
asmAlarmNum = _AsmAlarmNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 1),
    _AsmAlarmNum_Type()
)
asmAlarmNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asmAlarmNum.setStatus("mandatory")


class _AsmAlarmType_Type(Integer32):
    """Custom type asmAlarmType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("alarmDCLevel", 4),
          ("alarmFanUnit", 5),
          ("alarmOther", 1),
          ("alarmPSU", 3),
          ("alarmTemperature", 2))
    )


_AsmAlarmType_Type.__name__ = "Integer32"
_AsmAlarmType_Object = MibTableColumn
asmAlarmType = _AsmAlarmType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 2),
    _AsmAlarmType_Type()
)
asmAlarmType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asmAlarmType.setStatus("mandatory")
_AsmAlarmUnitNum_Type = Integer32
_AsmAlarmUnitNum_Object = MibTableColumn
asmAlarmUnitNum = _AsmAlarmUnitNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 3),
    _AsmAlarmUnitNum_Type()
)
asmAlarmUnitNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asmAlarmUnitNum.setStatus("mandatory")


class _AsmAlarmThreshold_Type(Integer32):
    """Custom type asmAlarmThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_AsmAlarmThreshold_Type.__name__ = "Integer32"
_AsmAlarmThreshold_Object = MibTableColumn
asmAlarmThreshold = _AsmAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 4),
    _AsmAlarmThreshold_Type()
)
asmAlarmThreshold.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asmAlarmThreshold.setStatus("mandatory")


class _AsmAlarmSeverity_Type(Integer32):
    """Custom type asmAlarmSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarmMajor", 2),
          ("alarmMinor", 1))
    )


_AsmAlarmSeverity_Type.__name__ = "Integer32"
_AsmAlarmSeverity_Object = MibTableColumn
asmAlarmSeverity = _AsmAlarmSeverity_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 5),
    _AsmAlarmSeverity_Type()
)
asmAlarmSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asmAlarmSeverity.setStatus("mandatory")


class _AsmUnitMeasurable_Type(Integer32):
    """Custom type asmUnitMeasurable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_AsmUnitMeasurable_Type.__name__ = "Integer32"
_AsmUnitMeasurable_Object = MibTableColumn
asmUnitMeasurable = _AsmUnitMeasurable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 6),
    _AsmUnitMeasurable_Type()
)
asmUnitMeasurable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asmUnitMeasurable.setStatus("mandatory")
_AsmUnitMeasuredValue_Type = Integer32
_AsmUnitMeasuredValue_Object = MibTableColumn
asmUnitMeasuredValue = _AsmUnitMeasuredValue_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 7),
    _AsmUnitMeasuredValue_Type()
)
asmUnitMeasuredValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asmUnitMeasuredValue.setStatus("mandatory")
_AsmPhysicalAlarmState_Type = Integer32
_AsmPhysicalAlarmState_Object = MibTableColumn
asmPhysicalAlarmState = _AsmPhysicalAlarmState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 8),
    _AsmPhysicalAlarmState_Type()
)
asmPhysicalAlarmState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asmPhysicalAlarmState.setStatus("mandatory")


class _AsmClrButton_Type(Integer32):
    """Custom type asmClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("asmAlarmClear", 2),
          ("asmAlarmNoAction", 1))
    )


_AsmClrButton_Type.__name__ = "Integer32"
_AsmClrButton_Object = MibTableColumn
asmClrButton = _AsmClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 1, 1, 9),
    _AsmClrButton_Type()
)
asmClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asmClrButton.setStatus("mandatory")
_AsmNumOfValidEntries_Type = Integer32
_AsmNumOfValidEntries_Object = MibScalar
asmNumOfValidEntries = _AsmNumOfValidEntries_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 2),
    _AsmNumOfValidEntries_Type()
)
asmNumOfValidEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asmNumOfValidEntries.setStatus("mandatory")


class _AsmShelfAlarmState_Type(Integer32):
    """Custom type asmShelfAlarmState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alarmOff", 1),
          ("alarmOn", 2))
    )


_AsmShelfAlarmState_Type.__name__ = "Integer32"
_AsmShelfAlarmState_Object = MibScalar
asmShelfAlarmState = _AsmShelfAlarmState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 2, 3),
    _AsmShelfAlarmState_Type()
)
asmShelfAlarmState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asmShelfAlarmState.setStatus("mandatory")
_AtmNetPrefixGroup_ObjectIdentity = ObjectIdentity
atmNetPrefixGroup = _AtmNetPrefixGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1)
)
_AtmNetPrefixTable_Object = MibTable
atmNetPrefixTable = _AtmNetPrefixTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1)
)
if mibBuilder.loadTexts:
    atmNetPrefixTable.setStatus("mandatory")
_AtmNetPrefixEntry_Object = MibTableRow
atmNetPrefixEntry = _AtmNetPrefixEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1)
)
atmNetPrefixEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "axisAtmNetPrefixPort"),
    (0, "CISCO-WAN-AXIPOP-MIB", "axisAtmNetPrefixPrefix"),
)
if mibBuilder.loadTexts:
    atmNetPrefixEntry.setStatus("mandatory")


class _AxisAtmNetPrefixPort_Type(Integer32):
    """Custom type axisAtmNetPrefixPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_AxisAtmNetPrefixPort_Type.__name__ = "Integer32"
_AxisAtmNetPrefixPort_Object = MibTableColumn
axisAtmNetPrefixPort = _AxisAtmNetPrefixPort_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1, 1),
    _AxisAtmNetPrefixPort_Type()
)
axisAtmNetPrefixPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisAtmNetPrefixPort.setStatus("mandatory")
_AxisAtmNetPrefixPrefix_Type = NetPrefix
_AxisAtmNetPrefixPrefix_Object = MibTableColumn
axisAtmNetPrefixPrefix = _AxisAtmNetPrefixPrefix_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1, 2),
    _AxisAtmNetPrefixPrefix_Type()
)
axisAtmNetPrefixPrefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisAtmNetPrefixPrefix.setStatus("mandatory")


class _AxisAtmNetPrefixAdminStatus_Type(Integer32):
    """Custom type axisAtmNetPrefixAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_AxisAtmNetPrefixAdminStatus_Type.__name__ = "Integer32"
_AxisAtmNetPrefixAdminStatus_Object = MibTableColumn
axisAtmNetPrefixAdminStatus = _AxisAtmNetPrefixAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1, 3),
    _AxisAtmNetPrefixAdminStatus_Type()
)
axisAtmNetPrefixAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    axisAtmNetPrefixAdminStatus.setStatus("mandatory")


class _AxisAtmNetPrefixOperStatus_Type(Integer32):
    """Custom type axisAtmNetPrefixOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("de-registered", 4),
          ("de-registering", 2),
          ("failDe-registering", 6),
          ("failRegistering", 5),
          ("registered", 3),
          ("registering", 1))
    )


_AxisAtmNetPrefixOperStatus_Type.__name__ = "Integer32"
_AxisAtmNetPrefixOperStatus_Object = MibTableColumn
axisAtmNetPrefixOperStatus = _AxisAtmNetPrefixOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1, 4),
    _AxisAtmNetPrefixOperStatus_Type()
)
axisAtmNetPrefixOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisAtmNetPrefixOperStatus.setStatus("mandatory")
_AtmAddressGroup_ObjectIdentity = ObjectIdentity
atmAddressGroup = _AtmAddressGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2)
)
_AtmAddressTable_Object = MibTable
atmAddressTable = _AtmAddressTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1)
)
if mibBuilder.loadTexts:
    atmAddressTable.setStatus("mandatory")
_AtmAddressEntry_Object = MibTableRow
atmAddressEntry = _AtmAddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1, 1)
)
atmAddressEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "axisAtmAddressPort"),
    (0, "CISCO-WAN-AXIPOP-MIB", "axisAtmAddressAtmAddress"),
)
if mibBuilder.loadTexts:
    atmAddressEntry.setStatus("mandatory")


class _AxisAtmAddressPort_Type(Integer32):
    """Custom type axisAtmAddressPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_AxisAtmAddressPort_Type.__name__ = "Integer32"
_AxisAtmAddressPort_Object = MibTableColumn
axisAtmAddressPort = _AxisAtmAddressPort_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1, 1, 1),
    _AxisAtmAddressPort_Type()
)
axisAtmAddressPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisAtmAddressPort.setStatus("mandatory")
_AxisAtmAddressAtmAddress_Type = AtmAddress
_AxisAtmAddressAtmAddress_Object = MibTableColumn
axisAtmAddressAtmAddress = _AxisAtmAddressAtmAddress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1, 1, 2),
    _AxisAtmAddressAtmAddress_Type()
)
axisAtmAddressAtmAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisAtmAddressAtmAddress.setStatus("mandatory")


class _AxisAtmAddressStatus_Type(Integer32):
    """Custom type axisAtmAddressStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_AxisAtmAddressStatus_Type.__name__ = "Integer32"
_AxisAtmAddressStatus_Object = MibTableColumn
axisAtmAddressStatus = _AxisAtmAddressStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1, 1, 3),
    _AxisAtmAddressStatus_Type()
)
axisAtmAddressStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisAtmAddressStatus.setStatus("mandatory")
_CommonPort_ObjectIdentity = ObjectIdentity
commonPort = _CommonPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 6)
)
_CommonPortTable_Object = MibTable
commonPortTable = _CommonPortTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1)
)
if mibBuilder.loadTexts:
    commonPortTable.setStatus("mandatory")
_CommonPortTableEntry_Object = MibTableRow
commonPortTableEntry = _CommonPortTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1)
)
commonPortTableEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "commonPortNum"),
)
if mibBuilder.loadTexts:
    commonPortTableEntry.setStatus("mandatory")


class _CommonPortNum_Type(Integer32):
    """Custom type commonPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_CommonPortNum_Type.__name__ = "Integer32"
_CommonPortNum_Object = MibTableColumn
commonPortNum = _CommonPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 1),
    _CommonPortNum_Type()
)
commonPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonPortNum.setStatus("mandatory")


class _CommonPortType_Type(Integer32):
    """Custom type commonPortType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("atmport", 2),
          ("framerelayport", 1),
          ("imaport", 3))
    )


_CommonPortType_Type.__name__ = "Integer32"
_CommonPortType_Object = MibTableColumn
commonPortType = _CommonPortType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 2),
    _CommonPortType_Type()
)
commonPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonPortType.setStatus("mandatory")


class _CommonPortStatus_Type(Integer32):
    """Custom type commonPortStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_CommonPortStatus_Type.__name__ = "Integer32"
_CommonPortStatus_Object = MibTableColumn
commonPortStatus = _CommonPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 3),
    _CommonPortStatus_Type()
)
commonPortStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonPortStatus.setStatus("mandatory")


class _CommonPortSpeed_Type(Integer32):
    """Custom type commonPortSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 37360),
    )


_CommonPortSpeed_Type.__name__ = "Integer32"
_CommonPortSpeed_Object = MibTableColumn
commonPortSpeed = _CommonPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 4),
    _CommonPortSpeed_Type()
)
commonPortSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonPortSpeed.setStatus("mandatory")


class _CommonPortAlarmState_Type(Integer32):
    """Custom type commonPortAlarmState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inalarm", 1),
          ("outofalarm", 2))
    )


_CommonPortAlarmState_Type.__name__ = "Integer32"
_CommonPortAlarmState_Object = MibTableColumn
commonPortAlarmState = _CommonPortAlarmState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 5),
    _CommonPortAlarmState_Type()
)
commonPortAlarmState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonPortAlarmState.setStatus("mandatory")


class _CommonPortSignallingProtocolType_Type(Integer32):
    """Custom type commonPortSignallingProtocolType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("tbd", 1)
    )


_CommonPortSignallingProtocolType_Type.__name__ = "Integer32"
_CommonPortSignallingProtocolType_Object = MibTableColumn
commonPortSignallingProtocolType = _CommonPortSignallingProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 6),
    _CommonPortSignallingProtocolType_Type()
)
commonPortSignallingProtocolType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonPortSignallingProtocolType.setStatus("mandatory")


class _CommonPortSignallingState_Type(Integer32):
    """Custom type commonPortSignallingState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("tbd", 1)
    )


_CommonPortSignallingState_Type.__name__ = "Integer32"
_CommonPortSignallingState_Object = MibTableColumn
commonPortSignallingState = _CommonPortSignallingState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 7),
    _CommonPortSignallingState_Type()
)
commonPortSignallingState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonPortSignallingState.setStatus("mandatory")
_CommonPortAssocLines_Type = DisplayString
_CommonPortAssocLines_Object = MibTableColumn
commonPortAssocLines = _CommonPortAssocLines_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 8),
    _CommonPortAssocLines_Type()
)
commonPortAssocLines.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonPortAssocLines.setStatus("mandatory")
_CommonPortAssocChannels_Type = DisplayString
_CommonPortAssocChannels_Object = MibTableColumn
commonPortAssocChannels = _CommonPortAssocChannels_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 6, 1, 1, 9),
    _CommonPortAssocChannels_Type()
)
commonPortAssocChannels.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonPortAssocChannels.setStatus("mandatory")
_CommonChannel_ObjectIdentity = ObjectIdentity
commonChannel = _CommonChannel_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7)
)
_CommonChanTable_Object = MibTable
commonChanTable = _CommonChanTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1)
)
if mibBuilder.loadTexts:
    commonChanTable.setStatus("mandatory")
_CommonChanTableEntry_Object = MibTableRow
commonChanTableEntry = _CommonChanTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1)
)
commonChanTableEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "commonChanNum"),
)
if mibBuilder.loadTexts:
    commonChanTableEntry.setStatus("mandatory")


class _CommonChanNum_Type(Integer32):
    """Custom type commonChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 1015),
    )


_CommonChanNum_Type.__name__ = "Integer32"
_CommonChanNum_Object = MibTableColumn
commonChanNum = _CommonChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 1),
    _CommonChanNum_Type()
)
commonChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonChanNum.setStatus("mandatory")


class _CommonConnType_Type(Integer32):
    """Custom type commonConnType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vcc", 2),
          ("vpc", 1))
    )


_CommonConnType_Type.__name__ = "Integer32"
_CommonConnType_Object = MibTableColumn
commonConnType = _CommonConnType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 2),
    _CommonConnType_Type()
)
commonConnType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonConnType.setStatus("mandatory")


class _CommonChanStatus_Type(Integer32):
    """Custom type commonChanStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 3),
          ("normal", 2),
          ("notconfigured", 1))
    )


_CommonChanStatus_Type.__name__ = "Integer32"
_CommonChanStatus_Object = MibTableColumn
commonChanStatus = _CommonChanStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 3),
    _CommonChanStatus_Type()
)
commonChanStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonChanStatus.setStatus("mandatory")
_CommonAlarmState_Type = Integer32
_CommonAlarmState_Object = MibTableColumn
commonAlarmState = _CommonAlarmState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 4),
    _CommonAlarmState_Type()
)
commonAlarmState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonAlarmState.setStatus("mandatory")


class _CommonChanPortNum_Type(Integer32):
    """Custom type commonChanPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_CommonChanPortNum_Type.__name__ = "Integer32"
_CommonChanPortNum_Object = MibTableColumn
commonChanPortNum = _CommonChanPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 5),
    _CommonChanPortNum_Type()
)
commonChanPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonChanPortNum.setStatus("mandatory")


class _CommonChanServiceType_Type(Integer32):
    """Custom type commonChanServiceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("abr", 3),
          ("cbr", 1),
          ("vbr", 2))
    )


_CommonChanServiceType_Type.__name__ = "Integer32"
_CommonChanServiceType_Object = MibTableColumn
commonChanServiceType = _CommonChanServiceType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 6),
    _CommonChanServiceType_Type()
)
commonChanServiceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonChanServiceType.setStatus("mandatory")


class _CommonChanIngrXmtState_Type(Integer32):
    """Custom type commonChanIngrXmtState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("other", 1),
          ("receivingAis", 3),
          ("receivingFerf", 4))
    )


_CommonChanIngrXmtState_Type.__name__ = "Integer32"
_CommonChanIngrXmtState_Object = MibTableColumn
commonChanIngrXmtState = _CommonChanIngrXmtState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 7),
    _CommonChanIngrXmtState_Type()
)
commonChanIngrXmtState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonChanIngrXmtState.setStatus("mandatory")


class _CommonChanIngrRcvState_Type(Integer32):
    """Custom type commonChanIngrRcvState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 5),
          ("normal", 2),
          ("other", 1),
          ("receivingAis", 3),
          ("receivingFerf", 4))
    )


_CommonChanIngrRcvState_Type.__name__ = "Integer32"
_CommonChanIngrRcvState_Object = MibTableColumn
commonChanIngrRcvState = _CommonChanIngrRcvState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 8),
    _CommonChanIngrRcvState_Type()
)
commonChanIngrRcvState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonChanIngrRcvState.setStatus("mandatory")


class _CommonChanEgrXmtState_Type(Integer32):
    """Custom type commonChanEgrXmtState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("other", 1),
          ("sendingAis", 3),
          ("sendingFerf", 4))
    )


_CommonChanEgrXmtState_Type.__name__ = "Integer32"
_CommonChanEgrXmtState_Object = MibTableColumn
commonChanEgrXmtState = _CommonChanEgrXmtState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 9),
    _CommonChanEgrXmtState_Type()
)
commonChanEgrXmtState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonChanEgrXmtState.setStatus("mandatory")


class _CommonChanEgrRcvState_Type(Integer32):
    """Custom type commonChanEgrRcvState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 5),
          ("normal", 2),
          ("other", 1),
          ("sendingAis", 3),
          ("sendingFerf", 4))
    )


_CommonChanEgrRcvState_Type.__name__ = "Integer32"
_CommonChanEgrRcvState_Object = MibTableColumn
commonChanEgrRcvState = _CommonChanEgrRcvState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 10),
    _CommonChanEgrRcvState_Type()
)
commonChanEgrRcvState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonChanEgrRcvState.setStatus("mandatory")
_CommonConnParm1_Type = DisplayString
_CommonConnParm1_Object = MibTableColumn
commonConnParm1 = _CommonConnParm1_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 11),
    _CommonConnParm1_Type()
)
commonConnParm1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonConnParm1.setStatus("mandatory")
_CommonConnParm2_Type = DisplayString
_CommonConnParm2_Object = MibTableColumn
commonConnParm2 = _CommonConnParm2_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 7, 1, 1, 12),
    _CommonConnParm2_Type()
)
commonConnParm2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    commonConnParm2.setStatus("mandatory")
_CardResourcePartition_ObjectIdentity = ObjectIdentity
cardResourcePartition = _CardResourcePartition_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 9)
)


class _CardLcnPartitionType_Type(Integer32):
    """Custom type cardLcnPartitionType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("controllerBased", 2),
          ("noPartition", 1),
          ("portControllerBased", 3))
    )


_CardLcnPartitionType_Type.__name__ = "Integer32"
_CardLcnPartitionType_Object = MibScalar
cardLcnPartitionType = _CardLcnPartitionType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 9, 1),
    _CardLcnPartitionType_Type()
)
cardLcnPartitionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cardLcnPartitionType.setStatus("mandatory")
_CardResPartGrpTable_Object = MibTable
cardResPartGrpTable = _CardResPartGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 9, 2)
)
if mibBuilder.loadTexts:
    cardResPartGrpTable.setStatus("mandatory")
_CardResPartGrpEntry_Object = MibTableRow
cardResPartGrpEntry = _CardResPartGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 9, 2, 1)
)
cardResPartGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "cardResPartCtrlrNum"),
)
if mibBuilder.loadTexts:
    cardResPartGrpEntry.setStatus("mandatory")


class _CardResPartCtrlrNum_Type(Integer32):
    """Custom type cardResPartCtrlrNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("par", 1),
          ("pnni", 2),
          ("tag", 3))
    )


_CardResPartCtrlrNum_Type.__name__ = "Integer32"
_CardResPartCtrlrNum_Object = MibTableColumn
cardResPartCtrlrNum = _CardResPartCtrlrNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 9, 2, 1, 1),
    _CardResPartCtrlrNum_Type()
)
cardResPartCtrlrNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cardResPartCtrlrNum.setStatus("mandatory")


class _CardResPartRowStatus_Type(Integer32):
    """Custom type cardResPartRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_CardResPartRowStatus_Type.__name__ = "Integer32"
_CardResPartRowStatus_Object = MibTableColumn
cardResPartRowStatus = _CardResPartRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 9, 2, 1, 2),
    _CardResPartRowStatus_Type()
)
cardResPartRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cardResPartRowStatus.setStatus("mandatory")
_CardResPartNumOfLcnAvail_Type = Integer32
_CardResPartNumOfLcnAvail_Object = MibTableColumn
cardResPartNumOfLcnAvail = _CardResPartNumOfLcnAvail_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 2, 9, 2, 1, 3),
    _CardResPartNumOfLcnAvail_Type()
)
cardResPartNumOfLcnAvail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cardResPartNumOfLcnAvail.setStatus("mandatory")
_AumClockConfig_ObjectIdentity = ObjectIdentity
aumClockConfig = _AumClockConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 1)
)


class _PrimaryMuxClockSource_Type(Integer32):
    """Custom type primaryMuxClockSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("aumInbandClock", 2),
          ("externalClock", 3),
          ("internalOscillator", 1))
    )


_PrimaryMuxClockSource_Type.__name__ = "Integer32"
_PrimaryMuxClockSource_Object = MibScalar
primaryMuxClockSource = _PrimaryMuxClockSource_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 1),
    _PrimaryMuxClockSource_Type()
)
primaryMuxClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    primaryMuxClockSource.setStatus("mandatory")


class _SecondaryMuxClockSource_Type(Integer32):
    """Custom type secondaryMuxClockSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("aumInbandClock", 2),
          ("externalClock", 3),
          ("internalOscillator", 1))
    )


_SecondaryMuxClockSource_Type.__name__ = "Integer32"
_SecondaryMuxClockSource_Object = MibScalar
secondaryMuxClockSource = _SecondaryMuxClockSource_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 2),
    _SecondaryMuxClockSource_Type()
)
secondaryMuxClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    secondaryMuxClockSource.setStatus("mandatory")


class _CurrentClock_Type(Integer32):
    """Custom type currentClock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("intOscillator", 3),
          ("primary", 1),
          ("secondary", 2))
    )


_CurrentClock_Type.__name__ = "Integer32"
_CurrentClock_Object = MibScalar
currentClock = _CurrentClock_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 3),
    _CurrentClock_Type()
)
currentClock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    currentClock.setStatus("mandatory")


class _ClockSwitchState_Type(Integer32):
    """Custom type clockSwitchState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clockSrcChanged", 2),
          ("noChange", 1))
    )


_ClockSwitchState_Type.__name__ = "Integer32"
_ClockSwitchState_Object = MibScalar
clockSwitchState = _ClockSwitchState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 4),
    _ClockSwitchState_Type()
)
clockSwitchState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clockSwitchState.setStatus("mandatory")


class _ExtClockPresent_Type(Integer32):
    """Custom type extClockPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clkNotPresent", 1),
          ("clkPresent", 2))
    )


_ExtClockPresent_Type.__name__ = "Integer32"
_ExtClockPresent_Object = MibScalar
extClockPresent = _ExtClockPresent_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 5),
    _ExtClockPresent_Type()
)
extClockPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    extClockPresent.setStatus("mandatory")


class _ExtClkSrcImpedance_Type(Integer32):
    """Custom type extClkSrcImpedance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ohms100", 2),
          ("ohms120", 3),
          ("ohms75", 1))
    )


_ExtClkSrcImpedance_Type.__name__ = "Integer32"
_ExtClkSrcImpedance_Object = MibScalar
extClkSrcImpedance = _ExtClkSrcImpedance_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 6),
    _ExtClkSrcImpedance_Type()
)
extClkSrcImpedance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extClkSrcImpedance.setStatus("mandatory")


class _ExtClkConnectorType_Type(Integer32):
    """Custom type extClkConnectorType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bncType", 2),
          ("db15Type", 1))
    )


_ExtClkConnectorType_Type.__name__ = "Integer32"
_ExtClkConnectorType_Object = MibScalar
extClkConnectorType = _ExtClkConnectorType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 1, 7),
    _ExtClkConnectorType_Type()
)
extClkConnectorType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    extClkConnectorType.setStatus("mandatory")
_AumAddressTranslation_ObjectIdentity = ObjectIdentity
aumAddressTranslation = _AumAddressTranslation_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2)
)
_AumAddressTranslationTable_Object = MibTable
aumAddressTranslationTable = _AumAddressTranslationTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1)
)
if mibBuilder.loadTexts:
    aumAddressTranslationTable.setStatus("mandatory")
_AumAddressTranslationEntry_Object = MibTableRow
aumAddressTranslationEntry = _AumAddressTranslationEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1, 1)
)
aumAddressTranslationEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "connShelfNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "connSlotNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "connChanNum"),
)
if mibBuilder.loadTexts:
    aumAddressTranslationEntry.setStatus("mandatory")
_ConnShelfNum_Type = Integer32
_ConnShelfNum_Object = MibTableColumn
connShelfNum = _ConnShelfNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1, 1, 1),
    _ConnShelfNum_Type()
)
connShelfNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connShelfNum.setStatus("mandatory")
_ConnSlotNum_Type = Integer32
_ConnSlotNum_Object = MibTableColumn
connSlotNum = _ConnSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1, 1, 2),
    _ConnSlotNum_Type()
)
connSlotNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connSlotNum.setStatus("mandatory")
_ConnChanNum_Type = Integer32
_ConnChanNum_Object = MibTableColumn
connChanNum = _ConnChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1, 1, 3),
    _ConnChanNum_Type()
)
connChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connChanNum.setStatus("mandatory")


class _AumConnType_Type(Integer32):
    """Custom type aumConnType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vcConnection", 2),
          ("vpConnection", 1))
    )


_AumConnType_Type.__name__ = "Integer32"
_AumConnType_Object = MibTableColumn
aumConnType = _AumConnType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1, 1, 4),
    _AumConnType_Type()
)
aumConnType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    aumConnType.setStatus("mandatory")
_ConnVPINum_Type = Integer32
_ConnVPINum_Object = MibTableColumn
connVPINum = _ConnVPINum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 1, 1, 5),
    _ConnVPINum_Type()
)
connVPINum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connVPINum.setStatus("mandatory")
_AumAddressTranslationDeleteTable_Object = MibTable
aumAddressTranslationDeleteTable = _AumAddressTranslationDeleteTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 2)
)
if mibBuilder.loadTexts:
    aumAddressTranslationDeleteTable.setStatus("mandatory")
_AumAddressTranslationDeleteEntry_Object = MibTableRow
aumAddressTranslationDeleteEntry = _AumAddressTranslationDeleteEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 2, 1)
)
aumAddressTranslationDeleteEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "delShelfNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "delSlotNum"),
)
if mibBuilder.loadTexts:
    aumAddressTranslationDeleteEntry.setStatus("mandatory")
_DelShelfNum_Type = Integer32
_DelShelfNum_Object = MibTableColumn
delShelfNum = _DelShelfNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 2, 1, 1),
    _DelShelfNum_Type()
)
delShelfNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    delShelfNum.setStatus("mandatory")
_DelSlotNum_Type = Integer32
_DelSlotNum_Object = MibTableColumn
delSlotNum = _DelSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 2, 1, 2),
    _DelSlotNum_Type()
)
delSlotNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    delSlotNum.setStatus("mandatory")


class _ConnNumOfValidEntries_Type(Integer32):
    """Custom type connNumOfValidEntries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_ConnNumOfValidEntries_Type.__name__ = "Integer32"
_ConnNumOfValidEntries_Object = MibScalar
connNumOfValidEntries = _ConnNumOfValidEntries_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 2, 3),
    _ConnNumOfValidEntries_Type()
)
connNumOfValidEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connNumOfValidEntries.setStatus("mandatory")
_BnmCounters_ObjectIdentity = ObjectIdentity
bnmCounters = _BnmCounters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3)
)
_BnmPortCounterTable_Object = MibTable
bnmPortCounterTable = _BnmPortCounterTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1)
)
if mibBuilder.loadTexts:
    bnmPortCounterTable.setStatus("mandatory")
_BnmPortCounterEntry_Object = MibTableRow
bnmPortCounterEntry = _BnmPortCounterEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1)
)
bnmPortCounterEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "bnmPortCounterIndex"),
)
if mibBuilder.loadTexts:
    bnmPortCounterEntry.setStatus("mandatory")
_BnmPortCounterIndex_Type = Integer32
_BnmPortCounterIndex_Object = MibTableColumn
bnmPortCounterIndex = _BnmPortCounterIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 1),
    _BnmPortCounterIndex_Type()
)
bnmPortCounterIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmPortCounterIndex.setStatus("mandatory")
_BnmPortRcvCells_Type = Counter32
_BnmPortRcvCells_Object = MibTableColumn
bnmPortRcvCells = _BnmPortRcvCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 2),
    _BnmPortRcvCells_Type()
)
bnmPortRcvCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmPortRcvCells.setStatus("mandatory")
_BnmPortXmtCells_Type = Counter32
_BnmPortXmtCells_Object = MibTableColumn
bnmPortXmtCells = _BnmPortXmtCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 3),
    _BnmPortXmtCells_Type()
)
bnmPortXmtCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmPortXmtCells.setStatus("mandatory")


class _BnmPortCounterClrButton_Type(Integer32):
    """Custom type bnmPortCounterClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bnmPortCounterClear", 2),
          ("bnmPortCounterNoAction", 1))
    )


_BnmPortCounterClrButton_Type.__name__ = "Integer32"
_BnmPortCounterClrButton_Object = MibTableColumn
bnmPortCounterClrButton = _BnmPortCounterClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 4),
    _BnmPortCounterClrButton_Type()
)
bnmPortCounterClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bnmPortCounterClrButton.setStatus("mandatory")
_BnmPortRcvCellRate_Type = Gauge32
_BnmPortRcvCellRate_Object = MibTableColumn
bnmPortRcvCellRate = _BnmPortRcvCellRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 5),
    _BnmPortRcvCellRate_Type()
)
bnmPortRcvCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmPortRcvCellRate.setStatus("mandatory")
_BnmPortRcvUtilization_Type = Gauge32
_BnmPortRcvUtilization_Object = MibTableColumn
bnmPortRcvUtilization = _BnmPortRcvUtilization_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 6),
    _BnmPortRcvUtilization_Type()
)
bnmPortRcvUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmPortRcvUtilization.setStatus("mandatory")
_BnmPortXmtCellRate_Type = Gauge32
_BnmPortXmtCellRate_Object = MibTableColumn
bnmPortXmtCellRate = _BnmPortXmtCellRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 7),
    _BnmPortXmtCellRate_Type()
)
bnmPortXmtCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmPortXmtCellRate.setStatus("mandatory")
_BnmPortXmtUtilization_Type = Gauge32
_BnmPortXmtUtilization_Object = MibTableColumn
bnmPortXmtUtilization = _BnmPortXmtUtilization_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 1, 1, 8),
    _BnmPortXmtUtilization_Type()
)
bnmPortXmtUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmPortXmtUtilization.setStatus("mandatory")
_BnmPortCounterNumOfValidEntries_Type = Integer32
_BnmPortCounterNumOfValidEntries_Object = MibScalar
bnmPortCounterNumOfValidEntries = _BnmPortCounterNumOfValidEntries_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 2),
    _BnmPortCounterNumOfValidEntries_Type()
)
bnmPortCounterNumOfValidEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmPortCounterNumOfValidEntries.setStatus("mandatory")
_BnmCellbusXmtCellCount_Type = Counter32
_BnmCellbusXmtCellCount_Object = MibScalar
bnmCellbusXmtCellCount = _BnmCellbusXmtCellCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 3),
    _BnmCellbusXmtCellCount_Type()
)
bnmCellbusXmtCellCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmCellbusXmtCellCount.setStatus("mandatory")
_BnmCellbusNoAckCellCount_Type = Counter32
_BnmCellbusNoAckCellCount_Object = MibScalar
bnmCellbusNoAckCellCount = _BnmCellbusNoAckCellCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 4),
    _BnmCellbusNoAckCellCount_Type()
)
bnmCellbusNoAckCellCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmCellbusNoAckCellCount.setStatus("mandatory")
_BnmCellbusGrantCount_Type = Counter32
_BnmCellbusGrantCount_Object = MibScalar
bnmCellbusGrantCount = _BnmCellbusGrantCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 5),
    _BnmCellbusGrantCount_Type()
)
bnmCellbusGrantCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmCellbusGrantCount.setStatus("mandatory")
_BnmEgressXmtCellCountDuringAlarm_Type = Counter32
_BnmEgressXmtCellCountDuringAlarm_Object = MibScalar
bnmEgressXmtCellCountDuringAlarm = _BnmEgressXmtCellCountDuringAlarm_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 6),
    _BnmEgressXmtCellCountDuringAlarm_Type()
)
bnmEgressXmtCellCountDuringAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmEgressXmtCellCountDuringAlarm.setStatus("mandatory")
_BnmEgressInvalidCellCount_Type = Counter32
_BnmEgressInvalidCellCount_Object = MibScalar
bnmEgressInvalidCellCount = _BnmEgressInvalidCellCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 7),
    _BnmEgressInvalidCellCount_Type()
)
bnmEgressInvalidCellCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmEgressInvalidCellCount.setStatus("mandatory")
_BnmEgressInvalidCellHdr_Type = Integer32
_BnmEgressInvalidCellHdr_Object = MibScalar
bnmEgressInvalidCellHdr = _BnmEgressInvalidCellHdr_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 8),
    _BnmEgressInvalidCellHdr_Type()
)
bnmEgressInvalidCellHdr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmEgressInvalidCellHdr.setStatus("mandatory")
_BnmIngressInvalidCellCount_Type = Counter32
_BnmIngressInvalidCellCount_Object = MibScalar
bnmIngressInvalidCellCount = _BnmIngressInvalidCellCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 9),
    _BnmIngressInvalidCellCount_Type()
)
bnmIngressInvalidCellCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmIngressInvalidCellCount.setStatus("mandatory")
_BnmIngressInvalidCellHdr_Type = Integer32
_BnmIngressInvalidCellHdr_Object = MibScalar
bnmIngressInvalidCellHdr = _BnmIngressInvalidCellHdr_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 10),
    _BnmIngressInvalidCellHdr_Type()
)
bnmIngressInvalidCellHdr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bnmIngressInvalidCellHdr.setStatus("mandatory")


class _BnmCountersClrButton_Type(Integer32):
    """Custom type bnmCountersClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bnmCountersClear", 2),
          ("bnmCountersNoAction", 1))
    )


_BnmCountersClrButton_Type.__name__ = "Integer32"
_BnmCountersClrButton_Object = MibScalar
bnmCountersClrButton = _BnmCountersClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 3, 11),
    _BnmCountersClrButton_Type()
)
bnmCountersClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bnmCountersClrButton.setStatus("mandatory")
_AscLineCnfSigLmiGrp_ObjectIdentity = ObjectIdentity
ascLineCnfSigLmiGrp = _AscLineCnfSigLmiGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1)
)
_AscCnfSigLmiGrpTable_Object = MibTable
ascCnfSigLmiGrpTable = _AscCnfSigLmiGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1)
)
if mibBuilder.loadTexts:
    ascCnfSigLmiGrpTable.setStatus("mandatory")
_AscCnfSigLmiGrpEntry_Object = MibTableRow
ascCnfSigLmiGrpEntry = _AscCnfSigLmiGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1)
)
ascCnfSigLmiGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ascLmiCnfLineNum"),
)
if mibBuilder.loadTexts:
    ascCnfSigLmiGrpEntry.setStatus("mandatory")


class _AscLmiCnfLineNum_Type(Integer32):
    """Custom type ascLmiCnfLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("lmiCnflineNum", 1)
    )


_AscLmiCnfLineNum_Type.__name__ = "Integer32"
_AscLmiCnfLineNum_Object = MibTableColumn
ascLmiCnfLineNum = _AscLmiCnfLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 1),
    _AscLmiCnfLineNum_Type()
)
ascLmiCnfLineNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiCnfLineNum.setStatus("mandatory")


class _AscLmiVpi_Type(Integer32):
    """Custom type ascLmiVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("lmiVpi", 3)
    )


_AscLmiVpi_Type.__name__ = "Integer32"
_AscLmiVpi_Object = MibTableColumn
ascLmiVpi = _AscLmiVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 2),
    _AscLmiVpi_Type()
)
ascLmiVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiVpi.setStatus("mandatory")


class _AscLmiVci_Type(Integer32):
    """Custom type ascLmiVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            31
        )
    )
    namedValues = NamedValues(
        ("lmiVci", 31)
    )


_AscLmiVci_Type.__name__ = "Integer32"
_AscLmiVci_Object = MibTableColumn
ascLmiVci = _AscLmiVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 3),
    _AscLmiVci_Type()
)
ascLmiVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiVci.setStatus("mandatory")


class _AscLmiEnabled_Type(Integer32):
    """Custom type ascLmiEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("atmLmiEnable", 2),
          ("atmLmiEnhAutoRecovery", 5),
          ("atmLmiEnhManualRecovery", 4),
          ("atmLmiwithExtEnable", 3),
          ("disable", 1))
    )


_AscLmiEnabled_Type.__name__ = "Integer32"
_AscLmiEnabled_Object = MibTableColumn
ascLmiEnabled = _AscLmiEnabled_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 4),
    _AscLmiEnabled_Type()
)
ascLmiEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ascLmiEnabled.setStatus("mandatory")


class _AscLmiPollingEnabled_Type(Integer32):
    """Custom type ascLmiPollingEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AscLmiPollingEnabled_Type.__name__ = "Integer32"
_AscLmiPollingEnabled_Object = MibTableColumn
ascLmiPollingEnabled = _AscLmiPollingEnabled_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 5),
    _AscLmiPollingEnabled_Type()
)
ascLmiPollingEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ascLmiPollingEnabled.setStatus("mandatory")


class _AscLmiPollingInterval_Type(Integer32):
    """Custom type ascLmiPollingInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_AscLmiPollingInterval_Type.__name__ = "Integer32"
_AscLmiPollingInterval_Object = MibTableColumn
ascLmiPollingInterval = _AscLmiPollingInterval_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 6),
    _AscLmiPollingInterval_Type()
)
ascLmiPollingInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ascLmiPollingInterval.setStatus("mandatory")


class _AscLmiTimerT393_Type(Integer32):
    """Custom type ascLmiTimerT393 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_AscLmiTimerT393_Type.__name__ = "Integer32"
_AscLmiTimerT393_Object = MibTableColumn
ascLmiTimerT393 = _AscLmiTimerT393_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 7),
    _AscLmiTimerT393_Type()
)
ascLmiTimerT393.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ascLmiTimerT393.setStatus("mandatory")


class _AscLmiTimerT394_Type(Integer32):
    """Custom type ascLmiTimerT394 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_AscLmiTimerT394_Type.__name__ = "Integer32"
_AscLmiTimerT394_Object = MibTableColumn
ascLmiTimerT394 = _AscLmiTimerT394_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 8),
    _AscLmiTimerT394_Type()
)
ascLmiTimerT394.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ascLmiTimerT394.setStatus("mandatory")


class _AscLmiMaxRetryN394_Type(Integer32):
    """Custom type ascLmiMaxRetryN394 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AscLmiMaxRetryN394_Type.__name__ = "Integer32"
_AscLmiMaxRetryN394_Object = MibTableColumn
ascLmiMaxRetryN394 = _AscLmiMaxRetryN394_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 9),
    _AscLmiMaxRetryN394_Type()
)
ascLmiMaxRetryN394.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ascLmiMaxRetryN394.setStatus("mandatory")


class _AscLmiMaxRetryN395_Type(Integer32):
    """Custom type ascLmiMaxRetryN395 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AscLmiMaxRetryN395_Type.__name__ = "Integer32"
_AscLmiMaxRetryN395_Object = MibTableColumn
ascLmiMaxRetryN395 = _AscLmiMaxRetryN395_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 10),
    _AscLmiMaxRetryN395_Type()
)
ascLmiMaxRetryN395.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ascLmiMaxRetryN395.setStatus("mandatory")


class _AscLmiOperStatus_Type(Integer32):
    """Custom type ascLmiOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atmLmiActive", 2),
          ("atmLmiFailed", 1))
    )


_AscLmiOperStatus_Type.__name__ = "Integer32"
_AscLmiOperStatus_Object = MibTableColumn
ascLmiOperStatus = _AscLmiOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 1, 1, 1, 11),
    _AscLmiOperStatus_Type()
)
ascLmiOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiOperStatus.setStatus("mandatory")
_AscCntSigLmiGrp_ObjectIdentity = ObjectIdentity
ascCntSigLmiGrp = _AscCntSigLmiGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2)
)
_AscCntSigLmiGrpTable_Object = MibTable
ascCntSigLmiGrpTable = _AscCntSigLmiGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1)
)
if mibBuilder.loadTexts:
    ascCntSigLmiGrpTable.setStatus("mandatory")
_AscCntSigLmiGrpEntry_Object = MibTableRow
ascCntSigLmiGrpEntry = _AscCntSigLmiGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1)
)
ascCntSigLmiGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ascLmiCntLineNum"),
)
if mibBuilder.loadTexts:
    ascCntSigLmiGrpEntry.setStatus("mandatory")


class _AscLmiCntLineNum_Type(Integer32):
    """Custom type ascLmiCntLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("lmiCntLineNum", 1)
    )


_AscLmiCntLineNum_Type.__name__ = "Integer32"
_AscLmiCntLineNum_Object = MibTableColumn
ascLmiCntLineNum = _AscLmiCntLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 1),
    _AscLmiCntLineNum_Type()
)
ascLmiCntLineNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiCntLineNum.setStatus("mandatory")
_AscLmiStatusTx_Type = Counter32
_AscLmiStatusTx_Object = MibTableColumn
ascLmiStatusTx = _AscLmiStatusTx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 2),
    _AscLmiStatusTx_Type()
)
ascLmiStatusTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiStatusTx.setStatus("mandatory")
_AscLmiStatusEnqTx_Type = Counter32
_AscLmiStatusEnqTx_Object = MibTableColumn
ascLmiStatusEnqTx = _AscLmiStatusEnqTx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 3),
    _AscLmiStatusEnqTx_Type()
)
ascLmiStatusEnqTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiStatusEnqTx.setStatus("mandatory")
_AscLmiStatusAckTx_Type = Counter32
_AscLmiStatusAckTx_Object = MibTableColumn
ascLmiStatusAckTx = _AscLmiStatusAckTx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 4),
    _AscLmiStatusAckTx_Type()
)
ascLmiStatusAckTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiStatusAckTx.setStatus("mandatory")
_AscLmiUpdateStatusTx_Type = Counter32
_AscLmiUpdateStatusTx_Object = MibTableColumn
ascLmiUpdateStatusTx = _AscLmiUpdateStatusTx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 5),
    _AscLmiUpdateStatusTx_Type()
)
ascLmiUpdateStatusTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiUpdateStatusTx.setStatus("mandatory")
_AscLmiStatusRx_Type = Counter32
_AscLmiStatusRx_Object = MibTableColumn
ascLmiStatusRx = _AscLmiStatusRx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 6),
    _AscLmiStatusRx_Type()
)
ascLmiStatusRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiStatusRx.setStatus("mandatory")
_AscLmiStatusEnqRx_Type = Counter32
_AscLmiStatusEnqRx_Object = MibTableColumn
ascLmiStatusEnqRx = _AscLmiStatusEnqRx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 7),
    _AscLmiStatusEnqRx_Type()
)
ascLmiStatusEnqRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiStatusEnqRx.setStatus("mandatory")
_AscLmiStatusAckRx_Type = Counter32
_AscLmiStatusAckRx_Object = MibTableColumn
ascLmiStatusAckRx = _AscLmiStatusAckRx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 8),
    _AscLmiStatusAckRx_Type()
)
ascLmiStatusAckRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiStatusAckRx.setStatus("mandatory")
_AscLmiUpdateStatusRx_Type = Counter32
_AscLmiUpdateStatusRx_Object = MibTableColumn
ascLmiUpdateStatusRx = _AscLmiUpdateStatusRx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 9),
    _AscLmiUpdateStatusRx_Type()
)
ascLmiUpdateStatusRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiUpdateStatusRx.setStatus("mandatory")
_AscLmiInvalidPduRx_Type = Counter32
_AscLmiInvalidPduRx_Object = MibTableColumn
ascLmiInvalidPduRx = _AscLmiInvalidPduRx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 10),
    _AscLmiInvalidPduRx_Type()
)
ascLmiInvalidPduRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiInvalidPduRx.setStatus("mandatory")
_AscLmiInvalidPduLenRx_Type = Counter32
_AscLmiInvalidPduLenRx_Object = MibTableColumn
ascLmiInvalidPduLenRx = _AscLmiInvalidPduLenRx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 11),
    _AscLmiInvalidPduLenRx_Type()
)
ascLmiInvalidPduLenRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiInvalidPduLenRx.setStatus("mandatory")
_AscLmiUnknownPduRx_Type = Counter32
_AscLmiUnknownPduRx_Object = MibTableColumn
ascLmiUnknownPduRx = _AscLmiUnknownPduRx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 12),
    _AscLmiUnknownPduRx_Type()
)
ascLmiUnknownPduRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiUnknownPduRx.setStatus("mandatory")
_AscLmiInvalidIeRx_Type = Counter32
_AscLmiInvalidIeRx_Object = MibTableColumn
ascLmiInvalidIeRx = _AscLmiInvalidIeRx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 13),
    _AscLmiInvalidIeRx_Type()
)
ascLmiInvalidIeRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiInvalidIeRx.setStatus("mandatory")
_AscLmiInvalidTransaction_Type = Counter32
_AscLmiInvalidTransaction_Object = MibTableColumn
ascLmiInvalidTransaction = _AscLmiInvalidTransaction_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 14),
    _AscLmiInvalidTransaction_Type()
)
ascLmiInvalidTransaction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiInvalidTransaction.setStatus("mandatory")
_AscLmiTimeoutFailure_Type = Counter32
_AscLmiTimeoutFailure_Object = MibTableColumn
ascLmiTimeoutFailure = _AscLmiTimeoutFailure_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 15),
    _AscLmiTimeoutFailure_Type()
)
ascLmiTimeoutFailure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiTimeoutFailure.setStatus("mandatory")
_AscLmiNodeStatusTx_Type = Counter32
_AscLmiNodeStatusTx_Object = MibTableColumn
ascLmiNodeStatusTx = _AscLmiNodeStatusTx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 16),
    _AscLmiNodeStatusTx_Type()
)
ascLmiNodeStatusTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiNodeStatusTx.setStatus("mandatory")
_AscLmiNodeStatusAckTx_Type = Counter32
_AscLmiNodeStatusAckTx_Object = MibTableColumn
ascLmiNodeStatusAckTx = _AscLmiNodeStatusAckTx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 17),
    _AscLmiNodeStatusAckTx_Type()
)
ascLmiNodeStatusAckTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiNodeStatusAckTx.setStatus("mandatory")
_AscLmiNodeStatusRx_Type = Counter32
_AscLmiNodeStatusRx_Object = MibTableColumn
ascLmiNodeStatusRx = _AscLmiNodeStatusRx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 18),
    _AscLmiNodeStatusRx_Type()
)
ascLmiNodeStatusRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiNodeStatusRx.setStatus("mandatory")
_AscLmiNodeStatusAckRx_Type = Counter32
_AscLmiNodeStatusAckRx_Object = MibTableColumn
ascLmiNodeStatusAckRx = _AscLmiNodeStatusAckRx_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 2, 1, 1, 19),
    _AscLmiNodeStatusAckRx_Type()
)
ascLmiNodeStatusAckRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiNodeStatusAckRx.setStatus("mandatory")
_AscChanStateSigLmiGrp_ObjectIdentity = ObjectIdentity
ascChanStateSigLmiGrp = _AscChanStateSigLmiGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3)
)
_AscChanStateSigLmiGrpTable_Object = MibTable
ascChanStateSigLmiGrpTable = _AscChanStateSigLmiGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1)
)
if mibBuilder.loadTexts:
    ascChanStateSigLmiGrpTable.setStatus("mandatory")
_AscChanStateSigLmiGrpEntry_Object = MibTableRow
ascChanStateSigLmiGrpEntry = _AscChanStateSigLmiGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1, 1)
)
ascChanStateSigLmiGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ascLmiVccLineNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "ascLmiVccVpi"),
    (0, "CISCO-WAN-AXIPOP-MIB", "ascLmiVccVci"),
)
if mibBuilder.loadTexts:
    ascChanStateSigLmiGrpEntry.setStatus("mandatory")


class _AscLmiVccLineNum_Type(Integer32):
    """Custom type ascLmiVccLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("lineNum", 1)
    )


_AscLmiVccLineNum_Type.__name__ = "Integer32"
_AscLmiVccLineNum_Object = MibTableColumn
ascLmiVccLineNum = _AscLmiVccLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1, 1, 1),
    _AscLmiVccLineNum_Type()
)
ascLmiVccLineNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiVccLineNum.setStatus("mandatory")


class _AscLmiVccVpi_Type(Integer32):
    """Custom type ascLmiVccVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 14),
    )


_AscLmiVccVpi_Type.__name__ = "Integer32"
_AscLmiVccVpi_Object = MibTableColumn
ascLmiVccVpi = _AscLmiVccVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1, 1, 2),
    _AscLmiVccVpi_Type()
)
ascLmiVccVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiVccVpi.setStatus("mandatory")


class _AscLmiVccVci_Type(Integer32):
    """Custom type ascLmiVccVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 271),
    )


_AscLmiVccVci_Type.__name__ = "Integer32"
_AscLmiVccVci_Object = MibTableColumn
ascLmiVccVci = _AscLmiVccVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1, 1, 3),
    _AscLmiVccVci_Type()
)
ascLmiVccVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiVccVci.setStatus("mandatory")


class _AscLmiXmtAbitState_Type(Integer32):
    """Custom type ascLmiXmtAbitState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_AscLmiXmtAbitState_Type.__name__ = "Integer32"
_AscLmiXmtAbitState_Object = MibTableColumn
ascLmiXmtAbitState = _AscLmiXmtAbitState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1, 1, 4),
    _AscLmiXmtAbitState_Type()
)
ascLmiXmtAbitState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiXmtAbitState.setStatus("mandatory")


class _AscLmiRcvAbitState_Type(Integer32):
    """Custom type ascLmiRcvAbitState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_AscLmiRcvAbitState_Type.__name__ = "Integer32"
_AscLmiRcvAbitState_Object = MibTableColumn
ascLmiRcvAbitState = _AscLmiRcvAbitState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 4, 3, 1, 1, 5),
    _AscLmiRcvAbitState_Type()
)
ascLmiRcvAbitState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ascLmiRcvAbitState.setStatus("mandatory")
_AscFeatures_ObjectIdentity = ObjectIdentity
ascFeatures = _AscFeatures_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 5)
)


class _RedundancyAllowed_Type(Integer32):
    """Custom type redundancyAllowed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("redAllowed", 2),
          ("redNotAllowed", 1))
    )


_RedundancyAllowed_Type.__name__ = "Integer32"
_RedundancyAllowed_Object = MibScalar
redundancyAllowed = _RedundancyAllowed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 5, 1),
    _RedundancyAllowed_Type()
)
redundancyAllowed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    redundancyAllowed.setStatus("mandatory")
_SmFeatures_ObjectIdentity = ObjectIdentity
smFeatures = _SmFeatures_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 6)
)


class _ChannelizedAllowed_Type(Integer32):
    """Custom type channelizedAllowed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("channelized", 2),
          ("nonChannelized", 1))
    )


_ChannelizedAllowed_Type.__name__ = "Integer32"
_ChannelizedAllowed_Object = MibScalar
channelizedAllowed = _ChannelizedAllowed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 1),
    _ChannelizedAllowed_Type()
)
channelizedAllowed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    channelizedAllowed.setStatus("mandatory")


class _RateControlAllowed_Type(Integer32):
    """Custom type rateControlAllowed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rateControlDisabled", 1),
          ("rateControlEnabled", 2))
    )


_RateControlAllowed_Type.__name__ = "Integer32"
_RateControlAllowed_Object = MibScalar
rateControlAllowed = _RateControlAllowed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 2),
    _RateControlAllowed_Type()
)
rateControlAllowed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rateControlAllowed.setStatus("mandatory")


class _SvcAllowed_Type(Integer32):
    """Custom type svcAllowed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("svcDisabled", 1),
          ("svcEnabled", 2))
    )


_SvcAllowed_Type.__name__ = "Integer32"
_SvcAllowed_Object = MibScalar
svcAllowed = _SvcAllowed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 3),
    _SvcAllowed_Type()
)
svcAllowed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcAllowed.setStatus("mandatory")


class _FuniAllowed_Type(Integer32):
    """Custom type funiAllowed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("funiDisabled", 1),
          ("funiEnabled", 2))
    )


_FuniAllowed_Type.__name__ = "Integer32"
_FuniAllowed_Object = MibScalar
funiAllowed = _FuniAllowed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 4),
    _FuniAllowed_Type()
)
funiAllowed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    funiAllowed.setStatus("mandatory")


class _ImaAllowed_Type(Integer32):
    """Custom type imaAllowed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("imaDisabled", 1),
          ("imaEnabled", 2))
    )


_ImaAllowed_Type.__name__ = "Integer32"
_ImaAllowed_Object = MibScalar
imaAllowed = _ImaAllowed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 5),
    _ImaAllowed_Type()
)
imaAllowed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaAllowed.setStatus("mandatory")


class _MulTrksAllowed_Type(Integer32):
    """Custom type mulTrksAllowed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mulTrksDisabled", 1),
          ("mulTrksEnabled", 2))
    )


_MulTrksAllowed_Type.__name__ = "Integer32"
_MulTrksAllowed_Object = MibScalar
mulTrksAllowed = _MulTrksAllowed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 6),
    _MulTrksAllowed_Type()
)
mulTrksAllowed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mulTrksAllowed.setStatus("mandatory")


class _EgrQosFeature_Type(Integer32):
    """Custom type egrQosFeature based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("egrQosFeatureDisabled", 2),
          ("egrQosFeatureEnabled", 1),
          ("notApplicable", 3))
    )


_EgrQosFeature_Type.__name__ = "Integer32"
_EgrQosFeature_Object = MibScalar
egrQosFeature = _EgrQosFeature_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 6, 7),
    _EgrQosFeature_Type()
)
egrQosFeature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrQosFeature.setStatus("mandatory")
_SmRateControlConfig_ObjectIdentity = ObjectIdentity
smRateControlConfig = _SmRateControlConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 7)
)


class _RateUp_Type(Integer32):
    """Custom type rateUp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RateUp_Type.__name__ = "Integer32"
_RateUp_Object = MibScalar
rateUp = _RateUp_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 7, 1),
    _RateUp_Type()
)
rateUp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rateUp.setStatus("mandatory")


class _RateDown_Type(Integer32):
    """Custom type rateDown based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RateDown_Type.__name__ = "Integer32"
_RateDown_Object = MibScalar
rateDown = _RateDown_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 7, 2),
    _RateDown_Type()
)
rateDown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rateDown.setStatus("mandatory")


class _RateFastDown_Type(Integer32):
    """Custom type rateFastDown based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_RateFastDown_Type.__name__ = "Integer32"
_RateFastDown_Object = MibScalar
rateFastDown = _RateFastDown_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 7, 3),
    _RateFastDown_Type()
)
rateFastDown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rateFastDown.setStatus("mandatory")


class _RtdMeasurementTime_Type(Integer32):
    """Custom type rtdMeasurementTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RtdMeasurementTime_Type.__name__ = "Integer32"
_RtdMeasurementTime_Object = MibScalar
rtdMeasurementTime = _RtdMeasurementTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 7, 4),
    _RtdMeasurementTime_Type()
)
rtdMeasurementTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rtdMeasurementTime.setStatus("mandatory")


class _QirTimeout_Type(Integer32):
    """Custom type qirTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_QirTimeout_Type.__name__ = "Integer32"
_QirTimeout_Object = MibScalar
qirTimeout = _QirTimeout_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 7, 5),
    _QirTimeout_Type()
)
qirTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qirTimeout.setStatus("mandatory")
_ImatmClkCfgGrp_ObjectIdentity = ObjectIdentity
imatmClkCfgGrp = _ImatmClkCfgGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 8)
)


class _PrimaryClockSource_Type(Integer32):
    """Custom type primaryClockSource based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("bp8clk", 10),
          ("dsx3", 9),
          ("liu-rclk0", 1),
          ("liu-rclk1", 2),
          ("liu-rclk2", 3),
          ("liu-rclk3", 4),
          ("liu-rclk4", 5),
          ("liu-rclk5", 6),
          ("liu-rclk6", 7),
          ("liu-rclk7", 8))
    )


_PrimaryClockSource_Type.__name__ = "Integer32"
_PrimaryClockSource_Object = MibScalar
primaryClockSource = _PrimaryClockSource_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 8, 1),
    _PrimaryClockSource_Type()
)
primaryClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    primaryClockSource.setStatus("mandatory")


class _SecondaryClockSource_Type(Integer32):
    """Custom type secondaryClockSource based on Integer32"""
    defaultValue = 11

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("bp8clk", 10),
          ("dsx3", 9),
          ("liu-rclk0", 1),
          ("liu-rclk1", 2),
          ("liu-rclk2", 3),
          ("liu-rclk3", 4),
          ("liu-rclk4", 5),
          ("liu-rclk5", 6),
          ("liu-rclk6", 7),
          ("liu-rclk7", 8),
          ("none", 11))
    )


_SecondaryClockSource_Type.__name__ = "Integer32"
_SecondaryClockSource_Object = MibScalar
secondaryClockSource = _SecondaryClockSource_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 8, 2),
    _SecondaryClockSource_Type()
)
secondaryClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    secondaryClockSource.setStatus("mandatory")


class _CurrentClockSource_Type(Integer32):
    """Custom type currentClockSource based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("internal", 3),
          ("primary", 1),
          ("secondary", 2))
    )


_CurrentClockSource_Type.__name__ = "Integer32"
_CurrentClockSource_Object = MibScalar
currentClockSource = _CurrentClockSource_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 8, 3),
    _CurrentClockSource_Type()
)
currentClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    currentClockSource.setStatus("mandatory")
_ImatmDsx3CntrsGrp_ObjectIdentity = ObjectIdentity
imatmDsx3CntrsGrp = _ImatmDsx3CntrsGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 9)
)
_ImatmDsx3PortCntrsGrpTable_Object = MibTable
imatmDsx3PortCntrsGrpTable = _ImatmDsx3PortCntrsGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1)
)
if mibBuilder.loadTexts:
    imatmDsx3PortCntrsGrpTable.setStatus("mandatory")
_ImatmDsx3PortCntrsEntry_Object = MibTableRow
imatmDsx3PortCntrsEntry = _ImatmDsx3PortCntrsEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1)
)
imatmDsx3PortCntrsEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "imatmDsx3PortIndex"),
)
if mibBuilder.loadTexts:
    imatmDsx3PortCntrsEntry.setStatus("mandatory")


class _ImatmDsx3PortIndex_Type(Integer32):
    """Custom type imatmDsx3PortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_ImatmDsx3PortIndex_Type.__name__ = "Integer32"
_ImatmDsx3PortIndex_Object = MibTableColumn
imatmDsx3PortIndex = _ImatmDsx3PortIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 1),
    _ImatmDsx3PortIndex_Type()
)
imatmDsx3PortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imatmDsx3PortIndex.setStatus("mandatory")
_ImatmDsx3PortRcvCells_Type = Counter32
_ImatmDsx3PortRcvCells_Object = MibTableColumn
imatmDsx3PortRcvCells = _ImatmDsx3PortRcvCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 2),
    _ImatmDsx3PortRcvCells_Type()
)
imatmDsx3PortRcvCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imatmDsx3PortRcvCells.setStatus("mandatory")
_ImatmDsx3PortXmtCells_Type = Counter32
_ImatmDsx3PortXmtCells_Object = MibTableColumn
imatmDsx3PortXmtCells = _ImatmDsx3PortXmtCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 3),
    _ImatmDsx3PortXmtCells_Type()
)
imatmDsx3PortXmtCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imatmDsx3PortXmtCells.setStatus("mandatory")
_ImatmPortRcvInvCells_Type = Counter32
_ImatmPortRcvInvCells_Object = MibTableColumn
imatmPortRcvInvCells = _ImatmPortRcvInvCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 4),
    _ImatmPortRcvInvCells_Type()
)
imatmPortRcvInvCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imatmPortRcvInvCells.setStatus("mandatory")


class _ImatmPortCntrClrButton_Type(Integer32):
    """Custom type imatmPortCntrClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("noaction", 1))
    )


_ImatmPortCntrClrButton_Type.__name__ = "Integer32"
_ImatmPortCntrClrButton_Object = MibTableColumn
imatmPortCntrClrButton = _ImatmPortCntrClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 5),
    _ImatmPortCntrClrButton_Type()
)
imatmPortCntrClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imatmPortCntrClrButton.setStatus("mandatory")
_ImatmDsx3PortLastMismatchVpiVci_Type = Integer32
_ImatmDsx3PortLastMismatchVpiVci_Object = MibTableColumn
imatmDsx3PortLastMismatchVpiVci = _ImatmDsx3PortLastMismatchVpiVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 6),
    _ImatmDsx3PortLastMismatchVpiVci_Type()
)
imatmDsx3PortLastMismatchVpiVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imatmDsx3PortLastMismatchVpiVci.setStatus("mandatory")
_ImatmPortImaCtrlMatchCells_Type = Counter32
_ImatmPortImaCtrlMatchCells_Object = MibTableColumn
imatmPortImaCtrlMatchCells = _ImatmPortImaCtrlMatchCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 9, 1, 1, 7),
    _ImatmPortImaCtrlMatchCells_Type()
)
imatmPortImaCtrlMatchCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imatmPortImaCtrlMatchCells.setStatus("mandatory")
_Srm3T3CnfGrp_ObjectIdentity = ObjectIdentity
srm3T3CnfGrp = _Srm3T3CnfGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 10)
)
_Srm3T3CnfGrpTable_Object = MibTable
srm3T3CnfGrpTable = _Srm3T3CnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1)
)
if mibBuilder.loadTexts:
    srm3T3CnfGrpTable.setStatus("mandatory")
_Srm3T3CnfGrpEntry_Object = MibTableRow
srm3T3CnfGrpEntry = _Srm3T3CnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1, 1)
)
srm3T3CnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "srmT3LineNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "srmStartT1LineNum"),
)
if mibBuilder.loadTexts:
    srm3T3CnfGrpEntry.setStatus("mandatory")


class _SrmT3LineNum_Type(Integer32):
    """Custom type srmT3LineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_SrmT3LineNum_Type.__name__ = "Integer32"
_SrmT3LineNum_Object = MibTableColumn
srmT3LineNum = _SrmT3LineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1, 1, 1),
    _SrmT3LineNum_Type()
)
srmT3LineNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srmT3LineNum.setStatus("mandatory")


class _SrmStartT1LineNum_Type(Integer32):
    """Custom type srmStartT1LineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 28),
    )


_SrmStartT1LineNum_Type.__name__ = "Integer32"
_SrmStartT1LineNum_Object = MibTableColumn
srmStartT1LineNum = _SrmStartT1LineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1, 1, 2),
    _SrmStartT1LineNum_Type()
)
srmStartT1LineNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srmStartT1LineNum.setStatus("mandatory")


class _SrmT1RowStatus_Type(Integer32):
    """Custom type srmT1RowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("delete", 2),
          ("modify", 3))
    )


_SrmT1RowStatus_Type.__name__ = "Integer32"
_SrmT1RowStatus_Object = MibTableColumn
srmT1RowStatus = _SrmT1RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1, 1, 3),
    _SrmT1RowStatus_Type()
)
srmT1RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    srmT1RowStatus.setStatus("mandatory")


class _SrmTargetSlotNum_Type(Integer32):
    """Custom type srmTargetSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_SrmTargetSlotNum_Type.__name__ = "Integer32"
_SrmTargetSlotNum_Object = MibTableColumn
srmTargetSlotNum = _SrmTargetSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1, 1, 4),
    _SrmTargetSlotNum_Type()
)
srmTargetSlotNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    srmTargetSlotNum.setStatus("mandatory")


class _SrmTargetSlotLineNum_Type(Integer32):
    """Custom type srmTargetSlotLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_SrmTargetSlotLineNum_Type.__name__ = "Integer32"
_SrmTargetSlotLineNum_Object = MibTableColumn
srmTargetSlotLineNum = _SrmTargetSlotLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 10, 1, 1, 5),
    _SrmTargetSlotLineNum_Type()
)
srmTargetSlotLineNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    srmTargetSlotLineNum.setStatus("mandatory")
_SmCardUtilization_ObjectIdentity = ObjectIdentity
smCardUtilization = _SmCardUtilization_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 11)
)


class _CardOversubscribed_Type(Integer32):
    """Custom type cardOversubscribed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_CardOversubscribed_Type.__name__ = "Integer32"
_CardOversubscribed_Object = MibScalar
cardOversubscribed = _CardOversubscribed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 11, 1),
    _CardOversubscribed_Type()
)
cardOversubscribed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cardOversubscribed.setStatus("mandatory")


class _CardIngrPercentUtil_Type(Integer32):
    """Custom type cardIngrPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_CardIngrPercentUtil_Type.__name__ = "Integer32"
_CardIngrPercentUtil_Object = MibScalar
cardIngrPercentUtil = _CardIngrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 11, 2),
    _CardIngrPercentUtil_Type()
)
cardIngrPercentUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cardIngrPercentUtil.setStatus("mandatory")
_BnmLineInterfaceMode_ObjectIdentity = ObjectIdentity
bnmLineInterfaceMode = _BnmLineInterfaceMode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 12)
)


class _BnmLineInterfaceFormat_Type(Integer32):
    """Custom type bnmLineInterfaceFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bnmNni", 3),
          ("bnmSti", 1),
          ("bnmUni", 2))
    )


_BnmLineInterfaceFormat_Type.__name__ = "Integer32"
_BnmLineInterfaceFormat_Object = MibScalar
bnmLineInterfaceFormat = _BnmLineInterfaceFormat_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 12, 1),
    _BnmLineInterfaceFormat_Type()
)
bnmLineInterfaceFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bnmLineInterfaceFormat.setStatus("mandatory")
_ImatmVpTrkGrp_ObjectIdentity = ObjectIdentity
imatmVpTrkGrp = _ImatmVpTrkGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13)
)
_ImatmVpTrkMapGrp_ObjectIdentity = ObjectIdentity
imatmVpTrkMapGrp = _ImatmVpTrkMapGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1)
)
_ImatmVpTrkMapGrpTable_Object = MibTable
imatmVpTrkMapGrpTable = _ImatmVpTrkMapGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1)
)
if mibBuilder.loadTexts:
    imatmVpTrkMapGrpTable.setStatus("mandatory")
_ImatmVpTrkMapGrpTableEntry_Object = MibTableRow
imatmVpTrkMapGrpTableEntry = _ImatmVpTrkMapGrpTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1, 1)
)
imatmVpTrkMapGrpTableEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "imatmRangeNum"),
)
if mibBuilder.loadTexts:
    imatmVpTrkMapGrpTableEntry.setStatus("mandatory")


class _ImatmRangeNum_Type(Integer32):
    """Custom type imatmRangeNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_ImatmRangeNum_Type.__name__ = "Integer32"
_ImatmRangeNum_Object = MibTableColumn
imatmRangeNum = _ImatmRangeNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1, 1, 1),
    _ImatmRangeNum_Type()
)
imatmRangeNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imatmRangeNum.setStatus("mandatory")


class _ImatmTrkNum_Type(Integer32):
    """Custom type imatmTrkNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_ImatmTrkNum_Type.__name__ = "Integer32"
_ImatmTrkNum_Object = MibTableColumn
imatmTrkNum = _ImatmTrkNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1, 1, 2),
    _ImatmTrkNum_Type()
)
imatmTrkNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imatmTrkNum.setStatus("mandatory")


class _ImatmTrkMinVp_Type(Integer32):
    """Custom type imatmTrkMinVp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_ImatmTrkMinVp_Type.__name__ = "Integer32"
_ImatmTrkMinVp_Object = MibTableColumn
imatmTrkMinVp = _ImatmTrkMinVp_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1, 1, 3),
    _ImatmTrkMinVp_Type()
)
imatmTrkMinVp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imatmTrkMinVp.setStatus("mandatory")


class _ImatmTrkMaxVp_Type(Integer32):
    """Custom type imatmTrkMaxVp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_ImatmTrkMaxVp_Type.__name__ = "Integer32"
_ImatmTrkMaxVp_Object = MibTableColumn
imatmTrkMaxVp = _ImatmTrkMaxVp_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1, 1, 4),
    _ImatmTrkMaxVp_Type()
)
imatmTrkMaxVp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imatmTrkMaxVp.setStatus("mandatory")


class _ImatmTrkOpType_Type(Integer32):
    """Custom type imatmTrkOpType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("modify", 3))
    )


_ImatmTrkOpType_Type.__name__ = "Integer32"
_ImatmTrkOpType_Object = MibTableColumn
imatmTrkOpType = _ImatmTrkOpType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 1, 1, 5),
    _ImatmTrkOpType_Type()
)
imatmTrkOpType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imatmTrkOpType.setStatus("mandatory")


class _NextRangeNumAvail_Type(Integer32):
    """Custom type nextRangeNumAvail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_NextRangeNumAvail_Type.__name__ = "Integer32"
_NextRangeNumAvail_Object = MibScalar
nextRangeNumAvail = _NextRangeNumAvail_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 1, 2),
    _NextRangeNumAvail_Type()
)
nextRangeNumAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nextRangeNumAvail.setStatus("mandatory")
_ImatmVpTrkClrGrp_ObjectIdentity = ObjectIdentity
imatmVpTrkClrGrp = _ImatmVpTrkClrGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 2)
)
_ImatmVpTrkClrGrpTable_Object = MibTable
imatmVpTrkClrGrpTable = _ImatmVpTrkClrGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 2, 1)
)
if mibBuilder.loadTexts:
    imatmVpTrkClrGrpTable.setStatus("mandatory")
_ImatmVpTrkClrGrpEntry_Object = MibTableRow
imatmVpTrkClrGrpEntry = _ImatmVpTrkClrGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 2, 1, 1)
)
imatmVpTrkClrGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "imatmClrVpTrkNum"),
)
if mibBuilder.loadTexts:
    imatmVpTrkClrGrpEntry.setStatus("mandatory")


class _ImatmClrVpTrkNum_Type(Integer32):
    """Custom type imatmClrVpTrkNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_ImatmClrVpTrkNum_Type.__name__ = "Integer32"
_ImatmClrVpTrkNum_Object = MibTableColumn
imatmClrVpTrkNum = _ImatmClrVpTrkNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 2, 1, 1, 1),
    _ImatmClrVpTrkNum_Type()
)
imatmClrVpTrkNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imatmClrVpTrkNum.setStatus("mandatory")


class _ImatmClrVpTrkButton_Type(Integer32):
    """Custom type imatmClrVpTrkButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("noaction", 1))
    )


_ImatmClrVpTrkButton_Type.__name__ = "Integer32"
_ImatmClrVpTrkButton_Object = MibTableColumn
imatmClrVpTrkButton = _ImatmClrVpTrkButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 13, 2, 1, 1, 2),
    _ImatmClrVpTrkButton_Type()
)
imatmClrVpTrkButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imatmClrVpTrkButton.setStatus("mandatory")
_Dsx3CardSpecCnfgGrp_ObjectIdentity = ObjectIdentity
dsx3CardSpecCnfgGrp = _Dsx3CardSpecCnfgGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 14)
)
_ImatmDsx3CardSpecConfigGrpTable_Object = MibTable
imatmDsx3CardSpecConfigGrpTable = _ImatmDsx3CardSpecConfigGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 14, 1)
)
if mibBuilder.loadTexts:
    imatmDsx3CardSpecConfigGrpTable.setStatus("mandatory")
_ImatmDsx3CardSpecConfigEntry_Object = MibTableRow
imatmDsx3CardSpecConfigEntry = _ImatmDsx3CardSpecConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 14, 1, 1)
)
imatmDsx3CardSpecConfigEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "imatmdsx3PortIndex"),
)
if mibBuilder.loadTexts:
    imatmDsx3CardSpecConfigEntry.setStatus("mandatory")


class _Imatmdsx3PortIndex_Type(Integer32):
    """Custom type imatmdsx3PortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_Imatmdsx3PortIndex_Type.__name__ = "Integer32"
_Imatmdsx3PortIndex_Object = MibTableColumn
imatmdsx3PortIndex = _Imatmdsx3PortIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 14, 1, 1, 1),
    _Imatmdsx3PortIndex_Type()
)
imatmdsx3PortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imatmdsx3PortIndex.setStatus("mandatory")


class _ImatmDsx3SingleBitErrCorrEnable_Type(Integer32):
    """Custom type imatmDsx3SingleBitErrCorrEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_ImatmDsx3SingleBitErrCorrEnable_Type.__name__ = "Integer32"
_ImatmDsx3SingleBitErrCorrEnable_Object = MibTableColumn
imatmDsx3SingleBitErrCorrEnable = _ImatmDsx3SingleBitErrCorrEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 14, 1, 1, 2),
    _ImatmDsx3SingleBitErrCorrEnable_Type()
)
imatmDsx3SingleBitErrCorrEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imatmDsx3SingleBitErrCorrEnable.setStatus("mandatory")
_PxmFeatures_ObjectIdentity = ObjectIdentity
pxmFeatures = _PxmFeatures_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 15)
)


class _VsiControllersAllowed_Type(Integer32):
    """Custom type vsiControllersAllowed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_VsiControllersAllowed_Type.__name__ = "Integer32"
_VsiControllersAllowed_Object = MibScalar
vsiControllersAllowed = _VsiControllersAllowed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 15, 1),
    _VsiControllersAllowed_Type()
)
vsiControllersAllowed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vsiControllersAllowed.setStatus("mandatory")


class _ApsCardAttributes_Type(Integer32):
    """Custom type apsCardAttributes based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ApsCardAttributes_Type.__name__ = "Integer32"
_ApsCardAttributes_Object = MibScalar
apsCardAttributes = _ApsCardAttributes_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 15, 2),
    _ApsCardAttributes_Type()
)
apsCardAttributes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    apsCardAttributes.setStatus("mandatory")


class _TrkCACEnable_Type(Integer32):
    """Custom type trkCACEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_TrkCACEnable_Type.__name__ = "Integer32"
_TrkCACEnable_Object = MibScalar
trkCACEnable = _TrkCACEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 15, 3),
    _TrkCACEnable_Type()
)
trkCACEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    trkCACEnable.setStatus("mandatory")
_PxmClockConfig_ObjectIdentity = ObjectIdentity
pxmClockConfig = _PxmClockConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16)
)


class _PxmPrimaryMuxClockSource_Type(Integer32):
    """Custom type pxmPrimaryMuxClockSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("pxmBottomSRMClock", 7),
          ("pxmExternalClock", 4),
          ("pxmExternalClock2", 9),
          ("pxmInbandClock1", 1),
          ("pxmInbandClock2", 5),
          ("pxmInternalOscillator", 8),
          ("pxmServiceModuleClock1", 2),
          ("pxmServiceModuleClock2", 6),
          ("pxmTopSRMClock", 3))
    )


_PxmPrimaryMuxClockSource_Type.__name__ = "Integer32"
_PxmPrimaryMuxClockSource_Object = MibScalar
pxmPrimaryMuxClockSource = _PxmPrimaryMuxClockSource_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 1),
    _PxmPrimaryMuxClockSource_Type()
)
pxmPrimaryMuxClockSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmPrimaryMuxClockSource.setStatus("mandatory")


class _PxmPrimaryInbandClockSourceLineNumber_Type(Integer32):
    """Custom type pxmPrimaryInbandClockSourceLineNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4),
    )


_PxmPrimaryInbandClockSourceLineNumber_Type.__name__ = "Integer32"
_PxmPrimaryInbandClockSourceLineNumber_Object = MibScalar
pxmPrimaryInbandClockSourceLineNumber = _PxmPrimaryInbandClockSourceLineNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 2),
    _PxmPrimaryInbandClockSourceLineNumber_Type()
)
pxmPrimaryInbandClockSourceLineNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmPrimaryInbandClockSourceLineNumber.setStatus("mandatory")


class _PxmPrimarySMClockSourceSlotNumber_Type(Integer32):
    """Custom type pxmPrimarySMClockSourceSlotNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_PxmPrimarySMClockSourceSlotNumber_Type.__name__ = "Integer32"
_PxmPrimarySMClockSourceSlotNumber_Object = MibScalar
pxmPrimarySMClockSourceSlotNumber = _PxmPrimarySMClockSourceSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 3),
    _PxmPrimarySMClockSourceSlotNumber_Type()
)
pxmPrimarySMClockSourceSlotNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmPrimarySMClockSourceSlotNumber.setStatus("mandatory")


class _PxmSecondaryMuxClockSource_Type(Integer32):
    """Custom type pxmSecondaryMuxClockSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("pxmBottomSRMClock", 7),
          ("pxmExternalClock", 4),
          ("pxmExternalClock2", 9),
          ("pxmInbandClock1", 1),
          ("pxmInbandClock2", 5),
          ("pxmInternalOscillator", 8),
          ("pxmServiceModuleClock1", 2),
          ("pxmServiceModuleClock2", 6),
          ("pxmTopSRMClock", 3))
    )


_PxmSecondaryMuxClockSource_Type.__name__ = "Integer32"
_PxmSecondaryMuxClockSource_Object = MibScalar
pxmSecondaryMuxClockSource = _PxmSecondaryMuxClockSource_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 4),
    _PxmSecondaryMuxClockSource_Type()
)
pxmSecondaryMuxClockSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmSecondaryMuxClockSource.setStatus("mandatory")


class _PxmSecondaryInbandClockSourceLineNumber_Type(Integer32):
    """Custom type pxmSecondaryInbandClockSourceLineNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4),
    )


_PxmSecondaryInbandClockSourceLineNumber_Type.__name__ = "Integer32"
_PxmSecondaryInbandClockSourceLineNumber_Object = MibScalar
pxmSecondaryInbandClockSourceLineNumber = _PxmSecondaryInbandClockSourceLineNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 5),
    _PxmSecondaryInbandClockSourceLineNumber_Type()
)
pxmSecondaryInbandClockSourceLineNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmSecondaryInbandClockSourceLineNumber.setStatus("mandatory")


class _PxmSecondarySMClockSourceSlotNumber_Type(Integer32):
    """Custom type pxmSecondarySMClockSourceSlotNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_PxmSecondarySMClockSourceSlotNumber_Type.__name__ = "Integer32"
_PxmSecondarySMClockSourceSlotNumber_Object = MibScalar
pxmSecondarySMClockSourceSlotNumber = _PxmSecondarySMClockSourceSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 6),
    _PxmSecondarySMClockSourceSlotNumber_Type()
)
pxmSecondarySMClockSourceSlotNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmSecondarySMClockSourceSlotNumber.setStatus("mandatory")


class _PxmCurrentClock_Type(Integer32):
    """Custom type pxmCurrentClock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("intOscillator", 3),
          ("primary", 1),
          ("secondary", 2))
    )


_PxmCurrentClock_Type.__name__ = "Integer32"
_PxmCurrentClock_Object = MibScalar
pxmCurrentClock = _PxmCurrentClock_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 7),
    _PxmCurrentClock_Type()
)
pxmCurrentClock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmCurrentClock.setStatus("mandatory")


class _PxmPreviousClock_Type(Integer32):
    """Custom type pxmPreviousClock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("intOscillator", 3),
          ("primary", 1),
          ("secondary", 2))
    )


_PxmPreviousClock_Type.__name__ = "Integer32"
_PxmPreviousClock_Object = MibScalar
pxmPreviousClock = _PxmPreviousClock_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 8),
    _PxmPreviousClock_Type()
)
pxmPreviousClock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmPreviousClock.setStatus("mandatory")


class _PxmExtClockPresent_Type(Integer32):
    """Custom type pxmExtClockPresent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clkNotPresent", 1),
          ("clkPresent", 2))
    )


_PxmExtClockPresent_Type.__name__ = "Integer32"
_PxmExtClockPresent_Object = MibScalar
pxmExtClockPresent = _PxmExtClockPresent_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 9),
    _PxmExtClockPresent_Type()
)
pxmExtClockPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmExtClockPresent.setStatus("mandatory")


class _PxmExtClkSrcImpedance_Type(Integer32):
    """Custom type pxmExtClkSrcImpedance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ohms100", 2),
          ("ohms120", 3),
          ("ohms75", 1))
    )


_PxmExtClkSrcImpedance_Type.__name__ = "Integer32"
_PxmExtClkSrcImpedance_Object = MibScalar
pxmExtClkSrcImpedance = _PxmExtClkSrcImpedance_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 10),
    _PxmExtClkSrcImpedance_Type()
)
pxmExtClkSrcImpedance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmExtClkSrcImpedance.setStatus("mandatory")


class _PxmExtClkConnectorType_Type(Integer32):
    """Custom type pxmExtClkConnectorType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rj45Type", 1),
          ("smbType", 2))
    )


_PxmExtClkConnectorType_Type.__name__ = "Integer32"
_PxmExtClkConnectorType_Object = MibScalar
pxmExtClkConnectorType = _PxmExtClkConnectorType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 11),
    _PxmExtClkConnectorType_Type()
)
pxmExtClkConnectorType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmExtClkConnectorType.setStatus("mandatory")


class _PxmClkStratumLevel_Type(Integer32):
    """Custom type pxmClkStratumLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("stratumLevel1", 2),
          ("stratumLevel2", 3),
          ("stratumLevel3", 5),
          ("stratumLevel3E", 4),
          ("stratumLevel4", 6),
          ("stratumLevel4E", 7),
          ("stratumUnknown", 1))
    )


_PxmClkStratumLevel_Type.__name__ = "Integer32"
_PxmClkStratumLevel_Object = MibScalar
pxmClkStratumLevel = _PxmClkStratumLevel_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 12),
    _PxmClkStratumLevel_Type()
)
pxmClkStratumLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmClkStratumLevel.setStatus("mandatory")


class _PxmClkErrReason_Type(Integer32):
    """Custom type pxmClkErrReason based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("excessiveJitter", 6),
          ("freqTooHigh", 4),
          ("freqTooLow", 5),
          ("goodClk", 1),
          ("missingCard", 7),
          ("missingLogicalIf", 8),
          ("noClkSignal", 3),
          ("noClock", 9),
          ("unknownReason", 2))
    )


_PxmClkErrReason_Type.__name__ = "Integer32"
_PxmClkErrReason_Object = MibScalar
pxmClkErrReason = _PxmClkErrReason_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 13),
    _PxmClkErrReason_Type()
)
pxmClkErrReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmClkErrReason.setStatus("mandatory")


class _PxmExtClock2Present_Type(Integer32):
    """Custom type pxmExtClock2Present based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clkNotPresent", 1),
          ("clkPresent", 2))
    )


_PxmExtClock2Present_Type.__name__ = "Integer32"
_PxmExtClock2Present_Object = MibScalar
pxmExtClock2Present = _PxmExtClock2Present_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 14),
    _PxmExtClock2Present_Type()
)
pxmExtClock2Present.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmExtClock2Present.setStatus("mandatory")


class _PxmExtClk2SrcImpedance_Type(Integer32):
    """Custom type pxmExtClk2SrcImpedance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ohms100", 2),
          ("ohms120", 3),
          ("ohms75", 1))
    )


_PxmExtClk2SrcImpedance_Type.__name__ = "Integer32"
_PxmExtClk2SrcImpedance_Object = MibScalar
pxmExtClk2SrcImpedance = _PxmExtClk2SrcImpedance_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 15),
    _PxmExtClk2SrcImpedance_Type()
)
pxmExtClk2SrcImpedance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmExtClk2SrcImpedance.setStatus("mandatory")


class _PxmExtClk2ConnectorType_Type(Integer32):
    """Custom type pxmExtClk2ConnectorType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rj45Type", 1),
          ("smbType", 2))
    )


_PxmExtClk2ConnectorType_Type.__name__ = "Integer32"
_PxmExtClk2ConnectorType_Object = MibScalar
pxmExtClk2ConnectorType = _PxmExtClk2ConnectorType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 16, 16),
    _PxmExtClk2ConnectorType_Type()
)
pxmExtClk2ConnectorType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmExtClk2ConnectorType.setStatus("mandatory")
_VismConfig_ObjectIdentity = ObjectIdentity
vismConfig = _VismConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17)
)
_VismIpGrp_ObjectIdentity = ObjectIdentity
vismIpGrp = _VismIpGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1)
)
_VismIpAddress_Type = IpAddress
_VismIpAddress_Object = MibScalar
vismIpAddress = _VismIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 1),
    _VismIpAddress_Type()
)
vismIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismIpAddress.setStatus("mandatory")
_VismSubNetMask_Type = IpAddress
_VismSubNetMask_Object = MibScalar
vismSubNetMask = _VismSubNetMask_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 2),
    _VismSubNetMask_Type()
)
vismSubNetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismSubNetMask.setStatus("mandatory")


class _VismControlTos_Type(Integer32):
    """Custom type vismControlTos based on Integer32"""
    defaultValue = 96

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VismControlTos_Type.__name__ = "Integer32"
_VismControlTos_Object = MibScalar
vismControlTos = _VismControlTos_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 3),
    _VismControlTos_Type()
)
vismControlTos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismControlTos.setStatus("mandatory")
_VismBearerIpAddress_Type = IpAddress
_VismBearerIpAddress_Object = MibScalar
vismBearerIpAddress = _VismBearerIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 4),
    _VismBearerIpAddress_Type()
)
vismBearerIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismBearerIpAddress.setStatus("mandatory")
_VismBearerSubNetMask_Type = IpAddress
_VismBearerSubNetMask_Object = MibScalar
vismBearerSubNetMask = _VismBearerSubNetMask_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 1, 5),
    _VismBearerSubNetMask_Type()
)
vismBearerSubNetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismBearerSubNetMask.setStatus("mandatory")
_VismVoIpGrp_ObjectIdentity = ObjectIdentity
vismVoIpGrp = _VismVoIpGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2)
)


class _VismBearerTos_Type(Integer32):
    """Custom type vismBearerTos based on Integer32"""
    defaultValue = 160

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VismBearerTos_Type.__name__ = "Integer32"
_VismBearerTos_Object = MibScalar
vismBearerTos = _VismBearerTos_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 1),
    _VismBearerTos_Type()
)
vismBearerTos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismBearerTos.setStatus("mandatory")


class _VismRtcpRepInterval_Type(Integer32):
    """Custom type vismRtcpRepInterval based on Integer32"""
    defaultValue = 5000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(500, 15000),
    )


_VismRtcpRepInterval_Type.__name__ = "Integer32"
_VismRtcpRepInterval_Object = MibScalar
vismRtcpRepInterval = _VismRtcpRepInterval_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 2),
    _VismRtcpRepInterval_Type()
)
vismRtcpRepInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismRtcpRepInterval.setStatus("mandatory")


class _VismRtpReceiveTimer_Type(Integer32):
    """Custom type vismRtpReceiveTimer based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_VismRtpReceiveTimer_Type.__name__ = "Integer32"
_VismRtpReceiveTimer_Object = MibScalar
vismRtpReceiveTimer = _VismRtpReceiveTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 3),
    _VismRtpReceiveTimer_Type()
)
vismRtpReceiveTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismRtpReceiveTimer.setStatus("mandatory")


class _VismPacketizationPeriod_Type(Integer32):
    """Custom type vismPacketizationPeriod based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(10,
              20,
              30,
              40)
        )
    )
    namedValues = NamedValues(
        *(("fourtyms", 40),
          ("tenms", 10),
          ("thirtyms", 30),
          ("twentyms", 20))
    )


_VismPacketizationPeriod_Type.__name__ = "Integer32"
_VismPacketizationPeriod_Object = MibScalar
vismPacketizationPeriod = _VismPacketizationPeriod_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 4),
    _VismPacketizationPeriod_Type()
)
vismPacketizationPeriod.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismPacketizationPeriod.setStatus("deprecated")


class _VismVoIpDtmfRelay_Type(TruthValue):
    """Custom type vismVoIpDtmfRelay based on TruthValue"""


_VismVoIpDtmfRelay_Object = MibScalar
vismVoIpDtmfRelay = _VismVoIpDtmfRelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 5),
    _VismVoIpDtmfRelay_Type()
)
vismVoIpDtmfRelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVoIpDtmfRelay.setStatus("mandatory")


class _VismVoIpCasTransport_Type(TruthValue):
    """Custom type vismVoIpCasTransport based on TruthValue"""


_VismVoIpCasTransport_Object = MibScalar
vismVoIpCasTransport = _VismVoIpCasTransport_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 6),
    _VismVoIpCasTransport_Type()
)
vismVoIpCasTransport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVoIpCasTransport.setStatus("mandatory")


class _VismVoIpTripleRedundancy_Type(TruthValue):
    """Custom type vismVoIpTripleRedundancy based on TruthValue"""


_VismVoIpTripleRedundancy_Object = MibScalar
vismVoIpTripleRedundancy = _VismVoIpTripleRedundancy_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 7),
    _VismVoIpTripleRedundancy_Type()
)
vismVoIpTripleRedundancy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVoIpTripleRedundancy.setStatus("mandatory")


class _VismVoIpVADTimer_Type(Integer32):
    """Custom type vismVoIpVADTimer based on Integer32"""
    defaultValue = 250

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(250, 65535),
    )


_VismVoIpVADTimer_Type.__name__ = "Integer32"
_VismVoIpVADTimer_Object = MibScalar
vismVoIpVADTimer = _VismVoIpVADTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 8),
    _VismVoIpVADTimer_Type()
)
vismVoIpVADTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVoIpVADTimer.setStatus("mandatory")


class _VismVoIpNTECapabilityNegotiate_Type(TruthValue):
    """Custom type vismVoIpNTECapabilityNegotiate based on TruthValue"""


_VismVoIpNTECapabilityNegotiate_Object = MibScalar
vismVoIpNTECapabilityNegotiate = _VismVoIpNTECapabilityNegotiate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 9),
    _VismVoIpNTECapabilityNegotiate_Type()
)
vismVoIpNTECapabilityNegotiate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVoIpNTECapabilityNegotiate.setStatus("mandatory")


class _VismVoIpSIDPayloadType_Type(Integer32):
    """Custom type vismVoIpSIDPayloadType based on Integer32"""
    defaultValue = 13

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VismVoIpSIDPayloadType_Type.__name__ = "Integer32"
_VismVoIpSIDPayloadType_Object = MibScalar
vismVoIpSIDPayloadType = _VismVoIpSIDPayloadType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 10),
    _VismVoIpSIDPayloadType_Type()
)
vismVoIpSIDPayloadType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVoIpSIDPayloadType.setStatus("mandatory")


class _VismVoIpDPvcOamCellGap_Type(Integer32):
    """Custom type vismVoIpDPvcOamCellGap based on Integer32"""
    defaultValue = 500

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 5000),
    )


_VismVoIpDPvcOamCellGap_Type.__name__ = "Integer32"
_VismVoIpDPvcOamCellGap_Object = MibScalar
vismVoIpDPvcOamCellGap = _VismVoIpDPvcOamCellGap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 11),
    _VismVoIpDPvcOamCellGap_Type()
)
vismVoIpDPvcOamCellGap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVoIpDPvcOamCellGap.setStatus("mandatory")


class _VismVoIpDPvcRetryCnt_Type(Integer32):
    """Custom type vismVoIpDPvcRetryCnt based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_VismVoIpDPvcRetryCnt_Type.__name__ = "Integer32"
_VismVoIpDPvcRetryCnt_Object = MibScalar
vismVoIpDPvcRetryCnt = _VismVoIpDPvcRetryCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 12),
    _VismVoIpDPvcRetryCnt_Type()
)
vismVoIpDPvcRetryCnt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVoIpDPvcRetryCnt.setStatus("mandatory")


class _VismVoIpDPvcRecoverCnt_Type(Integer32):
    """Custom type vismVoIpDPvcRecoverCnt based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_VismVoIpDPvcRecoverCnt_Type.__name__ = "Integer32"
_VismVoIpDPvcRecoverCnt_Object = MibScalar
vismVoIpDPvcRecoverCnt = _VismVoIpDPvcRecoverCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 13),
    _VismVoIpDPvcRecoverCnt_Type()
)
vismVoIpDPvcRecoverCnt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVoIpDPvcRecoverCnt.setStatus("mandatory")


class _VismRtcpRecvMultiplier_Type(Integer32):
    """Custom type vismRtcpRecvMultiplier based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_VismRtcpRecvMultiplier_Type.__name__ = "Integer32"
_VismRtcpRecvMultiplier_Object = MibScalar
vismRtcpRecvMultiplier = _VismRtcpRecvMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 14),
    _VismRtcpRecvMultiplier_Type()
)
vismRtcpRecvMultiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismRtcpRecvMultiplier.setStatus("mandatory")


class _VismVoIpLapdTrunkPVC_Type(Integer32):
    """Custom type vismVoIpLapdTrunkPVC based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bearer", 2),
          ("control", 1))
    )


_VismVoIpLapdTrunkPVC_Type.__name__ = "Integer32"
_VismVoIpLapdTrunkPVC_Object = MibScalar
vismVoIpLapdTrunkPVC = _VismVoIpLapdTrunkPVC_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 15),
    _VismVoIpLapdTrunkPVC_Type()
)
vismVoIpLapdTrunkPVC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVoIpLapdTrunkPVC.setStatus("mandatory")


class _VismVoIpEventNegotiationPolicy_Type(Integer32):
    """Custom type vismVoIpEventNegotiationPolicy based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("all", 3),
          ("none", 1),
          ("proprietary", 2))
    )


_VismVoIpEventNegotiationPolicy_Type.__name__ = "Integer32"
_VismVoIpEventNegotiationPolicy_Object = MibScalar
vismVoIpEventNegotiationPolicy = _VismVoIpEventNegotiationPolicy_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 2, 16),
    _VismVoIpEventNegotiationPolicy_Type()
)
vismVoIpEventNegotiationPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVoIpEventNegotiationPolicy.setStatus("mandatory")
_VismDspGrp_ObjectIdentity = ObjectIdentity
vismDspGrp = _VismDspGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3)
)


class _VismEcanCnfIdlePattern_Type(Integer32):
    """Custom type vismEcanCnfIdlePattern based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("pattern1", 1),
          ("pattern2", 2),
          ("pattern3", 3),
          ("pattern4", 4))
    )


_VismEcanCnfIdlePattern_Type.__name__ = "Integer32"
_VismEcanCnfIdlePattern_Object = MibScalar
vismEcanCnfIdlePattern = _VismEcanCnfIdlePattern_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 1),
    _VismEcanCnfIdlePattern_Type()
)
vismEcanCnfIdlePattern.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismEcanCnfIdlePattern.setStatus("deprecated")


class _VismEcanCnfIdleDirection_Type(Integer32):
    """Custom type vismEcanCnfIdleDirection based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 1),
          ("either", 2),
          ("receive", 4),
          ("send", 3))
    )


_VismEcanCnfIdleDirection_Type.__name__ = "Integer32"
_VismEcanCnfIdleDirection_Object = MibScalar
vismEcanCnfIdleDirection = _VismEcanCnfIdleDirection_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 2),
    _VismEcanCnfIdleDirection_Type()
)
vismEcanCnfIdleDirection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismEcanCnfIdleDirection.setStatus("deprecated")


class _VismCompCnfPacketSize_Type(Integer32):
    """Custom type vismCompCnfPacketSize based on Integer32"""
    defaultValue = 80

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(80, 160),
    )


_VismCompCnfPacketSize_Type.__name__ = "Integer32"
_VismCompCnfPacketSize_Object = MibScalar
vismCompCnfPacketSize = _VismCompCnfPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 3),
    _VismCompCnfPacketSize_Type()
)
vismCompCnfPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCompCnfPacketSize.setStatus("mandatory")


class _VismERL_Type(Integer32):
    """Custom type vismERL based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("sixdb", 3),
          ("threedb", 2),
          ("worstdb", 4),
          ("zerodb", 1))
    )


_VismERL_Type.__name__ = "Integer32"
_VismERL_Object = MibScalar
vismERL = _VismERL_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 4),
    _VismERL_Type()
)
vismERL.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismERL.setStatus("mandatory")


class _VismJitterDelayMode_Type(Integer32):
    """Custom type vismJitterDelayMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("adaptive", 2),
          ("fixed", 1))
    )


_VismJitterDelayMode_Type.__name__ = "Integer32"
_VismJitterDelayMode_Object = MibScalar
vismJitterDelayMode = _VismJitterDelayMode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 5),
    _VismJitterDelayMode_Type()
)
vismJitterDelayMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismJitterDelayMode.setStatus("deprecated")


class _VismJitterInitialDelay_Type(Integer32):
    """Custom type vismJitterInitialDelay based on Integer32"""
    defaultValue = 40

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              10,
              15,
              20,
              25,
              30,
              35,
              40,
              45,
              50,
              55,
              60,
              65,
              70,
              75,
              80,
              85,
              90,
              95,
              100)
        )
    )
    namedValues = NamedValues(
        *(("eighty", 80),
          ("eightyfive", 85),
          ("fifteen", 15),
          ("fifty", 50),
          ("fiftyfive", 55),
          ("five", 5),
          ("fortyfive", 45),
          ("fourty", 40),
          ("hundred", 100),
          ("ninetyfive", 95),
          ("ninty", 90),
          ("seventy", 70),
          ("seventyfive", 75),
          ("sixty", 60),
          ("sixtyfive", 65),
          ("ten", 10),
          ("thirty", 30),
          ("thirtyfive", 35),
          ("twenty", 20),
          ("twentyfive", 25),
          ("zero", 1))
    )


_VismJitterInitialDelay_Type.__name__ = "Integer32"
_VismJitterInitialDelay_Object = MibScalar
vismJitterInitialDelay = _VismJitterInitialDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 6),
    _VismJitterInitialDelay_Type()
)
vismJitterInitialDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismJitterInitialDelay.setStatus("deprecated")


class _VismAdaptiveGainControl_Type(Integer32):
    """Custom type vismAdaptiveGainControl based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_VismAdaptiveGainControl_Type.__name__ = "Integer32"
_VismAdaptiveGainControl_Object = MibScalar
vismAdaptiveGainControl = _VismAdaptiveGainControl_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 7),
    _VismAdaptiveGainControl_Type()
)
vismAdaptiveGainControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAdaptiveGainControl.setStatus("mandatory")
_VismDspHealth_Type = Integer32
_VismDspHealth_Object = MibScalar
vismDspHealth = _VismDspHealth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 8),
    _VismDspHealth_Type()
)
vismDspHealth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismDspHealth.setStatus("mandatory")


class _VismUpspeedCodec_Type(Integer32):
    """Custom type vismUpspeedCodec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("clearChannel", 4),
          ("g-711a", 2),
          ("g-711u", 1),
          ("g-723h", 5),
          ("g-723l", 6),
          ("g-726-16", 7),
          ("g-726-24", 8),
          ("g-726-32", 3),
          ("g-726-40", 9))
    )


_VismUpspeedCodec_Type.__name__ = "Integer32"
_VismUpspeedCodec_Object = MibScalar
vismUpspeedCodec = _VismUpspeedCodec_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 9),
    _VismUpspeedCodec_Type()
)
vismUpspeedCodec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismUpspeedCodec.setStatus("mandatory")


class _VismPayloadType_Type(Integer32):
    """Custom type vismPayloadType based on Integer32"""
    defaultValue = 256

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 256),
    )


_VismPayloadType_Type.__name__ = "Integer32"
_VismPayloadType_Object = MibScalar
vismPayloadType = _VismPayloadType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 3, 10),
    _VismPayloadType_Type()
)
vismPayloadType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismPayloadType.setStatus("mandatory")
_VismSystemGrp_ObjectIdentity = ObjectIdentity
vismSystemGrp = _VismSystemGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4)
)


class _VismDaughterCardSerialNum_Type(DisplayString):
    """Custom type vismDaughterCardSerialNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_VismDaughterCardSerialNum_Type.__name__ = "DisplayString"
_VismDaughterCardSerialNum_Object = MibScalar
vismDaughterCardSerialNum = _VismDaughterCardSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 1),
    _VismDaughterCardSerialNum_Type()
)
vismDaughterCardSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismDaughterCardSerialNum.setStatus("mandatory")


class _VismDaughterCardDescription_Type(DisplayString):
    """Custom type vismDaughterCardDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_VismDaughterCardDescription_Type.__name__ = "DisplayString"
_VismDaughterCardDescription_Object = MibScalar
vismDaughterCardDescription = _VismDaughterCardDescription_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 2),
    _VismDaughterCardDescription_Type()
)
vismDaughterCardDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismDaughterCardDescription.setStatus("mandatory")


class _VismDaughterCardHWRev_Type(DisplayString):
    """Custom type vismDaughterCardHWRev based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 2),
    )


_VismDaughterCardHWRev_Type.__name__ = "DisplayString"
_VismDaughterCardHWRev_Object = MibScalar
vismDaughterCardHWRev = _VismDaughterCardHWRev_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 3),
    _VismDaughterCardHWRev_Type()
)
vismDaughterCardHWRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismDaughterCardHWRev.setStatus("mandatory")


class _VismEcanEncoding_Type(Integer32):
    """Custom type vismEcanEncoding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("a-law", 2),
          ("mu-law", 1))
    )


_VismEcanEncoding_Type.__name__ = "Integer32"
_VismEcanEncoding_Object = MibScalar
vismEcanEncoding = _VismEcanEncoding_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 4),
    _VismEcanEncoding_Type()
)
vismEcanEncoding.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismEcanEncoding.setStatus("mandatory")


class _VismMode_Type(Integer32):
    """Custom type vismMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              99,
              100)
        )
    )
    namedValues = NamedValues(
        *(("aal1Svc", 3),
          ("aal2Trunking", 2),
          ("superMode", 99),
          ("switchedAal2CASBh", 6),
          ("switchedAal2Pvc", 8),
          ("switchedAal2Svc", 7),
          ("switchedVoipCASBh", 4),
          ("switchedVoipPRIBh", 5),
          ("unknownMode", 100),
          ("voipAndAal1Svc", 9),
          ("voipSwitching", 1))
    )


_VismMode_Type.__name__ = "Integer32"
_VismMode_Object = MibScalar
vismMode = _VismMode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 5),
    _VismMode_Type()
)
vismMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismMode.setStatus("mandatory")


class _VismPrevMode_Type(Integer32):
    """Custom type vismPrevMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("aal1Svc", 3),
          ("aal2PvcSwitching", 4),
          ("aal2Trunking", 2),
          ("voipSwitching", 1))
    )


_VismPrevMode_Type.__name__ = "Integer32"
_VismPrevMode_Object = MibScalar
vismPrevMode = _VismPrevMode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 6),
    _VismPrevMode_Type()
)
vismPrevMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismPrevMode.setStatus("deprecated")


class _VismCacEnable_Type(Integer32):
    """Custom type vismCacEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_VismCacEnable_Type.__name__ = "Integer32"
_VismCacEnable_Object = MibScalar
vismCacEnable = _VismCacEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 7),
    _VismCacEnable_Type()
)
vismCacEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCacEnable.setStatus("mandatory")


class _VismAvailableDs0Count_Type(Integer32):
    """Custom type vismAvailableDs0Count based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 248),
    )


_VismAvailableDs0Count_Type.__name__ = "Integer32"
_VismAvailableDs0Count_Object = MibScalar
vismAvailableDs0Count = _VismAvailableDs0Count_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 8),
    _VismAvailableDs0Count_Type()
)
vismAvailableDs0Count.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismAvailableDs0Count.setStatus("mandatory")
_VismAppliedTemplate_Type = Integer32
_VismAppliedTemplate_Object = MibScalar
vismAppliedTemplate = _VismAppliedTemplate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 9),
    _VismAppliedTemplate_Type()
)
vismAppliedTemplate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismAppliedTemplate.setStatus("mandatory")


class _VismTftpServerDn_Type(DisplayString):
    """Custom type vismTftpServerDn based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_VismTftpServerDn_Type.__name__ = "DisplayString"
_VismTftpServerDn_Object = MibScalar
vismTftpServerDn = _VismTftpServerDn_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 11),
    _VismTftpServerDn_Type()
)
vismTftpServerDn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismTftpServerDn.setStatus("mandatory")


class _VismXgcpBearerNetworkType_Type(Integer32):
    """Custom type vismXgcpBearerNetworkType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atm", 2),
          ("ip", 1))
    )


_VismXgcpBearerNetworkType_Type.__name__ = "Integer32"
_VismXgcpBearerNetworkType_Object = MibScalar
vismXgcpBearerNetworkType = _VismXgcpBearerNetworkType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 12),
    _VismXgcpBearerNetworkType_Type()
)
vismXgcpBearerNetworkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismXgcpBearerNetworkType.setStatus("mandatory")


class _VismXgcpBearerVCType_Type(Integer32):
    """Custom type vismXgcpBearerVCType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("pvc", 1),
          ("svc", 2))
    )


_VismXgcpBearerVCType_Type.__name__ = "Integer32"
_VismXgcpBearerVCType_Object = MibScalar
vismXgcpBearerVCType = _VismXgcpBearerVCType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 13),
    _VismXgcpBearerVCType_Type()
)
vismXgcpBearerVCType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismXgcpBearerVCType.setStatus("mandatory")


class _VismXgcpBearerConnectionType_Type(Integer32):
    """Custom type vismXgcpBearerConnectionType based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("aal1Sdt", 1),
          ("aal2", 2),
          ("notApplicable", 3))
    )


_VismXgcpBearerConnectionType_Type.__name__ = "Integer32"
_VismXgcpBearerConnectionType_Object = MibScalar
vismXgcpBearerConnectionType = _VismXgcpBearerConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 14),
    _VismXgcpBearerConnectionType_Type()
)
vismXgcpBearerConnectionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismXgcpBearerConnectionType.setStatus("mandatory")


class _VismBearerContinuityTimer_Type(Integer32):
    """Custom type vismBearerContinuityTimer based on Integer32"""
    defaultValue = 1000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10000),
    )


_VismBearerContinuityTimer_Type.__name__ = "Integer32"
_VismBearerContinuityTimer_Object = MibScalar
vismBearerContinuityTimer = _VismBearerContinuityTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 15),
    _VismBearerContinuityTimer_Type()
)
vismBearerContinuityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismBearerContinuityTimer.setStatus("mandatory")


class _VismCodecNegotiationOption_Type(Integer32):
    """Custom type vismCodecNegotiationOption based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("lclLcoRcd", 5),
          ("lclRcdLco", 6),
          ("lcoLclRcd", 2),
          ("lcoRcdLcl", 1),
          ("rcdLclLco", 4),
          ("rcdLcoLcl", 3))
    )


_VismCodecNegotiationOption_Type.__name__ = "Integer32"
_VismCodecNegotiationOption_Object = MibScalar
vismCodecNegotiationOption = _VismCodecNegotiationOption_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 16),
    _VismCodecNegotiationOption_Type()
)
vismCodecNegotiationOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCodecNegotiationOption.setStatus("mandatory")


class _VismProfileNegotiationOption_Type(Integer32):
    """Custom type vismProfileNegotiationOption based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("lclLcoRcd", 5),
          ("lclRcdLco", 6),
          ("lcoLclRcd", 2),
          ("lcoRcdLcl", 1),
          ("rcdLclLco", 4),
          ("rcdLcoLcl", 3))
    )


_VismProfileNegotiationOption_Type.__name__ = "Integer32"
_VismProfileNegotiationOption_Object = MibScalar
vismProfileNegotiationOption = _VismProfileNegotiationOption_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 17),
    _VismProfileNegotiationOption_Type()
)
vismProfileNegotiationOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismProfileNegotiationOption.setStatus("mandatory")


class _VismCarrierLossPolicy_Type(Integer32):
    """Custom type vismCarrierLossPolicy based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("previousCodec", 1),
          ("upspeedCodec", 2))
    )


_VismCarrierLossPolicy_Type.__name__ = "Integer32"
_VismCarrierLossPolicy_Object = MibScalar
vismCarrierLossPolicy = _VismCarrierLossPolicy_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 18),
    _VismCarrierLossPolicy_Type()
)
vismCarrierLossPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCarrierLossPolicy.setStatus("mandatory")


class _VismCacRejectionPolicy_Type(Integer32):
    """Custom type vismCacRejectionPolicy based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("delete", 1),
          ("maintain", 2))
    )


_VismCacRejectionPolicy_Type.__name__ = "Integer32"
_VismCacRejectionPolicy_Object = MibScalar
vismCacRejectionPolicy = _VismCacRejectionPolicy_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 19),
    _VismCacRejectionPolicy_Type()
)
vismCacRejectionPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCacRejectionPolicy.setStatus("mandatory")


class _VismExtDnsServerDn_Type(DisplayString):
    """Custom type vismExtDnsServerDn based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_VismExtDnsServerDn_Type.__name__ = "DisplayString"
_VismExtDnsServerDn_Object = MibScalar
vismExtDnsServerDn = _VismExtDnsServerDn_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 20),
    _VismExtDnsServerDn_Type()
)
vismExtDnsServerDn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismExtDnsServerDn.setStatus("mandatory")
_VismFeatureBitMap_Type = Integer32
_VismFeatureBitMap_Object = MibScalar
vismFeatureBitMap = _VismFeatureBitMap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 21),
    _VismFeatureBitMap_Type()
)
vismFeatureBitMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismFeatureBitMap.setStatus("mandatory")


class _VismVADTolerance_Type(Integer32):
    """Custom type vismVADTolerance based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000),
    )


_VismVADTolerance_Type.__name__ = "Integer32"
_VismVADTolerance_Object = MibScalar
vismVADTolerance = _VismVADTolerance_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 22),
    _VismVADTolerance_Type()
)
vismVADTolerance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVADTolerance.setStatus("mandatory")


class _VismVADDutyCycle_Type(Integer32):
    """Custom type vismVADDutyCycle based on Integer32"""
    defaultValue = 61

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_VismVADDutyCycle_Type.__name__ = "Integer32"
_VismVADDutyCycle_Object = MibScalar
vismVADDutyCycle = _VismVADDutyCycle_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 23),
    _VismVADDutyCycle_Type()
)
vismVADDutyCycle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVADDutyCycle.setStatus("mandatory")


class _VismAggregateTrafficClipping_Type(Integer32):
    """Custom type vismAggregateTrafficClipping based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_VismAggregateTrafficClipping_Type.__name__ = "Integer32"
_VismAggregateTrafficClipping_Object = MibScalar
vismAggregateTrafficClipping = _VismAggregateTrafficClipping_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 24),
    _VismAggregateTrafficClipping_Type()
)
vismAggregateTrafficClipping.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAggregateTrafficClipping.setStatus("mandatory")


class _VismAggregateSvcBandwidth_Type(Integer32):
    """Custom type vismAggregateSvcBandwidth based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100000),
    )


_VismAggregateSvcBandwidth_Type.__name__ = "Integer32"
_VismAggregateSvcBandwidth_Object = MibScalar
vismAggregateSvcBandwidth = _VismAggregateSvcBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 25),
    _VismAggregateSvcBandwidth_Type()
)
vismAggregateSvcBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAggregateSvcBandwidth.setStatus("mandatory")


class _VismBearerContinuityTest_Type(TruthValue):
    """Custom type vismBearerContinuityTest based on TruthValue"""


_VismBearerContinuityTest_Object = MibScalar
vismBearerContinuityTest = _VismBearerContinuityTest_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 26),
    _VismBearerContinuityTest_Type()
)
vismBearerContinuityTest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismBearerContinuityTest.setStatus("mandatory")


class _VismCaleaEnable_Type(TruthValue):
    """Custom type vismCaleaEnable based on TruthValue"""


_VismCaleaEnable_Object = MibScalar
vismCaleaEnable = _VismCaleaEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 4, 27),
    _VismCaleaEnable_Type()
)
vismCaleaEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCaleaEnable.setStatus("mandatory")
_VismTrapObjGrp_ObjectIdentity = ObjectIdentity
vismTrapObjGrp = _VismTrapObjGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5)
)


class _VismConfigChangeTypeBitMap_Type(Integer32):
    """Custom type vismConfigChangeTypeBitMap based on Integer32"""
    defaultValue = 0


_VismConfigChangeTypeBitMap_Object = MibScalar
vismConfigChangeTypeBitMap = _VismConfigChangeTypeBitMap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 1),
    _VismConfigChangeTypeBitMap_Type()
)
vismConfigChangeTypeBitMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismConfigChangeTypeBitMap.setStatus("mandatory")
_VismTrapIntIndex1_Type = Integer32
_VismTrapIntIndex1_Object = MibScalar
vismTrapIntIndex1 = _VismTrapIntIndex1_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 2),
    _VismTrapIntIndex1_Type()
)
vismTrapIntIndex1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismTrapIntIndex1.setStatus("mandatory")
_VismTrapIntIndex2_Type = Integer32
_VismTrapIntIndex2_Object = MibScalar
vismTrapIntIndex2 = _VismTrapIntIndex2_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 3),
    _VismTrapIntIndex2_Type()
)
vismTrapIntIndex2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismTrapIntIndex2.setStatus("mandatory")


class _VismTrapStrIndex1_Type(OctetString):
    """Custom type vismTrapStrIndex1 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 66),
    )


_VismTrapStrIndex1_Type.__name__ = "OctetString"
_VismTrapStrIndex1_Object = MibScalar
vismTrapStrIndex1 = _VismTrapStrIndex1_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 5, 4),
    _VismTrapStrIndex1_Type()
)
vismTrapStrIndex1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismTrapStrIndex1.setStatus("mandatory")
_VismAal2Grp_ObjectIdentity = ObjectIdentity
vismAal2Grp = _VismAal2Grp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6)
)
_VismAal2SubcellMuxing_Type = TruthValue
_VismAal2SubcellMuxing_Object = MibScalar
vismAal2SubcellMuxing = _VismAal2SubcellMuxing_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 1),
    _VismAal2SubcellMuxing_Type()
)
vismAal2SubcellMuxing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2SubcellMuxing.setStatus("mandatory")


class _VismAal2DtmfRelay_Type(TruthValue):
    """Custom type vismAal2DtmfRelay based on TruthValue"""


_VismAal2DtmfRelay_Object = MibScalar
vismAal2DtmfRelay = _VismAal2DtmfRelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 2),
    _VismAal2DtmfRelay_Type()
)
vismAal2DtmfRelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2DtmfRelay.setStatus("mandatory")


class _VismAal2CasTransport_Type(TruthValue):
    """Custom type vismAal2CasTransport based on TruthValue"""


_VismAal2CasTransport_Object = MibScalar
vismAal2CasTransport = _VismAal2CasTransport_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 3),
    _VismAal2CasTransport_Type()
)
vismAal2CasTransport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CasTransport.setStatus("mandatory")


class _VismAal2Type3Redundancy_Type(TruthValue):
    """Custom type vismAal2Type3Redundancy based on TruthValue"""


_VismAal2Type3Redundancy_Object = MibScalar
vismAal2Type3Redundancy = _VismAal2Type3Redundancy_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 4),
    _VismAal2Type3Redundancy_Type()
)
vismAal2Type3Redundancy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2Type3Redundancy.setStatus("mandatory")


class _VismAal2VADTimer_Type(Integer32):
    """Custom type vismAal2VADTimer based on Integer32"""
    defaultValue = 250

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(250, 65535),
    )


_VismAal2VADTimer_Type.__name__ = "Integer32"
_VismAal2VADTimer_Object = MibScalar
vismAal2VADTimer = _VismAal2VADTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 5),
    _VismAal2VADTimer_Type()
)
vismAal2VADTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2VADTimer.setStatus("mandatory")


class _VismAal2CidFillTimer_Type(Integer32):
    """Custom type vismAal2CidFillTimer based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 100),
    )


_VismAal2CidFillTimer_Type.__name__ = "Integer32"
_VismAal2CidFillTimer_Object = MibScalar
vismAal2CidFillTimer = _VismAal2CidFillTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 6, 6),
    _VismAal2CidFillTimer_Type()
)
vismAal2CidFillTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CidFillTimer.setStatus("mandatory")
_VismInteropGrp_ObjectIdentity = ObjectIdentity
vismInteropGrp = _VismInteropGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 7)
)


class _VismXgcpSdpOst_Type(Integer32):
    """Custom type vismXgcpSdpOst based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_VismXgcpSdpOst_Type.__name__ = "Integer32"
_VismXgcpSdpOst_Object = MibScalar
vismXgcpSdpOst = _VismXgcpSdpOst_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 7, 1),
    _VismXgcpSdpOst_Type()
)
vismXgcpSdpOst.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismXgcpSdpOst.setStatus("mandatory")


class _VismDynamicPT_Type(Integer32):
    """Custom type vismDynamicPT based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_VismDynamicPT_Type.__name__ = "Integer32"
_VismDynamicPT_Object = MibScalar
vismDynamicPT = _VismDynamicPT_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 17, 7, 2),
    _VismDynamicPT_Type()
)
vismDynamicPT.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismDynamicPT.setStatus("mandatory")
_SmRasConfig_ObjectIdentity = ObjectIdentity
smRasConfig = _SmRasConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 18)
)


class _RasOamlpbkAllowed_Type(Integer32):
    """Custom type rasOamlpbkAllowed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rasOamlpbkDisabled", 2),
          ("rasOamlpbkEnabled", 1))
    )


_RasOamlpbkAllowed_Type.__name__ = "Integer32"
_RasOamlpbkAllowed_Object = MibScalar
rasOamlpbkAllowed = _RasOamlpbkAllowed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 18, 1),
    _RasOamlpbkAllowed_Type()
)
rasOamlpbkAllowed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rasOamlpbkAllowed.setStatus("mandatory")


class _RasOamlpbkFrequency_Type(Integer32):
    """Custom type rasOamlpbkFrequency based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RasOamlpbkFrequency_Type.__name__ = "Integer32"
_RasOamlpbkFrequency_Object = MibScalar
rasOamlpbkFrequency = _RasOamlpbkFrequency_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 18, 2),
    _RasOamlpbkFrequency_Type()
)
rasOamlpbkFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rasOamlpbkFrequency.setStatus("mandatory")
_RasOamLpbkInfo_ObjectIdentity = ObjectIdentity
rasOamLpbkInfo = _RasOamLpbkInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 19)
)


class _ChanPacketNumber_Type(Integer32):
    """Custom type chanPacketNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_ChanPacketNumber_Type.__name__ = "Integer32"
_ChanPacketNumber_Object = MibScalar
chanPacketNumber = _ChanPacketNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 1),
    _ChanPacketNumber_Type()
)
chanPacketNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanPacketNumber.setStatus("mandatory")
_ChanOAMstatus32_Type = Integer32
_ChanOAMstatus32_Object = MibScalar
chanOAMstatus32 = _ChanOAMstatus32_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 2),
    _ChanOAMstatus32_Type()
)
chanOAMstatus32.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanOAMstatus32.setStatus("mandatory")
_ChanOAMstatus64_Type = Integer32
_ChanOAMstatus64_Object = MibScalar
chanOAMstatus64 = _ChanOAMstatus64_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 3),
    _ChanOAMstatus64_Type()
)
chanOAMstatus64.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanOAMstatus64.setStatus("mandatory")
_ChanOAMstatus96_Type = Integer32
_ChanOAMstatus96_Object = MibScalar
chanOAMstatus96 = _ChanOAMstatus96_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 4),
    _ChanOAMstatus96_Type()
)
chanOAMstatus96.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanOAMstatus96.setStatus("mandatory")
_ChanOAMstatus128_Type = Integer32
_ChanOAMstatus128_Object = MibScalar
chanOAMstatus128 = _ChanOAMstatus128_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 5),
    _ChanOAMstatus128_Type()
)
chanOAMstatus128.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanOAMstatus128.setStatus("mandatory")
_ChanOAMstatus160_Type = Integer32
_ChanOAMstatus160_Object = MibScalar
chanOAMstatus160 = _ChanOAMstatus160_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 6),
    _ChanOAMstatus160_Type()
)
chanOAMstatus160.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanOAMstatus160.setStatus("mandatory")
_ChanOAMstatus192_Type = Integer32
_ChanOAMstatus192_Object = MibScalar
chanOAMstatus192 = _ChanOAMstatus192_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 7),
    _ChanOAMstatus192_Type()
)
chanOAMstatus192.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanOAMstatus192.setStatus("mandatory")
_ChanOAMstatus224_Type = Integer32
_ChanOAMstatus224_Object = MibScalar
chanOAMstatus224 = _ChanOAMstatus224_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 8),
    _ChanOAMstatus224_Type()
)
chanOAMstatus224.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanOAMstatus224.setStatus("mandatory")
_ChanOAMstatus256_Type = Integer32
_ChanOAMstatus256_Object = MibScalar
chanOAMstatus256 = _ChanOAMstatus256_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 19, 9),
    _ChanOAMstatus256_Type()
)
chanOAMstatus256.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanOAMstatus256.setStatus("mandatory")
_CoreCardCommands_ObjectIdentity = ObjectIdentity
coreCardCommands = _CoreCardCommands_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 20)
)


class _SwitchCoreCard_Type(Integer32):
    """Custom type switchCoreCard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("doswitchcc", 2),
          ("fallbackswitchcc", 4),
          ("instswitchcc", 3),
          ("noAction", 1))
    )


_SwitchCoreCard_Type.__name__ = "Integer32"
_SwitchCoreCard_Object = MibScalar
switchCoreCard = _SwitchCoreCard_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 20, 1),
    _SwitchCoreCard_Type()
)
switchCoreCard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    switchCoreCard.setStatus("mandatory")
_ImaAutoRestartFeature_ObjectIdentity = ObjectIdentity
imaAutoRestartFeature = _ImaAutoRestartFeature_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 21)
)


class _ImaAutoRestart_Type(Integer32):
    """Custom type imaAutoRestart based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_ImaAutoRestart_Type.__name__ = "Integer32"
_ImaAutoRestart_Object = MibScalar
imaAutoRestart = _ImaAutoRestart_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 21, 1),
    _ImaAutoRestart_Type()
)
imaAutoRestart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaAutoRestart.setStatus("mandatory")
_SrmeCnfGrp_ObjectIdentity = ObjectIdentity
srmeCnfGrp = _SrmeCnfGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 22)
)
_SrmeCnfGrpTable_Object = MibTable
srmeCnfGrpTable = _SrmeCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1)
)
if mibBuilder.loadTexts:
    srmeCnfGrpTable.setStatus("mandatory")
_SrmeCnfGrpEntry_Object = MibTableRow
srmeCnfGrpEntry = _SrmeCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1)
)
srmeCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "srmeLineNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "srmeStartVtNum"),
)
if mibBuilder.loadTexts:
    srmeCnfGrpEntry.setStatus("mandatory")


class _SrmeLineNum_Type(Integer32):
    """Custom type srmeLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_SrmeLineNum_Type.__name__ = "Integer32"
_SrmeLineNum_Object = MibTableColumn
srmeLineNum = _SrmeLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1, 1),
    _SrmeLineNum_Type()
)
srmeLineNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srmeLineNum.setStatus("mandatory")


class _SrmeStartVtNum_Type(Integer32):
    """Custom type srmeStartVtNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 84),
    )


_SrmeStartVtNum_Type.__name__ = "Integer32"
_SrmeStartVtNum_Object = MibTableColumn
srmeStartVtNum = _SrmeStartVtNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1, 2),
    _SrmeStartVtNum_Type()
)
srmeStartVtNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srmeStartVtNum.setStatus("mandatory")


class _SrmeRowStatus_Type(Integer32):
    """Custom type srmeRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("delete", 2),
          ("modify", 3))
    )


_SrmeRowStatus_Type.__name__ = "Integer32"
_SrmeRowStatus_Object = MibTableColumn
srmeRowStatus = _SrmeRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1, 3),
    _SrmeRowStatus_Type()
)
srmeRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    srmeRowStatus.setStatus("mandatory")


class _SrmeTargetSlotNum_Type(Integer32):
    """Custom type srmeTargetSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_SrmeTargetSlotNum_Type.__name__ = "Integer32"
_SrmeTargetSlotNum_Object = MibTableColumn
srmeTargetSlotNum = _SrmeTargetSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1, 4),
    _SrmeTargetSlotNum_Type()
)
srmeTargetSlotNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    srmeTargetSlotNum.setStatus("mandatory")


class _SrmeTargetSlotLineNum_Type(Integer32):
    """Custom type srmeTargetSlotLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_SrmeTargetSlotLineNum_Type.__name__ = "Integer32"
_SrmeTargetSlotLineNum_Object = MibTableColumn
srmeTargetSlotLineNum = _SrmeTargetSlotLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1, 5),
    _SrmeTargetSlotLineNum_Type()
)
srmeTargetSlotLineNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    srmeTargetSlotLineNum.setStatus("mandatory")


class _SrmeVtFramingType_Type(Integer32):
    """Custom type srmeVtFramingType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("esf", 3),
          ("notApplicable", 1),
          ("sf", 2))
    )


_SrmeVtFramingType_Type.__name__ = "Integer32"
_SrmeVtFramingType_Object = MibTableColumn
srmeVtFramingType = _SrmeVtFramingType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 3, 22, 1, 1, 6),
    _SrmeVtFramingType_Type()
)
srmeVtFramingType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    srmeVtFramingType.setStatus("mandatory")
_SerialInterface_ObjectIdentity = ObjectIdentity
serialInterface = _SerialInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 1)
)
_SerialInterfaceTable_Object = MibTable
serialInterfaceTable = _SerialInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 1)
)
if mibBuilder.loadTexts:
    serialInterfaceTable.setStatus("mandatory")
_SerialInterfaceEntry_Object = MibTableRow
serialInterfaceEntry = _SerialInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 1, 1)
)
serialInterfaceEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "serialPortNum"),
)
if mibBuilder.loadTexts:
    serialInterfaceEntry.setStatus("mandatory")
_SerialPortNum_Type = Integer32
_SerialPortNum_Object = MibTableColumn
serialPortNum = _SerialPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 1, 1, 1),
    _SerialPortNum_Type()
)
serialPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serialPortNum.setStatus("mandatory")


class _SerialPortType_Type(Integer32):
    """Custom type serialPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("debug", 2),
          ("main", 1))
    )


_SerialPortType_Type.__name__ = "Integer32"
_SerialPortType_Object = MibTableColumn
serialPortType = _SerialPortType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 1, 1, 2),
    _SerialPortType_Type()
)
serialPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serialPortType.setStatus("mandatory")


class _SerialPortEnable_Type(Integer32):
    """Custom type serialPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_SerialPortEnable_Type.__name__ = "Integer32"
_SerialPortEnable_Object = MibTableColumn
serialPortEnable = _SerialPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 1, 1, 3),
    _SerialPortEnable_Type()
)
serialPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serialPortEnable.setStatus("mandatory")


class _SerialPortbps_Type(Integer32):
    """Custom type serialPortbps based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bps19200", 3),
          ("bps2400", 2),
          ("bps9600", 1))
    )


_SerialPortbps_Type.__name__ = "Integer32"
_SerialPortbps_Object = MibTableColumn
serialPortbps = _SerialPortbps_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 1, 1, 4),
    _SerialPortbps_Type()
)
serialPortbps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serialPortbps.setStatus("mandatory")
_SerialPortNumOfValidEntries_Type = Integer32
_SerialPortNumOfValidEntries_Object = MibScalar
serialPortNumOfValidEntries = _SerialPortNumOfValidEntries_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 1, 2),
    _SerialPortNumOfValidEntries_Type()
)
serialPortNumOfValidEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serialPortNumOfValidEntries.setStatus("mandatory")
_EthernetInterface_ObjectIdentity = ObjectIdentity
ethernetInterface = _EthernetInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 2)
)


class _EthernetPhysicaAddress_Type(DisplayString):
    """Custom type ethernetPhysicaAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_EthernetPhysicaAddress_Type.__name__ = "DisplayString"
_EthernetPhysicaAddress_Object = MibScalar
ethernetPhysicaAddress = _EthernetPhysicaAddress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 2, 1),
    _EthernetPhysicaAddress_Type()
)
ethernetPhysicaAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethernetPhysicaAddress.setStatus("mandatory")
_X21CnfGrp_ObjectIdentity = ObjectIdentity
x21CnfGrp = _X21CnfGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1)
)
_X21CnfGrpTable_Object = MibTable
x21CnfGrpTable = _X21CnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1)
)
if mibBuilder.loadTexts:
    x21CnfGrpTable.setStatus("mandatory")
_X21CnfGrpEntry_Object = MibTableRow
x21CnfGrpEntry = _X21CnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1)
)
x21CnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "x21LineNum"),
)
if mibBuilder.loadTexts:
    x21CnfGrpEntry.setStatus("mandatory")


class _X21LineNum_Type(Integer32):
    """Custom type x21LineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_X21LineNum_Type.__name__ = "Integer32"
_X21LineNum_Object = MibTableColumn
x21LineNum = _X21LineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 1),
    _X21LineNum_Type()
)
x21LineNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21LineNum.setStatus("mandatory")


class _X21LineEnable_Type(Integer32):
    """Custom type x21LineEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("modify", 3))
    )


_X21LineEnable_Type.__name__ = "Integer32"
_X21LineEnable_Object = MibTableColumn
x21LineEnable = _X21LineEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 2),
    _X21LineEnable_Type()
)
x21LineEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21LineEnable.setStatus("mandatory")


class _X21LineType_Type(Integer32):
    """Custom type x21LineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dce", 2),
          ("dte", 1),
          ("dteST", 3))
    )


_X21LineType_Type.__name__ = "Integer32"
_X21LineType_Object = MibTableColumn
x21LineType = _X21LineType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 3),
    _X21LineType_Type()
)
x21LineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21LineType.setStatus("mandatory")


class _X21LineRate_Type(Integer32):
    """Custom type x21LineRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108)
        )
    )
    namedValues = NamedValues(
        *(("r10240Kbps", 37),
          ("r1024Kbps", 18),
          ("r10808Kbps", 61),
          ("r10890Kbps", 38),
          ("r11060Kbps", 39),
          ("r112Kbps", 4),
          ("r12288Kbps", 89),
          ("r12352Kbps", 62),
          ("r12390Kbps", 40),
          ("r12630Kbps", 41),
          ("r128Kbps", 5),
          ("r13896Kbps", 63),
          ("r13900Kbps", 42),
          ("r14220Kbps", 43),
          ("r14336Kbps", 90),
          ("r14340Kbps", 44),
          ("r1536Kbps", 19),
          ("r15440Kbps", 64),
          ("r1544Kbps", 20),
          ("r15490Kbps", 45),
          ("r15800Kbps", 46),
          ("r16380Kbps", 47),
          ("r16384Kbps", 91),
          ("r168Kbps", 6),
          ("r16984Kbps", 65),
          ("r17370Kbps", 51),
          ("r1792Kbps", 21),
          ("r18432Kbps", 92),
          ("r18528Kbps", 66),
          ("r18950Kbps", 52),
          ("r1920Kbps", 22),
          ("r192Kbps", 7),
          ("r1984Kbps", 23),
          ("r20030Kbps", 48),
          ("r20072Kbps", 67),
          ("r20480Kbps", 93),
          ("r2048Kbps", 24),
          ("r20530Kbps", 53),
          ("r21616Kbps", 68),
          ("r22100Kbps", 54),
          ("r224Kbps", 8),
          ("r22528Kbps", 94),
          ("r23160Kbps", 69),
          ("r23680Kbps", 55),
          ("r24576Kbps", 95),
          ("r24704Kbps", 70),
          ("r24990Kbps", 49),
          ("r256Kbps", 9),
          ("r26248Kbps", 71),
          ("r26624Kbps", 96),
          ("r27792Kbps", 72),
          ("r280Kbps", 10),
          ("r28672Kbps", 97),
          ("r29336Kbps", 73),
          ("r30720Kbps", 98),
          ("r30880Kbps", 74),
          ("r3088Kbps", 56),
          ("r3097Kbps", 25),
          ("r3157Kbps", 26),
          ("r320Kbps", 11),
          ("r32424Kbps", 75),
          ("r32768Kbps", 99),
          ("r336Kbps", 12),
          ("r33968Kbps", 76),
          ("r34816Kbps", 100),
          ("r35512Kbps", 77),
          ("r36864Kbps", 101),
          ("r37056Kbps", 78),
          ("r384Kbps", 13),
          ("r38600Kbps", 79),
          ("r38912Kbps", 102),
          ("r392Kbps", 14),
          ("r40144Kbps", 80),
          ("r40960Kbps", 103),
          ("r4096Kbps", 27),
          ("r41688Kbps", 81),
          ("r43008Kbps", 104),
          ("r43232Kbps", 82),
          ("r44776Kbps", 83),
          ("r448Kbps", 15),
          ("r45056Kbps", 105),
          ("r46320Kbps", 84),
          ("r4632Kbps", 57),
          ("r4645Kbps", 28),
          ("r47104Kbps", 106),
          ("r4736Kbps", 29),
          ("r47864Kbps", 85),
          ("r48Kbps", 1),
          ("r49152Kbps", 107),
          ("r49408Kbps", 86),
          ("r50952Kbps", 87),
          ("r51200Kbps", 108),
          ("r512Kbps", 16),
          ("r52Mbps", 50),
          ("r56Kbps", 2),
          ("r6144Kbps", 88),
          ("r6176Kbps", 58),
          ("r6195Kbps", 30),
          ("r6315Kbps", 31),
          ("r64Kbps", 3),
          ("r768Kbps", 17),
          ("r7720Kbps", 59),
          ("r7744Kbps", 32),
          ("r7899Kbps", 33),
          ("r8192Kbps", 34),
          ("r9264Kbps", 60),
          ("r9289Kbps", 35),
          ("r9472Kbps", 36))
    )


_X21LineRate_Type.__name__ = "Integer32"
_X21LineRate_Object = MibTableColumn
x21LineRate = _X21LineRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 4),
    _X21LineRate_Type()
)
x21LineRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21LineRate.setStatus("mandatory")


class _X21LineLoopbackCommand_Type(Integer32):
    """Custom type x21LineLoopbackCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("v35MetallicLoop", 5),
          ("x21DiagnosticFrontcardLoop", 3),
          ("x21DiagnosticMetallicLoop", 2),
          ("x21NoLoop", 1),
          ("x21RemoteLoop", 4))
    )


_X21LineLoopbackCommand_Type.__name__ = "Integer32"
_X21LineLoopbackCommand_Object = MibTableColumn
x21LineLoopbackCommand = _X21LineLoopbackCommand_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 5),
    _X21LineLoopbackCommand_Type()
)
x21LineLoopbackCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21LineLoopbackCommand.setStatus("mandatory")


class _X21LineSendCode_Type(Integer32):
    """Custom type x21LineSendCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("x21NoCode", 1),
          ("x21SendLocalLoopCode", 4),
          ("x21SendLoopACode", 2),
          ("x21SendLoopBCode", 3),
          ("x21SendRemoteLoopCode", 5),
          ("x21SendUnLoopCode", 6))
    )


_X21LineSendCode_Type.__name__ = "Integer32"
_X21LineSendCode_Object = MibTableColumn
x21LineSendCode = _X21LineSendCode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 6),
    _X21LineSendCode_Type()
)
x21LineSendCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21LineSendCode.setStatus("mandatory")


class _X21LineLoopbackCodeDetection_Type(Integer32):
    """Custom type x21LineLoopbackCodeDetection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("codeDetectDisabled", 1),
          ("codeDetectEnabled", 2))
    )


_X21LineLoopbackCodeDetection_Type.__name__ = "Integer32"
_X21LineLoopbackCodeDetection_Object = MibTableColumn
x21LineLoopbackCodeDetection = _X21LineLoopbackCodeDetection_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 7),
    _X21LineLoopbackCodeDetection_Type()
)
x21LineLoopbackCodeDetection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21LineLoopbackCodeDetection.setStatus("mandatory")


class _X21ConnectorType_Type(Integer32):
    """Custom type x21ConnectorType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hssiBackcard", 2),
          ("v35Backcard", 3),
          ("x21Backcard", 1))
    )


_X21ConnectorType_Type.__name__ = "Integer32"
_X21ConnectorType_Object = MibTableColumn
x21ConnectorType = _X21ConnectorType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 8),
    _X21ConnectorType_Type()
)
x21ConnectorType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21ConnectorType.setStatus("mandatory")


class _X21InvertClock_Type(Integer32):
    """Custom type x21InvertClock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("invertedAndLooped", 4),
          ("invertedAndNotLooped", 2),
          ("nonInvertedAndLooped", 3),
          ("nonInvertedAndNotLooped", 1))
    )


_X21InvertClock_Type.__name__ = "Integer32"
_X21InvertClock_Object = MibTableColumn
x21InvertClock = _X21InvertClock_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 9),
    _X21InvertClock_Type()
)
x21InvertClock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21InvertClock.setStatus("mandatory")


class _X21LineInterfaceType_Type(Integer32):
    """Custom type x21LineInterfaceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hssi", 1),
          ("v35", 3),
          ("x21", 2))
    )


_X21LineInterfaceType_Type.__name__ = "Integer32"
_X21LineInterfaceType_Object = MibTableColumn
x21LineInterfaceType = _X21LineInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 10),
    _X21LineInterfaceType_Type()
)
x21LineInterfaceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21LineInterfaceType.setStatus("mandatory")


class _X21ClkFrequencyThreshold_Type(Integer32):
    """Custom type x21ClkFrequencyThreshold based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_X21ClkFrequencyThreshold_Type.__name__ = "Integer32"
_X21ClkFrequencyThreshold_Object = MibTableColumn
x21ClkFrequencyThreshold = _X21ClkFrequencyThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 11),
    _X21ClkFrequencyThreshold_Type()
)
x21ClkFrequencyThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21ClkFrequencyThreshold.setStatus("mandatory")


class _SerialLineRate_Type(Integer32):
    """Custom type serialLineRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(48000, 51840000),
    )


_SerialLineRate_Type.__name__ = "Integer32"
_SerialLineRate_Object = MibTableColumn
serialLineRate = _SerialLineRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 12),
    _SerialLineRate_Type()
)
serialLineRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    serialLineRate.setStatus("mandatory")
_SerialLineRateVariation_Type = Integer32
_SerialLineRateVariation_Object = MibTableColumn
serialLineRateVariation = _SerialLineRateVariation_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 13),
    _SerialLineRateVariation_Type()
)
serialLineRateVariation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    serialLineRateVariation.setStatus("mandatory")
_X21LineNumofValidEntries_Type = Integer32
_X21LineNumofValidEntries_Object = MibScalar
x21LineNumofValidEntries = _X21LineNumofValidEntries_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 2),
    _X21LineNumofValidEntries_Type()
)
x21LineNumofValidEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21LineNumofValidEntries.setStatus("mandatory")
_X21AlmCnfGrp_ObjectIdentity = ObjectIdentity
x21AlmCnfGrp = _X21AlmCnfGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2)
)
_X21AlmCnfGrpTable_Object = MibTable
x21AlmCnfGrpTable = _X21AlmCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2, 1)
)
if mibBuilder.loadTexts:
    x21AlmCnfGrpTable.setStatus("mandatory")
_X21AlmCnfGrpEntry_Object = MibTableRow
x21AlmCnfGrpEntry = _X21AlmCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2, 1, 1)
)
x21AlmCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "x21AlmCnfLineNum"),
)
if mibBuilder.loadTexts:
    x21AlmCnfGrpEntry.setStatus("mandatory")


class _X21AlmCnfLineNum_Type(Integer32):
    """Custom type x21AlmCnfLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_X21AlmCnfLineNum_Type.__name__ = "Integer32"
_X21AlmCnfLineNum_Object = MibTableColumn
x21AlmCnfLineNum = _X21AlmCnfLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2, 1, 1, 1),
    _X21AlmCnfLineNum_Type()
)
x21AlmCnfLineNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21AlmCnfLineNum.setStatus("mandatory")


class _X21Severity_Type(Integer32):
    """Custom type x21Severity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dontcare", 3),
          ("major", 2),
          ("minor", 1))
    )


_X21Severity_Type.__name__ = "Integer32"
_X21Severity_Object = MibTableColumn
x21Severity = _X21Severity_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2, 1, 1, 2),
    _X21Severity_Type()
)
x21Severity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21Severity.setStatus("mandatory")
_X21AlmGrp_ObjectIdentity = ObjectIdentity
x21AlmGrp = _X21AlmGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3)
)
_X21AlmGrpTable_Object = MibTable
x21AlmGrpTable = _X21AlmGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1)
)
if mibBuilder.loadTexts:
    x21AlmGrpTable.setStatus("mandatory")
_X21AlmGrpEntry_Object = MibTableRow
x21AlmGrpEntry = _X21AlmGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1)
)
x21AlmGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "x21AlmLineNum"),
)
if mibBuilder.loadTexts:
    x21AlmGrpEntry.setStatus("mandatory")


class _X21AlmLineNum_Type(Integer32):
    """Custom type x21AlmLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_X21AlmLineNum_Type.__name__ = "Integer32"
_X21AlmLineNum_Object = MibTableColumn
x21AlmLineNum = _X21AlmLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1, 1),
    _X21AlmLineNum_Type()
)
x21AlmLineNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21AlmLineNum.setStatus("mandatory")


class _X21LineAlarmState_Type(Integer32):
    """Custom type x21LineAlarmState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_X21LineAlarmState_Type.__name__ = "Integer32"
_X21LineAlarmState_Object = MibTableColumn
x21LineAlarmState = _X21LineAlarmState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1, 2),
    _X21LineAlarmState_Type()
)
x21LineAlarmState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21LineAlarmState.setStatus("mandatory")


class _X21LineEIAStatus_Type(Integer32):
    """Custom type x21LineEIAStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_X21LineEIAStatus_Type.__name__ = "Integer32"
_X21LineEIAStatus_Object = MibTableColumn
x21LineEIAStatus = _X21LineEIAStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1, 3),
    _X21LineEIAStatus_Type()
)
x21LineEIAStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21LineEIAStatus.setStatus("mandatory")


class _X21AlarmClrButton_Type(Integer32):
    """Custom type x21AlarmClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("noaction", 1))
    )


_X21AlarmClrButton_Type.__name__ = "Integer32"
_X21AlarmClrButton_Object = MibTableColumn
x21AlarmClrButton = _X21AlarmClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1, 4),
    _X21AlarmClrButton_Type()
)
x21AlarmClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21AlarmClrButton.setStatus("mandatory")
_Dsx0VismCnfTable_Object = MibTable
dsx0VismCnfTable = _Dsx0VismCnfTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1)
)
if mibBuilder.loadTexts:
    dsx0VismCnfTable.setStatus("mandatory")
_Dsx0VismCnfEntry_Object = MibTableRow
dsx0VismCnfEntry = _Dsx0VismCnfEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1)
)
dsx0VismCnfEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ds0IfIndex"),
)
if mibBuilder.loadTexts:
    dsx0VismCnfEntry.setStatus("mandatory")


class _Ds0IfIndex_Type(Integer32):
    """Custom type ds0IfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 248),
    )


_Ds0IfIndex_Type.__name__ = "Integer32"
_Ds0IfIndex_Object = MibTableColumn
ds0IfIndex = _Ds0IfIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 1),
    _Ds0IfIndex_Type()
)
ds0IfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds0IfIndex.setStatus("mandatory")
_Ds0RobbedBitSignalling_Type = TruthValue
_Ds0RobbedBitSignalling_Object = MibTableColumn
ds0RobbedBitSignalling = _Ds0RobbedBitSignalling_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 2),
    _Ds0RobbedBitSignalling_Type()
)
ds0RobbedBitSignalling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0RobbedBitSignalling.setStatus("mandatory")


class _Ds0IdleCode_Type(Integer32):
    """Custom type ds0IdleCode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_Ds0IdleCode_Type.__name__ = "Integer32"
_Ds0IdleCode_Object = MibTableColumn
ds0IdleCode = _Ds0IdleCode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 3),
    _Ds0IdleCode_Type()
)
ds0IdleCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0IdleCode.setStatus("mandatory")


class _Ds0SeizedCode_Type(Integer32):
    """Custom type ds0SeizedCode based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_Ds0SeizedCode_Type.__name__ = "Integer32"
_Ds0SeizedCode_Object = MibTableColumn
ds0SeizedCode = _Ds0SeizedCode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 4),
    _Ds0SeizedCode_Type()
)
ds0SeizedCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0SeizedCode.setStatus("mandatory")


class _Ds0ReceivedCode_Type(Integer32):
    """Custom type ds0ReceivedCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_Ds0ReceivedCode_Type.__name__ = "Integer32"
_Ds0ReceivedCode_Object = MibTableColumn
ds0ReceivedCode = _Ds0ReceivedCode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 5),
    _Ds0ReceivedCode_Type()
)
ds0ReceivedCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds0ReceivedCode.setStatus("mandatory")


class _Ds0TransmitCodesEnable_Type(TruthValue):
    """Custom type ds0TransmitCodesEnable based on TruthValue"""


_Ds0TransmitCodesEnable_Object = MibTableColumn
ds0TransmitCodesEnable = _Ds0TransmitCodesEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 6),
    _Ds0TransmitCodesEnable_Type()
)
ds0TransmitCodesEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds0TransmitCodesEnable.setStatus("deprecated")
_Ds0BundleMapped_Type = Integer32
_Ds0BundleMapped_Object = MibTableColumn
ds0BundleMapped = _Ds0BundleMapped_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 7),
    _Ds0BundleMapped_Type()
)
ds0BundleMapped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds0BundleMapped.setStatus("mandatory")


class _Ds0IfType_Type(Integer32):
    """Custom type ds0IfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              63,
              81)
        )
    )
    namedValues = NamedValues(
        *(("bearer", 81),
          ("ccs-signaling", 63),
          ("unknown", 1))
    )


_Ds0IfType_Type.__name__ = "Integer32"
_Ds0IfType_Object = MibTableColumn
ds0IfType = _Ds0IfType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 8),
    _Ds0IfType_Type()
)
ds0IfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds0IfType.setStatus("mandatory")


class _Ds0CasVariantName_Type(DisplayString):
    """Custom type ds0CasVariantName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Ds0CasVariantName_Type.__name__ = "DisplayString"
_Ds0CasVariantName_Object = MibTableColumn
ds0CasVariantName = _Ds0CasVariantName_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 9),
    _Ds0CasVariantName_Type()
)
ds0CasVariantName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasVariantName.setStatus("mandatory")


class _Ds0CasCadenceOnTime_Type(Integer32):
    """Custom type ds0CasCadenceOnTime based on Integer32"""
    defaultValue = 75

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 9999),
    )


_Ds0CasCadenceOnTime_Type.__name__ = "Integer32"
_Ds0CasCadenceOnTime_Object = MibTableColumn
ds0CasCadenceOnTime = _Ds0CasCadenceOnTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 10),
    _Ds0CasCadenceOnTime_Type()
)
ds0CasCadenceOnTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasCadenceOnTime.setStatus("mandatory")


class _Ds0CasCadenceOffTime_Type(Integer32):
    """Custom type ds0CasCadenceOffTime based on Integer32"""
    defaultValue = 75

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_Ds0CasCadenceOffTime_Type.__name__ = "Integer32"
_Ds0CasCadenceOffTime_Object = MibTableColumn
ds0CasCadenceOffTime = _Ds0CasCadenceOffTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 11),
    _Ds0CasCadenceOffTime_Type()
)
ds0CasCadenceOffTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasCadenceOffTime.setStatus("mandatory")


class _Ds0InsertLocalCas_Type(TruthValue):
    """Custom type ds0InsertLocalCas based on TruthValue"""


_Ds0InsertLocalCas_Object = MibTableColumn
ds0InsertLocalCas = _Ds0InsertLocalCas_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 12),
    _Ds0InsertLocalCas_Type()
)
ds0InsertLocalCas.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0InsertLocalCas.setStatus("mandatory")


class _Ds0LocalCasPattern_Type(Integer32):
    """Custom type ds0LocalCasPattern based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_Ds0LocalCasPattern_Type.__name__ = "Integer32"
_Ds0LocalCasPattern_Object = MibTableColumn
ds0LocalCasPattern = _Ds0LocalCasPattern_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 13),
    _Ds0LocalCasPattern_Type()
)
ds0LocalCasPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0LocalCasPattern.setStatus("mandatory")


class _Ds0LoopbackCommand_Type(Integer32):
    """Custom type ds0LoopbackCommand based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("localLoop", 3),
          ("noLoop", 1),
          ("remoteLoop", 2))
    )


_Ds0LoopbackCommand_Type.__name__ = "Integer32"
_Ds0LoopbackCommand_Object = MibTableColumn
ds0LoopbackCommand = _Ds0LoopbackCommand_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 14),
    _Ds0LoopbackCommand_Type()
)
ds0LoopbackCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0LoopbackCommand.setStatus("mandatory")


class _Ds0CasParameterSource_Type(Integer32):
    """Custom type ds0CasParameterSource based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("casAppl", 1),
          ("mibValue", 2))
    )


_Ds0CasParameterSource_Type.__name__ = "Integer32"
_Ds0CasParameterSource_Object = MibTableColumn
ds0CasParameterSource = _Ds0CasParameterSource_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 15),
    _Ds0CasParameterSource_Type()
)
ds0CasParameterSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasParameterSource.setStatus("mandatory")


class _Ds0CasOnHookMinMakeTime_Type(Integer32):
    """Custom type ds0CasOnHookMinMakeTime based on Integer32"""
    defaultValue = 300

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ds0CasOnHookMinMakeTime_Type.__name__ = "Integer32"
_Ds0CasOnHookMinMakeTime_Object = MibTableColumn
ds0CasOnHookMinMakeTime = _Ds0CasOnHookMinMakeTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 16),
    _Ds0CasOnHookMinMakeTime_Type()
)
ds0CasOnHookMinMakeTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasOnHookMinMakeTime.setStatus("mandatory")


class _Ds0CasOffHookMinMakeTime_Type(Integer32):
    """Custom type ds0CasOffHookMinMakeTime based on Integer32"""
    defaultValue = 20

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ds0CasOffHookMinMakeTime_Type.__name__ = "Integer32"
_Ds0CasOffHookMinMakeTime_Object = MibTableColumn
ds0CasOffHookMinMakeTime = _Ds0CasOffHookMinMakeTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 17),
    _Ds0CasOffHookMinMakeTime_Type()
)
ds0CasOffHookMinMakeTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasOffHookMinMakeTime.setStatus("mandatory")


class _Ds0CasWinkMinMakeTime_Type(Integer32):
    """Custom type ds0CasWinkMinMakeTime based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ds0CasWinkMinMakeTime_Type.__name__ = "Integer32"
_Ds0CasWinkMinMakeTime_Object = MibTableColumn
ds0CasWinkMinMakeTime = _Ds0CasWinkMinMakeTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 18),
    _Ds0CasWinkMinMakeTime_Type()
)
ds0CasWinkMinMakeTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasWinkMinMakeTime.setStatus("mandatory")


class _Ds0CasWinkMaxMakeTime_Type(Integer32):
    """Custom type ds0CasWinkMaxMakeTime based on Integer32"""
    defaultValue = 350

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ds0CasWinkMaxMakeTime_Type.__name__ = "Integer32"
_Ds0CasWinkMaxMakeTime_Object = MibTableColumn
ds0CasWinkMaxMakeTime = _Ds0CasWinkMaxMakeTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 19),
    _Ds0CasWinkMaxMakeTime_Type()
)
ds0CasWinkMaxMakeTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasWinkMaxMakeTime.setStatus("mandatory")


class _Ds0CasWinkBreakTime_Type(Integer32):
    """Custom type ds0CasWinkBreakTime based on Integer32"""
    defaultValue = 70

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ds0CasWinkBreakTime_Type.__name__ = "Integer32"
_Ds0CasWinkBreakTime_Object = MibTableColumn
ds0CasWinkBreakTime = _Ds0CasWinkBreakTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 20),
    _Ds0CasWinkBreakTime_Type()
)
ds0CasWinkBreakTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasWinkBreakTime.setStatus("mandatory")


class _Ds0CasGlareTime_Type(Integer32):
    """Custom type ds0CasGlareTime based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ds0CasGlareTime_Type.__name__ = "Integer32"
_Ds0CasGlareTime_Object = MibTableColumn
ds0CasGlareTime = _Ds0CasGlareTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 21),
    _Ds0CasGlareTime_Type()
)
ds0CasGlareTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasGlareTime.setStatus("mandatory")


class _Ds0CasGaurdTime_Type(Integer32):
    """Custom type ds0CasGaurdTime based on Integer32"""
    defaultValue = 800

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ds0CasGaurdTime_Type.__name__ = "Integer32"
_Ds0CasGaurdTime_Object = MibTableColumn
ds0CasGaurdTime = _Ds0CasGaurdTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 22),
    _Ds0CasGaurdTime_Type()
)
ds0CasGaurdTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasGaurdTime.setStatus("mandatory")


class _Ds0CasDelayImmedStart_Type(Integer32):
    """Custom type ds0CasDelayImmedStart based on Integer32"""
    defaultValue = 500

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_Ds0CasDelayImmedStart_Type.__name__ = "Integer32"
_Ds0CasDelayImmedStart_Object = MibTableColumn
ds0CasDelayImmedStart = _Ds0CasDelayImmedStart_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 23),
    _Ds0CasDelayImmedStart_Type()
)
ds0CasDelayImmedStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasDelayImmedStart.setStatus("mandatory")


class _Ds0SignalingType_Type(Integer32):
    """Custom type ds0SignalingType based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("cas", 1),
          ("ccs", 2),
          ("none", 3))
    )


_Ds0SignalingType_Type.__name__ = "Integer32"
_Ds0SignalingType_Object = MibTableColumn
ds0SignalingType = _Ds0SignalingType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 24),
    _Ds0SignalingType_Type()
)
ds0SignalingType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds0SignalingType.setStatus("mandatory")


class _Ds0CasMinDelayDialTime_Type(Integer32):
    """Custom type ds0CasMinDelayDialTime based on Integer32"""
    defaultValue = 100


_Ds0CasMinDelayDialTime_Object = MibTableColumn
ds0CasMinDelayDialTime = _Ds0CasMinDelayDialTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 25),
    _Ds0CasMinDelayDialTime_Type()
)
ds0CasMinDelayDialTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasMinDelayDialTime.setStatus("mandatory")


class _Ds0CasMinStartDialTime_Type(Integer32):
    """Custom type ds0CasMinStartDialTime based on Integer32"""
    defaultValue = 70


_Ds0CasMinStartDialTime_Object = MibTableColumn
ds0CasMinStartDialTime = _Ds0CasMinStartDialTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 26),
    _Ds0CasMinStartDialTime_Type()
)
ds0CasMinStartDialTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasMinStartDialTime.setStatus("mandatory")


class _Ds0CasFlashMinMakeTime_Type(Integer32):
    """Custom type ds0CasFlashMinMakeTime based on Integer32"""
    defaultValue = 300


_Ds0CasFlashMinMakeTime_Object = MibTableColumn
ds0CasFlashMinMakeTime = _Ds0CasFlashMinMakeTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 27),
    _Ds0CasFlashMinMakeTime_Type()
)
ds0CasFlashMinMakeTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasFlashMinMakeTime.setStatus("mandatory")


class _Ds0CasFlashMaxMakeTime_Type(Integer32):
    """Custom type ds0CasFlashMaxMakeTime based on Integer32"""
    defaultValue = 1400


_Ds0CasFlashMaxMakeTime_Object = MibTableColumn
ds0CasFlashMaxMakeTime = _Ds0CasFlashMaxMakeTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 28),
    _Ds0CasFlashMaxMakeTime_Type()
)
ds0CasFlashMaxMakeTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasFlashMaxMakeTime.setStatus("mandatory")


class _Ds0CasDirectionality_Type(Integer32):
    """Custom type ds0CasDirectionality based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bidirectional", 1),
          ("incoming", 2),
          ("outgoing", 3))
    )


_Ds0CasDirectionality_Type.__name__ = "Integer32"
_Ds0CasDirectionality_Object = MibTableColumn
ds0CasDirectionality = _Ds0CasDirectionality_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 29),
    _Ds0CasDirectionality_Type()
)
ds0CasDirectionality.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasDirectionality.setStatus("mandatory")


class _Ds0CasGlarePolicy_Type(Integer32):
    """Custom type ds0CasGlarePolicy based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("controlling", 1),
          ("releasing", 2))
    )


_Ds0CasGlarePolicy_Type.__name__ = "Integer32"
_Ds0CasGlarePolicy_Object = MibTableColumn
ds0CasGlarePolicy = _Ds0CasGlarePolicy_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 30),
    _Ds0CasGlarePolicy_Type()
)
ds0CasGlarePolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasGlarePolicy.setStatus("mandatory")


class _Ds0CasIncomingMgcpPackage_Type(DisplayString):
    """Custom type ds0CasIncomingMgcpPackage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Ds0CasIncomingMgcpPackage_Type.__name__ = "DisplayString"
_Ds0CasIncomingMgcpPackage_Object = MibTableColumn
ds0CasIncomingMgcpPackage = _Ds0CasIncomingMgcpPackage_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 31),
    _Ds0CasIncomingMgcpPackage_Type()
)
ds0CasIncomingMgcpPackage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasIncomingMgcpPackage.setStatus("mandatory")


class _Ds0CasOutgoingMgcpPackage_Type(DisplayString):
    """Custom type ds0CasOutgoingMgcpPackage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_Ds0CasOutgoingMgcpPackage_Type.__name__ = "DisplayString"
_Ds0CasOutgoingMgcpPackage_Object = MibTableColumn
ds0CasOutgoingMgcpPackage = _Ds0CasOutgoingMgcpPackage_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 32),
    _Ds0CasOutgoingMgcpPackage_Type()
)
ds0CasOutgoingMgcpPackage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0CasOutgoingMgcpPackage.setStatus("mandatory")


class _Ds0InputGain_Type(Integer32):
    """Custom type ds0InputGain based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-6, 14),
    )


_Ds0InputGain_Type.__name__ = "Integer32"
_Ds0InputGain_Object = MibTableColumn
ds0InputGain = _Ds0InputGain_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 33),
    _Ds0InputGain_Type()
)
ds0InputGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0InputGain.setStatus("mandatory")


class _Ds0OutputAttenuation_Type(Integer32):
    """Custom type ds0OutputAttenuation based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 14),
    )


_Ds0OutputAttenuation_Type.__name__ = "Integer32"
_Ds0OutputAttenuation_Object = MibTableColumn
ds0OutputAttenuation = _Ds0OutputAttenuation_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 34),
    _Ds0OutputAttenuation_Type()
)
ds0OutputAttenuation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0OutputAttenuation.setStatus("mandatory")


class _Ds0MusicThreshold_Type(Integer32):
    """Custom type ds0MusicThreshold based on Integer32"""
    defaultValue = -38

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-70, -30),
    )


_Ds0MusicThreshold_Type.__name__ = "Integer32"
_Ds0MusicThreshold_Object = MibTableColumn
ds0MusicThreshold = _Ds0MusicThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 35),
    _Ds0MusicThreshold_Type()
)
ds0MusicThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0MusicThreshold.setStatus("mandatory")


class _Ds0SidPacket_Type(TruthValue):
    """Custom type ds0SidPacket based on TruthValue"""


_Ds0SidPacket_Object = MibTableColumn
ds0SidPacket = _Ds0SidPacket_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 1, 1, 36),
    _Ds0SidPacket_Type()
)
ds0SidPacket.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds0SidPacket.setStatus("mandatory")
_Dsx0VismChanMapTable_Object = MibTable
dsx0VismChanMapTable = _Dsx0VismChanMapTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 2)
)
if mibBuilder.loadTexts:
    dsx0VismChanMapTable.setStatus("mandatory")
_Dsx0VismChanMapEntry_Object = MibTableRow
dsx0VismChanMapEntry = _Dsx0VismChanMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 2, 1)
)
dsx0VismChanMapEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "dsx1LineNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "ds0ChanNum"),
)
if mibBuilder.loadTexts:
    dsx0VismChanMapEntry.setStatus("mandatory")


class _Dsx1LineNum_Type(Integer32):
    """Custom type dsx1LineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_Dsx1LineNum_Type.__name__ = "Integer32"
_Dsx1LineNum_Object = MibTableColumn
dsx1LineNum = _Dsx1LineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 2, 1, 1),
    _Dsx1LineNum_Type()
)
dsx1LineNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1LineNum.setStatus("mandatory")


class _Ds0ChanNum_Type(Integer32):
    """Custom type ds0ChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_Ds0ChanNum_Type.__name__ = "Integer32"
_Ds0ChanNum_Object = MibTableColumn
ds0ChanNum = _Ds0ChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 2, 1, 2),
    _Ds0ChanNum_Type()
)
ds0ChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds0ChanNum.setStatus("mandatory")
_Ds0ChanMapIfIndex_Type = Integer32
_Ds0ChanMapIfIndex_Object = MibTableColumn
ds0ChanMapIfIndex = _Ds0ChanMapIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 4, 7, 2, 1, 3),
    _Ds0ChanMapIfIndex_Type()
)
ds0ChanMapIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds0ChanMapIfIndex.setStatus("mandatory")
_FrPortCnfPortGrp_ObjectIdentity = ObjectIdentity
frPortCnfPortGrp = _FrPortCnfPortGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1)
)
_FrPortCnfPortGrpTable_Object = MibTable
frPortCnfPortGrpTable = _FrPortCnfPortGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1)
)
if mibBuilder.loadTexts:
    frPortCnfPortGrpTable.setStatus("mandatory")
_FrPortCnfPortGrpEntry_Object = MibTableRow
frPortCnfPortGrpEntry = _FrPortCnfPortGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1)
)
frPortCnfPortGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "portNum"),
)
if mibBuilder.loadTexts:
    frPortCnfPortGrpEntry.setStatus("mandatory")
_PortNum_Type = Integer32
_PortNum_Object = MibTableColumn
portNum = _PortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 1),
    _PortNum_Type()
)
portNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portNum.setStatus("mandatory")
_PortLineNum_Type = Integer32
_PortLineNum_Object = MibTableColumn
portLineNum = _PortLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 2),
    _PortLineNum_Type()
)
portLineNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portLineNum.setStatus("mandatory")


class _PortRowStatus_Type(Integer32):
    """Custom type portRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_PortRowStatus_Type.__name__ = "Integer32"
_PortRowStatus_Object = MibTableColumn
portRowStatus = _PortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 3),
    _PortRowStatus_Type()
)
portRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portRowStatus.setStatus("mandatory")


class _PortDs0ConfigBitMap_Type(Integer32):
    """Custom type portDs0ConfigBitMap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PortDs0ConfigBitMap_Type.__name__ = "Integer32"
_PortDs0ConfigBitMap_Object = MibTableColumn
portDs0ConfigBitMap = _PortDs0ConfigBitMap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 4),
    _PortDs0ConfigBitMap_Type()
)
portDs0ConfigBitMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portDs0ConfigBitMap.setStatus("mandatory")


class _PortDs0Speed_Type(Integer32):
    """Custom type portDs0Speed based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("speed56k", 1),
          ("speed64k", 2),
          ("unUsed", 3))
    )


_PortDs0Speed_Type.__name__ = "Integer32"
_PortDs0Speed_Object = MibTableColumn
portDs0Speed = _PortDs0Speed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 5),
    _PortDs0Speed_Type()
)
portDs0Speed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portDs0Speed.setStatus("mandatory")


class _PortFlagsBetweenFrames_Type(Integer32):
    """Custom type portFlagsBetweenFrames based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_PortFlagsBetweenFrames_Type.__name__ = "Integer32"
_PortFlagsBetweenFrames_Object = MibTableColumn
portFlagsBetweenFrames = _PortFlagsBetweenFrames_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 6),
    _PortFlagsBetweenFrames_Type()
)
portFlagsBetweenFrames.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portFlagsBetweenFrames.setStatus("mandatory")


class _PortEqueueServiceRatio_Type(Integer32):
    """Custom type portEqueueServiceRatio based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_PortEqueueServiceRatio_Type.__name__ = "Integer32"
_PortEqueueServiceRatio_Object = MibTableColumn
portEqueueServiceRatio = _PortEqueueServiceRatio_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 7),
    _PortEqueueServiceRatio_Type()
)
portEqueueServiceRatio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portEqueueServiceRatio.setStatus("mandatory")
_PortSpeed_Type = Integer32
_PortSpeed_Object = MibTableColumn
portSpeed = _PortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 8),
    _PortSpeed_Type()
)
portSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSpeed.setStatus("mandatory")


class _PortAdmin_Type(Integer32):
    """Custom type portAdmin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1),
          ("write-Only", 3))
    )


_PortAdmin_Type.__name__ = "Integer32"
_PortAdmin_Object = MibTableColumn
portAdmin = _PortAdmin_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 9),
    _PortAdmin_Type()
)
portAdmin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portAdmin.setStatus("mandatory")


class _PortType_Type(Integer32):
    """Custom type portType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("frFUNI", 2),
          ("frame-forward", 3),
          ("frame-relay", 1))
    )


_PortType_Type.__name__ = "Integer32"
_PortType_Object = MibTableColumn
portType = _PortType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 10),
    _PortType_Type()
)
portType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portType.setStatus("mandatory")


class _PortSvcStatus_Type(Integer32):
    """Custom type portSvcStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_PortSvcStatus_Type.__name__ = "Integer32"
_PortSvcStatus_Object = MibTableColumn
portSvcStatus = _PortSvcStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 11),
    _PortSvcStatus_Type()
)
portSvcStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portSvcStatus.setStatus("mandatory")


class _PortSvcInUse_Type(Integer32):
    """Custom type portSvcInUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("in-use", 2),
          ("not-use", 1))
    )


_PortSvcInUse_Type.__name__ = "Integer32"
_PortSvcInUse_Object = MibTableColumn
portSvcInUse = _PortSvcInUse_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 12),
    _PortSvcInUse_Type()
)
portSvcInUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portSvcInUse.setStatus("mandatory")


class _PortSvcShareLcn_Type(Integer32):
    """Custom type portSvcShareLcn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("card-based", 2),
          ("port-based", 1))
    )


_PortSvcShareLcn_Type.__name__ = "Integer32"
_PortSvcShareLcn_Object = MibTableColumn
portSvcShareLcn = _PortSvcShareLcn_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 13),
    _PortSvcShareLcn_Type()
)
portSvcShareLcn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSvcShareLcn.setStatus("mandatory")


class _PortSvcLcnLow_Type(Integer32):
    """Custom type portSvcLcnLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 4015),
    )


_PortSvcLcnLow_Type.__name__ = "Integer32"
_PortSvcLcnLow_Object = MibTableColumn
portSvcLcnLow = _PortSvcLcnLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 14),
    _PortSvcLcnLow_Type()
)
portSvcLcnLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSvcLcnLow.setStatus("mandatory")


class _PortSvcLcnHigh_Type(Integer32):
    """Custom type portSvcLcnHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 4015),
    )


_PortSvcLcnHigh_Type.__name__ = "Integer32"
_PortSvcLcnHigh_Object = MibTableColumn
portSvcLcnHigh = _PortSvcLcnHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 15),
    _PortSvcLcnHigh_Type()
)
portSvcLcnHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSvcLcnHigh.setStatus("mandatory")


class _PortSvcDlciLow_Type(Integer32):
    """Custom type portSvcDlciLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_PortSvcDlciLow_Type.__name__ = "Integer32"
_PortSvcDlciLow_Object = MibTableColumn
portSvcDlciLow = _PortSvcDlciLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 16),
    _PortSvcDlciLow_Type()
)
portSvcDlciLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSvcDlciLow.setStatus("mandatory")


class _PortSvcDlciHigh_Type(Integer32):
    """Custom type portSvcDlciHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_PortSvcDlciHigh_Type.__name__ = "Integer32"
_PortSvcDlciHigh_Object = MibTableColumn
portSvcDlciHigh = _PortSvcDlciHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 17),
    _PortSvcDlciHigh_Type()
)
portSvcDlciHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSvcDlciHigh.setStatus("mandatory")


class _PortDeleteSvcs_Type(Integer32):
    """Custom type portDeleteSvcs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("delete", 1),
          ("other", 2))
    )


_PortDeleteSvcs_Type.__name__ = "Integer32"
_PortDeleteSvcs_Object = MibTableColumn
portDeleteSvcs = _PortDeleteSvcs_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 18),
    _PortDeleteSvcs_Type()
)
portDeleteSvcs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portDeleteSvcs.setStatus("mandatory")
_PortIngrSvcBandW_Type = Integer32
_PortIngrSvcBandW_Object = MibTableColumn
portIngrSvcBandW = _PortIngrSvcBandW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 19),
    _PortIngrSvcBandW_Type()
)
portIngrSvcBandW.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portIngrSvcBandW.setStatus("mandatory")
_PortEgrSvcBandW_Type = Integer32
_PortEgrSvcBandW_Object = MibTableColumn
portEgrSvcBandW = _PortEgrSvcBandW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 20),
    _PortEgrSvcBandW_Type()
)
portEgrSvcBandW.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portEgrSvcBandW.setStatus("mandatory")


class _PortBERTEnable_Type(Integer32):
    """Custom type portBERTEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_PortBERTEnable_Type.__name__ = "Integer32"
_PortBERTEnable_Object = MibTableColumn
portBERTEnable = _PortBERTEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 21),
    _PortBERTEnable_Type()
)
portBERTEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portBERTEnable.setStatus("mandatory")


class _PortEnhancedSIW_Type(Integer32):
    """Custom type portEnhancedSIW based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_PortEnhancedSIW_Type.__name__ = "Integer32"
_PortEnhancedSIW_Object = MibTableColumn
portEnhancedSIW = _PortEnhancedSIW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 22),
    _PortEnhancedSIW_Type()
)
portEnhancedSIW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portEnhancedSIW.setStatus("mandatory")


class _PortM32EgrQueueThresh_Type(Integer32):
    """Custom type portM32EgrQueueThresh based on Integer32"""
    defaultValue = 6000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6000),
    )


_PortM32EgrQueueThresh_Type.__name__ = "Integer32"
_PortM32EgrQueueThresh_Object = MibTableColumn
portM32EgrQueueThresh = _PortM32EgrQueueThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 23),
    _PortM32EgrQueueThresh_Type()
)
portM32EgrQueueThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portM32EgrQueueThresh.setStatus("mandatory")


class _PortHeaderLen_Type(Integer32):
    """Custom type portHeaderLen based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fourOctets", 2),
          ("twoOctets", 1))
    )


_PortHeaderLen_Type.__name__ = "Integer32"
_PortHeaderLen_Object = MibTableColumn
portHeaderLen = _PortHeaderLen_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 24),
    _PortHeaderLen_Type()
)
portHeaderLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portHeaderLen.setStatus("mandatory")


class _PortFrameChkSumType_Type(Integer32):
    """Custom type portFrameChkSumType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("crc16", 1),
          ("crc32", 2))
    )


_PortFrameChkSumType_Type.__name__ = "Integer32"
_PortFrameChkSumType_Object = MibTableColumn
portFrameChkSumType = _PortFrameChkSumType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 25),
    _PortFrameChkSumType_Type()
)
portFrameChkSumType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portFrameChkSumType.setStatus("mandatory")


class _PortFileId_Type(Integer32):
    """Custom type portFileId based on Integer32"""
    defaultValue = 0


_PortFileId_Object = MibTableColumn
portFileId = _PortFileId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 26),
    _PortFileId_Type()
)
portFileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portFileId.setStatus("mandatory")


class _PortOverSubEnable_Type(Integer32):
    """Custom type portOverSubEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_PortOverSubEnable_Type.__name__ = "Integer32"
_PortOverSubEnable_Object = MibTableColumn
portOverSubEnable = _PortOverSubEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 1, 1, 27),
    _PortOverSubEnable_Type()
)
portOverSubEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portOverSubEnable.setStatus("mandatory")


class _PortsUsedLine1_Type(Integer32):
    """Custom type portsUsedLine1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PortsUsedLine1_Type.__name__ = "Integer32"
_PortsUsedLine1_Object = MibScalar
portsUsedLine1 = _PortsUsedLine1_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 2),
    _PortsUsedLine1_Type()
)
portsUsedLine1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portsUsedLine1.setStatus("mandatory")


class _PortsUsedLine2_Type(Integer32):
    """Custom type portsUsedLine2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PortsUsedLine2_Type.__name__ = "Integer32"
_PortsUsedLine2_Object = MibScalar
portsUsedLine2 = _PortsUsedLine2_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 3),
    _PortsUsedLine2_Type()
)
portsUsedLine2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portsUsedLine2.setStatus("mandatory")


class _PortsUsedLine3_Type(Integer32):
    """Custom type portsUsedLine3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PortsUsedLine3_Type.__name__ = "Integer32"
_PortsUsedLine3_Object = MibScalar
portsUsedLine3 = _PortsUsedLine3_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 4),
    _PortsUsedLine3_Type()
)
portsUsedLine3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portsUsedLine3.setStatus("mandatory")


class _PortsUsedLine4_Type(Integer32):
    """Custom type portsUsedLine4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PortsUsedLine4_Type.__name__ = "Integer32"
_PortsUsedLine4_Object = MibScalar
portsUsedLine4 = _PortsUsedLine4_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 5),
    _PortsUsedLine4_Type()
)
portsUsedLine4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portsUsedLine4.setStatus("mandatory")


class _PortNextAvailable_Type(Integer32):
    """Custom type portNextAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 256),
    )


_PortNextAvailable_Type.__name__ = "Integer32"
_PortNextAvailable_Object = MibScalar
portNextAvailable = _PortNextAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 6),
    _PortNextAvailable_Type()
)
portNextAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portNextAvailable.setStatus("mandatory")


class _PortsUsedLine5_Type(Integer32):
    """Custom type portsUsedLine5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PortsUsedLine5_Type.__name__ = "Integer32"
_PortsUsedLine5_Object = MibScalar
portsUsedLine5 = _PortsUsedLine5_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 7),
    _PortsUsedLine5_Type()
)
portsUsedLine5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portsUsedLine5.setStatus("mandatory")


class _PortsUsedLine6_Type(Integer32):
    """Custom type portsUsedLine6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PortsUsedLine6_Type.__name__ = "Integer32"
_PortsUsedLine6_Object = MibScalar
portsUsedLine6 = _PortsUsedLine6_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 8),
    _PortsUsedLine6_Type()
)
portsUsedLine6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portsUsedLine6.setStatus("mandatory")


class _PortsUsedLine7_Type(Integer32):
    """Custom type portsUsedLine7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PortsUsedLine7_Type.__name__ = "Integer32"
_PortsUsedLine7_Object = MibScalar
portsUsedLine7 = _PortsUsedLine7_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 9),
    _PortsUsedLine7_Type()
)
portsUsedLine7.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portsUsedLine7.setStatus("mandatory")


class _PortsUsedLine8_Type(Integer32):
    """Custom type portsUsedLine8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PortsUsedLine8_Type.__name__ = "Integer32"
_PortsUsedLine8_Object = MibScalar
portsUsedLine8 = _PortsUsedLine8_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 10),
    _PortsUsedLine8_Type()
)
portsUsedLine8.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portsUsedLine8.setStatus("mandatory")
_FrPortsUsedLineGrpTable_Object = MibTable
frPortsUsedLineGrpTable = _FrPortsUsedLineGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 11)
)
if mibBuilder.loadTexts:
    frPortsUsedLineGrpTable.setStatus("mandatory")
_FrPortsUsedLineGrpEntry_Object = MibTableRow
frPortsUsedLineGrpEntry = _FrPortsUsedLineGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 11, 1)
)
frPortsUsedLineGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "frPortsUsedLineIndex"),
)
if mibBuilder.loadTexts:
    frPortsUsedLineGrpEntry.setStatus("mandatory")


class _FrPortsUsedLineIndex_Type(Integer32):
    """Custom type frPortsUsedLineIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 56),
    )


_FrPortsUsedLineIndex_Type.__name__ = "Integer32"
_FrPortsUsedLineIndex_Object = MibTableColumn
frPortsUsedLineIndex = _FrPortsUsedLineIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 11, 1, 1),
    _FrPortsUsedLineIndex_Type()
)
frPortsUsedLineIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frPortsUsedLineIndex.setStatus("mandatory")


class _FrPortsUsedLine_Type(Integer32):
    """Custom type frPortsUsedLine based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_FrPortsUsedLine_Type.__name__ = "Integer32"
_FrPortsUsedLine_Object = MibTableColumn
frPortsUsedLine = _FrPortsUsedLine_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 1, 11, 1, 2),
    _FrPortsUsedLine_Type()
)
frPortsUsedLine.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frPortsUsedLine.setStatus("mandatory")
_FrPortCnfSigLMIGrp_ObjectIdentity = ObjectIdentity
frPortCnfSigLMIGrp = _FrPortCnfSigLMIGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1)
)
_FrPortCnfSigLMIGrpTable_Object = MibTable
frPortCnfSigLMIGrpTable = _FrPortCnfSigLMIGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1)
)
if mibBuilder.loadTexts:
    frPortCnfSigLMIGrpTable.setStatus("mandatory")
_FrPortCnfSigLMIGrpEntry_Object = MibTableRow
frPortCnfSigLMIGrpEntry = _FrPortCnfSigLMIGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1)
)
frPortCnfSigLMIGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "lmiCnfPortNum"),
)
if mibBuilder.loadTexts:
    frPortCnfSigLMIGrpEntry.setStatus("mandatory")
_LmiCnfPortNum_Type = Integer32
_LmiCnfPortNum_Object = MibTableColumn
lmiCnfPortNum = _LmiCnfPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 1),
    _LmiCnfPortNum_Type()
)
lmiCnfPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiCnfPortNum.setStatus("mandatory")


class _SignallingProtocolType_Type(Integer32):
    """Custom type signallingProtocolType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("annexANNI", 6),
          ("annexAUNI", 4),
          ("annexDNNI", 7),
          ("annexDUNI", 5),
          ("noSignalling", 2),
          ("other", 1),
          ("strataLMI", 3))
    )


_SignallingProtocolType_Type.__name__ = "Integer32"
_SignallingProtocolType_Object = MibTableColumn
signallingProtocolType = _SignallingProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 2),
    _SignallingProtocolType_Type()
)
signallingProtocolType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    signallingProtocolType.setStatus("mandatory")


class _AsynchronousUpdates_Type(Integer32):
    """Custom type asynchronousUpdates based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("fsenable", 3),
          ("updfsenable", 4))
    )


_AsynchronousUpdates_Type.__name__ = "Integer32"
_AsynchronousUpdates_Object = MibTableColumn
asynchronousUpdates = _AsynchronousUpdates_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 3),
    _AsynchronousUpdates_Type()
)
asynchronousUpdates.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    asynchronousUpdates.setStatus("mandatory")


class _T391LinkIntegrityTimer_Type(Integer32):
    """Custom type t391LinkIntegrityTimer based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_T391LinkIntegrityTimer_Type.__name__ = "Integer32"
_T391LinkIntegrityTimer_Object = MibTableColumn
t391LinkIntegrityTimer = _T391LinkIntegrityTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 4),
    _T391LinkIntegrityTimer_Type()
)
t391LinkIntegrityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    t391LinkIntegrityTimer.setStatus("mandatory")


class _T392PollingVerificationTimer_Type(Integer32):
    """Custom type t392PollingVerificationTimer based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_T392PollingVerificationTimer_Type.__name__ = "Integer32"
_T392PollingVerificationTimer_Object = MibTableColumn
t392PollingVerificationTimer = _T392PollingVerificationTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 5),
    _T392PollingVerificationTimer_Type()
)
t392PollingVerificationTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    t392PollingVerificationTimer.setStatus("mandatory")


class _N391FullStatusPollingCounter_Type(Integer32):
    """Custom type n391FullStatusPollingCounter based on Integer32"""
    defaultValue = 6

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_N391FullStatusPollingCounter_Type.__name__ = "Integer32"
_N391FullStatusPollingCounter_Object = MibTableColumn
n391FullStatusPollingCounter = _N391FullStatusPollingCounter_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 6),
    _N391FullStatusPollingCounter_Type()
)
n391FullStatusPollingCounter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    n391FullStatusPollingCounter.setStatus("mandatory")


class _N392ErrorThreshold_Type(Integer32):
    """Custom type n392ErrorThreshold based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_N392ErrorThreshold_Type.__name__ = "Integer32"
_N392ErrorThreshold_Object = MibTableColumn
n392ErrorThreshold = _N392ErrorThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 7),
    _N392ErrorThreshold_Type()
)
n392ErrorThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    n392ErrorThreshold.setStatus("mandatory")


class _N393MonitoredEventCount_Type(Integer32):
    """Custom type n393MonitoredEventCount based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_N393MonitoredEventCount_Type.__name__ = "Integer32"
_N393MonitoredEventCount_Object = MibTableColumn
n393MonitoredEventCount = _N393MonitoredEventCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 8),
    _N393MonitoredEventCount_Type()
)
n393MonitoredEventCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    n393MonitoredEventCount.setStatus("mandatory")


class _EnhancedLmi_Type(Integer32):
    """Custom type enhancedLmi based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_EnhancedLmi_Type.__name__ = "Integer32"
_EnhancedLmi_Object = MibTableColumn
enhancedLmi = _EnhancedLmi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 9),
    _EnhancedLmi_Type()
)
enhancedLmi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    enhancedLmi.setStatus("mandatory")


class _PortFRF1Dot2Support_Type(Integer32):
    """Custom type portFRF1Dot2Support based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_PortFRF1Dot2Support_Type.__name__ = "Integer32"
_PortFRF1Dot2Support_Object = MibTableColumn
portFRF1Dot2Support = _PortFRF1Dot2Support_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 10),
    _PortFRF1Dot2Support_Type()
)
portFRF1Dot2Support.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portFRF1Dot2Support.setStatus("mandatory")
_FrPortCnfSigCLLMGrp_ObjectIdentity = ObjectIdentity
frPortCnfSigCLLMGrp = _FrPortCnfSigCLLMGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2)
)
_FrPortCnfSigCLLMGrpTable_Object = MibTable
frPortCnfSigCLLMGrpTable = _FrPortCnfSigCLLMGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1)
)
if mibBuilder.loadTexts:
    frPortCnfSigCLLMGrpTable.setStatus("mandatory")
_FrPortCnfSigCLLMGrpEntry_Object = MibTableRow
frPortCnfSigCLLMGrpEntry = _FrPortCnfSigCLLMGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1)
)
frPortCnfSigCLLMGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "cllmCnfPortNum"),
)
if mibBuilder.loadTexts:
    frPortCnfSigCLLMGrpEntry.setStatus("mandatory")
_CllmCnfPortNum_Type = Integer32
_CllmCnfPortNum_Object = MibTableColumn
cllmCnfPortNum = _CllmCnfPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1, 1),
    _CllmCnfPortNum_Type()
)
cllmCnfPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cllmCnfPortNum.setStatus("mandatory")


class _CllmEnable_Type(Integer32):
    """Custom type cllmEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_CllmEnable_Type.__name__ = "Integer32"
_CllmEnable_Object = MibTableColumn
cllmEnable = _CllmEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1, 2),
    _CllmEnable_Type()
)
cllmEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cllmEnable.setStatus("mandatory")


class _XmtCLLMStatusTimer_Type(Integer32):
    """Custom type xmtCLLMStatusTimer based on Integer32"""
    defaultValue = 40

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(40, 5000),
    )


_XmtCLLMStatusTimer_Type.__name__ = "Integer32"
_XmtCLLMStatusTimer_Object = MibTableColumn
xmtCLLMStatusTimer = _XmtCLLMStatusTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1, 3),
    _XmtCLLMStatusTimer_Type()
)
xmtCLLMStatusTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    xmtCLLMStatusTimer.setStatus("mandatory")


class _RcvCLLMStatusTimer_Type(Integer32):
    """Custom type rcvCLLMStatusTimer based on Integer32"""
    defaultValue = 1000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1000
        )
    )
    namedValues = NamedValues(
        ("rcvCLLMTimerValue", 1000)
    )


_RcvCLLMStatusTimer_Type.__name__ = "Integer32"
_RcvCLLMStatusTimer_Object = MibTableColumn
rcvCLLMStatusTimer = _RcvCLLMStatusTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1, 4),
    _RcvCLLMStatusTimer_Type()
)
rcvCLLMStatusTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvCLLMStatusTimer.setStatus("mandatory")
_FrPortCnfX21PortGrpTable_Object = MibTable
frPortCnfX21PortGrpTable = _FrPortCnfX21PortGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1)
)
if mibBuilder.loadTexts:
    frPortCnfX21PortGrpTable.setStatus("mandatory")
_FrPortCnfX21PortGrpEntry_Object = MibTableRow
frPortCnfX21PortGrpEntry = _FrPortCnfX21PortGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1)
)
frPortCnfX21PortGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "x21portNum"),
)
if mibBuilder.loadTexts:
    frPortCnfX21PortGrpEntry.setStatus("mandatory")


class _X21portNum_Type(Integer32):
    """Custom type x21portNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_X21portNum_Type.__name__ = "Integer32"
_X21portNum_Object = MibTableColumn
x21portNum = _X21portNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 1),
    _X21portNum_Type()
)
x21portNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21portNum.setStatus("mandatory")


class _X21portLineNum_Type(Integer32):
    """Custom type x21portLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_X21portLineNum_Type.__name__ = "Integer32"
_X21portLineNum_Object = MibTableColumn
x21portLineNum = _X21portLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 2),
    _X21portLineNum_Type()
)
x21portLineNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21portLineNum.setStatus("mandatory")


class _X21portRowStatus_Type(Integer32):
    """Custom type x21portRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_X21portRowStatus_Type.__name__ = "Integer32"
_X21portRowStatus_Object = MibTableColumn
x21portRowStatus = _X21portRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 3),
    _X21portRowStatus_Type()
)
x21portRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21portRowStatus.setStatus("mandatory")


class _X21portFlagsBetweenFrames_Type(Integer32):
    """Custom type x21portFlagsBetweenFrames based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_X21portFlagsBetweenFrames_Type.__name__ = "Integer32"
_X21portFlagsBetweenFrames_Object = MibTableColumn
x21portFlagsBetweenFrames = _X21portFlagsBetweenFrames_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 4),
    _X21portFlagsBetweenFrames_Type()
)
x21portFlagsBetweenFrames.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21portFlagsBetweenFrames.setStatus("mandatory")


class _X21portEqueueServiceRatio_Type(Integer32):
    """Custom type x21portEqueueServiceRatio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_X21portEqueueServiceRatio_Type.__name__ = "Integer32"
_X21portEqueueServiceRatio_Object = MibTableColumn
x21portEqueueServiceRatio = _X21portEqueueServiceRatio_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 5),
    _X21portEqueueServiceRatio_Type()
)
x21portEqueueServiceRatio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21portEqueueServiceRatio.setStatus("mandatory")
_X21portSpeed_Type = Integer32
_X21portSpeed_Object = MibTableColumn
x21portSpeed = _X21portSpeed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 6),
    _X21portSpeed_Type()
)
x21portSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21portSpeed.setStatus("mandatory")


class _X21portAdmin_Type(Integer32):
    """Custom type x21portAdmin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1),
          ("write-Only", 3))
    )


_X21portAdmin_Type.__name__ = "Integer32"
_X21portAdmin_Object = MibTableColumn
x21portAdmin = _X21portAdmin_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 7),
    _X21portAdmin_Type()
)
x21portAdmin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21portAdmin.setStatus("mandatory")


class _X21portType_Type(Integer32):
    """Custom type x21portType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("frFUNI", 2),
          ("frame-forward", 3),
          ("frame-relay", 1))
    )


_X21portType_Type.__name__ = "Integer32"
_X21portType_Object = MibTableColumn
x21portType = _X21portType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 8),
    _X21portType_Type()
)
x21portType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21portType.setStatus("mandatory")


class _X21portSvcStatus_Type(Integer32):
    """Custom type x21portSvcStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_X21portSvcStatus_Type.__name__ = "Integer32"
_X21portSvcStatus_Object = MibTableColumn
x21portSvcStatus = _X21portSvcStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 9),
    _X21portSvcStatus_Type()
)
x21portSvcStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21portSvcStatus.setStatus("mandatory")


class _X21portSvcInUse_Type(Integer32):
    """Custom type x21portSvcInUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("in-use", 2),
          ("not-use", 1))
    )


_X21portSvcInUse_Type.__name__ = "Integer32"
_X21portSvcInUse_Object = MibTableColumn
x21portSvcInUse = _X21portSvcInUse_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 10),
    _X21portSvcInUse_Type()
)
x21portSvcInUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21portSvcInUse.setStatus("mandatory")


class _X21portSvcShareLcn_Type(Integer32):
    """Custom type x21portSvcShareLcn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("card-based", 2),
          ("port-based", 1))
    )


_X21portSvcShareLcn_Type.__name__ = "Integer32"
_X21portSvcShareLcn_Object = MibTableColumn
x21portSvcShareLcn = _X21portSvcShareLcn_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 11),
    _X21portSvcShareLcn_Type()
)
x21portSvcShareLcn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21portSvcShareLcn.setStatus("mandatory")


class _X21portSvcLcnLow_Type(Integer32):
    """Custom type x21portSvcLcnLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 271),
    )


_X21portSvcLcnLow_Type.__name__ = "Integer32"
_X21portSvcLcnLow_Object = MibTableColumn
x21portSvcLcnLow = _X21portSvcLcnLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 12),
    _X21portSvcLcnLow_Type()
)
x21portSvcLcnLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21portSvcLcnLow.setStatus("mandatory")


class _X21portSvcLcnHigh_Type(Integer32):
    """Custom type x21portSvcLcnHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 271),
    )


_X21portSvcLcnHigh_Type.__name__ = "Integer32"
_X21portSvcLcnHigh_Object = MibTableColumn
x21portSvcLcnHigh = _X21portSvcLcnHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 13),
    _X21portSvcLcnHigh_Type()
)
x21portSvcLcnHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21portSvcLcnHigh.setStatus("mandatory")


class _X21portSvcDlciLow_Type(Integer32):
    """Custom type x21portSvcDlciLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_X21portSvcDlciLow_Type.__name__ = "Integer32"
_X21portSvcDlciLow_Object = MibTableColumn
x21portSvcDlciLow = _X21portSvcDlciLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 14),
    _X21portSvcDlciLow_Type()
)
x21portSvcDlciLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21portSvcDlciLow.setStatus("mandatory")


class _X21portSvcDlciHigh_Type(Integer32):
    """Custom type x21portSvcDlciHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_X21portSvcDlciHigh_Type.__name__ = "Integer32"
_X21portSvcDlciHigh_Object = MibTableColumn
x21portSvcDlciHigh = _X21portSvcDlciHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 15),
    _X21portSvcDlciHigh_Type()
)
x21portSvcDlciHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21portSvcDlciHigh.setStatus("mandatory")


class _X21portDeleteSvcs_Type(Integer32):
    """Custom type x21portDeleteSvcs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("delete", 1),
          ("other", 2))
    )


_X21portDeleteSvcs_Type.__name__ = "Integer32"
_X21portDeleteSvcs_Object = MibTableColumn
x21portDeleteSvcs = _X21portDeleteSvcs_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 16),
    _X21portDeleteSvcs_Type()
)
x21portDeleteSvcs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    x21portDeleteSvcs.setStatus("mandatory")
_X21portIngrSvcBandW_Type = Integer32
_X21portIngrSvcBandW_Object = MibTableColumn
x21portIngrSvcBandW = _X21portIngrSvcBandW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 17),
    _X21portIngrSvcBandW_Type()
)
x21portIngrSvcBandW.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21portIngrSvcBandW.setStatus("mandatory")
_X21portEgrSvcBandW_Type = Integer32
_X21portEgrSvcBandW_Object = MibTableColumn
x21portEgrSvcBandW = _X21portEgrSvcBandW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 18),
    _X21portEgrSvcBandW_Type()
)
x21portEgrSvcBandW.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    x21portEgrSvcBandW.setStatus("mandatory")
_FrPortServiceQueGrpTable_Object = MibTable
frPortServiceQueGrpTable = _FrPortServiceQueGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1)
)
if mibBuilder.loadTexts:
    frPortServiceQueGrpTable.setStatus("mandatory")
_FrPortServiceQueGrpEntry_Object = MibTableRow
frPortServiceQueGrpEntry = _FrPortServiceQueGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1)
)
frPortServiceQueGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "frServPortNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "portServiceQueueNo"),
)
if mibBuilder.loadTexts:
    frPortServiceQueGrpEntry.setStatus("mandatory")


class _FrServPortNum_Type(Integer32):
    """Custom type frServPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 256),
    )


_FrServPortNum_Type.__name__ = "Integer32"
_FrServPortNum_Object = MibTableColumn
frServPortNum = _FrServPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 1),
    _FrServPortNum_Type()
)
frServPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frServPortNum.setStatus("mandatory")


class _PortServiceQueueNo_Type(Integer32):
    """Custom type portServiceQueueNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("highpriorityQ", 1),
          ("nrtVBRandABRQ", 3),
          ("queue5", 5),
          ("queue6", 6),
          ("queue7", 7),
          ("queue8", 8),
          ("rtVBRQ", 2),
          ("uBRQ", 4))
    )


_PortServiceQueueNo_Type.__name__ = "Integer32"
_PortServiceQueueNo_Object = MibTableColumn
portServiceQueueNo = _PortServiceQueueNo_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 2),
    _PortServiceQueueNo_Type()
)
portServiceQueueNo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portServiceQueueNo.setStatus("mandatory")


class _PortEgresQDepth_Type(Integer32):
    """Custom type portEgresQDepth based on Integer32"""
    defaultValue = 1048575

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097151),
    )


_PortEgresQDepth_Type.__name__ = "Integer32"
_PortEgresQDepth_Object = MibTableColumn
portEgresQDepth = _PortEgresQDepth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 3),
    _PortEgresQDepth_Type()
)
portEgresQDepth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portEgresQDepth.setStatus("mandatory")


class _PortEgresECNThresh_Type(Integer32):
    """Custom type portEgresECNThresh based on Integer32"""
    defaultValue = 104857

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097151),
    )


_PortEgresECNThresh_Type.__name__ = "Integer32"
_PortEgresECNThresh_Object = MibTableColumn
portEgresECNThresh = _PortEgresECNThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 4),
    _PortEgresECNThresh_Type()
)
portEgresECNThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portEgresECNThresh.setStatus("mandatory")


class _PortEgresDEThresh_Type(Integer32):
    """Custom type portEgresDEThresh based on Integer32"""
    defaultValue = 524287

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097151),
    )


_PortEgresDEThresh_Type.__name__ = "Integer32"
_PortEgresDEThresh_Object = MibTableColumn
portEgresDEThresh = _PortEgresDEThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 5),
    _PortEgresDEThresh_Type()
)
portEgresDEThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portEgresDEThresh.setStatus("mandatory")


class _PortQBwInc_Type(Integer32):
    """Custom type portQBwInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16383),
    )


_PortQBwInc_Type.__name__ = "Integer32"
_PortQBwInc_Object = MibTableColumn
portQBwInc = _PortQBwInc_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 6),
    _PortQBwInc_Type()
)
portQBwInc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portQBwInc.setStatus("mandatory")
_PortBytesDiscXceedQueFull_Type = Counter32
_PortBytesDiscXceedQueFull_Object = MibTableColumn
portBytesDiscXceedQueFull = _PortBytesDiscXceedQueFull_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 7),
    _PortBytesDiscXceedQueFull_Type()
)
portBytesDiscXceedQueFull.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portBytesDiscXceedQueFull.setStatus("mandatory")
_PortBytesDiscXceedDEThresh_Type = Counter32
_PortBytesDiscXceedDEThresh_Object = MibTableColumn
portBytesDiscXceedDEThresh = _PortBytesDiscXceedDEThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 4, 1, 1, 8),
    _PortBytesDiscXceedDEThresh_Type()
)
portBytesDiscXceedDEThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portBytesDiscXceedDEThresh.setStatus("mandatory")
_FrPortCnfResPartGrpTable_Object = MibTable
frPortCnfResPartGrpTable = _FrPortCnfResPartGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1)
)
if mibBuilder.loadTexts:
    frPortCnfResPartGrpTable.setStatus("mandatory")
_FrPortCnfResPartGrpEntry_Object = MibTableRow
frPortCnfResPartGrpEntry = _FrPortCnfResPartGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1)
)
frPortCnfResPartGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "frResPartPortNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "frResPartCtrlrNum"),
)
if mibBuilder.loadTexts:
    frPortCnfResPartGrpEntry.setStatus("mandatory")
_FrResPartPortNum_Type = Integer32
_FrResPartPortNum_Object = MibTableColumn
frResPartPortNum = _FrResPartPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 1),
    _FrResPartPortNum_Type()
)
frResPartPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frResPartPortNum.setStatus("mandatory")


class _FrResPartCtrlrNum_Type(Integer32):
    """Custom type frResPartCtrlrNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("par", 1),
          ("pnni", 2),
          ("tag", 3))
    )


_FrResPartCtrlrNum_Type.__name__ = "Integer32"
_FrResPartCtrlrNum_Object = MibTableColumn
frResPartCtrlrNum = _FrResPartCtrlrNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 2),
    _FrResPartCtrlrNum_Type()
)
frResPartCtrlrNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frResPartCtrlrNum.setStatus("mandatory")


class _FrResPartRowStatus_Type(Integer32):
    """Custom type frResPartRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_FrResPartRowStatus_Type.__name__ = "Integer32"
_FrResPartRowStatus_Object = MibTableColumn
frResPartRowStatus = _FrResPartRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 3),
    _FrResPartRowStatus_Type()
)
frResPartRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frResPartRowStatus.setStatus("mandatory")


class _FrResPartNumOfLcnAvail_Type(Integer32):
    """Custom type frResPartNumOfLcnAvail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16000),
    )


_FrResPartNumOfLcnAvail_Type.__name__ = "Integer32"
_FrResPartNumOfLcnAvail_Object = MibTableColumn
frResPartNumOfLcnAvail = _FrResPartNumOfLcnAvail_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 4),
    _FrResPartNumOfLcnAvail_Type()
)
frResPartNumOfLcnAvail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frResPartNumOfLcnAvail.setStatus("mandatory")


class _FrResPartDlciLow_Type(Integer32):
    """Custom type frResPartDlciLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8388607),
    )


_FrResPartDlciLow_Type.__name__ = "Integer32"
_FrResPartDlciLow_Object = MibTableColumn
frResPartDlciLow = _FrResPartDlciLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 5),
    _FrResPartDlciLow_Type()
)
frResPartDlciLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frResPartDlciLow.setStatus("mandatory")


class _FrResPartDlciHigh_Type(Integer32):
    """Custom type frResPartDlciHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8388607),
    )


_FrResPartDlciHigh_Type.__name__ = "Integer32"
_FrResPartDlciHigh_Object = MibTableColumn
frResPartDlciHigh = _FrResPartDlciHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 6),
    _FrResPartDlciHigh_Type()
)
frResPartDlciHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frResPartDlciHigh.setStatus("mandatory")


class _FrResPartIngrPctBW_Type(Integer32):
    """Custom type frResPartIngrPctBW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FrResPartIngrPctBW_Type.__name__ = "Integer32"
_FrResPartIngrPctBW_Object = MibTableColumn
frResPartIngrPctBW = _FrResPartIngrPctBW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 7),
    _FrResPartIngrPctBW_Type()
)
frResPartIngrPctBW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frResPartIngrPctBW.setStatus("mandatory")


class _FrResPartEgrPctBW_Type(Integer32):
    """Custom type frResPartEgrPctBW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FrResPartEgrPctBW_Type.__name__ = "Integer32"
_FrResPartEgrPctBW_Object = MibTableColumn
frResPartEgrPctBW = _FrResPartEgrPctBW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 8),
    _FrResPartEgrPctBW_Type()
)
frResPartEgrPctBW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frResPartEgrPctBW.setStatus("mandatory")


class _FrResPartCtrlrID_Type(Integer32):
    """Custom type frResPartCtrlrID based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FrResPartCtrlrID_Type.__name__ = "Integer32"
_FrResPartCtrlrID_Object = MibTableColumn
frResPartCtrlrID = _FrResPartCtrlrID_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 5, 1, 1, 9),
    _FrResPartCtrlrID_Type()
)
frResPartCtrlrID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frResPartCtrlrID.setStatus("mandatory")
_FrPortCntPortGrp_ObjectIdentity = ObjectIdentity
frPortCntPortGrp = _FrPortCntPortGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1)
)
_FrPortCntPortGrpTable_Object = MibTable
frPortCntPortGrpTable = _FrPortCntPortGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1)
)
if mibBuilder.loadTexts:
    frPortCntPortGrpTable.setStatus("mandatory")
_FrPortCntPortGrpEntry_Object = MibTableRow
frPortCntPortGrpEntry = _FrPortCntPortGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1)
)
frPortCntPortGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "cntPortNum"),
)
if mibBuilder.loadTexts:
    frPortCntPortGrpEntry.setStatus("mandatory")
_CntPortNum_Type = Integer32
_CntPortNum_Object = MibTableColumn
cntPortNum = _CntPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 1),
    _CntPortNum_Type()
)
cntPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cntPortNum.setStatus("mandatory")
_RcvPortFrames_Type = Counter32
_RcvPortFrames_Object = MibTableColumn
rcvPortFrames = _RcvPortFrames_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 2),
    _RcvPortFrames_Type()
)
rcvPortFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvPortFrames.setStatus("mandatory")
_RcvPortBytes_Type = Counter32
_RcvPortBytes_Object = MibTableColumn
rcvPortBytes = _RcvPortBytes_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 3),
    _RcvPortBytes_Type()
)
rcvPortBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvPortBytes.setStatus("mandatory")
_RcvPortFramesDE_Type = Counter32
_RcvPortFramesDE_Object = MibTableColumn
rcvPortFramesDE = _RcvPortFramesDE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 4),
    _RcvPortFramesDE_Type()
)
rcvPortFramesDE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvPortFramesDE.setStatus("mandatory")
_RcvPortFramesFECN_Type = Counter32
_RcvPortFramesFECN_Object = MibTableColumn
rcvPortFramesFECN = _RcvPortFramesFECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 5),
    _RcvPortFramesFECN_Type()
)
rcvPortFramesFECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvPortFramesFECN.setStatus("mandatory")
_RcvPortFramesBECN_Type = Counter32
_RcvPortFramesBECN_Object = MibTableColumn
rcvPortFramesBECN = _RcvPortFramesBECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 6),
    _RcvPortFramesBECN_Type()
)
rcvPortFramesBECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvPortFramesBECN.setStatus("mandatory")
_RcvFramesDiscCRCError_Type = Counter32
_RcvFramesDiscCRCError_Object = MibTableColumn
rcvFramesDiscCRCError = _RcvFramesDiscCRCError_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 7),
    _RcvFramesDiscCRCError_Type()
)
rcvFramesDiscCRCError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesDiscCRCError.setStatus("mandatory")
_RcvFramesDiscAlignmentError_Type = Counter32
_RcvFramesDiscAlignmentError_Object = MibTableColumn
rcvFramesDiscAlignmentError = _RcvFramesDiscAlignmentError_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 8),
    _RcvFramesDiscAlignmentError_Type()
)
rcvFramesDiscAlignmentError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesDiscAlignmentError.setStatus("mandatory")
_RcvFramesDiscIllegalLen_Type = Counter32
_RcvFramesDiscIllegalLen_Object = MibTableColumn
rcvFramesDiscIllegalLen = _RcvFramesDiscIllegalLen_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 9),
    _RcvFramesDiscIllegalLen_Type()
)
rcvFramesDiscIllegalLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesDiscIllegalLen.setStatus("mandatory")
_RcvFramesDiscIllegalHeader_Type = Counter32
_RcvFramesDiscIllegalHeader_Object = MibTableColumn
rcvFramesDiscIllegalHeader = _RcvFramesDiscIllegalHeader_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 10),
    _RcvFramesDiscIllegalHeader_Type()
)
rcvFramesDiscIllegalHeader.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesDiscIllegalHeader.setStatus("mandatory")
_RcvFramesAbort_Type = Counter32
_RcvFramesAbort_Object = MibTableColumn
rcvFramesAbort = _RcvFramesAbort_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 11),
    _RcvFramesAbort_Type()
)
rcvFramesAbort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesAbort.setStatus("mandatory")
_RcvFramesUnknownDLCI_Type = Counter32
_RcvFramesUnknownDLCI_Object = MibTableColumn
rcvFramesUnknownDLCI = _RcvFramesUnknownDLCI_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 12),
    _RcvFramesUnknownDLCI_Type()
)
rcvFramesUnknownDLCI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesUnknownDLCI.setStatus("mandatory")
_RcvLastUnknownDLCI_Type = Integer32
_RcvLastUnknownDLCI_Object = MibTableColumn
rcvLastUnknownDLCI = _RcvLastUnknownDLCI_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 13),
    _RcvLastUnknownDLCI_Type()
)
rcvLastUnknownDLCI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvLastUnknownDLCI.setStatus("mandatory")
_RcvPortFramesTaggedFECN_Type = Counter32
_RcvPortFramesTaggedFECN_Object = MibTableColumn
rcvPortFramesTaggedFECN = _RcvPortFramesTaggedFECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 14),
    _RcvPortFramesTaggedFECN_Type()
)
rcvPortFramesTaggedFECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvPortFramesTaggedFECN.setStatus("mandatory")
_RcvPortFramesTaggedBECN_Type = Counter32
_RcvPortFramesTaggedBECN_Object = MibTableColumn
rcvPortFramesTaggedBECN = _RcvPortFramesTaggedBECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 15),
    _RcvPortFramesTaggedBECN_Type()
)
rcvPortFramesTaggedBECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvPortFramesTaggedBECN.setStatus("mandatory")
_RcvPortFramesTaggedDE_Type = Counter32
_RcvPortFramesTaggedDE_Object = MibTableColumn
rcvPortFramesTaggedDE = _RcvPortFramesTaggedDE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 16),
    _RcvPortFramesTaggedDE_Type()
)
rcvPortFramesTaggedDE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvPortFramesTaggedDE.setStatus("mandatory")
_RcvPortFramesDiscXceedDEThresh_Type = Counter32
_RcvPortFramesDiscXceedDEThresh_Object = MibTableColumn
rcvPortFramesDiscXceedDEThresh = _RcvPortFramesDiscXceedDEThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 17),
    _RcvPortFramesDiscXceedDEThresh_Type()
)
rcvPortFramesDiscXceedDEThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvPortFramesDiscXceedDEThresh.setStatus("mandatory")
_RcvPortKbpsAIR_Type = Integer32
_RcvPortKbpsAIR_Object = MibTableColumn
rcvPortKbpsAIR = _RcvPortKbpsAIR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 18),
    _RcvPortKbpsAIR_Type()
)
rcvPortKbpsAIR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvPortKbpsAIR.setStatus("mandatory")
_RcvBufNotAvailable_Type = Counter32
_RcvBufNotAvailable_Object = MibTableColumn
rcvBufNotAvailable = _RcvBufNotAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 19),
    _RcvBufNotAvailable_Type()
)
rcvBufNotAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvBufNotAvailable.setStatus("mandatory")
_XmtPortFrames_Type = Counter32
_XmtPortFrames_Object = MibTableColumn
xmtPortFrames = _XmtPortFrames_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 20),
    _XmtPortFrames_Type()
)
xmtPortFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtPortFrames.setStatus("mandatory")
_XmtPortBytes_Type = Counter32
_XmtPortBytes_Object = MibTableColumn
xmtPortBytes = _XmtPortBytes_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 21),
    _XmtPortBytes_Type()
)
xmtPortBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtPortBytes.setStatus("mandatory")
_XmtPortFramesFECN_Type = Counter32
_XmtPortFramesFECN_Object = MibTableColumn
xmtPortFramesFECN = _XmtPortFramesFECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 22),
    _XmtPortFramesFECN_Type()
)
xmtPortFramesFECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtPortFramesFECN.setStatus("mandatory")
_XmtPortFramesBECN_Type = Counter32
_XmtPortFramesBECN_Object = MibTableColumn
xmtPortFramesBECN = _XmtPortFramesBECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 23),
    _XmtPortFramesBECN_Type()
)
xmtPortFramesBECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtPortFramesBECN.setStatus("mandatory")
_XmtPortFramesDiscXceedQDepth_Type = Counter32
_XmtPortFramesDiscXceedQDepth_Object = MibTableColumn
xmtPortFramesDiscXceedQDepth = _XmtPortFramesDiscXceedQDepth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 24),
    _XmtPortFramesDiscXceedQDepth_Type()
)
xmtPortFramesDiscXceedQDepth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtPortFramesDiscXceedQDepth.setStatus("mandatory")
_XmtPortBytesDiscXceedQDepth_Type = Counter32
_XmtPortBytesDiscXceedQDepth_Object = MibTableColumn
xmtPortBytesDiscXceedQDepth = _XmtPortBytesDiscXceedQDepth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 25),
    _XmtPortBytesDiscXceedQDepth_Type()
)
xmtPortBytesDiscXceedQDepth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtPortBytesDiscXceedQDepth.setStatus("mandatory")
_XmtPortFramesDuringLMIAlarm_Type = Counter32
_XmtPortFramesDuringLMIAlarm_Object = MibTableColumn
xmtPortFramesDuringLMIAlarm = _XmtPortFramesDuringLMIAlarm_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 26),
    _XmtPortFramesDuringLMIAlarm_Type()
)
xmtPortFramesDuringLMIAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtPortFramesDuringLMIAlarm.setStatus("mandatory")
_XmtPortBytesDuringLMIAlarm_Type = Counter32
_XmtPortBytesDuringLMIAlarm_Object = MibTableColumn
xmtPortBytesDuringLMIAlarm = _XmtPortBytesDuringLMIAlarm_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 27),
    _XmtPortBytesDuringLMIAlarm_Type()
)
xmtPortBytesDuringLMIAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtPortBytesDuringLMIAlarm.setStatus("mandatory")
_XmtFramesAbort_Type = Counter32
_XmtFramesAbort_Object = MibTableColumn
xmtFramesAbort = _XmtFramesAbort_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 28),
    _XmtFramesAbort_Type()
)
xmtFramesAbort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesAbort.setStatus("mandatory")
_XmtFramesUnderrun_Type = Counter32
_XmtFramesUnderrun_Object = MibTableColumn
xmtFramesUnderrun = _XmtFramesUnderrun_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 29),
    _XmtFramesUnderrun_Type()
)
xmtFramesUnderrun.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesUnderrun.setStatus("mandatory")
_XmtPortKbpsAIR_Type = Integer32
_XmtPortKbpsAIR_Object = MibTableColumn
xmtPortKbpsAIR = _XmtPortKbpsAIR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 30),
    _XmtPortKbpsAIR_Type()
)
xmtPortKbpsAIR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtPortKbpsAIR.setStatus("mandatory")
_XmtBufNotAvailable_Type = Counter32
_XmtBufNotAvailable_Object = MibTableColumn
xmtBufNotAvailable = _XmtBufNotAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 31),
    _XmtBufNotAvailable_Type()
)
xmtBufNotAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtBufNotAvailable.setStatus("mandatory")


class _PortClrButton_Type(Integer32):
    """Custom type portClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("noaction", 1))
    )


_PortClrButton_Type.__name__ = "Integer32"
_PortClrButton_Object = MibTableColumn
portClrButton = _PortClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 32),
    _PortClrButton_Type()
)
portClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portClrButton.setStatus("mandatory")
_RcvFramesDiscNoChan_Type = Counter32
_RcvFramesDiscNoChan_Object = MibTableColumn
rcvFramesDiscNoChan = _RcvFramesDiscNoChan_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 33),
    _RcvFramesDiscNoChan_Type()
)
rcvFramesDiscNoChan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesDiscNoChan.setStatus("mandatory")
_RcvFramesDiscOverrun_Type = Counter32
_RcvFramesDiscOverrun_Object = MibTableColumn
rcvFramesDiscOverrun = _RcvFramesDiscOverrun_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 1, 1, 1, 34),
    _RcvFramesDiscOverrun_Type()
)
rcvFramesDiscOverrun.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesDiscOverrun.setStatus("mandatory")
_FrPortCntSigLMIGrp_ObjectIdentity = ObjectIdentity
frPortCntSigLMIGrp = _FrPortCntSigLMIGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1)
)
_FrPortCntSigLMIGrpTable_Object = MibTable
frPortCntSigLMIGrpTable = _FrPortCntSigLMIGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1)
)
if mibBuilder.loadTexts:
    frPortCntSigLMIGrpTable.setStatus("mandatory")
_FrPortCntSigLMIGrpEntry_Object = MibTableRow
frPortCntSigLMIGrpEntry = _FrPortCntSigLMIGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1)
)
frPortCntSigLMIGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "lmiSigPortNum"),
)
if mibBuilder.loadTexts:
    frPortCntSigLMIGrpEntry.setStatus("mandatory")
_LmiSigPortNum_Type = Integer32
_LmiSigPortNum_Object = MibTableColumn
lmiSigPortNum = _LmiSigPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 1),
    _LmiSigPortNum_Type()
)
lmiSigPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiSigPortNum.setStatus("mandatory")
_RcvStatusInquiry_Type = Counter32
_RcvStatusInquiry_Object = MibTableColumn
rcvStatusInquiry = _RcvStatusInquiry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 2),
    _RcvStatusInquiry_Type()
)
rcvStatusInquiry.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvStatusInquiry.setStatus("mandatory")
_RcvInvalidRequest_Type = Counter32
_RcvInvalidRequest_Object = MibTableColumn
rcvInvalidRequest = _RcvInvalidRequest_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 3),
    _RcvInvalidRequest_Type()
)
rcvInvalidRequest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvInvalidRequest.setStatus("mandatory")
_RcvUNISeqMismatch_Type = Counter32
_RcvUNISeqMismatch_Object = MibTableColumn
rcvUNISeqMismatch = _RcvUNISeqMismatch_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 4),
    _RcvUNISeqMismatch_Type()
)
rcvUNISeqMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvUNISeqMismatch.setStatus("mandatory")
_XmtStatus_Type = Counter32
_XmtStatus_Object = MibTableColumn
xmtStatus = _XmtStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 5),
    _XmtStatus_Type()
)
xmtStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtStatus.setStatus("mandatory")
_XmtAsynchUpdate_Type = Counter32
_XmtAsynchUpdate_Object = MibTableColumn
xmtAsynchUpdate = _XmtAsynchUpdate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 6),
    _XmtAsynchUpdate_Type()
)
xmtAsynchUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtAsynchUpdate.setStatus("mandatory")
_UniSignalingTimeout_Type = Counter32
_UniSignalingTimeout_Object = MibTableColumn
uniSignalingTimeout = _UniSignalingTimeout_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 7),
    _UniSignalingTimeout_Type()
)
uniSignalingTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uniSignalingTimeout.setStatus("mandatory")
_XmtStatusInquiry_Type = Counter32
_XmtStatusInquiry_Object = MibTableColumn
xmtStatusInquiry = _XmtStatusInquiry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 8),
    _XmtStatusInquiry_Type()
)
xmtStatusInquiry.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtStatusInquiry.setStatus("mandatory")
_RcvStatus_Type = Counter32
_RcvStatus_Object = MibTableColumn
rcvStatus = _RcvStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 9),
    _RcvStatus_Type()
)
rcvStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvStatus.setStatus("mandatory")
_RcvAsynchUpdate_Type = Counter32
_RcvAsynchUpdate_Object = MibTableColumn
rcvAsynchUpdate = _RcvAsynchUpdate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 10),
    _RcvAsynchUpdate_Type()
)
rcvAsynchUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvAsynchUpdate.setStatus("mandatory")
_RcvNNISeqMismatch_Type = Counter32
_RcvNNISeqMismatch_Object = MibTableColumn
rcvNNISeqMismatch = _RcvNNISeqMismatch_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 11),
    _RcvNNISeqMismatch_Type()
)
rcvNNISeqMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvNNISeqMismatch.setStatus("mandatory")
_NniSignalingTimeout_Type = Counter32
_NniSignalingTimeout_Object = MibTableColumn
nniSignalingTimeout = _NniSignalingTimeout_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 12),
    _NniSignalingTimeout_Type()
)
nniSignalingTimeout.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nniSignalingTimeout.setStatus("mandatory")
_FrPortCntSigCLLMGrp_ObjectIdentity = ObjectIdentity
frPortCntSigCLLMGrp = _FrPortCntSigCLLMGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2)
)
_FrPortCntSigCLLMGrpTable_Object = MibTable
frPortCntSigCLLMGrpTable = _FrPortCntSigCLLMGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1)
)
if mibBuilder.loadTexts:
    frPortCntSigCLLMGrpTable.setStatus("mandatory")
_FrPortCntSigCLLMGrpEntry_Object = MibTableRow
frPortCntSigCLLMGrpEntry = _FrPortCntSigCLLMGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1)
)
frPortCntSigCLLMGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "cllmSigPortNum"),
)
if mibBuilder.loadTexts:
    frPortCntSigCLLMGrpEntry.setStatus("mandatory")
_CllmSigPortNum_Type = Integer32
_CllmSigPortNum_Object = MibTableColumn
cllmSigPortNum = _CllmSigPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 1),
    _CllmSigPortNum_Type()
)
cllmSigPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cllmSigPortNum.setStatus("mandatory")
_RcvFramesCLLM_Type = Counter32
_RcvFramesCLLM_Object = MibTableColumn
rcvFramesCLLM = _RcvFramesCLLM_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 2),
    _RcvFramesCLLM_Type()
)
rcvFramesCLLM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesCLLM.setStatus("mandatory")
_RcvBytesCLLM_Type = Counter32
_RcvBytesCLLM_Object = MibTableColumn
rcvBytesCLLM = _RcvBytesCLLM_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 3),
    _RcvBytesCLLM_Type()
)
rcvBytesCLLM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvBytesCLLM.setStatus("mandatory")
_XmtFramesCLLM_Type = Counter32
_XmtFramesCLLM_Object = MibTableColumn
xmtFramesCLLM = _XmtFramesCLLM_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 4),
    _XmtFramesCLLM_Type()
)
xmtFramesCLLM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesCLLM.setStatus("mandatory")
_XmtBytesCLLM_Type = Counter32
_XmtBytesCLLM_Object = MibTableColumn
xmtBytesCLLM = _XmtBytesCLLM_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 5),
    _XmtBytesCLLM_Type()
)
xmtBytesCLLM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtBytesCLLM.setStatus("mandatory")
_CllmFailures_Type = Counter32
_CllmFailures_Object = MibTableColumn
cllmFailures = _CllmFailures_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 6),
    _CllmFailures_Type()
)
cllmFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cllmFailures.setStatus("mandatory")
_FrPortStateGrp_ObjectIdentity = ObjectIdentity
frPortStateGrp = _FrPortStateGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3)
)
_FrPortStateGrpTable_Object = MibTable
frPortStateGrpTable = _FrPortStateGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1)
)
if mibBuilder.loadTexts:
    frPortStateGrpTable.setStatus("mandatory")
_FrPortStateGrpEntry_Object = MibTableRow
frPortStateGrpEntry = _FrPortStateGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1)
)
frPortStateGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "statePortNum"),
)
if mibBuilder.loadTexts:
    frPortStateGrpEntry.setStatus("mandatory")
_StatePortNum_Type = Integer32
_StatePortNum_Object = MibTableColumn
statePortNum = _StatePortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 1),
    _StatePortNum_Type()
)
statePortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    statePortNum.setStatus("mandatory")


class _PortState_Type(Integer32):
    """Custom type portState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("failedDueToLine", 4),
          ("failedDueToSignalling", 5),
          ("farEndRemoteLoopback", 8),
          ("inBert", 7),
          ("inactive", 6),
          ("latchCsuFeLoop", 12),
          ("latchDS0DropFeLoop", 9),
          ("latchDS0LineFeLoop", 10),
          ("latchDsuFeLoop", 13),
          ("latchHL96FeLoop", 14),
          ("latchOcuFeLoop", 11),
          ("notConfigured", 1),
          ("remoteLoopback", 3),
          ("v54PolynomialFeLoop", 15))
    )


_PortState_Type.__name__ = "Integer32"
_PortState_Object = MibTableColumn
portState = _PortState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 2),
    _PortState_Type()
)
portState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portState.setStatus("mandatory")


class _PortSignallingState_Type(Integer32):
    """Custom type portSignallingState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PortSignallingState_Type.__name__ = "Integer32"
_PortSignallingState_Object = MibTableColumn
portSignallingState = _PortSignallingState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 3),
    _PortSignallingState_Type()
)
portSignallingState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portSignallingState.setStatus("mandatory")


class _PortOversubscribed_Type(Integer32):
    """Custom type portOversubscribed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_PortOversubscribed_Type.__name__ = "Integer32"
_PortOversubscribed_Object = MibTableColumn
portOversubscribed = _PortOversubscribed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 4),
    _PortOversubscribed_Type()
)
portOversubscribed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portOversubscribed.setStatus("mandatory")


class _PortIngrPercentUtil_Type(Integer32):
    """Custom type portIngrPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_PortIngrPercentUtil_Type.__name__ = "Integer32"
_PortIngrPercentUtil_Object = MibTableColumn
portIngrPercentUtil = _PortIngrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 5),
    _PortIngrPercentUtil_Type()
)
portIngrPercentUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portIngrPercentUtil.setStatus("mandatory")


class _PortEgrPercentUtil_Type(Integer32):
    """Custom type portEgrPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_PortEgrPercentUtil_Type.__name__ = "Integer32"
_PortEgrPercentUtil_Object = MibTableColumn
portEgrPercentUtil = _PortEgrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 3, 1, 1, 6),
    _PortEgrPercentUtil_Type()
)
portEgrPercentUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portEgrPercentUtil.setStatus("mandatory")
_FrChanCnfGrp_ObjectIdentity = ObjectIdentity
frChanCnfGrp = _FrChanCnfGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1)
)
_FrChanCnfGrpTable_Object = MibTable
frChanCnfGrpTable = _FrChanCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1)
)
if mibBuilder.loadTexts:
    frChanCnfGrpTable.setStatus("mandatory")
_FrChanCnfGrpEntry_Object = MibTableRow
frChanCnfGrpEntry = _FrChanCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1)
)
frChanCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "chanNum"),
)
if mibBuilder.loadTexts:
    frChanCnfGrpEntry.setStatus("mandatory")
_ChanNum_Type = Integer32
_ChanNum_Object = MibTableColumn
chanNum = _ChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 1),
    _ChanNum_Type()
)
chanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanNum.setStatus("mandatory")


class _ChanRowStatus_Type(Integer32):
    """Custom type chanRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3),
          ("outOfService", 4))
    )


_ChanRowStatus_Type.__name__ = "Integer32"
_ChanRowStatus_Object = MibTableColumn
chanRowStatus = _ChanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 2),
    _ChanRowStatus_Type()
)
chanRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanRowStatus.setStatus("mandatory")
_ChanPortNum_Type = Integer32
_ChanPortNum_Object = MibTableColumn
chanPortNum = _ChanPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 3),
    _ChanPortNum_Type()
)
chanPortNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanPortNum.setStatus("mandatory")


class _DLCI_Type(Integer32):
    """Custom type dLCI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8388607),
    )


_DLCI_Type.__name__ = "Integer32"
_DLCI_Object = MibTableColumn
dLCI = _DLCI_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 4),
    _DLCI_Type()
)
dLCI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dLCI.setStatus("mandatory")


class _EgressQSelect_Type(Integer32):
    """Custom type egressQSelect based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("highPriority", 1),
          ("lowPriority", 2),
          ("notSupported", 3))
    )


_EgressQSelect_Type.__name__ = "Integer32"
_EgressQSelect_Object = MibTableColumn
egressQSelect = _EgressQSelect_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 5),
    _EgressQSelect_Type()
)
egressQSelect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egressQSelect.setStatus("mandatory")


class _IngressQDepth_Type(Integer32):
    """Custom type ingressQDepth based on Integer32"""
    defaultValue = 65535

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4510, 2097151),
    )


_IngressQDepth_Type.__name__ = "Integer32"
_IngressQDepth_Object = MibTableColumn
ingressQDepth = _IngressQDepth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 6),
    _IngressQDepth_Type()
)
ingressQDepth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingressQDepth.setStatus("mandatory")


class _IngressQECNThresh_Type(Integer32):
    """Custom type ingressQECNThresh based on Integer32"""
    defaultValue = 6553

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097151),
    )


_IngressQECNThresh_Type.__name__ = "Integer32"
_IngressQECNThresh_Object = MibTableColumn
ingressQECNThresh = _IngressQECNThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 7),
    _IngressQECNThresh_Type()
)
ingressQECNThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingressQECNThresh.setStatus("mandatory")


class _IngressQDEThresh_Type(Integer32):
    """Custom type ingressQDEThresh based on Integer32"""
    defaultValue = 32767

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097151),
    )


_IngressQDEThresh_Type.__name__ = "Integer32"
_IngressQDEThresh_Object = MibTableColumn
ingressQDEThresh = _IngressQDEThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 8),
    _IngressQDEThresh_Type()
)
ingressQDEThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingressQDEThresh.setStatus("mandatory")


class _EgressQDepth_Type(Integer32):
    """Custom type egressQDepth based on Integer32"""
    defaultValue = 65535

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097151),
    )


_EgressQDepth_Type.__name__ = "Integer32"
_EgressQDepth_Object = MibTableColumn
egressQDepth = _EgressQDepth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 9),
    _EgressQDepth_Type()
)
egressQDepth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egressQDepth.setStatus("mandatory")


class _EgressQDEThresh_Type(Integer32):
    """Custom type egressQDEThresh based on Integer32"""
    defaultValue = 32767

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097151),
    )


_EgressQDEThresh_Type.__name__ = "Integer32"
_EgressQDEThresh_Object = MibTableColumn
egressQDEThresh = _EgressQDEThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 10),
    _EgressQDEThresh_Type()
)
egressQDEThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egressQDEThresh.setStatus("mandatory")


class _EgressQECNThresh_Type(Integer32):
    """Custom type egressQECNThresh based on Integer32"""
    defaultValue = 6553

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097151),
    )


_EgressQECNThresh_Type.__name__ = "Integer32"
_EgressQECNThresh_Object = MibTableColumn
egressQECNThresh = _EgressQECNThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 11),
    _EgressQECNThresh_Type()
)
egressQECNThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egressQECNThresh.setStatus("mandatory")


class _DeTaggingEnable_Type(Integer32):
    """Custom type deTaggingEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_DeTaggingEnable_Type.__name__ = "Integer32"
_DeTaggingEnable_Object = MibTableColumn
deTaggingEnable = _DeTaggingEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 12),
    _DeTaggingEnable_Type()
)
deTaggingEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    deTaggingEnable.setStatus("mandatory")


class _Cir_Type(Integer32):
    """Custom type cir based on Integer32"""
    defaultValue = 2400

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 52000000),
    )


_Cir_Type.__name__ = "Integer32"
_Cir_Object = MibTableColumn
cir = _Cir_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 13),
    _Cir_Type()
)
cir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cir.setStatus("mandatory")


class _Bc_Type(Integer32):
    """Custom type bc based on Integer32"""
    defaultValue = 5100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097151),
    )


_Bc_Type.__name__ = "Integer32"
_Bc_Object = MibTableColumn
bc = _Bc_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 14),
    _Bc_Type()
)
bc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bc.setStatus("mandatory")


class _Be_Type(Integer32):
    """Custom type be based on Integer32"""
    defaultValue = 5100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097151),
    )


_Be_Type.__name__ = "Integer32"
_Be_Object = MibTableColumn
be = _Be_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 15),
    _Be_Type()
)
be.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    be.setStatus("mandatory")


class _Ibs_Type(Integer32):
    """Custom type ibs based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2097151),
    )


_Ibs_Type.__name__ = "Integer32"
_Ibs_Object = MibTableColumn
ibs = _Ibs_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 16),
    _Ibs_Type()
)
ibs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ibs.setStatus("mandatory")


class _ForeSightEnable_Type(Integer32):
    """Custom type foreSightEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_ForeSightEnable_Type.__name__ = "Integer32"
_ForeSightEnable_Object = MibTableColumn
foreSightEnable = _ForeSightEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 17),
    _ForeSightEnable_Type()
)
foreSightEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    foreSightEnable.setStatus("mandatory")


class _Qir_Type(Integer32):
    """Custom type qir based on Integer32"""
    defaultValue = 160

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(160, 6400000),
    )


_Qir_Type.__name__ = "Integer32"
_Qir_Object = MibTableColumn
qir = _Qir_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 18),
    _Qir_Type()
)
qir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qir.setStatus("mandatory")


class _Mir_Type(Integer32):
    """Custom type mir based on Integer32"""
    defaultValue = 160

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(160, 6400000),
    )


_Mir_Type.__name__ = "Integer32"
_Mir_Object = MibTableColumn
mir = _Mir_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 19),
    _Mir_Type()
)
mir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mir.setStatus("mandatory")


class _Pir_Type(Integer32):
    """Custom type pir based on Integer32"""
    defaultValue = 160

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(160, 6400000),
    )


_Pir_Type.__name__ = "Integer32"
_Pir_Object = MibTableColumn
pir = _Pir_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 20),
    _Pir_Type()
)
pir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pir.setStatus("mandatory")


class _ChanLocRmtLpbkState_Type(Integer32):
    """Custom type chanLocRmtLpbkState based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_ChanLocRmtLpbkState_Type.__name__ = "Integer32"
_ChanLocRmtLpbkState_Object = MibTableColumn
chanLocRmtLpbkState = _ChanLocRmtLpbkState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 21),
    _ChanLocRmtLpbkState_Type()
)
chanLocRmtLpbkState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanLocRmtLpbkState.setStatus("mandatory")


class _ChanTestType_Type(Integer32):
    """Custom type chanTestType based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notest", 3),
          ("testcon", 1),
          ("testdelay", 2))
    )


_ChanTestType_Type.__name__ = "Integer32"
_ChanTestType_Object = MibTableColumn
chanTestType = _ChanTestType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 22),
    _ChanTestType_Type()
)
chanTestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanTestType.setStatus("mandatory")


class _ChanTestState_Type(Integer32):
    """Custom type chanTestState based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notinprogress", 4),
          ("passed", 1))
    )


_ChanTestState_Type.__name__ = "Integer32"
_ChanTestState_Object = MibTableColumn
chanTestState = _ChanTestState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 23),
    _ChanTestState_Type()
)
chanTestState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanTestState.setStatus("mandatory")


class _ChanRTDResult_Type(Integer32):
    """Custom type chanRTDResult based on Integer32"""
    defaultValue = 65535

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_ChanRTDResult_Type.__name__ = "Integer32"
_ChanRTDResult_Object = MibTableColumn
chanRTDResult = _ChanRTDResult_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 24),
    _ChanRTDResult_Type()
)
chanRTDResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanRTDResult.setStatus("mandatory")


class _ChanType_Type(Integer32):
    """Custom type chanType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("frFUNI", 4),
          ("frForward", 5),
          ("frNIW", 1),
          ("frNIWReplace", 6),
          ("frSIW-translate", 3),
          ("frSIW-transparent", 2))
    )


_ChanType_Type.__name__ = "Integer32"
_ChanType_Object = MibTableColumn
chanType = _ChanType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 25),
    _ChanType_Type()
)
chanType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanType.setStatus("mandatory")


class _ChanFECNconfig_Type(Integer32):
    """Custom type chanFECNconfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mapEFCI", 1),
          ("setEFCIzero", 2))
    )


_ChanFECNconfig_Type.__name__ = "Integer32"
_ChanFECNconfig_Object = MibTableColumn
chanFECNconfig = _ChanFECNconfig_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 26),
    _ChanFECNconfig_Type()
)
chanFECNconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanFECNconfig.setStatus("mandatory")


class _ChanDEtoCLPmap_Type(Integer32):
    """Custom type chanDEtoCLPmap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mapCLP", 1),
          ("setCLPone", 3),
          ("setCLPzero", 2))
    )


_ChanDEtoCLPmap_Type.__name__ = "Integer32"
_ChanDEtoCLPmap_Object = MibTableColumn
chanDEtoCLPmap = _ChanDEtoCLPmap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 27),
    _ChanDEtoCLPmap_Type()
)
chanDEtoCLPmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanDEtoCLPmap.setStatus("mandatory")


class _ChanCLPtoDEmap_Type(Integer32):
    """Custom type chanCLPtoDEmap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ignoreCLP", 4),
          ("mapDE", 1),
          ("setDEone", 3),
          ("setDEzero", 2))
    )


_ChanCLPtoDEmap_Type.__name__ = "Integer32"
_ChanCLPtoDEmap_Object = MibTableColumn
chanCLPtoDEmap = _ChanCLPtoDEmap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 28),
    _ChanCLPtoDEmap_Type()
)
chanCLPtoDEmap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanCLPtoDEmap.setStatus("mandatory")


class _ChanIngrPercentUtil_Type(Integer32):
    """Custom type chanIngrPercentUtil based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_ChanIngrPercentUtil_Type.__name__ = "Integer32"
_ChanIngrPercentUtil_Object = MibTableColumn
chanIngrPercentUtil = _ChanIngrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 29),
    _ChanIngrPercentUtil_Type()
)
chanIngrPercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanIngrPercentUtil.setStatus("mandatory")


class _ChanEgrPercentUtil_Type(Integer32):
    """Custom type chanEgrPercentUtil based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_ChanEgrPercentUtil_Type.__name__ = "Integer32"
_ChanEgrPercentUtil_Object = MibTableColumn
chanEgrPercentUtil = _ChanEgrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 30),
    _ChanEgrPercentUtil_Type()
)
chanEgrPercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanEgrPercentUtil.setStatus("mandatory")


class _ChanEgrSrvRate_Type(Integer32):
    """Custom type chanEgrSrvRate based on Integer32"""
    defaultValue = 2400

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2400, 52000000),
    )


_ChanEgrSrvRate_Type.__name__ = "Integer32"
_ChanEgrSrvRate_Object = MibTableColumn
chanEgrSrvRate = _ChanEgrSrvRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 31),
    _ChanEgrSrvRate_Type()
)
chanEgrSrvRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanEgrSrvRate.setStatus("mandatory")


class _ChanOvrSubOvrRide_Type(Integer32):
    """Custom type chanOvrSubOvrRide based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_ChanOvrSubOvrRide_Type.__name__ = "Integer32"
_ChanOvrSubOvrRide_Object = MibTableColumn
chanOvrSubOvrRide = _ChanOvrSubOvrRide_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 32),
    _ChanOvrSubOvrRide_Type()
)
chanOvrSubOvrRide.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanOvrSubOvrRide.setStatus("mandatory")


class _ChanFrConnType_Type(Integer32):
    """Custom type chanFrConnType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("par", 4),
          ("pnni", 5),
          ("pvc", 1),
          ("spvc", 3),
          ("svc", 2),
          ("tag", 6))
    )


_ChanFrConnType_Type.__name__ = "Integer32"
_ChanFrConnType_Object = MibTableColumn
chanFrConnType = _ChanFrConnType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 33),
    _ChanFrConnType_Type()
)
chanFrConnType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanFrConnType.setStatus("mandatory")
_FrCDRNumber_Type = Integer32
_FrCDRNumber_Object = MibTableColumn
frCDRNumber = _FrCDRNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 34),
    _FrCDRNumber_Type()
)
frCDRNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frCDRNumber.setStatus("mandatory")


class _FrLocalVpi_Type(Integer32):
    """Custom type frLocalVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FrLocalVpi_Type.__name__ = "Integer32"
_FrLocalVpi_Object = MibTableColumn
frLocalVpi = _FrLocalVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 35),
    _FrLocalVpi_Type()
)
frLocalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frLocalVpi.setStatus("mandatory")


class _FrLocalVci_Type(Integer32):
    """Custom type frLocalVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FrLocalVci_Type.__name__ = "Integer32"
_FrLocalVci_Object = MibTableColumn
frLocalVci = _FrLocalVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 36),
    _FrLocalVci_Type()
)
frLocalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frLocalVci.setStatus("mandatory")


class _FrLocalNSAP_Type(OctetString):
    """Custom type frLocalNSAP based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_FrLocalNSAP_Type.__name__ = "OctetString"
_FrLocalNSAP_Object = MibTableColumn
frLocalNSAP = _FrLocalNSAP_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 37),
    _FrLocalNSAP_Type()
)
frLocalNSAP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frLocalNSAP.setStatus("mandatory")


class _FrRemoteVpi_Type(Integer32):
    """Custom type frRemoteVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FrRemoteVpi_Type.__name__ = "Integer32"
_FrRemoteVpi_Object = MibTableColumn
frRemoteVpi = _FrRemoteVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 38),
    _FrRemoteVpi_Type()
)
frRemoteVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frRemoteVpi.setStatus("mandatory")


class _FrRemoteVci_Type(Integer32):
    """Custom type frRemoteVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FrRemoteVci_Type.__name__ = "Integer32"
_FrRemoteVci_Object = MibTableColumn
frRemoteVci = _FrRemoteVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 39),
    _FrRemoteVci_Type()
)
frRemoteVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frRemoteVci.setStatus("mandatory")


class _FrRemoteNSAP_Type(OctetString):
    """Custom type frRemoteNSAP based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_FrRemoteNSAP_Type.__name__ = "OctetString"
_FrRemoteNSAP_Object = MibTableColumn
frRemoteNSAP = _FrRemoteNSAP_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 40),
    _FrRemoteNSAP_Type()
)
frRemoteNSAP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frRemoteNSAP.setStatus("mandatory")


class _FrMastership_Type(Integer32):
    """Custom type frMastership based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("master", 1),
          ("slave", 2),
          ("unknown", 3))
    )


_FrMastership_Type.__name__ = "Integer32"
_FrMastership_Object = MibTableColumn
frMastership = _FrMastership_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 41),
    _FrMastership_Type()
)
frMastership.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frMastership.setStatus("mandatory")


class _FrVpcFlag_Type(Integer32):
    """Custom type frVpcFlag based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vcc", 2),
          ("vpc", 1))
    )


_FrVpcFlag_Type.__name__ = "Integer32"
_FrVpcFlag_Object = MibTableColumn
frVpcFlag = _FrVpcFlag_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 42),
    _FrVpcFlag_Type()
)
frVpcFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frVpcFlag.setStatus("mandatory")


class _FrConnServiceType_Type(Integer32):
    """Custom type frConnServiceType based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32)
        )
    )
    namedValues = NamedValues(
        *(("abrfst", 7),
          ("abrstd", 6),
          ("atfr", 5),
          ("cbr", 1),
          ("cbr1", 21),
          ("cbr2", 31),
          ("cbr3", 32),
          ("notUsed", 3),
          ("stdabr", 30),
          ("ubr", 4),
          ("ubr1", 28),
          ("ubr2", 29),
          ("vbr", 2),
          ("vbr1nrt", 25),
          ("vbr1rt", 22),
          ("vbr2nrt", 26),
          ("vbr2rt", 23),
          ("vbr3nrt", 27),
          ("vbr3rt", 24),
          ("vbrrt", 8))
    )


_FrConnServiceType_Type.__name__ = "Integer32"
_FrConnServiceType_Object = MibTableColumn
frConnServiceType = _FrConnServiceType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 43),
    _FrConnServiceType_Type()
)
frConnServiceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnServiceType.setStatus("mandatory")


class _FrRoutingPriority_Type(Integer32):
    """Custom type frRoutingPriority based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FrRoutingPriority_Type.__name__ = "Integer32"
_FrRoutingPriority_Object = MibTableColumn
frRoutingPriority = _FrRoutingPriority_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 44),
    _FrRoutingPriority_Type()
)
frRoutingPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frRoutingPriority.setStatus("mandatory")


class _FrMaxCost_Type(Integer32):
    """Custom type frMaxCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_FrMaxCost_Type.__name__ = "Integer32"
_FrMaxCost_Object = MibTableColumn
frMaxCost = _FrMaxCost_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 45),
    _FrMaxCost_Type()
)
frMaxCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frMaxCost.setStatus("mandatory")


class _FrRestrictTrunkType_Type(Integer32):
    """Custom type frRestrictTrunkType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("norestriction", 1),
          ("sateliteTrunk", 3),
          ("terrestrialTrunk", 2))
    )


_FrRestrictTrunkType_Type.__name__ = "Integer32"
_FrRestrictTrunkType_Object = MibTableColumn
frRestrictTrunkType = _FrRestrictTrunkType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 46),
    _FrRestrictTrunkType_Type()
)
frRestrictTrunkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frRestrictTrunkType.setStatus("mandatory")
_FrConnPCR_Type = Integer32
_FrConnPCR_Object = MibTableColumn
frConnPCR = _FrConnPCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 47),
    _FrConnPCR_Type()
)
frConnPCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnPCR.setStatus("mandatory")
_FrConnRemotePCR_Type = Integer32
_FrConnRemotePCR_Object = MibTableColumn
frConnRemotePCR = _FrConnRemotePCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 48),
    _FrConnRemotePCR_Type()
)
frConnRemotePCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnRemotePCR.setStatus("mandatory")
_FrConnMCR_Type = Integer32
_FrConnMCR_Object = MibTableColumn
frConnMCR = _FrConnMCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 49),
    _FrConnMCR_Type()
)
frConnMCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnMCR.setStatus("mandatory")
_FrConnRemoteMCR_Type = Integer32
_FrConnRemoteMCR_Object = MibTableColumn
frConnRemoteMCR = _FrConnRemoteMCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 50),
    _FrConnRemoteMCR_Type()
)
frConnRemoteMCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnRemoteMCR.setStatus("mandatory")


class _FrConnPercentUtil_Type(Integer32):
    """Custom type frConnPercentUtil based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FrConnPercentUtil_Type.__name__ = "Integer32"
_FrConnPercentUtil_Object = MibTableColumn
frConnPercentUtil = _FrConnPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 51),
    _FrConnPercentUtil_Type()
)
frConnPercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnPercentUtil.setStatus("mandatory")


class _FrConnRemotePercentUtil_Type(Integer32):
    """Custom type frConnRemotePercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FrConnRemotePercentUtil_Type.__name__ = "Integer32"
_FrConnRemotePercentUtil_Object = MibTableColumn
frConnRemotePercentUtil = _FrConnRemotePercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 52),
    _FrConnRemotePercentUtil_Type()
)
frConnRemotePercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnRemotePercentUtil.setStatus("mandatory")


class _FrConnForeSightEnable_Type(Integer32):
    """Custom type frConnForeSightEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_FrConnForeSightEnable_Type.__name__ = "Integer32"
_FrConnForeSightEnable_Object = MibTableColumn
frConnForeSightEnable = _FrConnForeSightEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 53),
    _FrConnForeSightEnable_Type()
)
frConnForeSightEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnForeSightEnable.setStatus("mandatory")


class _FrConnFGCRAEnable_Type(Integer32):
    """Custom type frConnFGCRAEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_FrConnFGCRAEnable_Type.__name__ = "Integer32"
_FrConnFGCRAEnable_Object = MibTableColumn
frConnFGCRAEnable = _FrConnFGCRAEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 54),
    _FrConnFGCRAEnable_Type()
)
frConnFGCRAEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnFGCRAEnable.setStatus("mandatory")


class _ChanServType_Type(Integer32):
    """Custom type chanServType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("aBR", 4),
          ("highpriority", 1),
          ("nrtVBR", 3),
          ("queue6", 6),
          ("queue7", 7),
          ("queue8", 8),
          ("rtVBR", 2),
          ("stdABR", 9),
          ("uBR", 5))
    )


_ChanServType_Type.__name__ = "Integer32"
_ChanServType_Object = MibTableColumn
chanServType = _ChanServType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 55),
    _ChanServType_Type()
)
chanServType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanServType.setStatus("mandatory")


class _ChanServiceRateOverride_Type(Integer32):
    """Custom type chanServiceRateOverride based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_ChanServiceRateOverride_Type.__name__ = "Integer32"
_ChanServiceRateOverride_Object = MibTableColumn
chanServiceRateOverride = _ChanServiceRateOverride_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 56),
    _ChanServiceRateOverride_Type()
)
chanServiceRateOverride.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanServiceRateOverride.setStatus("mandatory")


class _ChanServiceRate_Type(Integer32):
    """Custom type chanServiceRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(160, 6400000),
    )


_ChanServiceRate_Type.__name__ = "Integer32"
_ChanServiceRate_Object = MibTableColumn
chanServiceRate = _ChanServiceRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 57),
    _ChanServiceRate_Type()
)
chanServiceRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanServiceRate.setStatus("mandatory")


class _ZeroCirConEir_Type(Integer32):
    """Custom type zeroCirConEir based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 52000000),
    )


_ZeroCirConEir_Type.__name__ = "Integer32"
_ZeroCirConEir_Object = MibTableColumn
zeroCirConEir = _ZeroCirConEir_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 58),
    _ZeroCirConEir_Type()
)
zeroCirConEir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    zeroCirConEir.setStatus("mandatory")


class _ChanReroute_Type(Integer32):
    """Custom type chanReroute based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 2),
          ("true", 1))
    )


_ChanReroute_Type.__name__ = "Integer32"
_ChanReroute_Object = MibTableColumn
chanReroute = _ChanReroute_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 59),
    _ChanReroute_Type()
)
chanReroute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanReroute.setStatus("mandatory")
_FrConnSCR_Type = Integer32
_FrConnSCR_Object = MibTableColumn
frConnSCR = _FrConnSCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 60),
    _FrConnSCR_Type()
)
frConnSCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnSCR.setStatus("mandatory")
_FrConnRemoteSCR_Type = Integer32
_FrConnRemoteSCR_Object = MibTableColumn
frConnRemoteSCR = _FrConnRemoteSCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 61),
    _FrConnRemoteSCR_Type()
)
frConnRemoteSCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnRemoteSCR.setStatus("mandatory")


class _FrConnTemplateId_Type(Integer32):
    """Custom type frConnTemplateId based on Integer32"""
    defaultValue = 17

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 17),
    )


_FrConnTemplateId_Type.__name__ = "Integer32"
_FrConnTemplateId_Object = MibTableColumn
frConnTemplateId = _FrConnTemplateId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 62),
    _FrConnTemplateId_Type()
)
frConnTemplateId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnTemplateId.setStatus("mandatory")


class _FrConnAdminStatus_Type(Integer32):
    """Custom type frConnAdminStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_FrConnAdminStatus_Type.__name__ = "Integer32"
_FrConnAdminStatus_Object = MibTableColumn
frConnAdminStatus = _FrConnAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 63),
    _FrConnAdminStatus_Type()
)
frConnAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnAdminStatus.setStatus("mandatory")
_FrChanCnfChangeCount_Type = Counter32
_FrChanCnfChangeCount_Object = MibTableColumn
frChanCnfChangeCount = _FrChanCnfChangeCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 64),
    _FrChanCnfChangeCount_Type()
)
frChanCnfChangeCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frChanCnfChangeCount.setStatus("mandatory")


class _FrChanCnfIgnoreIncomingDE_Type(Integer32):
    """Custom type frChanCnfIgnoreIncomingDE based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_FrChanCnfIgnoreIncomingDE_Type.__name__ = "Integer32"
_FrChanCnfIgnoreIncomingDE_Object = MibTableColumn
frChanCnfIgnoreIncomingDE = _FrChanCnfIgnoreIncomingDE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 65),
    _FrChanCnfIgnoreIncomingDE_Type()
)
frChanCnfIgnoreIncomingDE.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frChanCnfIgnoreIncomingDE.setStatus("mandatory")


class _FrChanOamCCEnable_Type(Integer32):
    """Custom type frChanOamCCEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_FrChanOamCCEnable_Type.__name__ = "Integer32"
_FrChanOamCCEnable_Object = MibTableColumn
frChanOamCCEnable = _FrChanOamCCEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 66),
    _FrChanOamCCEnable_Type()
)
frChanOamCCEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frChanOamCCEnable.setStatus("mandatory")


class _FrChanStatsEnable_Type(Integer32):
    """Custom type frChanStatsEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_FrChanStatsEnable_Type.__name__ = "Integer32"
_FrChanStatsEnable_Object = MibTableColumn
frChanStatsEnable = _FrChanStatsEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 67),
    _FrChanStatsEnable_Type()
)
frChanStatsEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frChanStatsEnable.setStatus("mandatory")


class _FrChanLocalLpbkEnable_Type(Integer32):
    """Custom type frChanLocalLpbkEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_FrChanLocalLpbkEnable_Type.__name__ = "Integer32"
_FrChanLocalLpbkEnable_Object = MibTableColumn
frChanLocalLpbkEnable = _FrChanLocalLpbkEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 68),
    _FrChanLocalLpbkEnable_Type()
)
frChanLocalLpbkEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frChanLocalLpbkEnable.setStatus("mandatory")


class _FrChanUpcEnable_Type(Integer32):
    """Custom type frChanUpcEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_FrChanUpcEnable_Type.__name__ = "Integer32"
_FrChanUpcEnable_Object = MibTableColumn
frChanUpcEnable = _FrChanUpcEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 69),
    _FrChanUpcEnable_Type()
)
frChanUpcEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frChanUpcEnable.setStatus("mandatory")


class _FrChanSlaveType_Type(Integer32):
    """Custom type frChanSlaveType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nonPersistentSlave", 2),
          ("persistentSlave", 1))
    )


_FrChanSlaveType_Type.__name__ = "Integer32"
_FrChanSlaveType_Object = MibTableColumn
frChanSlaveType = _FrChanSlaveType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 70),
    _FrChanSlaveType_Type()
)
frChanSlaveType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frChanSlaveType.setStatus("mandatory")


class _FrConnRemoteMBS_Type(Integer32):
    """Custom type frConnRemoteMBS based on Integer32"""
    defaultValue = 1024

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5000000),
    )


_FrConnRemoteMBS_Type.__name__ = "Integer32"
_FrConnRemoteMBS_Object = MibTableColumn
frConnRemoteMBS = _FrConnRemoteMBS_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 1, 1, 71),
    _FrConnRemoteMBS_Type()
)
frConnRemoteMBS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frConnRemoteMBS.setStatus("mandatory")


class _ChanNumNextAvailable_Type(Integer32):
    """Custom type chanNumNextAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 4015),
    )


_ChanNumNextAvailable_Type.__name__ = "Integer32"
_ChanNumNextAvailable_Object = MibScalar
chanNumNextAvailable = _ChanNumNextAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 2),
    _ChanNumNextAvailable_Type()
)
chanNumNextAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanNumNextAvailable.setStatus("mandatory")
_FrstdABRCnfGrpTable_Object = MibTable
frstdABRCnfGrpTable = _FrstdABRCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3)
)
if mibBuilder.loadTexts:
    frstdABRCnfGrpTable.setStatus("mandatory")
_FrstdABRCnfGrpEntry_Object = MibTableRow
frstdABRCnfGrpEntry = _FrstdABRCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1)
)
frstdABRCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "frstdABRcnfChanNum"),
)
if mibBuilder.loadTexts:
    frstdABRCnfGrpEntry.setStatus("mandatory")
_FrstdABRcnfChanNum_Type = Integer32
_FrstdABRcnfChanNum_Object = MibTableColumn
frstdABRcnfChanNum = _FrstdABRcnfChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 1),
    _FrstdABRcnfChanNum_Type()
)
frstdABRcnfChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frstdABRcnfChanNum.setStatus("mandatory")


class _FrstdABRTBE_Type(Integer32):
    """Custom type frstdABRTBE based on Integer32"""
    defaultValue = 16777215

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_FrstdABRTBE_Type.__name__ = "Integer32"
_FrstdABRTBE_Object = MibTableColumn
frstdABRTBE = _FrstdABRTBE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 2),
    _FrstdABRTBE_Type()
)
frstdABRTBE.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frstdABRTBE.setStatus("mandatory")


class _FrstdABRFRTT_Type(Integer32):
    """Custom type frstdABRFRTT based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16700),
    )


_FrstdABRFRTT_Type.__name__ = "Integer32"
_FrstdABRFRTT_Object = MibTableColumn
frstdABRFRTT = _FrstdABRFRTT_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 3),
    _FrstdABRFRTT_Type()
)
frstdABRFRTT.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frstdABRFRTT.setStatus("mandatory")


class _FrstdABRRDF_Type(Integer32):
    """Custom type frstdABRRDF based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32768),
    )


_FrstdABRRDF_Type.__name__ = "Integer32"
_FrstdABRRDF_Object = MibTableColumn
frstdABRRDF = _FrstdABRRDF_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 4),
    _FrstdABRRDF_Type()
)
frstdABRRDF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frstdABRRDF.setStatus("mandatory")


class _FrstdABRRIF_Type(Integer32):
    """Custom type frstdABRRIF based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32768),
    )


_FrstdABRRIF_Type.__name__ = "Integer32"
_FrstdABRRIF_Object = MibTableColumn
frstdABRRIF = _FrstdABRRIF_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 5),
    _FrstdABRRIF_Type()
)
frstdABRRIF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frstdABRRIF.setStatus("mandatory")


class _FrstdABRNrm_Type(Integer32):
    """Custom type frstdABRNrm based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 256),
    )


_FrstdABRNrm_Type.__name__ = "Integer32"
_FrstdABRNrm_Object = MibTableColumn
frstdABRNrm = _FrstdABRNrm_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 6),
    _FrstdABRNrm_Type()
)
frstdABRNrm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frstdABRNrm.setStatus("mandatory")


class _FrstdABRTrm_Type(Integer32):
    """Custom type frstdABRTrm based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 255),
    )


_FrstdABRTrm_Type.__name__ = "Integer32"
_FrstdABRTrm_Object = MibTableColumn
frstdABRTrm = _FrstdABRTrm_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 7),
    _FrstdABRTrm_Type()
)
frstdABRTrm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frstdABRTrm.setStatus("mandatory")


class _FrstdABRCDF_Type(Integer32):
    """Custom type frstdABRCDF based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_FrstdABRCDF_Type.__name__ = "Integer32"
_FrstdABRCDF_Object = MibTableColumn
frstdABRCDF = _FrstdABRCDF_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 8),
    _FrstdABRCDF_Type()
)
frstdABRCDF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frstdABRCDF.setStatus("mandatory")


class _FrstdABRADTF_Type(Integer32):
    """Custom type frstdABRADTF based on Integer32"""
    defaultValue = 500

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 10230),
    )


_FrstdABRADTF_Type.__name__ = "Integer32"
_FrstdABRADTF_Object = MibTableColumn
frstdABRADTF = _FrstdABRADTF_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 9),
    _FrstdABRADTF_Type()
)
frstdABRADTF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frstdABRADTF.setStatus("mandatory")


class _FrstdABRICR_Type(Integer32):
    """Custom type frstdABRICR based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 400000),
    )


_FrstdABRICR_Type.__name__ = "Integer32"
_FrstdABRICR_Object = MibTableColumn
frstdABRICR = _FrstdABRICR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 10),
    _FrstdABRICR_Type()
)
frstdABRICR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frstdABRICR.setStatus("mandatory")


class _FrstdABRMCR_Type(Integer32):
    """Custom type frstdABRMCR based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 400000),
    )


_FrstdABRMCR_Type.__name__ = "Integer32"
_FrstdABRMCR_Object = MibTableColumn
frstdABRMCR = _FrstdABRMCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 11),
    _FrstdABRMCR_Type()
)
frstdABRMCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frstdABRMCR.setStatus("mandatory")


class _FrstdABRPCR_Type(Integer32):
    """Custom type frstdABRPCR based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 400000),
    )


_FrstdABRPCR_Type.__name__ = "Integer32"
_FrstdABRPCR_Object = MibTableColumn
frstdABRPCR = _FrstdABRPCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 1, 3, 1, 12),
    _FrstdABRPCR_Type()
)
frstdABRPCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frstdABRPCR.setStatus("mandatory")
_FrChanStateGrp_ObjectIdentity = ObjectIdentity
frChanStateGrp = _FrChanStateGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2)
)
_FrChanStateGrpTable_Object = MibTable
frChanStateGrpTable = _FrChanStateGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1)
)
if mibBuilder.loadTexts:
    frChanStateGrpTable.setStatus("mandatory")
_FrChanStateGrpEntry_Object = MibTableRow
frChanStateGrpEntry = _FrChanStateGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1)
)
frChanStateGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "stateChanNum"),
)
if mibBuilder.loadTexts:
    frChanStateGrpEntry.setStatus("mandatory")
_StateChanNum_Type = Integer32
_StateChanNum_Object = MibTableColumn
stateChanNum = _StateChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 1),
    _StateChanNum_Type()
)
stateChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    stateChanNum.setStatus("mandatory")


class _ChanState_Type(Integer32):
    """Custom type chanState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 3),
          ("failed", 4),
          ("notConfigured", 1),
          ("okay", 2))
    )


_ChanState_Type.__name__ = "Integer32"
_ChanState_Object = MibTableColumn
chanState = _ChanState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 2),
    _ChanState_Type()
)
chanState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanState.setStatus("mandatory")


class _XmtAbitState_Type(Integer32):
    """Custom type xmtAbitState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("sendingAequal0", 3),
          ("sendingAequal1", 2))
    )


_XmtAbitState_Type.__name__ = "Integer32"
_XmtAbitState_Object = MibTableColumn
xmtAbitState = _XmtAbitState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 3),
    _XmtAbitState_Type()
)
xmtAbitState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtAbitState.setStatus("mandatory")


class _RcvAbitState_Type(Integer32):
    """Custom type rcvAbitState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("rcvingAequal0", 3),
          ("rcvingAequal1", 2))
    )


_RcvAbitState_Type.__name__ = "Integer32"
_RcvAbitState_Object = MibTableColumn
rcvAbitState = _RcvAbitState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 4),
    _RcvAbitState_Type()
)
rcvAbitState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvAbitState.setStatus("mandatory")


class _XmtATMState_Type(Integer32):
    """Custom type xmtATMState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notSending", 1),
          ("sendingAIS", 2),
          ("sendingFERF", 3))
    )


_XmtATMState_Type.__name__ = "Integer32"
_XmtATMState_Object = MibTableColumn
xmtATMState = _XmtATMState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 5),
    _XmtATMState_Type()
)
xmtATMState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtATMState.setStatus("mandatory")


class _RcvATMState_Type(Integer32):
    """Custom type rcvATMState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notRcving", 1),
          ("rcvingAIS", 2),
          ("rcvingFERF", 3))
    )


_RcvATMState_Type.__name__ = "Integer32"
_RcvATMState_Object = MibTableColumn
rcvATMState = _RcvATMState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 6),
    _RcvATMState_Type()
)
rcvATMState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvATMState.setStatus("mandatory")


class _ChanStatusBitMap_Type(Integer32):
    """Custom type chanStatusBitMap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ChanStatusBitMap_Type.__name__ = "Integer32"
_ChanStatusBitMap_Object = MibTableColumn
chanStatusBitMap = _ChanStatusBitMap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 2, 1, 1, 7),
    _ChanStatusBitMap_Type()
)
chanStatusBitMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanStatusBitMap.setStatus("mandatory")
_FrChanCntGrp_ObjectIdentity = ObjectIdentity
frChanCntGrp = _FrChanCntGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3)
)
_FrChanCntGrpTable_Object = MibTable
frChanCntGrpTable = _FrChanCntGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1)
)
if mibBuilder.loadTexts:
    frChanCntGrpTable.setStatus("mandatory")
_FrChanCntGrpEntry_Object = MibTableRow
frChanCntGrpEntry = _FrChanCntGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1)
)
frChanCntGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "cntChanNum"),
)
if mibBuilder.loadTexts:
    frChanCntGrpEntry.setStatus("mandatory")
_CntChanNum_Type = Integer32
_CntChanNum_Object = MibTableColumn
cntChanNum = _CntChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 1),
    _CntChanNum_Type()
)
cntChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cntChanNum.setStatus("mandatory")
_RcvFrames_Type = Counter32
_RcvFrames_Object = MibTableColumn
rcvFrames = _RcvFrames_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 2),
    _RcvFrames_Type()
)
rcvFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFrames.setStatus("mandatory")
_RcvBytes_Type = Counter32
_RcvBytes_Object = MibTableColumn
rcvBytes = _RcvBytes_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 3),
    _RcvBytes_Type()
)
rcvBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvBytes.setStatus("mandatory")
_RcvFramesDE_Type = Counter32
_RcvFramesDE_Object = MibTableColumn
rcvFramesDE = _RcvFramesDE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 4),
    _RcvFramesDE_Type()
)
rcvFramesDE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesDE.setStatus("mandatory")
_RcvBytesDE_Type = Counter32
_RcvBytesDE_Object = MibTableColumn
rcvBytesDE = _RcvBytesDE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 5),
    _RcvBytesDE_Type()
)
rcvBytesDE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvBytesDE.setStatus("mandatory")
_RcvFramesDiscard_Type = Counter32
_RcvFramesDiscard_Object = MibTableColumn
rcvFramesDiscard = _RcvFramesDiscard_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 6),
    _RcvFramesDiscard_Type()
)
rcvFramesDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesDiscard.setStatus("mandatory")
_RcvBytesDiscard_Type = Counter32
_RcvBytesDiscard_Object = MibTableColumn
rcvBytesDiscard = _RcvBytesDiscard_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 7),
    _RcvBytesDiscard_Type()
)
rcvBytesDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvBytesDiscard.setStatus("mandatory")
_RcvFramesDiscShelfAlarm_Type = Counter32
_RcvFramesDiscShelfAlarm_Object = MibTableColumn
rcvFramesDiscShelfAlarm = _RcvFramesDiscShelfAlarm_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 8),
    _RcvFramesDiscShelfAlarm_Type()
)
rcvFramesDiscShelfAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesDiscShelfAlarm.setStatus("mandatory")
_RcvFramesDiscXceedQDepth_Type = Counter32
_RcvFramesDiscXceedQDepth_Object = MibTableColumn
rcvFramesDiscXceedQDepth = _RcvFramesDiscXceedQDepth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 9),
    _RcvFramesDiscXceedQDepth_Type()
)
rcvFramesDiscXceedQDepth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesDiscXceedQDepth.setStatus("mandatory")
_RcvBytesDiscXceedQDepth_Type = Counter32
_RcvBytesDiscXceedQDepth_Object = MibTableColumn
rcvBytesDiscXceedQDepth = _RcvBytesDiscXceedQDepth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 10),
    _RcvBytesDiscXceedQDepth_Type()
)
rcvBytesDiscXceedQDepth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvBytesDiscXceedQDepth.setStatus("mandatory")
_RcvFramesDiscXceedDEThresh_Type = Counter32
_RcvFramesDiscXceedDEThresh_Object = MibTableColumn
rcvFramesDiscXceedDEThresh = _RcvFramesDiscXceedDEThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 11),
    _RcvFramesDiscXceedDEThresh_Type()
)
rcvFramesDiscXceedDEThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesDiscXceedDEThresh.setStatus("mandatory")
_RcvFramesFECN_Type = Counter32
_RcvFramesFECN_Object = MibTableColumn
rcvFramesFECN = _RcvFramesFECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 12),
    _RcvFramesFECN_Type()
)
rcvFramesFECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesFECN.setStatus("mandatory")
_RcvFramesBECN_Type = Counter32
_RcvFramesBECN_Object = MibTableColumn
rcvFramesBECN = _RcvFramesBECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 13),
    _RcvFramesBECN_Type()
)
rcvFramesBECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesBECN.setStatus("mandatory")
_RcvFramesTaggedFECN_Type = Counter32
_RcvFramesTaggedFECN_Object = MibTableColumn
rcvFramesTaggedFECN = _RcvFramesTaggedFECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 14),
    _RcvFramesTaggedFECN_Type()
)
rcvFramesTaggedFECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesTaggedFECN.setStatus("mandatory")
_RcvFramesTaggedBECN_Type = Counter32
_RcvFramesTaggedBECN_Object = MibTableColumn
rcvFramesTaggedBECN = _RcvFramesTaggedBECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 15),
    _RcvFramesTaggedBECN_Type()
)
rcvFramesTaggedBECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesTaggedBECN.setStatus("mandatory")
_RcvFramesTaggedDE_Type = Counter32
_RcvFramesTaggedDE_Object = MibTableColumn
rcvFramesTaggedDE = _RcvFramesTaggedDE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 16),
    _RcvFramesTaggedDE_Type()
)
rcvFramesTaggedDE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesTaggedDE.setStatus("mandatory")
_RcvBytesTaggedDE_Type = Counter32
_RcvBytesTaggedDE_Object = MibTableColumn
rcvBytesTaggedDE = _RcvBytesTaggedDE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 17),
    _RcvBytesTaggedDE_Type()
)
rcvBytesTaggedDE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvBytesTaggedDE.setStatus("mandatory")
_RcvKbpsAIR_Type = Integer32
_RcvKbpsAIR_Object = MibTableColumn
rcvKbpsAIR = _RcvKbpsAIR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 18),
    _RcvKbpsAIR_Type()
)
rcvKbpsAIR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvKbpsAIR.setStatus("mandatory")
_XmtFrames_Type = Counter32
_XmtFrames_Object = MibTableColumn
xmtFrames = _XmtFrames_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 19),
    _XmtFrames_Type()
)
xmtFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFrames.setStatus("mandatory")
_XmtBytes_Type = Counter32
_XmtBytes_Object = MibTableColumn
xmtBytes = _XmtBytes_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 20),
    _XmtBytes_Type()
)
xmtBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtBytes.setStatus("mandatory")
_XmtFramesFECN_Type = Counter32
_XmtFramesFECN_Object = MibTableColumn
xmtFramesFECN = _XmtFramesFECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 21),
    _XmtFramesFECN_Type()
)
xmtFramesFECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesFECN.setStatus("mandatory")
_XmtFramesBECN_Type = Counter32
_XmtFramesBECN_Object = MibTableColumn
xmtFramesBECN = _XmtFramesBECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 22),
    _XmtFramesBECN_Type()
)
xmtFramesBECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesBECN.setStatus("mandatory")
_XmtFramesDE_Type = Counter32
_XmtFramesDE_Object = MibTableColumn
xmtFramesDE = _XmtFramesDE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 23),
    _XmtFramesDE_Type()
)
xmtFramesDE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesDE.setStatus("mandatory")
_XmtBytesDE_Type = Counter32
_XmtBytesDE_Object = MibTableColumn
xmtBytesDE = _XmtBytesDE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 24),
    _XmtBytesDE_Type()
)
xmtBytesDE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtBytesDE.setStatus("mandatory")
_XmtFramesDiscard_Type = Counter32
_XmtFramesDiscard_Object = MibTableColumn
xmtFramesDiscard = _XmtFramesDiscard_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 25),
    _XmtFramesDiscard_Type()
)
xmtFramesDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesDiscard.setStatus("mandatory")
_XmtBytesDiscard_Type = Counter32
_XmtBytesDiscard_Object = MibTableColumn
xmtBytesDiscard = _XmtBytesDiscard_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 26),
    _XmtBytesDiscard_Type()
)
xmtBytesDiscard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtBytesDiscard.setStatus("mandatory")
_XmtFramesDiscXceedQDepth_Type = Counter32
_XmtFramesDiscXceedQDepth_Object = MibTableColumn
xmtFramesDiscXceedQDepth = _XmtFramesDiscXceedQDepth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 27),
    _XmtFramesDiscXceedQDepth_Type()
)
xmtFramesDiscXceedQDepth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesDiscXceedQDepth.setStatus("mandatory")
_XmtBytesDiscXceedQDepth_Type = Counter32
_XmtBytesDiscXceedQDepth_Object = MibTableColumn
xmtBytesDiscXceedQDepth = _XmtBytesDiscXceedQDepth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 28),
    _XmtBytesDiscXceedQDepth_Type()
)
xmtBytesDiscXceedQDepth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtBytesDiscXceedQDepth.setStatus("mandatory")
_XmtFramesDiscXceedDEThresh_Type = Counter32
_XmtFramesDiscXceedDEThresh_Object = MibTableColumn
xmtFramesDiscXceedDEThresh = _XmtFramesDiscXceedDEThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 29),
    _XmtFramesDiscXceedDEThresh_Type()
)
xmtFramesDiscXceedDEThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesDiscXceedDEThresh.setStatus("mandatory")
_XmtFramesDiscPhyLayerFail_Type = Counter32
_XmtFramesDiscPhyLayerFail_Object = MibTableColumn
xmtFramesDiscPhyLayerFail = _XmtFramesDiscPhyLayerFail_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 30),
    _XmtFramesDiscPhyLayerFail_Type()
)
xmtFramesDiscPhyLayerFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesDiscPhyLayerFail.setStatus("mandatory")
_XmtFramesDiscCRCError_Type = Counter32
_XmtFramesDiscCRCError_Object = MibTableColumn
xmtFramesDiscCRCError = _XmtFramesDiscCRCError_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 31),
    _XmtFramesDiscCRCError_Type()
)
xmtFramesDiscCRCError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesDiscCRCError.setStatus("mandatory")
_XmtFramesDiscReassmFail_Type = Counter32
_XmtFramesDiscReassmFail_Object = MibTableColumn
xmtFramesDiscReassmFail = _XmtFramesDiscReassmFail_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 32),
    _XmtFramesDiscReassmFail_Type()
)
xmtFramesDiscReassmFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesDiscReassmFail.setStatus("mandatory")
_XmtFramesDiscSrcAbort_Type = Counter32
_XmtFramesDiscSrcAbort_Object = MibTableColumn
xmtFramesDiscSrcAbort = _XmtFramesDiscSrcAbort_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 33),
    _XmtFramesDiscSrcAbort_Type()
)
xmtFramesDiscSrcAbort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesDiscSrcAbort.setStatus("mandatory")
_XmtFramesDuringLMIAlarm_Type = Counter32
_XmtFramesDuringLMIAlarm_Object = MibTableColumn
xmtFramesDuringLMIAlarm = _XmtFramesDuringLMIAlarm_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 34),
    _XmtFramesDuringLMIAlarm_Type()
)
xmtFramesDuringLMIAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesDuringLMIAlarm.setStatus("mandatory")
_XmtBytesDuringLMIAlarm_Type = Counter32
_XmtBytesDuringLMIAlarm_Object = MibTableColumn
xmtBytesDuringLMIAlarm = _XmtBytesDuringLMIAlarm_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 35),
    _XmtBytesDuringLMIAlarm_Type()
)
xmtBytesDuringLMIAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtBytesDuringLMIAlarm.setStatus("mandatory")
_XmtFramesTaggedFECN_Type = Counter32
_XmtFramesTaggedFECN_Object = MibTableColumn
xmtFramesTaggedFECN = _XmtFramesTaggedFECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 36),
    _XmtFramesTaggedFECN_Type()
)
xmtFramesTaggedFECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesTaggedFECN.setStatus("mandatory")
_XmtFramesTaggedBECN_Type = Counter32
_XmtFramesTaggedBECN_Object = MibTableColumn
xmtFramesTaggedBECN = _XmtFramesTaggedBECN_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 37),
    _XmtFramesTaggedBECN_Type()
)
xmtFramesTaggedBECN.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesTaggedBECN.setStatus("mandatory")
_XmtKbpsAIR_Type = Integer32
_XmtKbpsAIR_Object = MibTableColumn
xmtKbpsAIR = _XmtKbpsAIR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 38),
    _XmtKbpsAIR_Type()
)
xmtKbpsAIR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtKbpsAIR.setStatus("mandatory")


class _ChanClrButton_Type(Integer32):
    """Custom type chanClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("noaction", 1))
    )


_ChanClrButton_Type.__name__ = "Integer32"
_ChanClrButton_Object = MibTableColumn
chanClrButton = _ChanClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 39),
    _ChanClrButton_Type()
)
chanClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanClrButton.setStatus("mandatory")
_XmtFramesTaggedDE_Type = Counter32
_XmtFramesTaggedDE_Object = MibTableColumn
xmtFramesTaggedDE = _XmtFramesTaggedDE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 40),
    _XmtFramesTaggedDE_Type()
)
xmtFramesTaggedDE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesTaggedDE.setStatus("mandatory")
_XmtBytesTaggedDE_Type = Counter32
_XmtBytesTaggedDE_Object = MibTableColumn
xmtBytesTaggedDE = _XmtBytesTaggedDE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 41),
    _XmtBytesTaggedDE_Type()
)
xmtBytesTaggedDE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtBytesTaggedDE.setStatus("mandatory")
_RcvFramesDiscUPC_Type = Counter32
_RcvFramesDiscUPC_Object = MibTableColumn
rcvFramesDiscUPC = _RcvFramesDiscUPC_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 42),
    _RcvFramesDiscUPC_Type()
)
rcvFramesDiscUPC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesDiscUPC.setStatus("mandatory")
_ChanSecUpTime_Type = Counter32
_ChanSecUpTime_Object = MibTableColumn
chanSecUpTime = _ChanSecUpTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 43),
    _ChanSecUpTime_Type()
)
chanSecUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanSecUpTime.setStatus("mandatory")
_XmtFramesInvalidCPIs_Type = Counter32
_XmtFramesInvalidCPIs_Object = MibTableColumn
xmtFramesInvalidCPIs = _XmtFramesInvalidCPIs_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 44),
    _XmtFramesInvalidCPIs_Type()
)
xmtFramesInvalidCPIs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesInvalidCPIs.setStatus("mandatory")
_XmtFramesLengthViolations_Type = Counter32
_XmtFramesLengthViolations_Object = MibTableColumn
xmtFramesLengthViolations = _XmtFramesLengthViolations_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 45),
    _XmtFramesLengthViolations_Type()
)
xmtFramesLengthViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesLengthViolations.setStatus("mandatory")
_XmtFramesOversizedSDUs_Type = Counter32
_XmtFramesOversizedSDUs_Object = MibTableColumn
xmtFramesOversizedSDUs = _XmtFramesOversizedSDUs_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 46),
    _XmtFramesOversizedSDUs_Type()
)
xmtFramesOversizedSDUs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesOversizedSDUs.setStatus("mandatory")
_XmtFramesUnknownProtocols_Type = Counter32
_XmtFramesUnknownProtocols_Object = MibTableColumn
xmtFramesUnknownProtocols = _XmtFramesUnknownProtocols_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 47),
    _XmtFramesUnknownProtocols_Type()
)
xmtFramesUnknownProtocols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtFramesUnknownProtocols.setStatus("mandatory")
_RcvFramesUnknownProtocols_Type = Counter32
_RcvFramesUnknownProtocols_Object = MibTableColumn
rcvFramesUnknownProtocols = _RcvFramesUnknownProtocols_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 2, 3, 1, 1, 48),
    _RcvFramesUnknownProtocols_Type()
)
rcvFramesUnknownProtocols.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvFramesUnknownProtocols.setStatus("mandatory")
_FrEndPtMapGrp_ObjectIdentity = ObjectIdentity
frEndPtMapGrp = _FrEndPtMapGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3)
)
_FrEndPtMapGrpTable_Object = MibTable
frEndPtMapGrpTable = _FrEndPtMapGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3, 1)
)
if mibBuilder.loadTexts:
    frEndPtMapGrpTable.setStatus("mandatory")
_FrEndPtMapGrpEntry_Object = MibTableRow
frEndPtMapGrpEntry = _FrEndPtMapGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3, 1, 1)
)
frEndPtMapGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "endPortNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "endDLCI"),
)
if mibBuilder.loadTexts:
    frEndPtMapGrpEntry.setStatus("mandatory")
_EndPortNum_Type = Integer32
_EndPortNum_Object = MibTableColumn
endPortNum = _EndPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3, 1, 1, 1),
    _EndPortNum_Type()
)
endPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    endPortNum.setStatus("mandatory")


class _EndDLCI_Type(Integer32):
    """Custom type endDLCI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8388607),
    )


_EndDLCI_Type.__name__ = "Integer32"
_EndDLCI_Object = MibTableColumn
endDLCI = _EndDLCI_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3, 1, 1, 2),
    _EndDLCI_Type()
)
endDLCI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    endDLCI.setStatus("mandatory")
_EndChanNum_Type = Integer32
_EndChanNum_Object = MibTableColumn
endChanNum = _EndChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3, 1, 1, 3),
    _EndChanNum_Type()
)
endChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    endChanNum.setStatus("mandatory")
_EndLineNum_Type = Integer32
_EndLineNum_Object = MibTableColumn
endLineNum = _EndLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 3, 1, 1, 4),
    _EndLineNum_Type()
)
endLineNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    endLineNum.setStatus("mandatory")
_AusmPortCnfPortGrp_ObjectIdentity = ObjectIdentity
ausmPortCnfPortGrp = _AusmPortCnfPortGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1)
)
_AusmPortCnfPortGrpTable_Object = MibTable
ausmPortCnfPortGrpTable = _AusmPortCnfPortGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1)
)
if mibBuilder.loadTexts:
    ausmPortCnfPortGrpTable.setStatus("mandatory")
_AusmPortCnfPortGrpEntry_Object = MibTableRow
ausmPortCnfPortGrpEntry = _AusmPortCnfPortGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1)
)
ausmPortCnfPortGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ausmPortNum"),
)
if mibBuilder.loadTexts:
    ausmPortCnfPortGrpEntry.setStatus("mandatory")


class _AusmPortNum_Type(Integer32):
    """Custom type ausmPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_AusmPortNum_Type.__name__ = "Integer32"
_AusmPortNum_Object = MibTableColumn
ausmPortNum = _AusmPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1, 1),
    _AusmPortNum_Type()
)
ausmPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmPortNum.setStatus("mandatory")


class _PortEnable_Type(Integer32):
    """Custom type portEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_PortEnable_Type.__name__ = "Integer32"
_PortEnable_Object = MibTableColumn
portEnable = _PortEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1, 2),
    _PortEnable_Type()
)
portEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portEnable.setStatus("mandatory")


class _AusmPortType_Type(Integer32):
    """Custom type ausmPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("nni", 2),
          ("sti", 3),
          ("uni", 1),
          ("vpTrkUni", 4))
    )


_AusmPortType_Type.__name__ = "Integer32"
_AusmPortType_Object = MibTableColumn
ausmPortType = _AusmPortType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1, 3),
    _AusmPortType_Type()
)
ausmPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortType.setStatus("mandatory")


class _AusmPortIfType_Type(Integer32):
    """Custom type ausmPortIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("e1", 3),
          ("t1", 2),
          ("unknown", 1))
    )


_AusmPortIfType_Type.__name__ = "Integer32"
_AusmPortIfType_Object = MibTableColumn
ausmPortIfType = _AusmPortIfType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1, 4),
    _AusmPortIfType_Type()
)
ausmPortIfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmPortIfType.setStatus("mandatory")
_AusmPortSpeed_Type = Integer32
_AusmPortSpeed_Object = MibTableColumn
ausmPortSpeed = _AusmPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1, 5),
    _AusmPortSpeed_Type()
)
ausmPortSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmPortSpeed.setStatus("mandatory")
_AusmLineNum_Type = Integer32
_AusmLineNum_Object = MibTableColumn
ausmLineNum = _AusmLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 1, 1, 1, 6),
    _AusmLineNum_Type()
)
ausmLineNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmLineNum.setStatus("mandatory")
_AusmPortCnfServiceQueGrp_ObjectIdentity = ObjectIdentity
ausmPortCnfServiceQueGrp = _AusmPortCnfServiceQueGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2)
)
_AusmPortCnfServiceQueGrpTable_Object = MibTable
ausmPortCnfServiceQueGrpTable = _AusmPortCnfServiceQueGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1)
)
if mibBuilder.loadTexts:
    ausmPortCnfServiceQueGrpTable.setStatus("mandatory")
_AusmPortCnfServiceQueGrpEntry_Object = MibTableRow
ausmPortCnfServiceQueGrpEntry = _AusmPortCnfServiceQueGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1)
)
ausmPortCnfServiceQueGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "servicePortNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "egrQIndex"),
)
if mibBuilder.loadTexts:
    ausmPortCnfServiceQueGrpEntry.setStatus("mandatory")


class _EgrQIndex_Type(Integer32):
    """Custom type egrQIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_EgrQIndex_Type.__name__ = "Integer32"
_EgrQIndex_Object = MibTableColumn
egrQIndex = _EgrQIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 1),
    _EgrQIndex_Type()
)
egrQIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrQIndex.setStatus("mandatory")


class _ServicePortNum_Type(Integer32):
    """Custom type servicePortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_ServicePortNum_Type.__name__ = "Integer32"
_ServicePortNum_Object = MibTableColumn
servicePortNum = _ServicePortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 2),
    _ServicePortNum_Type()
)
servicePortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    servicePortNum.setStatus("mandatory")


class _EgrQBinState_Type(Integer32):
    """Custom type egrQBinState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_EgrQBinState_Type.__name__ = "Integer32"
_EgrQBinState_Object = MibTableColumn
egrQBinState = _EgrQBinState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 3),
    _EgrQBinState_Type()
)
egrQBinState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egrQBinState.setStatus("mandatory")


class _EgrQServiceSequence_Type(Integer32):
    """Custom type egrQServiceSequence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_EgrQServiceSequence_Type.__name__ = "Integer32"
_EgrQServiceSequence_Object = MibTableColumn
egrQServiceSequence = _EgrQServiceSequence_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 4),
    _EgrQServiceSequence_Type()
)
egrQServiceSequence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egrQServiceSequence.setStatus("mandatory")


class _EgrQDepthMax_Type(Integer32):
    """Custom type egrQDepthMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16000),
    )


_EgrQDepthMax_Type.__name__ = "Integer32"
_EgrQDepthMax_Object = MibTableColumn
egrQDepthMax = _EgrQDepthMax_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 5),
    _EgrQDepthMax_Type()
)
egrQDepthMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egrQDepthMax.setStatus("mandatory")


class _EgrQCLPThreshHigh_Type(Integer32):
    """Custom type egrQCLPThreshHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16000),
    )


_EgrQCLPThreshHigh_Type.__name__ = "Integer32"
_EgrQCLPThreshHigh_Object = MibTableColumn
egrQCLPThreshHigh = _EgrQCLPThreshHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 6),
    _EgrQCLPThreshHigh_Type()
)
egrQCLPThreshHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egrQCLPThreshHigh.setStatus("mandatory")


class _EgrQCLPThreshLow_Type(Integer32):
    """Custom type egrQCLPThreshLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16000),
    )


_EgrQCLPThreshLow_Type.__name__ = "Integer32"
_EgrQCLPThreshLow_Object = MibTableColumn
egrQCLPThreshLow = _EgrQCLPThreshLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 7),
    _EgrQCLPThreshLow_Type()
)
egrQCLPThreshLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egrQCLPThreshLow.setStatus("mandatory")


class _EgrQEfciThresh_Type(Integer32):
    """Custom type egrQEfciThresh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16000),
    )


_EgrQEfciThresh_Type.__name__ = "Integer32"
_EgrQEfciThresh_Object = MibTableColumn
egrQEfciThresh = _EgrQEfciThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 8),
    _EgrQEfciThresh_Type()
)
egrQEfciThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egrQEfciThresh.setStatus("mandatory")


class _EgrQAlgorithm_Type(Integer32):
    """Custom type egrQAlgorithm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_EgrQAlgorithm_Type.__name__ = "Integer32"
_EgrQAlgorithm_Object = MibTableColumn
egrQAlgorithm = _EgrQAlgorithm_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 9),
    _EgrQAlgorithm_Type()
)
egrQAlgorithm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egrQAlgorithm.setStatus("mandatory")


class _EgrMaxBwInc_Type(Integer32):
    """Custom type egrMaxBwInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 512),
    )


_EgrMaxBwInc_Type.__name__ = "Integer32"
_EgrMaxBwInc_Object = MibTableColumn
egrMaxBwInc = _EgrMaxBwInc_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 10),
    _EgrMaxBwInc_Type()
)
egrMaxBwInc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egrMaxBwInc.setStatus("mandatory")


class _EgrMinBwInc_Type(Integer32):
    """Custom type egrMinBwInc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 512),
    )


_EgrMinBwInc_Type.__name__ = "Integer32"
_EgrMinBwInc_Object = MibTableColumn
egrMinBwInc = _EgrMinBwInc_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 11),
    _EgrMinBwInc_Type()
)
egrMinBwInc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    egrMinBwInc.setStatus("mandatory")


class _EgrQCLPState_Type(Integer32):
    """Custom type egrQCLPState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clphigh", 2),
          ("clplow", 1))
    )


_EgrQCLPState_Type.__name__ = "Integer32"
_EgrQCLPState_Object = MibTableColumn
egrQCLPState = _EgrQCLPState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 12),
    _EgrQCLPState_Type()
)
egrQCLPState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrQCLPState.setStatus("mandatory")
_EgrQfullDiscardCells_Type = Counter32
_EgrQfullDiscardCells_Object = MibTableColumn
egrQfullDiscardCells = _EgrQfullDiscardCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 13),
    _EgrQfullDiscardCells_Type()
)
egrQfullDiscardCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrQfullDiscardCells.setStatus("mandatory")
_EgrQClpSetDiscardCells_Type = Counter32
_EgrQClpSetDiscardCells_Object = MibTableColumn
egrQClpSetDiscardCells = _EgrQClpSetDiscardCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 2, 1, 1, 14),
    _EgrQClpSetDiscardCells_Type()
)
egrQClpSetDiscardCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrQClpSetDiscardCells.setStatus("mandatory")
_AusmPortCnfSig_ObjectIdentity = ObjectIdentity
ausmPortCnfSig = _AusmPortCnfSig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3)
)
_AusmPortCnfSigILMIGrp_ObjectIdentity = ObjectIdentity
ausmPortCnfSigILMIGrp = _AusmPortCnfSigILMIGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1)
)
_AusmPortCnfSigILMIGrpTable_Object = MibTable
ausmPortCnfSigILMIGrpTable = _AusmPortCnfSigILMIGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1)
)
if mibBuilder.loadTexts:
    ausmPortCnfSigILMIGrpTable.setStatus("mandatory")
_AusmPortCnfSigILMIGrpEntry_Object = MibTableRow
ausmPortCnfSigILMIGrpEntry = _AusmPortCnfSigILMIGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1)
)
ausmPortCnfSigILMIGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "sigPortNum"),
)
if mibBuilder.loadTexts:
    ausmPortCnfSigILMIGrpEntry.setStatus("mandatory")


class _SigPortNum_Type(Integer32):
    """Custom type sigPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_SigPortNum_Type.__name__ = "Integer32"
_SigPortNum_Object = MibTableColumn
sigPortNum = _SigPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 1),
    _SigPortNum_Type()
)
sigPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sigPortNum.setStatus("mandatory")


class _AusmSignallingProtocolType_Type(Integer32):
    """Custom type ausmSignallingProtocolType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("iLMI", 3),
          ("noSignalling", 2),
          ("other", 1))
    )


_AusmSignallingProtocolType_Type.__name__ = "Integer32"
_AusmSignallingProtocolType_Object = MibTableColumn
ausmSignallingProtocolType = _AusmSignallingProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 2),
    _AusmSignallingProtocolType_Type()
)
ausmSignallingProtocolType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmSignallingProtocolType.setStatus("mandatory")


class _SignallingVpi_Type(Integer32):
    """Custom type signallingVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SignallingVpi_Type.__name__ = "Integer32"
_SignallingVpi_Object = MibTableColumn
signallingVpi = _SignallingVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 3),
    _SignallingVpi_Type()
)
signallingVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    signallingVpi.setStatus("mandatory")


class _SignallingVci_Type(Integer32):
    """Custom type signallingVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SignallingVci_Type.__name__ = "Integer32"
_SignallingVci_Object = MibTableColumn
signallingVci = _SignallingVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 4),
    _SignallingVci_Type()
)
signallingVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    signallingVci.setStatus("mandatory")
_AddrPrefix_Type = NetPrefix
_AddrPrefix_Object = MibTableColumn
addrPrefix = _AddrPrefix_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 5),
    _AddrPrefix_Type()
)
addrPrefix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    addrPrefix.setStatus("mandatory")
_CustomerId_Type = Integer32
_CustomerId_Object = MibTableColumn
customerId = _CustomerId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 6),
    _CustomerId_Type()
)
customerId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    customerId.setStatus("mandatory")
_ProtocolRevNo_Type = Integer32
_ProtocolRevNo_Object = MibTableColumn
protocolRevNo = _ProtocolRevNo_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 7),
    _ProtocolRevNo_Type()
)
protocolRevNo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    protocolRevNo.setStatus("mandatory")


class _ILMITrapEnable_Type(Integer32):
    """Custom type iLMITrapEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_ILMITrapEnable_Type.__name__ = "Integer32"
_ILMITrapEnable_Object = MibTableColumn
iLMITrapEnable = _ILMITrapEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 8),
    _ILMITrapEnable_Type()
)
iLMITrapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    iLMITrapEnable.setStatus("mandatory")


class _MinTrapInterval_Type(Integer32):
    """Custom type minTrapInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_MinTrapInterval_Type.__name__ = "Integer32"
_MinTrapInterval_Object = MibTableColumn
minTrapInterval = _MinTrapInterval_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 9),
    _MinTrapInterval_Type()
)
minTrapInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    minTrapInterval.setStatus("mandatory")


class _KeepAlivePollingEnable_Type(Integer32):
    """Custom type keepAlivePollingEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_KeepAlivePollingEnable_Type.__name__ = "Integer32"
_KeepAlivePollingEnable_Object = MibTableColumn
keepAlivePollingEnable = _KeepAlivePollingEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 10),
    _KeepAlivePollingEnable_Type()
)
keepAlivePollingEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    keepAlivePollingEnable.setStatus("mandatory")


class _ErrorThresholdN491_Type(Integer32):
    """Custom type errorThresholdN491 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_ErrorThresholdN491_Type.__name__ = "Integer32"
_ErrorThresholdN491_Object = MibTableColumn
errorThresholdN491 = _ErrorThresholdN491_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 11),
    _ErrorThresholdN491_Type()
)
errorThresholdN491.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    errorThresholdN491.setStatus("mandatory")


class _EventThresholdN492_Type(Integer32):
    """Custom type eventThresholdN492 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_EventThresholdN492_Type.__name__ = "Integer32"
_EventThresholdN492_Object = MibTableColumn
eventThresholdN492 = _EventThresholdN492_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 12),
    _EventThresholdN492_Type()
)
eventThresholdN492.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    eventThresholdN492.setStatus("mandatory")


class _PollingIntervalT491_Type(Integer32):
    """Custom type pollingIntervalT491 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              10,
              15,
              20,
              25,
              30,
              35,
              40,
              45,
              50,
              55,
              60)
        )
    )
    namedValues = NamedValues(
        *(("v1", 5),
          ("v10", 50),
          ("v11", 55),
          ("v12", 60),
          ("v2", 10),
          ("v3", 15),
          ("v4", 20),
          ("v5", 25),
          ("v6", 30),
          ("v7", 35),
          ("v8", 40),
          ("v9", 45))
    )


_PollingIntervalT491_Type.__name__ = "Integer32"
_PollingIntervalT491_Object = MibTableColumn
pollingIntervalT491 = _PollingIntervalT491_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 13),
    _PollingIntervalT491_Type()
)
pollingIntervalT491.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pollingIntervalT491.setStatus("mandatory")


class _MinEnquiryIntervalT493_Type(Integer32):
    """Custom type minEnquiryIntervalT493 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_MinEnquiryIntervalT493_Type.__name__ = "Integer32"
_MinEnquiryIntervalT493_Object = MibTableColumn
minEnquiryIntervalT493 = _MinEnquiryIntervalT493_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 14),
    _MinEnquiryIntervalT493_Type()
)
minEnquiryIntervalT493.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    minEnquiryIntervalT493.setStatus("mandatory")


class _AddrRegEnable_Type(Integer32):
    """Custom type addrRegEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AddrRegEnable_Type.__name__ = "Integer32"
_AddrRegEnable_Object = MibTableColumn
addrRegEnable = _AddrRegEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 3, 1, 1, 1, 15),
    _AddrRegEnable_Type()
)
addrRegEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    addrRegEnable.setStatus("mandatory")
_AusmPortCnfPortImaGrp_ObjectIdentity = ObjectIdentity
ausmPortCnfPortImaGrp = _AusmPortCnfPortImaGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4)
)
_AusmPortCnfPortImaGrpTable_Object = MibTable
ausmPortCnfPortImaGrpTable = _AusmPortCnfPortImaGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1)
)
if mibBuilder.loadTexts:
    ausmPortCnfPortImaGrpTable.setStatus("mandatory")
_AusmPortCnfPortImaGrpEntry_Object = MibTableRow
ausmPortCnfPortImaGrpEntry = _AusmPortCnfPortImaGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1)
)
ausmPortCnfPortImaGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "imaPortNum"),
)
if mibBuilder.loadTexts:
    ausmPortCnfPortImaGrpEntry.setStatus("mandatory")


class _ImaPortNum_Type(Integer32):
    """Custom type imaPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_ImaPortNum_Type.__name__ = "Integer32"
_ImaPortNum_Object = MibTableColumn
imaPortNum = _ImaPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 1),
    _ImaPortNum_Type()
)
imaPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPortNum.setStatus("mandatory")


class _ImaPortEnable_Type(Integer32):
    """Custom type imaPortEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("addlinks", 3),
          ("addport", 2),
          ("dellinks", 4),
          ("delport", 1),
          ("modify", 5))
    )


_ImaPortEnable_Type.__name__ = "Integer32"
_ImaPortEnable_Object = MibTableColumn
imaPortEnable = _ImaPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 2),
    _ImaPortEnable_Type()
)
imaPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaPortEnable.setStatus("mandatory")


class _ImaPortSpeed_Type(Integer32):
    """Custom type imaPortSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 38328),
    )


_ImaPortSpeed_Type.__name__ = "Integer32"
_ImaPortSpeed_Object = MibTableColumn
imaPortSpeed = _ImaPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 3),
    _ImaPortSpeed_Type()
)
imaPortSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPortSpeed.setStatus("mandatory")


class _NumLinksInImaGrp_Type(Integer32):
    """Custom type numLinksInImaGrp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_NumLinksInImaGrp_Type.__name__ = "Integer32"
_NumLinksInImaGrp_Object = MibTableColumn
numLinksInImaGrp = _NumLinksInImaGrp_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 4),
    _NumLinksInImaGrp_Type()
)
numLinksInImaGrp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    numLinksInImaGrp.setStatus("mandatory")


class _ListOfLinksInImaGrp_Type(DisplayString):
    """Custom type listOfLinksInImaGrp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 15),
    )


_ListOfLinksInImaGrp_Type.__name__ = "DisplayString"
_ListOfLinksInImaGrp_Object = MibTableColumn
listOfLinksInImaGrp = _ListOfLinksInImaGrp_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 5),
    _ListOfLinksInImaGrp_Type()
)
listOfLinksInImaGrp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    listOfLinksInImaGrp.setStatus("mandatory")


class _LcpCellsPeriodicity_Type(Integer32):
    """Custom type lcpCellsPeriodicity based on Integer32"""
    defaultValue = 128

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 128),
    )


_LcpCellsPeriodicity_Type.__name__ = "Integer32"
_LcpCellsPeriodicity_Object = MibTableColumn
lcpCellsPeriodicity = _LcpCellsPeriodicity_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 6),
    _LcpCellsPeriodicity_Type()
)
lcpCellsPeriodicity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lcpCellsPeriodicity.setStatus("mandatory")


class _LcpDelayTolerance_Type(Integer32):
    """Custom type lcpDelayTolerance based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1),
    )


_LcpDelayTolerance_Type.__name__ = "Integer32"
_LcpDelayTolerance_Object = MibTableColumn
lcpDelayTolerance = _LcpDelayTolerance_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 7),
    _LcpDelayTolerance_Type()
)
lcpDelayTolerance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lcpDelayTolerance.setStatus("mandatory")


class _ReadPtrWrPtrDiff_Type(Integer32):
    """Custom type readPtrWrPtrDiff based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 12),
    )


_ReadPtrWrPtrDiff_Type.__name__ = "Integer32"
_ReadPtrWrPtrDiff_Object = MibTableColumn
readPtrWrPtrDiff = _ReadPtrWrPtrDiff_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 8),
    _ReadPtrWrPtrDiff_Type()
)
readPtrWrPtrDiff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    readPtrWrPtrDiff.setStatus("mandatory")


class _NumRedundantLinks_Type(Integer32):
    """Custom type numRedundantLinks based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_NumRedundantLinks_Type.__name__ = "Integer32"
_NumRedundantLinks_Object = MibTableColumn
numRedundantLinks = _NumRedundantLinks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 9),
    _NumRedundantLinks_Type()
)
numRedundantLinks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    numRedundantLinks.setStatus("mandatory")


class _MaxTolerableDiffDelay_Type(Integer32):
    """Custom type maxTolerableDiffDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 275),
    )


_MaxTolerableDiffDelay_Type.__name__ = "Integer32"
_MaxTolerableDiffDelay_Object = MibTableColumn
maxTolerableDiffDelay = _MaxTolerableDiffDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 10),
    _MaxTolerableDiffDelay_Type()
)
maxTolerableDiffDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maxTolerableDiffDelay.setStatus("mandatory")


class _ImaPortType_Type(Integer32):
    """Custom type imaPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("nni", 2),
          ("sti", 3),
          ("uni", 1),
          ("vpTrkUni", 4))
    )


_ImaPortType_Type.__name__ = "Integer32"
_ImaPortType_Object = MibTableColumn
imaPortType = _ImaPortType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 11),
    _ImaPortType_Type()
)
imaPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaPortType.setStatus("mandatory")


class _AxisImaGroupTxAvailCellRate_Type(Integer32):
    """Custom type axisImaGroupTxAvailCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 38330),
    )


_AxisImaGroupTxAvailCellRate_Type.__name__ = "Integer32"
_AxisImaGroupTxAvailCellRate_Object = MibTableColumn
axisImaGroupTxAvailCellRate = _AxisImaGroupTxAvailCellRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 12),
    _AxisImaGroupTxAvailCellRate_Type()
)
axisImaGroupTxAvailCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupTxAvailCellRate.setStatus("mandatory")


class _AxisImaGroupSymmetry_Type(Integer32):
    """Custom type axisImaGroupSymmetry based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("asymmetriConfiguration", 3),
          ("asymmetricOperation", 2),
          ("symmetricOperation", 1))
    )


_AxisImaGroupSymmetry_Type.__name__ = "Integer32"
_AxisImaGroupSymmetry_Object = MibTableColumn
axisImaGroupSymmetry = _AxisImaGroupSymmetry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 13),
    _AxisImaGroupSymmetry_Type()
)
axisImaGroupSymmetry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    axisImaGroupSymmetry.setStatus("mandatory")


class _AxisImaGroupMinNumRxLinks_Type(Integer32):
    """Custom type axisImaGroupMinNumRxLinks based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_AxisImaGroupMinNumRxLinks_Type.__name__ = "Integer32"
_AxisImaGroupMinNumRxLinks_Object = MibTableColumn
axisImaGroupMinNumRxLinks = _AxisImaGroupMinNumRxLinks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 14),
    _AxisImaGroupMinNumRxLinks_Type()
)
axisImaGroupMinNumRxLinks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    axisImaGroupMinNumRxLinks.setStatus("mandatory")


class _AxisImaGroupNeTxClkMode_Type(Integer32):
    """Custom type axisImaGroupNeTxClkMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ctc", 1),
          ("itc", 2))
    )


_AxisImaGroupNeTxClkMode_Type.__name__ = "Integer32"
_AxisImaGroupNeTxClkMode_Object = MibTableColumn
axisImaGroupNeTxClkMode = _AxisImaGroupNeTxClkMode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 15),
    _AxisImaGroupNeTxClkMode_Type()
)
axisImaGroupNeTxClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    axisImaGroupNeTxClkMode.setStatus("mandatory")


class _AxisImaGroupAlphaValue_Type(Integer32):
    """Custom type axisImaGroupAlphaValue based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_AxisImaGroupAlphaValue_Type.__name__ = "Integer32"
_AxisImaGroupAlphaValue_Object = MibTableColumn
axisImaGroupAlphaValue = _AxisImaGroupAlphaValue_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 16),
    _AxisImaGroupAlphaValue_Type()
)
axisImaGroupAlphaValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupAlphaValue.setStatus("mandatory")


class _AxisImaGroupBetaValue_Type(Integer32):
    """Custom type axisImaGroupBetaValue based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_AxisImaGroupBetaValue_Type.__name__ = "Integer32"
_AxisImaGroupBetaValue_Object = MibTableColumn
axisImaGroupBetaValue = _AxisImaGroupBetaValue_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 17),
    _AxisImaGroupBetaValue_Type()
)
axisImaGroupBetaValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupBetaValue.setStatus("mandatory")


class _AxisImaGroupGammaValue_Type(Integer32):
    """Custom type axisImaGroupGammaValue based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_AxisImaGroupGammaValue_Type.__name__ = "Integer32"
_AxisImaGroupGammaValue_Object = MibTableColumn
axisImaGroupGammaValue = _AxisImaGroupGammaValue_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 18),
    _AxisImaGroupGammaValue_Type()
)
axisImaGroupGammaValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupGammaValue.setStatus("mandatory")
_AxisImaGroupNumRxCfgLnks_Type = Integer32
_AxisImaGroupNumRxCfgLnks_Object = MibTableColumn
axisImaGroupNumRxCfgLnks = _AxisImaGroupNumRxCfgLnks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 19),
    _AxisImaGroupNumRxCfgLnks_Type()
)
axisImaGroupNumRxCfgLnks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupNumRxCfgLnks.setStatus("mandatory")


class _AxisImaGroupTestLinkIfIndex_Type(Integer32):
    """Custom type axisImaGroupTestLinkIfIndex based on Integer32"""
    defaultValue = -1


_AxisImaGroupTestLinkIfIndex_Object = MibTableColumn
axisImaGroupTestLinkIfIndex = _AxisImaGroupTestLinkIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 20),
    _AxisImaGroupTestLinkIfIndex_Type()
)
axisImaGroupTestLinkIfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    axisImaGroupTestLinkIfIndex.setStatus("mandatory")


class _AxisImaGroupTestPattern_Type(Integer32):
    """Custom type axisImaGroupTestPattern based on Integer32"""
    defaultValue = -1


_AxisImaGroupTestPattern_Object = MibTableColumn
axisImaGroupTestPattern = _AxisImaGroupTestPattern_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 21),
    _AxisImaGroupTestPattern_Type()
)
axisImaGroupTestPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    axisImaGroupTestPattern.setStatus("mandatory")


class _AxisImaGroupTestProcStatus_Type(Integer32):
    """Custom type axisImaGroupTestProcStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("linkfail", 3),
          ("operating", 2))
    )


_AxisImaGroupTestProcStatus_Type.__name__ = "Integer32"
_AxisImaGroupTestProcStatus_Object = MibTableColumn
axisImaGroupTestProcStatus = _AxisImaGroupTestProcStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 22),
    _AxisImaGroupTestProcStatus_Type()
)
axisImaGroupTestProcStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    axisImaGroupTestProcStatus.setStatus("mandatory")


class _AxisImaGroupIntegrationUpTime_Type(Integer32):
    """Custom type axisImaGroupIntegrationUpTime based on Integer32"""
    defaultValue = 2500

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 100000),
    )


_AxisImaGroupIntegrationUpTime_Type.__name__ = "Integer32"
_AxisImaGroupIntegrationUpTime_Object = MibTableColumn
axisImaGroupIntegrationUpTime = _AxisImaGroupIntegrationUpTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 23),
    _AxisImaGroupIntegrationUpTime_Type()
)
axisImaGroupIntegrationUpTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    axisImaGroupIntegrationUpTime.setStatus("mandatory")


class _AxisImaGroupIntegrationDownTime_Type(Integer32):
    """Custom type axisImaGroupIntegrationDownTime based on Integer32"""
    defaultValue = 10000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 400000),
    )


_AxisImaGroupIntegrationDownTime_Type.__name__ = "Integer32"
_AxisImaGroupIntegrationDownTime_Object = MibTableColumn
axisImaGroupIntegrationDownTime = _AxisImaGroupIntegrationDownTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 24),
    _AxisImaGroupIntegrationDownTime_Type()
)
axisImaGroupIntegrationDownTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    axisImaGroupIntegrationDownTime.setStatus("mandatory")


class _AxisImaGroupMinNumTxLinks_Type(Integer32):
    """Custom type axisImaGroupMinNumTxLinks based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_AxisImaGroupMinNumTxLinks_Type.__name__ = "Integer32"
_AxisImaGroupMinNumTxLinks_Object = MibTableColumn
axisImaGroupMinNumTxLinks = _AxisImaGroupMinNumTxLinks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 25),
    _AxisImaGroupMinNumTxLinks_Type()
)
axisImaGroupMinNumTxLinks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    axisImaGroupMinNumTxLinks.setStatus("mandatory")


class _AxisImaGroupRxImaId_Type(Integer32):
    """Custom type axisImaGroupRxImaId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AxisImaGroupRxImaId_Type.__name__ = "Integer32"
_AxisImaGroupRxImaId_Object = MibTableColumn
axisImaGroupRxImaId = _AxisImaGroupRxImaId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 1, 1, 26),
    _AxisImaGroupRxImaId_Type()
)
axisImaGroupRxImaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupRxImaId.setStatus("mandatory")


class _NextPortNumAvailable_Type(Integer32):
    """Custom type nextPortNumAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_NextPortNumAvailable_Type.__name__ = "Integer32"
_NextPortNumAvailable_Object = MibScalar
nextPortNumAvailable = _NextPortNumAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 4, 2),
    _NextPortNumAvailable_Type()
)
nextPortNumAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nextPortNumAvailable.setStatus("mandatory")
_AusmPortCnfResPartGrp_ObjectIdentity = ObjectIdentity
ausmPortCnfResPartGrp = _AusmPortCnfResPartGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5)
)
_AusmPortCnfResPartGrpTable_Object = MibTable
ausmPortCnfResPartGrpTable = _AusmPortCnfResPartGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1)
)
if mibBuilder.loadTexts:
    ausmPortCnfResPartGrpTable.setStatus("mandatory")
_AusmPortCnfResPartGrpEntry_Object = MibTableRow
ausmPortCnfResPartGrpEntry = _AusmPortCnfResPartGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1)
)
ausmPortCnfResPartGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ausmResPartPortNum"),
)
if mibBuilder.loadTexts:
    ausmPortCnfResPartGrpEntry.setStatus("mandatory")


class _AusmResPartPortNum_Type(Integer32):
    """Custom type ausmResPartPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_AusmResPartPortNum_Type.__name__ = "Integer32"
_AusmResPartPortNum_Object = MibTableColumn
ausmResPartPortNum = _AusmResPartPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 1),
    _AusmResPartPortNum_Type()
)
ausmResPartPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmResPartPortNum.setStatus("mandatory")


class _AusmPortSvcInUse_Type(Integer32):
    """Custom type ausmPortSvcInUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inUse", 1),
          ("notInUse", 2))
    )


_AusmPortSvcInUse_Type.__name__ = "Integer32"
_AusmPortSvcInUse_Object = MibTableColumn
ausmPortSvcInUse = _AusmPortSvcInUse_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 2),
    _AusmPortSvcInUse_Type()
)
ausmPortSvcInUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortSvcInUse.setStatus("mandatory")


class _AusmPortSvcShareLcnVpid_Type(Integer32):
    """Custom type ausmPortSvcShareLcnVpid based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("cardBased", 2),
          ("portBased", 1))
    )


_AusmPortSvcShareLcnVpid_Type.__name__ = "Integer32"
_AusmPortSvcShareLcnVpid_Object = MibTableColumn
ausmPortSvcShareLcnVpid = _AusmPortSvcShareLcnVpid_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 3),
    _AusmPortSvcShareLcnVpid_Type()
)
ausmPortSvcShareLcnVpid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmPortSvcShareLcnVpid.setStatus("mandatory")


class _AusmPortSvcLcnLow_Type(Integer32):
    """Custom type ausmPortSvcLcnLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 4111),
    )


_AusmPortSvcLcnLow_Type.__name__ = "Integer32"
_AusmPortSvcLcnLow_Object = MibTableColumn
ausmPortSvcLcnLow = _AusmPortSvcLcnLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 4),
    _AusmPortSvcLcnLow_Type()
)
ausmPortSvcLcnLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortSvcLcnLow.setStatus("mandatory")


class _AusmPortSvcLcnHigh_Type(Integer32):
    """Custom type ausmPortSvcLcnHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 4111),
    )


_AusmPortSvcLcnHigh_Type.__name__ = "Integer32"
_AusmPortSvcLcnHigh_Object = MibTableColumn
ausmPortSvcLcnHigh = _AusmPortSvcLcnHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 5),
    _AusmPortSvcLcnHigh_Type()
)
ausmPortSvcLcnHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortSvcLcnHigh.setStatus("mandatory")


class _AusmPortSvcVpidLow_Type(Integer32):
    """Custom type ausmPortSvcVpidLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AusmPortSvcVpidLow_Type.__name__ = "Integer32"
_AusmPortSvcVpidLow_Object = MibTableColumn
ausmPortSvcVpidLow = _AusmPortSvcVpidLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 6),
    _AusmPortSvcVpidLow_Type()
)
ausmPortSvcVpidLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortSvcVpidLow.setStatus("mandatory")


class _AusmPortSvcVpidHigh_Type(Integer32):
    """Custom type ausmPortSvcVpidHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AusmPortSvcVpidHigh_Type.__name__ = "Integer32"
_AusmPortSvcVpidHigh_Object = MibTableColumn
ausmPortSvcVpidHigh = _AusmPortSvcVpidHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 7),
    _AusmPortSvcVpidHigh_Type()
)
ausmPortSvcVpidHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortSvcVpidHigh.setStatus("mandatory")


class _AusmPortSvcVciLow_Type(Integer32):
    """Custom type ausmPortSvcVciLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AusmPortSvcVciLow_Type.__name__ = "Integer32"
_AusmPortSvcVciLow_Object = MibTableColumn
ausmPortSvcVciLow = _AusmPortSvcVciLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 8),
    _AusmPortSvcVciLow_Type()
)
ausmPortSvcVciLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortSvcVciLow.setStatus("mandatory")


class _AusmPortSvcVciHigh_Type(Integer32):
    """Custom type ausmPortSvcVciHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AusmPortSvcVciHigh_Type.__name__ = "Integer32"
_AusmPortSvcVciHigh_Object = MibTableColumn
ausmPortSvcVciHigh = _AusmPortSvcVciHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 9),
    _AusmPortSvcVciHigh_Type()
)
ausmPortSvcVciHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortSvcVciHigh.setStatus("mandatory")


class _AusmPortSvcVpiLow_Type(Integer32):
    """Custom type ausmPortSvcVpiLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_AusmPortSvcVpiLow_Type.__name__ = "Integer32"
_AusmPortSvcVpiLow_Object = MibTableColumn
ausmPortSvcVpiLow = _AusmPortSvcVpiLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 10),
    _AusmPortSvcVpiLow_Type()
)
ausmPortSvcVpiLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortSvcVpiLow.setStatus("mandatory")


class _AusmPortSvcVpiHigh_Type(Integer32):
    """Custom type ausmPortSvcVpiHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_AusmPortSvcVpiHigh_Type.__name__ = "Integer32"
_AusmPortSvcVpiHigh_Object = MibTableColumn
ausmPortSvcVpiHigh = _AusmPortSvcVpiHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 11),
    _AusmPortSvcVpiHigh_Type()
)
ausmPortSvcVpiHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortSvcVpiHigh.setStatus("mandatory")


class _AusmPortIngrSvcBandW_Type(Integer32):
    """Custom type ausmPortIngrSvcBandW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_AusmPortIngrSvcBandW_Type.__name__ = "Integer32"
_AusmPortIngrSvcBandW_Object = MibTableColumn
ausmPortIngrSvcBandW = _AusmPortIngrSvcBandW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 12),
    _AusmPortIngrSvcBandW_Type()
)
ausmPortIngrSvcBandW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortIngrSvcBandW.setStatus("mandatory")


class _AusmPortEgrSvcBandW_Type(Integer32):
    """Custom type ausmPortEgrSvcBandW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_AusmPortEgrSvcBandW_Type.__name__ = "Integer32"
_AusmPortEgrSvcBandW_Object = MibTableColumn
ausmPortEgrSvcBandW = _AusmPortEgrSvcBandW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 5, 1, 1, 13),
    _AusmPortEgrSvcBandW_Type()
)
ausmPortEgrSvcBandW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortEgrSvcBandW.setStatus("mandatory")
_AusmPortDelSvcsGrp_ObjectIdentity = ObjectIdentity
ausmPortDelSvcsGrp = _AusmPortDelSvcsGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 6)
)
_AusmPortDelSvcsGrpTable_Object = MibTable
ausmPortDelSvcsGrpTable = _AusmPortDelSvcsGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 6, 1)
)
if mibBuilder.loadTexts:
    ausmPortDelSvcsGrpTable.setStatus("mandatory")
_AusmPortDelSvcsGrpEntry_Object = MibTableRow
ausmPortDelSvcsGrpEntry = _AusmPortDelSvcsGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 6, 1, 1)
)
ausmPortDelSvcsGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ausmDelSvcsPortNum"),
)
if mibBuilder.loadTexts:
    ausmPortDelSvcsGrpEntry.setStatus("mandatory")


class _AusmDelSvcsPortNum_Type(Integer32):
    """Custom type ausmDelSvcsPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_AusmDelSvcsPortNum_Type.__name__ = "Integer32"
_AusmDelSvcsPortNum_Object = MibTableColumn
ausmDelSvcsPortNum = _AusmDelSvcsPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 6, 1, 1, 1),
    _AusmDelSvcsPortNum_Type()
)
ausmDelSvcsPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmDelSvcsPortNum.setStatus("mandatory")


class _AusmPortDeleteSvcs_Type(Integer32):
    """Custom type ausmPortDeleteSvcs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("delete", 1),
          ("other", 2))
    )


_AusmPortDeleteSvcs_Type.__name__ = "Integer32"
_AusmPortDeleteSvcs_Object = MibTableColumn
ausmPortDeleteSvcs = _AusmPortDeleteSvcs_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 6, 1, 1, 2),
    _AusmPortDeleteSvcs_Type()
)
ausmPortDeleteSvcs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortDeleteSvcs.setStatus("mandatory")
_AusmPortImaGrpRestart_ObjectIdentity = ObjectIdentity
ausmPortImaGrpRestart = _AusmPortImaGrpRestart_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 7)
)
_AusmPortImaGrpRestartTable_Object = MibTable
ausmPortImaGrpRestartTable = _AusmPortImaGrpRestartTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 7, 1)
)
if mibBuilder.loadTexts:
    ausmPortImaGrpRestartTable.setStatus("mandatory")
_AusmPortImaGrpRestartEntry_Object = MibTableRow
ausmPortImaGrpRestartEntry = _AusmPortImaGrpRestartEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 7, 1, 1)
)
ausmPortImaGrpRestartEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "axisImaGroupimaPortNum"),
)
if mibBuilder.loadTexts:
    ausmPortImaGrpRestartEntry.setStatus("mandatory")


class _AxisImaGroupimaPortNum_Type(Integer32):
    """Custom type axisImaGroupimaPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_AxisImaGroupimaPortNum_Type.__name__ = "Integer32"
_AxisImaGroupimaPortNum_Object = MibTableColumn
axisImaGroupimaPortNum = _AxisImaGroupimaPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 7, 1, 1, 1),
    _AxisImaGroupimaPortNum_Type()
)
axisImaGroupimaPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupimaPortNum.setStatus("mandatory")


class _AxisImaGroupRestartImaGrp_Type(Integer32):
    """Custom type axisImaGroupRestartImaGrp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dorelearn", 3),
          ("noAction", 1),
          ("persistent", 2))
    )


_AxisImaGroupRestartImaGrp_Type.__name__ = "Integer32"
_AxisImaGroupRestartImaGrp_Object = MibTableColumn
axisImaGroupRestartImaGrp = _AxisImaGroupRestartImaGrp_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 1, 7, 1, 1, 2),
    _AxisImaGroupRestartImaGrp_Type()
)
axisImaGroupRestartImaGrp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    axisImaGroupRestartImaGrp.setStatus("mandatory")
_AusmPortStateGrp_ObjectIdentity = ObjectIdentity
ausmPortStateGrp = _AusmPortStateGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2)
)
_AusmPortStateGrpTable_Object = MibTable
ausmPortStateGrpTable = _AusmPortStateGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1)
)
if mibBuilder.loadTexts:
    ausmPortStateGrpTable.setStatus("mandatory")
_AusmPortStateGrpEntry_Object = MibTableRow
ausmPortStateGrpEntry = _AusmPortStateGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1, 1)
)
ausmPortStateGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ausmStatePortNum"),
)
if mibBuilder.loadTexts:
    ausmPortStateGrpEntry.setStatus("mandatory")


class _AusmStatePortNum_Type(Integer32):
    """Custom type ausmStatePortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_AusmStatePortNum_Type.__name__ = "Integer32"
_AusmStatePortNum_Object = MibTableColumn
ausmStatePortNum = _AusmStatePortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1, 1, 1),
    _AusmStatePortNum_Type()
)
ausmStatePortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmStatePortNum.setStatus("mandatory")


class _AusmPortState_Type(Integer32):
    """Custom type ausmPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("linefailure", 4),
          ("localloopback", 7),
          ("notConfigured", 1),
          ("outofcelldelineation", 6),
          ("remoteloopback", 3),
          ("signallingfailure", 5))
    )


_AusmPortState_Type.__name__ = "Integer32"
_AusmPortState_Object = MibTableColumn
ausmPortState = _AusmPortState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1, 1, 2),
    _AusmPortState_Type()
)
ausmPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmPortState.setStatus("mandatory")


class _AusmPortOversubscribed_Type(Integer32):
    """Custom type ausmPortOversubscribed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_AusmPortOversubscribed_Type.__name__ = "Integer32"
_AusmPortOversubscribed_Object = MibTableColumn
ausmPortOversubscribed = _AusmPortOversubscribed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1, 1, 3),
    _AusmPortOversubscribed_Type()
)
ausmPortOversubscribed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmPortOversubscribed.setStatus("mandatory")


class _AusmPortIngrPercentUtil_Type(Integer32):
    """Custom type ausmPortIngrPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_AusmPortIngrPercentUtil_Type.__name__ = "Integer32"
_AusmPortIngrPercentUtil_Object = MibTableColumn
ausmPortIngrPercentUtil = _AusmPortIngrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1, 1, 4),
    _AusmPortIngrPercentUtil_Type()
)
ausmPortIngrPercentUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmPortIngrPercentUtil.setStatus("mandatory")


class _AusmPortEgrPercentUtil_Type(Integer32):
    """Custom type ausmPortEgrPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_AusmPortEgrPercentUtil_Type.__name__ = "Integer32"
_AusmPortEgrPercentUtil_Object = MibTableColumn
ausmPortEgrPercentUtil = _AusmPortEgrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 2, 1, 1, 5),
    _AusmPortEgrPercentUtil_Type()
)
ausmPortEgrPercentUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmPortEgrPercentUtil.setStatus("mandatory")
_AusmPortCntPortGrp_ObjectIdentity = ObjectIdentity
ausmPortCntPortGrp = _AusmPortCntPortGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1)
)
_AusmPortCntPortGrpTable_Object = MibTable
ausmPortCntPortGrpTable = _AusmPortCntPortGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1)
)
if mibBuilder.loadTexts:
    ausmPortCntPortGrpTable.setStatus("mandatory")
_AusmPortCntPortGrpEntry_Object = MibTableRow
ausmPortCntPortGrpEntry = _AusmPortCntPortGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1)
)
ausmPortCntPortGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ausmCntPortNum"),
)
if mibBuilder.loadTexts:
    ausmPortCntPortGrpEntry.setStatus("mandatory")


class _AusmCntPortNum_Type(Integer32):
    """Custom type ausmCntPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_AusmCntPortNum_Type.__name__ = "Integer32"
_AusmCntPortNum_Object = MibTableColumn
ausmCntPortNum = _AusmCntPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 1),
    _AusmCntPortNum_Type()
)
ausmCntPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmCntPortNum.setStatus("mandatory")
_IngrRcvCells_Type = Counter32
_IngrRcvCells_Object = MibTableColumn
ingrRcvCells = _IngrRcvCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 2),
    _IngrRcvCells_Type()
)
ingrRcvCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ingrRcvCells.setStatus("mandatory")
_IngrGfcErrCells_Type = Counter32
_IngrGfcErrCells_Object = MibTableColumn
ingrGfcErrCells = _IngrGfcErrCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 3),
    _IngrGfcErrCells_Type()
)
ingrGfcErrCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ingrGfcErrCells.setStatus("mandatory")
_IngrVpiVciErrCells_Type = Counter32
_IngrVpiVciErrCells_Object = MibTableColumn
ingrVpiVciErrCells = _IngrVpiVciErrCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 4),
    _IngrVpiVciErrCells_Type()
)
ingrVpiVciErrCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ingrVpiVciErrCells.setStatus("mandatory")


class _IngrLastUnknVpiVci_Type(Integer32):
    """Custom type ingrLastUnknVpiVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_IngrLastUnknVpiVci_Type.__name__ = "Integer32"
_IngrLastUnknVpiVci_Object = MibTableColumn
ingrLastUnknVpiVci = _IngrLastUnknVpiVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 5),
    _IngrLastUnknVpiVci_Type()
)
ingrLastUnknVpiVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ingrLastUnknVpiVci.setStatus("mandatory")
_EgrXmtCells_Type = Counter32
_EgrXmtCells_Object = MibTableColumn
egrXmtCells = _EgrXmtCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 6),
    _EgrXmtCells_Type()
)
egrXmtCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrXmtCells.setStatus("mandatory")
_EgrPortAlarmDiscardCells_Type = Counter32
_EgrPortAlarmDiscardCells_Object = MibTableColumn
egrPortAlarmDiscardCells = _EgrPortAlarmDiscardCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 7),
    _EgrPortAlarmDiscardCells_Type()
)
egrPortAlarmDiscardCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrPortAlarmDiscardCells.setStatus("mandatory")
_EgrXmtClpSetCells_Type = Counter32
_EgrXmtClpSetCells_Object = MibTableColumn
egrXmtClpSetCells = _EgrXmtClpSetCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 8),
    _EgrXmtClpSetCells_Type()
)
egrXmtClpSetCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrXmtClpSetCells.setStatus("mandatory")
_EgrXmtEfciSetCells_Type = Counter32
_EgrXmtEfciSetCells_Object = MibTableColumn
egrXmtEfciSetCells = _EgrXmtEfciSetCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 9),
    _EgrXmtEfciSetCells_Type()
)
egrXmtEfciSetCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrXmtEfciSetCells.setStatus("mandatory")
_PortXmtAisCells_Type = Counter32
_PortXmtAisCells_Object = MibTableColumn
portXmtAisCells = _PortXmtAisCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 10),
    _PortXmtAisCells_Type()
)
portXmtAisCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portXmtAisCells.setStatus("mandatory")
_PortXmtSgmtLpbkCells_Type = Counter32
_PortXmtSgmtLpbkCells_Object = MibTableColumn
portXmtSgmtLpbkCells = _PortXmtSgmtLpbkCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 11),
    _PortXmtSgmtLpbkCells_Type()
)
portXmtSgmtLpbkCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portXmtSgmtLpbkCells.setStatus("mandatory")
_PortRcvAisCells_Type = Counter32
_PortRcvAisCells_Object = MibTableColumn
portRcvAisCells = _PortRcvAisCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 12),
    _PortRcvAisCells_Type()
)
portRcvAisCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portRcvAisCells.setStatus("mandatory")
_PortRcvFerfCells_Type = Counter32
_PortRcvFerfCells_Object = MibTableColumn
portRcvFerfCells = _PortRcvFerfCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 13),
    _PortRcvFerfCells_Type()
)
portRcvFerfCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portRcvFerfCells.setStatus("mandatory")
_PortRcvSgmtLpbkCells_Type = Counter32
_PortRcvSgmtLpbkCells_Object = MibTableColumn
portRcvSgmtLpbkCells = _PortRcvSgmtLpbkCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 14),
    _PortRcvSgmtLpbkCells_Type()
)
portRcvSgmtLpbkCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portRcvSgmtLpbkCells.setStatus("mandatory")
_PortRcvCrcErrOAMCells_Type = Counter32
_PortRcvCrcErrOAMCells_Object = MibTableColumn
portRcvCrcErrOAMCells = _PortRcvCrcErrOAMCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 15),
    _PortRcvCrcErrOAMCells_Type()
)
portRcvCrcErrOAMCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portRcvCrcErrOAMCells.setStatus("mandatory")


class _AusmPortClrButton_Type(Integer32):
    """Custom type ausmPortClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAction", 1),
          ("resetCounters", 2))
    )


_AusmPortClrButton_Type.__name__ = "Integer32"
_AusmPortClrButton_Object = MibTableColumn
ausmPortClrButton = _AusmPortClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 16),
    _AusmPortClrButton_Type()
)
ausmPortClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmPortClrButton.setStatus("mandatory")
_IngrRcvClpSetCells_Type = Counter32
_IngrRcvClpSetCells_Object = MibTableColumn
ingrRcvClpSetCells = _IngrRcvClpSetCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 17),
    _IngrRcvClpSetCells_Type()
)
ingrRcvClpSetCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ingrRcvClpSetCells.setStatus("mandatory")
_IngrXmtCells_Type = Counter32
_IngrXmtCells_Object = MibTableColumn
ingrXmtCells = _IngrXmtCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 18),
    _IngrXmtCells_Type()
)
ingrXmtCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ingrXmtCells.setStatus("mandatory")
_EgrRcvCells_Type = Counter32
_EgrRcvCells_Object = MibTableColumn
egrRcvCells = _EgrRcvCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 19),
    _EgrRcvCells_Type()
)
egrRcvCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrRcvCells.setStatus("mandatory")
_IngrRcvCellRate_Type = Gauge32
_IngrRcvCellRate_Object = MibTableColumn
ingrRcvCellRate = _IngrRcvCellRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 20),
    _IngrRcvCellRate_Type()
)
ingrRcvCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ingrRcvCellRate.setStatus("mandatory")
_IngrRcvUtilization_Type = Gauge32
_IngrRcvUtilization_Object = MibTableColumn
ingrRcvUtilization = _IngrRcvUtilization_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 21),
    _IngrRcvUtilization_Type()
)
ingrRcvUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ingrRcvUtilization.setStatus("mandatory")
_EgrXmtCellRate_Type = Gauge32
_EgrXmtCellRate_Object = MibTableColumn
egrXmtCellRate = _EgrXmtCellRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 22),
    _EgrXmtCellRate_Type()
)
egrXmtCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrXmtCellRate.setStatus("mandatory")
_EgrXmtUtilization_Type = Gauge32
_EgrXmtUtilization_Object = MibTableColumn
egrXmtUtilization = _EgrXmtUtilization_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 23),
    _EgrXmtUtilization_Type()
)
egrXmtUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrXmtUtilization.setStatus("mandatory")
_EgrRcvCellRate_Type = Gauge32
_EgrRcvCellRate_Object = MibTableColumn
egrRcvCellRate = _EgrRcvCellRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 24),
    _EgrRcvCellRate_Type()
)
egrRcvCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrRcvCellRate.setStatus("mandatory")
_EgrRcvUtilization_Type = Gauge32
_EgrRcvUtilization_Object = MibTableColumn
egrRcvUtilization = _EgrRcvUtilization_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 25),
    _EgrRcvUtilization_Type()
)
egrRcvUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    egrRcvUtilization.setStatus("mandatory")
_TotalIngrQfulldiscardCells_Type = Counter32
_TotalIngrQfulldiscardCells_Object = MibTableColumn
totalIngrQfulldiscardCells = _TotalIngrQfulldiscardCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 26),
    _TotalIngrQfulldiscardCells_Type()
)
totalIngrQfulldiscardCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    totalIngrQfulldiscardCells.setStatus("mandatory")
_TxFifoFullCnt_Type = Counter32
_TxFifoFullCnt_Object = MibTableColumn
txFifoFullCnt = _TxFifoFullCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 27),
    _TxFifoFullCnt_Type()
)
txFifoFullCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    txFifoFullCnt.setStatus("mandatory")
_TotalIngrClpSetDiscardCells_Type = Counter32
_TotalIngrClpSetDiscardCells_Object = MibTableColumn
totalIngrClpSetDiscardCells = _TotalIngrClpSetDiscardCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 1, 1, 1, 28),
    _TotalIngrClpSetDiscardCells_Type()
)
totalIngrClpSetDiscardCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    totalIngrClpSetDiscardCells.setStatus("mandatory")
_AusmPortCntSig_ObjectIdentity = ObjectIdentity
ausmPortCntSig = _AusmPortCntSig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2)
)
_AusmPortCntSigILMIGrp_ObjectIdentity = ObjectIdentity
ausmPortCntSigILMIGrp = _AusmPortCntSigILMIGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1)
)
_AusmPortCntSigILMIGrpTable_Object = MibTable
ausmPortCntSigILMIGrpTable = _AusmPortCntSigILMIGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1)
)
if mibBuilder.loadTexts:
    ausmPortCntSigILMIGrpTable.setStatus("mandatory")
_AusmPortCntSigILMIGrpEntry_Object = MibTableRow
ausmPortCntSigILMIGrpEntry = _AusmPortCntSigILMIGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1)
)
ausmPortCntSigILMIGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "sigCntPortNum"),
)
if mibBuilder.loadTexts:
    ausmPortCntSigILMIGrpEntry.setStatus("mandatory")


class _SigCntPortNum_Type(Integer32):
    """Custom type sigCntPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_SigCntPortNum_Type.__name__ = "Integer32"
_SigCntPortNum_Object = MibTableColumn
sigCntPortNum = _SigCntPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 1),
    _SigCntPortNum_Type()
)
sigCntPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sigCntPortNum.setStatus("mandatory")
_SnmpPduReceived_Type = Counter32
_SnmpPduReceived_Object = MibTableColumn
snmpPduReceived = _SnmpPduReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 2),
    _SnmpPduReceived_Type()
)
snmpPduReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    snmpPduReceived.setStatus("mandatory")
_GetRequestReceived_Type = Counter32
_GetRequestReceived_Object = MibTableColumn
getRequestReceived = _GetRequestReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 3),
    _GetRequestReceived_Type()
)
getRequestReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    getRequestReceived.setStatus("mandatory")
_GetNextRequestReceived_Type = Counter32
_GetNextRequestReceived_Object = MibTableColumn
getNextRequestReceived = _GetNextRequestReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 4),
    _GetNextRequestReceived_Type()
)
getNextRequestReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    getNextRequestReceived.setStatus("mandatory")
_SetRequestReceived_Type = Counter32
_SetRequestReceived_Object = MibTableColumn
setRequestReceived = _SetRequestReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 5),
    _SetRequestReceived_Type()
)
setRequestReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    setRequestReceived.setStatus("mandatory")
_TrapReceived_Type = Counter32
_TrapReceived_Object = MibTableColumn
trapReceived = _TrapReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 6),
    _TrapReceived_Type()
)
trapReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trapReceived.setStatus("mandatory")
_GetResponseReceived_Type = Counter32
_GetResponseReceived_Object = MibTableColumn
getResponseReceived = _GetResponseReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 7),
    _GetResponseReceived_Type()
)
getResponseReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    getResponseReceived.setStatus("mandatory")
_GetResponseTransmitted_Type = Counter32
_GetResponseTransmitted_Object = MibTableColumn
getResponseTransmitted = _GetResponseTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 8),
    _GetResponseTransmitted_Type()
)
getResponseTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    getResponseTransmitted.setStatus("mandatory")
_GetRequestTransmitted_Type = Counter32
_GetRequestTransmitted_Object = MibTableColumn
getRequestTransmitted = _GetRequestTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 9),
    _GetRequestTransmitted_Type()
)
getRequestTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    getRequestTransmitted.setStatus("mandatory")
_TrapTransmitted_Type = Counter32
_TrapTransmitted_Object = MibTableColumn
trapTransmitted = _TrapTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 10),
    _TrapTransmitted_Type()
)
trapTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trapTransmitted.setStatus("mandatory")
_InvalidPDUReceived_Type = Counter32
_InvalidPDUReceived_Object = MibTableColumn
invalidPDUReceived = _InvalidPDUReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 11),
    _InvalidPDUReceived_Type()
)
invalidPDUReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    invalidPDUReceived.setStatus("mandatory")
_Asn1ParseError_Type = Counter32
_Asn1ParseError_Object = MibTableColumn
asn1ParseError = _Asn1ParseError_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 12),
    _Asn1ParseError_Type()
)
asn1ParseError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    asn1ParseError.setStatus("mandatory")
_NoSuchNameError_Type = Counter32
_NoSuchNameError_Object = MibTableColumn
noSuchNameError = _NoSuchNameError_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 13),
    _NoSuchNameError_Type()
)
noSuchNameError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    noSuchNameError.setStatus("mandatory")
_TooBigError_Type = Counter32
_TooBigError_Object = MibTableColumn
tooBigError = _TooBigError_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 14),
    _TooBigError_Type()
)
tooBigError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tooBigError.setStatus("mandatory")


class _PortSigClrButton_Type(Integer32):
    """Custom type portSigClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAction", 1),
          ("resetCounters", 2))
    )


_PortSigClrButton_Type.__name__ = "Integer32"
_PortSigClrButton_Object = MibTableColumn
portSigClrButton = _PortSigClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 2, 1, 1, 1, 15),
    _PortSigClrButton_Type()
)
portSigClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portSigClrButton.setStatus("mandatory")
_AusmPortCntPortImaGrp_ObjectIdentity = ObjectIdentity
ausmPortCntPortImaGrp = _AusmPortCntPortImaGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3)
)
_AusmPortCntPortImaGrpTable_Object = MibTable
ausmPortCntPortImaGrpTable = _AusmPortCntPortImaGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1)
)
if mibBuilder.loadTexts:
    ausmPortCntPortImaGrpTable.setStatus("mandatory")
_AusmPortCntPortImaGrpEntry_Object = MibTableRow
ausmPortCntPortImaGrpEntry = _AusmPortCntPortImaGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1)
)
ausmPortCntPortImaGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "imaCntPortNum"),
)
if mibBuilder.loadTexts:
    ausmPortCntPortImaGrpEntry.setStatus("mandatory")


class _ImaCntPortNum_Type(Integer32):
    """Custom type imaCntPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_ImaCntPortNum_Type.__name__ = "Integer32"
_ImaCntPortNum_Object = MibTableColumn
imaCntPortNum = _ImaCntPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 1),
    _ImaCntPortNum_Type()
)
imaCntPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaCntPortNum.setStatus("mandatory")
_RcvAcpCells_Type = Counter32
_RcvAcpCells_Object = MibTableColumn
rcvAcpCells = _RcvAcpCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 2),
    _RcvAcpCells_Type()
)
rcvAcpCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvAcpCells.setStatus("mandatory")
_RcvAcpErrCells_Type = Counter32
_RcvAcpErrCells_Object = MibTableColumn
rcvAcpErrCells = _RcvAcpErrCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 3),
    _RcvAcpErrCells_Type()
)
rcvAcpErrCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rcvAcpErrCells.setStatus("mandatory")
_XmtAcpCells_Type = Counter32
_XmtAcpCells_Object = MibTableColumn
xmtAcpCells = _XmtAcpCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 4),
    _XmtAcpCells_Type()
)
xmtAcpCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtAcpCells.setStatus("mandatory")
_XmtAcpCellsMissed_Type = Counter32
_XmtAcpCellsMissed_Object = MibTableColumn
xmtAcpCellsMissed = _XmtAcpCellsMissed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 5),
    _XmtAcpCellsMissed_Type()
)
xmtAcpCellsMissed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xmtAcpCellsMissed.setStatus("mandatory")
_ImaGrpRcvHecErrCount_Type = Counter32
_ImaGrpRcvHecErrCount_Object = MibTableColumn
imaGrpRcvHecErrCount = _ImaGrpRcvHecErrCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 6),
    _ImaGrpRcvHecErrCount_Type()
)
imaGrpRcvHecErrCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGrpRcvHecErrCount.setStatus("mandatory")
_ImaGrpRcvHecErrSecCount_Type = Counter32
_ImaGrpRcvHecErrSecCount_Object = MibTableColumn
imaGrpRcvHecErrSecCount = _ImaGrpRcvHecErrSecCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 7),
    _ImaGrpRcvHecErrSecCount_Type()
)
imaGrpRcvHecErrSecCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGrpRcvHecErrSecCount.setStatus("mandatory")
_ImaGrpRcvHecErrSESecCount_Type = Counter32
_ImaGrpRcvHecErrSESecCount_Object = MibTableColumn
imaGrpRcvHecErrSESecCount = _ImaGrpRcvHecErrSESecCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 8),
    _ImaGrpRcvHecErrSESecCount_Type()
)
imaGrpRcvHecErrSESecCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaGrpRcvHecErrSESecCount.setStatus("mandatory")


class _ImaCntClrButton_Type(Integer32):
    """Custom type imaCntClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAction", 1),
          ("resetCounters", 2))
    )


_ImaCntClrButton_Type.__name__ = "Integer32"
_ImaCntClrButton_Object = MibTableColumn
imaCntClrButton = _ImaCntClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 9),
    _ImaCntClrButton_Type()
)
imaCntClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imaCntClrButton.setStatus("mandatory")
_AxisImaGroupRunningSecs_Type = Integer32
_AxisImaGroupRunningSecs_Object = MibTableColumn
axisImaGroupRunningSecs = _AxisImaGroupRunningSecs_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 10),
    _AxisImaGroupRunningSecs_Type()
)
axisImaGroupRunningSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupRunningSecs.setStatus("mandatory")
_AxisImaGroupUnavailSecs_Type = Integer32
_AxisImaGroupUnavailSecs_Object = MibTableColumn
axisImaGroupUnavailSecs = _AxisImaGroupUnavailSecs_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 11),
    _AxisImaGroupUnavailSecs_Type()
)
axisImaGroupUnavailSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupUnavailSecs.setStatus("mandatory")
_AxisImaGroupNeNumFailures_Type = Integer32
_AxisImaGroupNeNumFailures_Object = MibTableColumn
axisImaGroupNeNumFailures = _AxisImaGroupNeNumFailures_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 12),
    _AxisImaGroupNeNumFailures_Type()
)
axisImaGroupNeNumFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupNeNumFailures.setStatus("mandatory")
_AxisImaGroupFeNumFailures_Type = Integer32
_AxisImaGroupFeNumFailures_Object = MibTableColumn
axisImaGroupFeNumFailures = _AxisImaGroupFeNumFailures_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 3, 3, 1, 1, 13),
    _AxisImaGroupFeNumFailures_Type()
)
axisImaGroupFeNumFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupFeNumFailures.setStatus("mandatory")
_AusmPortStateImaGrp_ObjectIdentity = ObjectIdentity
ausmPortStateImaGrp = _AusmPortStateImaGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4)
)
_AusmPortStateImaGrpTable_Object = MibTable
ausmPortStateImaGrpTable = _AusmPortStateImaGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1)
)
if mibBuilder.loadTexts:
    ausmPortStateImaGrpTable.setStatus("mandatory")
_AusmPortStateImaGrpEntry_Object = MibTableRow
ausmPortStateImaGrpEntry = _AusmPortStateImaGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1)
)
ausmPortStateImaGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "imaStatePortNum"),
)
if mibBuilder.loadTexts:
    ausmPortStateImaGrpEntry.setStatus("mandatory")


class _ImaStatePortNum_Type(Integer32):
    """Custom type imaStatePortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_ImaStatePortNum_Type.__name__ = "Integer32"
_ImaStatePortNum_Object = MibTableColumn
imaStatePortNum = _ImaStatePortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 1),
    _ImaStatePortNum_Type()
)
imaStatePortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaStatePortNum.setStatus("mandatory")


class _ImaPortState_Type(Integer32):
    """Custom type imaPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              20)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("bandwidthChanged", 3),
          ("failedDueToAcpTimeout", 4),
          ("failedDueToArbConflict", 8),
          ("failedDueToBadDiffDelay", 7),
          ("failedDueToIlmiSignalling", 20),
          ("failedDueToImaSigFailure", 6),
          ("failedDueToMajorAlmonImaGrp", 5),
          ("receivingLoamAis", 9),
          ("receivingLoamRdi", 10),
          ("unconfigured", 1))
    )


_ImaPortState_Type.__name__ = "Integer32"
_ImaPortState_Object = MibTableColumn
imaPortState = _ImaPortState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 2),
    _ImaPortState_Type()
)
imaPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPortState.setStatus("mandatory")


class _NumLinksPresentInImaGroup_Type(Integer32):
    """Custom type numLinksPresentInImaGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_NumLinksPresentInImaGroup_Type.__name__ = "Integer32"
_NumLinksPresentInImaGroup_Object = MibTableColumn
numLinksPresentInImaGroup = _NumLinksPresentInImaGroup_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 3),
    _NumLinksPresentInImaGroup_Type()
)
numLinksPresentInImaGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    numLinksPresentInImaGroup.setStatus("mandatory")


class _ListLinksPresentInImaGroup_Type(DisplayString):
    """Custom type listLinksPresentInImaGroup based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 15),
    )


_ListLinksPresentInImaGroup_Type.__name__ = "DisplayString"
_ListLinksPresentInImaGroup_Object = MibTableColumn
listLinksPresentInImaGroup = _ListLinksPresentInImaGroup_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 4),
    _ListLinksPresentInImaGroup_Type()
)
listLinksPresentInImaGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    listLinksPresentInImaGroup.setStatus("mandatory")


class _RemoteImaId_Type(Integer32):
    """Custom type remoteImaId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RemoteImaId_Type.__name__ = "Integer32"
_RemoteImaId_Object = MibTableColumn
remoteImaId = _RemoteImaId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 5),
    _RemoteImaId_Type()
)
remoteImaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    remoteImaId.setStatus("mandatory")


class _LocImaId_Type(Integer32):
    """Custom type locImaId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_LocImaId_Type.__name__ = "Integer32"
_LocImaId_Object = MibTableColumn
locImaId = _LocImaId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 6),
    _LocImaId_Type()
)
locImaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    locImaId.setStatus("mandatory")


class _ImaArbitrationWinner_Type(Integer32):
    """Custom type imaArbitrationWinner based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("isLoser", 3),
          ("isUnknown", 1),
          ("isWinner", 2))
    )


_ImaArbitrationWinner_Type.__name__ = "Integer32"
_ImaArbitrationWinner_Object = MibTableColumn
imaArbitrationWinner = _ImaArbitrationWinner_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 7),
    _ImaArbitrationWinner_Type()
)
imaArbitrationWinner.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaArbitrationWinner.setStatus("mandatory")
_ImaObsDiffDelay_Type = Integer32
_ImaObsDiffDelay_Object = MibTableColumn
imaObsDiffDelay = _ImaObsDiffDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 8),
    _ImaObsDiffDelay_Type()
)
imaObsDiffDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaObsDiffDelay.setStatus("mandatory")


class _ImaPortOversubscribed_Type(Integer32):
    """Custom type imaPortOversubscribed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_ImaPortOversubscribed_Type.__name__ = "Integer32"
_ImaPortOversubscribed_Object = MibTableColumn
imaPortOversubscribed = _ImaPortOversubscribed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 9),
    _ImaPortOversubscribed_Type()
)
imaPortOversubscribed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPortOversubscribed.setStatus("mandatory")


class _ImaPortIngrPercentUtil_Type(Integer32):
    """Custom type imaPortIngrPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_ImaPortIngrPercentUtil_Type.__name__ = "Integer32"
_ImaPortIngrPercentUtil_Object = MibTableColumn
imaPortIngrPercentUtil = _ImaPortIngrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 10),
    _ImaPortIngrPercentUtil_Type()
)
imaPortIngrPercentUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPortIngrPercentUtil.setStatus("mandatory")


class _ImaPortEgrPercentUtil_Type(Integer32):
    """Custom type imaPortEgrPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_ImaPortEgrPercentUtil_Type.__name__ = "Integer32"
_ImaPortEgrPercentUtil_Object = MibTableColumn
imaPortEgrPercentUtil = _ImaPortEgrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 11),
    _ImaPortEgrPercentUtil_Type()
)
imaPortEgrPercentUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imaPortEgrPercentUtil.setStatus("mandatory")
_AxisImaGroupRxAvailCellRate_Type = Integer32
_AxisImaGroupRxAvailCellRate_Object = MibTableColumn
axisImaGroupRxAvailCellRate = _AxisImaGroupRxAvailCellRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 12),
    _AxisImaGroupRxAvailCellRate_Type()
)
axisImaGroupRxAvailCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupRxAvailCellRate.setStatus("mandatory")


class _AxisImaGroupFeState_Type(Integer32):
    """Custom type axisImaGroupFeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("blocked", 8),
          ("configAbortIncompatibleSymmetry", 5),
          ("configAbortOther", 6),
          ("configAbortUnsupportedM", 4),
          ("insufficientLinks", 7),
          ("notConfigured", 1),
          ("operational", 9),
          ("startUp", 2),
          ("startUpAck", 3))
    )


_AxisImaGroupFeState_Type.__name__ = "Integer32"
_AxisImaGroupFeState_Object = MibTableColumn
axisImaGroupFeState = _AxisImaGroupFeState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 13),
    _AxisImaGroupFeState_Type()
)
axisImaGroupFeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupFeState.setStatus("mandatory")


class _AxisImaGroupFailureStatus_Type(Integer32):
    """Custom type axisImaGroupFailureStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("blockedFe", 11),
          ("blockedNe", 10),
          ("failedAssymetricFe", 7),
          ("failedAssymetricNe", 6),
          ("insufficientLinksFe", 9),
          ("insufficientLinksNe", 8),
          ("invalidMValueFe", 5),
          ("invalidMValueNe", 4),
          ("noFailure", 1),
          ("otherFailure", 12),
          ("startUpFe", 3),
          ("startUpNe", 2))
    )


_AxisImaGroupFailureStatus_Type.__name__ = "Integer32"
_AxisImaGroupFailureStatus_Object = MibTableColumn
axisImaGroupFailureStatus = _AxisImaGroupFailureStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 14),
    _AxisImaGroupFailureStatus_Type()
)
axisImaGroupFailureStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupFailureStatus.setStatus("mandatory")


class _AxisImaGroupFeTxClkMode_Type(Integer32):
    """Custom type axisImaGroupFeTxClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ctc", 1),
          ("itc", 2))
    )


_AxisImaGroupFeTxClkMode_Type.__name__ = "Integer32"
_AxisImaGroupFeTxClkMode_Object = MibTableColumn
axisImaGroupFeTxClkMode = _AxisImaGroupFeTxClkMode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 15),
    _AxisImaGroupFeTxClkMode_Type()
)
axisImaGroupFeTxClkMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupFeTxClkMode.setStatus("mandatory")
_AxisImaGroupTxTimingRefLink_Type = Integer32
_AxisImaGroupTxTimingRefLink_Object = MibTableColumn
axisImaGroupTxTimingRefLink = _AxisImaGroupTxTimingRefLink_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 16),
    _AxisImaGroupTxTimingRefLink_Type()
)
axisImaGroupTxTimingRefLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupTxTimingRefLink.setStatus("mandatory")
_AxisImaGroupRxTimingRefLink_Type = Integer32
_AxisImaGroupRxTimingRefLink_Object = MibTableColumn
axisImaGroupRxTimingRefLink = _AxisImaGroupRxTimingRefLink_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 17),
    _AxisImaGroupRxTimingRefLink_Type()
)
axisImaGroupRxTimingRefLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupRxTimingRefLink.setStatus("mandatory")


class _AxisImaGroupLastChange_Type(OctetString):
    """Custom type axisImaGroupLastChange based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(11, 11),
    )


_AxisImaGroupLastChange_Type.__name__ = "OctetString"
_AxisImaGroupLastChange_Object = MibTableColumn
axisImaGroupLastChange = _AxisImaGroupLastChange_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 18),
    _AxisImaGroupLastChange_Type()
)
axisImaGroupLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupLastChange.setStatus("mandatory")


class _AxisImaGroupRxFrameLength_Type(Integer32):
    """Custom type axisImaGroupRxFrameLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(32,
              64,
              128,
              256)
        )
    )
    namedValues = NamedValues(
        *(("m128", 128),
          ("m256", 256),
          ("m32", 32),
          ("m64", 64))
    )


_AxisImaGroupRxFrameLength_Type.__name__ = "Integer32"
_AxisImaGroupRxFrameLength_Object = MibTableColumn
axisImaGroupRxFrameLength = _AxisImaGroupRxFrameLength_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 19),
    _AxisImaGroupRxFrameLength_Type()
)
axisImaGroupRxFrameLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupRxFrameLength.setStatus("mandatory")
_AxisImaGroupLeastDelayLink_Type = Integer32
_AxisImaGroupLeastDelayLink_Object = MibTableColumn
axisImaGroupLeastDelayLink = _AxisImaGroupLeastDelayLink_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 20),
    _AxisImaGroupLeastDelayLink_Type()
)
axisImaGroupLeastDelayLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupLeastDelayLink.setStatus("mandatory")
_AxisImaGroupNumRxActLnks_Type = Integer32
_AxisImaGroupNumRxActLnks_Object = MibTableColumn
axisImaGroupNumRxActLnks = _AxisImaGroupNumRxActLnks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 21),
    _AxisImaGroupNumRxActLnks_Type()
)
axisImaGroupNumRxActLnks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupNumRxActLnks.setStatus("mandatory")


class _AxisImaGroupNeState_Type(Integer32):
    """Custom type axisImaGroupNeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("blocked", 8),
          ("configAbortIncompatibleSymmetry", 5),
          ("configAbortOther", 6),
          ("configAbortUnsupportedM", 4),
          ("insufficientLinks", 7),
          ("notConfigured", 1),
          ("operational", 9),
          ("startUp", 2),
          ("startUpAck", 3))
    )


_AxisImaGroupNeState_Type.__name__ = "Integer32"
_AxisImaGroupNeState_Object = MibTableColumn
axisImaGroupNeState = _AxisImaGroupNeState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 1, 1, 22),
    _AxisImaGroupNeState_Type()
)
axisImaGroupNeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupNeState.setStatus("mandatory")
_AxisImaGroupNumber_Type = Integer32
_AxisImaGroupNumber_Object = MibScalar
axisImaGroupNumber = _AxisImaGroupNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 4, 2),
    _AxisImaGroupNumber_Type()
)
axisImaGroupNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    axisImaGroupNumber.setStatus("mandatory")
_AusmPortInterfaceGrp_ObjectIdentity = ObjectIdentity
ausmPortInterfaceGrp = _AusmPortInterfaceGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 5)
)
_AusmInterfaceConfTable_Object = MibTable
ausmInterfaceConfTable = _AusmInterfaceConfTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 5, 1)
)
if mibBuilder.loadTexts:
    ausmInterfaceConfTable.setStatus("mandatory")
_AusmInterfaceConfEntry_Object = MibTableRow
ausmInterfaceConfEntry = _AusmInterfaceConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 5, 1, 1)
)
ausmInterfaceConfEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ausmInterfacePortNum"),
)
if mibBuilder.loadTexts:
    ausmInterfaceConfEntry.setStatus("mandatory")


class _AusmInterfacePortNum_Type(Integer32):
    """Custom type ausmInterfacePortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_AusmInterfacePortNum_Type.__name__ = "Integer32"
_AusmInterfacePortNum_Object = MibTableColumn
ausmInterfacePortNum = _AusmInterfacePortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 5, 1, 1, 1),
    _AusmInterfacePortNum_Type()
)
ausmInterfacePortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmInterfacePortNum.setStatus("mandatory")
_AusmInterfaceMyNeighborIpAddress_Type = IpAddress
_AusmInterfaceMyNeighborIpAddress_Object = MibTableColumn
ausmInterfaceMyNeighborIpAddress = _AusmInterfaceMyNeighborIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 1, 5, 1, 1, 2),
    _AusmInterfaceMyNeighborIpAddress_Type()
)
ausmInterfaceMyNeighborIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmInterfaceMyNeighborIpAddress.setStatus("mandatory")
_AusmChanCnfGrp_ObjectIdentity = ObjectIdentity
ausmChanCnfGrp = _AusmChanCnfGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1)
)
_AusmChanCnfGrpTable_Object = MibTable
ausmChanCnfGrpTable = _AusmChanCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1)
)
if mibBuilder.loadTexts:
    ausmChanCnfGrpTable.setStatus("mandatory")
_AusmChanCnfGrpEntry_Object = MibTableRow
ausmChanCnfGrpEntry = _AusmChanCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1)
)
ausmChanCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ausmChanNum"),
)
if mibBuilder.loadTexts:
    ausmChanCnfGrpEntry.setStatus("mandatory")


class _AusmChanNum_Type(Integer32):
    """Custom type ausmChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 1015),
    )


_AusmChanNum_Type.__name__ = "Integer32"
_AusmChanNum_Object = MibTableColumn
ausmChanNum = _AusmChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 1),
    _AusmChanNum_Type()
)
ausmChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmChanNum.setStatus("mandatory")


class _AusmChanRowStatus_Type(Integer32):
    """Custom type ausmChanRowStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3),
          ("outOfService", 4))
    )


_AusmChanRowStatus_Type.__name__ = "Integer32"
_AusmChanRowStatus_Object = MibTableColumn
ausmChanRowStatus = _AusmChanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 2),
    _AusmChanRowStatus_Type()
)
ausmChanRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanRowStatus.setStatus("mandatory")


class _ChanConnType_Type(Integer32):
    """Custom type chanConnType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vcc", 2),
          ("vpc", 1))
    )


_ChanConnType_Type.__name__ = "Integer32"
_ChanConnType_Object = MibTableColumn
chanConnType = _ChanConnType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 3),
    _ChanConnType_Type()
)
chanConnType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanConnType.setStatus("mandatory")


class _ChanServiceType_Type(Integer32):
    """Custom type chanServiceType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("abr", 3),
          ("cbr", 1),
          ("rtvbr", 5),
          ("ubr", 4),
          ("vbr", 2))
    )


_ChanServiceType_Type.__name__ = "Integer32"
_ChanServiceType_Object = MibTableColumn
chanServiceType = _ChanServiceType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 4),
    _ChanServiceType_Type()
)
chanServiceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanServiceType.setStatus("mandatory")


class _ChanConnDesc_Type(DisplayString):
    """Custom type chanConnDesc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_ChanConnDesc_Type.__name__ = "DisplayString"
_ChanConnDesc_Object = MibTableColumn
chanConnDesc = _ChanConnDesc_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 5),
    _ChanConnDesc_Type()
)
chanConnDesc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanConnDesc.setStatus("mandatory")


class _ChanSvcFlag_Type(Integer32):
    """Custom type chanSvcFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("par", 4),
          ("pnni", 5),
          ("pvc", 2),
          ("spvc", 3),
          ("svc", 1),
          ("tag", 6))
    )


_ChanSvcFlag_Type.__name__ = "Integer32"
_ChanSvcFlag_Object = MibTableColumn
chanSvcFlag = _ChanSvcFlag_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 6),
    _ChanSvcFlag_Type()
)
chanSvcFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanSvcFlag.setStatus("mandatory")
_ChanSvcConnId_Type = Integer32
_ChanSvcConnId_Object = MibTableColumn
chanSvcConnId = _ChanSvcConnId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 7),
    _ChanSvcConnId_Type()
)
chanSvcConnId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanSvcConnId.setStatus("mandatory")


class _AusmChanPortNum_Type(Integer32):
    """Custom type ausmChanPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_AusmChanPortNum_Type.__name__ = "Integer32"
_AusmChanPortNum_Object = MibTableColumn
ausmChanPortNum = _AusmChanPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 8),
    _AusmChanPortNum_Type()
)
ausmChanPortNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanPortNum.setStatus("mandatory")


class _ChanVpi_Type(Integer32):
    """Custom type chanVpi based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ChanVpi_Type.__name__ = "Integer32"
_ChanVpi_Object = MibTableColumn
chanVpi = _ChanVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 9),
    _ChanVpi_Type()
)
chanVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanVpi.setStatus("mandatory")


class _ChanVci_Type(Integer32):
    """Custom type chanVci based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_ChanVci_Type.__name__ = "Integer32"
_ChanVci_Object = MibTableColumn
chanVci = _ChanVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 10),
    _ChanVci_Type()
)
chanVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanVci.setStatus("mandatory")


class _ChanEgrQSelect_Type(Integer32):
    """Custom type chanEgrQSelect based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_ChanEgrQSelect_Type.__name__ = "Integer32"
_ChanEgrQSelect_Object = MibTableColumn
chanEgrQSelect = _ChanEgrQSelect_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 11),
    _ChanEgrQSelect_Type()
)
chanEgrQSelect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    chanEgrQSelect.setStatus("mandatory")


class _IngrQDepth_Type(Integer32):
    """Custom type ingrQDepth based on Integer32"""
    defaultValue = 1000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16000),
    )


_IngrQDepth_Type.__name__ = "Integer32"
_IngrQDepth_Object = MibTableColumn
ingrQDepth = _IngrQDepth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 12),
    _IngrQDepth_Type()
)
ingrQDepth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrQDepth.setStatus("mandatory")


class _IngrQCLPThreshHigh_Type(Integer32):
    """Custom type ingrQCLPThreshHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16000),
    )


_IngrQCLPThreshHigh_Type.__name__ = "Integer32"
_IngrQCLPThreshHigh_Object = MibTableColumn
ingrQCLPThreshHigh = _IngrQCLPThreshHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 13),
    _IngrQCLPThreshHigh_Type()
)
ingrQCLPThreshHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrQCLPThreshHigh.setStatus("mandatory")


class _IngrQCLPThreshLow_Type(Integer32):
    """Custom type ingrQCLPThreshLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16000),
    )


_IngrQCLPThreshLow_Type.__name__ = "Integer32"
_IngrQCLPThreshLow_Object = MibTableColumn
ingrQCLPThreshLow = _IngrQCLPThreshLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 14),
    _IngrQCLPThreshLow_Type()
)
ingrQCLPThreshLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrQCLPThreshLow.setStatus("mandatory")


class _IngrQCLPState_Type(Integer32):
    """Custom type ingrQCLPState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("high", 2),
          ("low", 1))
    )


_IngrQCLPState_Type.__name__ = "Integer32"
_IngrQCLPState_Object = MibTableColumn
ingrQCLPState = _IngrQCLPState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 15),
    _IngrQCLPState_Type()
)
ingrQCLPState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ingrQCLPState.setStatus("mandatory")


class _IngrQEfciThresh_Type(Integer32):
    """Custom type ingrQEfciThresh based on Integer32"""
    defaultValue = 1000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16000),
    )


_IngrQEfciThresh_Type.__name__ = "Integer32"
_IngrQEfciThresh_Object = MibTableColumn
ingrQEfciThresh = _IngrQEfciThresh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 16),
    _IngrQEfciThresh_Type()
)
ingrQEfciThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrQEfciThresh.setStatus("mandatory")


class _IngrUpcEnable_Type(Integer32):
    """Custom type ingrUpcEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_IngrUpcEnable_Type.__name__ = "Integer32"
_IngrUpcEnable_Object = MibTableColumn
ingrUpcEnable = _IngrUpcEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 17),
    _IngrUpcEnable_Type()
)
ingrUpcEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrUpcEnable.setStatus("mandatory")


class _IngrUpcPCR01_Type(Integer32):
    """Custom type ingrUpcPCR01 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_IngrUpcPCR01_Type.__name__ = "Integer32"
_IngrUpcPCR01_Object = MibTableColumn
ingrUpcPCR01 = _IngrUpcPCR01_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 18),
    _IngrUpcPCR01_Type()
)
ingrUpcPCR01.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrUpcPCR01.setStatus("mandatory")


class _IngrUpcCIR_Type(Integer32):
    """Custom type ingrUpcCIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_IngrUpcCIR_Type.__name__ = "Integer32"
_IngrUpcCIR_Object = MibTableColumn
ingrUpcCIR = _IngrUpcCIR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 19),
    _IngrUpcCIR_Type()
)
ingrUpcCIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrUpcCIR.setStatus("mandatory")


class _IngrUpcCCDV_Type(Integer32):
    """Custom type ingrUpcCCDV based on Integer32"""
    defaultValue = 10000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 250000),
    )


_IngrUpcCCDV_Type.__name__ = "Integer32"
_IngrUpcCCDV_Object = MibTableColumn
ingrUpcCCDV = _IngrUpcCCDV_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 20),
    _IngrUpcCCDV_Type()
)
ingrUpcCCDV.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrUpcCCDV.setStatus("mandatory")


class _IngrUpcCBS_Type(Integer32):
    """Custom type ingrUpcCBS based on Integer32"""
    defaultValue = 1000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5000),
    )


_IngrUpcCBS_Type.__name__ = "Integer32"
_IngrUpcCBS_Object = MibTableColumn
ingrUpcCBS = _IngrUpcCBS_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 21),
    _IngrUpcCBS_Type()
)
ingrUpcCBS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrUpcCBS.setStatus("mandatory")


class _IngrUpcIBS_Type(Integer32):
    """Custom type ingrUpcIBS based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4830),
    )


_IngrUpcIBS_Type.__name__ = "Integer32"
_IngrUpcIBS_Object = MibTableColumn
ingrUpcIBS = _IngrUpcIBS_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 22),
    _IngrUpcIBS_Type()
)
ingrUpcIBS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrUpcIBS.setStatus("mandatory")


class _IngrUpcMFS_Type(Integer32):
    """Custom type ingrUpcMFS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 200),
    )


_IngrUpcMFS_Type.__name__ = "Integer32"
_IngrUpcMFS_Object = MibTableColumn
ingrUpcMFS = _IngrUpcMFS_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 23),
    _IngrUpcMFS_Type()
)
ingrUpcMFS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrUpcMFS.setStatus("mandatory")


class _IngrUpcSCRPolicing_Type(Integer32):
    """Custom type ingrUpcSCRPolicing based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clp0", 1),
          ("clp0and1", 2),
          ("off", 3))
    )


_IngrUpcSCRPolicing_Type.__name__ = "Integer32"
_IngrUpcSCRPolicing_Object = MibTableColumn
ingrUpcSCRPolicing = _IngrUpcSCRPolicing_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 24),
    _IngrUpcSCRPolicing_Type()
)
ingrUpcSCRPolicing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrUpcSCRPolicing.setStatus("mandatory")


class _IngrUpcPCR0_Type(Integer32):
    """Custom type ingrUpcPCR0 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_IngrUpcPCR0_Type.__name__ = "Integer32"
_IngrUpcPCR0_Object = MibTableColumn
ingrUpcPCR0 = _IngrUpcPCR0_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 25),
    _IngrUpcPCR0_Type()
)
ingrUpcPCR0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrUpcPCR0.setStatus("mandatory")


class _IngrUpcCDVT0_Type(Integer32):
    """Custom type ingrUpcCDVT0 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 250000),
    )


_IngrUpcCDVT0_Type.__name__ = "Integer32"
_IngrUpcCDVT0_Object = MibTableColumn
ingrUpcCDVT0 = _IngrUpcCDVT0_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 26),
    _IngrUpcCDVT0_Type()
)
ingrUpcCDVT0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrUpcCDVT0.setStatus("mandatory")


class _IngrUpcCLPTagEnable_Type(Integer32):
    """Custom type ingrUpcCLPTagEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_IngrUpcCLPTagEnable_Type.__name__ = "Integer32"
_IngrUpcCLPTagEnable_Object = MibTableColumn
ingrUpcCLPTagEnable = _IngrUpcCLPTagEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 27),
    _IngrUpcCLPTagEnable_Type()
)
ingrUpcCLPTagEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrUpcCLPTagEnable.setStatus("mandatory")


class _IngrUpcFGCRAEnable_Type(Integer32):
    """Custom type ingrUpcFGCRAEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_IngrUpcFGCRAEnable_Type.__name__ = "Integer32"
_IngrUpcFGCRAEnable_Object = MibTableColumn
ingrUpcFGCRAEnable = _IngrUpcFGCRAEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 28),
    _IngrUpcFGCRAEnable_Type()
)
ingrUpcFGCRAEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ingrUpcFGCRAEnable.setStatus("mandatory")


class _ForesightEnable_Type(Integer32):
    """Custom type foresightEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_ForesightEnable_Type.__name__ = "Integer32"
_ForesightEnable_Object = MibTableColumn
foresightEnable = _ForesightEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 29),
    _ForesightEnable_Type()
)
foresightEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    foresightEnable.setStatus("mandatory")


class _ForesightMIR_Type(Integer32):
    """Custom type foresightMIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 38328),
    )


_ForesightMIR_Type.__name__ = "Integer32"
_ForesightMIR_Object = MibTableColumn
foresightMIR = _ForesightMIR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 30),
    _ForesightMIR_Type()
)
foresightMIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    foresightMIR.setStatus("mandatory")


class _ForesightPIR_Type(Integer32):
    """Custom type foresightPIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_ForesightPIR_Type.__name__ = "Integer32"
_ForesightPIR_Object = MibTableColumn
foresightPIR = _ForesightPIR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 31),
    _ForesightPIR_Type()
)
foresightPIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    foresightPIR.setStatus("mandatory")


class _ForesightQIR_Type(Integer32):
    """Custom type foresightQIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 38328),
    )


_ForesightQIR_Type.__name__ = "Integer32"
_ForesightQIR_Object = MibTableColumn
foresightQIR = _ForesightQIR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 32),
    _ForesightQIR_Type()
)
foresightQIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    foresightQIR.setStatus("mandatory")


class _AusmChanLocRmtLpbkState_Type(Integer32):
    """Custom type ausmChanLocRmtLpbkState based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AusmChanLocRmtLpbkState_Type.__name__ = "Integer32"
_AusmChanLocRmtLpbkState_Object = MibTableColumn
ausmChanLocRmtLpbkState = _AusmChanLocRmtLpbkState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 33),
    _AusmChanLocRmtLpbkState_Type()
)
ausmChanLocRmtLpbkState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanLocRmtLpbkState.setStatus("mandatory")


class _AusmChanTestType_Type(Integer32):
    """Custom type ausmChanTestType based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notest", 3),
          ("testcon", 1),
          ("testdelay", 2))
    )


_AusmChanTestType_Type.__name__ = "Integer32"
_AusmChanTestType_Object = MibTableColumn
ausmChanTestType = _AusmChanTestType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 34),
    _AusmChanTestType_Type()
)
ausmChanTestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanTestType.setStatus("mandatory")


class _AusmChanTestState_Type(Integer32):
    """Custom type ausmChanTestState based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notinprogress", 4),
          ("passed", 1))
    )


_AusmChanTestState_Type.__name__ = "Integer32"
_AusmChanTestState_Object = MibTableColumn
ausmChanTestState = _AusmChanTestState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 35),
    _AusmChanTestState_Type()
)
ausmChanTestState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmChanTestState.setStatus("mandatory")


class _AusmChanRTDResult_Type(Integer32):
    """Custom type ausmChanRTDResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_AusmChanRTDResult_Type.__name__ = "Integer32"
_AusmChanRTDResult_Object = MibTableColumn
ausmChanRTDResult = _AusmChanRTDResult_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 36),
    _AusmChanRTDResult_Type()
)
ausmChanRTDResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmChanRTDResult.setStatus("mandatory")


class _AusmChanTestTypeCPESide_Type(Integer32):
    """Custom type ausmChanTestTypeCPESide based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notest", 2),
          ("testconseg", 1))
    )


_AusmChanTestTypeCPESide_Type.__name__ = "Integer32"
_AusmChanTestTypeCPESide_Object = MibTableColumn
ausmChanTestTypeCPESide = _AusmChanTestTypeCPESide_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 37),
    _AusmChanTestTypeCPESide_Type()
)
ausmChanTestTypeCPESide.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanTestTypeCPESide.setStatus("mandatory")


class _AusmChanTestStateCPESide_Type(Integer32):
    """Custom type ausmChanTestStateCPESide based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notinprogress", 4),
          ("passed", 1))
    )


_AusmChanTestStateCPESide_Type.__name__ = "Integer32"
_AusmChanTestStateCPESide_Object = MibTableColumn
ausmChanTestStateCPESide = _AusmChanTestStateCPESide_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 38),
    _AusmChanTestStateCPESide_Type()
)
ausmChanTestStateCPESide.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmChanTestStateCPESide.setStatus("mandatory")


class _AusmChanIngrPercentUtil_Type(Integer32):
    """Custom type ausmChanIngrPercentUtil based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_AusmChanIngrPercentUtil_Type.__name__ = "Integer32"
_AusmChanIngrPercentUtil_Object = MibTableColumn
ausmChanIngrPercentUtil = _AusmChanIngrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 39),
    _AusmChanIngrPercentUtil_Type()
)
ausmChanIngrPercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanIngrPercentUtil.setStatus("mandatory")


class _AusmChanEgrPercentUtil_Type(Integer32):
    """Custom type ausmChanEgrPercentUtil based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_AusmChanEgrPercentUtil_Type.__name__ = "Integer32"
_AusmChanEgrPercentUtil_Object = MibTableColumn
ausmChanEgrPercentUtil = _AusmChanEgrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 40),
    _AusmChanEgrPercentUtil_Type()
)
ausmChanEgrPercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanEgrPercentUtil.setStatus("mandatory")


class _AusmChanEgrSrvRate_Type(Integer32):
    """Custom type ausmChanEgrSrvRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 38328),
    )


_AusmChanEgrSrvRate_Type.__name__ = "Integer32"
_AusmChanEgrSrvRate_Object = MibTableColumn
ausmChanEgrSrvRate = _AusmChanEgrSrvRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 41),
    _AusmChanEgrSrvRate_Type()
)
ausmChanEgrSrvRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanEgrSrvRate.setStatus("mandatory")


class _AusmChanOvrSubOvrRide_Type(Integer32):
    """Custom type ausmChanOvrSubOvrRide based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AusmChanOvrSubOvrRide_Type.__name__ = "Integer32"
_AusmChanOvrSubOvrRide_Object = MibTableColumn
ausmChanOvrSubOvrRide = _AusmChanOvrSubOvrRide_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 42),
    _AusmChanOvrSubOvrRide_Type()
)
ausmChanOvrSubOvrRide.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanOvrSubOvrRide.setStatus("mandatory")


class _AusmChanLocalVpId_Type(Integer32):
    """Custom type ausmChanLocalVpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 340),
    )


_AusmChanLocalVpId_Type.__name__ = "Integer32"
_AusmChanLocalVpId_Object = MibTableColumn
ausmChanLocalVpId = _AusmChanLocalVpId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 43),
    _AusmChanLocalVpId_Type()
)
ausmChanLocalVpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanLocalVpId.setStatus("mandatory")


class _AusmChanRMEnable_Type(Integer32):
    """Custom type ausmChanRMEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AusmChanRMEnable_Type.__name__ = "Integer32"
_AusmChanRMEnable_Object = MibTableColumn
ausmChanRMEnable = _AusmChanRMEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 44),
    _AusmChanRMEnable_Type()
)
ausmChanRMEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanRMEnable.setStatus("mandatory")


class _AusmIngrDiscardOption_Type(Integer32):
    """Custom type ausmIngrDiscardOption based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clpHysterisis", 1),
          ("frameDiscard", 2))
    )


_AusmIngrDiscardOption_Type.__name__ = "Integer32"
_AusmIngrDiscardOption_Object = MibTableColumn
ausmIngrDiscardOption = _AusmIngrDiscardOption_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 45),
    _AusmIngrDiscardOption_Type()
)
ausmIngrDiscardOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmIngrDiscardOption.setStatus("mandatory")


class _AusmIngrFrDiscardThreshold_Type(Integer32):
    """Custom type ausmIngrFrDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16000),
    )


_AusmIngrFrDiscardThreshold_Type.__name__ = "Integer32"
_AusmIngrFrDiscardThreshold_Object = MibTableColumn
ausmIngrFrDiscardThreshold = _AusmIngrFrDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 46),
    _AusmIngrFrDiscardThreshold_Type()
)
ausmIngrFrDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmIngrFrDiscardThreshold.setStatus("mandatory")
_AusmCDRNumber_Type = Integer32
_AusmCDRNumber_Object = MibTableColumn
ausmCDRNumber = _AusmCDRNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 47),
    _AusmCDRNumber_Type()
)
ausmCDRNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmCDRNumber.setStatus("mandatory")


class _AusmLocalVpi_Type(Integer32):
    """Custom type ausmLocalVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AusmLocalVpi_Type.__name__ = "Integer32"
_AusmLocalVpi_Object = MibTableColumn
ausmLocalVpi = _AusmLocalVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 48),
    _AusmLocalVpi_Type()
)
ausmLocalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmLocalVpi.setStatus("mandatory")


class _AusmLocalVci_Type(Integer32):
    """Custom type ausmLocalVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AusmLocalVci_Type.__name__ = "Integer32"
_AusmLocalVci_Object = MibTableColumn
ausmLocalVci = _AusmLocalVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 49),
    _AusmLocalVci_Type()
)
ausmLocalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmLocalVci.setStatus("mandatory")


class _AusmLocalNSAP_Type(OctetString):
    """Custom type ausmLocalNSAP based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AusmLocalNSAP_Type.__name__ = "OctetString"
_AusmLocalNSAP_Object = MibTableColumn
ausmLocalNSAP = _AusmLocalNSAP_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 50),
    _AusmLocalNSAP_Type()
)
ausmLocalNSAP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmLocalNSAP.setStatus("mandatory")


class _AusmRemoteVpi_Type(Integer32):
    """Custom type ausmRemoteVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AusmRemoteVpi_Type.__name__ = "Integer32"
_AusmRemoteVpi_Object = MibTableColumn
ausmRemoteVpi = _AusmRemoteVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 51),
    _AusmRemoteVpi_Type()
)
ausmRemoteVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmRemoteVpi.setStatus("mandatory")


class _AusmRemoteVci_Type(Integer32):
    """Custom type ausmRemoteVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_AusmRemoteVci_Type.__name__ = "Integer32"
_AusmRemoteVci_Object = MibTableColumn
ausmRemoteVci = _AusmRemoteVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 52),
    _AusmRemoteVci_Type()
)
ausmRemoteVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmRemoteVci.setStatus("mandatory")


class _AusmRemoteNSAP_Type(OctetString):
    """Custom type ausmRemoteNSAP based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AusmRemoteNSAP_Type.__name__ = "OctetString"
_AusmRemoteNSAP_Object = MibTableColumn
ausmRemoteNSAP = _AusmRemoteNSAP_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 53),
    _AusmRemoteNSAP_Type()
)
ausmRemoteNSAP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmRemoteNSAP.setStatus("mandatory")


class _AusmMastership_Type(Integer32):
    """Custom type ausmMastership based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("master", 1),
          ("slave", 2),
          ("unknown", 3))
    )


_AusmMastership_Type.__name__ = "Integer32"
_AusmMastership_Object = MibTableColumn
ausmMastership = _AusmMastership_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 54),
    _AusmMastership_Type()
)
ausmMastership.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmMastership.setStatus("mandatory")


class _AusmVpcFlag_Type(Integer32):
    """Custom type ausmVpcFlag based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vcc", 2),
          ("vpc", 1))
    )


_AusmVpcFlag_Type.__name__ = "Integer32"
_AusmVpcFlag_Object = MibTableColumn
ausmVpcFlag = _AusmVpcFlag_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 55),
    _AusmVpcFlag_Type()
)
ausmVpcFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmVpcFlag.setStatus("mandatory")


class _AusmConnServiceType_Type(Integer32):
    """Custom type ausmConnServiceType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5,
              6,
              7,
              8,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32)
        )
    )
    namedValues = NamedValues(
        *(("abrfst", 7),
          ("abrstd", 6),
          ("atfr", 5),
          ("cbr", 1),
          ("cbr1", 21),
          ("cbr2", 31),
          ("cbr3", 32),
          ("rtvbr", 8),
          ("stdabr", 30),
          ("ubr", 4),
          ("ubr1", 28),
          ("ubr2", 29),
          ("vbr", 2),
          ("vbr1nrt", 25),
          ("vbr1rt", 22),
          ("vbr2nrt", 26),
          ("vbr2rt", 23),
          ("vbr3nrt", 27),
          ("vbr3rt", 24))
    )


_AusmConnServiceType_Type.__name__ = "Integer32"
_AusmConnServiceType_Object = MibTableColumn
ausmConnServiceType = _AusmConnServiceType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 56),
    _AusmConnServiceType_Type()
)
ausmConnServiceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnServiceType.setStatus("mandatory")


class _AusmRoutingPriority_Type(Integer32):
    """Custom type ausmRoutingPriority based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_AusmRoutingPriority_Type.__name__ = "Integer32"
_AusmRoutingPriority_Object = MibTableColumn
ausmRoutingPriority = _AusmRoutingPriority_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 57),
    _AusmRoutingPriority_Type()
)
ausmRoutingPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmRoutingPriority.setStatus("mandatory")


class _AusmMaxCost_Type(Integer32):
    """Custom type ausmMaxCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_AusmMaxCost_Type.__name__ = "Integer32"
_AusmMaxCost_Object = MibTableColumn
ausmMaxCost = _AusmMaxCost_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 58),
    _AusmMaxCost_Type()
)
ausmMaxCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmMaxCost.setStatus("mandatory")


class _AusmRestrictTrunkType_Type(Integer32):
    """Custom type ausmRestrictTrunkType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noresriction", 1),
          ("sateliteTrunk", 3),
          ("terrestrialTrunk", 2))
    )


_AusmRestrictTrunkType_Type.__name__ = "Integer32"
_AusmRestrictTrunkType_Object = MibTableColumn
ausmRestrictTrunkType = _AusmRestrictTrunkType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 59),
    _AusmRestrictTrunkType_Type()
)
ausmRestrictTrunkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmRestrictTrunkType.setStatus("mandatory")


class _AusmConnPCR_Type(Integer32):
    """Custom type ausmConnPCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_AusmConnPCR_Type.__name__ = "Integer32"
_AusmConnPCR_Object = MibTableColumn
ausmConnPCR = _AusmConnPCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 60),
    _AusmConnPCR_Type()
)
ausmConnPCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnPCR.setStatus("mandatory")


class _AusmConnMCR_Type(Integer32):
    """Custom type ausmConnMCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_AusmConnMCR_Type.__name__ = "Integer32"
_AusmConnMCR_Object = MibTableColumn
ausmConnMCR = _AusmConnMCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 61),
    _AusmConnMCR_Type()
)
ausmConnMCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnMCR.setStatus("mandatory")


class _AusmConnPercentUtil_Type(Integer32):
    """Custom type ausmConnPercentUtil based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_AusmConnPercentUtil_Type.__name__ = "Integer32"
_AusmConnPercentUtil_Object = MibTableColumn
ausmConnPercentUtil = _AusmConnPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 62),
    _AusmConnPercentUtil_Type()
)
ausmConnPercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnPercentUtil.setStatus("mandatory")


class _AusmConnRemotePCR_Type(Integer32):
    """Custom type ausmConnRemotePCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_AusmConnRemotePCR_Type.__name__ = "Integer32"
_AusmConnRemotePCR_Object = MibTableColumn
ausmConnRemotePCR = _AusmConnRemotePCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 63),
    _AusmConnRemotePCR_Type()
)
ausmConnRemotePCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnRemotePCR.setStatus("mandatory")


class _AusmConnRemoteMCR_Type(Integer32):
    """Custom type ausmConnRemoteMCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_AusmConnRemoteMCR_Type.__name__ = "Integer32"
_AusmConnRemoteMCR_Object = MibTableColumn
ausmConnRemoteMCR = _AusmConnRemoteMCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 64),
    _AusmConnRemoteMCR_Type()
)
ausmConnRemoteMCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnRemoteMCR.setStatus("mandatory")


class _AusmConnRemotePercentUtil_Type(Integer32):
    """Custom type ausmConnRemotePercentUtil based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_AusmConnRemotePercentUtil_Type.__name__ = "Integer32"
_AusmConnRemotePercentUtil_Object = MibTableColumn
ausmConnRemotePercentUtil = _AusmConnRemotePercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 65),
    _AusmConnRemotePercentUtil_Type()
)
ausmConnRemotePercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnRemotePercentUtil.setStatus("mandatory")


class _AusmConnForeSightEnable_Type(Integer32):
    """Custom type ausmConnForeSightEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AusmConnForeSightEnable_Type.__name__ = "Integer32"
_AusmConnForeSightEnable_Object = MibTableColumn
ausmConnForeSightEnable = _AusmConnForeSightEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 66),
    _AusmConnForeSightEnable_Type()
)
ausmConnForeSightEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnForeSightEnable.setStatus("mandatory")


class _AusmConnFGCRAEnable_Type(Integer32):
    """Custom type ausmConnFGCRAEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_AusmConnFGCRAEnable_Type.__name__ = "Integer32"
_AusmConnFGCRAEnable_Object = MibTableColumn
ausmConnFGCRAEnable = _AusmConnFGCRAEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 67),
    _AusmConnFGCRAEnable_Type()
)
ausmConnFGCRAEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnFGCRAEnable.setStatus("mandatory")


class _AusmChanReroute_Type(Integer32):
    """Custom type ausmChanReroute based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 2),
          ("true", 1))
    )


_AusmChanReroute_Type.__name__ = "Integer32"
_AusmChanReroute_Object = MibTableColumn
ausmChanReroute = _AusmChanReroute_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 68),
    _AusmChanReroute_Type()
)
ausmChanReroute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanReroute.setStatus("mandatory")


class _AusmConnSCR_Type(Integer32):
    """Custom type ausmConnSCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_AusmConnSCR_Type.__name__ = "Integer32"
_AusmConnSCR_Object = MibTableColumn
ausmConnSCR = _AusmConnSCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 69),
    _AusmConnSCR_Type()
)
ausmConnSCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnSCR.setStatus("mandatory")


class _AusmConnRemoteSCR_Type(Integer32):
    """Custom type ausmConnRemoteSCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_AusmConnRemoteSCR_Type.__name__ = "Integer32"
_AusmConnRemoteSCR_Object = MibTableColumn
ausmConnRemoteSCR = _AusmConnRemoteSCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 70),
    _AusmConnRemoteSCR_Type()
)
ausmConnRemoteSCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnRemoteSCR.setStatus("mandatory")


class _AusmConnMBS_Type(Integer32):
    """Custom type ausmConnMBS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5000),
    )


_AusmConnMBS_Type.__name__ = "Integer32"
_AusmConnMBS_Object = MibTableColumn
ausmConnMBS = _AusmConnMBS_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 71),
    _AusmConnMBS_Type()
)
ausmConnMBS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnMBS.setStatus("mandatory")


class _AusmConnRemoteMBS_Type(Integer32):
    """Custom type ausmConnRemoteMBS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5000000),
    )


_AusmConnRemoteMBS_Type.__name__ = "Integer32"
_AusmConnRemoteMBS_Object = MibTableColumn
ausmConnRemoteMBS = _AusmConnRemoteMBS_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 72),
    _AusmConnRemoteMBS_Type()
)
ausmConnRemoteMBS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnRemoteMBS.setStatus("mandatory")


class _AusmConnTemplateId_Type(Integer32):
    """Custom type ausmConnTemplateId based on Integer32"""
    defaultValue = 17

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 17),
    )


_AusmConnTemplateId_Type.__name__ = "Integer32"
_AusmConnTemplateId_Object = MibTableColumn
ausmConnTemplateId = _AusmConnTemplateId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 73),
    _AusmConnTemplateId_Type()
)
ausmConnTemplateId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnTemplateId.setStatus("mandatory")


class _AusmConnAdminStatus_Type(Integer32):
    """Custom type ausmConnAdminStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_AusmConnAdminStatus_Type.__name__ = "Integer32"
_AusmConnAdminStatus_Object = MibTableColumn
ausmConnAdminStatus = _AusmConnAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 1, 1, 74),
    _AusmConnAdminStatus_Type()
)
ausmConnAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmConnAdminStatus.setStatus("mandatory")


class _AusmChanNumNextAvailable_Type(Integer32):
    """Custom type ausmChanNumNextAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 1015),
    )


_AusmChanNumNextAvailable_Type.__name__ = "Integer32"
_AusmChanNumNextAvailable_Object = MibScalar
ausmChanNumNextAvailable = _AusmChanNumNextAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 2),
    _AusmChanNumNextAvailable_Type()
)
ausmChanNumNextAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmChanNumNextAvailable.setStatus("mandatory")


class _AusmChanVpIdNextAvailable_Type(Integer32):
    """Custom type ausmChanVpIdNextAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AusmChanVpIdNextAvailable_Type.__name__ = "Integer32"
_AusmChanVpIdNextAvailable_Object = MibScalar
ausmChanVpIdNextAvailable = _AusmChanVpIdNextAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 3),
    _AusmChanVpIdNextAvailable_Type()
)
ausmChanVpIdNextAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmChanVpIdNextAvailable.setStatus("mandatory")
_AusmStdABRCnfGrpTable_Object = MibTable
ausmStdABRCnfGrpTable = _AusmStdABRCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4)
)
if mibBuilder.loadTexts:
    ausmStdABRCnfGrpTable.setStatus("mandatory")
_AusmStdABRCnfGrpEntry_Object = MibTableRow
ausmStdABRCnfGrpEntry = _AusmStdABRCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1)
)
ausmStdABRCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ausmStdABRCnfChanNum"),
)
if mibBuilder.loadTexts:
    ausmStdABRCnfGrpEntry.setStatus("mandatory")


class _AusmStdABRCnfChanNum_Type(Integer32):
    """Custom type ausmStdABRCnfChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 1015),
    )


_AusmStdABRCnfChanNum_Type.__name__ = "Integer32"
_AusmStdABRCnfChanNum_Object = MibTableColumn
ausmStdABRCnfChanNum = _AusmStdABRCnfChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 1),
    _AusmStdABRCnfChanNum_Type()
)
ausmStdABRCnfChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmStdABRCnfChanNum.setStatus("mandatory")


class _AusmStdABRType_Type(Integer32):
    """Custom type ausmStdABRType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("srcDestBehaviour", 2),
          ("switchBehaviour", 1))
    )


_AusmStdABRType_Type.__name__ = "Integer32"
_AusmStdABRType_Object = MibTableColumn
ausmStdABRType = _AusmStdABRType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 2),
    _AusmStdABRType_Type()
)
ausmStdABRType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmStdABRType.setStatus("mandatory")


class _AusmStdABRTBE_Type(Integer32):
    """Custom type ausmStdABRTBE based on Integer32"""
    defaultValue = 16777215

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_AusmStdABRTBE_Type.__name__ = "Integer32"
_AusmStdABRTBE_Object = MibTableColumn
ausmStdABRTBE = _AusmStdABRTBE_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 3),
    _AusmStdABRTBE_Type()
)
ausmStdABRTBE.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmStdABRTBE.setStatus("mandatory")


class _AusmStdABRFRTT_Type(Integer32):
    """Custom type ausmStdABRFRTT based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16700),
    )


_AusmStdABRFRTT_Type.__name__ = "Integer32"
_AusmStdABRFRTT_Object = MibTableColumn
ausmStdABRFRTT = _AusmStdABRFRTT_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 4),
    _AusmStdABRFRTT_Type()
)
ausmStdABRFRTT.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmStdABRFRTT.setStatus("mandatory")


class _AusmStdABRRDF_Type(Integer32):
    """Custom type ausmStdABRRDF based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32768),
    )


_AusmStdABRRDF_Type.__name__ = "Integer32"
_AusmStdABRRDF_Object = MibTableColumn
ausmStdABRRDF = _AusmStdABRRDF_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 5),
    _AusmStdABRRDF_Type()
)
ausmStdABRRDF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmStdABRRDF.setStatus("mandatory")


class _AusmStdABRRIF_Type(Integer32):
    """Custom type ausmStdABRRIF based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32768),
    )


_AusmStdABRRIF_Type.__name__ = "Integer32"
_AusmStdABRRIF_Object = MibTableColumn
ausmStdABRRIF = _AusmStdABRRIF_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 6),
    _AusmStdABRRIF_Type()
)
ausmStdABRRIF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmStdABRRIF.setStatus("mandatory")


class _AusmStdABRNrm_Type(Integer32):
    """Custom type ausmStdABRNrm based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 256),
    )


_AusmStdABRNrm_Type.__name__ = "Integer32"
_AusmStdABRNrm_Object = MibTableColumn
ausmStdABRNrm = _AusmStdABRNrm_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 7),
    _AusmStdABRNrm_Type()
)
ausmStdABRNrm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmStdABRNrm.setStatus("mandatory")


class _AusmStdABRTrm_Type(Integer32):
    """Custom type ausmStdABRTrm based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 255),
    )


_AusmStdABRTrm_Type.__name__ = "Integer32"
_AusmStdABRTrm_Object = MibTableColumn
ausmStdABRTrm = _AusmStdABRTrm_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 8),
    _AusmStdABRTrm_Type()
)
ausmStdABRTrm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmStdABRTrm.setStatus("mandatory")


class _AusmStdABRCDF_Type(Integer32):
    """Custom type ausmStdABRCDF based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 64),
    )


_AusmStdABRCDF_Type.__name__ = "Integer32"
_AusmStdABRCDF_Object = MibTableColumn
ausmStdABRCDF = _AusmStdABRCDF_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 9),
    _AusmStdABRCDF_Type()
)
ausmStdABRCDF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmStdABRCDF.setStatus("mandatory")


class _AusmStdABRADTF_Type(Integer32):
    """Custom type ausmStdABRADTF based on Integer32"""
    defaultValue = 500

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 10230),
    )


_AusmStdABRADTF_Type.__name__ = "Integer32"
_AusmStdABRADTF_Object = MibTableColumn
ausmStdABRADTF = _AusmStdABRADTF_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 10),
    _AusmStdABRADTF_Type()
)
ausmStdABRADTF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmStdABRADTF.setStatus("mandatory")


class _AusmStdABRICR_Type(Integer32):
    """Custom type ausmStdABRICR based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_AusmStdABRICR_Type.__name__ = "Integer32"
_AusmStdABRICR_Object = MibTableColumn
ausmStdABRICR = _AusmStdABRICR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 11),
    _AusmStdABRICR_Type()
)
ausmStdABRICR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmStdABRICR.setStatus("mandatory")


class _AusmStdABRMCR_Type(Integer32):
    """Custom type ausmStdABRMCR based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_AusmStdABRMCR_Type.__name__ = "Integer32"
_AusmStdABRMCR_Object = MibTableColumn
ausmStdABRMCR = _AusmStdABRMCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 12),
    _AusmStdABRMCR_Type()
)
ausmStdABRMCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmStdABRMCR.setStatus("mandatory")


class _AusmStdABRPCR_Type(Integer32):
    """Custom type ausmStdABRPCR based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 38328),
    )


_AusmStdABRPCR_Type.__name__ = "Integer32"
_AusmStdABRPCR_Object = MibTableColumn
ausmStdABRPCR = _AusmStdABRPCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 1, 4, 1, 13),
    _AusmStdABRPCR_Type()
)
ausmStdABRPCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmStdABRPCR.setStatus("mandatory")
_AusmChanStateGrp_ObjectIdentity = ObjectIdentity
ausmChanStateGrp = _AusmChanStateGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2)
)
_AusmChanStateGrpTable_Object = MibTable
ausmChanStateGrpTable = _AusmChanStateGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1)
)
if mibBuilder.loadTexts:
    ausmChanStateGrpTable.setStatus("mandatory")
_AusmChanStateGrpEntry_Object = MibTableRow
ausmChanStateGrpEntry = _AusmChanStateGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1)
)
ausmChanStateGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ausmStateChanNum"),
)
if mibBuilder.loadTexts:
    ausmChanStateGrpEntry.setStatus("mandatory")


class _AusmStateChanNum_Type(Integer32):
    """Custom type ausmStateChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 1015),
    )


_AusmStateChanNum_Type.__name__ = "Integer32"
_AusmStateChanNum_Object = MibTableColumn
ausmStateChanNum = _AusmStateChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 1),
    _AusmStateChanNum_Type()
)
ausmStateChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmStateChanNum.setStatus("mandatory")


class _AusmChanState_Type(Integer32):
    """Custom type ausmChanState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 3),
          ("failed", 4),
          ("normal", 2),
          ("notconfigured", 1))
    )


_AusmChanState_Type.__name__ = "Integer32"
_AusmChanState_Object = MibTableColumn
ausmChanState = _AusmChanState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 2),
    _AusmChanState_Type()
)
ausmChanState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmChanState.setStatus("mandatory")


class _ChanEgrXmtState_Type(Integer32):
    """Custom type chanEgrXmtState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("other", 1),
          ("sendingAis", 3),
          ("sendingFerf", 4))
    )


_ChanEgrXmtState_Type.__name__ = "Integer32"
_ChanEgrXmtState_Object = MibTableColumn
chanEgrXmtState = _ChanEgrXmtState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 3),
    _ChanEgrXmtState_Type()
)
chanEgrXmtState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanEgrXmtState.setStatus("mandatory")


class _ChanIngrRcvState_Type(Integer32):
    """Custom type chanIngrRcvState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 5),
          ("normal", 2),
          ("other", 1),
          ("receivingAis", 3),
          ("receivingFerf", 4))
    )


_ChanIngrRcvState_Type.__name__ = "Integer32"
_ChanIngrRcvState_Object = MibTableColumn
chanIngrRcvState = _ChanIngrRcvState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 4),
    _ChanIngrRcvState_Type()
)
chanIngrRcvState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrRcvState.setStatus("mandatory")


class _ChanIngrXmtState_Type(Integer32):
    """Custom type chanIngrXmtState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("other", 1),
          ("sendingAis", 3),
          ("sendingFerf", 4))
    )


_ChanIngrXmtState_Type.__name__ = "Integer32"
_ChanIngrXmtState_Object = MibTableColumn
chanIngrXmtState = _ChanIngrXmtState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 5),
    _ChanIngrXmtState_Type()
)
chanIngrXmtState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrXmtState.setStatus("mandatory")


class _ChanEgrRcvState_Type(Integer32):
    """Custom type chanEgrRcvState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 5),
          ("normal", 2),
          ("other", 1),
          ("receivingAis", 3),
          ("receivingFerf", 4))
    )


_ChanEgrRcvState_Type.__name__ = "Integer32"
_ChanEgrRcvState_Object = MibTableColumn
chanEgrRcvState = _ChanEgrRcvState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 6),
    _ChanEgrRcvState_Type()
)
chanEgrRcvState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanEgrRcvState.setStatus("mandatory")


class _AusmChanStatusBitMap_Type(Integer32):
    """Custom type ausmChanStatusBitMap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AusmChanStatusBitMap_Type.__name__ = "Integer32"
_AusmChanStatusBitMap_Object = MibTableColumn
ausmChanStatusBitMap = _AusmChanStatusBitMap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 2, 1, 1, 7),
    _AusmChanStatusBitMap_Type()
)
ausmChanStatusBitMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmChanStatusBitMap.setStatus("mandatory")
_AusmChanCntGrp_ObjectIdentity = ObjectIdentity
ausmChanCntGrp = _AusmChanCntGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3)
)
_AusmChanCntGrpTable_Object = MibTable
ausmChanCntGrpTable = _AusmChanCntGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1)
)
if mibBuilder.loadTexts:
    ausmChanCntGrpTable.setStatus("mandatory")
_AusmChanCntGrpEntry_Object = MibTableRow
ausmChanCntGrpEntry = _AusmChanCntGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1)
)
ausmChanCntGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ausmCntChanNum"),
)
if mibBuilder.loadTexts:
    ausmChanCntGrpEntry.setStatus("mandatory")


class _AusmCntChanNum_Type(Integer32):
    """Custom type ausmCntChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 1015),
    )


_AusmCntChanNum_Type.__name__ = "Integer32"
_AusmCntChanNum_Object = MibTableColumn
ausmCntChanNum = _AusmCntChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 1),
    _AusmCntChanNum_Type()
)
ausmCntChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmCntChanNum.setStatus("mandatory")
_ChanSecInService_Type = Counter32
_ChanSecInService_Object = MibTableColumn
chanSecInService = _ChanSecInService_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 2),
    _ChanSecInService_Type()
)
chanSecInService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanSecInService.setStatus("mandatory")
_ChanCongestMinutes_Type = Counter32
_ChanCongestMinutes_Object = MibTableColumn
chanCongestMinutes = _ChanCongestMinutes_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 3),
    _ChanCongestMinutes_Type()
)
chanCongestMinutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanCongestMinutes.setStatus("mandatory")


class _ChanIngrPeakQDepth_Type(Integer32):
    """Custom type chanIngrPeakQDepth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_ChanIngrPeakQDepth_Type.__name__ = "Integer32"
_ChanIngrPeakQDepth_Object = MibTableColumn
chanIngrPeakQDepth = _ChanIngrPeakQDepth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 4),
    _ChanIngrPeakQDepth_Type()
)
chanIngrPeakQDepth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrPeakQDepth.setStatus("mandatory")
_ChanIngrRcvCells_Type = Counter32
_ChanIngrRcvCells_Object = MibTableColumn
chanIngrRcvCells = _ChanIngrRcvCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 5),
    _ChanIngrRcvCells_Type()
)
chanIngrRcvCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrRcvCells.setStatus("mandatory")
_ChanIngrClpSetRcvCells_Type = Counter32
_ChanIngrClpSetRcvCells_Object = MibTableColumn
chanIngrClpSetRcvCells = _ChanIngrClpSetRcvCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 6),
    _ChanIngrClpSetRcvCells_Type()
)
chanIngrClpSetRcvCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrClpSetRcvCells.setStatus("mandatory")
_ChanIngrEfciSetRcvCells_Type = Counter32
_ChanIngrEfciSetRcvCells_Object = MibTableColumn
chanIngrEfciSetRcvCells = _ChanIngrEfciSetRcvCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 7),
    _ChanIngrEfciSetRcvCells_Type()
)
chanIngrEfciSetRcvCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrEfciSetRcvCells.setStatus("mandatory")
_ChanIngrQfullDiscardCells_Type = Counter32
_ChanIngrQfullDiscardCells_Object = MibTableColumn
chanIngrQfullDiscardCells = _ChanIngrQfullDiscardCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 8),
    _ChanIngrQfullDiscardCells_Type()
)
chanIngrQfullDiscardCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrQfullDiscardCells.setStatus("mandatory")
_ChanIngrClpSetDiscardCells_Type = Counter32
_ChanIngrClpSetDiscardCells_Object = MibTableColumn
chanIngrClpSetDiscardCells = _ChanIngrClpSetDiscardCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 9),
    _ChanIngrClpSetDiscardCells_Type()
)
chanIngrClpSetDiscardCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrClpSetDiscardCells.setStatus("mandatory")
_ChanIngrUpcClpSetCells_Type = Counter32
_ChanIngrUpcClpSetCells_Object = MibTableColumn
chanIngrUpcClpSetCells = _ChanIngrUpcClpSetCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 10),
    _ChanIngrUpcClpSetCells_Type()
)
chanIngrUpcClpSetCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrUpcClpSetCells.setStatus("mandatory")
_ChanIngrXmtCells_Type = Counter32
_ChanIngrXmtCells_Object = MibTableColumn
chanIngrXmtCells = _ChanIngrXmtCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 11),
    _ChanIngrXmtCells_Type()
)
chanIngrXmtCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrXmtCells.setStatus("mandatory")
_ChanShelfAlarmDiscardCells_Type = Counter32
_ChanShelfAlarmDiscardCells_Object = MibTableColumn
chanShelfAlarmDiscardCells = _ChanShelfAlarmDiscardCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 12),
    _ChanShelfAlarmDiscardCells_Type()
)
chanShelfAlarmDiscardCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanShelfAlarmDiscardCells.setStatus("mandatory")


class _AusmChanClrButton_Type(Integer32):
    """Custom type ausmChanClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAction", 1),
          ("resetCounters", 2))
    )


_AusmChanClrButton_Type.__name__ = "Integer32"
_AusmChanClrButton_Object = MibTableColumn
ausmChanClrButton = _AusmChanClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 13),
    _AusmChanClrButton_Type()
)
ausmChanClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ausmChanClrButton.setStatus("mandatory")
_ChanEpdDiscCells_Type = Counter32
_ChanEpdDiscCells_Object = MibTableColumn
chanEpdDiscCells = _ChanEpdDiscCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 14),
    _ChanEpdDiscCells_Type()
)
chanEpdDiscCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanEpdDiscCells.setStatus("mandatory")
_ChanPpdDiscCells_Type = Counter32
_ChanPpdDiscCells_Object = MibTableColumn
chanPpdDiscCells = _ChanPpdDiscCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 15),
    _ChanPpdDiscCells_Type()
)
chanPpdDiscCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanPpdDiscCells.setStatus("mandatory")
_ChanIngrRcvCellRate_Type = Gauge32
_ChanIngrRcvCellRate_Object = MibTableColumn
chanIngrRcvCellRate = _ChanIngrRcvCellRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 16),
    _ChanIngrRcvCellRate_Type()
)
chanIngrRcvCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrRcvCellRate.setStatus("mandatory")
_ChanIngrRcvUtilization_Type = Gauge32
_ChanIngrRcvUtilization_Object = MibTableColumn
chanIngrRcvUtilization = _ChanIngrRcvUtilization_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 17),
    _ChanIngrRcvUtilization_Type()
)
chanIngrRcvUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrRcvUtilization.setStatus("mandatory")
_ChanIngrXmtCellRate_Type = Gauge32
_ChanIngrXmtCellRate_Object = MibTableColumn
chanIngrXmtCellRate = _ChanIngrXmtCellRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 18),
    _ChanIngrXmtCellRate_Type()
)
chanIngrXmtCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrXmtCellRate.setStatus("mandatory")
_ChanIngrXmtUtilization_Type = Gauge32
_ChanIngrXmtUtilization_Object = MibTableColumn
chanIngrXmtUtilization = _ChanIngrXmtUtilization_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 19),
    _ChanIngrXmtUtilization_Type()
)
chanIngrXmtUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrXmtUtilization.setStatus("mandatory")
_ChanEgrRcvCellRate_Type = Gauge32
_ChanEgrRcvCellRate_Object = MibTableColumn
chanEgrRcvCellRate = _ChanEgrRcvCellRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 20),
    _ChanEgrRcvCellRate_Type()
)
chanEgrRcvCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanEgrRcvCellRate.setStatus("mandatory")
_ChanEgrRcvUtilization_Type = Gauge32
_ChanEgrRcvUtilization_Object = MibTableColumn
chanEgrRcvUtilization = _ChanEgrRcvUtilization_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 21),
    _ChanEgrRcvUtilization_Type()
)
chanEgrRcvUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanEgrRcvUtilization.setStatus("mandatory")
_ChanIngrXmtAAL5Frames_Type = Counter32
_ChanIngrXmtAAL5Frames_Object = MibTableColumn
chanIngrXmtAAL5Frames = _ChanIngrXmtAAL5Frames_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 22),
    _ChanIngrXmtAAL5Frames_Type()
)
chanIngrXmtAAL5Frames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrXmtAAL5Frames.setStatus("mandatory")
_ChanIngrEfciSetXmtCells_Type = Counter32
_ChanIngrEfciSetXmtCells_Object = MibTableColumn
chanIngrEfciSetXmtCells = _ChanIngrEfciSetXmtCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 23),
    _ChanIngrEfciSetXmtCells_Type()
)
chanIngrEfciSetXmtCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrEfciSetXmtCells.setStatus("mandatory")
_ChanEgrPortQfullDiscardCells_Type = Counter32
_ChanEgrPortQfullDiscardCells_Object = MibTableColumn
chanEgrPortQfullDiscardCells = _ChanEgrPortQfullDiscardCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 24),
    _ChanEgrPortQfullDiscardCells_Type()
)
chanEgrPortQfullDiscardCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanEgrPortQfullDiscardCells.setStatus("mandatory")
_ChanEgrPortQClpThresDiscardCells_Type = Counter32
_ChanEgrPortQClpThresDiscardCells_Object = MibTableColumn
chanEgrPortQClpThresDiscardCells = _ChanEgrPortQClpThresDiscardCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 25),
    _ChanEgrPortQClpThresDiscardCells_Type()
)
chanEgrPortQClpThresDiscardCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanEgrPortQClpThresDiscardCells.setStatus("mandatory")
_ChanTxFifoFullCnt_Type = Counter32
_ChanTxFifoFullCnt_Object = MibTableColumn
chanTxFifoFullCnt = _ChanTxFifoFullCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 26),
    _ChanTxFifoFullCnt_Type()
)
chanTxFifoFullCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanTxFifoFullCnt.setStatus("mandatory")


class _ChanIngrCurrQDepth_Type(Integer32):
    """Custom type chanIngrCurrQDepth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_ChanIngrCurrQDepth_Type.__name__ = "Integer32"
_ChanIngrCurrQDepth_Object = MibTableColumn
chanIngrCurrQDepth = _ChanIngrCurrQDepth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 2, 3, 1, 1, 27),
    _ChanIngrCurrQDepth_Type()
)
chanIngrCurrQDepth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chanIngrCurrQDepth.setStatus("mandatory")
_AusmEndPointMapGrp_ObjectIdentity = ObjectIdentity
ausmEndPointMapGrp = _AusmEndPointMapGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3)
)
_AusmEndPointMapGrpTable_Object = MibTable
ausmEndPointMapGrpTable = _AusmEndPointMapGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1)
)
if mibBuilder.loadTexts:
    ausmEndPointMapGrpTable.setStatus("mandatory")
_AusmEndPointMapGrpEntry_Object = MibTableRow
ausmEndPointMapGrpEntry = _AusmEndPointMapGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1, 1)
)
ausmEndPointMapGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "ausmEndPortNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "endVpi"),
    (0, "CISCO-WAN-AXIPOP-MIB", "endVci"),
)
if mibBuilder.loadTexts:
    ausmEndPointMapGrpEntry.setStatus("mandatory")


class _AusmEndPortNum_Type(Integer32):
    """Custom type ausmEndPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_AusmEndPortNum_Type.__name__ = "Integer32"
_AusmEndPortNum_Object = MibTableColumn
ausmEndPortNum = _AusmEndPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1, 1, 1),
    _AusmEndPortNum_Type()
)
ausmEndPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmEndPortNum.setStatus("mandatory")


class _EndVpi_Type(Integer32):
    """Custom type endVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_EndVpi_Type.__name__ = "Integer32"
_EndVpi_Object = MibTableColumn
endVpi = _EndVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1, 1, 2),
    _EndVpi_Type()
)
endVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    endVpi.setStatus("mandatory")


class _EndVci_Type(Integer32):
    """Custom type endVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_EndVci_Type.__name__ = "Integer32"
_EndVci_Object = MibTableColumn
endVci = _EndVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1, 1, 3),
    _EndVci_Type()
)
endVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    endVci.setStatus("mandatory")


class _AusmEndChanNum_Type(Integer32):
    """Custom type ausmEndChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 4111),
    )


_AusmEndChanNum_Type.__name__ = "Integer32"
_AusmEndChanNum_Object = MibTableColumn
ausmEndChanNum = _AusmEndChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1, 1, 4),
    _AusmEndChanNum_Type()
)
ausmEndChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ausmEndChanNum.setStatus("mandatory")


class _EndChanType_Type(Integer32):
    """Custom type endChanType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vcc", 2),
          ("vpc", 1))
    )


_EndChanType_Type.__name__ = "Integer32"
_EndChanType_Object = MibTableColumn
endChanType = _EndChanType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 3, 1, 1, 5),
    _EndChanType_Type()
)
endChanType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    endChanType.setStatus("mandatory")
_AtmLineCnfTable_Object = MibTable
atmLineCnfTable = _AtmLineCnfTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 1, 1)
)
if mibBuilder.loadTexts:
    atmLineCnfTable.setStatus("mandatory")
_AtmLineCnfEntry_Object = MibTableRow
atmLineCnfEntry = _AtmLineCnfEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 1, 1, 1)
)
atmLineCnfEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "atmLineCnfNum"),
)
if mibBuilder.loadTexts:
    atmLineCnfEntry.setStatus("mandatory")


class _AtmLineCnfNum_Type(Integer32):
    """Custom type atmLineCnfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_AtmLineCnfNum_Type.__name__ = "Integer32"
_AtmLineCnfNum_Object = MibTableColumn
atmLineCnfNum = _AtmLineCnfNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 1, 1, 1, 1),
    _AtmLineCnfNum_Type()
)
atmLineCnfNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLineCnfNum.setStatus("mandatory")


class _AtmLineInterfaceFormat_Type(Integer32):
    """Custom type atmLineInterfaceFormat based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("atmNni", 3),
          ("atmUni", 2),
          ("other", 1))
    )


_AtmLineInterfaceFormat_Type.__name__ = "Integer32"
_AtmLineInterfaceFormat_Object = MibTableColumn
atmLineInterfaceFormat = _AtmLineInterfaceFormat_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 1, 1, 1, 2),
    _AtmLineInterfaceFormat_Type()
)
atmLineInterfaceFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmLineInterfaceFormat.setStatus("mandatory")
_AtmLineCntTable_Object = MibTable
atmLineCntTable = _AtmLineCntTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1)
)
if mibBuilder.loadTexts:
    atmLineCntTable.setStatus("mandatory")
_AtmLineCntEntry_Object = MibTableRow
atmLineCntEntry = _AtmLineCntEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1, 1)
)
atmLineCntEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "atmLineNum"),
)
if mibBuilder.loadTexts:
    atmLineCntEntry.setStatus("mandatory")


class _AtmLineNum_Type(Integer32):
    """Custom type atmLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_AtmLineNum_Type.__name__ = "Integer32"
_AtmLineNum_Object = MibTableColumn
atmLineNum = _AtmLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1, 1, 1),
    _AtmLineNum_Type()
)
atmLineNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLineNum.setStatus("mandatory")
_AtmLineTotalRcvCells_Type = Counter32
_AtmLineTotalRcvCells_Object = MibTableColumn
atmLineTotalRcvCells = _AtmLineTotalRcvCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1, 1, 2),
    _AtmLineTotalRcvCells_Type()
)
atmLineTotalRcvCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLineTotalRcvCells.setStatus("mandatory")
_AtmLineTotalXmtCells_Type = Counter32
_AtmLineTotalXmtCells_Object = MibTableColumn
atmLineTotalXmtCells = _AtmLineTotalXmtCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1, 1, 3),
    _AtmLineTotalXmtCells_Type()
)
atmLineTotalXmtCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLineTotalXmtCells.setStatus("mandatory")
_AtmLineRcvHecErrorCells_Type = Counter32
_AtmLineRcvHecErrorCells_Object = MibTableColumn
atmLineRcvHecErrorCells = _AtmLineRcvHecErrorCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1, 1, 4),
    _AtmLineRcvHecErrorCells_Type()
)
atmLineRcvHecErrorCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLineRcvHecErrorCells.setStatus("mandatory")


class _AtmLineCntClrButton_Type(Integer32):
    """Custom type atmLineCntClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAction", 1),
          ("resetCounters", 2))
    )


_AtmLineCntClrButton_Type.__name__ = "Integer32"
_AtmLineCntClrButton_Object = MibTableColumn
atmLineCntClrButton = _AtmLineCntClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 5, 2, 1, 1, 5),
    _AtmLineCntClrButton_Type()
)
atmLineCntClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmLineCntClrButton.setStatus("mandatory")
_BbIfCnfPortGrp_ObjectIdentity = ObjectIdentity
bbIfCnfPortGrp = _BbIfCnfPortGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1)
)
_BbIfCnfPortGrpTable_Object = MibTable
bbIfCnfPortGrpTable = _BbIfCnfPortGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1)
)
if mibBuilder.loadTexts:
    bbIfCnfPortGrpTable.setStatus("mandatory")
_BbIfCnfPortGrpEntry_Object = MibTableRow
bbIfCnfPortGrpEntry = _BbIfCnfPortGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1)
)
bbIfCnfPortGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "bbIfNum"),
)
if mibBuilder.loadTexts:
    bbIfCnfPortGrpEntry.setStatus("mandatory")


class _BbIfNum_Type(Integer32):
    """Custom type bbIfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_BbIfNum_Type.__name__ = "Integer32"
_BbIfNum_Object = MibTableColumn
bbIfNum = _BbIfNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 1),
    _BbIfNum_Type()
)
bbIfNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfNum.setStatus("mandatory")


class _BbIfRowStatus_Type(Integer32):
    """Custom type bbIfRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_BbIfRowStatus_Type.__name__ = "Integer32"
_BbIfRowStatus_Object = MibTableColumn
bbIfRowStatus = _BbIfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 2),
    _BbIfRowStatus_Type()
)
bbIfRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRowStatus.setStatus("mandatory")


class _BbIfAdmin_Type(Integer32):
    """Custom type bbIfAdmin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1),
          ("writeOnly", 3))
    )


_BbIfAdmin_Type.__name__ = "Integer32"
_BbIfAdmin_Object = MibTableColumn
bbIfAdmin = _BbIfAdmin_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 3),
    _BbIfAdmin_Type()
)
bbIfAdmin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfAdmin.setStatus("mandatory")


class _BbIfLineNum_Type(Integer32):
    """Custom type bbIfLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_BbIfLineNum_Type.__name__ = "Integer32"
_BbIfLineNum_Object = MibTableColumn
bbIfLineNum = _BbIfLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 4),
    _BbIfLineNum_Type()
)
bbIfLineNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfLineNum.setStatus("mandatory")


class _BbIfIngrPctBandwidth_Type(Integer32):
    """Custom type bbIfIngrPctBandwidth based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_BbIfIngrPctBandwidth_Type.__name__ = "Integer32"
_BbIfIngrPctBandwidth_Object = MibTableColumn
bbIfIngrPctBandwidth = _BbIfIngrPctBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 5),
    _BbIfIngrPctBandwidth_Type()
)
bbIfIngrPctBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfIngrPctBandwidth.setStatus("mandatory")


class _BbIfEgrPctBandwidth_Type(Integer32):
    """Custom type bbIfEgrPctBandwidth based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_BbIfEgrPctBandwidth_Type.__name__ = "Integer32"
_BbIfEgrPctBandwidth_Object = MibTableColumn
bbIfEgrPctBandwidth = _BbIfEgrPctBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 6),
    _BbIfEgrPctBandwidth_Type()
)
bbIfEgrPctBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfEgrPctBandwidth.setStatus("mandatory")


class _BbIfMinVpi_Type(Integer32):
    """Custom type bbIfMinVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_BbIfMinVpi_Type.__name__ = "Integer32"
_BbIfMinVpi_Object = MibTableColumn
bbIfMinVpi = _BbIfMinVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 7),
    _BbIfMinVpi_Type()
)
bbIfMinVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfMinVpi.setStatus("mandatory")


class _BbIfMaxVpi_Type(Integer32):
    """Custom type bbIfMaxVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_BbIfMaxVpi_Type.__name__ = "Integer32"
_BbIfMaxVpi_Object = MibTableColumn
bbIfMaxVpi = _BbIfMaxVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 8),
    _BbIfMaxVpi_Type()
)
bbIfMaxVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfMaxVpi.setStatus("mandatory")
_BbIfSpeed_Type = Integer32
_BbIfSpeed_Object = MibTableColumn
bbIfSpeed = _BbIfSpeed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 9),
    _BbIfSpeed_Type()
)
bbIfSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfSpeed.setStatus("mandatory")


class _BbIfMaxCellRatePct_Type(Integer32):
    """Custom type bbIfMaxCellRatePct based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_BbIfMaxCellRatePct_Type.__name__ = "Integer32"
_BbIfMaxCellRatePct_Object = MibTableColumn
bbIfMaxCellRatePct = _BbIfMaxCellRatePct_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 1, 1, 10),
    _BbIfMaxCellRatePct_Type()
)
bbIfMaxCellRatePct.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfMaxCellRatePct.setStatus("mandatory")


class _NextBbIfNumAvailable_Type(Integer32):
    """Custom type nextBbIfNumAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_NextBbIfNumAvailable_Type.__name__ = "Integer32"
_NextBbIfNumAvailable_Object = MibScalar
nextBbIfNumAvailable = _NextBbIfNumAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 1, 2),
    _NextBbIfNumAvailable_Type()
)
nextBbIfNumAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nextBbIfNumAvailable.setStatus("mandatory")
_BbIfCnfSigILMIGrp_ObjectIdentity = ObjectIdentity
bbIfCnfSigILMIGrp = _BbIfCnfSigILMIGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2)
)
_BbIfCnfSigILMIGrpTable_Object = MibTable
bbIfCnfSigILMIGrpTable = _BbIfCnfSigILMIGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1)
)
if mibBuilder.loadTexts:
    bbIfCnfSigILMIGrpTable.setStatus("mandatory")
_BbIfCnfSigILMIGrpEntry_Object = MibTableRow
bbIfCnfSigILMIGrpEntry = _BbIfCnfSigILMIGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1)
)
bbIfCnfSigILMIGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "bbIfSigPortNum"),
)
if mibBuilder.loadTexts:
    bbIfCnfSigILMIGrpEntry.setStatus("mandatory")


class _BbIfSigPortNum_Type(Integer32):
    """Custom type bbIfSigPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_BbIfSigPortNum_Type.__name__ = "Integer32"
_BbIfSigPortNum_Object = MibTableColumn
bbIfSigPortNum = _BbIfSigPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 1),
    _BbIfSigPortNum_Type()
)
bbIfSigPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfSigPortNum.setStatus("mandatory")


class _BbIfIlmiEnable_Type(Integer32):
    """Custom type bbIfIlmiEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_BbIfIlmiEnable_Type.__name__ = "Integer32"
_BbIfIlmiEnable_Object = MibTableColumn
bbIfIlmiEnable = _BbIfIlmiEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 2),
    _BbIfIlmiEnable_Type()
)
bbIfIlmiEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfIlmiEnable.setStatus("mandatory")


class _BbIfSignallingProtocolType_Type(Integer32):
    """Custom type bbIfSignallingProtocolType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("iLMI", 3),
          ("noSignalling", 2),
          ("other", 1))
    )


_BbIfSignallingProtocolType_Type.__name__ = "Integer32"
_BbIfSignallingProtocolType_Object = MibTableColumn
bbIfSignallingProtocolType = _BbIfSignallingProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 3),
    _BbIfSignallingProtocolType_Type()
)
bbIfSignallingProtocolType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfSignallingProtocolType.setStatus("mandatory")


class _BbIfSignallingVpi_Type(Integer32):
    """Custom type bbIfSignallingVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_BbIfSignallingVpi_Type.__name__ = "Integer32"
_BbIfSignallingVpi_Object = MibTableColumn
bbIfSignallingVpi = _BbIfSignallingVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 4),
    _BbIfSignallingVpi_Type()
)
bbIfSignallingVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfSignallingVpi.setStatus("mandatory")


class _BbIfSignallingVci_Type(Integer32):
    """Custom type bbIfSignallingVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BbIfSignallingVci_Type.__name__ = "Integer32"
_BbIfSignallingVci_Object = MibTableColumn
bbIfSignallingVci = _BbIfSignallingVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 5),
    _BbIfSignallingVci_Type()
)
bbIfSignallingVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfSignallingVci.setStatus("mandatory")
_BbIfAddrPrefix_Type = NetPrefix
_BbIfAddrPrefix_Object = MibTableColumn
bbIfAddrPrefix = _BbIfAddrPrefix_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 6),
    _BbIfAddrPrefix_Type()
)
bbIfAddrPrefix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfAddrPrefix.setStatus("mandatory")
_BbIfCustomerId_Type = Integer32
_BbIfCustomerId_Object = MibTableColumn
bbIfCustomerId = _BbIfCustomerId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 7),
    _BbIfCustomerId_Type()
)
bbIfCustomerId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfCustomerId.setStatus("mandatory")
_BbIfProtocolRevNo_Type = Integer32
_BbIfProtocolRevNo_Object = MibTableColumn
bbIfProtocolRevNo = _BbIfProtocolRevNo_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 8),
    _BbIfProtocolRevNo_Type()
)
bbIfProtocolRevNo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfProtocolRevNo.setStatus("mandatory")


class _BbIfIlmiTrapEnable_Type(Integer32):
    """Custom type bbIfIlmiTrapEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_BbIfIlmiTrapEnable_Type.__name__ = "Integer32"
_BbIfIlmiTrapEnable_Object = MibTableColumn
bbIfIlmiTrapEnable = _BbIfIlmiTrapEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 9),
    _BbIfIlmiTrapEnable_Type()
)
bbIfIlmiTrapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfIlmiTrapEnable.setStatus("mandatory")


class _BbIfMinTrapInterval_Type(Integer32):
    """Custom type bbIfMinTrapInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_BbIfMinTrapInterval_Type.__name__ = "Integer32"
_BbIfMinTrapInterval_Object = MibTableColumn
bbIfMinTrapInterval = _BbIfMinTrapInterval_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 10),
    _BbIfMinTrapInterval_Type()
)
bbIfMinTrapInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfMinTrapInterval.setStatus("mandatory")


class _BbIfKeepAlivePollingEnable_Type(Integer32):
    """Custom type bbIfKeepAlivePollingEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_BbIfKeepAlivePollingEnable_Type.__name__ = "Integer32"
_BbIfKeepAlivePollingEnable_Object = MibTableColumn
bbIfKeepAlivePollingEnable = _BbIfKeepAlivePollingEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 11),
    _BbIfKeepAlivePollingEnable_Type()
)
bbIfKeepAlivePollingEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfKeepAlivePollingEnable.setStatus("mandatory")


class _BbIfErrorThresholdN491_Type(Integer32):
    """Custom type bbIfErrorThresholdN491 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_BbIfErrorThresholdN491_Type.__name__ = "Integer32"
_BbIfErrorThresholdN491_Object = MibTableColumn
bbIfErrorThresholdN491 = _BbIfErrorThresholdN491_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 12),
    _BbIfErrorThresholdN491_Type()
)
bbIfErrorThresholdN491.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfErrorThresholdN491.setStatus("mandatory")


class _BbIfEventThresholdN492_Type(Integer32):
    """Custom type bbIfEventThresholdN492 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_BbIfEventThresholdN492_Type.__name__ = "Integer32"
_BbIfEventThresholdN492_Object = MibTableColumn
bbIfEventThresholdN492 = _BbIfEventThresholdN492_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 13),
    _BbIfEventThresholdN492_Type()
)
bbIfEventThresholdN492.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfEventThresholdN492.setStatus("mandatory")


class _BbIfPollingIntervalT491_Type(Integer32):
    """Custom type bbIfPollingIntervalT491 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              10,
              15,
              20,
              25,
              30,
              35,
              40,
              45,
              50,
              55,
              60)
        )
    )
    namedValues = NamedValues(
        *(("v1", 5),
          ("v10", 50),
          ("v11", 55),
          ("v12", 60),
          ("v2", 10),
          ("v3", 15),
          ("v4", 20),
          ("v5", 25),
          ("v6", 30),
          ("v7", 35),
          ("v8", 40),
          ("v9", 45))
    )


_BbIfPollingIntervalT491_Type.__name__ = "Integer32"
_BbIfPollingIntervalT491_Object = MibTableColumn
bbIfPollingIntervalT491 = _BbIfPollingIntervalT491_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 14),
    _BbIfPollingIntervalT491_Type()
)
bbIfPollingIntervalT491.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfPollingIntervalT491.setStatus("mandatory")


class _BbIfMinEnquiryIntervalT493_Type(Integer32):
    """Custom type bbIfMinEnquiryIntervalT493 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_BbIfMinEnquiryIntervalT493_Type.__name__ = "Integer32"
_BbIfMinEnquiryIntervalT493_Object = MibTableColumn
bbIfMinEnquiryIntervalT493 = _BbIfMinEnquiryIntervalT493_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 15),
    _BbIfMinEnquiryIntervalT493_Type()
)
bbIfMinEnquiryIntervalT493.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfMinEnquiryIntervalT493.setStatus("mandatory")


class _BbIfAddrRegEnable_Type(Integer32):
    """Custom type bbIfAddrRegEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_BbIfAddrRegEnable_Type.__name__ = "Integer32"
_BbIfAddrRegEnable_Object = MibTableColumn
bbIfAddrRegEnable = _BbIfAddrRegEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 1, 2, 1, 1, 16),
    _BbIfAddrRegEnable_Type()
)
bbIfAddrRegEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfAddrRegEnable.setStatus("mandatory")
_BbIfCnfRscPartGrpTable_Object = MibTable
bbIfCnfRscPartGrpTable = _BbIfCnfRscPartGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1)
)
if mibBuilder.loadTexts:
    bbIfCnfRscPartGrpTable.setStatus("mandatory")
_BbIfCnfRscPartGrpEntry_Object = MibTableRow
bbIfCnfRscPartGrpEntry = _BbIfCnfRscPartGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1)
)
bbIfCnfRscPartGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "bbRscPartIfNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "bbRscPartCtrlrNum"),
)
if mibBuilder.loadTexts:
    bbIfCnfRscPartGrpEntry.setStatus("mandatory")


class _BbRscPartIfNum_Type(Integer32):
    """Custom type bbRscPartIfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_BbRscPartIfNum_Type.__name__ = "Integer32"
_BbRscPartIfNum_Object = MibTableColumn
bbRscPartIfNum = _BbRscPartIfNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 1),
    _BbRscPartIfNum_Type()
)
bbRscPartIfNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbRscPartIfNum.setStatus("mandatory")


class _BbRscPartCtrlrNum_Type(Integer32):
    """Custom type bbRscPartCtrlrNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("par", 1),
          ("pnni", 2),
          ("tag", 3))
    )


_BbRscPartCtrlrNum_Type.__name__ = "Integer32"
_BbRscPartCtrlrNum_Object = MibTableColumn
bbRscPartCtrlrNum = _BbRscPartCtrlrNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 2),
    _BbRscPartCtrlrNum_Type()
)
bbRscPartCtrlrNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbRscPartCtrlrNum.setStatus("mandatory")


class _BbIfRscPrtRowStatus_Type(Integer32):
    """Custom type bbIfRscPrtRowStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_BbIfRscPrtRowStatus_Type.__name__ = "Integer32"
_BbIfRscPrtRowStatus_Object = MibTableColumn
bbIfRscPrtRowStatus = _BbIfRscPrtRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 3),
    _BbIfRscPrtRowStatus_Type()
)
bbIfRscPrtRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRscPrtRowStatus.setStatus("mandatory")


class _BbIfRscPrtInUse_Type(Integer32):
    """Custom type bbIfRscPrtInUse based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inUse", 1),
          ("notInUse", 2))
    )


_BbIfRscPrtInUse_Type.__name__ = "Integer32"
_BbIfRscPrtInUse_Object = MibTableColumn
bbIfRscPrtInUse = _BbIfRscPrtInUse_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 4),
    _BbIfRscPrtInUse_Type()
)
bbIfRscPrtInUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRscPrtInUse.setStatus("mandatory")


class _BbIfRscPrtIngrPctBandwidth_Type(Integer32):
    """Custom type bbIfRscPrtIngrPctBandwidth based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_BbIfRscPrtIngrPctBandwidth_Type.__name__ = "Integer32"
_BbIfRscPrtIngrPctBandwidth_Object = MibTableColumn
bbIfRscPrtIngrPctBandwidth = _BbIfRscPrtIngrPctBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 5),
    _BbIfRscPrtIngrPctBandwidth_Type()
)
bbIfRscPrtIngrPctBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRscPrtIngrPctBandwidth.setStatus("mandatory")


class _BbIfRscPrtEgrPctBandwidth_Type(Integer32):
    """Custom type bbIfRscPrtEgrPctBandwidth based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_BbIfRscPrtEgrPctBandwidth_Type.__name__ = "Integer32"
_BbIfRscPrtEgrPctBandwidth_Object = MibTableColumn
bbIfRscPrtEgrPctBandwidth = _BbIfRscPrtEgrPctBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 6),
    _BbIfRscPrtEgrPctBandwidth_Type()
)
bbIfRscPrtEgrPctBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRscPrtEgrPctBandwidth.setStatus("mandatory")


class _BbIfRscPrtVpiLow_Type(Integer32):
    """Custom type bbIfRscPrtVpiLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_BbIfRscPrtVpiLow_Type.__name__ = "Integer32"
_BbIfRscPrtVpiLow_Object = MibTableColumn
bbIfRscPrtVpiLow = _BbIfRscPrtVpiLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 7),
    _BbIfRscPrtVpiLow_Type()
)
bbIfRscPrtVpiLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRscPrtVpiLow.setStatus("mandatory")


class _BbIfRscPrtVpiHigh_Type(Integer32):
    """Custom type bbIfRscPrtVpiHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_BbIfRscPrtVpiHigh_Type.__name__ = "Integer32"
_BbIfRscPrtVpiHigh_Object = MibTableColumn
bbIfRscPrtVpiHigh = _BbIfRscPrtVpiHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 8),
    _BbIfRscPrtVpiHigh_Type()
)
bbIfRscPrtVpiHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRscPrtVpiHigh.setStatus("mandatory")


class _BbIfRscPrtVciLow_Type(Integer32):
    """Custom type bbIfRscPrtVciLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BbIfRscPrtVciLow_Type.__name__ = "Integer32"
_BbIfRscPrtVciLow_Object = MibTableColumn
bbIfRscPrtVciLow = _BbIfRscPrtVciLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 9),
    _BbIfRscPrtVciLow_Type()
)
bbIfRscPrtVciLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRscPrtVciLow.setStatus("mandatory")


class _BbIfRscPrtVciHigh_Type(Integer32):
    """Custom type bbIfRscPrtVciHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BbIfRscPrtVciHigh_Type.__name__ = "Integer32"
_BbIfRscPrtVciHigh_Object = MibTableColumn
bbIfRscPrtVciHigh = _BbIfRscPrtVciHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 10),
    _BbIfRscPrtVciHigh_Type()
)
bbIfRscPrtVciHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRscPrtVciHigh.setStatus("mandatory")


class _BbIfRscPrtVpidLow_Type(Integer32):
    """Custom type bbIfRscPrtVpidLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_BbIfRscPrtVpidLow_Type.__name__ = "Integer32"
_BbIfRscPrtVpidLow_Object = MibTableColumn
bbIfRscPrtVpidLow = _BbIfRscPrtVpidLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 11),
    _BbIfRscPrtVpidLow_Type()
)
bbIfRscPrtVpidLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRscPrtVpidLow.setStatus("mandatory")


class _BbIfRscPrtVpidHigh_Type(Integer32):
    """Custom type bbIfRscPrtVpidHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_BbIfRscPrtVpidHigh_Type.__name__ = "Integer32"
_BbIfRscPrtVpidHigh_Object = MibTableColumn
bbIfRscPrtVpidHigh = _BbIfRscPrtVpidHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 12),
    _BbIfRscPrtVpidHigh_Type()
)
bbIfRscPrtVpidHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRscPrtVpidHigh.setStatus("mandatory")


class _BbIfRscPrtMaxChans_Type(Integer32):
    """Custom type bbIfRscPrtMaxChans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32767),
    )


_BbIfRscPrtMaxChans_Type.__name__ = "Integer32"
_BbIfRscPrtMaxChans_Object = MibTableColumn
bbIfRscPrtMaxChans = _BbIfRscPrtMaxChans_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 13),
    _BbIfRscPrtMaxChans_Type()
)
bbIfRscPrtMaxChans.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRscPrtMaxChans.setStatus("mandatory")


class _BbIfRscPartCtrlrID_Type(Integer32):
    """Custom type bbIfRscPartCtrlrID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_BbIfRscPartCtrlrID_Type.__name__ = "Integer32"
_BbIfRscPartCtrlrID_Object = MibTableColumn
bbIfRscPartCtrlrID = _BbIfRscPartCtrlrID_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 2, 1, 1, 14),
    _BbIfRscPartCtrlrID_Type()
)
bbIfRscPartCtrlrID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfRscPartCtrlrID.setStatus("mandatory")
_BbIfStateGrpTable_Object = MibTable
bbIfStateGrpTable = _BbIfStateGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1)
)
if mibBuilder.loadTexts:
    bbIfStateGrpTable.setStatus("mandatory")
_BbIfStateGrpEntry_Object = MibTableRow
bbIfStateGrpEntry = _BbIfStateGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1)
)
bbIfStateGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "bbStateIfNum"),
)
if mibBuilder.loadTexts:
    bbIfStateGrpEntry.setStatus("mandatory")


class _BbStateIfNum_Type(Integer32):
    """Custom type bbStateIfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_BbStateIfNum_Type.__name__ = "Integer32"
_BbStateIfNum_Object = MibTableColumn
bbStateIfNum = _BbStateIfNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 1),
    _BbStateIfNum_Type()
)
bbStateIfNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbStateIfNum.setStatus("mandatory")


class _BbIfState_Type(Integer32):
    """Custom type bbIfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("inactive", 6),
          ("linefailure", 4),
          ("lineinloopback", 7),
          ("notConfigured", 1),
          ("signallingfailure", 5))
    )


_BbIfState_Type.__name__ = "Integer32"
_BbIfState_Object = MibTableColumn
bbIfState = _BbIfState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 2),
    _BbIfState_Type()
)
bbIfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfState.setStatus("mandatory")


class _BbIfOversubscribed_Type(Integer32):
    """Custom type bbIfOversubscribed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_BbIfOversubscribed_Type.__name__ = "Integer32"
_BbIfOversubscribed_Object = MibTableColumn
bbIfOversubscribed = _BbIfOversubscribed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 3),
    _BbIfOversubscribed_Type()
)
bbIfOversubscribed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfOversubscribed.setStatus("mandatory")


class _BbIfIngrPercentUtil_Type(Integer32):
    """Custom type bbIfIngrPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_BbIfIngrPercentUtil_Type.__name__ = "Integer32"
_BbIfIngrPercentUtil_Object = MibTableColumn
bbIfIngrPercentUtil = _BbIfIngrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 4),
    _BbIfIngrPercentUtil_Type()
)
bbIfIngrPercentUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfIngrPercentUtil.setStatus("mandatory")


class _BbIfEgrPercentUtil_Type(Integer32):
    """Custom type bbIfEgrPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_BbIfEgrPercentUtil_Type.__name__ = "Integer32"
_BbIfEgrPercentUtil_Object = MibTableColumn
bbIfEgrPercentUtil = _BbIfEgrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 3, 1, 1, 5),
    _BbIfEgrPercentUtil_Type()
)
bbIfEgrPercentUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfEgrPercentUtil.setStatus("mandatory")
_BbIfCntGrp_ObjectIdentity = ObjectIdentity
bbIfCntGrp = _BbIfCntGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1)
)
_BbIfCntGrpTable_Object = MibTable
bbIfCntGrpTable = _BbIfCntGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1)
)
if mibBuilder.loadTexts:
    bbIfCntGrpTable.setStatus("mandatory")
_BbIfCntGrpEntry_Object = MibTableRow
bbIfCntGrpEntry = _BbIfCntGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1)
)
bbIfCntGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "bbCntIfNum"),
)
if mibBuilder.loadTexts:
    bbIfCntGrpEntry.setStatus("mandatory")


class _BbCntIfNum_Type(Integer32):
    """Custom type bbCntIfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_BbCntIfNum_Type.__name__ = "Integer32"
_BbCntIfNum_Object = MibTableColumn
bbCntIfNum = _BbCntIfNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 1),
    _BbCntIfNum_Type()
)
bbCntIfNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbCntIfNum.setStatus("mandatory")
_BbIfTotalCells_Type = Counter32
_BbIfTotalCells_Object = MibTableColumn
bbIfTotalCells = _BbIfTotalCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 2),
    _BbIfTotalCells_Type()
)
bbIfTotalCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfTotalCells.setStatus("mandatory")
_BbIfRcvValidOAMCells_Type = Counter32
_BbIfRcvValidOAMCells_Object = MibTableColumn
bbIfRcvValidOAMCells = _BbIfRcvValidOAMCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 3),
    _BbIfRcvValidOAMCells_Type()
)
bbIfRcvValidOAMCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfRcvValidOAMCells.setStatus("mandatory")
_BbIfRcvRmCells_Type = Counter32
_BbIfRcvRmCells_Object = MibTableColumn
bbIfRcvRmCells = _BbIfRcvRmCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 4),
    _BbIfRcvRmCells_Type()
)
bbIfRcvRmCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfRcvRmCells.setStatus("mandatory")
_BbIfRcvClp0Cells_Type = Counter32
_BbIfRcvClp0Cells_Object = MibTableColumn
bbIfRcvClp0Cells = _BbIfRcvClp0Cells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 5),
    _BbIfRcvClp0Cells_Type()
)
bbIfRcvClp0Cells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfRcvClp0Cells.setStatus("mandatory")
_BbIfRcvClp1Cells_Type = Counter32
_BbIfRcvClp1Cells_Object = MibTableColumn
bbIfRcvClp1Cells = _BbIfRcvClp1Cells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 6),
    _BbIfRcvClp1Cells_Type()
)
bbIfRcvClp1Cells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfRcvClp1Cells.setStatus("mandatory")
_BbIfRcvClp0DiscCells_Type = Counter32
_BbIfRcvClp0DiscCells_Object = MibTableColumn
bbIfRcvClp0DiscCells = _BbIfRcvClp0DiscCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 7),
    _BbIfRcvClp0DiscCells_Type()
)
bbIfRcvClp0DiscCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfRcvClp0DiscCells.setStatus("mandatory")
_BbIfRcvClp1DiscCells_Type = Counter32
_BbIfRcvClp1DiscCells_Object = MibTableColumn
bbIfRcvClp1DiscCells = _BbIfRcvClp1DiscCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 8),
    _BbIfRcvClp1DiscCells_Type()
)
bbIfRcvClp1DiscCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfRcvClp1DiscCells.setStatus("mandatory")
_BbIfXmtOAMCells_Type = Counter32
_BbIfXmtOAMCells_Object = MibTableColumn
bbIfXmtOAMCells = _BbIfXmtOAMCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 9),
    _BbIfXmtOAMCells_Type()
)
bbIfXmtOAMCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfXmtOAMCells.setStatus("mandatory")
_BbIfXmtRmCells_Type = Counter32
_BbIfXmtRmCells_Object = MibTableColumn
bbIfXmtRmCells = _BbIfXmtRmCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 10),
    _BbIfXmtRmCells_Type()
)
bbIfXmtRmCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfXmtRmCells.setStatus("mandatory")
_BbIfXmtClp0Cells_Type = Counter32
_BbIfXmtClp0Cells_Object = MibTableColumn
bbIfXmtClp0Cells = _BbIfXmtClp0Cells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 11),
    _BbIfXmtClp0Cells_Type()
)
bbIfXmtClp0Cells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfXmtClp0Cells.setStatus("mandatory")
_BbIfXmtClp1Cells_Type = Counter32
_BbIfXmtClp1Cells_Object = MibTableColumn
bbIfXmtClp1Cells = _BbIfXmtClp1Cells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 12),
    _BbIfXmtClp1Cells_Type()
)
bbIfXmtClp1Cells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfXmtClp1Cells.setStatus("mandatory")


class _BbIfCntClrButton_Type(Integer32):
    """Custom type bbIfCntClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAction", 1),
          ("resetCounters", 2))
    )


_BbIfCntClrButton_Type.__name__ = "Integer32"
_BbIfCntClrButton_Object = MibTableColumn
bbIfCntClrButton = _BbIfCntClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 1, 1, 1, 13),
    _BbIfCntClrButton_Type()
)
bbIfCntClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfCntClrButton.setStatus("mandatory")
_BbIfCntSigILMIGrp_ObjectIdentity = ObjectIdentity
bbIfCntSigILMIGrp = _BbIfCntSigILMIGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2)
)
_BbIfCntSigILMIGrpTable_Object = MibTable
bbIfCntSigILMIGrpTable = _BbIfCntSigILMIGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1)
)
if mibBuilder.loadTexts:
    bbIfCntSigILMIGrpTable.setStatus("mandatory")
_BbIfCntSigILMIGrpEntry_Object = MibTableRow
bbIfCntSigILMIGrpEntry = _BbIfCntSigILMIGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1)
)
bbIfCntSigILMIGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "sigCntBbIfNum"),
)
if mibBuilder.loadTexts:
    bbIfCntSigILMIGrpEntry.setStatus("mandatory")


class _SigCntBbIfNum_Type(Integer32):
    """Custom type sigCntBbIfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_SigCntBbIfNum_Type.__name__ = "Integer32"
_SigCntBbIfNum_Object = MibTableColumn
sigCntBbIfNum = _SigCntBbIfNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 1),
    _SigCntBbIfNum_Type()
)
sigCntBbIfNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sigCntBbIfNum.setStatus("mandatory")
_BbIfSnmpPduReceived_Type = Counter32
_BbIfSnmpPduReceived_Object = MibTableColumn
bbIfSnmpPduReceived = _BbIfSnmpPduReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 2),
    _BbIfSnmpPduReceived_Type()
)
bbIfSnmpPduReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfSnmpPduReceived.setStatus("mandatory")
_BbIfGetRequestReceived_Type = Counter32
_BbIfGetRequestReceived_Object = MibTableColumn
bbIfGetRequestReceived = _BbIfGetRequestReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 3),
    _BbIfGetRequestReceived_Type()
)
bbIfGetRequestReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfGetRequestReceived.setStatus("mandatory")
_BbIfGetNextRequestReceived_Type = Counter32
_BbIfGetNextRequestReceived_Object = MibTableColumn
bbIfGetNextRequestReceived = _BbIfGetNextRequestReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 4),
    _BbIfGetNextRequestReceived_Type()
)
bbIfGetNextRequestReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfGetNextRequestReceived.setStatus("mandatory")
_BbIfSetRequestReceived_Type = Counter32
_BbIfSetRequestReceived_Object = MibTableColumn
bbIfSetRequestReceived = _BbIfSetRequestReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 5),
    _BbIfSetRequestReceived_Type()
)
bbIfSetRequestReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfSetRequestReceived.setStatus("mandatory")
_BbIfTrapReceived_Type = Counter32
_BbIfTrapReceived_Object = MibTableColumn
bbIfTrapReceived = _BbIfTrapReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 6),
    _BbIfTrapReceived_Type()
)
bbIfTrapReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfTrapReceived.setStatus("mandatory")
_BbIfGetResponseReceived_Type = Counter32
_BbIfGetResponseReceived_Object = MibTableColumn
bbIfGetResponseReceived = _BbIfGetResponseReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 7),
    _BbIfGetResponseReceived_Type()
)
bbIfGetResponseReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfGetResponseReceived.setStatus("mandatory")
_BbIfGetResponseTransmitted_Type = Counter32
_BbIfGetResponseTransmitted_Object = MibTableColumn
bbIfGetResponseTransmitted = _BbIfGetResponseTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 8),
    _BbIfGetResponseTransmitted_Type()
)
bbIfGetResponseTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfGetResponseTransmitted.setStatus("mandatory")
_BbIfGetRequestTransmitted_Type = Counter32
_BbIfGetRequestTransmitted_Object = MibTableColumn
bbIfGetRequestTransmitted = _BbIfGetRequestTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 9),
    _BbIfGetRequestTransmitted_Type()
)
bbIfGetRequestTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfGetRequestTransmitted.setStatus("mandatory")
_BbIfTrapTransmitted_Type = Counter32
_BbIfTrapTransmitted_Object = MibTableColumn
bbIfTrapTransmitted = _BbIfTrapTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 10),
    _BbIfTrapTransmitted_Type()
)
bbIfTrapTransmitted.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfTrapTransmitted.setStatus("mandatory")
_BbIfInvalidPDUReceived_Type = Counter32
_BbIfInvalidPDUReceived_Object = MibTableColumn
bbIfInvalidPDUReceived = _BbIfInvalidPDUReceived_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 11),
    _BbIfInvalidPDUReceived_Type()
)
bbIfInvalidPDUReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfInvalidPDUReceived.setStatus("mandatory")
_BbIfAsn1ParseError_Type = Counter32
_BbIfAsn1ParseError_Object = MibTableColumn
bbIfAsn1ParseError = _BbIfAsn1ParseError_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 12),
    _BbIfAsn1ParseError_Type()
)
bbIfAsn1ParseError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfAsn1ParseError.setStatus("mandatory")
_BbIfNoSuchNameError_Type = Counter32
_BbIfNoSuchNameError_Object = MibTableColumn
bbIfNoSuchNameError = _BbIfNoSuchNameError_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 13),
    _BbIfNoSuchNameError_Type()
)
bbIfNoSuchNameError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfNoSuchNameError.setStatus("mandatory")
_BbIfTooBigError_Type = Counter32
_BbIfTooBigError_Object = MibTableColumn
bbIfTooBigError = _BbIfTooBigError_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 14),
    _BbIfTooBigError_Type()
)
bbIfTooBigError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbIfTooBigError.setStatus("mandatory")


class _BbIfSigCntClrButton_Type(Integer32):
    """Custom type bbIfSigCntClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAction", 1),
          ("resetCounters", 2))
    )


_BbIfSigCntClrButton_Type.__name__ = "Integer32"
_BbIfSigCntClrButton_Object = MibTableColumn
bbIfSigCntClrButton = _BbIfSigCntClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 6, 4, 2, 1, 1, 15),
    _BbIfSigCntClrButton_Type()
)
bbIfSigCntClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbIfSigCntClrButton.setStatus("mandatory")
_BbChanCnfGrpTable_Object = MibTable
bbChanCnfGrpTable = _BbChanCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1)
)
if mibBuilder.loadTexts:
    bbChanCnfGrpTable.setStatus("mandatory")
_BbChanCnfGrpEntry_Object = MibTableRow
bbChanCnfGrpEntry = _BbChanCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1)
)
bbChanCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "bbChanCnfNum"),
)
if mibBuilder.loadTexts:
    bbChanCnfGrpEntry.setStatus("mandatory")


class _BbChanCnfNum_Type(Integer32):
    """Custom type bbChanCnfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 4111),
    )


_BbChanCnfNum_Type.__name__ = "Integer32"
_BbChanCnfNum_Object = MibTableColumn
bbChanCnfNum = _BbChanCnfNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 1),
    _BbChanCnfNum_Type()
)
bbChanCnfNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanCnfNum.setStatus("mandatory")


class _BbChanRowStatus_Type(Integer32):
    """Custom type bbChanRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("delete", 2),
          ("modify", 3))
    )


_BbChanRowStatus_Type.__name__ = "Integer32"
_BbChanRowStatus_Object = MibTableColumn
bbChanRowStatus = _BbChanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 2),
    _BbChanRowStatus_Type()
)
bbChanRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanRowStatus.setStatus("mandatory")


class _BbChanConnType_Type(Integer32):
    """Custom type bbChanConnType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vcc", 2),
          ("vpc", 1))
    )


_BbChanConnType_Type.__name__ = "Integer32"
_BbChanConnType_Object = MibTableColumn
bbChanConnType = _BbChanConnType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 3),
    _BbChanConnType_Type()
)
bbChanConnType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanConnType.setStatus("mandatory")


class _BbChanServiceType_Type(Integer32):
    """Custom type bbChanServiceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("abr", 3),
          ("cbr", 1),
          ("ubr", 4),
          ("vbr", 2),
          ("vbr-rt", 5))
    )


_BbChanServiceType_Type.__name__ = "Integer32"
_BbChanServiceType_Object = MibTableColumn
bbChanServiceType = _BbChanServiceType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 4),
    _BbChanServiceType_Type()
)
bbChanServiceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanServiceType.setStatus("mandatory")


class _BbChanConnDesc_Type(DisplayString):
    """Custom type bbChanConnDesc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_BbChanConnDesc_Type.__name__ = "DisplayString"
_BbChanConnDesc_Object = MibTableColumn
bbChanConnDesc = _BbChanConnDesc_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 5),
    _BbChanConnDesc_Type()
)
bbChanConnDesc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanConnDesc.setStatus("mandatory")


class _BbChanSvcFlag_Type(Integer32):
    """Custom type bbChanSvcFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("pvc", 2),
          ("spvc", 3),
          ("svc", 1))
    )


_BbChanSvcFlag_Type.__name__ = "Integer32"
_BbChanSvcFlag_Object = MibTableColumn
bbChanSvcFlag = _BbChanSvcFlag_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 6),
    _BbChanSvcFlag_Type()
)
bbChanSvcFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanSvcFlag.setStatus("mandatory")
_BbChanSvcConnId_Type = Integer32
_BbChanSvcConnId_Object = MibTableColumn
bbChanSvcConnId = _BbChanSvcConnId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 7),
    _BbChanSvcConnId_Type()
)
bbChanSvcConnId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanSvcConnId.setStatus("mandatory")


class _BbChanIfNum_Type(Integer32):
    """Custom type bbChanIfNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_BbChanIfNum_Type.__name__ = "Integer32"
_BbChanIfNum_Object = MibTableColumn
bbChanIfNum = _BbChanIfNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 8),
    _BbChanIfNum_Type()
)
bbChanIfNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanIfNum.setStatus("mandatory")


class _BbChanVpi_Type(Integer32):
    """Custom type bbChanVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_BbChanVpi_Type.__name__ = "Integer32"
_BbChanVpi_Object = MibTableColumn
bbChanVpi = _BbChanVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 9),
    _BbChanVpi_Type()
)
bbChanVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanVpi.setStatus("mandatory")


class _BbChanVci_Type(Integer32):
    """Custom type bbChanVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BbChanVci_Type.__name__ = "Integer32"
_BbChanVci_Object = MibTableColumn
bbChanVci = _BbChanVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 10),
    _BbChanVci_Type()
)
bbChanVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanVci.setStatus("mandatory")


class _BbChanUpcEnable_Type(Integer32):
    """Custom type bbChanUpcEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_BbChanUpcEnable_Type.__name__ = "Integer32"
_BbChanUpcEnable_Object = MibTableColumn
bbChanUpcEnable = _BbChanUpcEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 11),
    _BbChanUpcEnable_Type()
)
bbChanUpcEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanUpcEnable.setStatus("mandatory")


class _BbChanUpcPCR_Type(Integer32):
    """Custom type bbChanUpcPCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(50, 1412832),
    )


_BbChanUpcPCR_Type.__name__ = "Integer32"
_BbChanUpcPCR_Object = MibTableColumn
bbChanUpcPCR = _BbChanUpcPCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 12),
    _BbChanUpcPCR_Type()
)
bbChanUpcPCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanUpcPCR.setStatus("mandatory")


class _BbChanUpcCDVT_Type(Integer32):
    """Custom type bbChanUpcCDVT based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5000000),
    )


_BbChanUpcCDVT_Type.__name__ = "Integer32"
_BbChanUpcCDVT_Object = MibTableColumn
bbChanUpcCDVT = _BbChanUpcCDVT_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 13),
    _BbChanUpcCDVT_Type()
)
bbChanUpcCDVT.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanUpcCDVT.setStatus("mandatory")


class _BbChanUpcSCR_Type(Integer32):
    """Custom type bbChanUpcSCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1412832),
    )


_BbChanUpcSCR_Type.__name__ = "Integer32"
_BbChanUpcSCR_Object = MibTableColumn
bbChanUpcSCR = _BbChanUpcSCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 14),
    _BbChanUpcSCR_Type()
)
bbChanUpcSCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanUpcSCR.setStatus("mandatory")


class _BbChanUpcMBS_Type(Integer32):
    """Custom type bbChanUpcMBS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5000000),
    )


_BbChanUpcMBS_Type.__name__ = "Integer32"
_BbChanUpcMBS_Object = MibTableColumn
bbChanUpcMBS = _BbChanUpcMBS_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 15),
    _BbChanUpcMBS_Type()
)
bbChanUpcMBS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanUpcMBS.setStatus("mandatory")


class _BbChanGcra1Action_Type(Integer32):
    """Custom type bbChanGcra1Action based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("discardAllNonComformCells", 4),
          ("noAction", 1),
          ("tagAndDiscard", 3),
          ("tagCells", 2))
    )


_BbChanGcra1Action_Type.__name__ = "Integer32"
_BbChanGcra1Action_Object = MibTableColumn
bbChanGcra1Action = _BbChanGcra1Action_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 16),
    _BbChanGcra1Action_Type()
)
bbChanGcra1Action.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanGcra1Action.setStatus("mandatory")


class _BbChanGcra2Action_Type(Integer32):
    """Custom type bbChanGcra2Action based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("discardAllNonComformCells", 4),
          ("noAction", 1),
          ("tagAndDiscard", 3),
          ("tagCells", 2))
    )


_BbChanGcra2Action_Type.__name__ = "Integer32"
_BbChanGcra2Action_Object = MibTableColumn
bbChanGcra2Action = _BbChanGcra2Action_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 17),
    _BbChanGcra2Action_Type()
)
bbChanGcra2Action.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanGcra2Action.setStatus("mandatory")


class _BbChanUpcSCRPolicing_Type(Integer32):
    """Custom type bbChanUpcSCRPolicing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clp0", 1),
          ("clp0and1", 2),
          ("off", 3))
    )


_BbChanUpcSCRPolicing_Type.__name__ = "Integer32"
_BbChanUpcSCRPolicing_Object = MibTableColumn
bbChanUpcSCRPolicing = _BbChanUpcSCRPolicing_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 18),
    _BbChanUpcSCRPolicing_Type()
)
bbChanUpcSCRPolicing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanUpcSCRPolicing.setStatus("mandatory")


class _BbChanEfciThreshold_Type(Integer32):
    """Custom type bbChanEfciThreshold based on Integer32"""
    defaultValue = 196608

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 491520),
    )


_BbChanEfciThreshold_Type.__name__ = "Integer32"
_BbChanEfciThreshold_Object = MibTableColumn
bbChanEfciThreshold = _BbChanEfciThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 19),
    _BbChanEfciThreshold_Type()
)
bbChanEfciThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanEfciThreshold.setStatus("mandatory")


class _BbChanDiscardOption_Type(Integer32):
    """Custom type bbChanDiscardOption based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clpHysteresis", 1),
          ("frameDiscard", 2))
    )


_BbChanDiscardOption_Type.__name__ = "Integer32"
_BbChanDiscardOption_Object = MibTableColumn
bbChanDiscardOption = _BbChanDiscardOption_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 20),
    _BbChanDiscardOption_Type()
)
bbChanDiscardOption.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanDiscardOption.setStatus("mandatory")


class _BbChanFrmDiscardThreshold_Type(Integer32):
    """Custom type bbChanFrmDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 491520),
    )


_BbChanFrmDiscardThreshold_Type.__name__ = "Integer32"
_BbChanFrmDiscardThreshold_Object = MibTableColumn
bbChanFrmDiscardThreshold = _BbChanFrmDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 21),
    _BbChanFrmDiscardThreshold_Type()
)
bbChanFrmDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanFrmDiscardThreshold.setStatus("mandatory")


class _BbChanClpHiThreshold_Type(Integer32):
    """Custom type bbChanClpHiThreshold based on Integer32"""
    defaultValue = 196608

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 491520),
    )


_BbChanClpHiThreshold_Type.__name__ = "Integer32"
_BbChanClpHiThreshold_Object = MibTableColumn
bbChanClpHiThreshold = _BbChanClpHiThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 22),
    _BbChanClpHiThreshold_Type()
)
bbChanClpHiThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanClpHiThreshold.setStatus("mandatory")


class _BbChanClpLoThreshold_Type(Integer32):
    """Custom type bbChanClpLoThreshold based on Integer32"""
    defaultValue = 131072

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 491520),
    )


_BbChanClpLoThreshold_Type.__name__ = "Integer32"
_BbChanClpLoThreshold_Object = MibTableColumn
bbChanClpLoThreshold = _BbChanClpLoThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 23),
    _BbChanClpLoThreshold_Type()
)
bbChanClpLoThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanClpLoThreshold.setStatus("mandatory")


class _BbChanCongstUpdateCode_Type(Integer32):
    """Custom type bbChanCongstUpdateCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clearEfciBit", 4),
          ("dontUpdate", 1),
          ("setCiBit", 2),
          ("setEfciBit", 3))
    )


_BbChanCongstUpdateCode_Type.__name__ = "Integer32"
_BbChanCongstUpdateCode_Object = MibTableColumn
bbChanCongstUpdateCode = _BbChanCongstUpdateCode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 24),
    _BbChanCongstUpdateCode_Type()
)
bbChanCongstUpdateCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanCongstUpdateCode.setStatus("mandatory")


class _BbChanMaxCellMemThreshold_Type(Integer32):
    """Custom type bbChanMaxCellMemThreshold based on Integer32"""
    defaultValue = 262144

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 512000),
    )


_BbChanMaxCellMemThreshold_Type.__name__ = "Integer32"
_BbChanMaxCellMemThreshold_Object = MibTableColumn
bbChanMaxCellMemThreshold = _BbChanMaxCellMemThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 25),
    _BbChanMaxCellMemThreshold_Type()
)
bbChanMaxCellMemThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanMaxCellMemThreshold.setStatus("mandatory")


class _BbChanIngrPercentUtil_Type(Integer32):
    """Custom type bbChanIngrPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_BbChanIngrPercentUtil_Type.__name__ = "Integer32"
_BbChanIngrPercentUtil_Object = MibTableColumn
bbChanIngrPercentUtil = _BbChanIngrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 26),
    _BbChanIngrPercentUtil_Type()
)
bbChanIngrPercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanIngrPercentUtil.setStatus("mandatory")


class _BbChanEgrPercentUtil_Type(Integer32):
    """Custom type bbChanEgrPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_BbChanEgrPercentUtil_Type.__name__ = "Integer32"
_BbChanEgrPercentUtil_Object = MibTableColumn
bbChanEgrPercentUtil = _BbChanEgrPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 27),
    _BbChanEgrPercentUtil_Type()
)
bbChanEgrPercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanEgrPercentUtil.setStatus("mandatory")


class _BbChanEgrSrvRate_Type(Integer32):
    """Custom type bbChanEgrSrvRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1412832),
    )


_BbChanEgrSrvRate_Type.__name__ = "Integer32"
_BbChanEgrSrvRate_Object = MibTableColumn
bbChanEgrSrvRate = _BbChanEgrSrvRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 28),
    _BbChanEgrSrvRate_Type()
)
bbChanEgrSrvRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanEgrSrvRate.setStatus("mandatory")


class _BbChanOvrSubOvrRide_Type(Integer32):
    """Custom type bbChanOvrSubOvrRide based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_BbChanOvrSubOvrRide_Type.__name__ = "Integer32"
_BbChanOvrSubOvrRide_Object = MibTableColumn
bbChanOvrSubOvrRide = _BbChanOvrSubOvrRide_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 29),
    _BbChanOvrSubOvrRide_Type()
)
bbChanOvrSubOvrRide.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanOvrSubOvrRide.setStatus("mandatory")


class _BbChanLocalVpi_Type(Integer32):
    """Custom type bbChanLocalVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_BbChanLocalVpi_Type.__name__ = "Integer32"
_BbChanLocalVpi_Object = MibTableColumn
bbChanLocalVpi = _BbChanLocalVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 30),
    _BbChanLocalVpi_Type()
)
bbChanLocalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanLocalVpi.setStatus("mandatory")


class _BbChanLocalVci_Type(Integer32):
    """Custom type bbChanLocalVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BbChanLocalVci_Type.__name__ = "Integer32"
_BbChanLocalVci_Object = MibTableColumn
bbChanLocalVci = _BbChanLocalVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 31),
    _BbChanLocalVci_Type()
)
bbChanLocalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanLocalVci.setStatus("mandatory")
_BbChanLocalNsapAddr_Type = IfNsapAddress
_BbChanLocalNsapAddr_Object = MibTableColumn
bbChanLocalNsapAddr = _BbChanLocalNsapAddr_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 32),
    _BbChanLocalNsapAddr_Type()
)
bbChanLocalNsapAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanLocalNsapAddr.setStatus("mandatory")


class _BbChanRemoteVpi_Type(Integer32):
    """Custom type bbChanRemoteVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_BbChanRemoteVpi_Type.__name__ = "Integer32"
_BbChanRemoteVpi_Object = MibTableColumn
bbChanRemoteVpi = _BbChanRemoteVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 33),
    _BbChanRemoteVpi_Type()
)
bbChanRemoteVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanRemoteVpi.setStatus("mandatory")


class _BbChanRemoteVci_Type(Integer32):
    """Custom type bbChanRemoteVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_BbChanRemoteVci_Type.__name__ = "Integer32"
_BbChanRemoteVci_Object = MibTableColumn
bbChanRemoteVci = _BbChanRemoteVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 34),
    _BbChanRemoteVci_Type()
)
bbChanRemoteVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanRemoteVci.setStatus("mandatory")
_BbChanRemoteNsapAddr_Type = IfNsapAddress
_BbChanRemoteNsapAddr_Object = MibTableColumn
bbChanRemoteNsapAddr = _BbChanRemoteNsapAddr_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 35),
    _BbChanRemoteNsapAddr_Type()
)
bbChanRemoteNsapAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanRemoteNsapAddr.setStatus("mandatory")


class _BbChanMaster_Type(Integer32):
    """Custom type bbChanMaster based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("master", 1),
          ("slave", 2),
          ("unknown", 3))
    )


_BbChanMaster_Type.__name__ = "Integer32"
_BbChanMaster_Object = MibTableColumn
bbChanMaster = _BbChanMaster_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 36),
    _BbChanMaster_Type()
)
bbChanMaster.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanMaster.setStatus("mandatory")


class _BbChanRtePriority_Type(Integer32):
    """Custom type bbChanRtePriority based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_BbChanRtePriority_Type.__name__ = "Integer32"
_BbChanRtePriority_Object = MibTableColumn
bbChanRtePriority = _BbChanRtePriority_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 37),
    _BbChanRtePriority_Type()
)
bbChanRtePriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanRtePriority.setStatus("mandatory")


class _BbChanMaxCost_Type(Integer32):
    """Custom type bbChanMaxCost based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BbChanMaxCost_Type.__name__ = "Integer32"
_BbChanMaxCost_Object = MibTableColumn
bbChanMaxCost = _BbChanMaxCost_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 38),
    _BbChanMaxCost_Type()
)
bbChanMaxCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanMaxCost.setStatus("mandatory")


class _BbChanRestrictTrkType_Type(Integer32):
    """Custom type bbChanRestrictTrkType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noRestriction", 1),
          ("satelliteTrunk", 3),
          ("terrestrialTrunk", 2))
    )


_BbChanRestrictTrkType_Type.__name__ = "Integer32"
_BbChanRestrictTrkType_Object = MibTableColumn
bbChanRestrictTrkType = _BbChanRestrictTrkType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 39),
    _BbChanRestrictTrkType_Type()
)
bbChanRestrictTrkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanRestrictTrkType.setStatus("mandatory")


class _BbChanTestType_Type(Integer32):
    """Custom type bbChanTestType based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notest", 3),
          ("testcon", 1),
          ("testdelay", 2))
    )


_BbChanTestType_Type.__name__ = "Integer32"
_BbChanTestType_Object = MibTableColumn
bbChanTestType = _BbChanTestType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 40),
    _BbChanTestType_Type()
)
bbChanTestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanTestType.setStatus("mandatory")


class _BbChanTestState_Type(Integer32):
    """Custom type bbChanTestState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notinprogress", 4),
          ("passed", 1))
    )


_BbChanTestState_Type.__name__ = "Integer32"
_BbChanTestState_Object = MibTableColumn
bbChanTestState = _BbChanTestState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 41),
    _BbChanTestState_Type()
)
bbChanTestState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanTestState.setStatus("mandatory")


class _BbChanTestResult_Type(Integer32):
    """Custom type bbChanTestResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BbChanTestResult_Type.__name__ = "Integer32"
_BbChanTestResult_Object = MibTableColumn
bbChanTestResult = _BbChanTestResult_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 42),
    _BbChanTestResult_Type()
)
bbChanTestResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanTestResult.setStatus("mandatory")


class _BbChanTestTypeCPESide_Type(Integer32):
    """Custom type bbChanTestTypeCPESide based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notest", 2),
          ("testconseg", 1))
    )


_BbChanTestTypeCPESide_Type.__name__ = "Integer32"
_BbChanTestTypeCPESide_Object = MibTableColumn
bbChanTestTypeCPESide = _BbChanTestTypeCPESide_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 43),
    _BbChanTestTypeCPESide_Type()
)
bbChanTestTypeCPESide.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanTestTypeCPESide.setStatus("mandatory")


class _BbChanTestStateCPESide_Type(Integer32):
    """Custom type bbChanTestStateCPESide based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notinprogress", 4),
          ("passed", 1))
    )


_BbChanTestStateCPESide_Type.__name__ = "Integer32"
_BbChanTestStateCPESide_Object = MibTableColumn
bbChanTestStateCPESide = _BbChanTestStateCPESide_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 44),
    _BbChanTestStateCPESide_Type()
)
bbChanTestStateCPESide.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanTestStateCPESide.setStatus("mandatory")


class _BbConnVpcFlag_Type(Integer32):
    """Custom type bbConnVpcFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vcc", 2),
          ("vpc", 1))
    )


_BbConnVpcFlag_Type.__name__ = "Integer32"
_BbConnVpcFlag_Object = MibTableColumn
bbConnVpcFlag = _BbConnVpcFlag_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 45),
    _BbConnVpcFlag_Type()
)
bbConnVpcFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbConnVpcFlag.setStatus("mandatory")


class _BbConnServiceType_Type(Integer32):
    """Custom type bbConnServiceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              6,
              8)
        )
    )
    namedValues = NamedValues(
        *(("abrstd", 6),
          ("cbr", 1),
          ("ubr", 4),
          ("vbr", 2),
          ("vbrrt", 8))
    )


_BbConnServiceType_Type.__name__ = "Integer32"
_BbConnServiceType_Object = MibTableColumn
bbConnServiceType = _BbConnServiceType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 46),
    _BbConnServiceType_Type()
)
bbConnServiceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbConnServiceType.setStatus("mandatory")
_BbConnPCR_Type = Integer32
_BbConnPCR_Object = MibTableColumn
bbConnPCR = _BbConnPCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 47),
    _BbConnPCR_Type()
)
bbConnPCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbConnPCR.setStatus("mandatory")
_BbConnSCR_Type = Integer32
_BbConnSCR_Object = MibTableColumn
bbConnSCR = _BbConnSCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 48),
    _BbConnSCR_Type()
)
bbConnSCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbConnSCR.setStatus("mandatory")


class _BbConnPercentUtil_Type(Integer32):
    """Custom type bbConnPercentUtil based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_BbConnPercentUtil_Type.__name__ = "Integer32"
_BbConnPercentUtil_Object = MibTableColumn
bbConnPercentUtil = _BbConnPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 49),
    _BbConnPercentUtil_Type()
)
bbConnPercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbConnPercentUtil.setStatus("mandatory")
_BbRemoteConnPCR_Type = Integer32
_BbRemoteConnPCR_Object = MibTableColumn
bbRemoteConnPCR = _BbRemoteConnPCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 50),
    _BbRemoteConnPCR_Type()
)
bbRemoteConnPCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbRemoteConnPCR.setStatus("mandatory")
_BbRemoteConnSCR_Type = Integer32
_BbRemoteConnSCR_Object = MibTableColumn
bbRemoteConnSCR = _BbRemoteConnSCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 51),
    _BbRemoteConnSCR_Type()
)
bbRemoteConnSCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbRemoteConnSCR.setStatus("mandatory")


class _BbRemoteConnPercentUtil_Type(Integer32):
    """Custom type bbRemoteConnPercentUtil based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_BbRemoteConnPercentUtil_Type.__name__ = "Integer32"
_BbRemoteConnPercentUtil_Object = MibTableColumn
bbRemoteConnPercentUtil = _BbRemoteConnPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 52),
    _BbRemoteConnPercentUtil_Type()
)
bbRemoteConnPercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbRemoteConnPercentUtil.setStatus("mandatory")


class _BbChanUpcMCR_Type(Integer32):
    """Custom type bbChanUpcMCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1412832),
    )


_BbChanUpcMCR_Type.__name__ = "Integer32"
_BbChanUpcMCR_Object = MibTableColumn
bbChanUpcMCR = _BbChanUpcMCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 1, 1, 53),
    _BbChanUpcMCR_Type()
)
bbChanUpcMCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanUpcMCR.setStatus("mandatory")


class _BbChanNumNextAvailable_Type(Integer32):
    """Custom type bbChanNumNextAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 4111),
    )


_BbChanNumNextAvailable_Type.__name__ = "Integer32"
_BbChanNumNextAvailable_Object = MibScalar
bbChanNumNextAvailable = _BbChanNumNextAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 2),
    _BbChanNumNextAvailable_Type()
)
bbChanNumNextAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanNumNextAvailable.setStatus("mandatory")


class _BbChanVpIdNextAvailable_Type(Integer32):
    """Custom type bbChanVpIdNextAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_BbChanVpIdNextAvailable_Type.__name__ = "Integer32"
_BbChanVpIdNextAvailable_Object = MibScalar
bbChanVpIdNextAvailable = _BbChanVpIdNextAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 1, 3),
    _BbChanVpIdNextAvailable_Type()
)
bbChanVpIdNextAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanVpIdNextAvailable.setStatus("mandatory")
_BbChanStateGrpTable_Object = MibTable
bbChanStateGrpTable = _BbChanStateGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1)
)
if mibBuilder.loadTexts:
    bbChanStateGrpTable.setStatus("mandatory")
_BbChanStateGrpEntry_Object = MibTableRow
bbChanStateGrpEntry = _BbChanStateGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1)
)
bbChanStateGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "bbChanStateNum"),
)
if mibBuilder.loadTexts:
    bbChanStateGrpEntry.setStatus("mandatory")


class _BbChanStateNum_Type(Integer32):
    """Custom type bbChanStateNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 4111),
    )


_BbChanStateNum_Type.__name__ = "Integer32"
_BbChanStateNum_Object = MibTableColumn
bbChanStateNum = _BbChanStateNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1, 1),
    _BbChanStateNum_Type()
)
bbChanStateNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanStateNum.setStatus("mandatory")


class _BbChanState_Type(Integer32):
    """Custom type bbChanState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 3),
          ("normal", 2),
          ("notconfigured", 1))
    )


_BbChanState_Type.__name__ = "Integer32"
_BbChanState_Object = MibTableColumn
bbChanState = _BbChanState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1, 2),
    _BbChanState_Type()
)
bbChanState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanState.setStatus("mandatory")


class _BbChanEgrXmtState_Type(Integer32):
    """Custom type bbChanEgrXmtState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("other", 1),
          ("sendingAis", 3),
          ("sendingFerf", 4))
    )


_BbChanEgrXmtState_Type.__name__ = "Integer32"
_BbChanEgrXmtState_Object = MibTableColumn
bbChanEgrXmtState = _BbChanEgrXmtState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1, 3),
    _BbChanEgrXmtState_Type()
)
bbChanEgrXmtState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanEgrXmtState.setStatus("mandatory")


class _BbChanIngrRcvState_Type(Integer32):
    """Custom type bbChanIngrRcvState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 5),
          ("normal", 2),
          ("other", 1),
          ("receivingAis", 3),
          ("receivingFerf", 4))
    )


_BbChanIngrRcvState_Type.__name__ = "Integer32"
_BbChanIngrRcvState_Object = MibTableColumn
bbChanIngrRcvState = _BbChanIngrRcvState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 2, 1, 1, 4),
    _BbChanIngrRcvState_Type()
)
bbChanIngrRcvState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanIngrRcvState.setStatus("mandatory")
_BbChanCntGrpTable_Object = MibTable
bbChanCntGrpTable = _BbChanCntGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1)
)
if mibBuilder.loadTexts:
    bbChanCntGrpTable.setStatus("mandatory")
_BbChanCntGrpEntry_Object = MibTableRow
bbChanCntGrpEntry = _BbChanCntGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1)
)
bbChanCntGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "bbChanCntNum"),
)
if mibBuilder.loadTexts:
    bbChanCntGrpEntry.setStatus("mandatory")


class _BbChanCntNum_Type(Integer32):
    """Custom type bbChanCntNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 4111),
    )


_BbChanCntNum_Type.__name__ = "Integer32"
_BbChanCntNum_Object = MibTableColumn
bbChanCntNum = _BbChanCntNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 1),
    _BbChanCntNum_Type()
)
bbChanCntNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanCntNum.setStatus("mandatory")
_BbChanRcvClp0Cells_Type = Counter32
_BbChanRcvClp0Cells_Object = MibTableColumn
bbChanRcvClp0Cells = _BbChanRcvClp0Cells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 2),
    _BbChanRcvClp0Cells_Type()
)
bbChanRcvClp0Cells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanRcvClp0Cells.setStatus("mandatory")
_BbChanRcvClp1Cells_Type = Counter32
_BbChanRcvClp1Cells_Object = MibTableColumn
bbChanRcvClp1Cells = _BbChanRcvClp1Cells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 3),
    _BbChanRcvClp1Cells_Type()
)
bbChanRcvClp1Cells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanRcvClp1Cells.setStatus("mandatory")
_BbChanNonConformCellsAtGcra1Policer_Type = Counter32
_BbChanNonConformCellsAtGcra1Policer_Object = MibTableColumn
bbChanNonConformCellsAtGcra1Policer = _BbChanNonConformCellsAtGcra1Policer_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 4),
    _BbChanNonConformCellsAtGcra1Policer_Type()
)
bbChanNonConformCellsAtGcra1Policer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanNonConformCellsAtGcra1Policer.setStatus("mandatory")
_BbChanNonConformCellsAtGcra2Policer_Type = Counter32
_BbChanNonConformCellsAtGcra2Policer_Object = MibTableColumn
bbChanNonConformCellsAtGcra2Policer = _BbChanNonConformCellsAtGcra2Policer_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 5),
    _BbChanNonConformCellsAtGcra2Policer_Type()
)
bbChanNonConformCellsAtGcra2Policer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanNonConformCellsAtGcra2Policer.setStatus("mandatory")
_BbChanRcvEOFCells_Type = Counter32
_BbChanRcvEOFCells_Object = MibTableColumn
bbChanRcvEOFCells = _BbChanRcvEOFCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 6),
    _BbChanRcvEOFCells_Type()
)
bbChanRcvEOFCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanRcvEOFCells.setStatus("mandatory")
_BbChanDscdClp0Cells_Type = Counter32
_BbChanDscdClp0Cells_Object = MibTableColumn
bbChanDscdClp0Cells = _BbChanDscdClp0Cells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 7),
    _BbChanDscdClp0Cells_Type()
)
bbChanDscdClp0Cells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanDscdClp0Cells.setStatus("mandatory")
_BbChanDscdClp1Cells_Type = Counter32
_BbChanDscdClp1Cells_Object = MibTableColumn
bbChanDscdClp1Cells = _BbChanDscdClp1Cells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 8),
    _BbChanDscdClp1Cells_Type()
)
bbChanDscdClp1Cells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanDscdClp1Cells.setStatus("mandatory")
_BbChanRcvCellsSent_Type = Counter32
_BbChanRcvCellsSent_Object = MibTableColumn
bbChanRcvCellsSent = _BbChanRcvCellsSent_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 9),
    _BbChanRcvCellsSent_Type()
)
bbChanRcvCellsSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanRcvCellsSent.setStatus("mandatory")
_BbChanXmtClp0Cells_Type = Counter32
_BbChanXmtClp0Cells_Object = MibTableColumn
bbChanXmtClp0Cells = _BbChanXmtClp0Cells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 10),
    _BbChanXmtClp0Cells_Type()
)
bbChanXmtClp0Cells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanXmtClp0Cells.setStatus("mandatory")
_BbChanXmtClp1Cells_Type = Counter32
_BbChanXmtClp1Cells_Object = MibTableColumn
bbChanXmtClp1Cells = _BbChanXmtClp1Cells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 11),
    _BbChanXmtClp1Cells_Type()
)
bbChanXmtClp1Cells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanXmtClp1Cells.setStatus("mandatory")
_BbChanDscdClpZeroCellsToPort_Type = Counter32
_BbChanDscdClpZeroCellsToPort_Object = MibTableColumn
bbChanDscdClpZeroCellsToPort = _BbChanDscdClpZeroCellsToPort_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 12),
    _BbChanDscdClpZeroCellsToPort_Type()
)
bbChanDscdClpZeroCellsToPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanDscdClpZeroCellsToPort.setStatus("mandatory")
_BbChanDscdClpOneCellsToPort_Type = Counter32
_BbChanDscdClpOneCellsToPort_Object = MibTableColumn
bbChanDscdClpOneCellsToPort = _BbChanDscdClpOneCellsToPort_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 13),
    _BbChanDscdClpOneCellsToPort_Type()
)
bbChanDscdClpOneCellsToPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bbChanDscdClpOneCellsToPort.setStatus("mandatory")


class _BbChanCntClrButton_Type(Integer32):
    """Custom type bbChanCntClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAction", 1),
          ("resetCounters", 2))
    )


_BbChanCntClrButton_Type.__name__ = "Integer32"
_BbChanCntClrButton_Object = MibTableColumn
bbChanCntClrButton = _BbChanCntClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 7, 3, 1, 1, 14),
    _BbChanCntClrButton_Type()
)
bbChanCntClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bbChanCntClrButton.setStatus("mandatory")
_VirtualInterfaceCnf_ObjectIdentity = ObjectIdentity
virtualInterfaceCnf = _VirtualInterfaceCnf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1)
)
_VrtlIntrConfigTable_Object = MibTable
vrtlIntrConfigTable = _VrtlIntrConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1)
)
if mibBuilder.loadTexts:
    vrtlIntrConfigTable.setStatus("mandatory")
_VrtlIntrConfigEntry_Object = MibTableRow
vrtlIntrConfigEntry = _VrtlIntrConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1)
)
vrtlIntrConfigEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "configVrtlIntrNum"),
)
if mibBuilder.loadTexts:
    vrtlIntrConfigEntry.setStatus("mandatory")


class _ConfigVrtlIntrNum_Type(Integer32):
    """Custom type configVrtlIntrNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_ConfigVrtlIntrNum_Type.__name__ = "Integer32"
_ConfigVrtlIntrNum_Object = MibTableColumn
configVrtlIntrNum = _ConfigVrtlIntrNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 1),
    _ConfigVrtlIntrNum_Type()
)
configVrtlIntrNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    configVrtlIntrNum.setStatus("mandatory")


class _VrtlIntrPortNum_Type(Integer32):
    """Custom type vrtlIntrPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4),
    )


_VrtlIntrPortNum_Type.__name__ = "Integer32"
_VrtlIntrPortNum_Object = MibTableColumn
vrtlIntrPortNum = _VrtlIntrPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 2),
    _VrtlIntrPortNum_Type()
)
vrtlIntrPortNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrPortNum.setStatus("mandatory")


class _VrtlIntrState_Type(Integer32):
    """Custom type vrtlIntrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("up", 2))
    )


_VrtlIntrState_Type.__name__ = "Integer32"
_VrtlIntrState_Object = MibTableColumn
vrtlIntrState = _VrtlIntrState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 3),
    _VrtlIntrState_Type()
)
vrtlIntrState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrState.setStatus("mandatory")


class _VrtlIntrMaxQueMem_Type(Integer32):
    """Custom type vrtlIntrMaxQueMem based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_VrtlIntrMaxQueMem_Type.__name__ = "Integer32"
_VrtlIntrMaxQueMem_Object = MibTableColumn
vrtlIntrMaxQueMem = _VrtlIntrMaxQueMem_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 4),
    _VrtlIntrMaxQueMem_Type()
)
vrtlIntrMaxQueMem.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrMaxQueMem.setStatus("mandatory")


class _VrtlIntrMinCellRate_Type(Integer32):
    """Custom type vrtlIntrMinCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(103384, 353208),
    )


_VrtlIntrMinCellRate_Type.__name__ = "Integer32"
_VrtlIntrMinCellRate_Object = MibTableColumn
vrtlIntrMinCellRate = _VrtlIntrMinCellRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 5),
    _VrtlIntrMinCellRate_Type()
)
vrtlIntrMinCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrMinCellRate.setStatus("mandatory")


class _VrtlIntrMaxCellRate_Type(Integer32):
    """Custom type vrtlIntrMaxCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(103384, 353208),
    )


_VrtlIntrMaxCellRate_Type.__name__ = "Integer32"
_VrtlIntrMaxCellRate_Object = MibTableColumn
vrtlIntrMaxCellRate = _VrtlIntrMaxCellRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 6),
    _VrtlIntrMaxCellRate_Type()
)
vrtlIntrMaxCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrMaxCellRate.setStatus("mandatory")
_VrtlIntrCurrConfigPaths_Type = Integer32
_VrtlIntrCurrConfigPaths_Object = MibTableColumn
vrtlIntrCurrConfigPaths = _VrtlIntrCurrConfigPaths_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 1, 1, 1, 7),
    _VrtlIntrCurrConfigPaths_Type()
)
vrtlIntrCurrConfigPaths.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrCurrConfigPaths.setStatus("mandatory")
_VirtualInterfaceCnt_ObjectIdentity = ObjectIdentity
virtualInterfaceCnt = _VirtualInterfaceCnt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2)
)
_VrtlIntrCounterTable_Object = MibTable
vrtlIntrCounterTable = _VrtlIntrCounterTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1)
)
if mibBuilder.loadTexts:
    vrtlIntrCounterTable.setStatus("mandatory")
_VrtlIntrCounterEntry_Object = MibTableRow
vrtlIntrCounterEntry = _VrtlIntrCounterEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1)
)
vrtlIntrCounterEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "countVrtlIntrNum"),
)
if mibBuilder.loadTexts:
    vrtlIntrCounterEntry.setStatus("mandatory")


class _CountVrtlIntrNum_Type(Integer32):
    """Custom type countVrtlIntrNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_CountVrtlIntrNum_Type.__name__ = "Integer32"
_CountVrtlIntrNum_Object = MibTableColumn
countVrtlIntrNum = _CountVrtlIntrNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 1),
    _CountVrtlIntrNum_Type()
)
countVrtlIntrNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    countVrtlIntrNum.setStatus("mandatory")
_VrtlIntrTotalCellCnt_Type = Counter32
_VrtlIntrTotalCellCnt_Object = MibTableColumn
vrtlIntrTotalCellCnt = _VrtlIntrTotalCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 2),
    _VrtlIntrTotalCellCnt_Type()
)
vrtlIntrTotalCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrTotalCellCnt.setStatus("mandatory")
_VrtlIntrTotalQbinCellCnt_Type = Counter32
_VrtlIntrTotalQbinCellCnt_Object = MibTableColumn
vrtlIntrTotalQbinCellCnt = _VrtlIntrTotalQbinCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 3),
    _VrtlIntrTotalQbinCellCnt_Type()
)
vrtlIntrTotalQbinCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrTotalQbinCellCnt.setStatus("mandatory")
_VrtlIntrRxdValidOAMCellCnt_Type = Counter32
_VrtlIntrRxdValidOAMCellCnt_Object = MibTableColumn
vrtlIntrRxdValidOAMCellCnt = _VrtlIntrRxdValidOAMCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 4),
    _VrtlIntrRxdValidOAMCellCnt_Type()
)
vrtlIntrRxdValidOAMCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrRxdValidOAMCellCnt.setStatus("mandatory")
_VrtlIntrRxdRmCellCnt_Type = Counter32
_VrtlIntrRxdRmCellCnt_Object = MibTableColumn
vrtlIntrRxdRmCellCnt = _VrtlIntrRxdRmCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 5),
    _VrtlIntrRxdRmCellCnt_Type()
)
vrtlIntrRxdRmCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrRxdRmCellCnt.setStatus("mandatory")
_VrtlIntrRxdClpUntaggedCellCnt_Type = Counter32
_VrtlIntrRxdClpUntaggedCellCnt_Object = MibTableColumn
vrtlIntrRxdClpUntaggedCellCnt = _VrtlIntrRxdClpUntaggedCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 6),
    _VrtlIntrRxdClpUntaggedCellCnt_Type()
)
vrtlIntrRxdClpUntaggedCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrRxdClpUntaggedCellCnt.setStatus("mandatory")
_VrtlIntrRxdClpTaggedCellCnt_Type = Counter32
_VrtlIntrRxdClpTaggedCellCnt_Object = MibTableColumn
vrtlIntrRxdClpTaggedCellCnt = _VrtlIntrRxdClpTaggedCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 7),
    _VrtlIntrRxdClpTaggedCellCnt_Type()
)
vrtlIntrRxdClpTaggedCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrRxdClpTaggedCellCnt.setStatus("mandatory")
_VrtlIntrRxdClpUntaggedDiscardedCellCnt_Type = Counter32
_VrtlIntrRxdClpUntaggedDiscardedCellCnt_Object = MibTableColumn
vrtlIntrRxdClpUntaggedDiscardedCellCnt = _VrtlIntrRxdClpUntaggedDiscardedCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 8),
    _VrtlIntrRxdClpUntaggedDiscardedCellCnt_Type()
)
vrtlIntrRxdClpUntaggedDiscardedCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrRxdClpUntaggedDiscardedCellCnt.setStatus("mandatory")
_VrtlIntrRxdClpTaggedDiscardedCellCnt_Type = Counter32
_VrtlIntrRxdClpTaggedDiscardedCellCnt_Object = MibTableColumn
vrtlIntrRxdClpTaggedDiscardedCellCnt = _VrtlIntrRxdClpTaggedDiscardedCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 9),
    _VrtlIntrRxdClpTaggedDiscardedCellCnt_Type()
)
vrtlIntrRxdClpTaggedDiscardedCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrRxdClpTaggedDiscardedCellCnt.setStatus("mandatory")
_VrtlIntrXmtdOAMCellCnt_Type = Counter32
_VrtlIntrXmtdOAMCellCnt_Object = MibTableColumn
vrtlIntrXmtdOAMCellCnt = _VrtlIntrXmtdOAMCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 10),
    _VrtlIntrXmtdOAMCellCnt_Type()
)
vrtlIntrXmtdOAMCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrXmtdOAMCellCnt.setStatus("mandatory")
_VrtlIntrXmtdRmCellCnt_Type = Counter32
_VrtlIntrXmtdRmCellCnt_Object = MibTableColumn
vrtlIntrXmtdRmCellCnt = _VrtlIntrXmtdRmCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 11),
    _VrtlIntrXmtdRmCellCnt_Type()
)
vrtlIntrXmtdRmCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrXmtdRmCellCnt.setStatus("mandatory")
_VrtlIntrXmtdClpUntaggedCellCnt_Type = Counter32
_VrtlIntrXmtdClpUntaggedCellCnt_Object = MibTableColumn
vrtlIntrXmtdClpUntaggedCellCnt = _VrtlIntrXmtdClpUntaggedCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 12),
    _VrtlIntrXmtdClpUntaggedCellCnt_Type()
)
vrtlIntrXmtdClpUntaggedCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrXmtdClpUntaggedCellCnt.setStatus("mandatory")
_VrtlIntrXmtdClpTaggedCellCnt_Type = Counter32
_VrtlIntrXmtdClpTaggedCellCnt_Object = MibTableColumn
vrtlIntrXmtdClpTaggedCellCnt = _VrtlIntrXmtdClpTaggedCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 2, 1, 1, 13),
    _VrtlIntrXmtdClpTaggedCellCnt_Type()
)
vrtlIntrXmtdClpTaggedCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrXmtdClpTaggedCellCnt.setStatus("mandatory")
_VirtualInterfaceQbinCnf_ObjectIdentity = ObjectIdentity
virtualInterfaceQbinCnf = _VirtualInterfaceQbinCnf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3)
)
_VrtlIntrQbinConfigTable_Object = MibTable
vrtlIntrQbinConfigTable = _VrtlIntrQbinConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1)
)
if mibBuilder.loadTexts:
    vrtlIntrQbinConfigTable.setStatus("mandatory")
_VrtlIntrQbinConfigEntry_Object = MibTableRow
vrtlIntrQbinConfigEntry = _VrtlIntrQbinConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1)
)
vrtlIntrQbinConfigEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "queConfigVrtlIntrNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "queConfigVrtlIntrQbinNum"),
)
if mibBuilder.loadTexts:
    vrtlIntrQbinConfigEntry.setStatus("mandatory")


class _QueConfigVrtlIntrNum_Type(Integer32):
    """Custom type queConfigVrtlIntrNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_QueConfigVrtlIntrNum_Type.__name__ = "Integer32"
_QueConfigVrtlIntrNum_Object = MibTableColumn
queConfigVrtlIntrNum = _QueConfigVrtlIntrNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 1),
    _QueConfigVrtlIntrNum_Type()
)
queConfigVrtlIntrNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    queConfigVrtlIntrNum.setStatus("mandatory")


class _QueConfigVrtlIntrQbinNum_Type(Integer32):
    """Custom type queConfigVrtlIntrQbinNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_QueConfigVrtlIntrQbinNum_Type.__name__ = "Integer32"
_QueConfigVrtlIntrQbinNum_Object = MibTableColumn
queConfigVrtlIntrQbinNum = _QueConfigVrtlIntrQbinNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 2),
    _QueConfigVrtlIntrQbinNum_Type()
)
queConfigVrtlIntrQbinNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    queConfigVrtlIntrQbinNum.setStatus("mandatory")


class _VrtlIntrQbinState_Type(Integer32):
    """Custom type vrtlIntrQbinState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("up", 2))
    )


_VrtlIntrQbinState_Type.__name__ = "Integer32"
_VrtlIntrQbinState_Object = MibTableColumn
vrtlIntrQbinState = _VrtlIntrQbinState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 3),
    _VrtlIntrQbinState_Type()
)
vrtlIntrQbinState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrQbinState.setStatus("mandatory")


class _VrtlIntrQbinPri_Type(Integer32):
    """Custom type vrtlIntrQbinPri based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_VrtlIntrQbinPri_Type.__name__ = "Integer32"
_VrtlIntrQbinPri_Object = MibTableColumn
vrtlIntrQbinPri = _VrtlIntrQbinPri_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 4),
    _VrtlIntrQbinPri_Type()
)
vrtlIntrQbinPri.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrQbinPri.setStatus("mandatory")


class _VrtlIntrQbinRate_Type(Integer32):
    """Custom type vrtlIntrQbinRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 353208),
    )


_VrtlIntrQbinRate_Type.__name__ = "Integer32"
_VrtlIntrQbinRate_Object = MibTableColumn
vrtlIntrQbinRate = _VrtlIntrQbinRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 5),
    _VrtlIntrQbinRate_Type()
)
vrtlIntrQbinRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrQbinRate.setStatus("mandatory")


class _VrtlIntrQbinDiscardSelection_Type(Integer32):
    """Custom type vrtlIntrQbinDiscardSelection based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clpHysteresis", 1),
          ("frameDiscard", 3))
    )


_VrtlIntrQbinDiscardSelection_Type.__name__ = "Integer32"
_VrtlIntrQbinDiscardSelection_Object = MibTableColumn
vrtlIntrQbinDiscardSelection = _VrtlIntrQbinDiscardSelection_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 6),
    _VrtlIntrQbinDiscardSelection_Type()
)
vrtlIntrQbinDiscardSelection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrQbinDiscardSelection.setStatus("mandatory")


class _VrtlIntrQbinMaxThreshold_Type(Integer32):
    """Custom type vrtlIntrQbinMaxThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 512000),
    )


_VrtlIntrQbinMaxThreshold_Type.__name__ = "Integer32"
_VrtlIntrQbinMaxThreshold_Object = MibTableColumn
vrtlIntrQbinMaxThreshold = _VrtlIntrQbinMaxThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 7),
    _VrtlIntrQbinMaxThreshold_Type()
)
vrtlIntrQbinMaxThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrQbinMaxThreshold.setStatus("mandatory")


class _VrtlIntrQbinClpHiThreshold_Type(Integer32):
    """Custom type vrtlIntrQbinClpHiThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 512000),
    )


_VrtlIntrQbinClpHiThreshold_Type.__name__ = "Integer32"
_VrtlIntrQbinClpHiThreshold_Object = MibTableColumn
vrtlIntrQbinClpHiThreshold = _VrtlIntrQbinClpHiThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 8),
    _VrtlIntrQbinClpHiThreshold_Type()
)
vrtlIntrQbinClpHiThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrQbinClpHiThreshold.setStatus("mandatory")


class _VrtlIntrQbinClpLoThreshold_Type(Integer32):
    """Custom type vrtlIntrQbinClpLoThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 512000),
    )


_VrtlIntrQbinClpLoThreshold_Type.__name__ = "Integer32"
_VrtlIntrQbinClpLoThreshold_Object = MibTableColumn
vrtlIntrQbinClpLoThreshold = _VrtlIntrQbinClpLoThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 9),
    _VrtlIntrQbinClpLoThreshold_Type()
)
vrtlIntrQbinClpLoThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrQbinClpLoThreshold.setStatus("mandatory")


class _VrtlIntrQbinFrameDiscardThreshold_Type(Integer32):
    """Custom type vrtlIntrQbinFrameDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 512000),
    )


_VrtlIntrQbinFrameDiscardThreshold_Type.__name__ = "Integer32"
_VrtlIntrQbinFrameDiscardThreshold_Object = MibTableColumn
vrtlIntrQbinFrameDiscardThreshold = _VrtlIntrQbinFrameDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 10),
    _VrtlIntrQbinFrameDiscardThreshold_Type()
)
vrtlIntrQbinFrameDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrQbinFrameDiscardThreshold.setStatus("mandatory")


class _VrtlIntrQbinEfciThreshold_Type(Integer32):
    """Custom type vrtlIntrQbinEfciThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 512000),
    )


_VrtlIntrQbinEfciThreshold_Type.__name__ = "Integer32"
_VrtlIntrQbinEfciThreshold_Object = MibTableColumn
vrtlIntrQbinEfciThreshold = _VrtlIntrQbinEfciThreshold_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 3, 1, 1, 11),
    _VrtlIntrQbinEfciThreshold_Type()
)
vrtlIntrQbinEfciThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vrtlIntrQbinEfciThreshold.setStatus("mandatory")
_VirtualInterfaceQbinCnt_ObjectIdentity = ObjectIdentity
virtualInterfaceQbinCnt = _VirtualInterfaceQbinCnt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4)
)
_VrtlIntrQbinCounterTable_Object = MibTable
vrtlIntrQbinCounterTable = _VrtlIntrQbinCounterTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1)
)
if mibBuilder.loadTexts:
    vrtlIntrQbinCounterTable.setStatus("mandatory")
_VrtlIntrQbinCounterEntry_Object = MibTableRow
vrtlIntrQbinCounterEntry = _VrtlIntrQbinCounterEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1)
)
vrtlIntrQbinCounterEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "queConuterVrtlIntrNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "queCounterVrtlIntrQbinNum"),
)
if mibBuilder.loadTexts:
    vrtlIntrQbinCounterEntry.setStatus("mandatory")


class _QueConuterVrtlIntrNum_Type(Integer32):
    """Custom type queConuterVrtlIntrNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_QueConuterVrtlIntrNum_Type.__name__ = "Integer32"
_QueConuterVrtlIntrNum_Object = MibTableColumn
queConuterVrtlIntrNum = _QueConuterVrtlIntrNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1, 1),
    _QueConuterVrtlIntrNum_Type()
)
queConuterVrtlIntrNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    queConuterVrtlIntrNum.setStatus("mandatory")


class _QueCounterVrtlIntrQbinNum_Type(Integer32):
    """Custom type queCounterVrtlIntrQbinNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_QueCounterVrtlIntrQbinNum_Type.__name__ = "Integer32"
_QueCounterVrtlIntrQbinNum_Object = MibTableColumn
queCounterVrtlIntrQbinNum = _QueCounterVrtlIntrQbinNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1, 2),
    _QueCounterVrtlIntrQbinNum_Type()
)
queCounterVrtlIntrQbinNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    queCounterVrtlIntrQbinNum.setStatus("mandatory")
_VrtlIntrQbinCurrentCellCnt_Type = Counter32
_VrtlIntrQbinCurrentCellCnt_Object = MibTableColumn
vrtlIntrQbinCurrentCellCnt = _VrtlIntrQbinCurrentCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1, 3),
    _VrtlIntrQbinCurrentCellCnt_Type()
)
vrtlIntrQbinCurrentCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrQbinCurrentCellCnt.setStatus("mandatory")
_VrtlIntrQbinRxdCellCnt_Type = Counter32
_VrtlIntrQbinRxdCellCnt_Object = MibTableColumn
vrtlIntrQbinRxdCellCnt = _VrtlIntrQbinRxdCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1, 4),
    _VrtlIntrQbinRxdCellCnt_Type()
)
vrtlIntrQbinRxdCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrQbinRxdCellCnt.setStatus("mandatory")
_VrtlIntrQbinTxdCellCnt_Type = Counter32
_VrtlIntrQbinTxdCellCnt_Object = MibTableColumn
vrtlIntrQbinTxdCellCnt = _VrtlIntrQbinTxdCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1, 5),
    _VrtlIntrQbinTxdCellCnt_Type()
)
vrtlIntrQbinTxdCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrQbinTxdCellCnt.setStatus("mandatory")
_VrtlIntrQbinDiscardedCellCnt_Type = Counter32
_VrtlIntrQbinDiscardedCellCnt_Object = MibTableColumn
vrtlIntrQbinDiscardedCellCnt = _VrtlIntrQbinDiscardedCellCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 8, 4, 1, 1, 6),
    _VrtlIntrQbinDiscardedCellCnt_Type()
)
vrtlIntrQbinDiscardedCellCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vrtlIntrQbinDiscardedCellCnt.setStatus("mandatory")
_RpmPortTable_Object = MibTable
rpmPortTable = _RpmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1)
)
if mibBuilder.loadTexts:
    rpmPortTable.setStatus("mandatory")
_RpmPortEntry_Object = MibTableRow
rpmPortEntry = _RpmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1)
)
rpmPortEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "rpmPortSlotNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "rpmPortSubInterface"),
)
if mibBuilder.loadTexts:
    rpmPortEntry.setStatus("mandatory")


class _RpmPortSlotNum_Type(Integer32):
    """Custom type rpmPortSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_RpmPortSlotNum_Type.__name__ = "Integer32"
_RpmPortSlotNum_Object = MibTableColumn
rpmPortSlotNum = _RpmPortSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 1),
    _RpmPortSlotNum_Type()
)
rpmPortSlotNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmPortSlotNum.setStatus("mandatory")
_RpmPortInterface_Type = Integer32
_RpmPortInterface_Object = MibTableColumn
rpmPortInterface = _RpmPortInterface_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 2),
    _RpmPortInterface_Type()
)
rpmPortInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmPortInterface.setStatus("mandatory")
_RpmPortSubInterface_Type = Integer32
_RpmPortSubInterface_Object = MibTableColumn
rpmPortSubInterface = _RpmPortSubInterface_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 3),
    _RpmPortSubInterface_Type()
)
rpmPortSubInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmPortSubInterface.setStatus("mandatory")


class _RpmPortRowStatus_Type(Integer32):
    """Custom type rpmPortRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_RpmPortRowStatus_Type.__name__ = "Integer32"
_RpmPortRowStatus_Object = MibTableColumn
rpmPortRowStatus = _RpmPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 4),
    _RpmPortRowStatus_Type()
)
rpmPortRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmPortRowStatus.setStatus("mandatory")
_RpmPortIpAddress_Type = IpAddress
_RpmPortIpAddress_Object = MibTableColumn
rpmPortIpAddress = _RpmPortIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 5),
    _RpmPortIpAddress_Type()
)
rpmPortIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmPortIpAddress.setStatus("mandatory")
_RpmPortSubNetMask_Type = IpAddress
_RpmPortSubNetMask_Object = MibTableColumn
rpmPortSubNetMask = _RpmPortSubNetMask_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 6),
    _RpmPortSubNetMask_Type()
)
rpmPortSubNetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmPortSubNetMask.setStatus("mandatory")


class _RpmPortState_Type(Integer32):
    """Custom type rpmPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("failed", 3),
          ("notConfigured", 1))
    )


_RpmPortState_Type.__name__ = "Integer32"
_RpmPortState_Object = MibTableColumn
rpmPortState = _RpmPortState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 1, 1, 1, 7),
    _RpmPortState_Type()
)
rpmPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmPortState.setStatus("mandatory")
_RpmIfCnfResPart_ObjectIdentity = ObjectIdentity
rpmIfCnfResPart = _RpmIfCnfResPart_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2)
)
_RpmIfCnfRscPartTable_Object = MibTable
rpmIfCnfRscPartTable = _RpmIfCnfRscPartTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1)
)
if mibBuilder.loadTexts:
    rpmIfCnfRscPartTable.setStatus("mandatory")
_RpmIfCnfRscPartEntry_Object = MibTableRow
rpmIfCnfRscPartEntry = _RpmIfCnfRscPartEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1)
)
rpmIfCnfRscPartEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "rpmIfRscSlotNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "rpmIfRscPartIfNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "rpmIfRscPartCtrlrNum"),
)
if mibBuilder.loadTexts:
    rpmIfCnfRscPartEntry.setStatus("mandatory")


class _RpmIfRscSlotNum_Type(Integer32):
    """Custom type rpmIfRscSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_RpmIfRscSlotNum_Type.__name__ = "Integer32"
_RpmIfRscSlotNum_Object = MibTableColumn
rpmIfRscSlotNum = _RpmIfRscSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 1),
    _RpmIfRscSlotNum_Type()
)
rpmIfRscSlotNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmIfRscSlotNum.setStatus("mandatory")
_RpmIfRscPartIfNum_Type = Integer32
_RpmIfRscPartIfNum_Object = MibTableColumn
rpmIfRscPartIfNum = _RpmIfRscPartIfNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 2),
    _RpmIfRscPartIfNum_Type()
)
rpmIfRscPartIfNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmIfRscPartIfNum.setStatus("mandatory")


class _RpmIfRscPartCtrlrNum_Type(Integer32):
    """Custom type rpmIfRscPartCtrlrNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("par", 1),
          ("pnni", 2),
          ("tag", 3))
    )


_RpmIfRscPartCtrlrNum_Type.__name__ = "Integer32"
_RpmIfRscPartCtrlrNum_Object = MibTableColumn
rpmIfRscPartCtrlrNum = _RpmIfRscPartCtrlrNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 3),
    _RpmIfRscPartCtrlrNum_Type()
)
rpmIfRscPartCtrlrNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmIfRscPartCtrlrNum.setStatus("mandatory")


class _RpmIfRscPrtRowStatus_Type(Integer32):
    """Custom type rpmIfRscPrtRowStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_RpmIfRscPrtRowStatus_Type.__name__ = "Integer32"
_RpmIfRscPrtRowStatus_Object = MibTableColumn
rpmIfRscPrtRowStatus = _RpmIfRscPrtRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 4),
    _RpmIfRscPrtRowStatus_Type()
)
rpmIfRscPrtRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmIfRscPrtRowStatus.setStatus("mandatory")


class _RpmIfRscPrtIngrPctBandwidth_Type(Integer32):
    """Custom type rpmIfRscPrtIngrPctBandwidth based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RpmIfRscPrtIngrPctBandwidth_Type.__name__ = "Integer32"
_RpmIfRscPrtIngrPctBandwidth_Object = MibTableColumn
rpmIfRscPrtIngrPctBandwidth = _RpmIfRscPrtIngrPctBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 5),
    _RpmIfRscPrtIngrPctBandwidth_Type()
)
rpmIfRscPrtIngrPctBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmIfRscPrtIngrPctBandwidth.setStatus("mandatory")


class _RpmIfRscPrtEgrPctBandwidth_Type(Integer32):
    """Custom type rpmIfRscPrtEgrPctBandwidth based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RpmIfRscPrtEgrPctBandwidth_Type.__name__ = "Integer32"
_RpmIfRscPrtEgrPctBandwidth_Object = MibTableColumn
rpmIfRscPrtEgrPctBandwidth = _RpmIfRscPrtEgrPctBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 6),
    _RpmIfRscPrtEgrPctBandwidth_Type()
)
rpmIfRscPrtEgrPctBandwidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmIfRscPrtEgrPctBandwidth.setStatus("mandatory")


class _RpmIfRscPrtVpiLow_Type(Integer32):
    """Custom type rpmIfRscPrtVpiLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RpmIfRscPrtVpiLow_Type.__name__ = "Integer32"
_RpmIfRscPrtVpiLow_Object = MibTableColumn
rpmIfRscPrtVpiLow = _RpmIfRscPrtVpiLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 7),
    _RpmIfRscPrtVpiLow_Type()
)
rpmIfRscPrtVpiLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmIfRscPrtVpiLow.setStatus("mandatory")


class _RpmIfRscPrtVpiHigh_Type(Integer32):
    """Custom type rpmIfRscPrtVpiHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RpmIfRscPrtVpiHigh_Type.__name__ = "Integer32"
_RpmIfRscPrtVpiHigh_Object = MibTableColumn
rpmIfRscPrtVpiHigh = _RpmIfRscPrtVpiHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 8),
    _RpmIfRscPrtVpiHigh_Type()
)
rpmIfRscPrtVpiHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmIfRscPrtVpiHigh.setStatus("mandatory")


class _RpmIfRscPrtVciLow_Type(Integer32):
    """Custom type rpmIfRscPrtVciLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RpmIfRscPrtVciLow_Type.__name__ = "Integer32"
_RpmIfRscPrtVciLow_Object = MibTableColumn
rpmIfRscPrtVciLow = _RpmIfRscPrtVciLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 9),
    _RpmIfRscPrtVciLow_Type()
)
rpmIfRscPrtVciLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmIfRscPrtVciLow.setStatus("mandatory")


class _RpmIfRscPrtVciHigh_Type(Integer32):
    """Custom type rpmIfRscPrtVciHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RpmIfRscPrtVciHigh_Type.__name__ = "Integer32"
_RpmIfRscPrtVciHigh_Object = MibTableColumn
rpmIfRscPrtVciHigh = _RpmIfRscPrtVciHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 10),
    _RpmIfRscPrtVciHigh_Type()
)
rpmIfRscPrtVciHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmIfRscPrtVciHigh.setStatus("mandatory")


class _RpmIfRscPrtMaxChans_Type(Integer32):
    """Custom type rpmIfRscPrtMaxChans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4047),
    )


_RpmIfRscPrtMaxChans_Type.__name__ = "Integer32"
_RpmIfRscPrtMaxChans_Object = MibTableColumn
rpmIfRscPrtMaxChans = _RpmIfRscPrtMaxChans_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 9, 2, 1, 1, 11),
    _RpmIfRscPrtMaxChans_Type()
)
rpmIfRscPrtMaxChans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmIfRscPrtMaxChans.setStatus("mandatory")
_RpmChanGrpTable_Object = MibTable
rpmChanGrpTable = _RpmChanGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1)
)
if mibBuilder.loadTexts:
    rpmChanGrpTable.setStatus("mandatory")
_RpmChanGrpEntry_Object = MibTableRow
rpmChanGrpEntry = _RpmChanGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1)
)
rpmChanGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "rpmChanSlotNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "rpmChanNum"),
)
if mibBuilder.loadTexts:
    rpmChanGrpEntry.setStatus("mandatory")


class _RpmChanSlotNum_Type(Integer32):
    """Custom type rpmChanSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_RpmChanSlotNum_Type.__name__ = "Integer32"
_RpmChanSlotNum_Object = MibTableColumn
rpmChanSlotNum = _RpmChanSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 1),
    _RpmChanSlotNum_Type()
)
rpmChanSlotNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanSlotNum.setStatus("mandatory")
_RpmChanInterface_Type = Integer32
_RpmChanInterface_Object = MibTableColumn
rpmChanInterface = _RpmChanInterface_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 2),
    _RpmChanInterface_Type()
)
rpmChanInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanInterface.setStatus("mandatory")


class _RpmChanNum_Type(Integer32):
    """Custom type rpmChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 4095),
    )


_RpmChanNum_Type.__name__ = "Integer32"
_RpmChanNum_Object = MibTableColumn
rpmChanNum = _RpmChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 3),
    _RpmChanNum_Type()
)
rpmChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanNum.setStatus("mandatory")


class _RpmChanRowStatus_Type(Integer32):
    """Custom type rpmChanRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_RpmChanRowStatus_Type.__name__ = "Integer32"
_RpmChanRowStatus_Object = MibTableColumn
rpmChanRowStatus = _RpmChanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 4),
    _RpmChanRowStatus_Type()
)
rpmChanRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanRowStatus.setStatus("mandatory")


class _RpmChanVcd_Type(Integer32):
    """Custom type rpmChanVcd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_RpmChanVcd_Type.__name__ = "Integer32"
_RpmChanVcd_Object = MibTableColumn
rpmChanVcd = _RpmChanVcd_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 5),
    _RpmChanVcd_Type()
)
rpmChanVcd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanVcd.setStatus("mandatory")


class _RpmChanVpi_Type(Integer32):
    """Custom type rpmChanVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RpmChanVpi_Type.__name__ = "Integer32"
_RpmChanVpi_Object = MibTableColumn
rpmChanVpi = _RpmChanVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 6),
    _RpmChanVpi_Type()
)
rpmChanVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanVpi.setStatus("mandatory")


class _RpmChanVci_Type(Integer32):
    """Custom type rpmChanVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RpmChanVci_Type.__name__ = "Integer32"
_RpmChanVci_Object = MibTableColumn
rpmChanVci = _RpmChanVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 7),
    _RpmChanVci_Type()
)
rpmChanVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanVci.setStatus("mandatory")
_RpmChanSubInterface_Type = Integer32
_RpmChanSubInterface_Object = MibTableColumn
rpmChanSubInterface = _RpmChanSubInterface_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 8),
    _RpmChanSubInterface_Type()
)
rpmChanSubInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanSubInterface.setStatus("mandatory")


class _RpmChanLocalVpi_Type(Integer32):
    """Custom type rpmChanLocalVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RpmChanLocalVpi_Type.__name__ = "Integer32"
_RpmChanLocalVpi_Object = MibTableColumn
rpmChanLocalVpi = _RpmChanLocalVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 9),
    _RpmChanLocalVpi_Type()
)
rpmChanLocalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanLocalVpi.setStatus("mandatory")


class _RpmChanLocalVci_Type(Integer32):
    """Custom type rpmChanLocalVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RpmChanLocalVci_Type.__name__ = "Integer32"
_RpmChanLocalVci_Object = MibTableColumn
rpmChanLocalVci = _RpmChanLocalVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 10),
    _RpmChanLocalVci_Type()
)
rpmChanLocalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanLocalVci.setStatus("mandatory")
_RpmChanLocalNsap_Type = RpmNsapAddress
_RpmChanLocalNsap_Object = MibTableColumn
rpmChanLocalNsap = _RpmChanLocalNsap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 11),
    _RpmChanLocalNsap_Type()
)
rpmChanLocalNsap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanLocalNsap.setStatus("mandatory")


class _RpmChanRemoteVpi_Type(Integer32):
    """Custom type rpmChanRemoteVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RpmChanRemoteVpi_Type.__name__ = "Integer32"
_RpmChanRemoteVpi_Object = MibTableColumn
rpmChanRemoteVpi = _RpmChanRemoteVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 12),
    _RpmChanRemoteVpi_Type()
)
rpmChanRemoteVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanRemoteVpi.setStatus("mandatory")


class _RpmChanRemoteVci_Type(Integer32):
    """Custom type rpmChanRemoteVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RpmChanRemoteVci_Type.__name__ = "Integer32"
_RpmChanRemoteVci_Object = MibTableColumn
rpmChanRemoteVci = _RpmChanRemoteVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 13),
    _RpmChanRemoteVci_Type()
)
rpmChanRemoteVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanRemoteVci.setStatus("mandatory")
_RpmChanRemoteNsap_Type = RpmNsapAddress
_RpmChanRemoteNsap_Object = MibTableColumn
rpmChanRemoteNsap = _RpmChanRemoteNsap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 14),
    _RpmChanRemoteNsap_Type()
)
rpmChanRemoteNsap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanRemoteNsap.setStatus("mandatory")


class _RpmChanType_Type(Integer32):
    """Custom type rpmChanType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("pvc", 2),
          ("spvc", 3),
          ("svc", 1))
    )


_RpmChanType_Type.__name__ = "Integer32"
_RpmChanType_Object = MibTableColumn
rpmChanType = _RpmChanType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 15),
    _RpmChanType_Type()
)
rpmChanType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanType.setStatus("mandatory")


class _RpmChanConnType_Type(Integer32):
    """Custom type rpmChanConnType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vcc", 2),
          ("vpc", 1))
    )


_RpmChanConnType_Type.__name__ = "Integer32"
_RpmChanConnType_Object = MibTableColumn
rpmChanConnType = _RpmChanConnType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 16),
    _RpmChanConnType_Type()
)
rpmChanConnType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanConnType.setStatus("mandatory")


class _RpmChanServiceType_Type(Integer32):
    """Custom type rpmChanServiceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("abrfst", 7),
          ("abrstd", 6),
          ("atfr", 5),
          ("cbr", 1),
          ("ubr", 4),
          ("vbr", 2))
    )


_RpmChanServiceType_Type.__name__ = "Integer32"
_RpmChanServiceType_Object = MibTableColumn
rpmChanServiceType = _RpmChanServiceType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 17),
    _RpmChanServiceType_Type()
)
rpmChanServiceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanServiceType.setStatus("mandatory")


class _RpmChanMastership_Type(Integer32):
    """Custom type rpmChanMastership based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("master", 1),
          ("slave", 2),
          ("unknown", 3))
    )


_RpmChanMastership_Type.__name__ = "Integer32"
_RpmChanMastership_Object = MibTableColumn
rpmChanMastership = _RpmChanMastership_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 18),
    _RpmChanMastership_Type()
)
rpmChanMastership.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanMastership.setStatus("mandatory")


class _RpmChanRtePriority_Type(Integer32):
    """Custom type rpmChanRtePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_RpmChanRtePriority_Type.__name__ = "Integer32"
_RpmChanRtePriority_Object = MibTableColumn
rpmChanRtePriority = _RpmChanRtePriority_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 19),
    _RpmChanRtePriority_Type()
)
rpmChanRtePriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanRtePriority.setStatus("mandatory")


class _RpmChanMaxCost_Type(Integer32):
    """Custom type rpmChanMaxCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_RpmChanMaxCost_Type.__name__ = "Integer32"
_RpmChanMaxCost_Object = MibTableColumn
rpmChanMaxCost = _RpmChanMaxCost_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 20),
    _RpmChanMaxCost_Type()
)
rpmChanMaxCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanMaxCost.setStatus("mandatory")


class _RpmChanRestrictTrkType_Type(Integer32):
    """Custom type rpmChanRestrictTrkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noRestriction", 1),
          ("satelliteTrunk", 3),
          ("terrestrialTrunk", 2))
    )


_RpmChanRestrictTrkType_Type.__name__ = "Integer32"
_RpmChanRestrictTrkType_Object = MibTableColumn
rpmChanRestrictTrkType = _RpmChanRestrictTrkType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 21),
    _RpmChanRestrictTrkType_Type()
)
rpmChanRestrictTrkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanRestrictTrkType.setStatus("mandatory")


class _RpmChanPCR_Type(Integer32):
    """Custom type rpmChanPCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 353208),
    )


_RpmChanPCR_Type.__name__ = "Integer32"
_RpmChanPCR_Object = MibTableColumn
rpmChanPCR = _RpmChanPCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 22),
    _RpmChanPCR_Type()
)
rpmChanPCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanPCR.setStatus("mandatory")


class _RpmChanRemotePCR_Type(Integer32):
    """Custom type rpmChanRemotePCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 353208),
    )


_RpmChanRemotePCR_Type.__name__ = "Integer32"
_RpmChanRemotePCR_Object = MibTableColumn
rpmChanRemotePCR = _RpmChanRemotePCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 23),
    _RpmChanRemotePCR_Type()
)
rpmChanRemotePCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanRemotePCR.setStatus("mandatory")


class _RpmChanMCR_Type(Integer32):
    """Custom type rpmChanMCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 353208),
    )


_RpmChanMCR_Type.__name__ = "Integer32"
_RpmChanMCR_Object = MibTableColumn
rpmChanMCR = _RpmChanMCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 24),
    _RpmChanMCR_Type()
)
rpmChanMCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanMCR.setStatus("mandatory")


class _RpmChanRemoteMCR_Type(Integer32):
    """Custom type rpmChanRemoteMCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 353208),
    )


_RpmChanRemoteMCR_Type.__name__ = "Integer32"
_RpmChanRemoteMCR_Object = MibTableColumn
rpmChanRemoteMCR = _RpmChanRemoteMCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 25),
    _RpmChanRemoteMCR_Type()
)
rpmChanRemoteMCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanRemoteMCR.setStatus("mandatory")


class _RpmChanPercentUtil_Type(Integer32):
    """Custom type rpmChanPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RpmChanPercentUtil_Type.__name__ = "Integer32"
_RpmChanPercentUtil_Object = MibTableColumn
rpmChanPercentUtil = _RpmChanPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 26),
    _RpmChanPercentUtil_Type()
)
rpmChanPercentUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanPercentUtil.setStatus("mandatory")


class _RpmChanRemotePercentUtil_Type(Integer32):
    """Custom type rpmChanRemotePercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_RpmChanRemotePercentUtil_Type.__name__ = "Integer32"
_RpmChanRemotePercentUtil_Object = MibTableColumn
rpmChanRemotePercentUtil = _RpmChanRemotePercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 27),
    _RpmChanRemotePercentUtil_Type()
)
rpmChanRemotePercentUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanRemotePercentUtil.setStatus("mandatory")


class _RpmChanEncapType_Type(Integer32):
    """Custom type rpmChanEncapType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("aal34smds", 2),
          ("aal5muxDECNET", 9),
          ("aal5muxIP", 7),
          ("aal5muxNOVELL1", 10),
          ("aal5muxVINES", 8),
          ("aal5muxXNS", 6),
          ("aal5nlpid", 3),
          ("aal5snap", 1),
          ("ilmi", 5),
          ("ppp", 11),
          ("qsaal", 4),
          ("unknown", 12))
    )


_RpmChanEncapType_Type.__name__ = "Integer32"
_RpmChanEncapType_Object = MibTableColumn
rpmChanEncapType = _RpmChanEncapType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 28),
    _RpmChanEncapType_Type()
)
rpmChanEncapType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanEncapType.setStatus("mandatory")


class _RpmChanMidLow_Type(Integer32):
    """Custom type rpmChanMidLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_RpmChanMidLow_Type.__name__ = "Integer32"
_RpmChanMidLow_Object = MibTableColumn
rpmChanMidLow = _RpmChanMidLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 29),
    _RpmChanMidLow_Type()
)
rpmChanMidLow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanMidLow.setStatus("mandatory")


class _RpmChanMidHigh_Type(Integer32):
    """Custom type rpmChanMidHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_RpmChanMidHigh_Type.__name__ = "Integer32"
_RpmChanMidHigh_Object = MibTableColumn
rpmChanMidHigh = _RpmChanMidHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 30),
    _RpmChanMidHigh_Type()
)
rpmChanMidHigh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanMidHigh.setStatus("mandatory")


class _RpmChanBurstSize_Type(Integer32):
    """Custom type rpmChanBurstSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RpmChanBurstSize_Type.__name__ = "Integer32"
_RpmChanBurstSize_Object = MibTableColumn
rpmChanBurstSize = _RpmChanBurstSize_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 31),
    _RpmChanBurstSize_Type()
)
rpmChanBurstSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanBurstSize.setStatus("mandatory")


class _RpmChanInArpFreq_Type(Integer32):
    """Custom type rpmChanInArpFreq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_RpmChanInArpFreq_Type.__name__ = "Integer32"
_RpmChanInArpFreq_Object = MibTableColumn
rpmChanInArpFreq = _RpmChanInArpFreq_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 32),
    _RpmChanInArpFreq_Type()
)
rpmChanInArpFreq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanInArpFreq.setStatus("mandatory")


class _RpmChanOAMloopback_Type(Integer32):
    """Custom type rpmChanOAMloopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 600),
    )


_RpmChanOAMloopback_Type.__name__ = "Integer32"
_RpmChanOAMloopback_Object = MibTableColumn
rpmChanOAMloopback = _RpmChanOAMloopback_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 33),
    _RpmChanOAMloopback_Type()
)
rpmChanOAMloopback.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanOAMloopback.setStatus("mandatory")


class _RpmChanState_Type(Integer32):
    """Custom type rpmChanState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("failed", 3),
          ("notConfigured", 1))
    )


_RpmChanState_Type.__name__ = "Integer32"
_RpmChanState_Object = MibTableColumn
rpmChanState = _RpmChanState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 34),
    _RpmChanState_Type()
)
rpmChanState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanState.setStatus("mandatory")
_RpmChanVirtualTemplate_Type = Integer32
_RpmChanVirtualTemplate_Object = MibTableColumn
rpmChanVirtualTemplate = _RpmChanVirtualTemplate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 35),
    _RpmChanVirtualTemplate_Type()
)
rpmChanVirtualTemplate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanVirtualTemplate.setStatus("mandatory")
_RpmChanAbrRDF_Type = Integer32
_RpmChanAbrRDF_Object = MibTableColumn
rpmChanAbrRDF = _RpmChanAbrRDF_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 36),
    _RpmChanAbrRDF_Type()
)
rpmChanAbrRDF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanAbrRDF.setStatus("mandatory")
_RpmChanAbrRIF_Type = Integer32
_RpmChanAbrRIF_Object = MibTableColumn
rpmChanAbrRIF = _RpmChanAbrRIF_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 10, 1, 1, 1, 37),
    _RpmChanAbrRIF_Type()
)
rpmChanAbrRIF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rpmChanAbrRIF.setStatus("mandatory")
_PxmAtmMIBObjects_ObjectIdentity = ObjectIdentity
pxmAtmMIBObjects = _PxmAtmMIBObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16)
)


class _PxmAtmVcCrossConnectIndexNext_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectIndexNext based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_PxmAtmVcCrossConnectIndexNext_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectIndexNext_Object = MibScalar
pxmAtmVcCrossConnectIndexNext = _PxmAtmVcCrossConnectIndexNext_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 10),
    _PxmAtmVcCrossConnectIndexNext_Type()
)
pxmAtmVcCrossConnectIndexNext.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectIndexNext.setStatus("mandatory")
_PxmAtmVcCrossConnectTable_Object = MibTable
pxmAtmVcCrossConnectTable = _PxmAtmVcCrossConnectTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11)
)
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectTable.setStatus("mandatory")
_PxmAtmVcCrossConnectEntry_Object = MibTableRow
pxmAtmVcCrossConnectEntry = _PxmAtmVcCrossConnectEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1)
)
pxmAtmVcCrossConnectEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectIndex"),
    (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectLowIfIndex"),
    (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectLowVpi"),
    (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectLowVci"),
    (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectHighIfIndex"),
    (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectHighVpi"),
    (0, "CISCO-WAN-AXIPOP-MIB", "pxmAtmVcCrossConnectHighVci"),
)
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectEntry.setStatus("mandatory")


class _PxmAtmVcCrossConnectIndex_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_PxmAtmVcCrossConnectIndex_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectIndex_Object = MibTableColumn
pxmAtmVcCrossConnectIndex = _PxmAtmVcCrossConnectIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 1),
    _PxmAtmVcCrossConnectIndex_Type()
)
pxmAtmVcCrossConnectIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectIndex.setStatus("mandatory")


class _PxmAtmVcCrossConnectLowIfIndex_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectLowIfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_PxmAtmVcCrossConnectLowIfIndex_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectLowIfIndex_Object = MibTableColumn
pxmAtmVcCrossConnectLowIfIndex = _PxmAtmVcCrossConnectLowIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 2),
    _PxmAtmVcCrossConnectLowIfIndex_Type()
)
pxmAtmVcCrossConnectLowIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectLowIfIndex.setStatus("mandatory")


class _PxmAtmVcCrossConnectLowVpi_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectLowVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_PxmAtmVcCrossConnectLowVpi_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectLowVpi_Object = MibTableColumn
pxmAtmVcCrossConnectLowVpi = _PxmAtmVcCrossConnectLowVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 3),
    _PxmAtmVcCrossConnectLowVpi_Type()
)
pxmAtmVcCrossConnectLowVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectLowVpi.setStatus("mandatory")


class _PxmAtmVcCrossConnectLowVci_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectLowVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_PxmAtmVcCrossConnectLowVci_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectLowVci_Object = MibTableColumn
pxmAtmVcCrossConnectLowVci = _PxmAtmVcCrossConnectLowVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 4),
    _PxmAtmVcCrossConnectLowVci_Type()
)
pxmAtmVcCrossConnectLowVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectLowVci.setStatus("mandatory")


class _PxmAtmVcCrossConnectHighIfIndex_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectHighIfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_PxmAtmVcCrossConnectHighIfIndex_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectHighIfIndex_Object = MibTableColumn
pxmAtmVcCrossConnectHighIfIndex = _PxmAtmVcCrossConnectHighIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 5),
    _PxmAtmVcCrossConnectHighIfIndex_Type()
)
pxmAtmVcCrossConnectHighIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectHighIfIndex.setStatus("mandatory")


class _PxmAtmVcCrossConnectHighVpi_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectHighVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_PxmAtmVcCrossConnectHighVpi_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectHighVpi_Object = MibTableColumn
pxmAtmVcCrossConnectHighVpi = _PxmAtmVcCrossConnectHighVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 6),
    _PxmAtmVcCrossConnectHighVpi_Type()
)
pxmAtmVcCrossConnectHighVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectHighVpi.setStatus("mandatory")


class _PxmAtmVcCrossConnectHighVci_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectHighVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_PxmAtmVcCrossConnectHighVci_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectHighVci_Object = MibTableColumn
pxmAtmVcCrossConnectHighVci = _PxmAtmVcCrossConnectHighVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 7),
    _PxmAtmVcCrossConnectHighVci_Type()
)
pxmAtmVcCrossConnectHighVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectHighVci.setStatus("mandatory")


class _PxmAtmVcCrossConnectAdminStatus_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectAdminStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PxmAtmVcCrossConnectAdminStatus_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectAdminStatus_Object = MibTableColumn
pxmAtmVcCrossConnectAdminStatus = _PxmAtmVcCrossConnectAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 8),
    _PxmAtmVcCrossConnectAdminStatus_Type()
)
pxmAtmVcCrossConnectAdminStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectAdminStatus.setStatus("mandatory")


class _PxmAtmVcCrossConnectL2HOperStatus_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectL2HOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 3),
          ("up", 1))
    )


_PxmAtmVcCrossConnectL2HOperStatus_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectL2HOperStatus_Object = MibTableColumn
pxmAtmVcCrossConnectL2HOperStatus = _PxmAtmVcCrossConnectL2HOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 9),
    _PxmAtmVcCrossConnectL2HOperStatus_Type()
)
pxmAtmVcCrossConnectL2HOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectL2HOperStatus.setStatus("mandatory")


class _PxmAtmVcCrossConnectH2LOperStatus_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectH2LOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 3),
          ("up", 1))
    )


_PxmAtmVcCrossConnectH2LOperStatus_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectH2LOperStatus_Object = MibTableColumn
pxmAtmVcCrossConnectH2LOperStatus = _PxmAtmVcCrossConnectH2LOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 10),
    _PxmAtmVcCrossConnectH2LOperStatus_Type()
)
pxmAtmVcCrossConnectH2LOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectH2LOperStatus.setStatus("mandatory")
_PxmAtmVcCrossConnectL2HLastChange_Type = Integer32
_PxmAtmVcCrossConnectL2HLastChange_Object = MibTableColumn
pxmAtmVcCrossConnectL2HLastChange = _PxmAtmVcCrossConnectL2HLastChange_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 11),
    _PxmAtmVcCrossConnectL2HLastChange_Type()
)
pxmAtmVcCrossConnectL2HLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectL2HLastChange.setStatus("mandatory")
_PxmAtmVcCrossConnectH2LLastChange_Type = Integer32
_PxmAtmVcCrossConnectH2LLastChange_Object = MibTableColumn
pxmAtmVcCrossConnectH2LLastChange = _PxmAtmVcCrossConnectH2LLastChange_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 12),
    _PxmAtmVcCrossConnectH2LLastChange_Type()
)
pxmAtmVcCrossConnectH2LLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectH2LLastChange.setStatus("mandatory")
_PxmAtmVcCrossConnectRowStatus_Type = Integer32
_PxmAtmVcCrossConnectRowStatus_Object = MibTableColumn
pxmAtmVcCrossConnectRowStatus = _PxmAtmVcCrossConnectRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 13),
    _PxmAtmVcCrossConnectRowStatus_Type()
)
pxmAtmVcCrossConnectRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectRowStatus.setStatus("mandatory")


class _PxmAtmVcCrossConnectHighAddressType_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectHighAddressType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("atmNni", 2),
          ("atmUni", 1),
          ("frameRelay", 3))
    )


_PxmAtmVcCrossConnectHighAddressType_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectHighAddressType_Object = MibTableColumn
pxmAtmVcCrossConnectHighAddressType = _PxmAtmVcCrossConnectHighAddressType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 14),
    _PxmAtmVcCrossConnectHighAddressType_Type()
)
pxmAtmVcCrossConnectHighAddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectHighAddressType.setStatus("mandatory")


class _PxmAtmVcCrossConnectLowAddressType_Type(Integer32):
    """Custom type pxmAtmVcCrossConnectLowAddressType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("atmNni", 2),
          ("atmUni", 1),
          ("frameRelay", 3))
    )


_PxmAtmVcCrossConnectLowAddressType_Type.__name__ = "Integer32"
_PxmAtmVcCrossConnectLowAddressType_Object = MibTableColumn
pxmAtmVcCrossConnectLowAddressType = _PxmAtmVcCrossConnectLowAddressType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 2, 16, 11, 1, 15),
    _PxmAtmVcCrossConnectLowAddressType_Type()
)
pxmAtmVcCrossConnectLowAddressType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pxmAtmVcCrossConnectLowAddressType.setStatus("mandatory")
_CesmPort_ObjectIdentity = ObjectIdentity
cesmPort = _CesmPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1)
)
_CesmPortCnfGrp_ObjectIdentity = ObjectIdentity
cesmPortCnfGrp = _CesmPortCnfGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1)
)
_CesmPortCnfGrpTable_Object = MibTable
cesmPortCnfGrpTable = _CesmPortCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1)
)
if mibBuilder.loadTexts:
    cesmPortCnfGrpTable.setStatus("mandatory")
_CesmPortCnfGrpEntry_Object = MibTableRow
cesmPortCnfGrpEntry = _CesmPortCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1)
)
cesmPortCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "cesPortNum"),
)
if mibBuilder.loadTexts:
    cesmPortCnfGrpEntry.setStatus("mandatory")


class _CesPortNum_Type(Integer32):
    """Custom type cesPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 248),
    )


_CesPortNum_Type.__name__ = "Integer32"
_CesPortNum_Object = MibTableColumn
cesPortNum = _CesPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 1),
    _CesPortNum_Type()
)
cesPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPortNum.setStatus("mandatory")


class _CesPortRowStatus_Type(Integer32):
    """Custom type cesPortRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_CesPortRowStatus_Type.__name__ = "Integer32"
_CesPortRowStatus_Object = MibTableColumn
cesPortRowStatus = _CesPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 2),
    _CesPortRowStatus_Type()
)
cesPortRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesPortRowStatus.setStatus("mandatory")


class _CesPortLineNum_Type(Integer32):
    """Custom type cesPortLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_CesPortLineNum_Type.__name__ = "Integer32"
_CesPortLineNum_Object = MibTableColumn
cesPortLineNum = _CesPortLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 3),
    _CesPortLineNum_Type()
)
cesPortLineNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesPortLineNum.setStatus("mandatory")


class _CesPortType_Type(Integer32):
    """Custom type cesPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("framingOnVcDisconnect", 3),
          ("strau", 4),
          ("structured", 1),
          ("unstructured", 2))
    )


_CesPortType_Type.__name__ = "Integer32"
_CesPortType_Object = MibTableColumn
cesPortType = _CesPortType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 4),
    _CesPortType_Type()
)
cesPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesPortType.setStatus("mandatory")


class _CesPortDs0ConfigBitMap_Type(Integer32):
    """Custom type cesPortDs0ConfigBitMap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_CesPortDs0ConfigBitMap_Type.__name__ = "Integer32"
_CesPortDs0ConfigBitMap_Object = MibTableColumn
cesPortDs0ConfigBitMap = _CesPortDs0ConfigBitMap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 5),
    _CesPortDs0ConfigBitMap_Type()
)
cesPortDs0ConfigBitMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesPortDs0ConfigBitMap.setStatus("mandatory")


class _CesPortNumOfDs0Slot_Type(Integer32):
    """Custom type cesPortNumOfDs0Slot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_CesPortNumOfDs0Slot_Type.__name__ = "Integer32"
_CesPortNumOfDs0Slot_Object = MibTableColumn
cesPortNumOfDs0Slot = _CesPortNumOfDs0Slot_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 6),
    _CesPortNumOfDs0Slot_Type()
)
cesPortNumOfDs0Slot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesPortNumOfDs0Slot.setStatus("mandatory")


class _CesPortNumOfSCIPerDS0_Type(Integer32):
    """Custom type cesPortNumOfSCIPerDS0 based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_CesPortNumOfSCIPerDS0_Type.__name__ = "Integer32"
_CesPortNumOfSCIPerDS0_Object = MibTableColumn
cesPortNumOfSCIPerDS0 = _CesPortNumOfSCIPerDS0_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 7),
    _CesPortNumOfSCIPerDS0_Type()
)
cesPortNumOfSCIPerDS0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesPortNumOfSCIPerDS0.setStatus("mandatory")


class _CesPortSpeed_Type(Integer32):
    """Custom type cesPortSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 44736),
    )


_CesPortSpeed_Type.__name__ = "Integer32"
_CesPortSpeed_Object = MibTableColumn
cesPortSpeed = _CesPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 8),
    _CesPortSpeed_Type()
)
cesPortSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPortSpeed.setStatus("mandatory")


class _CesPortState_Type(Integer32):
    """Custom type cesPortState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("failedDueToLine", 4),
          ("failedDueToSignalling", 5),
          ("farEndRemoteLoopback", 8),
          ("inBert", 7),
          ("inactive", 6),
          ("notConfigured", 1),
          ("remoteLoopback", 3))
    )


_CesPortState_Type.__name__ = "Integer32"
_CesPortState_Object = MibTableColumn
cesPortState = _CesPortState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 9),
    _CesPortState_Type()
)
cesPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPortState.setStatus("mandatory")


class _CesPortBERTEnable_Type(Integer32):
    """Custom type cesPortBERTEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_CesPortBERTEnable_Type.__name__ = "Integer32"
_CesPortBERTEnable_Object = MibTableColumn
cesPortBERTEnable = _CesPortBERTEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 10),
    _CesPortBERTEnable_Type()
)
cesPortBERTEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesPortBERTEnable.setStatus("mandatory")


class _CesPortNextAvailable_Type(Integer32):
    """Custom type cesPortNextAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 248),
    )


_CesPortNextAvailable_Type.__name__ = "Integer32"
_CesPortNextAvailable_Object = MibScalar
cesPortNextAvailable = _CesPortNextAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 2),
    _CesPortNextAvailable_Type()
)
cesPortNextAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPortNextAvailable.setStatus("mandatory")


class _CesPortsUsedLine1_Type(Integer32):
    """Custom type cesPortsUsedLine1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_CesPortsUsedLine1_Type.__name__ = "Integer32"
_CesPortsUsedLine1_Object = MibScalar
cesPortsUsedLine1 = _CesPortsUsedLine1_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 3),
    _CesPortsUsedLine1_Type()
)
cesPortsUsedLine1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPortsUsedLine1.setStatus("mandatory")


class _CesPortsUsedLine2_Type(Integer32):
    """Custom type cesPortsUsedLine2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_CesPortsUsedLine2_Type.__name__ = "Integer32"
_CesPortsUsedLine2_Object = MibScalar
cesPortsUsedLine2 = _CesPortsUsedLine2_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 4),
    _CesPortsUsedLine2_Type()
)
cesPortsUsedLine2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPortsUsedLine2.setStatus("mandatory")


class _CesPortsUsedLine3_Type(Integer32):
    """Custom type cesPortsUsedLine3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_CesPortsUsedLine3_Type.__name__ = "Integer32"
_CesPortsUsedLine3_Object = MibScalar
cesPortsUsedLine3 = _CesPortsUsedLine3_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 5),
    _CesPortsUsedLine3_Type()
)
cesPortsUsedLine3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPortsUsedLine3.setStatus("mandatory")


class _CesPortsUsedLine4_Type(Integer32):
    """Custom type cesPortsUsedLine4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_CesPortsUsedLine4_Type.__name__ = "Integer32"
_CesPortsUsedLine4_Object = MibScalar
cesPortsUsedLine4 = _CesPortsUsedLine4_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 6),
    _CesPortsUsedLine4_Type()
)
cesPortsUsedLine4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPortsUsedLine4.setStatus("mandatory")


class _CesPortsUsedLine5_Type(Integer32):
    """Custom type cesPortsUsedLine5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_CesPortsUsedLine5_Type.__name__ = "Integer32"
_CesPortsUsedLine5_Object = MibScalar
cesPortsUsedLine5 = _CesPortsUsedLine5_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 7),
    _CesPortsUsedLine5_Type()
)
cesPortsUsedLine5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPortsUsedLine5.setStatus("mandatory")


class _CesPortsUsedLine6_Type(Integer32):
    """Custom type cesPortsUsedLine6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_CesPortsUsedLine6_Type.__name__ = "Integer32"
_CesPortsUsedLine6_Object = MibScalar
cesPortsUsedLine6 = _CesPortsUsedLine6_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 8),
    _CesPortsUsedLine6_Type()
)
cesPortsUsedLine6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPortsUsedLine6.setStatus("mandatory")


class _CesPortsUsedLine7_Type(Integer32):
    """Custom type cesPortsUsedLine7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_CesPortsUsedLine7_Type.__name__ = "Integer32"
_CesPortsUsedLine7_Object = MibScalar
cesPortsUsedLine7 = _CesPortsUsedLine7_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 9),
    _CesPortsUsedLine7_Type()
)
cesPortsUsedLine7.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPortsUsedLine7.setStatus("mandatory")


class _CesPortsUsedLine8_Type(Integer32):
    """Custom type cesPortsUsedLine8 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_CesPortsUsedLine8_Type.__name__ = "Integer32"
_CesPortsUsedLine8_Object = MibScalar
cesPortsUsedLine8 = _CesPortsUsedLine8_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 10),
    _CesPortsUsedLine8_Type()
)
cesPortsUsedLine8.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPortsUsedLine8.setStatus("mandatory")
_CesmPortCnfResPartGrp_ObjectIdentity = ObjectIdentity
cesmPortCnfResPartGrp = _CesmPortCnfResPartGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2)
)
_CesmPortCnfResPartGrpTable_Object = MibTable
cesmPortCnfResPartGrpTable = _CesmPortCnfResPartGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1)
)
if mibBuilder.loadTexts:
    cesmPortCnfResPartGrpTable.setStatus("mandatory")
_CesmPortCnfResPartGrpEntry_Object = MibTableRow
cesmPortCnfResPartGrpEntry = _CesmPortCnfResPartGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1)
)
cesmPortCnfResPartGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "cesmResPartPortNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "cesmResPartCtrlrNum"),
)
if mibBuilder.loadTexts:
    cesmPortCnfResPartGrpEntry.setStatus("mandatory")


class _CesmResPartPortNum_Type(Integer32):
    """Custom type cesmResPartPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 248),
    )


_CesmResPartPortNum_Type.__name__ = "Integer32"
_CesmResPartPortNum_Object = MibTableColumn
cesmResPartPortNum = _CesmResPartPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 1),
    _CesmResPartPortNum_Type()
)
cesmResPartPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesmResPartPortNum.setStatus("mandatory")


class _CesmResPartCtrlrNum_Type(Integer32):
    """Custom type cesmResPartCtrlrNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("par", 1),
          ("pnni", 2),
          ("tag", 3))
    )


_CesmResPartCtrlrNum_Type.__name__ = "Integer32"
_CesmResPartCtrlrNum_Object = MibTableColumn
cesmResPartCtrlrNum = _CesmResPartCtrlrNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 2),
    _CesmResPartCtrlrNum_Type()
)
cesmResPartCtrlrNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesmResPartCtrlrNum.setStatus("mandatory")


class _CesmResPartRowStatus_Type(Integer32):
    """Custom type cesmResPartRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_CesmResPartRowStatus_Type.__name__ = "Integer32"
_CesmResPartRowStatus_Object = MibTableColumn
cesmResPartRowStatus = _CesmResPartRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 3),
    _CesmResPartRowStatus_Type()
)
cesmResPartRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmResPartRowStatus.setStatus("mandatory")


class _CesmResPartNumOfLcnAvail_Type(Integer32):
    """Custom type cesmResPartNumOfLcnAvail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 248),
    )


_CesmResPartNumOfLcnAvail_Type.__name__ = "Integer32"
_CesmResPartNumOfLcnAvail_Object = MibTableColumn
cesmResPartNumOfLcnAvail = _CesmResPartNumOfLcnAvail_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 4),
    _CesmResPartNumOfLcnAvail_Type()
)
cesmResPartNumOfLcnAvail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmResPartNumOfLcnAvail.setStatus("mandatory")


class _CesmResPartLcnLow_Type(Integer32):
    """Custom type cesmResPartLcnLow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 248),
    )


_CesmResPartLcnLow_Type.__name__ = "Integer32"
_CesmResPartLcnLow_Object = MibTableColumn
cesmResPartLcnLow = _CesmResPartLcnLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 5),
    _CesmResPartLcnLow_Type()
)
cesmResPartLcnLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmResPartLcnLow.setStatus("mandatory")


class _CesmResPartLcnHigh_Type(Integer32):
    """Custom type cesmResPartLcnHigh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 248),
    )


_CesmResPartLcnHigh_Type.__name__ = "Integer32"
_CesmResPartLcnHigh_Object = MibTableColumn
cesmResPartLcnHigh = _CesmResPartLcnHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 6),
    _CesmResPartLcnHigh_Type()
)
cesmResPartLcnHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmResPartLcnHigh.setStatus("mandatory")


class _CesmResPartIngrPctBW_Type(Integer32):
    """Custom type cesmResPartIngrPctBW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_CesmResPartIngrPctBW_Type.__name__ = "Integer32"
_CesmResPartIngrPctBW_Object = MibTableColumn
cesmResPartIngrPctBW = _CesmResPartIngrPctBW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 7),
    _CesmResPartIngrPctBW_Type()
)
cesmResPartIngrPctBW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmResPartIngrPctBW.setStatus("mandatory")


class _CesmResPartEgrPctBW_Type(Integer32):
    """Custom type cesmResPartEgrPctBW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_CesmResPartEgrPctBW_Type.__name__ = "Integer32"
_CesmResPartEgrPctBW_Object = MibTableColumn
cesmResPartEgrPctBW = _CesmResPartEgrPctBW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 8),
    _CesmResPartEgrPctBW_Type()
)
cesmResPartEgrPctBW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmResPartEgrPctBW.setStatus("mandatory")


class _CesmResPartCtrlrID_Type(Integer32):
    """Custom type cesmResPartCtrlrID based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_CesmResPartCtrlrID_Type.__name__ = "Integer32"
_CesmResPartCtrlrID_Object = MibTableColumn
cesmResPartCtrlrID = _CesmResPartCtrlrID_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 2, 1, 1, 9),
    _CesmResPartCtrlrID_Type()
)
cesmResPartCtrlrID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmResPartCtrlrID.setStatus("mandatory")
_CesmChanCnfGrp_ObjectIdentity = ObjectIdentity
cesmChanCnfGrp = _CesmChanCnfGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1)
)
_CesmChanCnfGrpTable_Object = MibTable
cesmChanCnfGrpTable = _CesmChanCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1)
)
if mibBuilder.loadTexts:
    cesmChanCnfGrpTable.setStatus("mandatory")
_CesmChanCnfGrpEntry_Object = MibTableRow
cesmChanCnfGrpEntry = _CesmChanCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1)
)
cesmChanCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "cesCnfChanNum"),
)
if mibBuilder.loadTexts:
    cesmChanCnfGrpEntry.setStatus("mandatory")


class _CesCnfChanNum_Type(Integer32):
    """Custom type cesCnfChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 279),
    )


_CesCnfChanNum_Type.__name__ = "Integer32"
_CesCnfChanNum_Object = MibTableColumn
cesCnfChanNum = _CesCnfChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 1),
    _CesCnfChanNum_Type()
)
cesCnfChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesCnfChanNum.setStatus("mandatory")


class _CesChanRowStatus_Type(Integer32):
    """Custom type cesChanRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3),
          ("outOfService", 4))
    )


_CesChanRowStatus_Type.__name__ = "Integer32"
_CesChanRowStatus_Object = MibTableColumn
cesChanRowStatus = _CesChanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 2),
    _CesChanRowStatus_Type()
)
cesChanRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesChanRowStatus.setStatus("mandatory")


class _CesMapPortNum_Type(Integer32):
    """Custom type cesMapPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_CesMapPortNum_Type.__name__ = "Integer32"
_CesMapPortNum_Object = MibTableColumn
cesMapPortNum = _CesMapPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 3),
    _CesMapPortNum_Type()
)
cesMapPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesMapPortNum.setStatus("mandatory")


class _CesMapVpi_Type(Integer32):
    """Custom type cesMapVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 14),
    )


_CesMapVpi_Type.__name__ = "Integer32"
_CesMapVpi_Object = MibTableColumn
cesMapVpi = _CesMapVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 4),
    _CesMapVpi_Type()
)
cesMapVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesMapVpi.setStatus("mandatory")


class _CesMapVci_Type(Integer32):
    """Custom type cesMapVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 279),
    )


_CesMapVci_Type.__name__ = "Integer32"
_CesMapVci_Object = MibTableColumn
cesMapVci = _CesMapVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 5),
    _CesMapVci_Type()
)
cesMapVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesMapVci.setStatus("mandatory")


class _CesCBRService_Type(Integer32):
    """Custom type cesCBRService based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("structured", 2),
          ("unstructured", 1))
    )


_CesCBRService_Type.__name__ = "Integer32"
_CesCBRService_Object = MibTableColumn
cesCBRService = _CesCBRService_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 6),
    _CesCBRService_Type()
)
cesCBRService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesCBRService.setStatus("mandatory")


class _CesCBRClockMode_Type(Integer32):
    """Custom type cesCBRClockMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("adaptive", 3),
          ("srts", 2),
          ("synchronous", 1))
    )


_CesCBRClockMode_Type.__name__ = "Integer32"
_CesCBRClockMode_Object = MibTableColumn
cesCBRClockMode = _CesCBRClockMode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 7),
    _CesCBRClockMode_Type()
)
cesCBRClockMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesCBRClockMode.setStatus("mandatory")


class _CesCas_Type(Integer32):
    """Custom type cesCas based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("basic", 1),
          ("basicNoPointer", 7),
          ("ccs", 5),
          ("conditionedE1Cas", 6),
          ("ds1EsfCas", 4),
          ("ds1EsfCasMF", 9),
          ("ds1SfCas", 3),
          ("ds1SfCasMF", 8),
          ("e1Cas", 2))
    )


_CesCas_Type.__name__ = "Integer32"
_CesCas_Object = MibTableColumn
cesCas = _CesCas_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 8),
    _CesCas_Type()
)
cesCas.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesCas.setStatus("mandatory")


class _CesPartialFill_Type(Integer32):
    """Custom type cesPartialFill based on Integer32"""
    defaultValue = 47

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 47),
    )


_CesPartialFill_Type.__name__ = "Integer32"
_CesPartialFill_Object = MibTableColumn
cesPartialFill = _CesPartialFill_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 9),
    _CesPartialFill_Type()
)
cesPartialFill.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesPartialFill.setStatus("mandatory")


class _CesBufMaxSize_Type(Integer32):
    """Custom type cesBufMaxSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_CesBufMaxSize_Type.__name__ = "Integer32"
_CesBufMaxSize_Object = MibTableColumn
cesBufMaxSize = _CesBufMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 10),
    _CesBufMaxSize_Type()
)
cesBufMaxSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesBufMaxSize.setStatus("mandatory")


class _CesCDVRxT_Type(Integer32):
    """Custom type cesCDVRxT based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(125, 65535),
    )


_CesCDVRxT_Type.__name__ = "Integer32"
_CesCDVRxT_Object = MibTableColumn
cesCDVRxT = _CesCDVRxT_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 11),
    _CesCDVRxT_Type()
)
cesCDVRxT.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesCDVRxT.setStatus("mandatory")


class _CesCellLossIntegrationPeriod_Type(Integer32):
    """Custom type cesCellLossIntegrationPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1000, 65535),
    )


_CesCellLossIntegrationPeriod_Type.__name__ = "Integer32"
_CesCellLossIntegrationPeriod_Object = MibTableColumn
cesCellLossIntegrationPeriod = _CesCellLossIntegrationPeriod_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 12),
    _CesCellLossIntegrationPeriod_Type()
)
cesCellLossIntegrationPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesCellLossIntegrationPeriod.setStatus("mandatory")


class _CesChanLocRmtLpbkState_Type(Integer32):
    """Custom type cesChanLocRmtLpbkState based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_CesChanLocRmtLpbkState_Type.__name__ = "Integer32"
_CesChanLocRmtLpbkState_Object = MibTableColumn
cesChanLocRmtLpbkState = _CesChanLocRmtLpbkState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 13),
    _CesChanLocRmtLpbkState_Type()
)
cesChanLocRmtLpbkState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesChanLocRmtLpbkState.setStatus("mandatory")


class _CesChanTestType_Type(Integer32):
    """Custom type cesChanTestType based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notest", 3),
          ("testcon", 1),
          ("testconsti", 4),
          ("testdelay", 2),
          ("testdelaysti", 5))
    )


_CesChanTestType_Type.__name__ = "Integer32"
_CesChanTestType_Object = MibTableColumn
cesChanTestType = _CesChanTestType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 14),
    _CesChanTestType_Type()
)
cesChanTestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesChanTestType.setStatus("mandatory")


class _CesChanTestState_Type(Integer32):
    """Custom type cesChanTestState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notinprogress", 4),
          ("passed", 1))
    )


_CesChanTestState_Type.__name__ = "Integer32"
_CesChanTestState_Object = MibTableColumn
cesChanTestState = _CesChanTestState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 15),
    _CesChanTestState_Type()
)
cesChanTestState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesChanTestState.setStatus("mandatory")


class _CesChanRTDResult_Type(Integer32):
    """Custom type cesChanRTDResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_CesChanRTDResult_Type.__name__ = "Integer32"
_CesChanRTDResult_Object = MibTableColumn
cesChanRTDResult = _CesChanRTDResult_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 16),
    _CesChanRTDResult_Type()
)
cesChanRTDResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesChanRTDResult.setStatus("mandatory")


class _CesChanPortNum_Type(Integer32):
    """Custom type cesChanPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 248),
    )


_CesChanPortNum_Type.__name__ = "Integer32"
_CesChanPortNum_Object = MibTableColumn
cesChanPortNum = _CesChanPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 17),
    _CesChanPortNum_Type()
)
cesChanPortNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesChanPortNum.setStatus("mandatory")


class _CesChanConnType_Type(Integer32):
    """Custom type cesChanConnType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("pvc", 1),
          ("spvc", 3),
          ("svc", 2))
    )


_CesChanConnType_Type.__name__ = "Integer32"
_CesChanConnType_Object = MibTableColumn
cesChanConnType = _CesChanConnType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 18),
    _CesChanConnType_Type()
)
cesChanConnType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesChanConnType.setStatus("mandatory")


class _CesChanStrauSciNum_Type(Integer32):
    """Custom type cesChanStrauSciNum based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("nonStrauChannel", 1),
          ("sci1", 2),
          ("sci2", 3),
          ("sci3", 4),
          ("sci4", 5))
    )


_CesChanStrauSciNum_Type.__name__ = "Integer32"
_CesChanStrauSciNum_Object = MibTableColumn
cesChanStrauSciNum = _CesChanStrauSciNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 19),
    _CesChanStrauSciNum_Type()
)
cesChanStrauSciNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesChanStrauSciNum.setStatus("mandatory")


class _CesChanIdleDetEnable_Type(Integer32):
    """Custom type cesChanIdleDetEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enableIdlePatternDet", 3),
          ("enableOnhookDet", 2))
    )


_CesChanIdleDetEnable_Type.__name__ = "Integer32"
_CesChanIdleDetEnable_Object = MibTableColumn
cesChanIdleDetEnable = _CesChanIdleDetEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 20),
    _CesChanIdleDetEnable_Type()
)
cesChanIdleDetEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesChanIdleDetEnable.setStatus("mandatory")


class _CesChanIdleSignalCode_Type(Integer32):
    """Custom type cesChanIdleSignalCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_CesChanIdleSignalCode_Type.__name__ = "Integer32"
_CesChanIdleSignalCode_Object = MibTableColumn
cesChanIdleSignalCode = _CesChanIdleSignalCode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 21),
    _CesChanIdleSignalCode_Type()
)
cesChanIdleSignalCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesChanIdleSignalCode.setStatus("mandatory")


class _CesChanIdleCodeIntgnPeriod_Type(Integer32):
    """Custom type cesChanIdleCodeIntgnPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_CesChanIdleCodeIntgnPeriod_Type.__name__ = "Integer32"
_CesChanIdleCodeIntgnPeriod_Object = MibTableColumn
cesChanIdleCodeIntgnPeriod = _CesChanIdleCodeIntgnPeriod_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 22),
    _CesChanIdleCodeIntgnPeriod_Type()
)
cesChanIdleCodeIntgnPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesChanIdleCodeIntgnPeriod.setStatus("mandatory")


class _CesChanOnhookCode_Type(Integer32):
    """Custom type cesChanOnhookCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_CesChanOnhookCode_Type.__name__ = "Integer32"
_CesChanOnhookCode_Object = MibTableColumn
cesChanOnhookCode = _CesChanOnhookCode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 23),
    _CesChanOnhookCode_Type()
)
cesChanOnhookCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesChanOnhookCode.setStatus("mandatory")


class _CesChanConditionedData_Type(Integer32):
    """Custom type cesChanConditionedData based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_CesChanConditionedData_Type.__name__ = "Integer32"
_CesChanConditionedData_Object = MibTableColumn
cesChanConditionedData = _CesChanConditionedData_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 24),
    _CesChanConditionedData_Type()
)
cesChanConditionedData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesChanConditionedData.setStatus("mandatory")


class _CesmChanExtTrgIdleSupp_Type(Integer32):
    """Custom type cesmChanExtTrgIdleSupp based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disablesuppression", 1),
          ("enableSuppresion", 2))
    )


_CesmChanExtTrgIdleSupp_Type.__name__ = "Integer32"
_CesmChanExtTrgIdleSupp_Object = MibTableColumn
cesmChanExtTrgIdleSupp = _CesmChanExtTrgIdleSupp_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 25),
    _CesmChanExtTrgIdleSupp_Type()
)
cesmChanExtTrgIdleSupp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmChanExtTrgIdleSupp.setStatus("mandatory")


class _CesmChanConditionedSigCode_Type(Integer32):
    """Custom type cesmChanConditionedSigCode based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_CesmChanConditionedSigCode_Type.__name__ = "Integer32"
_CesmChanConditionedSigCode_Object = MibTableColumn
cesmChanConditionedSigCode = _CesmChanConditionedSigCode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 26),
    _CesmChanConditionedSigCode_Type()
)
cesmChanConditionedSigCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmChanConditionedSigCode.setStatus("mandatory")


class _CesLocalVpi_Type(Integer32):
    """Custom type cesLocalVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_CesLocalVpi_Type.__name__ = "Integer32"
_CesLocalVpi_Object = MibTableColumn
cesLocalVpi = _CesLocalVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 27),
    _CesLocalVpi_Type()
)
cesLocalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesLocalVpi.setStatus("mandatory")


class _CesLocalVci_Type(Integer32):
    """Custom type cesLocalVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_CesLocalVci_Type.__name__ = "Integer32"
_CesLocalVci_Object = MibTableColumn
cesLocalVci = _CesLocalVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 28),
    _CesLocalVci_Type()
)
cesLocalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesLocalVci.setStatus("mandatory")


class _CesLocalNSAP_Type(OctetString):
    """Custom type cesLocalNSAP based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_CesLocalNSAP_Type.__name__ = "OctetString"
_CesLocalNSAP_Object = MibTableColumn
cesLocalNSAP = _CesLocalNSAP_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 29),
    _CesLocalNSAP_Type()
)
cesLocalNSAP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesLocalNSAP.setStatus("mandatory")


class _CesRemoteVpi_Type(Integer32):
    """Custom type cesRemoteVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_CesRemoteVpi_Type.__name__ = "Integer32"
_CesRemoteVpi_Object = MibTableColumn
cesRemoteVpi = _CesRemoteVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 30),
    _CesRemoteVpi_Type()
)
cesRemoteVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesRemoteVpi.setStatus("mandatory")


class _CesRemoteVci_Type(Integer32):
    """Custom type cesRemoteVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_CesRemoteVci_Type.__name__ = "Integer32"
_CesRemoteVci_Object = MibTableColumn
cesRemoteVci = _CesRemoteVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 31),
    _CesRemoteVci_Type()
)
cesRemoteVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesRemoteVci.setStatus("mandatory")


class _CesRemoteNSAP_Type(OctetString):
    """Custom type cesRemoteNSAP based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_CesRemoteNSAP_Type.__name__ = "OctetString"
_CesRemoteNSAP_Object = MibTableColumn
cesRemoteNSAP = _CesRemoteNSAP_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 32),
    _CesRemoteNSAP_Type()
)
cesRemoteNSAP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesRemoteNSAP.setStatus("mandatory")


class _CesMastership_Type(Integer32):
    """Custom type cesMastership based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("master", 1),
          ("slave", 2),
          ("unkown", 3))
    )


_CesMastership_Type.__name__ = "Integer32"
_CesMastership_Object = MibTableColumn
cesMastership = _CesMastership_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 33),
    _CesMastership_Type()
)
cesMastership.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesMastership.setStatus("mandatory")


class _CesVpcFlag_Type(Integer32):
    """Custom type cesVpcFlag based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vcc", 2),
          ("vpc", 1))
    )


_CesVpcFlag_Type.__name__ = "Integer32"
_CesVpcFlag_Object = MibTableColumn
cesVpcFlag = _CesVpcFlag_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 34),
    _CesVpcFlag_Type()
)
cesVpcFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesVpcFlag.setStatus("mandatory")


class _CesConnServiceType_Type(Integer32):
    """Custom type cesConnServiceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5,
              6,
              7,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32)
        )
    )
    namedValues = NamedValues(
        *(("abrfst", 7),
          ("abrstd", 6),
          ("atfr", 5),
          ("cbr", 1),
          ("cbr1", 21),
          ("cbr2", 31),
          ("cbr3", 32),
          ("stdabr", 30),
          ("ubr", 4),
          ("ubr1", 28),
          ("ubr2", 29),
          ("vbr", 2),
          ("vbr1nrt", 25),
          ("vbr1rt", 22),
          ("vbr2nrt", 26),
          ("vbr2rt", 23),
          ("vbr3nrt", 27),
          ("vbr3rt", 24))
    )


_CesConnServiceType_Type.__name__ = "Integer32"
_CesConnServiceType_Object = MibTableColumn
cesConnServiceType = _CesConnServiceType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 35),
    _CesConnServiceType_Type()
)
cesConnServiceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesConnServiceType.setStatus("mandatory")


class _CesRoutingPriority_Type(Integer32):
    """Custom type cesRoutingPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_CesRoutingPriority_Type.__name__ = "Integer32"
_CesRoutingPriority_Object = MibTableColumn
cesRoutingPriority = _CesRoutingPriority_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 36),
    _CesRoutingPriority_Type()
)
cesRoutingPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesRoutingPriority.setStatus("mandatory")


class _CesMaxCost_Type(Integer32):
    """Custom type cesMaxCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_CesMaxCost_Type.__name__ = "Integer32"
_CesMaxCost_Object = MibTableColumn
cesMaxCost = _CesMaxCost_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 37),
    _CesMaxCost_Type()
)
cesMaxCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesMaxCost.setStatus("mandatory")


class _CesRestrictTrunkType_Type(Integer32):
    """Custom type cesRestrictTrunkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noresriction", 1),
          ("sateliteTrunk", 3),
          ("terrestrialTrunk", 2))
    )


_CesRestrictTrunkType_Type.__name__ = "Integer32"
_CesRestrictTrunkType_Object = MibTableColumn
cesRestrictTrunkType = _CesRestrictTrunkType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 38),
    _CesRestrictTrunkType_Type()
)
cesRestrictTrunkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesRestrictTrunkType.setStatus("mandatory")
_CesConnPCR_Type = Integer32
_CesConnPCR_Object = MibTableColumn
cesConnPCR = _CesConnPCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 39),
    _CesConnPCR_Type()
)
cesConnPCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesConnPCR.setStatus("mandatory")
_CesConnMCR_Type = Integer32
_CesConnMCR_Object = MibTableColumn
cesConnMCR = _CesConnMCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 40),
    _CesConnMCR_Type()
)
cesConnMCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesConnMCR.setStatus("mandatory")


class _CesConnPercentUtil_Type(Integer32):
    """Custom type cesConnPercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_CesConnPercentUtil_Type.__name__ = "Integer32"
_CesConnPercentUtil_Object = MibTableColumn
cesConnPercentUtil = _CesConnPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 41),
    _CesConnPercentUtil_Type()
)
cesConnPercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesConnPercentUtil.setStatus("mandatory")
_CesmConnRemotePCR_Type = Integer32
_CesmConnRemotePCR_Object = MibTableColumn
cesmConnRemotePCR = _CesmConnRemotePCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 42),
    _CesmConnRemotePCR_Type()
)
cesmConnRemotePCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmConnRemotePCR.setStatus("mandatory")
_CesmConnRemoteMCR_Type = Integer32
_CesmConnRemoteMCR_Object = MibTableColumn
cesmConnRemoteMCR = _CesmConnRemoteMCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 43),
    _CesmConnRemoteMCR_Type()
)
cesmConnRemoteMCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmConnRemoteMCR.setStatus("mandatory")


class _CesmConnRemotePercentUtil_Type(Integer32):
    """Custom type cesmConnRemotePercentUtil based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_CesmConnRemotePercentUtil_Type.__name__ = "Integer32"
_CesmConnRemotePercentUtil_Object = MibTableColumn
cesmConnRemotePercentUtil = _CesmConnRemotePercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 44),
    _CesmConnRemotePercentUtil_Type()
)
cesmConnRemotePercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmConnRemotePercentUtil.setStatus("mandatory")


class _CesmConnForeSightEnable_Type(Integer32):
    """Custom type cesmConnForeSightEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_CesmConnForeSightEnable_Type.__name__ = "Integer32"
_CesmConnForeSightEnable_Object = MibTableColumn
cesmConnForeSightEnable = _CesmConnForeSightEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 45),
    _CesmConnForeSightEnable_Type()
)
cesmConnForeSightEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmConnForeSightEnable.setStatus("mandatory")


class _CesmConnFGCRAEnable_Type(Integer32):
    """Custom type cesmConnFGCRAEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_CesmConnFGCRAEnable_Type.__name__ = "Integer32"
_CesmConnFGCRAEnable_Object = MibTableColumn
cesmConnFGCRAEnable = _CesmConnFGCRAEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 46),
    _CesmConnFGCRAEnable_Type()
)
cesmConnFGCRAEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmConnFGCRAEnable.setStatus("mandatory")


class _CesmChanReroute_Type(Integer32):
    """Custom type cesmChanReroute based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 2),
          ("true", 1))
    )


_CesmChanReroute_Type.__name__ = "Integer32"
_CesmChanReroute_Object = MibTableColumn
cesmChanReroute = _CesmChanReroute_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 47),
    _CesmChanReroute_Type()
)
cesmChanReroute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmChanReroute.setStatus("mandatory")


class _CesmConnAdminStatus_Type(Integer32):
    """Custom type cesmConnAdminStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_CesmConnAdminStatus_Type.__name__ = "Integer32"
_CesmConnAdminStatus_Object = MibTableColumn
cesmConnAdminStatus = _CesmConnAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 48),
    _CesmConnAdminStatus_Type()
)
cesmConnAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cesmConnAdminStatus.setStatus("mandatory")


class _CesmChanNumNextAvailable_Type(Integer32):
    """Custom type cesmChanNumNextAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 279),
    )


_CesmChanNumNextAvailable_Type.__name__ = "Integer32"
_CesmChanNumNextAvailable_Object = MibScalar
cesmChanNumNextAvailable = _CesmChanNumNextAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 2),
    _CesmChanNumNextAvailable_Type()
)
cesmChanNumNextAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesmChanNumNextAvailable.setStatus("mandatory")
_CesmChanCntGrp_ObjectIdentity = ObjectIdentity
cesmChanCntGrp = _CesmChanCntGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2)
)
_CesmChanCntGrpTable_Object = MibTable
cesmChanCntGrpTable = _CesmChanCntGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1)
)
if mibBuilder.loadTexts:
    cesmChanCntGrpTable.setStatus("mandatory")
_CesmChanCntGrpEntry_Object = MibTableRow
cesmChanCntGrpEntry = _CesmChanCntGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1)
)
cesmChanCntGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "cesCntChanNum"),
)
if mibBuilder.loadTexts:
    cesmChanCntGrpEntry.setStatus("mandatory")


class _CesCntChanNum_Type(Integer32):
    """Custom type cesCntChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 279),
    )


_CesCntChanNum_Type.__name__ = "Integer32"
_CesCntChanNum_Object = MibTableColumn
cesCntChanNum = _CesCntChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 1),
    _CesCntChanNum_Type()
)
cesCntChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesCntChanNum.setStatus("mandatory")


class _CesChanState_Type(Integer32):
    """Custom type cesChanState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 3),
          ("failed", 4),
          ("notConfigured", 1),
          ("okay", 2))
    )


_CesChanState_Type.__name__ = "Integer32"
_CesChanState_Object = MibTableColumn
cesChanState = _CesChanState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 2),
    _CesChanState_Type()
)
cesChanState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesChanState.setStatus("mandatory")


class _CesXmtATMState_Type(Integer32):
    """Custom type cesXmtATMState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("other", 1),
          ("sendingAIS", 3),
          ("sendingFERF", 4))
    )


_CesXmtATMState_Type.__name__ = "Integer32"
_CesXmtATMState_Object = MibTableColumn
cesXmtATMState = _CesXmtATMState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 3),
    _CesXmtATMState_Type()
)
cesXmtATMState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesXmtATMState.setStatus("mandatory")


class _CesRcvATMState_Type(Integer32):
    """Custom type cesRcvATMState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("other", 1),
          ("receivingAIS", 3),
          ("receivingFERF", 4))
    )


_CesRcvATMState_Type.__name__ = "Integer32"
_CesRcvATMState_Object = MibTableColumn
cesRcvATMState = _CesRcvATMState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 4),
    _CesRcvATMState_Type()
)
cesRcvATMState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesRcvATMState.setStatus("mandatory")


class _CesCellLossStatus_Type(Integer32):
    """Custom type cesCellLossStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("loss", 2),
          ("noLoss", 1))
    )


_CesCellLossStatus_Type.__name__ = "Integer32"
_CesCellLossStatus_Object = MibTableColumn
cesCellLossStatus = _CesCellLossStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 5),
    _CesCellLossStatus_Type()
)
cesCellLossStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesCellLossStatus.setStatus("mandatory")
_CesReassCells_Type = Counter32
_CesReassCells_Object = MibTableColumn
cesReassCells = _CesReassCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 6),
    _CesReassCells_Type()
)
cesReassCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesReassCells.setStatus("mandatory")
_CesGenCells_Type = Counter32
_CesGenCells_Object = MibTableColumn
cesGenCells = _CesGenCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 7),
    _CesGenCells_Type()
)
cesGenCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesGenCells.setStatus("mandatory")
_CesHdrErrors_Type = Counter32
_CesHdrErrors_Object = MibTableColumn
cesHdrErrors = _CesHdrErrors_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 8),
    _CesHdrErrors_Type()
)
cesHdrErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesHdrErrors.setStatus("mandatory")
_CesPointerReframes_Type = Counter32
_CesPointerReframes_Object = MibTableColumn
cesPointerReframes = _CesPointerReframes_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 9),
    _CesPointerReframes_Type()
)
cesPointerReframes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesPointerReframes.setStatus("mandatory")
_CesLostCells_Type = Counter32
_CesLostCells_Object = MibTableColumn
cesLostCells = _CesLostCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 10),
    _CesLostCells_Type()
)
cesLostCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesLostCells.setStatus("mandatory")
_CesBufUnderflows_Type = Counter32
_CesBufUnderflows_Object = MibTableColumn
cesBufUnderflows = _CesBufUnderflows_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 11),
    _CesBufUnderflows_Type()
)
cesBufUnderflows.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesBufUnderflows.setStatus("mandatory")
_CesBufOverflows_Type = Counter32
_CesBufOverflows_Object = MibTableColumn
cesBufOverflows = _CesBufOverflows_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 12),
    _CesBufOverflows_Type()
)
cesBufOverflows.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesBufOverflows.setStatus("mandatory")
_CesIngrDiscardedBytes_Type = Counter32
_CesIngrDiscardedBytes_Object = MibTableColumn
cesIngrDiscardedBytes = _CesIngrDiscardedBytes_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 13),
    _CesIngrDiscardedBytes_Type()
)
cesIngrDiscardedBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesIngrDiscardedBytes.setStatus("mandatory")
_CesUflowInsCells_Type = Counter32
_CesUflowInsCells_Object = MibTableColumn
cesUflowInsCells = _CesUflowInsCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 14),
    _CesUflowInsCells_Type()
)
cesUflowInsCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesUflowInsCells.setStatus("mandatory")
_CesOflowDropBytes_Type = Counter32
_CesOflowDropBytes_Object = MibTableColumn
cesOflowDropBytes = _CesOflowDropBytes_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 15),
    _CesOflowDropBytes_Type()
)
cesOflowDropBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesOflowDropBytes.setStatus("mandatory")
_CesCellSeqMismatchCnt_Type = Counter32
_CesCellSeqMismatchCnt_Object = MibTableColumn
cesCellSeqMismatchCnt = _CesCellSeqMismatchCnt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 16),
    _CesCellSeqMismatchCnt_Type()
)
cesCellSeqMismatchCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesCellSeqMismatchCnt.setStatus("mandatory")


class _CounterClrButton_Type(Integer32):
    """Custom type counterClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAction", 1),
          ("resetCounters", 2))
    )


_CounterClrButton_Type.__name__ = "Integer32"
_CounterClrButton_Object = MibTableColumn
counterClrButton = _CounterClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 17),
    _CounterClrButton_Type()
)
counterClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    counterClrButton.setStatus("mandatory")
_CesChanSecUptime_Type = Counter32
_CesChanSecUptime_Object = MibTableColumn
cesChanSecUptime = _CesChanSecUptime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 18),
    _CesChanSecUptime_Type()
)
cesChanSecUptime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesChanSecUptime.setStatus("mandatory")


class _CesChanSignalingStatus_Type(Integer32):
    """Custom type cesChanSignalingStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off-hook", 1),
          ("on-hook", 2))
    )


_CesChanSignalingStatus_Type.__name__ = "Integer32"
_CesChanSignalingStatus_Object = MibTableColumn
cesChanSignalingStatus = _CesChanSignalingStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 19),
    _CesChanSignalingStatus_Type()
)
cesChanSignalingStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesChanSignalingStatus.setStatus("mandatory")


class _CesChanStatusBitMap_Type(Integer32):
    """Custom type cesChanStatusBitMap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_CesChanStatusBitMap_Type.__name__ = "Integer32"
_CesChanStatusBitMap_Object = MibTableColumn
cesChanStatusBitMap = _CesChanStatusBitMap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 2, 1, 1, 20),
    _CesChanStatusBitMap_Type()
)
cesChanStatusBitMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesChanStatusBitMap.setStatus("mandatory")
_CesmEndPtMapGrp_ObjectIdentity = ObjectIdentity
cesmEndPtMapGrp = _CesmEndPtMapGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3)
)
_CesmEndPtMapGrpTable_Object = MibTable
cesmEndPtMapGrpTable = _CesmEndPtMapGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1)
)
if mibBuilder.loadTexts:
    cesmEndPtMapGrpTable.setStatus("mandatory")
_CesmEndPtMapGrpEntry_Object = MibTableRow
cesmEndPtMapGrpEntry = _CesmEndPtMapGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1, 1)
)
cesmEndPtMapGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "cesEndPortNum"),
)
if mibBuilder.loadTexts:
    cesmEndPtMapGrpEntry.setStatus("mandatory")


class _CesEndPortNum_Type(Integer32):
    """Custom type cesEndPortNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 248),
    )


_CesEndPortNum_Type.__name__ = "Integer32"
_CesEndPortNum_Object = MibTableColumn
cesEndPortNum = _CesEndPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1, 1, 1),
    _CesEndPortNum_Type()
)
cesEndPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesEndPortNum.setStatus("mandatory")


class _CesEndChanNum_Type(Integer32):
    """Custom type cesEndChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 279),
    )


_CesEndChanNum_Type.__name__ = "Integer32"
_CesEndChanNum_Object = MibTableColumn
cesEndChanNum = _CesEndChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1, 1, 2),
    _CesEndChanNum_Type()
)
cesEndChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesEndChanNum.setStatus("mandatory")


class _CesEndLineNum_Type(Integer32):
    """Custom type cesEndLineNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_CesEndLineNum_Type.__name__ = "Integer32"
_CesEndLineNum_Object = MibTableColumn
cesEndLineNum = _CesEndLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1, 1, 3),
    _CesEndLineNum_Type()
)
cesEndLineNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cesEndLineNum.setStatus("mandatory")
_VismPortCnfGrp_ObjectIdentity = ObjectIdentity
vismPortCnfGrp = _VismPortCnfGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1)
)
_VismPortCnfGrpTable_Object = MibTable
vismPortCnfGrpTable = _VismPortCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1)
)
if mibBuilder.loadTexts:
    vismPortCnfGrpTable.setStatus("mandatory")
_VismPortCnfGrpEntry_Object = MibTableRow
vismPortCnfGrpEntry = _VismPortCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1)
)
vismPortCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "vismPortNum"),
)
if mibBuilder.loadTexts:
    vismPortCnfGrpEntry.setStatus("mandatory")
_VismPortNum_Type = Integer32
_VismPortNum_Object = MibTableColumn
vismPortNum = _VismPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 1),
    _VismPortNum_Type()
)
vismPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismPortNum.setStatus("mandatory")


class _VismPortRowStatus_Type(Integer32):
    """Custom type vismPortRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_VismPortRowStatus_Type.__name__ = "Integer32"
_VismPortRowStatus_Object = MibTableColumn
vismPortRowStatus = _VismPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 2),
    _VismPortRowStatus_Type()
)
vismPortRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismPortRowStatus.setStatus("mandatory")


class _VismPortLineNum_Type(Integer32):
    """Custom type vismPortLineNum based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_VismPortLineNum_Type.__name__ = "Integer32"
_VismPortLineNum_Object = MibTableColumn
vismPortLineNum = _VismPortLineNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 3),
    _VismPortLineNum_Type()
)
vismPortLineNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismPortLineNum.setStatus("mandatory")


class _VismPortType_Type(Integer32):
    """Custom type vismPortType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("userPort", 2),
          ("voIP", 1))
    )


_VismPortType_Type.__name__ = "Integer32"
_VismPortType_Object = MibTableColumn
vismPortType = _VismPortType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 4),
    _VismPortType_Type()
)
vismPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismPortType.setStatus("mandatory")


class _VismPortDs0ConfigBitMap_Type(Integer32):
    """Custom type vismPortDs0ConfigBitMap based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_VismPortDs0ConfigBitMap_Type.__name__ = "Integer32"
_VismPortDs0ConfigBitMap_Object = MibTableColumn
vismPortDs0ConfigBitMap = _VismPortDs0ConfigBitMap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 5),
    _VismPortDs0ConfigBitMap_Type()
)
vismPortDs0ConfigBitMap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismPortDs0ConfigBitMap.setStatus("mandatory")


class _VismPortSpeed_Type(Integer32):
    """Custom type vismPortSpeed based on Integer32"""
    defaultValue = 5651320

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5651320),
    )


_VismPortSpeed_Type.__name__ = "Integer32"
_VismPortSpeed_Object = MibTableColumn
vismPortSpeed = _VismPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 6),
    _VismPortSpeed_Type()
)
vismPortSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismPortSpeed.setStatus("mandatory")


class _VismPortState_Type(Integer32):
    """Custom type vismPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("notConfigured", 1))
    )


_VismPortState_Type.__name__ = "Integer32"
_VismPortState_Object = MibTableColumn
vismPortState = _VismPortState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 1, 1, 1, 7),
    _VismPortState_Type()
)
vismPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismPortState.setStatus("mandatory")
_VismPortResPartCnfGrp_ObjectIdentity = ObjectIdentity
vismPortResPartCnfGrp = _VismPortResPartCnfGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2)
)
_VismPortResPartCnfGrpTable_Object = MibTable
vismPortResPartCnfGrpTable = _VismPortResPartCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1)
)
if mibBuilder.loadTexts:
    vismPortResPartCnfGrpTable.setStatus("mandatory")
_VismPortResPartCnfGrpEntry_Object = MibTableRow
vismPortResPartCnfGrpEntry = _VismPortResPartCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1)
)
vismPortResPartCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "vismResPartPortNum"),
    (0, "CISCO-WAN-AXIPOP-MIB", "vismResPartCtrlrNum"),
)
if mibBuilder.loadTexts:
    vismPortResPartCnfGrpEntry.setStatus("mandatory")
_VismResPartPortNum_Type = Integer32
_VismResPartPortNum_Object = MibTableColumn
vismResPartPortNum = _VismResPartPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 1),
    _VismResPartPortNum_Type()
)
vismResPartPortNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismResPartPortNum.setStatus("mandatory")


class _VismResPartCtrlrNum_Type(Integer32):
    """Custom type vismResPartCtrlrNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("par", 1),
          ("pnni", 2),
          ("tag", 3))
    )


_VismResPartCtrlrNum_Type.__name__ = "Integer32"
_VismResPartCtrlrNum_Object = MibTableColumn
vismResPartCtrlrNum = _VismResPartCtrlrNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 2),
    _VismResPartCtrlrNum_Type()
)
vismResPartCtrlrNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismResPartCtrlrNum.setStatus("mandatory")


class _VismResPartRowStatus_Type(Integer32):
    """Custom type vismResPartRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3))
    )


_VismResPartRowStatus_Type.__name__ = "Integer32"
_VismResPartRowStatus_Object = MibTableColumn
vismResPartRowStatus = _VismResPartRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 3),
    _VismResPartRowStatus_Type()
)
vismResPartRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismResPartRowStatus.setStatus("mandatory")


class _VismResPartNumOfLcnAvail_Type(Integer32):
    """Custom type vismResPartNumOfLcnAvail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 380),
    )


_VismResPartNumOfLcnAvail_Type.__name__ = "Integer32"
_VismResPartNumOfLcnAvail_Object = MibTableColumn
vismResPartNumOfLcnAvail = _VismResPartNumOfLcnAvail_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 4),
    _VismResPartNumOfLcnAvail_Type()
)
vismResPartNumOfLcnAvail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismResPartNumOfLcnAvail.setStatus("mandatory")


class _VismResPartLcnLow_Type(Integer32):
    """Custom type vismResPartLcnLow based on Integer32"""
    defaultValue = 131

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(131, 510),
    )


_VismResPartLcnLow_Type.__name__ = "Integer32"
_VismResPartLcnLow_Object = MibTableColumn
vismResPartLcnLow = _VismResPartLcnLow_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 5),
    _VismResPartLcnLow_Type()
)
vismResPartLcnLow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismResPartLcnLow.setStatus("mandatory")


class _VismResPartLcnHigh_Type(Integer32):
    """Custom type vismResPartLcnHigh based on Integer32"""
    defaultValue = 510

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(131, 510),
    )


_VismResPartLcnHigh_Type.__name__ = "Integer32"
_VismResPartLcnHigh_Object = MibTableColumn
vismResPartLcnHigh = _VismResPartLcnHigh_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 6),
    _VismResPartLcnHigh_Type()
)
vismResPartLcnHigh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismResPartLcnHigh.setStatus("mandatory")


class _VismResPartIngrPctBW_Type(Integer32):
    """Custom type vismResPartIngrPctBW based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_VismResPartIngrPctBW_Type.__name__ = "Integer32"
_VismResPartIngrPctBW_Object = MibTableColumn
vismResPartIngrPctBW = _VismResPartIngrPctBW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 7),
    _VismResPartIngrPctBW_Type()
)
vismResPartIngrPctBW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismResPartIngrPctBW.setStatus("mandatory")


class _VismResPartEgrPctBW_Type(Integer32):
    """Custom type vismResPartEgrPctBW based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_VismResPartEgrPctBW_Type.__name__ = "Integer32"
_VismResPartEgrPctBW_Object = MibTableColumn
vismResPartEgrPctBW = _VismResPartEgrPctBW_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 8),
    _VismResPartEgrPctBW_Type()
)
vismResPartEgrPctBW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismResPartEgrPctBW.setStatus("mandatory")


class _VismResPartCtrlrID_Type(Integer32):
    """Custom type vismResPartCtrlrID based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VismResPartCtrlrID_Type.__name__ = "Integer32"
_VismResPartCtrlrID_Object = MibTableColumn
vismResPartCtrlrID = _VismResPartCtrlrID_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 2, 2, 1, 1, 9),
    _VismResPartCtrlrID_Type()
)
vismResPartCtrlrID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismResPartCtrlrID.setStatus("mandatory")
_VismChanCnfGrpTable_Object = MibTable
vismChanCnfGrpTable = _VismChanCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1)
)
if mibBuilder.loadTexts:
    vismChanCnfGrpTable.setStatus("mandatory")
_VismChanCnfGrpEntry_Object = MibTableRow
vismChanCnfGrpEntry = _VismChanCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1)
)
vismChanCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "vismCnfChanNum"),
)
if mibBuilder.loadTexts:
    vismChanCnfGrpEntry.setStatus("mandatory")


class _VismCnfChanNum_Type(Integer32):
    """Custom type vismCnfChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(131, 510),
    )


_VismCnfChanNum_Type.__name__ = "Integer32"
_VismCnfChanNum_Object = MibTableColumn
vismCnfChanNum = _VismCnfChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 1),
    _VismCnfChanNum_Type()
)
vismCnfChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismCnfChanNum.setStatus("mandatory")


class _VismChanRowStatus_Type(Integer32):
    """Custom type vismChanRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("del", 2),
          ("mod", 3),
          ("outOfService", 4))
    )


_VismChanRowStatus_Type.__name__ = "Integer32"
_VismChanRowStatus_Object = MibTableColumn
vismChanRowStatus = _VismChanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 2),
    _VismChanRowStatus_Type()
)
vismChanRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanRowStatus.setStatus("mandatory")
_VismChanPortNum_Type = Integer32
_VismChanPortNum_Object = MibTableColumn
vismChanPortNum = _VismChanPortNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 3),
    _VismChanPortNum_Type()
)
vismChanPortNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanPortNum.setStatus("mandatory")


class _VismChanLocRmtLpbkState_Type(Integer32):
    """Custom type vismChanLocRmtLpbkState based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_VismChanLocRmtLpbkState_Type.__name__ = "Integer32"
_VismChanLocRmtLpbkState_Object = MibTableColumn
vismChanLocRmtLpbkState = _VismChanLocRmtLpbkState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 4),
    _VismChanLocRmtLpbkState_Type()
)
vismChanLocRmtLpbkState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanLocRmtLpbkState.setStatus("mandatory")


class _VismChanTestType_Type(Integer32):
    """Custom type vismChanTestType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notest", 3),
          ("testcon", 1),
          ("testdelay", 2))
    )


_VismChanTestType_Type.__name__ = "Integer32"
_VismChanTestType_Object = MibTableColumn
vismChanTestType = _VismChanTestType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 5),
    _VismChanTestType_Type()
)
vismChanTestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanTestType.setStatus("mandatory")


class _VismChanTestState_Type(Integer32):
    """Custom type vismChanTestState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notinprogress", 4),
          ("passed", 1))
    )


_VismChanTestState_Type.__name__ = "Integer32"
_VismChanTestState_Object = MibTableColumn
vismChanTestState = _VismChanTestState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 6),
    _VismChanTestState_Type()
)
vismChanTestState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanTestState.setStatus("mandatory")


class _VismChanRTDResult_Type(Integer32):
    """Custom type vismChanRTDResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_VismChanRTDResult_Type.__name__ = "Integer32"
_VismChanRTDResult_Object = MibTableColumn
vismChanRTDResult = _VismChanRTDResult_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 7),
    _VismChanRTDResult_Type()
)
vismChanRTDResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanRTDResult.setStatus("mandatory")


class _VismChanPvcType_Type(Integer32):
    """Custom type vismChanPvcType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("aal-1", 3),
          ("aal-2", 2),
          ("aal-5", 1))
    )


_VismChanPvcType_Type.__name__ = "Integer32"
_VismChanPvcType_Object = MibTableColumn
vismChanPvcType = _VismChanPvcType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 8),
    _VismChanPvcType_Type()
)
vismChanPvcType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanPvcType.setStatus("mandatory")


class _VismChanConnType_Type(Integer32):
    """Custom type vismChanConnType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("pvc", 1)
    )


_VismChanConnType_Type.__name__ = "Integer32"
_VismChanConnType_Object = MibTableColumn
vismChanConnType = _VismChanConnType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 9),
    _VismChanConnType_Type()
)
vismChanConnType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanConnType.setStatus("mandatory")


class _VismLocalVpi_Type(Integer32):
    """Custom type vismLocalVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VismLocalVpi_Type.__name__ = "Integer32"
_VismLocalVpi_Object = MibTableColumn
vismLocalVpi = _VismLocalVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 10),
    _VismLocalVpi_Type()
)
vismLocalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismLocalVpi.setStatus("mandatory")


class _VismLocalVci_Type(Integer32):
    """Custom type vismLocalVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VismLocalVci_Type.__name__ = "Integer32"
_VismLocalVci_Object = MibTableColumn
vismLocalVci = _VismLocalVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 11),
    _VismLocalVci_Type()
)
vismLocalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismLocalVci.setStatus("mandatory")


class _VismLocalNSAP_Type(OctetString):
    """Custom type vismLocalNSAP based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 20),
    )


_VismLocalNSAP_Type.__name__ = "OctetString"
_VismLocalNSAP_Object = MibTableColumn
vismLocalNSAP = _VismLocalNSAP_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 12),
    _VismLocalNSAP_Type()
)
vismLocalNSAP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismLocalNSAP.setStatus("mandatory")


class _VismRemoteVpi_Type(Integer32):
    """Custom type vismRemoteVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VismRemoteVpi_Type.__name__ = "Integer32"
_VismRemoteVpi_Object = MibTableColumn
vismRemoteVpi = _VismRemoteVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 13),
    _VismRemoteVpi_Type()
)
vismRemoteVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismRemoteVpi.setStatus("mandatory")


class _VismRemoteVci_Type(Integer32):
    """Custom type vismRemoteVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VismRemoteVci_Type.__name__ = "Integer32"
_VismRemoteVci_Object = MibTableColumn
vismRemoteVci = _VismRemoteVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 14),
    _VismRemoteVci_Type()
)
vismRemoteVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismRemoteVci.setStatus("mandatory")


class _VismRemoteNSAP_Type(OctetString):
    """Custom type vismRemoteNSAP based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 20),
    )


_VismRemoteNSAP_Type.__name__ = "OctetString"
_VismRemoteNSAP_Object = MibTableColumn
vismRemoteNSAP = _VismRemoteNSAP_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 15),
    _VismRemoteNSAP_Type()
)
vismRemoteNSAP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismRemoteNSAP.setStatus("mandatory")


class _VismMastership_Type(Integer32):
    """Custom type vismMastership based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("master", 1),
          ("slave", 2),
          ("unknown", 3))
    )


_VismMastership_Type.__name__ = "Integer32"
_VismMastership_Object = MibTableColumn
vismMastership = _VismMastership_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 16),
    _VismMastership_Type()
)
vismMastership.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismMastership.setStatus("mandatory")


class _VismVpcFlag_Type(Integer32):
    """Custom type vismVpcFlag based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            2
        )
    )
    namedValues = NamedValues(
        ("vcc", 2)
    )


_VismVpcFlag_Type.__name__ = "Integer32"
_VismVpcFlag_Object = MibTableColumn
vismVpcFlag = _VismVpcFlag_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 17),
    _VismVpcFlag_Type()
)
vismVpcFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVpcFlag.setStatus("mandatory")


class _VismConnServiceType_Type(Integer32):
    """Custom type vismConnServiceType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("cbr", 1),
          ("vbr-nrt", 3),
          ("vbr-rt", 2),
          ("vbr2-nrt", 6),
          ("vbr2-rt", 5),
          ("vbr3-nrt", 7),
          ("vbr3-rt", 4))
    )


_VismConnServiceType_Type.__name__ = "Integer32"
_VismConnServiceType_Object = MibTableColumn
vismConnServiceType = _VismConnServiceType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 18),
    _VismConnServiceType_Type()
)
vismConnServiceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismConnServiceType.setStatus("mandatory")


class _VismRoutingPriority_Type(Integer32):
    """Custom type vismRoutingPriority based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_VismRoutingPriority_Type.__name__ = "Integer32"
_VismRoutingPriority_Object = MibTableColumn
vismRoutingPriority = _VismRoutingPriority_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 19),
    _VismRoutingPriority_Type()
)
vismRoutingPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismRoutingPriority.setStatus("mandatory")


class _VismMaxCost_Type(Integer32):
    """Custom type vismMaxCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_VismMaxCost_Type.__name__ = "Integer32"
_VismMaxCost_Object = MibTableColumn
vismMaxCost = _VismMaxCost_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 20),
    _VismMaxCost_Type()
)
vismMaxCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismMaxCost.setStatus("mandatory")


class _VismRestrictTrunkType_Type(Integer32):
    """Custom type vismRestrictTrunkType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noresriction", 1),
          ("sateliteTrunk", 3),
          ("terrestrialTrunk", 2))
    )


_VismRestrictTrunkType_Type.__name__ = "Integer32"
_VismRestrictTrunkType_Object = MibTableColumn
vismRestrictTrunkType = _VismRestrictTrunkType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 21),
    _VismRestrictTrunkType_Type()
)
vismRestrictTrunkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismRestrictTrunkType.setStatus("mandatory")


class _VismConnPCR_Type(Integer32):
    """Custom type vismConnPCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100000),
    )


_VismConnPCR_Type.__name__ = "Integer32"
_VismConnPCR_Object = MibTableColumn
vismConnPCR = _VismConnPCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 22),
    _VismConnPCR_Type()
)
vismConnPCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismConnPCR.setStatus("mandatory")


class _VismConnPercentUtil_Type(Integer32):
    """Custom type vismConnPercentUtil based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_VismConnPercentUtil_Type.__name__ = "Integer32"
_VismConnPercentUtil_Object = MibTableColumn
vismConnPercentUtil = _VismConnPercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 23),
    _VismConnPercentUtil_Type()
)
vismConnPercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismConnPercentUtil.setStatus("mandatory")


class _VismConnRemotePCR_Type(Integer32):
    """Custom type vismConnRemotePCR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100000),
    )


_VismConnRemotePCR_Type.__name__ = "Integer32"
_VismConnRemotePCR_Object = MibTableColumn
vismConnRemotePCR = _VismConnRemotePCR_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 24),
    _VismConnRemotePCR_Type()
)
vismConnRemotePCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismConnRemotePCR.setStatus("mandatory")


class _VismConnRemotePercentUtil_Type(Integer32):
    """Custom type vismConnRemotePercentUtil based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_VismConnRemotePercentUtil_Type.__name__ = "Integer32"
_VismConnRemotePercentUtil_Object = MibTableColumn
vismConnRemotePercentUtil = _VismConnRemotePercentUtil_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 25),
    _VismConnRemotePercentUtil_Type()
)
vismConnRemotePercentUtil.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismConnRemotePercentUtil.setStatus("mandatory")


class _VismChanProtection_Type(Integer32):
    """Custom type vismChanProtection based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("protected", 1),
          ("unprotected", 2))
    )


_VismChanProtection_Type.__name__ = "Integer32"
_VismChanProtection_Object = MibTableColumn
vismChanProtection = _VismChanProtection_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 26),
    _VismChanProtection_Type()
)
vismChanProtection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanProtection.setStatus("mandatory")


class _VismChanPreference_Type(Integer32):
    """Custom type vismChanPreference based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("primary", 1),
          ("secondary", 2))
    )


_VismChanPreference_Type.__name__ = "Integer32"
_VismChanPreference_Object = MibTableColumn
vismChanPreference = _VismChanPreference_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 27),
    _VismChanPreference_Type()
)
vismChanPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanPreference.setStatus("mandatory")


class _VismChanActivityState_Type(Integer32):
    """Custom type vismChanActivityState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("failed", 3),
          ("standby", 2),
          ("unknown", 4))
    )


_VismChanActivityState_Type.__name__ = "Integer32"
_VismChanActivityState_Object = MibTableColumn
vismChanActivityState = _VismChanActivityState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 28),
    _VismChanActivityState_Type()
)
vismChanActivityState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanActivityState.setStatus("mandatory")


class _VismChanLockingState_Type(Integer32):
    """Custom type vismChanLockingState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("lock", 2),
          ("unlock", 1))
    )


_VismChanLockingState_Type.__name__ = "Integer32"
_VismChanLockingState_Object = MibTableColumn
vismChanLockingState = _VismChanLockingState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 29),
    _VismChanLockingState_Type()
)
vismChanLockingState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanLockingState.setStatus("mandatory")


class _VismChanScrIngress_Type(Integer32):
    """Custom type vismChanScrIngress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100000),
    )


_VismChanScrIngress_Type.__name__ = "Integer32"
_VismChanScrIngress_Object = MibTableColumn
vismChanScrIngress = _VismChanScrIngress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 30),
    _VismChanScrIngress_Type()
)
vismChanScrIngress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanScrIngress.setStatus("mandatory")
_VismChanMbsIngress_Type = Integer32
_VismChanMbsIngress_Object = MibTableColumn
vismChanMbsIngress = _VismChanMbsIngress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 31),
    _VismChanMbsIngress_Type()
)
vismChanMbsIngress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanMbsIngress.setStatus("mandatory")
_VismChanClrIngress_Type = Integer32
_VismChanClrIngress_Object = MibTableColumn
vismChanClrIngress = _VismChanClrIngress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 32),
    _VismChanClrIngress_Type()
)
vismChanClrIngress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanClrIngress.setStatus("mandatory")


class _VismChanCdvt_Type(Integer32):
    """Custom type vismChanCdvt based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_VismChanCdvt_Type.__name__ = "Integer32"
_VismChanCdvt_Object = MibTableColumn
vismChanCdvt = _VismChanCdvt_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 33),
    _VismChanCdvt_Type()
)
vismChanCdvt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanCdvt.setStatus("mandatory")


class _VismConnPCREgress_Type(Integer32):
    """Custom type vismConnPCREgress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100000),
    )


_VismConnPCREgress_Type.__name__ = "Integer32"
_VismConnPCREgress_Object = MibTableColumn
vismConnPCREgress = _VismConnPCREgress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 34),
    _VismConnPCREgress_Type()
)
vismConnPCREgress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismConnPCREgress.setStatus("mandatory")


class _VismChanScrEgress_Type(Integer32):
    """Custom type vismChanScrEgress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100000),
    )


_VismChanScrEgress_Type.__name__ = "Integer32"
_VismChanScrEgress_Object = MibTableColumn
vismChanScrEgress = _VismChanScrEgress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 35),
    _VismChanScrEgress_Type()
)
vismChanScrEgress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanScrEgress.setStatus("mandatory")
_VismChanMbsEgress_Type = Integer32
_VismChanMbsEgress_Object = MibTableColumn
vismChanMbsEgress = _VismChanMbsEgress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 36),
    _VismChanMbsEgress_Type()
)
vismChanMbsEgress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanMbsEgress.setStatus("mandatory")
_VismChanClrEgress_Type = Integer32
_VismChanClrEgress_Object = MibTableColumn
vismChanClrEgress = _VismChanClrEgress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 37),
    _VismChanClrEgress_Type()
)
vismChanClrEgress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanClrEgress.setStatus("mandatory")


class _VismChanApplication_Type(Integer32):
    """Custom type vismChanApplication based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bearer", 2),
          ("control", 1),
          ("signaling", 3))
    )


_VismChanApplication_Type.__name__ = "Integer32"
_VismChanApplication_Object = MibTableColumn
vismChanApplication = _VismChanApplication_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 38),
    _VismChanApplication_Type()
)
vismChanApplication.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanApplication.setStatus("mandatory")


class _VismChanFallbackLcn_Type(Integer32):
    """Custom type vismChanFallbackLcn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(131, 510),
    )


_VismChanFallbackLcn_Type.__name__ = "Integer32"
_VismChanFallbackLcn_Object = MibTableColumn
vismChanFallbackLcn = _VismChanFallbackLcn_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 39),
    _VismChanFallbackLcn_Type()
)
vismChanFallbackLcn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanFallbackLcn.setStatus("mandatory")


class _VismChanReroute_Type(TruthValue):
    """Custom type vismChanReroute based on TruthValue"""


_VismChanReroute_Object = MibTableColumn
vismChanReroute = _VismChanReroute_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 40),
    _VismChanReroute_Type()
)
vismChanReroute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanReroute.setStatus("mandatory")


class _VismFarEndAddressType_Type(Integer32):
    """Custom type vismFarEndAddressType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("e164", 3),
          ("gwid", 4),
          ("notapplicable", 1),
          ("nsap", 2),
          ("unspecified", 5))
    )


_VismFarEndAddressType_Type.__name__ = "Integer32"
_VismFarEndAddressType_Object = MibTableColumn
vismFarEndAddressType = _VismFarEndAddressType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 41),
    _VismFarEndAddressType_Type()
)
vismFarEndAddressType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismFarEndAddressType.setStatus("mandatory")


class _VismFarEndE164Address_Type(DisplayString):
    """Custom type vismFarEndE164Address based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 15),
    )


_VismFarEndE164Address_Type.__name__ = "DisplayString"
_VismFarEndE164Address_Object = MibTableColumn
vismFarEndE164Address = _VismFarEndE164Address_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 42),
    _VismFarEndE164Address_Type()
)
vismFarEndE164Address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismFarEndE164Address.setStatus("mandatory")


class _VismFarEndGWIDAddress_Type(DisplayString):
    """Custom type vismFarEndGWIDAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_VismFarEndGWIDAddress_Type.__name__ = "DisplayString"
_VismFarEndGWIDAddress_Object = MibTableColumn
vismFarEndGWIDAddress = _VismFarEndGWIDAddress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 43),
    _VismFarEndGWIDAddress_Type()
)
vismFarEndGWIDAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismFarEndGWIDAddress.setStatus("mandatory")


class _VismFarEndNSAPAddress_Type(OctetString):
    """Custom type vismFarEndNSAPAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 20),
    )


_VismFarEndNSAPAddress_Type.__name__ = "OctetString"
_VismFarEndNSAPAddress_Object = MibTableColumn
vismFarEndNSAPAddress = _VismFarEndNSAPAddress_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 44),
    _VismFarEndNSAPAddress_Type()
)
vismFarEndNSAPAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismFarEndNSAPAddress.setStatus("mandatory")


class _VismVCCI_Type(Integer32):
    """Custom type vismVCCI based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VismVCCI_Type.__name__ = "Integer32"
_VismVCCI_Object = MibTableColumn
vismVCCI = _VismVCCI_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 45),
    _VismVCCI_Type()
)
vismVCCI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismVCCI.setStatus("mandatory")


class _VismConnAdminStatus_Type(Integer32):
    """Custom type vismConnAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_VismConnAdminStatus_Type.__name__ = "Integer32"
_VismConnAdminStatus_Object = MibTableColumn
vismConnAdminStatus = _VismConnAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 1, 1, 46),
    _VismConnAdminStatus_Type()
)
vismConnAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismConnAdminStatus.setStatus("mandatory")


class _VismChanNumNextAvailable_Type(Integer32):
    """Custom type vismChanNumNextAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 510),
    )


_VismChanNumNextAvailable_Type.__name__ = "Integer32"
_VismChanNumNextAvailable_Object = MibScalar
vismChanNumNextAvailable = _VismChanNumNextAvailable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 2),
    _VismChanNumNextAvailable_Type()
)
vismChanNumNextAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanNumNextAvailable.setStatus("mandatory")
_VismChanCacTable_Object = MibTable
vismChanCacTable = _VismChanCacTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3)
)
if mibBuilder.loadTexts:
    vismChanCacTable.setStatus("mandatory")
_VismChanCacEntry_Object = MibTableRow
vismChanCacEntry = _VismChanCacEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1)
)
vismChanCacEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "vismChanNum"),
)
if mibBuilder.loadTexts:
    vismChanCacEntry.setStatus("mandatory")


class _VismChanNum_Type(Integer32):
    """Custom type vismChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(131, 510),
    )


_VismChanNum_Type.__name__ = "Integer32"
_VismChanNum_Object = MibTableColumn
vismChanNum = _VismChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 1),
    _VismChanNum_Type()
)
vismChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanNum.setStatus("mandatory")


class _VismChanCacMaster_Type(Integer32):
    """Custom type vismChanCacMaster based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("master", 1),
          ("slave", 2))
    )


_VismChanCacMaster_Type.__name__ = "Integer32"
_VismChanCacMaster_Object = MibTableColumn
vismChanCacMaster = _VismChanCacMaster_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 2),
    _VismChanCacMaster_Type()
)
vismChanCacMaster.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanCacMaster.setStatus("mandatory")
_VismChanCacPassedCons_Type = Counter32
_VismChanCacPassedCons_Object = MibTableColumn
vismChanCacPassedCons = _VismChanCacPassedCons_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 3),
    _VismChanCacPassedCons_Type()
)
vismChanCacPassedCons.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanCacPassedCons.setStatus("mandatory")
_VismChanCacRejectedCons_Type = Counter32
_VismChanCacRejectedCons_Object = MibTableColumn
vismChanCacRejectedCons = _VismChanCacRejectedCons_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 4),
    _VismChanCacRejectedCons_Type()
)
vismChanCacRejectedCons.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanCacRejectedCons.setStatus("mandatory")


class _VismChanCacRejectionPolicy_Type(Integer32):
    """Custom type vismChanCacRejectionPolicy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("delete", 1),
          ("maintain", 2),
          ("unspecified", 3))
    )


_VismChanCacRejectionPolicy_Type.__name__ = "Integer32"
_VismChanCacRejectionPolicy_Object = MibTableColumn
vismChanCacRejectionPolicy = _VismChanCacRejectionPolicy_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 5),
    _VismChanCacRejectionPolicy_Type()
)
vismChanCacRejectionPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanCacRejectionPolicy.setStatus("mandatory")


class _VismChanCarrierLossPolicy_Type(Integer32):
    """Custom type vismChanCarrierLossPolicy based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("previousCodec", 1),
          ("unspecified", 3),
          ("upspeedCodec", 2))
    )


_VismChanCarrierLossPolicy_Type.__name__ = "Integer32"
_VismChanCarrierLossPolicy_Object = MibTableColumn
vismChanCarrierLossPolicy = _VismChanCarrierLossPolicy_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 6),
    _VismChanCarrierLossPolicy_Type()
)
vismChanCarrierLossPolicy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanCarrierLossPolicy.setStatus("mandatory")


class _VismChanVADTolerance_Type(Integer32):
    """Custom type vismChanVADTolerance based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10000),
    )


_VismChanVADTolerance_Type.__name__ = "Integer32"
_VismChanVADTolerance_Object = MibTableColumn
vismChanVADTolerance = _VismChanVADTolerance_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 7),
    _VismChanVADTolerance_Type()
)
vismChanVADTolerance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanVADTolerance.setStatus("mandatory")


class _VismChanVADDutyCycle_Type(Integer32):
    """Custom type vismChanVADDutyCycle based on Integer32"""
    defaultValue = 61

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_VismChanVADDutyCycle_Type.__name__ = "Integer32"
_VismChanVADDutyCycle_Object = MibTableColumn
vismChanVADDutyCycle = _VismChanVADDutyCycle_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 8),
    _VismChanVADDutyCycle_Type()
)
vismChanVADDutyCycle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismChanVADDutyCycle.setStatus("mandatory")


class _NetworkCacConfigState_Type(Integer32):
    """Custom type networkCacConfigState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notOk", 2),
          ("ok", 1))
    )


_NetworkCacConfigState_Type.__name__ = "Integer32"
_NetworkCacConfigState_Object = MibTableColumn
networkCacConfigState = _NetworkCacConfigState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 1, 3, 1, 9),
    _NetworkCacConfigState_Type()
)
networkCacConfigState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    networkCacConfigState.setStatus("mandatory")
_VismChanStateGrp_ObjectIdentity = ObjectIdentity
vismChanStateGrp = _VismChanStateGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2)
)
_VismChanStateGrpTable_Object = MibTable
vismChanStateGrpTable = _VismChanStateGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1)
)
if mibBuilder.loadTexts:
    vismChanStateGrpTable.setStatus("mandatory")
_VismChanStateGrpEntry_Object = MibTableRow
vismChanStateGrpEntry = _VismChanStateGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1, 1)
)
vismChanStateGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "vismStateChanNum"),
)
if mibBuilder.loadTexts:
    vismChanStateGrpEntry.setStatus("mandatory")


class _VismStateChanNum_Type(Integer32):
    """Custom type vismStateChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(131, 510),
    )


_VismStateChanNum_Type.__name__ = "Integer32"
_VismStateChanNum_Object = MibTableColumn
vismStateChanNum = _VismStateChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1, 1, 1),
    _VismStateChanNum_Type()
)
vismStateChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismStateChanNum.setStatus("mandatory")


class _VismChanState_Type(Integer32):
    """Custom type vismChanState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 3),
          ("notConfigured", 1),
          ("okay", 2))
    )


_VismChanState_Type.__name__ = "Integer32"
_VismChanState_Object = MibTableColumn
vismChanState = _VismChanState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1, 1, 2),
    _VismChanState_Type()
)
vismChanState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanState.setStatus("mandatory")


class _VismChanXmtATMState_Type(Integer32):
    """Custom type vismChanXmtATMState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("other", 1),
          ("sendingAIS", 3),
          ("sendingFERF", 4))
    )


_VismChanXmtATMState_Type.__name__ = "Integer32"
_VismChanXmtATMState_Object = MibTableColumn
vismChanXmtATMState = _VismChanXmtATMState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1, 1, 3),
    _VismChanXmtATMState_Type()
)
vismChanXmtATMState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanXmtATMState.setStatus("mandatory")


class _VismChanRcvATMState_Type(Integer32):
    """Custom type vismChanRcvATMState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("other", 1),
          ("receivingAIS", 3),
          ("receivingFERF", 4))
    )


_VismChanRcvATMState_Type.__name__ = "Integer32"
_VismChanRcvATMState_Object = MibTableColumn
vismChanRcvATMState = _VismChanRcvATMState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1, 1, 4),
    _VismChanRcvATMState_Type()
)
vismChanRcvATMState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanRcvATMState.setStatus("mandatory")


class _VismChanStatusBitMap_Type(Integer32):
    """Custom type vismChanStatusBitMap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VismChanStatusBitMap_Type.__name__ = "Integer32"
_VismChanStatusBitMap_Object = MibTableColumn
vismChanStatusBitMap = _VismChanStatusBitMap_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 2, 1, 1, 5),
    _VismChanStatusBitMap_Type()
)
vismChanStatusBitMap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanStatusBitMap.setStatus("mandatory")
_VismChanCntGrp_ObjectIdentity = ObjectIdentity
vismChanCntGrp = _VismChanCntGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3)
)
_VismChanCntGrpTable_Object = MibTable
vismChanCntGrpTable = _VismChanCntGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1)
)
if mibBuilder.loadTexts:
    vismChanCntGrpTable.setStatus("mandatory")
_VismChanCntGrpEntry_Object = MibTableRow
vismChanCntGrpEntry = _VismChanCntGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1)
)
vismChanCntGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "vismCntChanNum"),
)
if mibBuilder.loadTexts:
    vismChanCntGrpEntry.setStatus("mandatory")


class _VismCntChanNum_Type(Integer32):
    """Custom type vismCntChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(131, 510),
    )


_VismCntChanNum_Type.__name__ = "Integer32"
_VismCntChanNum_Object = MibTableColumn
vismCntChanNum = _VismCntChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 1),
    _VismCntChanNum_Type()
)
vismCntChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismCntChanNum.setStatus("mandatory")


class _VismCntClrButton_Type(Integer32):
    """Custom type vismCntClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAction", 1),
          ("resetCounters", 2))
    )


_VismCntClrButton_Type.__name__ = "Integer32"
_VismCntClrButton_Object = MibTableColumn
vismCntClrButton = _VismCntClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 10),
    _VismCntClrButton_Type()
)
vismCntClrButton.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismCntClrButton.setStatus("mandatory")
_VismChanAal2HecErrors_Type = Counter32
_VismChanAal2HecErrors_Object = MibTableColumn
vismChanAal2HecErrors = _VismChanAal2HecErrors_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 11),
    _VismChanAal2HecErrors_Type()
)
vismChanAal2HecErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal2HecErrors.setStatus("mandatory")
_VismChanAal2CrcErrors_Type = Counter32
_VismChanAal2CrcErrors_Object = MibTableColumn
vismChanAal2CrcErrors = _VismChanAal2CrcErrors_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 12),
    _VismChanAal2CrcErrors_Type()
)
vismChanAal2CrcErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal2CrcErrors.setStatus("mandatory")
_VismChanAal2OamLpbLostCells_Type = Counter32
_VismChanAal2OamLpbLostCells_Object = MibTableColumn
vismChanAal2OamLpbLostCells = _VismChanAal2OamLpbLostCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 13),
    _VismChanAal2OamLpbLostCells_Type()
)
vismChanAal2OamLpbLostCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal2OamLpbLostCells.setStatus("mandatory")
_VismChanAal2InvOsfCells_Type = Counter32
_VismChanAal2InvOsfCells_Object = MibTableColumn
vismChanAal2InvOsfCells = _VismChanAal2InvOsfCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 14),
    _VismChanAal2InvOsfCells_Type()
)
vismChanAal2InvOsfCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal2InvOsfCells.setStatus("mandatory")
_VismChanAal2InvParCells_Type = Counter32
_VismChanAal2InvParCells_Object = MibTableColumn
vismChanAal2InvParCells = _VismChanAal2InvParCells_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 15),
    _VismChanAal2InvParCells_Type()
)
vismChanAal2InvParCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal2InvParCells.setStatus("mandatory")
_VismChanAal2CpsSentPkts_Type = Counter32
_VismChanAal2CpsSentPkts_Object = MibTableColumn
vismChanAal2CpsSentPkts = _VismChanAal2CpsSentPkts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 16),
    _VismChanAal2CpsSentPkts_Type()
)
vismChanAal2CpsSentPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal2CpsSentPkts.setStatus("mandatory")
_VismChanAal2CpsRcvdPkts_Type = Counter32
_VismChanAal2CpsRcvdPkts_Object = MibTableColumn
vismChanAal2CpsRcvdPkts = _VismChanAal2CpsRcvdPkts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 17),
    _VismChanAal2CpsRcvdPkts_Type()
)
vismChanAal2CpsRcvdPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal2CpsRcvdPkts.setStatus("mandatory")
_VismChanAal2CpsInvCidPkts_Type = Counter32
_VismChanAal2CpsInvCidPkts_Object = MibTableColumn
vismChanAal2CpsInvCidPkts = _VismChanAal2CpsInvCidPkts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 18),
    _VismChanAal2CpsInvCidPkts_Type()
)
vismChanAal2CpsInvCidPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal2CpsInvCidPkts.setStatus("mandatory")
_VismChanAal2CpsInvUuiPkts_Type = Counter32
_VismChanAal2CpsInvUuiPkts_Object = MibTableColumn
vismChanAal2CpsInvUuiPkts = _VismChanAal2CpsInvUuiPkts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 19),
    _VismChanAal2CpsInvUuiPkts_Type()
)
vismChanAal2CpsInvUuiPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal2CpsInvUuiPkts.setStatus("mandatory")
_VismChanAal2CpsInvLenPkts_Type = Counter32
_VismChanAal2CpsInvLenPkts_Object = MibTableColumn
vismChanAal2CpsInvLenPkts = _VismChanAal2CpsInvLenPkts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 20),
    _VismChanAal2CpsInvLenPkts_Type()
)
vismChanAal2CpsInvLenPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal2CpsInvLenPkts.setStatus("mandatory")
_VismChanAal5InvCpiPdus_Type = Counter32
_VismChanAal5InvCpiPdus_Object = MibTableColumn
vismChanAal5InvCpiPdus = _VismChanAal5InvCpiPdus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 21),
    _VismChanAal5InvCpiPdus_Type()
)
vismChanAal5InvCpiPdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal5InvCpiPdus.setStatus("mandatory")
_VismChanAal5OversizedSdusRcvdPdus_Type = Counter32
_VismChanAal5OversizedSdusRcvdPdus_Object = MibTableColumn
vismChanAal5OversizedSdusRcvdPdus = _VismChanAal5OversizedSdusRcvdPdus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 22),
    _VismChanAal5OversizedSdusRcvdPdus_Type()
)
vismChanAal5OversizedSdusRcvdPdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal5OversizedSdusRcvdPdus.setStatus("mandatory")
_VismChanAal5InvLenPdus_Type = Counter32
_VismChanAal5InvLenPdus_Object = MibTableColumn
vismChanAal5InvLenPdus = _VismChanAal5InvLenPdus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 23),
    _VismChanAal5InvLenPdus_Type()
)
vismChanAal5InvLenPdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal5InvLenPdus.setStatus("mandatory")
_VismChanAal5Crc32ErrorPdus_Type = Counter32
_VismChanAal5Crc32ErrorPdus_Object = MibTableColumn
vismChanAal5Crc32ErrorPdus = _VismChanAal5Crc32ErrorPdus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 24),
    _VismChanAal5Crc32ErrorPdus_Type()
)
vismChanAal5Crc32ErrorPdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal5Crc32ErrorPdus.setStatus("mandatory")
_VismChanAal5ReassemTimerExpiryPdus_Type = Counter32
_VismChanAal5ReassemTimerExpiryPdus_Object = MibTableColumn
vismChanAal5ReassemTimerExpiryPdus = _VismChanAal5ReassemTimerExpiryPdus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 3, 1, 1, 25),
    _VismChanAal5ReassemTimerExpiryPdus_Type()
)
vismChanAal5ReassemTimerExpiryPdus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismChanAal5ReassemTimerExpiryPdus.setStatus("mandatory")
_VismAal2CidGrp_ObjectIdentity = ObjectIdentity
vismAal2CidGrp = _VismAal2CidGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4)
)
_VismAal2CidCnfTable_Object = MibTable
vismAal2CidCnfTable = _VismAal2CidCnfTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1)
)
if mibBuilder.loadTexts:
    vismAal2CidCnfTable.setStatus("mandatory")
_VismAal2CidEntry_Object = MibTableRow
vismAal2CidEntry = _VismAal2CidEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1)
)
vismAal2CidEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "vismAal2CidLcn"),
    (0, "CISCO-WAN-AXIPOP-MIB", "vismAal2CidNum"),
)
if mibBuilder.loadTexts:
    vismAal2CidEntry.setStatus("mandatory")


class _VismAal2CidNum_Type(Integer32):
    """Custom type vismAal2CidNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(8, 255),
    )


_VismAal2CidNum_Type.__name__ = "Integer32"
_VismAal2CidNum_Object = MibTableColumn
vismAal2CidNum = _VismAal2CidNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 1),
    _VismAal2CidNum_Type()
)
vismAal2CidNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismAal2CidNum.setStatus("mandatory")


class _VismAal2CidLcn_Type(Integer32):
    """Custom type vismAal2CidLcn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(131, 510),
    )


_VismAal2CidLcn_Type.__name__ = "Integer32"
_VismAal2CidLcn_Object = MibTableColumn
vismAal2CidLcn = _VismAal2CidLcn_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 2),
    _VismAal2CidLcn_Type()
)
vismAal2CidLcn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismAal2CidLcn.setStatus("mandatory")


class _VismAal2EndptNum_Type(Integer32):
    """Custom type vismAal2EndptNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_VismAal2EndptNum_Type.__name__ = "Integer32"
_VismAal2EndptNum_Object = MibTableColumn
vismAal2EndptNum = _VismAal2EndptNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 3),
    _VismAal2EndptNum_Type()
)
vismAal2EndptNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2EndptNum.setStatus("mandatory")


class _VismAal2CidRowStatus_Type(Integer32):
    """Custom type vismAal2CidRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("createAndGo", 4),
          ("destroy", 6))
    )


_VismAal2CidRowStatus_Type.__name__ = "Integer32"
_VismAal2CidRowStatus_Object = MibTableColumn
vismAal2CidRowStatus = _VismAal2CidRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 4),
    _VismAal2CidRowStatus_Type()
)
vismAal2CidRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CidRowStatus.setStatus("mandatory")
_VismAal2CidType3Redundancy_Type = TruthValue
_VismAal2CidType3Redundancy_Object = MibTableColumn
vismAal2CidType3Redundancy = _VismAal2CidType3Redundancy_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 5),
    _VismAal2CidType3Redundancy_Type()
)
vismAal2CidType3Redundancy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CidType3Redundancy.setStatus("mandatory")


class _VismAal2CidVad_Type(TruthValue):
    """Custom type vismAal2CidVad based on TruthValue"""


_VismAal2CidVad_Object = MibTableColumn
vismAal2CidVad = _VismAal2CidVad_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 6),
    _VismAal2CidVad_Type()
)
vismAal2CidVad.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CidVad.setStatus("mandatory")


class _VismAal2CidProfileType_Type(Integer32):
    """Custom type vismAal2CidProfileType based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("atm", 2),
          ("custom", 3),
          ("itu", 1),
          ("none", 4))
    )


_VismAal2CidProfileType_Type.__name__ = "Integer32"
_VismAal2CidProfileType_Object = MibTableColumn
vismAal2CidProfileType = _VismAal2CidProfileType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 7),
    _VismAal2CidProfileType_Type()
)
vismAal2CidProfileType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CidProfileType.setStatus("mandatory")


class _VismAal2CidProfileNum_Type(Integer32):
    """Custom type vismAal2CidProfileNum based on Integer32"""
    defaultValue = 100


_VismAal2CidProfileNum_Object = MibTableColumn
vismAal2CidProfileNum = _VismAal2CidProfileNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 8),
    _VismAal2CidProfileNum_Type()
)
vismAal2CidProfileNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CidProfileNum.setStatus("mandatory")


class _VismAal2CidCodecType_Type(Integer32):
    """Custom type vismAal2CidCodecType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("clearChannel", 6),
          ("g711a", 2),
          ("g711u", 1),
          ("g723ah", 12),
          ("g723al", 14),
          ("g723h", 11),
          ("g723l", 13),
          ("g726r16000", 7),
          ("g726r24000", 8),
          ("g726r32000", 3),
          ("g726r40000", 9),
          ("g729a", 4),
          ("g729ab", 5))
    )


_VismAal2CidCodecType_Type.__name__ = "Integer32"
_VismAal2CidCodecType_Object = MibTableColumn
vismAal2CidCodecType = _VismAal2CidCodecType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 9),
    _VismAal2CidCodecType_Type()
)
vismAal2CidCodecType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CidCodecType.setStatus("mandatory")


class _VismAal2CidDtmfTransport_Type(TruthValue):
    """Custom type vismAal2CidDtmfTransport based on TruthValue"""


_VismAal2CidDtmfTransport_Object = MibTableColumn
vismAal2CidDtmfTransport = _VismAal2CidDtmfTransport_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 10),
    _VismAal2CidDtmfTransport_Type()
)
vismAal2CidDtmfTransport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CidDtmfTransport.setStatus("mandatory")
_VismAal2CidCasTransport_Type = TruthValue
_VismAal2CidCasTransport_Object = MibTableColumn
vismAal2CidCasTransport = _VismAal2CidCasTransport_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 11),
    _VismAal2CidCasTransport_Type()
)
vismAal2CidCasTransport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CidCasTransport.setStatus("mandatory")


class _VismAal2CidEcanEnable_Type(TruthValue):
    """Custom type vismAal2CidEcanEnable based on TruthValue"""


_VismAal2CidEcanEnable_Object = MibTableColumn
vismAal2CidEcanEnable = _VismAal2CidEcanEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 12),
    _VismAal2CidEcanEnable_Type()
)
vismAal2CidEcanEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CidEcanEnable.setStatus("mandatory")


class _VismAal2InitVadTimer_Type(Integer32):
    """Custom type vismAal2InitVadTimer based on Integer32"""
    defaultValue = 250

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(250, 65535),
    )


_VismAal2InitVadTimer_Type.__name__ = "Integer32"
_VismAal2InitVadTimer_Object = MibTableColumn
vismAal2InitVadTimer = _VismAal2InitVadTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 13),
    _VismAal2InitVadTimer_Type()
)
vismAal2InitVadTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2InitVadTimer.setStatus("mandatory")


class _VismAal2CnfPktPeriod_Type(Integer32):
    """Custom type vismAal2CnfPktPeriod based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              10,
              20,
              30,
              40)
        )
    )
    namedValues = NamedValues(
        *(("five", 5),
          ("fourty", 40),
          ("ten", 10),
          ("thirty", 30),
          ("twenty", 20))
    )


_VismAal2CnfPktPeriod_Type.__name__ = "Integer32"
_VismAal2CnfPktPeriod_Object = MibTableColumn
vismAal2CnfPktPeriod = _VismAal2CnfPktPeriod_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 14),
    _VismAal2CnfPktPeriod_Type()
)
vismAal2CnfPktPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CnfPktPeriod.setStatus("mandatory")


class _VismAal2CidICSEnable_Type(TruthValue):
    """Custom type vismAal2CidICSEnable based on TruthValue"""


_VismAal2CidICSEnable_Object = MibTableColumn
vismAal2CidICSEnable = _VismAal2CidICSEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 15),
    _VismAal2CidICSEnable_Type()
)
vismAal2CidICSEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismAal2CidICSEnable.setStatus("mandatory")


class _VismAal2CidState_Type(Integer32):
    """Custom type vismAal2CidState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("cidStateActive", 1),
          ("cidStateFailed", 2))
    )


_VismAal2CidState_Type.__name__ = "Integer32"
_VismAal2CidState_Object = MibTableColumn
vismAal2CidState = _VismAal2CidState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 16),
    _VismAal2CidState_Type()
)
vismAal2CidState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismAal2CidState.setStatus("mandatory")


class _VismAal2CidFailReason_Type(Integer32):
    """Custom type vismAal2CidFailReason based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 3),
          ("highLevel", 2),
          ("notFail", 4),
          ("self", 1))
    )


_VismAal2CidFailReason_Type.__name__ = "Integer32"
_VismAal2CidFailReason_Object = MibTableColumn
vismAal2CidFailReason = _VismAal2CidFailReason_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 3, 4, 1, 1, 17),
    _VismAal2CidFailReason_Type()
)
vismAal2CidFailReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismAal2CidFailReason.setStatus("mandatory")
_VismSigGrp_ObjectIdentity = ObjectIdentity
vismSigGrp = _VismSigGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6)
)
_VismHdlcChanTable_Object = MibTable
vismHdlcChanTable = _VismHdlcChanTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1)
)
if mibBuilder.loadTexts:
    vismHdlcChanTable.setStatus("mandatory")
_VismHdlcChanEntry_Object = MibTableRow
vismHdlcChanEntry = _VismHdlcChanEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1)
)
vismHdlcChanEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "vismHdlcChanNum"),
)
if mibBuilder.loadTexts:
    vismHdlcChanEntry.setStatus("mandatory")


class _VismHdlcChanNum_Type(Integer32):
    """Custom type vismHdlcChanNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 248),
    )


_VismHdlcChanNum_Type.__name__ = "Integer32"
_VismHdlcChanNum_Object = MibTableColumn
vismHdlcChanNum = _VismHdlcChanNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 1),
    _VismHdlcChanNum_Type()
)
vismHdlcChanNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismHdlcChanNum.setStatus("mandatory")


class _VismHdlcRowStatus_Type(Integer32):
    """Custom type vismHdlcRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("createAndGo", 4),
          ("destroy", 6))
    )


_VismHdlcRowStatus_Type.__name__ = "Integer32"
_VismHdlcRowStatus_Object = MibTableColumn
vismHdlcRowStatus = _VismHdlcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 2),
    _VismHdlcRowStatus_Type()
)
vismHdlcRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismHdlcRowStatus.setStatus("mandatory")
_VismHdlcMaxFrameSize_Type = Integer32
_VismHdlcMaxFrameSize_Object = MibTableColumn
vismHdlcMaxFrameSize = _VismHdlcMaxFrameSize_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 3),
    _VismHdlcMaxFrameSize_Type()
)
vismHdlcMaxFrameSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismHdlcMaxFrameSize.setStatus("deprecated")


class _VismHdlcLcnNum_Type(Integer32):
    """Custom type vismHdlcLcnNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(131, 510),
    )


_VismHdlcLcnNum_Type.__name__ = "Integer32"
_VismHdlcLcnNum_Object = MibTableColumn
vismHdlcLcnNum = _VismHdlcLcnNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 4),
    _VismHdlcLcnNum_Type()
)
vismHdlcLcnNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismHdlcLcnNum.setStatus("mandatory")
_VismHdlcXmtFrames_Type = Counter32
_VismHdlcXmtFrames_Object = MibTableColumn
vismHdlcXmtFrames = _VismHdlcXmtFrames_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 5),
    _VismHdlcXmtFrames_Type()
)
vismHdlcXmtFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismHdlcXmtFrames.setStatus("mandatory")
_VismHdlcRcvFrames_Type = Counter32
_VismHdlcRcvFrames_Object = MibTableColumn
vismHdlcRcvFrames = _VismHdlcRcvFrames_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 6),
    _VismHdlcRcvFrames_Type()
)
vismHdlcRcvFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismHdlcRcvFrames.setStatus("mandatory")
_VismHdlcRcvCrcErrors_Type = Counter32
_VismHdlcRcvCrcErrors_Object = MibTableColumn
vismHdlcRcvCrcErrors = _VismHdlcRcvCrcErrors_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 7),
    _VismHdlcRcvCrcErrors_Type()
)
vismHdlcRcvCrcErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismHdlcRcvCrcErrors.setStatus("mandatory")
_VismHdlcRcvBufOverflows_Type = Counter32
_VismHdlcRcvBufOverflows_Object = MibTableColumn
vismHdlcRcvBufOverflows = _VismHdlcRcvBufOverflows_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 8),
    _VismHdlcRcvBufOverflows_Type()
)
vismHdlcRcvBufOverflows.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismHdlcRcvBufOverflows.setStatus("mandatory")
_VismHdlcTxUnderflows_Type = Counter32
_VismHdlcTxUnderflows_Object = MibTableColumn
vismHdlcTxUnderflows = _VismHdlcTxUnderflows_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 9),
    _VismHdlcTxUnderflows_Type()
)
vismHdlcTxUnderflows.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismHdlcTxUnderflows.setStatus("mandatory")
_VismHdlcTxAbortFrames_Type = Counter32
_VismHdlcTxAbortFrames_Object = MibTableColumn
vismHdlcTxAbortFrames = _VismHdlcTxAbortFrames_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 10),
    _VismHdlcTxAbortFrames_Type()
)
vismHdlcTxAbortFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismHdlcTxAbortFrames.setStatus("mandatory")
_VismHdlcRxAbortFrames_Type = Counter32
_VismHdlcRxAbortFrames_Object = MibTableColumn
vismHdlcRxAbortFrames = _VismHdlcRxAbortFrames_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 6, 1, 1, 11),
    _VismHdlcRxAbortFrames_Type()
)
vismHdlcRxAbortFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismHdlcRxAbortFrames.setStatus("mandatory")
_VismCodecTemplateCnfGrp_ObjectIdentity = ObjectIdentity
vismCodecTemplateCnfGrp = _VismCodecTemplateCnfGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 7)
)
_VismCodecTemplateCnfGrpTable_Object = MibTable
vismCodecTemplateCnfGrpTable = _VismCodecTemplateCnfGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 7, 1)
)
if mibBuilder.loadTexts:
    vismCodecTemplateCnfGrpTable.setStatus("mandatory")
_VismCodecTemplateCnfGrpEntry_Object = MibTableRow
vismCodecTemplateCnfGrpEntry = _VismCodecTemplateCnfGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 7, 1, 1)
)
vismCodecTemplateCnfGrpEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "vismCodecTemplateNum"),
)
if mibBuilder.loadTexts:
    vismCodecTemplateCnfGrpEntry.setStatus("mandatory")


class _VismCodecTemplateNum_Type(Integer32):
    """Custom type vismCodecTemplateNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_VismCodecTemplateNum_Type.__name__ = "Integer32"
_VismCodecTemplateNum_Object = MibTableColumn
vismCodecTemplateNum = _VismCodecTemplateNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 7, 1, 1, 1),
    _VismCodecTemplateNum_Type()
)
vismCodecTemplateNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismCodecTemplateNum.setStatus("mandatory")
_VismCodecSupported_Type = Integer32
_VismCodecSupported_Object = MibTableColumn
vismCodecSupported = _VismCodecSupported_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 7, 1, 1, 2),
    _VismCodecSupported_Type()
)
vismCodecSupported.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismCodecSupported.setStatus("mandatory")
_VismCodecTemplateMaxChanCount_Type = Integer32
_VismCodecTemplateMaxChanCount_Object = MibTableColumn
vismCodecTemplateMaxChanCount = _VismCodecTemplateMaxChanCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 7, 1, 1, 3),
    _VismCodecTemplateMaxChanCount_Type()
)
vismCodecTemplateMaxChanCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismCodecTemplateMaxChanCount.setStatus("mandatory")
_VismCasGrp_ObjectIdentity = ObjectIdentity
vismCasGrp = _VismCasGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8)
)
_VismCasVariantTable_Object = MibTable
vismCasVariantTable = _VismCasVariantTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1)
)
if mibBuilder.loadTexts:
    vismCasVariantTable.setStatus("mandatory")
_VismCasVariantEntry_Object = MibTableRow
vismCasVariantEntry = _VismCasVariantEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1)
)
vismCasVariantEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "vismCasVariantName"),
)
if mibBuilder.loadTexts:
    vismCasVariantEntry.setStatus("mandatory")
_VismCasVariantName_Type = DisplayString
_VismCasVariantName_Object = MibTableColumn
vismCasVariantName = _VismCasVariantName_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 1),
    _VismCasVariantName_Type()
)
vismCasVariantName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismCasVariantName.setStatus("mandatory")


class _VismCasFileName_Type(DisplayString):
    """Custom type vismCasFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 64),
    )


_VismCasFileName_Type.__name__ = "DisplayString"
_VismCasFileName_Object = MibTableColumn
vismCasFileName = _VismCasFileName_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 2),
    _VismCasFileName_Type()
)
vismCasFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCasFileName.setStatus("mandatory")


class _VismCasTRinging_Type(Integer32):
    """Custom type vismCasTRinging based on Integer32"""
    defaultValue = 180

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 600),
    )


_VismCasTRinging_Type.__name__ = "Integer32"
_VismCasTRinging_Object = MibTableColumn
vismCasTRinging = _VismCasTRinging_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 3),
    _VismCasTRinging_Type()
)
vismCasTRinging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCasTRinging.setStatus("deprecated")


class _VismCasDigitMethod_Type(Integer32):
    """Custom type vismCasDigitMethod based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dtmf", 2),
          ("mf", 1))
    )


_VismCasDigitMethod_Type.__name__ = "Integer32"
_VismCasDigitMethod_Object = MibTableColumn
vismCasDigitMethod = _VismCasDigitMethod_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 4),
    _VismCasDigitMethod_Type()
)
vismCasDigitMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCasDigitMethod.setStatus("mandatory")


class _VismCasInterdigitTpart_Type(Integer32):
    """Custom type vismCasInterdigitTpart based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 10000),
    )


_VismCasInterdigitTpart_Type.__name__ = "Integer32"
_VismCasInterdigitTpart_Object = MibTableColumn
vismCasInterdigitTpart = _VismCasInterdigitTpart_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 5),
    _VismCasInterdigitTpart_Type()
)
vismCasInterdigitTpart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCasInterdigitTpart.setStatus("mandatory")


class _VismCasInterdigitTcrit_Type(Integer32):
    """Custom type vismCasInterdigitTcrit based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10000),
    )


_VismCasInterdigitTcrit_Type.__name__ = "Integer32"
_VismCasInterdigitTcrit_Object = MibTableColumn
vismCasInterdigitTcrit = _VismCasInterdigitTcrit_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 6),
    _VismCasInterdigitTcrit_Type()
)
vismCasInterdigitTcrit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCasInterdigitTcrit.setStatus("mandatory")


class _VismCasInterdigitTMF_Type(Integer32):
    """Custom type vismCasInterdigitTMF based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_VismCasInterdigitTMF_Type.__name__ = "Integer32"
_VismCasInterdigitTMF_Object = MibTableColumn
vismCasInterdigitTMF = _VismCasInterdigitTMF_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 7),
    _VismCasInterdigitTMF_Type()
)
vismCasInterdigitTMF.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCasInterdigitTMF.setStatus("mandatory")


class _VismCasVariantState_Type(Integer32):
    """Custom type vismCasVariantState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("configInProgress", 2),
          ("configured", 3),
          ("notConfigured", 1))
    )


_VismCasVariantState_Type.__name__ = "Integer32"
_VismCasVariantState_Object = MibTableColumn
vismCasVariantState = _VismCasVariantState_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 8),
    _VismCasVariantState_Type()
)
vismCasVariantState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismCasVariantState.setStatus("mandatory")


class _VismCasRowStatus_Type(Integer32):
    """Custom type vismCasRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("createAndGo", 4),
          ("destroy", 6))
    )


_VismCasRowStatus_Type.__name__ = "Integer32"
_VismCasRowStatus_Object = MibTableColumn
vismCasRowStatus = _VismCasRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 9),
    _VismCasRowStatus_Type()
)
vismCasRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCasRowStatus.setStatus("mandatory")


class _VismCasCountryCode_Type(DisplayString):
    """Custom type vismCasCountryCode based on DisplayString"""
    defaultValue = OctetString("US")

    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 2),
    )


_VismCasCountryCode_Type.__name__ = "DisplayString"
_VismCasCountryCode_Object = MibTableColumn
vismCasCountryCode = _VismCasCountryCode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 10),
    _VismCasCountryCode_Type()
)
vismCasCountryCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCasCountryCode.setStatus("deprecated")


class _VismCasVariantSource_Type(Integer32):
    """Custom type vismCasVariantSource based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("external", 3),
          ("internal", 2),
          ("unspecified", 1))
    )


_VismCasVariantSource_Type.__name__ = "Integer32"
_VismCasVariantSource_Object = MibTableColumn
vismCasVariantSource = _VismCasVariantSource_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 1, 1, 11),
    _VismCasVariantSource_Type()
)
vismCasVariantSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCasVariantSource.setStatus("mandatory")
_VismCasXgcpVariantTable_Object = MibTable
vismCasXgcpVariantTable = _VismCasXgcpVariantTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2)
)
if mibBuilder.loadTexts:
    vismCasXgcpVariantTable.setStatus("mandatory")
_VismCasXgcpVariantEntry_Object = MibTableRow
vismCasXgcpVariantEntry = _VismCasXgcpVariantEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2, 1)
)
vismCasXgcpVariantEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "vismCasXgcpVariantName"),
)
if mibBuilder.loadTexts:
    vismCasXgcpVariantEntry.setStatus("mandatory")
_VismCasXgcpVariantName_Type = DisplayString
_VismCasXgcpVariantName_Object = MibTableColumn
vismCasXgcpVariantName = _VismCasXgcpVariantName_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2, 1, 1),
    _VismCasXgcpVariantName_Type()
)
vismCasXgcpVariantName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismCasXgcpVariantName.setStatus("mandatory")
_VismCasXgcpFileName_Type = DisplayString
_VismCasXgcpFileName_Object = MibTableColumn
vismCasXgcpFileName = _VismCasXgcpFileName_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2, 1, 2),
    _VismCasXgcpFileName_Type()
)
vismCasXgcpFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismCasXgcpFileName.setStatus("mandatory")


class _VismCasXgcpMaxReXmitTime_Type(Integer32):
    """Custom type vismCasXgcpMaxReXmitTime based on Integer32"""
    defaultValue = 500

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 10000),
    )


_VismCasXgcpMaxReXmitTime_Type.__name__ = "Integer32"
_VismCasXgcpMaxReXmitTime_Object = MibTableColumn
vismCasXgcpMaxReXmitTime = _VismCasXgcpMaxReXmitTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2, 1, 3),
    _VismCasXgcpMaxReXmitTime_Type()
)
vismCasXgcpMaxReXmitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCasXgcpMaxReXmitTime.setStatus("mandatory")


class _VismCasXgcpInitialReXmitTime_Type(Integer32):
    """Custom type vismCasXgcpInitialReXmitTime based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 10000),
    )


_VismCasXgcpInitialReXmitTime_Type.__name__ = "Integer32"
_VismCasXgcpInitialReXmitTime_Object = MibTableColumn
vismCasXgcpInitialReXmitTime = _VismCasXgcpInitialReXmitTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2, 1, 4),
    _VismCasXgcpInitialReXmitTime_Type()
)
vismCasXgcpInitialReXmitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCasXgcpInitialReXmitTime.setStatus("mandatory")


class _VismCasXgcpMaxRetries_Type(Integer32):
    """Custom type vismCasXgcpMaxRetries based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_VismCasXgcpMaxRetries_Type.__name__ = "Integer32"
_VismCasXgcpMaxRetries_Object = MibTableColumn
vismCasXgcpMaxRetries = _VismCasXgcpMaxRetries_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 8, 2, 1, 5),
    _VismCasXgcpMaxRetries_Type()
)
vismCasXgcpMaxRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCasXgcpMaxRetries.setStatus("mandatory")
_BearerConnGrp_ObjectIdentity = ObjectIdentity
bearerConnGrp = _BearerConnGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9)
)
_BearerConnTable_Object = MibTable
bearerConnTable = _BearerConnTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1)
)
if mibBuilder.loadTexts:
    bearerConnTable.setStatus("mandatory")
_BearerConnEntry_Object = MibTableRow
bearerConnEntry = _BearerConnEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1)
)
bearerConnEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "bearerEndptNum"),
)
if mibBuilder.loadTexts:
    bearerConnEntry.setStatus("mandatory")


class _BearerEndptNum_Type(Integer32):
    """Custom type bearerEndptNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_BearerEndptNum_Type.__name__ = "Integer32"
_BearerEndptNum_Object = MibTableColumn
bearerEndptNum = _BearerEndptNum_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 1),
    _BearerEndptNum_Type()
)
bearerEndptNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerEndptNum.setStatus("mandatory")
_BearerCid_Type = Integer32
_BearerCid_Object = MibTableColumn
bearerCid = _BearerCid_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 2),
    _BearerCid_Type()
)
bearerCid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerCid.setStatus("mandatory")


class _BearerLcn_Type(Integer32):
    """Custom type bearerLcn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(131, 510),
    )


_BearerLcn_Type.__name__ = "Integer32"
_BearerLcn_Object = MibTableColumn
bearerLcn = _BearerLcn_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 3),
    _BearerLcn_Type()
)
bearerLcn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerLcn.setStatus("mandatory")
_BearerSentPkts_Type = Counter32
_BearerSentPkts_Object = MibTableColumn
bearerSentPkts = _BearerSentPkts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 4),
    _BearerSentPkts_Type()
)
bearerSentPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerSentPkts.setStatus("mandatory")
_BearerRcvdPkts_Type = Counter32
_BearerRcvdPkts_Object = MibTableColumn
bearerRcvdPkts = _BearerRcvdPkts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 5),
    _BearerRcvdPkts_Type()
)
bearerRcvdPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerRcvdPkts.setStatus("mandatory")
_BearerSentOctets_Type = Counter32
_BearerSentOctets_Object = MibTableColumn
bearerSentOctets = _BearerSentOctets_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 6),
    _BearerSentOctets_Type()
)
bearerSentOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerSentOctets.setStatus("mandatory")
_BearerRcvdOctets_Type = Counter32
_BearerRcvdOctets_Object = MibTableColumn
bearerRcvdOctets = _BearerRcvdOctets_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 7),
    _BearerRcvdOctets_Type()
)
bearerRcvdOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerRcvdOctets.setStatus("mandatory")
_BearerLostPkts_Type = Counter32
_BearerLostPkts_Object = MibTableColumn
bearerLostPkts = _BearerLostPkts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 8),
    _BearerLostPkts_Type()
)
bearerLostPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerLostPkts.setStatus("mandatory")
_BearerJitter_Type = Integer32
_BearerJitter_Object = MibTableColumn
bearerJitter = _BearerJitter_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 9),
    _BearerJitter_Type()
)
bearerJitter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerJitter.setStatus("mandatory")
_BearerLatency_Type = Integer32
_BearerLatency_Object = MibTableColumn
bearerLatency = _BearerLatency_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 10),
    _BearerLatency_Type()
)
bearerLatency.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerLatency.setStatus("mandatory")
_BearerAal2ExtAISCnts_Type = Counter32
_BearerAal2ExtAISCnts_Object = MibTableColumn
bearerAal2ExtAISCnts = _BearerAal2ExtAISCnts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 11),
    _BearerAal2ExtAISCnts_Type()
)
bearerAal2ExtAISCnts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerAal2ExtAISCnts.setStatus("mandatory")
_BearerAal2ExtRAICnts_Type = Counter32
_BearerAal2ExtRAICnts_Object = MibTableColumn
bearerAal2ExtRAICnts = _BearerAal2ExtRAICnts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 12),
    _BearerAal2ExtRAICnts_Type()
)
bearerAal2ExtRAICnts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerAal2ExtRAICnts.setStatus("mandatory")
_BearerAal2ConnAISCnts_Type = Counter32
_BearerAal2ConnAISCnts_Object = MibTableColumn
bearerAal2ConnAISCnts = _BearerAal2ConnAISCnts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 13),
    _BearerAal2ConnAISCnts_Type()
)
bearerAal2ConnAISCnts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerAal2ConnAISCnts.setStatus("mandatory")
_BearerAal2ConnRDICnts_Type = Counter32
_BearerAal2ConnRDICnts_Object = MibTableColumn
bearerAal2ConnRDICnts = _BearerAal2ConnRDICnts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 14),
    _BearerAal2ConnRDICnts_Type()
)
bearerAal2ConnRDICnts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bearerAal2ConnRDICnts.setStatus("mandatory")


class _BearerCntClrButton_Type(Integer32):
    """Custom type bearerCntClrButton based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("noaction", 1))
    )


_BearerCntClrButton_Type.__name__ = "Integer32"
_BearerCntClrButton_Object = MibTableColumn
bearerCntClrButton = _BearerCntClrButton_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 9, 1, 1, 15),
    _BearerCntClrButton_Type()
)
bearerCntClrButton.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bearerCntClrButton.setStatus("mandatory")
_VismSvcGrp_ObjectIdentity = ObjectIdentity
vismSvcGrp = _VismSvcGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10)
)
_VismSvcTxSetups_Type = Counter32
_VismSvcTxSetups_Object = MibScalar
vismSvcTxSetups = _VismSvcTxSetups_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 1),
    _VismSvcTxSetups_Type()
)
vismSvcTxSetups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxSetups.setStatus("mandatory")
_VismSvcRxSetups_Type = Counter32
_VismSvcRxSetups_Object = MibScalar
vismSvcRxSetups = _VismSvcRxSetups_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 2),
    _VismSvcRxSetups_Type()
)
vismSvcRxSetups.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxSetups.setStatus("mandatory")
_VismSvcTxCallProcs_Type = Counter32
_VismSvcTxCallProcs_Object = MibScalar
vismSvcTxCallProcs = _VismSvcTxCallProcs_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 3),
    _VismSvcTxCallProcs_Type()
)
vismSvcTxCallProcs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxCallProcs.setStatus("mandatory")
_VismSvcRxCallProcs_Type = Counter32
_VismSvcRxCallProcs_Object = MibScalar
vismSvcRxCallProcs = _VismSvcRxCallProcs_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 4),
    _VismSvcRxCallProcs_Type()
)
vismSvcRxCallProcs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxCallProcs.setStatus("mandatory")
_VismSvcTxConns_Type = Counter32
_VismSvcTxConns_Object = MibScalar
vismSvcTxConns = _VismSvcTxConns_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 5),
    _VismSvcTxConns_Type()
)
vismSvcTxConns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxConns.setStatus("mandatory")
_VismSvcTxConnAcks_Type = Counter32
_VismSvcTxConnAcks_Object = MibScalar
vismSvcTxConnAcks = _VismSvcTxConnAcks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 6),
    _VismSvcTxConnAcks_Type()
)
vismSvcTxConnAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxConnAcks.setStatus("mandatory")
_VismSvcRxConns_Type = Counter32
_VismSvcRxConns_Object = MibScalar
vismSvcRxConns = _VismSvcRxConns_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 7),
    _VismSvcRxConns_Type()
)
vismSvcRxConns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxConns.setStatus("mandatory")
_VismSvcRxConnAcks_Type = Counter32
_VismSvcRxConnAcks_Object = MibScalar
vismSvcRxConnAcks = _VismSvcRxConnAcks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 8),
    _VismSvcRxConnAcks_Type()
)
vismSvcRxConnAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxConnAcks.setStatus("mandatory")
_VismSvcTxReleases_Type = Counter32
_VismSvcTxReleases_Object = MibScalar
vismSvcTxReleases = _VismSvcTxReleases_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 9),
    _VismSvcTxReleases_Type()
)
vismSvcTxReleases.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxReleases.setStatus("mandatory")
_VismSvcTxReleaseCompls_Type = Counter32
_VismSvcTxReleaseCompls_Object = MibScalar
vismSvcTxReleaseCompls = _VismSvcTxReleaseCompls_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 10),
    _VismSvcTxReleaseCompls_Type()
)
vismSvcTxReleaseCompls.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxReleaseCompls.setStatus("mandatory")
_VismSvcRxReleases_Type = Counter32
_VismSvcRxReleases_Object = MibScalar
vismSvcRxReleases = _VismSvcRxReleases_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 11),
    _VismSvcRxReleases_Type()
)
vismSvcRxReleases.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxReleases.setStatus("mandatory")
_VismSvcRxReleaseCompls_Type = Counter32
_VismSvcRxReleaseCompls_Object = MibScalar
vismSvcRxReleaseCompls = _VismSvcRxReleaseCompls_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 12),
    _VismSvcRxReleaseCompls_Type()
)
vismSvcRxReleaseCompls.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxReleaseCompls.setStatus("mandatory")
_VismSvcTxRestarts_Type = Counter32
_VismSvcTxRestarts_Object = MibScalar
vismSvcTxRestarts = _VismSvcTxRestarts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 13),
    _VismSvcTxRestarts_Type()
)
vismSvcTxRestarts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxRestarts.setStatus("mandatory")
_VismSvcTxRestartAcks_Type = Counter32
_VismSvcTxRestartAcks_Object = MibScalar
vismSvcTxRestartAcks = _VismSvcTxRestartAcks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 14),
    _VismSvcTxRestartAcks_Type()
)
vismSvcTxRestartAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxRestartAcks.setStatus("mandatory")
_VismSvcRxRestarts_Type = Counter32
_VismSvcRxRestarts_Object = MibScalar
vismSvcRxRestarts = _VismSvcRxRestarts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 15),
    _VismSvcRxRestarts_Type()
)
vismSvcRxRestarts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxRestarts.setStatus("mandatory")
_VismSvcRxRestartAcks_Type = Counter32
_VismSvcRxRestartAcks_Object = MibScalar
vismSvcRxRestartAcks = _VismSvcRxRestartAcks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 16),
    _VismSvcRxRestartAcks_Type()
)
vismSvcRxRestartAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxRestartAcks.setStatus("mandatory")
_VismSvcTxResyncStrts_Type = Counter32
_VismSvcTxResyncStrts_Object = MibScalar
vismSvcTxResyncStrts = _VismSvcTxResyncStrts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 17),
    _VismSvcTxResyncStrts_Type()
)
vismSvcTxResyncStrts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxResyncStrts.setStatus("mandatory")
_VismSvcTxResyncStrtAcks_Type = Counter32
_VismSvcTxResyncStrtAcks_Object = MibScalar
vismSvcTxResyncStrtAcks = _VismSvcTxResyncStrtAcks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 18),
    _VismSvcTxResyncStrtAcks_Type()
)
vismSvcTxResyncStrtAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxResyncStrtAcks.setStatus("mandatory")
_VismSvcRxResyncStrts_Type = Counter32
_VismSvcRxResyncStrts_Object = MibScalar
vismSvcRxResyncStrts = _VismSvcRxResyncStrts_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 19),
    _VismSvcRxResyncStrts_Type()
)
vismSvcRxResyncStrts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxResyncStrts.setStatus("mandatory")
_VismSvcRxResyncStrtAcks_Type = Counter32
_VismSvcRxResyncStrtAcks_Object = MibScalar
vismSvcRxResyncStrtAcks = _VismSvcRxResyncStrtAcks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 20),
    _VismSvcRxResyncStrtAcks_Type()
)
vismSvcRxResyncStrtAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxResyncStrtAcks.setStatus("mandatory")
_VismSvcTxResyncEnds_Type = Counter32
_VismSvcTxResyncEnds_Object = MibScalar
vismSvcTxResyncEnds = _VismSvcTxResyncEnds_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 21),
    _VismSvcTxResyncEnds_Type()
)
vismSvcTxResyncEnds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxResyncEnds.setStatus("mandatory")
_VismSvcTxResyncEndAcks_Type = Counter32
_VismSvcTxResyncEndAcks_Object = MibScalar
vismSvcTxResyncEndAcks = _VismSvcTxResyncEndAcks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 22),
    _VismSvcTxResyncEndAcks_Type()
)
vismSvcTxResyncEndAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxResyncEndAcks.setStatus("mandatory")
_VismSvcRxResyncEnds_Type = Counter32
_VismSvcRxResyncEnds_Object = MibScalar
vismSvcRxResyncEnds = _VismSvcRxResyncEnds_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 23),
    _VismSvcRxResyncEnds_Type()
)
vismSvcRxResyncEnds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxResyncEnds.setStatus("mandatory")
_VismSvcRxResyncEndAcks_Type = Counter32
_VismSvcRxResyncEndAcks_Object = MibScalar
vismSvcRxResyncEndAcks = _VismSvcRxResyncEndAcks_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 24),
    _VismSvcRxResyncEndAcks_Type()
)
vismSvcRxResyncEndAcks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxResyncEndAcks.setStatus("mandatory")
_VismSvcTxBulkResyncs_Type = Counter32
_VismSvcTxBulkResyncs_Object = MibScalar
vismSvcTxBulkResyncs = _VismSvcTxBulkResyncs_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 25),
    _VismSvcTxBulkResyncs_Type()
)
vismSvcTxBulkResyncs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcTxBulkResyncs.setStatus("mandatory")
_VismSvcRxBulkResyncs_Type = Counter32
_VismSvcRxBulkResyncs_Object = MibScalar
vismSvcRxBulkResyncs = _VismSvcRxBulkResyncs_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 26),
    _VismSvcRxBulkResyncs_Type()
)
vismSvcRxBulkResyncs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRxBulkResyncs.setStatus("mandatory")
_VismSvcCallProcExpiries_Type = Counter32
_VismSvcCallProcExpiries_Object = MibScalar
vismSvcCallProcExpiries = _VismSvcCallProcExpiries_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 27),
    _VismSvcCallProcExpiries_Type()
)
vismSvcCallProcExpiries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcCallProcExpiries.setStatus("mandatory")
_VismSvcReleasExpiries_Type = Counter32
_VismSvcReleasExpiries_Object = MibScalar
vismSvcReleasExpiries = _VismSvcReleasExpiries_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 28),
    _VismSvcReleasExpiries_Type()
)
vismSvcReleasExpiries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcReleasExpiries.setStatus("mandatory")
_VismSvcConnExpiries_Type = Counter32
_VismSvcConnExpiries_Object = MibScalar
vismSvcConnExpiries = _VismSvcConnExpiries_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 29),
    _VismSvcConnExpiries_Type()
)
vismSvcConnExpiries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcConnExpiries.setStatus("mandatory")
_VismSvcConnAckExpiries_Type = Counter32
_VismSvcConnAckExpiries_Object = MibScalar
vismSvcConnAckExpiries = _VismSvcConnAckExpiries_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 30),
    _VismSvcConnAckExpiries_Type()
)
vismSvcConnAckExpiries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcConnAckExpiries.setStatus("mandatory")
_VismSvcRestartExpiries_Type = Counter32
_VismSvcRestartExpiries_Object = MibScalar
vismSvcRestartExpiries = _VismSvcRestartExpiries_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 31),
    _VismSvcRestartExpiries_Type()
)
vismSvcRestartExpiries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcRestartExpiries.setStatus("mandatory")
_VismSvcResyncExpiries_Type = Counter32
_VismSvcResyncExpiries_Object = MibScalar
vismSvcResyncExpiries = _VismSvcResyncExpiries_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 10, 32),
    _VismSvcResyncExpiries_Type()
)
vismSvcResyncExpiries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismSvcResyncExpiries.setStatus("mandatory")
_VismCodecCnfGrp_ObjectIdentity = ObjectIdentity
vismCodecCnfGrp = _VismCodecCnfGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18)
)
_VismCodecCnfTable_Object = MibTable
vismCodecCnfTable = _VismCodecCnfTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1)
)
if mibBuilder.loadTexts:
    vismCodecCnfTable.setStatus("mandatory")
_VismCodecCnfEntry_Object = MibTableRow
vismCodecCnfEntry = _VismCodecCnfEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1)
)
vismCodecCnfEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "vismCodecCnfIndex"),
)
if mibBuilder.loadTexts:
    vismCodecCnfEntry.setStatus("mandatory")


class _VismCodecCnfIndex_Type(Integer32):
    """Custom type vismCodecCnfIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("clearChannel", 6),
          ("g711a", 2),
          ("g711u", 1),
          ("g723ah", 12),
          ("g723al", 14),
          ("g723h", 11),
          ("g723l", 13),
          ("g726r16000", 7),
          ("g726r24000", 8),
          ("g726r32000", 3),
          ("g726r40000", 9),
          ("g729a", 4),
          ("g729ab", 5))
    )


_VismCodecCnfIndex_Type.__name__ = "Integer32"
_VismCodecCnfIndex_Object = MibTableColumn
vismCodecCnfIndex = _VismCodecCnfIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1, 1),
    _VismCodecCnfIndex_Type()
)
vismCodecCnfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismCodecCnfIndex.setStatus("mandatory")


class _VismCodecName_Type(DisplayString):
    """Custom type vismCodecName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_VismCodecName_Type.__name__ = "DisplayString"
_VismCodecName_Object = MibTableColumn
vismCodecName = _VismCodecName_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1, 2),
    _VismCodecName_Type()
)
vismCodecName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismCodecName.setStatus("mandatory")


class _VismCodecPktPeriod_Type(Integer32):
    """Custom type vismCodecPktPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(10,
              20,
              30,
              40,
              60)
        )
    )
    namedValues = NamedValues(
        *(("fourty", 40),
          ("sixty", 60),
          ("ten", 10),
          ("thirty", 30),
          ("twenty", 20))
    )


_VismCodecPktPeriod_Type.__name__ = "Integer32"
_VismCodecPktPeriod_Object = MibTableColumn
vismCodecPktPeriod = _VismCodecPktPeriod_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1, 3),
    _VismCodecPktPeriod_Type()
)
vismCodecPktPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCodecPktPeriod.setStatus("mandatory")


class _VismCodecPreference_Type(Integer32):
    """Custom type vismCodecPreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VismCodecPreference_Type.__name__ = "Integer32"
_VismCodecPreference_Object = MibTableColumn
vismCodecPreference = _VismCodecPreference_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1, 4),
    _VismCodecPreference_Type()
)
vismCodecPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCodecPreference.setStatus("mandatory")


class _VismCodecString_Type(DisplayString):
    """Custom type vismCodecString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_VismCodecString_Type.__name__ = "DisplayString"
_VismCodecString_Object = MibTableColumn
vismCodecString = _VismCodecString_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1, 5),
    _VismCodecString_Type()
)
vismCodecString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCodecString.setStatus("mandatory")


class _VismCodecIanaType_Type(Integer32):
    """Custom type vismCodecIanaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 96),
    )


_VismCodecIanaType_Type.__name__ = "Integer32"
_VismCodecIanaType_Object = MibTableColumn
vismCodecIanaType = _VismCodecIanaType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 18, 1, 1, 6),
    _VismCodecIanaType_Type()
)
vismCodecIanaType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismCodecIanaType.setStatus("mandatory")
_VismSvcCnfGroups_ObjectIdentity = ObjectIdentity
vismSvcCnfGroups = _VismSvcCnfGroups_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19)
)
_VismSvcAtmQosGrp_ObjectIdentity = ObjectIdentity
vismSvcAtmQosGrp = _VismSvcAtmQosGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1)
)


class _VismSvcAtmQosCdv_Type(Integer32):
    """Custom type vismSvcAtmQosCdv based on Integer32"""
    defaultValue = 20000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(500, 20000),
    )


_VismSvcAtmQosCdv_Type.__name__ = "Integer32"
_VismSvcAtmQosCdv_Object = MibScalar
vismSvcAtmQosCdv = _VismSvcAtmQosCdv_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1, 1),
    _VismSvcAtmQosCdv_Type()
)
vismSvcAtmQosCdv.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismSvcAtmQosCdv.setStatus("mandatory")


class _VismSvcAtmQosCtd_Type(Integer32):
    """Custom type vismSvcAtmQosCtd based on Integer32"""
    defaultValue = 150000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(20000, 150000),
    )


_VismSvcAtmQosCtd_Type.__name__ = "Integer32"
_VismSvcAtmQosCtd_Object = MibScalar
vismSvcAtmQosCtd = _VismSvcAtmQosCtd_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1, 2),
    _VismSvcAtmQosCtd_Type()
)
vismSvcAtmQosCtd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismSvcAtmQosCtd.setStatus("mandatory")


class _VismSvcAtmQosClr_Type(Integer32):
    """Custom type vismSvcAtmQosClr based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 8),
    )


_VismSvcAtmQosClr_Type.__name__ = "Integer32"
_VismSvcAtmQosClr_Object = MibScalar
vismSvcAtmQosClr = _VismSvcAtmQosClr_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 1, 3),
    _VismSvcAtmQosClr_Type()
)
vismSvcAtmQosClr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismSvcAtmQosClr.setStatus("mandatory")
_VismSvcTrfScalingGrp_ObjectIdentity = ObjectIdentity
vismSvcTrfScalingGrp = _VismSvcTrfScalingGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 2)
)


class _VismSvcTrfScalingFactor_Type(Integer32):
    """Custom type vismSvcTrfScalingFactor based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(50, 200),
    )


_VismSvcTrfScalingFactor_Type.__name__ = "Integer32"
_VismSvcTrfScalingFactor_Object = MibScalar
vismSvcTrfScalingFactor = _VismSvcTrfScalingFactor_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 2, 1),
    _VismSvcTrfScalingFactor_Type()
)
vismSvcTrfScalingFactor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismSvcTrfScalingFactor.setStatus("mandatory")
_VismSvcAal2CidGrp_ObjectIdentity = ObjectIdentity
vismSvcAal2CidGrp = _VismSvcAal2CidGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 3)
)


class _VismSvcAal2CidNumber_Type(Integer32):
    """Custom type vismSvcAal2CidNumber based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(8, 255),
    )


_VismSvcAal2CidNumber_Type.__name__ = "Integer32"
_VismSvcAal2CidNumber_Object = MibScalar
vismSvcAal2CidNumber = _VismSvcAal2CidNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 19, 3, 1),
    _VismSvcAal2CidNumber_Type()
)
vismSvcAal2CidNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vismSvcAal2CidNumber.setStatus("mandatory")
_VismCardCacFailuresGrp_ObjectIdentity = ObjectIdentity
vismCardCacFailuresGrp = _VismCardCacFailuresGrp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 20)
)
_VismPortCacPvcAddFailures_Type = Counter32
_VismPortCacPvcAddFailures_Object = MibScalar
vismPortCacPvcAddFailures = _VismPortCacPvcAddFailures_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 20, 1),
    _VismPortCacPvcAddFailures_Type()
)
vismPortCacPvcAddFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismPortCacPvcAddFailures.setStatus("mandatory")
_VismPortCacSvcAddFailures_Type = Counter32
_VismPortCacSvcAddFailures_Object = MibScalar
vismPortCacSvcAddFailures = _VismPortCacSvcAddFailures_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 20, 2),
    _VismPortCacSvcAddFailures_Type()
)
vismPortCacSvcAddFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismPortCacSvcAddFailures.setStatus("mandatory")
_VismVcCacPvcFailures_Type = Counter32
_VismVcCacPvcFailures_Object = MibScalar
vismVcCacPvcFailures = _VismVcCacPvcFailures_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 20, 3),
    _VismVcCacPvcFailures_Type()
)
vismVcCacPvcFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismVcCacPvcFailures.setStatus("mandatory")
_VismVcCacPvcUpspeedFailures_Type = Counter32
_VismVcCacPvcUpspeedFailures_Object = MibScalar
vismVcCacPvcUpspeedFailures = _VismVcCacPvcUpspeedFailures_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 20, 4),
    _VismVcCacPvcUpspeedFailures_Type()
)
vismVcCacPvcUpspeedFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismVcCacPvcUpspeedFailures.setStatus("mandatory")
_VismPortCacSvcUpspeedFailures_Type = Counter32
_VismPortCacSvcUpspeedFailures_Object = MibScalar
vismPortCacSvcUpspeedFailures = _VismPortCacSvcUpspeedFailures_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 20, 5),
    _VismPortCacSvcUpspeedFailures_Type()
)
vismPortCacSvcUpspeedFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vismPortCacSvcUpspeedFailures.setStatus("mandatory")
_Bert_ObjectIdentity = ObjectIdentity
bert = _Bert_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1)
)


class _BertControl_Type(Integer32):
    """Custom type bertControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("acquireBert", 1),
          ("cnfBert", 3),
          ("delBert", 6),
          ("modBert", 5),
          ("releaseBert", 2),
          ("startBert", 4))
    )


_BertControl_Type.__name__ = "Integer32"
_BertControl_Object = MibScalar
bertControl = _BertControl_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 1),
    _BertControl_Type()
)
bertControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bertControl.setStatus("mandatory")


class _BertResourceStatus_Type(Integer32):
    """Custom type bertResourceStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("cleanupPending", 3),
          ("free", 1),
          ("inUse", 2))
    )


_BertResourceStatus_Type.__name__ = "Integer32"
_BertResourceStatus_Object = MibScalar
bertResourceStatus = _BertResourceStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 2),
    _BertResourceStatus_Type()
)
bertResourceStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertResourceStatus.setStatus("mandatory")
_BertOwner_Type = DisplayString
_BertOwner_Object = MibScalar
bertOwner = _BertOwner_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 3),
    _BertOwner_Type()
)
bertOwner.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertOwner.setStatus("mandatory")
_BertUserId_Type = DisplayString
_BertUserId_Object = MibScalar
bertUserId = _BertUserId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 4),
    _BertUserId_Type()
)
bertUserId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bertUserId.setStatus("mandatory")


class _BertStatus_Type(Integer32):
    """Custom type bertStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("bertFailed", 10),
          ("bertInSync", 2),
          ("bertOutOfSync", 3),
          ("facilityInLoop", 6),
          ("farEndInLoop", 5),
          ("inactive", 1),
          ("metallicInLoop", 9),
          ("portFacilityFifoFault", 7),
          ("portFacilityFifoOutOfSync", 8),
          ("searchingDDSCommands", 4))
    )


_BertStatus_Type.__name__ = "Integer32"
_BertStatus_Object = MibScalar
bertStatus = _BertStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 5),
    _BertStatus_Type()
)
bertStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertStatus.setStatus("mandatory")


class _BertSlotNumber_Type(Integer32):
    """Custom type bertSlotNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_BertSlotNumber_Type.__name__ = "Integer32"
_BertSlotNumber_Object = MibScalar
bertSlotNumber = _BertSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 6),
    _BertSlotNumber_Type()
)
bertSlotNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bertSlotNumber.setStatus("mandatory")


class _BertTestMedium_Type(Integer32):
    """Custom type bertTestMedium based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("line", 2),
          ("port", 1))
    )


_BertTestMedium_Type.__name__ = "Integer32"
_BertTestMedium_Object = MibScalar
bertTestMedium = _BertTestMedium_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 7),
    _BertTestMedium_Type()
)
bertTestMedium.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bertTestMedium.setStatus("mandatory")
_BertPort_Type = Integer32
_BertPort_Object = MibScalar
bertPort = _BertPort_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 8),
    _BertPort_Type()
)
bertPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bertPort.setStatus("mandatory")
_BertLine_Type = Integer32
_BertLine_Object = MibScalar
bertLine = _BertLine_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 9),
    _BertLine_Type()
)
bertLine.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bertLine.setStatus("mandatory")


class _BertMode_Type(Integer32):
    """Custom type bertMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bertPatternTest", 1),
          ("ddsSeek", 2),
          ("loopback", 3))
    )


_BertMode_Type.__name__ = "Integer32"
_BertMode_Object = MibScalar
bertMode = _BertMode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 10),
    _BertMode_Type()
)
bertMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bertMode.setStatus("mandatory")


class _BertDeviceToLoop_Type(Integer32):
    """Custom type bertDeviceToLoop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("esf", 13),
          ("inband", 12),
          ("latchCSU", 8),
          ("latchDS0Drop", 5),
          ("latchDS0Line", 6),
          ("latchDSU", 9),
          ("latchHL96", 10),
          ("latchOCU", 7),
          ("metallic", 14),
          ("noDevice", 15),
          ("noLatchCSU", 3),
          ("noLatchDSU", 4),
          ("noLatchOCUwith1", 1),
          ("noLatchOCUwitout1", 2),
          ("smartJackInband", 16),
          ("v54Polynomial", 11))
    )


_BertDeviceToLoop_Type.__name__ = "Integer32"
_BertDeviceToLoop_Object = MibScalar
bertDeviceToLoop = _BertDeviceToLoop_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 11),
    _BertDeviceToLoop_Type()
)
bertDeviceToLoop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bertDeviceToLoop.setStatus("mandatory")


class _BertDS0DPIterationCount_Type(Integer32):
    """Custom type bertDS0DPIterationCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_BertDS0DPIterationCount_Type.__name__ = "Integer32"
_BertDS0DPIterationCount_Object = MibScalar
bertDS0DPIterationCount = _BertDS0DPIterationCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 12),
    _BertDS0DPIterationCount_Type()
)
bertDS0DPIterationCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bertDS0DPIterationCount.setStatus("mandatory")


class _BertPattern_Type(Integer32):
    """Custom type bertPattern based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("allOnes", 2),
          ("allZeros", 1),
          ("alternateONeZero", 3),
          ("dds-1", 11),
          ("dds-2", 12),
          ("dds-3", 13),
          ("dds-4", 14),
          ("dds-5", 15),
          ("doubleOneZero", 4),
          ("elevenBit", 17),
          ("fifteenBit", 5),
          ("nineBit", 16),
          ("oneInEight", 9),
          ("threeIntwentyfour", 10),
          ("twentyBit", 6),
          ("twentyBitQRSS", 7),
          ("twentythreeBit", 8))
    )


_BertPattern_Type.__name__ = "Integer32"
_BertPattern_Object = MibScalar
bertPattern = _BertPattern_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 13),
    _BertPattern_Type()
)
bertPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bertPattern.setStatus("mandatory")


class _BertLoopback_Type(Integer32):
    """Custom type bertLoopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("facilityLoopback", 2),
          ("farEndLoopback", 1),
          ("metallicLoopback", 3))
    )


_BertLoopback_Type.__name__ = "Integer32"
_BertLoopback_Object = MibScalar
bertLoopback = _BertLoopback_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 14),
    _BertLoopback_Type()
)
bertLoopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bertLoopback.setStatus("mandatory")


class _BertLoopbackOperation_Type(Integer32):
    """Custom type bertLoopbackOperation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("loopDown", 2),
          ("loopUp", 1))
    )


_BertLoopbackOperation_Type.__name__ = "Integer32"
_BertLoopbackOperation_Object = MibScalar
bertLoopbackOperation = _BertLoopbackOperation_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 15),
    _BertLoopbackOperation_Type()
)
bertLoopbackOperation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    bertLoopbackOperation.setStatus("mandatory")


class _BertDS0Speed_Type(Integer32):
    """Custom type bertDS0Speed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("speed56k", 1),
          ("speed64k", 2))
    )


_BertDS0Speed_Type.__name__ = "Integer32"
_BertDS0Speed_Object = MibScalar
bertDS0Speed = _BertDS0Speed_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 16),
    _BertDS0Speed_Type()
)
bertDS0Speed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertDS0Speed.setStatus("mandatory")
_BertTimeSlots_Type = Integer32
_BertTimeSlots_Object = MibScalar
bertTimeSlots = _BertTimeSlots_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 17),
    _BertTimeSlots_Type()
)
bertTimeSlots.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertTimeSlots.setStatus("mandatory")


class _BertStartTime_Type(DisplayString):
    """Custom type bertStartTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_BertStartTime_Type.__name__ = "DisplayString"
_BertStartTime_Object = MibScalar
bertStartTime = _BertStartTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 18),
    _BertStartTime_Type()
)
bertStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertStartTime.setStatus("mandatory")


class _BertStartDate_Type(DisplayString):
    """Custom type bertStartDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(10, 10),
    )


_BertStartDate_Type.__name__ = "DisplayString"
_BertStartDate_Object = MibScalar
bertStartDate = _BertStartDate_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 19),
    _BertStartDate_Type()
)
bertStartDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertStartDate.setStatus("mandatory")
_BertBitCount_Type = Integer32
_BertBitCount_Object = MibScalar
bertBitCount = _BertBitCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 20),
    _BertBitCount_Type()
)
bertBitCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertBitCount.setStatus("mandatory")
_BertBitErrorCount_Type = Integer32
_BertBitErrorCount_Object = MibScalar
bertBitErrorCount = _BertBitErrorCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 21),
    _BertBitErrorCount_Type()
)
bertBitErrorCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertBitErrorCount.setStatus("mandatory")
_BertErrorInjectCount_Type = Integer32
_BertErrorInjectCount_Object = MibScalar
bertErrorInjectCount = _BertErrorInjectCount_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 22),
    _BertErrorInjectCount_Type()
)
bertErrorInjectCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertErrorInjectCount.setStatus("mandatory")


class _BertCleanupAction_Type(Integer32):
    """Custom type bertCleanupAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("esfLoopdown", 11),
          ("facilityLoopdown", 12),
          ("inbandLoopdown", 10),
          ("latchCSULoopdown", 6),
          ("latchDS0DropLoopdown", 3),
          ("latchDS0LineLoopdown", 4),
          ("latchDSULoopdown", 7),
          ("latchHL96Loopdown", 8),
          ("latchOCULoopdown", 5),
          ("metallicLoopdown", 13),
          ("noAction", 1),
          ("smCleanup", 2),
          ("smartJackInbandLoopdown", 14),
          ("v54PolynomialLoopdown", 9))
    )


_BertCleanupAction_Type.__name__ = "Integer32"
_BertCleanupAction_Object = MibScalar
bertCleanupAction = _BertCleanupAction_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 23),
    _BertCleanupAction_Type()
)
bertCleanupAction.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertCleanupAction.setStatus("mandatory")


class _BertAbortReason_Type(Integer32):
    """Custom type bertAbortReason based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ascStateChange", 1),
          ("coreCardSwitch", 4),
          ("smRedundancySwitch", 5),
          ("smStateChange", 2),
          ("srmStateChange", 3))
    )


_BertAbortReason_Type.__name__ = "Integer32"
_BertAbortReason_Object = MibScalar
bertAbortReason = _BertAbortReason_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 24),
    _BertAbortReason_Type()
)
bertAbortReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertAbortReason.setStatus("mandatory")


class _BertDDSSeekResultsTableFirstIndex_Type(Integer32):
    """Custom type bertDDSSeekResultsTableFirstIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_BertDDSSeekResultsTableFirstIndex_Type.__name__ = "Integer32"
_BertDDSSeekResultsTableFirstIndex_Object = MibScalar
bertDDSSeekResultsTableFirstIndex = _BertDDSSeekResultsTableFirstIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 25),
    _BertDDSSeekResultsTableFirstIndex_Type()
)
bertDDSSeekResultsTableFirstIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertDDSSeekResultsTableFirstIndex.setStatus("mandatory")


class _BertDDSSeekResultsTableLastIndex_Type(Integer32):
    """Custom type bertDDSSeekResultsTableLastIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_BertDDSSeekResultsTableLastIndex_Type.__name__ = "Integer32"
_BertDDSSeekResultsTableLastIndex_Object = MibScalar
bertDDSSeekResultsTableLastIndex = _BertDDSSeekResultsTableLastIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 26),
    _BertDDSSeekResultsTableLastIndex_Type()
)
bertDDSSeekResultsTableLastIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertDDSSeekResultsTableLastIndex.setStatus("mandatory")
_BertDDSSeekResultsTable_Object = MibTable
bertDDSSeekResultsTable = _BertDDSSeekResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 27)
)
if mibBuilder.loadTexts:
    bertDDSSeekResultsTable.setStatus("mandatory")
_BertDDSSeekResultsTableEntry_Object = MibTableRow
bertDDSSeekResultsTableEntry = _BertDDSSeekResultsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 27, 1)
)
bertDDSSeekResultsTableEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "bertDDSSeekResultsTableIndex"),
)
if mibBuilder.loadTexts:
    bertDDSSeekResultsTableEntry.setStatus("mandatory")


class _BertDDSSeekResultsTableIndex_Type(Integer32):
    """Custom type bertDDSSeekResultsTableIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_BertDDSSeekResultsTableIndex_Type.__name__ = "Integer32"
_BertDDSSeekResultsTableIndex_Object = MibTableColumn
bertDDSSeekResultsTableIndex = _BertDDSSeekResultsTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 27, 1, 1),
    _BertDDSSeekResultsTableIndex_Type()
)
bertDDSSeekResultsTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertDDSSeekResultsTableIndex.setStatus("mandatory")


class _BertDDSCode_Type(Integer32):
    """Custom type bertDDSCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(10,
              24,
              26,
              28,
              30,
              40,
              42,
              44,
              50,
              58,
              86,
              90,
              108,
              114,
              120,
              126)
        )
    )
    namedValues = NamedValues(
        *(("abnormalStationCondition", 30),
          ("block", 10),
          ("channelLoopback", 40),
          ("dsuLoopback", 44),
          ("farEndVoice", 90),
          ("idle", 126),
          ("loopbackEnable", 86),
          ("mjuAlert", 114),
          ("muxOutOfSync", 26),
          ("ocuLoopback", 42),
          ("release", 120),
          ("test", 28),
          ("testAlert", 108),
          ("transitionInProgress", 58),
          ("unassignedMuxChannel", 24),
          ("unnamed", 50))
    )


_BertDDSCode_Type.__name__ = "Integer32"
_BertDDSCode_Object = MibTableColumn
bertDDSCode = _BertDDSCode_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 27, 1, 2),
    _BertDDSCode_Type()
)
bertDDSCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertDDSCode.setStatus("mandatory")
_BertSupportedTestsTable_Object = MibTable
bertSupportedTestsTable = _BertSupportedTestsTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28)
)
if mibBuilder.loadTexts:
    bertSupportedTestsTable.setStatus("mandatory")
_BertSupportedTestsTableEntry_Object = MibTableRow
bertSupportedTestsTableEntry = _BertSupportedTestsTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1)
)
bertSupportedTestsTableEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "bertSupportedTestsTableIndex"),
)
if mibBuilder.loadTexts:
    bertSupportedTestsTableEntry.setStatus("mandatory")


class _BertSupportedTestsTableIndex_Type(Integer32):
    """Custom type bertSupportedTestsTableIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_BertSupportedTestsTableIndex_Type.__name__ = "Integer32"
_BertSupportedTestsTableIndex_Object = MibTableColumn
bertSupportedTestsTableIndex = _BertSupportedTestsTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 1),
    _BertSupportedTestsTableIndex_Type()
)
bertSupportedTestsTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertSupportedTestsTableIndex.setStatus("mandatory")


class _BertSupportFlag_Type(Integer32):
    """Custom type bertSupportFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_BertSupportFlag_Type.__name__ = "Integer32"
_BertSupportFlag_Object = MibTableColumn
bertSupportFlag = _BertSupportFlag_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 2),
    _BertSupportFlag_Type()
)
bertSupportFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertSupportFlag.setStatus("mandatory")
_BertTestMediumMask_Type = Integer32
_BertTestMediumMask_Object = MibTableColumn
bertTestMediumMask = _BertTestMediumMask_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 3),
    _BertTestMediumMask_Type()
)
bertTestMediumMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertTestMediumMask.setStatus("mandatory")
_BertModeMask_Type = Integer32
_BertModeMask_Object = MibTableColumn
bertModeMask = _BertModeMask_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 4),
    _BertModeMask_Type()
)
bertModeMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertModeMask.setStatus("mandatory")
_BertDeviceToLoopMask_Type = Integer32
_BertDeviceToLoopMask_Object = MibTableColumn
bertDeviceToLoopMask = _BertDeviceToLoopMask_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 5),
    _BertDeviceToLoopMask_Type()
)
bertDeviceToLoopMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertDeviceToLoopMask.setStatus("mandatory")
_BertPatternMask_Type = Integer32
_BertPatternMask_Object = MibTableColumn
bertPatternMask = _BertPatternMask_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 6),
    _BertPatternMask_Type()
)
bertPatternMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertPatternMask.setStatus("mandatory")
_BertLoopbackMask_Type = Integer32
_BertLoopbackMask_Object = MibTableColumn
bertLoopbackMask = _BertLoopbackMask_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 7),
    _BertLoopbackMask_Type()
)
bertLoopbackMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertLoopbackMask.setStatus("mandatory")


class _BertCardT1E1Type_Type(Integer32):
    """Custom type bertCardT1E1Type based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("e1", 2),
          ("t1", 1))
    )


_BertCardT1E1Type_Type.__name__ = "Integer32"
_BertCardT1E1Type_Object = MibTableColumn
bertCardT1E1Type = _BertCardT1E1Type_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 1, 28, 1, 8),
    _BertCardT1E1Type_Type()
)
bertCardT1E1Type.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bertCardT1E1Type.setStatus("mandatory")
_OnlineDiagnostics_ObjectIdentity = ObjectIdentity
onlineDiagnostics = _OnlineDiagnostics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 3)
)


class _DiagType_Type(Integer32):
    """Custom type diagType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("onlinediag", 2),
          ("post", 1))
    )


_DiagType_Type.__name__ = "Integer32"
_DiagType_Object = MibScalar
diagType = _DiagType_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 3, 1),
    _DiagType_Type()
)
diagType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    diagType.setStatus("mandatory")


class _DiagResult_Type(Integer32):
    """Custom type diagResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("passed", 1))
    )


_DiagResult_Type.__name__ = "Integer32"
_DiagResult_Object = MibScalar
diagResult = _DiagResult_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 3, 2),
    _DiagResult_Type()
)
diagResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    diagResult.setStatus("mandatory")
_DiagTestId_Type = Integer32
_DiagTestId_Object = MibScalar
diagTestId = _DiagTestId_Object(
    (1, 3, 6, 1, 4, 1, 351, 110, 6, 3, 3),
    _DiagTestId_Type()
)
diagTestId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    diagTestId.setStatus("mandatory")
_ParSelfNode_ObjectIdentity = ObjectIdentity
parSelfNode = _ParSelfNode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 130, 1)
)


class _ParSnNodeId_Type(Integer32):
    """Custom type parSnNodeId based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 223),
    )


_ParSnNodeId_Type.__name__ = "Integer32"
_ParSnNodeId_Object = MibScalar
parSnNodeId = _ParSnNodeId_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 1, 1),
    _ParSnNodeId_Type()
)
parSnNodeId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parSnNodeId.setStatus("mandatory")
_ParSnNodeIP_Type = IpAddress
_ParSnNodeIP_Object = MibScalar
parSnNodeIP = _ParSnNodeIP_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 1, 2),
    _ParSnNodeIP_Type()
)
parSnNodeIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parSnNodeIP.setStatus("mandatory")


class _ParSnNodeName_Type(DisplayString):
    """Custom type parSnNodeName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_ParSnNodeName_Type.__name__ = "DisplayString"
_ParSnNodeName_Object = MibScalar
parSnNodeName = _ParSnNodeName_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 1, 3),
    _ParSnNodeName_Type()
)
parSnNodeName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parSnNodeName.setStatus("mandatory")
_ParSnRevision_Type = DisplayString
_ParSnRevision_Object = MibScalar
parSnRevision = _ParSnRevision_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 1, 4),
    _ParSnRevision_Type()
)
parSnRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSnRevision.setStatus("mandatory")


class _ParSnNodeAlarmStatus_Type(Integer32):
    """Custom type parSnNodeAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("major", 3),
          ("minor", 2),
          ("unreach", 4))
    )


_ParSnNodeAlarmStatus_Type.__name__ = "Integer32"
_ParSnNodeAlarmStatus_Object = MibScalar
parSnNodeAlarmStatus = _ParSnNodeAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 1, 5),
    _ParSnNodeAlarmStatus_Type()
)
parSnNodeAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSnNodeAlarmStatus.setStatus("mandatory")


class _ParSnNumberOfTrunks_Type(Integer32):
    """Custom type parSnNumberOfTrunks based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_ParSnNumberOfTrunks_Type.__name__ = "Integer32"
_ParSnNumberOfTrunks_Object = MibScalar
parSnNumberOfTrunks = _ParSnNumberOfTrunks_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 1, 6),
    _ParSnNumberOfTrunks_Type()
)
parSnNumberOfTrunks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSnNumberOfTrunks.setStatus("mandatory")
_ParInterfaces_ObjectIdentity = ObjectIdentity
parInterfaces = _ParInterfaces_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 130, 2)
)
_ParIfTable_Object = MibTable
parIfTable = _ParIfTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 1)
)
if mibBuilder.loadTexts:
    parIfTable.setStatus("mandatory")
_ParIfEntry_Object = MibTableRow
parIfEntry = _ParIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1)
)
parIfEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "parIfLogicalInterface"),
)
if mibBuilder.loadTexts:
    parIfEntry.setStatus("mandatory")
_ParIfLogicalInterface_Type = Integer32
_ParIfLogicalInterface_Object = MibTableColumn
parIfLogicalInterface = _ParIfLogicalInterface_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 1),
    _ParIfLogicalInterface_Type()
)
parIfLogicalInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parIfLogicalInterface.setStatus("mandatory")


class _ParIfType_Type(Integer32):
    """Custom type parIfType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("clkport", 4),
          ("feedertrunk", 3),
          ("routingtrunk", 2),
          ("userport", 1),
          ("virtualtrunk", 5))
    )


_ParIfType_Type.__name__ = "Integer32"
_ParIfType_Object = MibTableColumn
parIfType = _ParIfType_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 2),
    _ParIfType_Type()
)
parIfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parIfType.setStatus("mandatory")


class _ParIfOperStatus_Type(Integer32):
    """Custom type parIfOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("added", 2),
          ("added-failed", 4),
          ("failed", 3),
          ("up", 1))
    )


_ParIfOperStatus_Type.__name__ = "Integer32"
_ParIfOperStatus_Object = MibTableColumn
parIfOperStatus = _ParIfOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 3),
    _ParIfOperStatus_Type()
)
parIfOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parIfOperStatus.setStatus("mandatory")
_ParIfTxBw_Type = Integer32
_ParIfTxBw_Object = MibTableColumn
parIfTxBw = _ParIfTxBw_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 4),
    _ParIfTxBw_Type()
)
parIfTxBw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parIfTxBw.setStatus("mandatory")
_ParIfRxBw_Type = Integer32
_ParIfRxBw_Object = MibTableColumn
parIfRxBw = _ParIfRxBw_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 5),
    _ParIfRxBw_Type()
)
parIfRxBw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parIfRxBw.setStatus("mandatory")
_ParIfMaxConn_Type = Integer32
_ParIfMaxConn_Object = MibTableColumn
parIfMaxConn = _ParIfMaxConn_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 6),
    _ParIfMaxConn_Type()
)
parIfMaxConn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parIfMaxConn.setStatus("mandatory")
_ParIfHiAddrMin_Type = Integer32
_ParIfHiAddrMin_Object = MibTableColumn
parIfHiAddrMin = _ParIfHiAddrMin_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 7),
    _ParIfHiAddrMin_Type()
)
parIfHiAddrMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parIfHiAddrMin.setStatus("mandatory")
_ParIfHiAddrMax_Type = Integer32
_ParIfHiAddrMax_Object = MibTableColumn
parIfHiAddrMax = _ParIfHiAddrMax_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 8),
    _ParIfHiAddrMax_Type()
)
parIfHiAddrMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parIfHiAddrMax.setStatus("mandatory")
_ParIfLoAddrMin_Type = Integer32
_ParIfLoAddrMin_Object = MibTableColumn
parIfLoAddrMin = _ParIfLoAddrMin_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 9),
    _ParIfLoAddrMin_Type()
)
parIfLoAddrMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parIfLoAddrMin.setStatus("mandatory")
_ParIfLoAddrMax_Type = Integer32
_ParIfLoAddrMax_Object = MibTableColumn
parIfLoAddrMax = _ParIfLoAddrMax_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 1, 1, 10),
    _ParIfLoAddrMax_Type()
)
parIfLoAddrMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parIfLoAddrMax.setStatus("mandatory")
_ParTrkTable_Object = MibTable
parTrkTable = _ParTrkTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2)
)
if mibBuilder.loadTexts:
    parTrkTable.setStatus("mandatory")
_ParTrkEntry_Object = MibTableRow
parTrkEntry = _ParTrkEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1)
)
parTrkEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "parIfLogicalInterface"),
)
if mibBuilder.loadTexts:
    parTrkEntry.setStatus("mandatory")
_ParTrkId_Type = Integer32
_ParTrkId_Object = MibTableColumn
parTrkId = _ParTrkId_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 1),
    _ParTrkId_Type()
)
parTrkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkId.setStatus("mandatory")


class _ParTrkStatReserve_Type(Integer32):
    """Custom type parTrkStatReserve based on Integer32"""
    defaultValue = 1000


_ParTrkStatReserve_Object = MibTableColumn
parTrkStatReserve = _ParTrkStatReserve_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 2),
    _ParTrkStatReserve_Type()
)
parTrkStatReserve.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkStatReserve.setStatus("mandatory")


class _ParTrkCnfgCcRestrict_Type(TruthValue):
    """Custom type parTrkCnfgCcRestrict based on TruthValue"""


_ParTrkCnfgCcRestrict_Object = MibTableColumn
parTrkCnfgCcRestrict = _ParTrkCnfgCcRestrict_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 3),
    _ParTrkCnfgCcRestrict_Type()
)
parTrkCnfgCcRestrict.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgCcRestrict.setStatus("mandatory")


class _ParTrkCnfgLineType_Type(Integer32):
    """Custom type parTrkCnfgLineType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("satellite", 2),
          ("terrestrial", 1))
    )


_ParTrkCnfgLineType_Type.__name__ = "Integer32"
_ParTrkCnfgLineType_Object = MibTableColumn
parTrkCnfgLineType = _ParTrkCnfgLineType_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 4),
    _ParTrkCnfgLineType_Type()
)
parTrkCnfgLineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgLineType.setStatus("mandatory")


class _ParTrkCnfgPassSync_Type(TruthValue):
    """Custom type parTrkCnfgPassSync based on TruthValue"""


_ParTrkCnfgPassSync_Object = MibTableColumn
parTrkCnfgPassSync = _ParTrkCnfgPassSync_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 5),
    _ParTrkCnfgPassSync_Type()
)
parTrkCnfgPassSync.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgPassSync.setStatus("mandatory")


class _ParTrkCnfgDerouteDelay_Type(Integer32):
    """Custom type parTrkCnfgDerouteDelay based on Integer32"""
    defaultValue = 0


_ParTrkCnfgDerouteDelay_Object = MibTableColumn
parTrkCnfgDerouteDelay = _ParTrkCnfgDerouteDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 6),
    _ParTrkCnfgDerouteDelay_Type()
)
parTrkCnfgDerouteDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgDerouteDelay.setStatus("mandatory")


class _ParTrkCnfgTrafficClassFst_Type(TruthValue):
    """Custom type parTrkCnfgTrafficClassFst based on TruthValue"""


_ParTrkCnfgTrafficClassFst_Object = MibTableColumn
parTrkCnfgTrafficClassFst = _ParTrkCnfgTrafficClassFst_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 7),
    _ParTrkCnfgTrafficClassFst_Type()
)
parTrkCnfgTrafficClassFst.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgTrafficClassFst.setStatus("mandatory")


class _ParTrkCnfgTrafficClassFr_Type(TruthValue):
    """Custom type parTrkCnfgTrafficClassFr based on TruthValue"""


_ParTrkCnfgTrafficClassFr_Object = MibTableColumn
parTrkCnfgTrafficClassFr = _ParTrkCnfgTrafficClassFr_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 8),
    _ParTrkCnfgTrafficClassFr_Type()
)
parTrkCnfgTrafficClassFr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgTrafficClassFr.setStatus("mandatory")


class _ParTrkCnfgTrafficClassNts_Type(TruthValue):
    """Custom type parTrkCnfgTrafficClassNts based on TruthValue"""


_ParTrkCnfgTrafficClassNts_Object = MibTableColumn
parTrkCnfgTrafficClassNts = _ParTrkCnfgTrafficClassNts_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 9),
    _ParTrkCnfgTrafficClassNts_Type()
)
parTrkCnfgTrafficClassNts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgTrafficClassNts.setStatus("mandatory")


class _ParTrkCnfgTrafficClassTs_Type(TruthValue):
    """Custom type parTrkCnfgTrafficClassTs based on TruthValue"""


_ParTrkCnfgTrafficClassTs_Object = MibTableColumn
parTrkCnfgTrafficClassTs = _ParTrkCnfgTrafficClassTs_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 10),
    _ParTrkCnfgTrafficClassTs_Type()
)
parTrkCnfgTrafficClassTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgTrafficClassTs.setStatus("mandatory")


class _ParTrkCnfgTrafficClassVoice_Type(TruthValue):
    """Custom type parTrkCnfgTrafficClassVoice based on TruthValue"""


_ParTrkCnfgTrafficClassVoice_Object = MibTableColumn
parTrkCnfgTrafficClassVoice = _ParTrkCnfgTrafficClassVoice_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 11),
    _ParTrkCnfgTrafficClassVoice_Type()
)
parTrkCnfgTrafficClassVoice.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgTrafficClassVoice.setStatus("mandatory")


class _ParTrkCnfgTrafficClassCbr_Type(TruthValue):
    """Custom type parTrkCnfgTrafficClassCbr based on TruthValue"""


_ParTrkCnfgTrafficClassCbr_Object = MibTableColumn
parTrkCnfgTrafficClassCbr = _ParTrkCnfgTrafficClassCbr_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 12),
    _ParTrkCnfgTrafficClassCbr_Type()
)
parTrkCnfgTrafficClassCbr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgTrafficClassCbr.setStatus("mandatory")


class _ParTrkCnfgTrafficClassVbr_Type(TruthValue):
    """Custom type parTrkCnfgTrafficClassVbr based on TruthValue"""


_ParTrkCnfgTrafficClassVbr_Object = MibTableColumn
parTrkCnfgTrafficClassVbr = _ParTrkCnfgTrafficClassVbr_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 13),
    _ParTrkCnfgTrafficClassVbr_Type()
)
parTrkCnfgTrafficClassVbr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgTrafficClassVbr.setStatus("mandatory")


class _ParTrkCnfgTrafficClassAbr_Type(TruthValue):
    """Custom type parTrkCnfgTrafficClassAbr based on TruthValue"""


_ParTrkCnfgTrafficClassAbr_Object = MibTableColumn
parTrkCnfgTrafficClassAbr = _ParTrkCnfgTrafficClassAbr_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 14),
    _ParTrkCnfgTrafficClassAbr_Type()
)
parTrkCnfgTrafficClassAbr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgTrafficClassAbr.setStatus("mandatory")


class _ParTrkCnfgAdminStatus_Type(Integer32):
    """Custom type parTrkCnfgAdminStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("add", 1),
          ("delete", 2))
    )


_ParTrkCnfgAdminStatus_Type.__name__ = "Integer32"
_ParTrkCnfgAdminStatus_Object = MibTableColumn
parTrkCnfgAdminStatus = _ParTrkCnfgAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 15),
    _ParTrkCnfgAdminStatus_Type()
)
parTrkCnfgAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgAdminStatus.setStatus("mandatory")


class _ParTrkCnfgRoutingCost_Type(Integer32):
    """Custom type parTrkCnfgRoutingCost based on Integer32"""
    defaultValue = 7

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_ParTrkCnfgRoutingCost_Type.__name__ = "Integer32"
_ParTrkCnfgRoutingCost_Object = MibTableColumn
parTrkCnfgRoutingCost = _ParTrkCnfgRoutingCost_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 16),
    _ParTrkCnfgRoutingCost_Type()
)
parTrkCnfgRoutingCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgRoutingCost.setStatus("mandatory")
_ParTrkCnfgVccConids_Type = Integer32
_ParTrkCnfgVccConids_Object = MibTableColumn
parTrkCnfgVccConids = _ParTrkCnfgVccConids_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 17),
    _ParTrkCnfgVccConids_Type()
)
parTrkCnfgVccConids.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgVccConids.setStatus("mandatory")
_ParTrkCnfgVpcConids_Type = Integer32
_ParTrkCnfgVpcConids_Object = MibTableColumn
parTrkCnfgVpcConids = _ParTrkCnfgVpcConids_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 18),
    _ParTrkCnfgVpcConids_Type()
)
parTrkCnfgVpcConids.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parTrkCnfgVpcConids.setStatus("mandatory")
_ParTrkLocalSlotNumber_Type = Integer32
_ParTrkLocalSlotNumber_Object = MibTableColumn
parTrkLocalSlotNumber = _ParTrkLocalSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 19),
    _ParTrkLocalSlotNumber_Type()
)
parTrkLocalSlotNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLocalSlotNumber.setStatus("mandatory")
_ParTrkLocalPortNumber_Type = Integer32
_ParTrkLocalPortNumber_Object = MibTableColumn
parTrkLocalPortNumber = _ParTrkLocalPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 20),
    _ParTrkLocalPortNumber_Type()
)
parTrkLocalPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLocalPortNumber.setStatus("mandatory")


class _ParTrkLocalVTrunkId_Type(Integer32):
    """Custom type parTrkLocalVTrunkId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_ParTrkLocalVTrunkId_Type.__name__ = "Integer32"
_ParTrkLocalVTrunkId_Object = MibTableColumn
parTrkLocalVTrunkId = _ParTrkLocalVTrunkId_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 21),
    _ParTrkLocalVTrunkId_Type()
)
parTrkLocalVTrunkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLocalVTrunkId.setStatus("mandatory")


class _ParTrkRemoteNodeId_Type(Integer32):
    """Custom type parTrkRemoteNodeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 223),
    )


_ParTrkRemoteNodeId_Type.__name__ = "Integer32"
_ParTrkRemoteNodeId_Object = MibTableColumn
parTrkRemoteNodeId = _ParTrkRemoteNodeId_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 22),
    _ParTrkRemoteNodeId_Type()
)
parTrkRemoteNodeId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkRemoteNodeId.setStatus("mandatory")


class _ParTrkRemoteTrunkId_Type(Integer32):
    """Custom type parTrkRemoteTrunkId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_ParTrkRemoteTrunkId_Type.__name__ = "Integer32"
_ParTrkRemoteTrunkId_Object = MibTableColumn
parTrkRemoteTrunkId = _ParTrkRemoteTrunkId_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 23),
    _ParTrkRemoteTrunkId_Type()
)
parTrkRemoteTrunkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkRemoteTrunkId.setStatus("mandatory")
_ParTrkRemoteSlotNumber_Type = Integer32
_ParTrkRemoteSlotNumber_Object = MibTableColumn
parTrkRemoteSlotNumber = _ParTrkRemoteSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 24),
    _ParTrkRemoteSlotNumber_Type()
)
parTrkRemoteSlotNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkRemoteSlotNumber.setStatus("mandatory")
_ParTrkRemotePortNumber_Type = Integer32
_ParTrkRemotePortNumber_Object = MibTableColumn
parTrkRemotePortNumber = _ParTrkRemotePortNumber_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 25),
    _ParTrkRemotePortNumber_Type()
)
parTrkRemotePortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkRemotePortNumber.setStatus("mandatory")


class _ParTrkRemoteVTrunkId_Type(Integer32):
    """Custom type parTrkRemoteVTrunkId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_ParTrkRemoteVTrunkId_Type.__name__ = "Integer32"
_ParTrkRemoteVTrunkId_Object = MibTableColumn
parTrkRemoteVTrunkId = _ParTrkRemoteVTrunkId_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 26),
    _ParTrkRemoteVTrunkId_Type()
)
parTrkRemoteVTrunkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkRemoteVTrunkId.setStatus("mandatory")
_ParTrkRemoteNodeIP_Type = IpAddress
_ParTrkRemoteNodeIP_Object = MibTableColumn
parTrkRemoteNodeIP = _ParTrkRemoteNodeIP_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 27),
    _ParTrkRemoteNodeIP_Type()
)
parTrkRemoteNodeIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkRemoteNodeIP.setStatus("mandatory")


class _ParTrkRemoteNodeType_Type(Integer32):
    """Custom type parTrkRemoteNodeType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("bpx", 3),
          ("igx", 2),
          ("ipx", 1),
          ("par", 4),
          ("unknown", 5))
    )


_ParTrkRemoteNodeType_Type.__name__ = "Integer32"
_ParTrkRemoteNodeType_Object = MibTableColumn
parTrkRemoteNodeType = _ParTrkRemoteNodeType_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 28),
    _ParTrkRemoteNodeType_Type()
)
parTrkRemoteNodeType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkRemoteNodeType.setStatus("mandatory")
_ParTrkRemoteNodeName_Type = DisplayString
_ParTrkRemoteNodeName_Object = MibTableColumn
parTrkRemoteNodeName = _ParTrkRemoteNodeName_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 29),
    _ParTrkRemoteNodeName_Type()
)
parTrkRemoteNodeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkRemoteNodeName.setStatus("mandatory")


class _ParTrkAlarmStatus_Type(Integer32):
    """Custom type parTrkAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("major", 3),
          ("minor", 2))
    )


_ParTrkAlarmStatus_Type.__name__ = "Integer32"
_ParTrkAlarmStatus_Object = MibTableColumn
parTrkAlarmStatus = _ParTrkAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 30),
    _ParTrkAlarmStatus_Type()
)
parTrkAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkAlarmStatus.setStatus("mandatory")


class _ParTrkAlarmType_Type(Integer32):
    """Custom type parTrkAlarmType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("commfail", 2),
          ("failed", 4),
          ("looped", 5),
          ("rsrcunavail", 1),
          ("unknown", 3))
    )


_ParTrkAlarmType_Type.__name__ = "Integer32"
_ParTrkAlarmType_Object = MibTableColumn
parTrkAlarmType = _ParTrkAlarmType_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 31),
    _ParTrkAlarmType_Type()
)
parTrkAlarmType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkAlarmType.setStatus("mandatory")
_ParTrkBwCapacity_Type = Integer32
_ParTrkBwCapacity_Object = MibTableColumn
parTrkBwCapacity = _ParTrkBwCapacity_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 32),
    _ParTrkBwCapacity_Type()
)
parTrkBwCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkBwCapacity.setStatus("mandatory")
_ParTrkLineLoad_Type = Integer32
_ParTrkLineLoad_Object = MibTableColumn
parTrkLineLoad = _ParTrkLineLoad_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 2, 1, 33),
    _ParTrkLineLoad_Type()
)
parTrkLineLoad.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLineLoad.setStatus("mandatory")
_ParTrkLoadTable_Object = MibTable
parTrkLoadTable = _ParTrkLoadTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3)
)
if mibBuilder.loadTexts:
    parTrkLoadTable.setStatus("mandatory")
_ParTrkLoadEntry_Object = MibTableRow
parTrkLoadEntry = _ParTrkLoadEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1)
)
parTrkLoadEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "parIfLogicalInterface"),
)
if mibBuilder.loadTexts:
    parTrkLoadEntry.setStatus("mandatory")
_ParTrkLoadXmtUsedCbr_Type = Integer32
_ParTrkLoadXmtUsedCbr_Object = MibTableColumn
parTrkLoadXmtUsedCbr = _ParTrkLoadXmtUsedCbr_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 1),
    _ParTrkLoadXmtUsedCbr_Type()
)
parTrkLoadXmtUsedCbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadXmtUsedCbr.setStatus("mandatory")
_ParTrkLoadRcvUsedCbr_Type = Integer32
_ParTrkLoadRcvUsedCbr_Object = MibTableColumn
parTrkLoadRcvUsedCbr = _ParTrkLoadRcvUsedCbr_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 2),
    _ParTrkLoadRcvUsedCbr_Type()
)
parTrkLoadRcvUsedCbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadRcvUsedCbr.setStatus("mandatory")
_ParTrkLoadXmtUsedVbr_Type = Integer32
_ParTrkLoadXmtUsedVbr_Object = MibTableColumn
parTrkLoadXmtUsedVbr = _ParTrkLoadXmtUsedVbr_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 3),
    _ParTrkLoadXmtUsedVbr_Type()
)
parTrkLoadXmtUsedVbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadXmtUsedVbr.setStatus("mandatory")
_ParTrkLoadRcvUsedVbr_Type = Integer32
_ParTrkLoadRcvUsedVbr_Object = MibTableColumn
parTrkLoadRcvUsedVbr = _ParTrkLoadRcvUsedVbr_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 4),
    _ParTrkLoadRcvUsedVbr_Type()
)
parTrkLoadRcvUsedVbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadRcvUsedVbr.setStatus("mandatory")
_ParTrkLoadXmtUsedAbr_Type = Integer32
_ParTrkLoadXmtUsedAbr_Object = MibTableColumn
parTrkLoadXmtUsedAbr = _ParTrkLoadXmtUsedAbr_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 5),
    _ParTrkLoadXmtUsedAbr_Type()
)
parTrkLoadXmtUsedAbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadXmtUsedAbr.setStatus("mandatory")
_ParTrkLoadRcvUsedAbr_Type = Integer32
_ParTrkLoadRcvUsedAbr_Object = MibTableColumn
parTrkLoadRcvUsedAbr = _ParTrkLoadRcvUsedAbr_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 6),
    _ParTrkLoadRcvUsedAbr_Type()
)
parTrkLoadRcvUsedAbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadRcvUsedAbr.setStatus("mandatory")
_ParTrkLoadXmtUsedNts_Type = Integer32
_ParTrkLoadXmtUsedNts_Object = MibTableColumn
parTrkLoadXmtUsedNts = _ParTrkLoadXmtUsedNts_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 7),
    _ParTrkLoadXmtUsedNts_Type()
)
parTrkLoadXmtUsedNts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadXmtUsedNts.setStatus("mandatory")
_ParTrkLoadRcvUsedNts_Type = Integer32
_ParTrkLoadRcvUsedNts_Object = MibTableColumn
parTrkLoadRcvUsedNts = _ParTrkLoadRcvUsedNts_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 8),
    _ParTrkLoadRcvUsedNts_Type()
)
parTrkLoadRcvUsedNts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadRcvUsedNts.setStatus("mandatory")
_ParTrkLoadXmtUsedTs_Type = Integer32
_ParTrkLoadXmtUsedTs_Object = MibTableColumn
parTrkLoadXmtUsedTs = _ParTrkLoadXmtUsedTs_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 9),
    _ParTrkLoadXmtUsedTs_Type()
)
parTrkLoadXmtUsedTs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadXmtUsedTs.setStatus("mandatory")
_ParTrkLoadRcvUsedTs_Type = Integer32
_ParTrkLoadRcvUsedTs_Object = MibTableColumn
parTrkLoadRcvUsedTs = _ParTrkLoadRcvUsedTs_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 10),
    _ParTrkLoadRcvUsedTs_Type()
)
parTrkLoadRcvUsedTs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadRcvUsedTs.setStatus("mandatory")
_ParTrkLoadXmtUsedVoice_Type = Integer32
_ParTrkLoadXmtUsedVoice_Object = MibTableColumn
parTrkLoadXmtUsedVoice = _ParTrkLoadXmtUsedVoice_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 11),
    _ParTrkLoadXmtUsedVoice_Type()
)
parTrkLoadXmtUsedVoice.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadXmtUsedVoice.setStatus("mandatory")
_ParTrkLoadRcvUsedVoice_Type = Integer32
_ParTrkLoadRcvUsedVoice_Object = MibTableColumn
parTrkLoadRcvUsedVoice = _ParTrkLoadRcvUsedVoice_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 12),
    _ParTrkLoadRcvUsedVoice_Type()
)
parTrkLoadRcvUsedVoice.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadRcvUsedVoice.setStatus("mandatory")
_ParTrkLoadXmtUsedBdataA_Type = Integer32
_ParTrkLoadXmtUsedBdataA_Object = MibTableColumn
parTrkLoadXmtUsedBdataA = _ParTrkLoadXmtUsedBdataA_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 13),
    _ParTrkLoadXmtUsedBdataA_Type()
)
parTrkLoadXmtUsedBdataA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadXmtUsedBdataA.setStatus("mandatory")
_ParTrkLoadRcvUsedBdataA_Type = Integer32
_ParTrkLoadRcvUsedBdataA_Object = MibTableColumn
parTrkLoadRcvUsedBdataA = _ParTrkLoadRcvUsedBdataA_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 14),
    _ParTrkLoadRcvUsedBdataA_Type()
)
parTrkLoadRcvUsedBdataA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadRcvUsedBdataA.setStatus("mandatory")
_ParTrkLoadXmtUsedBdataB_Type = Integer32
_ParTrkLoadXmtUsedBdataB_Object = MibTableColumn
parTrkLoadXmtUsedBdataB = _ParTrkLoadXmtUsedBdataB_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 15),
    _ParTrkLoadXmtUsedBdataB_Type()
)
parTrkLoadXmtUsedBdataB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadXmtUsedBdataB.setStatus("mandatory")
_ParTrkLoadRcvUsedBdataB_Type = Integer32
_ParTrkLoadRcvUsedBdataB_Object = MibTableColumn
parTrkLoadRcvUsedBdataB = _ParTrkLoadRcvUsedBdataB_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 16),
    _ParTrkLoadRcvUsedBdataB_Type()
)
parTrkLoadRcvUsedBdataB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadRcvUsedBdataB.setStatus("mandatory")
_ParTrkLoadVccConidsUsed_Type = Integer32
_ParTrkLoadVccConidsUsed_Object = MibTableColumn
parTrkLoadVccConidsUsed = _ParTrkLoadVccConidsUsed_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 17),
    _ParTrkLoadVccConidsUsed_Type()
)
parTrkLoadVccConidsUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadVccConidsUsed.setStatus("mandatory")
_ParTrkLoadVpcConidsUsed_Type = Integer32
_ParTrkLoadVpcConidsUsed_Object = MibTableColumn
parTrkLoadVpcConidsUsed = _ParTrkLoadVpcConidsUsed_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 2, 3, 1, 19),
    _ParTrkLoadVpcConidsUsed_Type()
)
parTrkLoadVpcConidsUsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parTrkLoadVpcConidsUsed.setStatus("mandatory")
_ParConnection_ObjectIdentity = ObjectIdentity
parConnection = _ParConnection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 130, 3)
)
_ParConnectionTable_Object = MibTable
parConnectionTable = _ParConnectionTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1)
)
if mibBuilder.loadTexts:
    parConnectionTable.setStatus("mandatory")
_ParConnectionEntry_Object = MibTableRow
parConnectionEntry = _ParConnectionEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1)
)
parConnectionEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "parConnLocalSlot"),
    (0, "CISCO-WAN-AXIPOP-MIB", "parConnLocalPort"),
    (0, "CISCO-WAN-AXIPOP-MIB", "parConnLocalVpi"),
    (0, "CISCO-WAN-AXIPOP-MIB", "parConnLocalVci"),
)
if mibBuilder.loadTexts:
    parConnectionEntry.setStatus("mandatory")
_ParConnLocalSlot_Type = Integer32
_ParConnLocalSlot_Object = MibTableColumn
parConnLocalSlot = _ParConnLocalSlot_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 1),
    _ParConnLocalSlot_Type()
)
parConnLocalSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnLocalSlot.setStatus("mandatory")
_ParConnLocalPort_Type = Integer32
_ParConnLocalPort_Object = MibTableColumn
parConnLocalPort = _ParConnLocalPort_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 2),
    _ParConnLocalPort_Type()
)
parConnLocalPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnLocalPort.setStatus("mandatory")
_ParConnLocalVpi_Type = Integer32
_ParConnLocalVpi_Object = MibTableColumn
parConnLocalVpi = _ParConnLocalVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 3),
    _ParConnLocalVpi_Type()
)
parConnLocalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnLocalVpi.setStatus("mandatory")
_ParConnLocalVci_Type = Integer32
_ParConnLocalVci_Object = MibTableColumn
parConnLocalVci = _ParConnLocalVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 4),
    _ParConnLocalVci_Type()
)
parConnLocalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnLocalVci.setStatus("mandatory")
_ParConnMasterShip_Type = TruthValue
_ParConnMasterShip_Object = MibTableColumn
parConnMasterShip = _ParConnMasterShip_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 5),
    _ParConnMasterShip_Type()
)
parConnMasterShip.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnMasterShip.setStatus("mandatory")
_ParConnLocalVcIndx_Type = Integer32
_ParConnLocalVcIndx_Object = MibTableColumn
parConnLocalVcIndx = _ParConnLocalVcIndx_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 6),
    _ParConnLocalVcIndx_Type()
)
parConnLocalVcIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnLocalVcIndx.setStatus("mandatory")
_ParConnLocalEndpt_Type = DisplayString
_ParConnLocalEndpt_Object = MibTableColumn
parConnLocalEndpt = _ParConnLocalEndpt_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 7),
    _ParConnLocalEndpt_Type()
)
parConnLocalEndpt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnLocalEndpt.setStatus("mandatory")
_ParConnRemoteNodeName_Type = DisplayString
_ParConnRemoteNodeName_Object = MibTableColumn
parConnRemoteNodeName = _ParConnRemoteNodeName_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 8),
    _ParConnRemoteNodeName_Type()
)
parConnRemoteNodeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnRemoteNodeName.setStatus("mandatory")
_ParConnRemoteSlot_Type = Integer32
_ParConnRemoteSlot_Object = MibTableColumn
parConnRemoteSlot = _ParConnRemoteSlot_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 9),
    _ParConnRemoteSlot_Type()
)
parConnRemoteSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnRemoteSlot.setStatus("mandatory")
_ParConnRemotePort_Type = Integer32
_ParConnRemotePort_Object = MibTableColumn
parConnRemotePort = _ParConnRemotePort_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 10),
    _ParConnRemotePort_Type()
)
parConnRemotePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnRemotePort.setStatus("mandatory")
_ParConnRemoteVpi_Type = Integer32
_ParConnRemoteVpi_Object = MibTableColumn
parConnRemoteVpi = _ParConnRemoteVpi_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 11),
    _ParConnRemoteVpi_Type()
)
parConnRemoteVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnRemoteVpi.setStatus("mandatory")
_ParConnRemoteVci_Type = Integer32
_ParConnRemoteVci_Object = MibTableColumn
parConnRemoteVci = _ParConnRemoteVci_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 12),
    _ParConnRemoteVci_Type()
)
parConnRemoteVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnRemoteVci.setStatus("mandatory")
_ParConnRemoteVcIndx_Type = Integer32
_ParConnRemoteVcIndx_Object = MibTableColumn
parConnRemoteVcIndx = _ParConnRemoteVcIndx_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 13),
    _ParConnRemoteVcIndx_Type()
)
parConnRemoteVcIndx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnRemoteVcIndx.setStatus("mandatory")


class _ParConnOperStatus_Type(Integer32):
    """Custom type parConnOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("lmifail", 3),
          ("routed", 1),
          ("unknown", 4),
          ("unrouted", 2))
    )


_ParConnOperStatus_Type.__name__ = "Integer32"
_ParConnOperStatus_Object = MibTableColumn
parConnOperStatus = _ParConnOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 14),
    _ParConnOperStatus_Type()
)
parConnOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnOperStatus.setStatus("mandatory")


class _ParConnAdminStatus_Type(Integer32):
    """Custom type parConnAdminStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("reroute", 3),
          ("up", 2))
    )


_ParConnAdminStatus_Type.__name__ = "Integer32"
_ParConnAdminStatus_Object = MibTableColumn
parConnAdminStatus = _ParConnAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 15),
    _ParConnAdminStatus_Type()
)
parConnAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parConnAdminStatus.setStatus("mandatory")
_ParConnRoute_Type = DisplayString
_ParConnRoute_Object = MibTableColumn
parConnRoute = _ParConnRoute_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 16),
    _ParConnRoute_Type()
)
parConnRoute.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnRoute.setStatus("mandatory")
_ParConnRemoteEndpt_Type = DisplayString
_ParConnRemoteEndpt_Object = MibTableColumn
parConnRemoteEndpt = _ParConnRemoteEndpt_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 17),
    _ParConnRemoteEndpt_Type()
)
parConnRemoteEndpt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnRemoteEndpt.setStatus("mandatory")
_ParPrefRoute_Type = DisplayString
_ParPrefRoute_Object = MibTableColumn
parPrefRoute = _ParPrefRoute_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 18),
    _ParPrefRoute_Type()
)
parPrefRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parPrefRoute.setStatus("mandatory")


class _ParConnFailRsn_Type(Integer32):
    """Custom type parConnFailRsn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("abitalm", 3),
          ("down", 1),
          ("hwalm", 2),
          ("incomplete", 6),
          ("lmifail", 4),
          ("rrtfail", 5))
    )


_ParConnFailRsn_Type.__name__ = "Integer32"
_ParConnFailRsn_Object = MibTableColumn
parConnFailRsn = _ParConnFailRsn_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 19),
    _ParConnFailRsn_Type()
)
parConnFailRsn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnFailRsn.setStatus("mandatory")
_ParRrtFailRsn_Type = DisplayString
_ParRrtFailRsn_Object = MibTableColumn
parRrtFailRsn = _ParRrtFailRsn_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 20),
    _ParRrtFailRsn_Type()
)
parRrtFailRsn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parRrtFailRsn.setStatus("mandatory")


class _ParConnRstrTyp_Type(Integer32):
    """Custom type parConnRstrTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("norestrict", 1),
          ("satrestrict", 3),
          ("terrestrict", 2),
          ("undefrestrict", 4))
    )


_ParConnRstrTyp_Type.__name__ = "Integer32"
_ParConnRstrTyp_Object = MibTableColumn
parConnRstrTyp = _ParConnRstrTyp_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 21),
    _ParConnRstrTyp_Type()
)
parConnRstrTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnRstrTyp.setStatus("mandatory")
_ParConnRstrZcs_Type = TruthValue
_ParConnRstrZcs_Object = MibTableColumn
parConnRstrZcs = _ParConnRstrZcs_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 22),
    _ParConnRstrZcs_Type()
)
parConnRstrZcs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnRstrZcs.setStatus("mandatory")


class _ParConnCos_Type(Integer32):
    """Custom type parConnCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_ParConnCos_Type.__name__ = "Integer32"
_ParConnCos_Object = MibTableColumn
parConnCos = _ParConnCos_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 3, 1, 1, 23),
    _ParConnCos_Type()
)
parConnCos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parConnCos.setStatus("mandatory")
_ParNetworkClock_ObjectIdentity = ObjectIdentity
parNetworkClock = _ParNetworkClock_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 130, 4)
)
_ParClockTable_Object = MibTable
parClockTable = _ParClockTable_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 4, 1)
)
if mibBuilder.loadTexts:
    parClockTable.setStatus("mandatory")
_ParClockEntry_Object = MibTableRow
parClockEntry = _ParClockEntry_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1)
)
parClockEntry.setIndexNames(
    (0, "CISCO-WAN-AXIPOP-MIB", "parClockIndex"),
)
if mibBuilder.loadTexts:
    parClockEntry.setStatus("mandatory")
_ParClockIndex_Type = Integer32
_ParClockIndex_Object = MibTableColumn
parClockIndex = _ParClockIndex_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 1),
    _ParClockIndex_Type()
)
parClockIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parClockIndex.setStatus("mandatory")


class _ParClockType_Type(Integer32):
    """Custom type parClockType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("null", 4),
          ("primary", 1),
          ("secondary", 2),
          ("tertiary", 3))
    )


_ParClockType_Type.__name__ = "Integer32"
_ParClockType_Object = MibTableColumn
parClockType = _ParClockType_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 2),
    _ParClockType_Type()
)
parClockType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parClockType.setStatus("mandatory")


class _ParClockSource_Type(Integer32):
    """Custom type parClockSource based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("external", 3),
          ("interface", 2),
          ("internal", 1))
    )


_ParClockSource_Type.__name__ = "Integer32"
_ParClockSource_Object = MibTableColumn
parClockSource = _ParClockSource_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 3),
    _ParClockSource_Type()
)
parClockSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parClockSource.setStatus("mandatory")


class _ParClockCurSource_Type(TruthValue):
    """Custom type parClockCurSource based on TruthValue"""


_ParClockCurSource_Object = MibTableColumn
parClockCurSource = _ParClockCurSource_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 4),
    _ParClockCurSource_Type()
)
parClockCurSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parClockCurSource.setStatus("mandatory")
_ParClockSourceId_Type = Integer32
_ParClockSourceId_Object = MibTableColumn
parClockSourceId = _ParClockSourceId_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 5),
    _ParClockSourceId_Type()
)
parClockSourceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parClockSourceId.setStatus("mandatory")
_ParClockPath_Type = DisplayString
_ParClockPath_Object = MibTableColumn
parClockPath = _ParClockPath_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 4, 1, 1, 6),
    _ParClockPath_Type()
)
parClockPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parClockPath.setStatus("mandatory")
_ParConfigParms_ObjectIdentity = ObjectIdentity
parConfigParms = _ParConfigParms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 130, 5)
)
_ParVsiConfigParms_ObjectIdentity = ObjectIdentity
parVsiConfigParms = _ParVsiConfigParms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 1)
)
_ParCmParms_ObjectIdentity = ObjectIdentity
parCmParms = _ParCmParms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2)
)


class _ParCmParmsMaxRoutingBundle_Type(Integer32):
    """Custom type parCmParmsMaxRoutingBundle based on Integer32"""
    defaultValue = 24


_ParCmParmsMaxRoutingBundle_Object = MibScalar
parCmParmsMaxRoutingBundle = _ParCmParmsMaxRoutingBundle_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 1),
    _ParCmParmsMaxRoutingBundle_Type()
)
parCmParmsMaxRoutingBundle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsMaxRoutingBundle.setStatus("mandatory")


class _ParCmParmsRerouteTimer_Type(Integer32):
    """Custom type parCmParmsRerouteTimer based on Integer32"""
    defaultValue = 0


_ParCmParmsRerouteTimer_Object = MibScalar
parCmParmsRerouteTimer = _ParCmParmsRerouteTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 2),
    _ParCmParmsRerouteTimer_Type()
)
parCmParmsRerouteTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsRerouteTimer.setStatus("mandatory")


class _ParCmParmsResetTimer_Type(TruthValue):
    """Custom type parCmParmsResetTimer based on TruthValue"""


_ParCmParmsResetTimer_Object = MibScalar
parCmParmsResetTimer = _ParCmParmsResetTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 3),
    _ParCmParmsResetTimer_Type()
)
parCmParmsResetTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsResetTimer.setStatus("mandatory")


class _ParCmParmsDnUpPerPass_Type(Integer32):
    """Custom type parCmParmsDnUpPerPass based on Integer32"""
    defaultValue = 50


_ParCmParmsDnUpPerPass_Object = MibScalar
parCmParmsDnUpPerPass = _ParCmParmsDnUpPerPass_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 4),
    _ParCmParmsDnUpPerPass_Type()
)
parCmParmsDnUpPerPass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsDnUpPerPass.setStatus("mandatory")


class _ParCmParmsDnUpTimer_Type(Integer32):
    """Custom type parCmParmsDnUpTimer based on Integer32"""
    defaultValue = 30000


_ParCmParmsDnUpTimer_Object = MibScalar
parCmParmsDnUpTimer = _ParCmParmsDnUpTimer_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 5),
    _ParCmParmsDnUpTimer_Type()
)
parCmParmsDnUpTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsDnUpTimer.setStatus("mandatory")


class _ParCmParmsRrtErrsPerCycle_Type(Integer32):
    """Custom type parCmParmsRrtErrsPerCycle based on Integer32"""
    defaultValue = 50


_ParCmParmsRrtErrsPerCycle_Object = MibScalar
parCmParmsRrtErrsPerCycle = _ParCmParmsRrtErrsPerCycle_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 6),
    _ParCmParmsRrtErrsPerCycle_Type()
)
parCmParmsRrtErrsPerCycle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsRrtErrsPerCycle.setStatus("mandatory")


class _ParCmParmsRrtCycleInterval_Type(Integer32):
    """Custom type parCmParmsRrtCycleInterval based on Integer32"""
    defaultValue = 5


_ParCmParmsRrtCycleInterval_Object = MibScalar
parCmParmsRrtCycleInterval = _ParCmParmsRrtCycleInterval_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 7),
    _ParCmParmsRrtCycleInterval_Type()
)
parCmParmsRrtCycleInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsRrtCycleInterval.setStatus("mandatory")


class _ParCmParmsMaxRrtCycles_Type(Integer32):
    """Custom type parCmParmsMaxRrtCycles based on Integer32"""
    defaultValue = 10


_ParCmParmsMaxRrtCycles_Object = MibScalar
parCmParmsMaxRrtCycles = _ParCmParmsMaxRrtCycles_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 8),
    _ParCmParmsMaxRrtCycles_Type()
)
parCmParmsMaxRrtCycles.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsMaxRrtCycles.setStatus("mandatory")


class _ParCmParmsRrtPauseTime_Type(Integer32):
    """Custom type parCmParmsRrtPauseTime based on Integer32"""
    defaultValue = 0


_ParCmParmsRrtPauseTime_Object = MibScalar
parCmParmsRrtPauseTime = _ParCmParmsRrtPauseTime_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 9),
    _ParCmParmsRrtPauseTime_Type()
)
parCmParmsRrtPauseTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsRrtPauseTime.setStatus("mandatory")


class _ParCmParmsMaxUpdates_Type(Integer32):
    """Custom type parCmParmsMaxUpdates based on Integer32"""
    defaultValue = 10


_ParCmParmsMaxUpdates_Object = MibScalar
parCmParmsMaxUpdates = _ParCmParmsMaxUpdates_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 10),
    _ParCmParmsMaxUpdates_Type()
)
parCmParmsMaxUpdates.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsMaxUpdates.setStatus("mandatory")


class _ParCmParmsRerouteGroups_Type(Integer32):
    """Custom type parCmParmsRerouteGroups based on Integer32"""
    defaultValue = 50


_ParCmParmsRerouteGroups_Object = MibScalar
parCmParmsRerouteGroups = _ParCmParmsRerouteGroups_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 11),
    _ParCmParmsRerouteGroups_Type()
)
parCmParmsRerouteGroups.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsRerouteGroups.setStatus("mandatory")


class _ParCmParmsMinRrGroupSize_Type(Integer32):
    """Custom type parCmParmsMinRrGroupSize based on Integer32"""
    defaultValue = 0


_ParCmParmsMinRrGroupSize_Object = MibScalar
parCmParmsMinRrGroupSize = _ParCmParmsMinRrGroupSize_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 12),
    _ParCmParmsMinRrGroupSize_Type()
)
parCmParmsMinRrGroupSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsMinRrGroupSize.setStatus("mandatory")


class _ParCmParmsRrGroupInc_Type(Integer32):
    """Custom type parCmParmsRrGroupInc based on Integer32"""
    defaultValue = 100


_ParCmParmsRrGroupInc_Object = MibScalar
parCmParmsRrGroupInc = _ParCmParmsRrGroupInc_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 13),
    _ParCmParmsRrGroupInc_Type()
)
parCmParmsRrGroupInc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsRrGroupInc.setStatus("mandatory")


class _ParCmParmsCostBased_Type(TruthValue):
    """Custom type parCmParmsCostBased based on TruthValue"""


_ParCmParmsCostBased_Object = MibScalar
parCmParmsCostBased = _ParCmParmsCostBased_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 14),
    _ParCmParmsCostBased_Type()
)
parCmParmsCostBased.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsCostBased.setStatus("mandatory")


class _ParCmParmsUseCache_Type(TruthValue):
    """Custom type parCmParmsUseCache based on TruthValue"""


_ParCmParmsUseCache_Object = MibScalar
parCmParmsUseCache = _ParCmParmsUseCache_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 15),
    _ParCmParmsUseCache_Type()
)
parCmParmsUseCache.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsUseCache.setStatus("mandatory")


class _ParCmParmsUseDelay_Type(TruthValue):
    """Custom type parCmParmsUseDelay based on TruthValue"""


_ParCmParmsUseDelay_Object = MibScalar
parCmParmsUseDelay = _ParCmParmsUseDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 16),
    _ParCmParmsUseDelay_Type()
)
parCmParmsUseDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmsUseDelay.setStatus("mandatory")


class _ParCmParmMaxViaCons_Type(Integer32):
    """Custom type parCmParmMaxViaCons based on Integer32"""
    defaultValue = 50000

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 80000),
    )


_ParCmParmMaxViaCons_Type.__name__ = "Integer32"
_ParCmParmMaxViaCons_Object = MibScalar
parCmParmMaxViaCons = _ParCmParmMaxViaCons_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 2, 17),
    _ParCmParmMaxViaCons_Type()
)
parCmParmMaxViaCons.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parCmParmMaxViaCons.setStatus("mandatory")
_ParMnUpdt_ObjectIdentity = ObjectIdentity
parMnUpdt = _ParMnUpdt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 3)
)


class _ParMnUpdtInterval_Type(Integer32):
    """Custom type parMnUpdtInterval based on Integer32"""
    defaultValue = 15


_ParMnUpdtInterval_Object = MibScalar
parMnUpdtInterval = _ParMnUpdtInterval_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 3, 1),
    _ParMnUpdtInterval_Type()
)
parMnUpdtInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parMnUpdtInterval.setStatus("mandatory")


class _ParMnUpdtNodesPerInt_Type(Integer32):
    """Custom type parMnUpdtNodesPerInt based on Integer32"""
    defaultValue = 20


_ParMnUpdtNodesPerInt_Object = MibScalar
parMnUpdtNodesPerInt = _ParMnUpdtNodesPerInt_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 3, 2),
    _ParMnUpdtNodesPerInt_Type()
)
parMnUpdtNodesPerInt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parMnUpdtNodesPerInt.setStatus("mandatory")


class _ParMnUpdtBatchSend_Type(TruthValue):
    """Custom type parMnUpdtBatchSend based on TruthValue"""


_ParMnUpdtBatchSend_Object = MibScalar
parMnUpdtBatchSend = _ParMnUpdtBatchSend_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 3, 3),
    _ParMnUpdtBatchSend_Type()
)
parMnUpdtBatchSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parMnUpdtBatchSend.setStatus("mandatory")
_ParSwFunc_ObjectIdentity = ObjectIdentity
parSwFunc = _ParSwFunc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 4)
)


class _ParSwFuncAbrVsvd_Type(TruthValue):
    """Custom type parSwFuncAbrVsvd based on TruthValue"""


_ParSwFuncAbrVsvd_Object = MibScalar
parSwFuncAbrVsvd = _ParSwFuncAbrVsvd_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 4, 1),
    _ParSwFuncAbrVsvd_Type()
)
parSwFuncAbrVsvd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parSwFuncAbrVsvd.setStatus("mandatory")


class _ParSwFuncNodeType_Type(Integer32):
    """Custom type parSwFuncNodeType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("feeder", 2),
          ("routing", 1))
    )


_ParSwFuncNodeType_Type.__name__ = "Integer32"
_ParSwFuncNodeType_Object = MibScalar
parSwFuncNodeType = _ParSwFuncNodeType_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 4, 2),
    _ParSwFuncNodeType_Type()
)
parSwFuncNodeType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parSwFuncNodeType.setStatus("mandatory")
_ParOnOff_ObjectIdentity = ObjectIdentity
parOnOff = _ParOnOff_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 5)
)


class _ParOnOffBackgroundUpdt_Type(TruthValue):
    """Custom type parOnOffBackgroundUpdt based on TruthValue"""


_ParOnOffBackgroundUpdt_Object = MibScalar
parOnOffBackgroundUpdt = _ParOnOffBackgroundUpdt_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 1),
    _ParOnOffBackgroundUpdt_Type()
)
parOnOffBackgroundUpdt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parOnOffBackgroundUpdt.setStatus("mandatory")


class _ParOnOffDynamicBwAlloc_Type(TruthValue):
    """Custom type parOnOffDynamicBwAlloc based on TruthValue"""


_ParOnOffDynamicBwAlloc_Object = MibScalar
parOnOffDynamicBwAlloc = _ParOnOffDynamicBwAlloc_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 2),
    _ParOnOffDynamicBwAlloc_Type()
)
parOnOffDynamicBwAlloc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parOnOffDynamicBwAlloc.setStatus("mandatory")


class _ParOnOffCmUpdts_Type(TruthValue):
    """Custom type parOnOffCmUpdts based on TruthValue"""


_ParOnOffCmUpdts_Object = MibScalar
parOnOffCmUpdts = _ParOnOffCmUpdts_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 3),
    _ParOnOffCmUpdts_Type()
)
parOnOffCmUpdts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parOnOffCmUpdts.setStatus("mandatory")


class _ParOnOffRouting_Type(TruthValue):
    """Custom type parOnOffRouting based on TruthValue"""


_ParOnOffRouting_Object = MibScalar
parOnOffRouting = _ParOnOffRouting_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 4),
    _ParOnOffRouting_Type()
)
parOnOffRouting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parOnOffRouting.setStatus("mandatory")


class _ParOnOffCommFailTest_Type(TruthValue):
    """Custom type parOnOffCommFailTest based on TruthValue"""


_ParOnOffCommFailTest_Object = MibScalar
parOnOffCommFailTest = _ParOnOffCommFailTest_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 5),
    _ParOnOffCommFailTest_Type()
)
parOnOffCommFailTest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parOnOffCommFailTest.setStatus("mandatory")


class _ParOnOffDrtDelay_Type(TruthValue):
    """Custom type parOnOffDrtDelay based on TruthValue"""


_ParOnOffDrtDelay_Object = MibScalar
parOnOffDrtDelay = _ParOnOffDrtDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 6),
    _ParOnOffDrtDelay_Type()
)
parOnOffDrtDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parOnOffDrtDelay.setStatus("mandatory")


class _ParOnOffRenumRec_Type(TruthValue):
    """Custom type parOnOffRenumRec based on TruthValue"""


_ParOnOffRenumRec_Object = MibScalar
parOnOffRenumRec = _ParOnOffRenumRec_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 7),
    _ParOnOffRenumRec_Type()
)
parOnOffRenumRec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parOnOffRenumRec.setStatus("mandatory")


class _ParOnOffCommBreak_Type(TruthValue):
    """Custom type parOnOffCommBreak based on TruthValue"""


_ParOnOffCommBreak_Object = MibScalar
parOnOffCommBreak = _ParOnOffCommBreak_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 5, 8),
    _ParOnOffCommBreak_Type()
)
parOnOffCommBreak.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parOnOffCommBreak.setStatus("mandatory")
_ParSysParms_ObjectIdentity = ObjectIdentity
parSysParms = _ParSysParms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6)
)


class _ParSysParmsTsPacketAge_Type(Integer32):
    """Custom type parSysParmsTsPacketAge based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 64),
    )


_ParSysParmsTsPacketAge_Type.__name__ = "Integer32"
_ParSysParmsTsPacketAge_Object = MibScalar
parSysParmsTsPacketAge = _ParSysParmsTsPacketAge_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 1),
    _ParSysParmsTsPacketAge_Type()
)
parSysParmsTsPacketAge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parSysParmsTsPacketAge.setStatus("mandatory")


class _ParSysParmsConnFail_Type(TruthValue):
    """Custom type parSysParmsConnFail based on TruthValue"""


_ParSysParmsConnFail_Object = MibScalar
parSysParmsConnFail = _ParSysParmsConnFail_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 2),
    _ParSysParmsConnFail_Type()
)
parSysParmsConnFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parSysParmsConnFail.setStatus("mandatory")
_ParSysParmsVcPollRate_Type = Integer32
_ParSysParmsVcPollRate_Object = MibScalar
parSysParmsVcPollRate = _ParSysParmsVcPollRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 3),
    _ParSysParmsVcPollRate_Type()
)
parSysParmsVcPollRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsVcPollRate.setStatus("mandatory")
_ParSysParmsMaxVDelay_Type = Integer32
_ParSysParmsMaxVDelay_Object = MibScalar
parSysParmsMaxVDelay = _ParSysParmsMaxVDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 4),
    _ParSysParmsMaxVDelay_Type()
)
parSysParmsMaxVDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxVDelay.setStatus("mandatory")
_ParSysParmsMaxCDelay_Type = Integer32
_ParSysParmsMaxCDelay_Object = MibScalar
parSysParmsMaxCDelay = _ParSysParmsMaxCDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 5),
    _ParSysParmsMaxCDelay_Type()
)
parSysParmsMaxCDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxCDelay.setStatus("mandatory")
_ParSysParmsMaxDDelay_Type = Integer32
_ParSysParmsMaxDDelay_Object = MibScalar
parSysParmsMaxDDelay = _ParSysParmsMaxDDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 6),
    _ParSysParmsMaxDDelay_Type()
)
parSysParmsMaxDDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxDDelay.setStatus("mandatory")
_ParSysParmsMaxADelay_Type = Integer32
_ParSysParmsMaxADelay_Object = MibScalar
parSysParmsMaxADelay = _ParSysParmsMaxADelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 7),
    _ParSysParmsMaxADelay_Type()
)
parSysParmsMaxADelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxADelay.setStatus("mandatory")
_ParSysParmsMaxHsdDelay_Type = Integer32
_ParSysParmsMaxHsdDelay_Object = MibScalar
parSysParmsMaxHsdDelay = _ParSysParmsMaxHsdDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 8),
    _ParSysParmsMaxHsdDelay_Type()
)
parSysParmsMaxHsdDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxHsdDelay.setStatus("mandatory")
_ParSysParmsDeEnable_Type = TruthValue
_ParSysParmsDeEnable_Object = MibScalar
parSysParmsDeEnable = _ParSysParmsDeEnable_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 9),
    _ParSysParmsDeEnable_Type()
)
parSysParmsDeEnable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsDeEnable.setStatus("mandatory")
_ParSysParmsFrStandard_Type = TruthValue
_ParSysParmsFrStandard_Object = MibScalar
parSysParmsFrStandard = _ParSysParmsFrStandard_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 10),
    _ParSysParmsFrStandard_Type()
)
parSysParmsFrStandard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsFrStandard.setStatus("mandatory")


class _ParSysParmsDrtDelay_Type(TruthValue):
    """Custom type parSysParmsDrtDelay based on TruthValue"""


_ParSysParmsDrtDelay_Object = MibScalar
parSysParmsDrtDelay = _ParSysParmsDrtDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 11),
    _ParSysParmsDrtDelay_Type()
)
parSysParmsDrtDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parSysParmsDrtDelay.setStatus("mandatory")


class _ParSysParmsInvLogAlarmThres_Type(Integer32):
    """Custom type parSysParmsInvLogAlarmThres based on Integer32"""
    defaultValue = 0


_ParSysParmsInvLogAlarmThres_Object = MibScalar
parSysParmsInvLogAlarmThres = _ParSysParmsInvLogAlarmThres_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 12),
    _ParSysParmsInvLogAlarmThres_Type()
)
parSysParmsInvLogAlarmThres.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsInvLogAlarmThres.setStatus("mandatory")
_ParSysParmsMaxCdpVDelay_Type = Integer32
_ParSysParmsMaxCdpVDelay_Object = MibScalar
parSysParmsMaxCdpVDelay = _ParSysParmsMaxCdpVDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 13),
    _ParSysParmsMaxCdpVDelay_Type()
)
parSysParmsMaxCdpVDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxCdpVDelay.setStatus("mandatory")
_ParSysParmsMaxCdpCDelay_Type = Integer32
_ParSysParmsMaxCdpCDelay_Object = MibScalar
parSysParmsMaxCdpCDelay = _ParSysParmsMaxCdpCDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 14),
    _ParSysParmsMaxCdpCDelay_Type()
)
parSysParmsMaxCdpCDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxCdpCDelay.setStatus("mandatory")
_ParSysParmsMaxCdpDDelay_Type = Integer32
_ParSysParmsMaxCdpDDelay_Object = MibScalar
parSysParmsMaxCdpDDelay = _ParSysParmsMaxCdpDDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 15),
    _ParSysParmsMaxCdpDDelay_Type()
)
parSysParmsMaxCdpDDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxCdpDDelay.setStatus("mandatory")
_ParSysParmsMaxCdpADelay_Type = Integer32
_ParSysParmsMaxCdpADelay_Object = MibScalar
parSysParmsMaxCdpADelay = _ParSysParmsMaxCdpADelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 16),
    _ParSysParmsMaxCdpADelay_Type()
)
parSysParmsMaxCdpADelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxCdpADelay.setStatus("mandatory")
_ParSysParmsMaxCdpHsdDelay_Type = Integer32
_ParSysParmsMaxCdpHsdDelay_Object = MibScalar
parSysParmsMaxCdpHsdDelay = _ParSysParmsMaxCdpHsdDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 17),
    _ParSysParmsMaxCdpHsdDelay_Type()
)
parSysParmsMaxCdpHsdDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxCdpHsdDelay.setStatus("mandatory")
_ParSysParmsMaxIpcdpVDelay_Type = Integer32
_ParSysParmsMaxIpcdpVDelay_Object = MibScalar
parSysParmsMaxIpcdpVDelay = _ParSysParmsMaxIpcdpVDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 18),
    _ParSysParmsMaxIpcdpVDelay_Type()
)
parSysParmsMaxIpcdpVDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxIpcdpVDelay.setStatus("mandatory")
_ParSysParmsMaxIpcdpCDelay_Type = Integer32
_ParSysParmsMaxIpcdpCDelay_Object = MibScalar
parSysParmsMaxIpcdpCDelay = _ParSysParmsMaxIpcdpCDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 19),
    _ParSysParmsMaxIpcdpCDelay_Type()
)
parSysParmsMaxIpcdpCDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxIpcdpCDelay.setStatus("mandatory")
_ParSysParmsMaxIpcdpDDelay_Type = Integer32
_ParSysParmsMaxIpcdpDDelay_Object = MibScalar
parSysParmsMaxIpcdpDDelay = _ParSysParmsMaxIpcdpDDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 20),
    _ParSysParmsMaxIpcdpDDelay_Type()
)
parSysParmsMaxIpcdpDDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxIpcdpDDelay.setStatus("mandatory")
_ParSysParmsMaxIpcdpADelay_Type = Integer32
_ParSysParmsMaxIpcdpADelay_Object = MibScalar
parSysParmsMaxIpcdpADelay = _ParSysParmsMaxIpcdpADelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 21),
    _ParSysParmsMaxIpcdpADelay_Type()
)
parSysParmsMaxIpcdpADelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxIpcdpADelay.setStatus("mandatory")
_ParSysParmsMaxIpcdpHsdDelay_Type = Integer32
_ParSysParmsMaxIpcdpHsdDelay_Object = MibScalar
parSysParmsMaxIpcdpHsdDelay = _ParSysParmsMaxIpcdpHsdDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 22),
    _ParSysParmsMaxIpcdpHsdDelay_Type()
)
parSysParmsMaxIpcdpHsdDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxIpcdpHsdDelay.setStatus("mandatory")
_ParSysParmsMaxIphsdDelay_Type = Integer32
_ParSysParmsMaxIphsdDelay_Object = MibScalar
parSysParmsMaxIphsdDelay = _ParSysParmsMaxIphsdDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 23),
    _ParSysParmsMaxIphsdDelay_Type()
)
parSysParmsMaxIphsdDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsMaxIphsdDelay.setStatus("mandatory")
_ParSysParmsFpdDeJitter_Type = Integer32
_ParSysParmsFpdDeJitter_Object = MibScalar
parSysParmsFpdDeJitter = _ParSysParmsFpdDeJitter_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 6, 24),
    _ParSysParmsFpdDeJitter_Type()
)
parSysParmsFpdDeJitter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    parSysParmsFpdDeJitter.setStatus("mandatory")
_ParNetworkingParms_ObjectIdentity = ObjectIdentity
parNetworkingParms = _ParNetworkingParms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7)
)


class _ParNetParmCondInitialStgr_Type(Integer32):
    """Custom type parNetParmCondInitialStgr based on Integer32"""
    defaultValue = 5000


_ParNetParmCondInitialStgr_Object = MibScalar
parNetParmCondInitialStgr = _ParNetParmCondInitialStgr_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 1),
    _ParNetParmCondInitialStgr_Type()
)
parNetParmCondInitialStgr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmCondInitialStgr.setStatus("mandatory")


class _ParNetParmCondPerNodeInterval_Type(Integer32):
    """Custom type parNetParmCondPerNodeInterval based on Integer32"""
    defaultValue = 30000


_ParNetParmCondPerNodeInterval_Object = MibScalar
parNetParmCondPerNodeInterval = _ParNetParmCondPerNodeInterval_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 2),
    _ParNetParmCondPerNodeInterval_Type()
)
parNetParmCondPerNodeInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmCondPerNodeInterval.setStatus("mandatory")


class _ParNetParmCbDelay_Type(Integer32):
    """Custom type parNetParmCbDelay based on Integer32"""
    defaultValue = 30000


_ParNetParmCbDelay_Object = MibScalar
parNetParmCbDelay = _ParNetParmCbDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 3),
    _ParNetParmCbDelay_Type()
)
parNetParmCbDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmCbDelay.setStatus("mandatory")


class _ParNetParmCbOffset_Type(Integer32):
    """Custom type parNetParmCbOffset based on Integer32"""
    defaultValue = 10


_ParNetParmCbOffset_Object = MibScalar
parNetParmCbOffset = _ParNetParmCbOffset_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 4),
    _ParNetParmCbOffset_Type()
)
parNetParmCbOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmCbOffset.setStatus("mandatory")


class _ParNetParmMsgTimeout_Type(Integer32):
    """Custom type parNetParmMsgTimeout based on Integer32"""
    defaultValue = 1700


_ParNetParmMsgTimeout_Object = MibScalar
parNetParmMsgTimeout = _ParNetParmMsgTimeout_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 5),
    _ParNetParmMsgTimeout_Type()
)
parNetParmMsgTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmMsgTimeout.setStatus("mandatory")


class _ParNetParmMsgMaxTimeout_Type(Integer32):
    """Custom type parNetParmMsgMaxTimeout based on Integer32"""
    defaultValue = 7


_ParNetParmMsgMaxTimeout_Object = MibScalar
parNetParmMsgMaxTimeout = _ParNetParmMsgMaxTimeout_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 6),
    _ParNetParmMsgMaxTimeout_Type()
)
parNetParmMsgMaxTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmMsgMaxTimeout.setStatus("mandatory")


class _ParNetParmMsgMaxTimeoutSat_Type(Integer32):
    """Custom type parNetParmMsgMaxTimeoutSat based on Integer32"""
    defaultValue = 6


_ParNetParmMsgMaxTimeoutSat_Object = MibScalar
parNetParmMsgMaxTimeoutSat = _ParNetParmMsgMaxTimeoutSat_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 7),
    _ParNetParmMsgMaxTimeoutSat_Type()
)
parNetParmMsgMaxTimeoutSat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmMsgMaxTimeoutSat.setStatus("mandatory")


class _ParNetParmBlindMaxTimeout_Type(Integer32):
    """Custom type parNetParmBlindMaxTimeout based on Integer32"""
    defaultValue = 4


_ParNetParmBlindMaxTimeout_Object = MibScalar
parNetParmBlindMaxTimeout = _ParNetParmBlindMaxTimeout_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 8),
    _ParNetParmBlindMaxTimeout_Type()
)
parNetParmBlindMaxTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmBlindMaxTimeout.setStatus("mandatory")


class _ParNetParmCbMaxTimeout_Type(Integer32):
    """Custom type parNetParmCbMaxTimeout based on Integer32"""
    defaultValue = 5


_ParNetParmCbMaxTimeout_Object = MibScalar
parNetParmCbMaxTimeout = _ParNetParmCbMaxTimeout_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 9),
    _ParNetParmCbMaxTimeout_Type()
)
parNetParmCbMaxTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmCbMaxTimeout.setStatus("mandatory")


class _ParNetParmCfTestInterval_Type(Integer32):
    """Custom type parNetParmCfTestInterval based on Integer32"""
    defaultValue = 10000


_ParNetParmCfTestInterval_Object = MibScalar
parNetParmCfTestInterval = _ParNetParmCfTestInterval_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 10),
    _ParNetParmCfTestInterval_Type()
)
parNetParmCfTestInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmCfTestInterval.setStatus("mandatory")


class _ParNetParmCfTestMultiplier_Type(Integer32):
    """Custom type parNetParmCfTestMultiplier based on Integer32"""
    defaultValue = 3


_ParNetParmCfTestMultiplier_Object = MibScalar
parNetParmCfTestMultiplier = _ParNetParmCfTestMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 11),
    _ParNetParmCfTestMultiplier_Type()
)
parNetParmCfTestMultiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmCfTestMultiplier.setStatus("mandatory")


class _ParNetParmNetwWindowSz_Type(Integer32):
    """Custom type parNetParmNetwWindowSz based on Integer32"""
    defaultValue = 1


_ParNetParmNetwWindowSz_Object = MibScalar
parNetParmNetwWindowSz = _ParNetParmNetwWindowSz_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 12),
    _ParNetParmNetwWindowSz_Type()
)
parNetParmNetwWindowSz.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmNetwWindowSz.setStatus("mandatory")


class _ParNetParmNetwLetWait_Type(Integer32):
    """Custom type parNetParmNetwLetWait based on Integer32"""
    defaultValue = 50


_ParNetParmNetwLetWait_Object = MibScalar
parNetParmNetwLetWait = _ParNetParmNetwLetWait_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 13),
    _ParNetParmNetwLetWait_Type()
)
parNetParmNetwLetWait.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmNetwLetWait.setStatus("mandatory")


class _ParNetParmCfDelay_Type(Integer32):
    """Custom type parNetParmCfDelay based on Integer32"""
    defaultValue = 60


_ParNetParmCfDelay_Object = MibScalar
parNetParmCfDelay = _ParNetParmCfDelay_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 14),
    _ParNetParmCfDelay_Type()
)
parNetParmCfDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmCfDelay.setStatus("mandatory")


class _ParNetParmHighTxRate_Type(Integer32):
    """Custom type parNetParmHighTxRate based on Integer32"""
    defaultValue = 2500


_ParNetParmHighTxRate_Object = MibScalar
parNetParmHighTxRate = _ParNetParmHighTxRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 15),
    _ParNetParmHighTxRate_Type()
)
parNetParmHighTxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmHighTxRate.setStatus("mandatory")


class _ParNetParmLowTxRate_Type(Integer32):
    """Custom type parNetParmLowTxRate based on Integer32"""
    defaultValue = 500


_ParNetParmLowTxRate_Object = MibScalar
parNetParmLowTxRate = _ParNetParmLowTxRate_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 16),
    _ParNetParmLowTxRate_Type()
)
parNetParmLowTxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmLowTxRate.setStatus("mandatory")


class _ParNetParmMaxNodeBlks_Type(Integer32):
    """Custom type parNetParmMaxNodeBlks based on Integer32"""
    defaultValue = 3000


_ParNetParmMaxNodeBlks_Object = MibScalar
parNetParmMaxNodeBlks = _ParNetParmMaxNodeBlks_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 17),
    _ParNetParmMaxNodeBlks_Type()
)
parNetParmMaxNodeBlks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmMaxNodeBlks.setStatus("mandatory")


class _ParNetParmTopoMsgSegSz_Type(Integer32):
    """Custom type parNetParmTopoMsgSegSz based on Integer32"""
    defaultValue = 3570


_ParNetParmTopoMsgSegSz_Object = MibScalar
parNetParmTopoMsgSegSz = _ParNetParmTopoMsgSegSz_Object(
    (1, 3, 6, 1, 4, 1, 351, 130, 5, 7, 18),
    _ParNetParmTopoMsgSegSz_Type()
)
parNetParmTopoMsgSegSz.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    parNetParmTopoMsgSegSz.setStatus("mandatory")

# Managed Objects groups


# Notification objects


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "CISCO-WAN-AXIPOP-MIB",
    **{"AtmAddress": AtmAddress,
       "RpmNsapAddress": RpmNsapAddress,
       "IfNsapAddress": IfNsapAddress,
       "NetPrefix": NetPrefix,
       "TruthValue": TruthValue,
       "asmAlarmTable": asmAlarmTable,
       "asmAlarmEntry": asmAlarmEntry,
       "asmAlarmNum": asmAlarmNum,
       "asmAlarmType": asmAlarmType,
       "asmAlarmUnitNum": asmAlarmUnitNum,
       "asmAlarmThreshold": asmAlarmThreshold,
       "asmAlarmSeverity": asmAlarmSeverity,
       "asmUnitMeasurable": asmUnitMeasurable,
       "asmUnitMeasuredValue": asmUnitMeasuredValue,
       "asmPhysicalAlarmState": asmPhysicalAlarmState,
       "asmClrButton": asmClrButton,
       "asmNumOfValidEntries": asmNumOfValidEntries,
       "asmShelfAlarmState": asmShelfAlarmState,
       "atmNetPrefixGroup": atmNetPrefixGroup,
       "atmNetPrefixTable": atmNetPrefixTable,
       "atmNetPrefixEntry": atmNetPrefixEntry,
       "axisAtmNetPrefixPort": axisAtmNetPrefixPort,
       "axisAtmNetPrefixPrefix": axisAtmNetPrefixPrefix,
       "axisAtmNetPrefixAdminStatus": axisAtmNetPrefixAdminStatus,
       "axisAtmNetPrefixOperStatus": axisAtmNetPrefixOperStatus,
       "atmAddressGroup": atmAddressGroup,
       "atmAddressTable": atmAddressTable,
       "atmAddressEntry": atmAddressEntry,
       "axisAtmAddressPort": axisAtmAddressPort,
       "axisAtmAddressAtmAddress": axisAtmAddressAtmAddress,
       "axisAtmAddressStatus": axisAtmAddressStatus,
       "commonPort": commonPort,
       "commonPortTable": commonPortTable,
       "commonPortTableEntry": commonPortTableEntry,
       "commonPortNum": commonPortNum,
       "commonPortType": commonPortType,
       "commonPortStatus": commonPortStatus,
       "commonPortSpeed": commonPortSpeed,
       "commonPortAlarmState": commonPortAlarmState,
       "commonPortSignallingProtocolType": commonPortSignallingProtocolType,
       "commonPortSignallingState": commonPortSignallingState,
       "commonPortAssocLines": commonPortAssocLines,
       "commonPortAssocChannels": commonPortAssocChannels,
       "commonChannel": commonChannel,
       "commonChanTable": commonChanTable,
       "commonChanTableEntry": commonChanTableEntry,
       "commonChanNum": commonChanNum,
       "commonConnType": commonConnType,
       "commonChanStatus": commonChanStatus,
       "commonAlarmState": commonAlarmState,
       "commonChanPortNum": commonChanPortNum,
       "commonChanServiceType": commonChanServiceType,
       "commonChanIngrXmtState": commonChanIngrXmtState,
       "commonChanIngrRcvState": commonChanIngrRcvState,
       "commonChanEgrXmtState": commonChanEgrXmtState,
       "commonChanEgrRcvState": commonChanEgrRcvState,
       "commonConnParm1": commonConnParm1,
       "commonConnParm2": commonConnParm2,
       "cardResourcePartition": cardResourcePartition,
       "cardLcnPartitionType": cardLcnPartitionType,
       "cardResPartGrpTable": cardResPartGrpTable,
       "cardResPartGrpEntry": cardResPartGrpEntry,
       "cardResPartCtrlrNum": cardResPartCtrlrNum,
       "cardResPartRowStatus": cardResPartRowStatus,
       "cardResPartNumOfLcnAvail": cardResPartNumOfLcnAvail,
       "aumClockConfig": aumClockConfig,
       "primaryMuxClockSource": primaryMuxClockSource,
       "secondaryMuxClockSource": secondaryMuxClockSource,
       "currentClock": currentClock,
       "clockSwitchState": clockSwitchState,
       "extClockPresent": extClockPresent,
       "extClkSrcImpedance": extClkSrcImpedance,
       "extClkConnectorType": extClkConnectorType,
       "aumAddressTranslation": aumAddressTranslation,
       "aumAddressTranslationTable": aumAddressTranslationTable,
       "aumAddressTranslationEntry": aumAddressTranslationEntry,
       "connShelfNum": connShelfNum,
       "connSlotNum": connSlotNum,
       "connChanNum": connChanNum,
       "aumConnType": aumConnType,
       "connVPINum": connVPINum,
       "aumAddressTranslationDeleteTable": aumAddressTranslationDeleteTable,
       "aumAddressTranslationDeleteEntry": aumAddressTranslationDeleteEntry,
       "delShelfNum": delShelfNum,
       "delSlotNum": delSlotNum,
       "connNumOfValidEntries": connNumOfValidEntries,
       "bnmCounters": bnmCounters,
       "bnmPortCounterTable": bnmPortCounterTable,
       "bnmPortCounterEntry": bnmPortCounterEntry,
       "bnmPortCounterIndex": bnmPortCounterIndex,
       "bnmPortRcvCells": bnmPortRcvCells,
       "bnmPortXmtCells": bnmPortXmtCells,
       "bnmPortCounterClrButton": bnmPortCounterClrButton,
       "bnmPortRcvCellRate": bnmPortRcvCellRate,
       "bnmPortRcvUtilization": bnmPortRcvUtilization,
       "bnmPortXmtCellRate": bnmPortXmtCellRate,
       "bnmPortXmtUtilization": bnmPortXmtUtilization,
       "bnmPortCounterNumOfValidEntries": bnmPortCounterNumOfValidEntries,
       "bnmCellbusXmtCellCount": bnmCellbusXmtCellCount,
       "bnmCellbusNoAckCellCount": bnmCellbusNoAckCellCount,
       "bnmCellbusGrantCount": bnmCellbusGrantCount,
       "bnmEgressXmtCellCountDuringAlarm": bnmEgressXmtCellCountDuringAlarm,
       "bnmEgressInvalidCellCount": bnmEgressInvalidCellCount,
       "bnmEgressInvalidCellHdr": bnmEgressInvalidCellHdr,
       "bnmIngressInvalidCellCount": bnmIngressInvalidCellCount,
       "bnmIngressInvalidCellHdr": bnmIngressInvalidCellHdr,
       "bnmCountersClrButton": bnmCountersClrButton,
       "ascLineCnfSigLmiGrp": ascLineCnfSigLmiGrp,
       "ascCnfSigLmiGrpTable": ascCnfSigLmiGrpTable,
       "ascCnfSigLmiGrpEntry": ascCnfSigLmiGrpEntry,
       "ascLmiCnfLineNum": ascLmiCnfLineNum,
       "ascLmiVpi": ascLmiVpi,
       "ascLmiVci": ascLmiVci,
       "ascLmiEnabled": ascLmiEnabled,
       "ascLmiPollingEnabled": ascLmiPollingEnabled,
       "ascLmiPollingInterval": ascLmiPollingInterval,
       "ascLmiTimerT393": ascLmiTimerT393,
       "ascLmiTimerT394": ascLmiTimerT394,
       "ascLmiMaxRetryN394": ascLmiMaxRetryN394,
       "ascLmiMaxRetryN395": ascLmiMaxRetryN395,
       "ascLmiOperStatus": ascLmiOperStatus,
       "ascCntSigLmiGrp": ascCntSigLmiGrp,
       "ascCntSigLmiGrpTable": ascCntSigLmiGrpTable,
       "ascCntSigLmiGrpEntry": ascCntSigLmiGrpEntry,
       "ascLmiCntLineNum": ascLmiCntLineNum,
       "ascLmiStatusTx": ascLmiStatusTx,
       "ascLmiStatusEnqTx": ascLmiStatusEnqTx,
       "ascLmiStatusAckTx": ascLmiStatusAckTx,
       "ascLmiUpdateStatusTx": ascLmiUpdateStatusTx,
       "ascLmiStatusRx": ascLmiStatusRx,
       "ascLmiStatusEnqRx": ascLmiStatusEnqRx,
       "ascLmiStatusAckRx": ascLmiStatusAckRx,
       "ascLmiUpdateStatusRx": ascLmiUpdateStatusRx,
       "ascLmiInvalidPduRx": ascLmiInvalidPduRx,
       "ascLmiInvalidPduLenRx": ascLmiInvalidPduLenRx,
       "ascLmiUnknownPduRx": ascLmiUnknownPduRx,
       "ascLmiInvalidIeRx": ascLmiInvalidIeRx,
       "ascLmiInvalidTransaction": ascLmiInvalidTransaction,
       "ascLmiTimeoutFailure": ascLmiTimeoutFailure,
       "ascLmiNodeStatusTx": ascLmiNodeStatusTx,
       "ascLmiNodeStatusAckTx": ascLmiNodeStatusAckTx,
       "ascLmiNodeStatusRx": ascLmiNodeStatusRx,
       "ascLmiNodeStatusAckRx": ascLmiNodeStatusAckRx,
       "ascChanStateSigLmiGrp": ascChanStateSigLmiGrp,
       "ascChanStateSigLmiGrpTable": ascChanStateSigLmiGrpTable,
       "ascChanStateSigLmiGrpEntry": ascChanStateSigLmiGrpEntry,
       "ascLmiVccLineNum": ascLmiVccLineNum,
       "ascLmiVccVpi": ascLmiVccVpi,
       "ascLmiVccVci": ascLmiVccVci,
       "ascLmiXmtAbitState": ascLmiXmtAbitState,
       "ascLmiRcvAbitState": ascLmiRcvAbitState,
       "ascFeatures": ascFeatures,
       "redundancyAllowed": redundancyAllowed,
       "smFeatures": smFeatures,
       "channelizedAllowed": channelizedAllowed,
       "rateControlAllowed": rateControlAllowed,
       "svcAllowed": svcAllowed,
       "funiAllowed": funiAllowed,
       "imaAllowed": imaAllowed,
       "mulTrksAllowed": mulTrksAllowed,
       "egrQosFeature": egrQosFeature,
       "smRateControlConfig": smRateControlConfig,
       "rateUp": rateUp,
       "rateDown": rateDown,
       "rateFastDown": rateFastDown,
       "rtdMeasurementTime": rtdMeasurementTime,
       "qirTimeout": qirTimeout,
       "imatmClkCfgGrp": imatmClkCfgGrp,
       "primaryClockSource": primaryClockSource,
       "secondaryClockSource": secondaryClockSource,
       "currentClockSource": currentClockSource,
       "imatmDsx3CntrsGrp": imatmDsx3CntrsGrp,
       "imatmDsx3PortCntrsGrpTable": imatmDsx3PortCntrsGrpTable,
       "imatmDsx3PortCntrsEntry": imatmDsx3PortCntrsEntry,
       "imatmDsx3PortIndex": imatmDsx3PortIndex,
       "imatmDsx3PortRcvCells": imatmDsx3PortRcvCells,
       "imatmDsx3PortXmtCells": imatmDsx3PortXmtCells,
       "imatmPortRcvInvCells": imatmPortRcvInvCells,
       "imatmPortCntrClrButton": imatmPortCntrClrButton,
       "imatmDsx3PortLastMismatchVpiVci": imatmDsx3PortLastMismatchVpiVci,
       "imatmPortImaCtrlMatchCells": imatmPortImaCtrlMatchCells,
       "srm3T3CnfGrp": srm3T3CnfGrp,
       "srm3T3CnfGrpTable": srm3T3CnfGrpTable,
       "srm3T3CnfGrpEntry": srm3T3CnfGrpEntry,
       "srmT3LineNum": srmT3LineNum,
       "srmStartT1LineNum": srmStartT1LineNum,
       "srmT1RowStatus": srmT1RowStatus,
       "srmTargetSlotNum": srmTargetSlotNum,
       "srmTargetSlotLineNum": srmTargetSlotLineNum,
       "smCardUtilization": smCardUtilization,
       "cardOversubscribed": cardOversubscribed,
       "cardIngrPercentUtil": cardIngrPercentUtil,
       "bnmLineInterfaceMode": bnmLineInterfaceMode,
       "bnmLineInterfaceFormat": bnmLineInterfaceFormat,
       "imatmVpTrkGrp": imatmVpTrkGrp,
       "imatmVpTrkMapGrp": imatmVpTrkMapGrp,
       "imatmVpTrkMapGrpTable": imatmVpTrkMapGrpTable,
       "imatmVpTrkMapGrpTableEntry": imatmVpTrkMapGrpTableEntry,
       "imatmRangeNum": imatmRangeNum,
       "imatmTrkNum": imatmTrkNum,
       "imatmTrkMinVp": imatmTrkMinVp,
       "imatmTrkMaxVp": imatmTrkMaxVp,
       "imatmTrkOpType": imatmTrkOpType,
       "nextRangeNumAvail": nextRangeNumAvail,
       "imatmVpTrkClrGrp": imatmVpTrkClrGrp,
       "imatmVpTrkClrGrpTable": imatmVpTrkClrGrpTable,
       "imatmVpTrkClrGrpEntry": imatmVpTrkClrGrpEntry,
       "imatmClrVpTrkNum": imatmClrVpTrkNum,
       "imatmClrVpTrkButton": imatmClrVpTrkButton,
       "dsx3CardSpecCnfgGrp": dsx3CardSpecCnfgGrp,
       "imatmDsx3CardSpecConfigGrpTable": imatmDsx3CardSpecConfigGrpTable,
       "imatmDsx3CardSpecConfigEntry": imatmDsx3CardSpecConfigEntry,
       "imatmdsx3PortIndex": imatmdsx3PortIndex,
       "imatmDsx3SingleBitErrCorrEnable": imatmDsx3SingleBitErrCorrEnable,
       "pxmFeatures": pxmFeatures,
       "vsiControllersAllowed": vsiControllersAllowed,
       "apsCardAttributes": apsCardAttributes,
       "trkCACEnable": trkCACEnable,
       "pxmClockConfig": pxmClockConfig,
       "pxmPrimaryMuxClockSource": pxmPrimaryMuxClockSource,
       "pxmPrimaryInbandClockSourceLineNumber": pxmPrimaryInbandClockSourceLineNumber,
       "pxmPrimarySMClockSourceSlotNumber": pxmPrimarySMClockSourceSlotNumber,
       "pxmSecondaryMuxClockSource": pxmSecondaryMuxClockSource,
       "pxmSecondaryInbandClockSourceLineNumber": pxmSecondaryInbandClockSourceLineNumber,
       "pxmSecondarySMClockSourceSlotNumber": pxmSecondarySMClockSourceSlotNumber,
       "pxmCurrentClock": pxmCurrentClock,
       "pxmPreviousClock": pxmPreviousClock,
       "pxmExtClockPresent": pxmExtClockPresent,
       "pxmExtClkSrcImpedance": pxmExtClkSrcImpedance,
       "pxmExtClkConnectorType": pxmExtClkConnectorType,
       "pxmClkStratumLevel": pxmClkStratumLevel,
       "pxmClkErrReason": pxmClkErrReason,
       "pxmExtClock2Present": pxmExtClock2Present,
       "pxmExtClk2SrcImpedance": pxmExtClk2SrcImpedance,
       "pxmExtClk2ConnectorType": pxmExtClk2ConnectorType,
       "vismConfig": vismConfig,
       "vismIpGrp": vismIpGrp,
       "vismIpAddress": vismIpAddress,
       "vismSubNetMask": vismSubNetMask,
       "vismControlTos": vismControlTos,
       "vismBearerIpAddress": vismBearerIpAddress,
       "vismBearerSubNetMask": vismBearerSubNetMask,
       "vismVoIpGrp": vismVoIpGrp,
       "vismBearerTos": vismBearerTos,
       "vismRtcpRepInterval": vismRtcpRepInterval,
       "vismRtpReceiveTimer": vismRtpReceiveTimer,
       "vismPacketizationPeriod": vismPacketizationPeriod,
       "vismVoIpDtmfRelay": vismVoIpDtmfRelay,
       "vismVoIpCasTransport": vismVoIpCasTransport,
       "vismVoIpTripleRedundancy": vismVoIpTripleRedundancy,
       "vismVoIpVADTimer": vismVoIpVADTimer,
       "vismVoIpNTECapabilityNegotiate": vismVoIpNTECapabilityNegotiate,
       "vismVoIpSIDPayloadType": vismVoIpSIDPayloadType,
       "vismVoIpDPvcOamCellGap": vismVoIpDPvcOamCellGap,
       "vismVoIpDPvcRetryCnt": vismVoIpDPvcRetryCnt,
       "vismVoIpDPvcRecoverCnt": vismVoIpDPvcRecoverCnt,
       "vismRtcpRecvMultiplier": vismRtcpRecvMultiplier,
       "vismVoIpLapdTrunkPVC": vismVoIpLapdTrunkPVC,
       "vismVoIpEventNegotiationPolicy": vismVoIpEventNegotiationPolicy,
       "vismDspGrp": vismDspGrp,
       "vismEcanCnfIdlePattern": vismEcanCnfIdlePattern,
       "vismEcanCnfIdleDirection": vismEcanCnfIdleDirection,
       "vismCompCnfPacketSize": vismCompCnfPacketSize,
       "vismERL": vismERL,
       "vismJitterDelayMode": vismJitterDelayMode,
       "vismJitterInitialDelay": vismJitterInitialDelay,
       "vismAdaptiveGainControl": vismAdaptiveGainControl,
       "vismDspHealth": vismDspHealth,
       "vismUpspeedCodec": vismUpspeedCodec,
       "vismPayloadType": vismPayloadType,
       "vismSystemGrp": vismSystemGrp,
       "vismDaughterCardSerialNum": vismDaughterCardSerialNum,
       "vismDaughterCardDescription": vismDaughterCardDescription,
       "vismDaughterCardHWRev": vismDaughterCardHWRev,
       "vismEcanEncoding": vismEcanEncoding,
       "vismMode": vismMode,
       "vismPrevMode": vismPrevMode,
       "vismCacEnable": vismCacEnable,
       "vismAvailableDs0Count": vismAvailableDs0Count,
       "vismAppliedTemplate": vismAppliedTemplate,
       "vismTftpServerDn": vismTftpServerDn,
       "vismXgcpBearerNetworkType": vismXgcpBearerNetworkType,
       "vismXgcpBearerVCType": vismXgcpBearerVCType,
       "vismXgcpBearerConnectionType": vismXgcpBearerConnectionType,
       "vismBearerContinuityTimer": vismBearerContinuityTimer,
       "vismCodecNegotiationOption": vismCodecNegotiationOption,
       "vismProfileNegotiationOption": vismProfileNegotiationOption,
       "vismCarrierLossPolicy": vismCarrierLossPolicy,
       "vismCacRejectionPolicy": vismCacRejectionPolicy,
       "vismExtDnsServerDn": vismExtDnsServerDn,
       "vismFeatureBitMap": vismFeatureBitMap,
       "vismVADTolerance": vismVADTolerance,
       "vismVADDutyCycle": vismVADDutyCycle,
       "vismAggregateTrafficClipping": vismAggregateTrafficClipping,
       "vismAggregateSvcBandwidth": vismAggregateSvcBandwidth,
       "vismBearerContinuityTest": vismBearerContinuityTest,
       "vismCaleaEnable": vismCaleaEnable,
       "vismTrapObjGrp": vismTrapObjGrp,
       "vismConfigChangeTypeBitMap": vismConfigChangeTypeBitMap,
       "vismTrapIntIndex1": vismTrapIntIndex1,
       "vismTrapIntIndex2": vismTrapIntIndex2,
       "vismTrapStrIndex1": vismTrapStrIndex1,
       "vismAal2Grp": vismAal2Grp,
       "vismAal2SubcellMuxing": vismAal2SubcellMuxing,
       "vismAal2DtmfRelay": vismAal2DtmfRelay,
       "vismAal2CasTransport": vismAal2CasTransport,
       "vismAal2Type3Redundancy": vismAal2Type3Redundancy,
       "vismAal2VADTimer": vismAal2VADTimer,
       "vismAal2CidFillTimer": vismAal2CidFillTimer,
       "vismInteropGrp": vismInteropGrp,
       "vismXgcpSdpOst": vismXgcpSdpOst,
       "vismDynamicPT": vismDynamicPT,
       "smRasConfig": smRasConfig,
       "rasOamlpbkAllowed": rasOamlpbkAllowed,
       "rasOamlpbkFrequency": rasOamlpbkFrequency,
       "rasOamLpbkInfo": rasOamLpbkInfo,
       "chanPacketNumber": chanPacketNumber,
       "chanOAMstatus32": chanOAMstatus32,
       "chanOAMstatus64": chanOAMstatus64,
       "chanOAMstatus96": chanOAMstatus96,
       "chanOAMstatus128": chanOAMstatus128,
       "chanOAMstatus160": chanOAMstatus160,
       "chanOAMstatus192": chanOAMstatus192,
       "chanOAMstatus224": chanOAMstatus224,
       "chanOAMstatus256": chanOAMstatus256,
       "coreCardCommands": coreCardCommands,
       "switchCoreCard": switchCoreCard,
       "imaAutoRestartFeature": imaAutoRestartFeature,
       "imaAutoRestart": imaAutoRestart,
       "srmeCnfGrp": srmeCnfGrp,
       "srmeCnfGrpTable": srmeCnfGrpTable,
       "srmeCnfGrpEntry": srmeCnfGrpEntry,
       "srmeLineNum": srmeLineNum,
       "srmeStartVtNum": srmeStartVtNum,
       "srmeRowStatus": srmeRowStatus,
       "srmeTargetSlotNum": srmeTargetSlotNum,
       "srmeTargetSlotLineNum": srmeTargetSlotLineNum,
       "srmeVtFramingType": srmeVtFramingType,
       "serialInterface": serialInterface,
       "serialInterfaceTable": serialInterfaceTable,
       "serialInterfaceEntry": serialInterfaceEntry,
       "serialPortNum": serialPortNum,
       "serialPortType": serialPortType,
       "serialPortEnable": serialPortEnable,
       "serialPortbps": serialPortbps,
       "serialPortNumOfValidEntries": serialPortNumOfValidEntries,
       "ethernetInterface": ethernetInterface,
       "ethernetPhysicaAddress": ethernetPhysicaAddress,
       "x21CnfGrp": x21CnfGrp,
       "x21CnfGrpTable": x21CnfGrpTable,
       "x21CnfGrpEntry": x21CnfGrpEntry,
       "x21LineNum": x21LineNum,
       "x21LineEnable": x21LineEnable,
       "x21LineType": x21LineType,
       "x21LineRate": x21LineRate,
       "x21LineLoopbackCommand": x21LineLoopbackCommand,
       "x21LineSendCode": x21LineSendCode,
       "x21LineLoopbackCodeDetection": x21LineLoopbackCodeDetection,
       "x21ConnectorType": x21ConnectorType,
       "x21InvertClock": x21InvertClock,
       "x21LineInterfaceType": x21LineInterfaceType,
       "x21ClkFrequencyThreshold": x21ClkFrequencyThreshold,
       "serialLineRate": serialLineRate,
       "serialLineRateVariation": serialLineRateVariation,
       "x21LineNumofValidEntries": x21LineNumofValidEntries,
       "x21AlmCnfGrp": x21AlmCnfGrp,
       "x21AlmCnfGrpTable": x21AlmCnfGrpTable,
       "x21AlmCnfGrpEntry": x21AlmCnfGrpEntry,
       "x21AlmCnfLineNum": x21AlmCnfLineNum,
       "x21Severity": x21Severity,
       "x21AlmGrp": x21AlmGrp,
       "x21AlmGrpTable": x21AlmGrpTable,
       "x21AlmGrpEntry": x21AlmGrpEntry,
       "x21AlmLineNum": x21AlmLineNum,
       "x21LineAlarmState": x21LineAlarmState,
       "x21LineEIAStatus": x21LineEIAStatus,
       "x21AlarmClrButton": x21AlarmClrButton,
       "dsx0VismCnfTable": dsx0VismCnfTable,
       "dsx0VismCnfEntry": dsx0VismCnfEntry,
       "ds0IfIndex": ds0IfIndex,
       "ds0RobbedBitSignalling": ds0RobbedBitSignalling,
       "ds0IdleCode": ds0IdleCode,
       "ds0SeizedCode": ds0SeizedCode,
       "ds0ReceivedCode": ds0ReceivedCode,
       "ds0TransmitCodesEnable": ds0TransmitCodesEnable,
       "ds0BundleMapped": ds0BundleMapped,
       "ds0IfType": ds0IfType,
       "ds0CasVariantName": ds0CasVariantName,
       "ds0CasCadenceOnTime": ds0CasCadenceOnTime,
       "ds0CasCadenceOffTime": ds0CasCadenceOffTime,
       "ds0InsertLocalCas": ds0InsertLocalCas,
       "ds0LocalCasPattern": ds0LocalCasPattern,
       "ds0LoopbackCommand": ds0LoopbackCommand,
       "ds0CasParameterSource": ds0CasParameterSource,
       "ds0CasOnHookMinMakeTime": ds0CasOnHookMinMakeTime,
       "ds0CasOffHookMinMakeTime": ds0CasOffHookMinMakeTime,
       "ds0CasWinkMinMakeTime": ds0CasWinkMinMakeTime,
       "ds0CasWinkMaxMakeTime": ds0CasWinkMaxMakeTime,
       "ds0CasWinkBreakTime": ds0CasWinkBreakTime,
       "ds0CasGlareTime": ds0CasGlareTime,
       "ds0CasGaurdTime": ds0CasGaurdTime,
       "ds0CasDelayImmedStart": ds0CasDelayImmedStart,
       "ds0SignalingType": ds0SignalingType,
       "ds0CasMinDelayDialTime": ds0CasMinDelayDialTime,
       "ds0CasMinStartDialTime": ds0CasMinStartDialTime,
       "ds0CasFlashMinMakeTime": ds0CasFlashMinMakeTime,
       "ds0CasFlashMaxMakeTime": ds0CasFlashMaxMakeTime,
       "ds0CasDirectionality": ds0CasDirectionality,
       "ds0CasGlarePolicy": ds0CasGlarePolicy,
       "ds0CasIncomingMgcpPackage": ds0CasIncomingMgcpPackage,
       "ds0CasOutgoingMgcpPackage": ds0CasOutgoingMgcpPackage,
       "ds0InputGain": ds0InputGain,
       "ds0OutputAttenuation": ds0OutputAttenuation,
       "ds0MusicThreshold": ds0MusicThreshold,
       "ds0SidPacket": ds0SidPacket,
       "dsx0VismChanMapTable": dsx0VismChanMapTable,
       "dsx0VismChanMapEntry": dsx0VismChanMapEntry,
       "dsx1LineNum": dsx1LineNum,
       "ds0ChanNum": ds0ChanNum,
       "ds0ChanMapIfIndex": ds0ChanMapIfIndex,
       "frPortCnfPortGrp": frPortCnfPortGrp,
       "frPortCnfPortGrpTable": frPortCnfPortGrpTable,
       "frPortCnfPortGrpEntry": frPortCnfPortGrpEntry,
       "portNum": portNum,
       "portLineNum": portLineNum,
       "portRowStatus": portRowStatus,
       "portDs0ConfigBitMap": portDs0ConfigBitMap,
       "portDs0Speed": portDs0Speed,
       "portFlagsBetweenFrames": portFlagsBetweenFrames,
       "portEqueueServiceRatio": portEqueueServiceRatio,
       "portSpeed": portSpeed,
       "portAdmin": portAdmin,
       "portType": portType,
       "portSvcStatus": portSvcStatus,
       "portSvcInUse": portSvcInUse,
       "portSvcShareLcn": portSvcShareLcn,
       "portSvcLcnLow": portSvcLcnLow,
       "portSvcLcnHigh": portSvcLcnHigh,
       "portSvcDlciLow": portSvcDlciLow,
       "portSvcDlciHigh": portSvcDlciHigh,
       "portDeleteSvcs": portDeleteSvcs,
       "portIngrSvcBandW": portIngrSvcBandW,
       "portEgrSvcBandW": portEgrSvcBandW,
       "portBERTEnable": portBERTEnable,
       "portEnhancedSIW": portEnhancedSIW,
       "portM32EgrQueueThresh": portM32EgrQueueThresh,
       "portHeaderLen": portHeaderLen,
       "portFrameChkSumType": portFrameChkSumType,
       "portFileId": portFileId,
       "portOverSubEnable": portOverSubEnable,
       "portsUsedLine1": portsUsedLine1,
       "portsUsedLine2": portsUsedLine2,
       "portsUsedLine3": portsUsedLine3,
       "portsUsedLine4": portsUsedLine4,
       "portNextAvailable": portNextAvailable,
       "portsUsedLine5": portsUsedLine5,
       "portsUsedLine6": portsUsedLine6,
       "portsUsedLine7": portsUsedLine7,
       "portsUsedLine8": portsUsedLine8,
       "frPortsUsedLineGrpTable": frPortsUsedLineGrpTable,
       "frPortsUsedLineGrpEntry": frPortsUsedLineGrpEntry,
       "frPortsUsedLineIndex": frPortsUsedLineIndex,
       "frPortsUsedLine": frPortsUsedLine,
       "frPortCnfSigLMIGrp": frPortCnfSigLMIGrp,
       "frPortCnfSigLMIGrpTable": frPortCnfSigLMIGrpTable,
       "frPortCnfSigLMIGrpEntry": frPortCnfSigLMIGrpEntry,
       "lmiCnfPortNum": lmiCnfPortNum,
       "signallingProtocolType": signallingProtocolType,
       "asynchronousUpdates": asynchronousUpdates,
       "t391LinkIntegrityTimer": t391LinkIntegrityTimer,
       "t392PollingVerificationTimer": t392PollingVerificationTimer,
       "n391FullStatusPollingCounter": n391FullStatusPollingCounter,
       "n392ErrorThreshold": n392ErrorThreshold,
       "n393MonitoredEventCount": n393MonitoredEventCount,
       "enhancedLmi": enhancedLmi,
       "portFRF1Dot2Support": portFRF1Dot2Support,
       "frPortCnfSigCLLMGrp": frPortCnfSigCLLMGrp,
       "frPortCnfSigCLLMGrpTable": frPortCnfSigCLLMGrpTable,
       "frPortCnfSigCLLMGrpEntry": frPortCnfSigCLLMGrpEntry,
       "cllmCnfPortNum": cllmCnfPortNum,
       "cllmEnable": cllmEnable,
       "xmtCLLMStatusTimer": xmtCLLMStatusTimer,
       "rcvCLLMStatusTimer": rcvCLLMStatusTimer,
       "frPortCnfX21PortGrpTable": frPortCnfX21PortGrpTable,
       "frPortCnfX21PortGrpEntry": frPortCnfX21PortGrpEntry,
       "x21portNum": x21portNum,
       "x21portLineNum": x21portLineNum,
       "x21portRowStatus": x21portRowStatus,
       "x21portFlagsBetweenFrames": x21portFlagsBetweenFrames,
       "x21portEqueueServiceRatio": x21portEqueueServiceRatio,
       "x21portSpeed": x21portSpeed,
       "x21portAdmin": x21portAdmin,
       "x21portType": x21portType,
       "x21portSvcStatus": x21portSvcStatus,
       "x21portSvcInUse": x21portSvcInUse,
       "x21portSvcShareLcn": x21portSvcShareLcn,
       "x21portSvcLcnLow": x21portSvcLcnLow,
       "x21portSvcLcnHigh": x21portSvcLcnHigh,
       "x21portSvcDlciLow": x21portSvcDlciLow,
       "x21portSvcDlciHigh": x21portSvcDlciHigh,
       "x21portDeleteSvcs": x21portDeleteSvcs,
       "x21portIngrSvcBandW": x21portIngrSvcBandW,
       "x21portEgrSvcBandW": x21portEgrSvcBandW,
       "frPortServiceQueGrpTable": frPortServiceQueGrpTable,
       "frPortServiceQueGrpEntry": frPortServiceQueGrpEntry,
       "frServPortNum": frServPortNum,
       "portServiceQueueNo": portServiceQueueNo,
       "portEgresQDepth": portEgresQDepth,
       "portEgresECNThresh": portEgresECNThresh,
       "portEgresDEThresh": portEgresDEThresh,
       "portQBwInc": portQBwInc,
       "portBytesDiscXceedQueFull": portBytesDiscXceedQueFull,
       "portBytesDiscXceedDEThresh": portBytesDiscXceedDEThresh,
       "frPortCnfResPartGrpTable": frPortCnfResPartGrpTable,
       "frPortCnfResPartGrpEntry": frPortCnfResPartGrpEntry,
       "frResPartPortNum": frResPartPortNum,
       "frResPartCtrlrNum": frResPartCtrlrNum,
       "frResPartRowStatus": frResPartRowStatus,
       "frResPartNumOfLcnAvail": frResPartNumOfLcnAvail,
       "frResPartDlciLow": frResPartDlciLow,
       "frResPartDlciHigh": frResPartDlciHigh,
       "frResPartIngrPctBW": frResPartIngrPctBW,
       "frResPartEgrPctBW": frResPartEgrPctBW,
       "frResPartCtrlrID": frResPartCtrlrID,
       "frPortCntPortGrp": frPortCntPortGrp,
       "frPortCntPortGrpTable": frPortCntPortGrpTable,
       "frPortCntPortGrpEntry": frPortCntPortGrpEntry,
       "cntPortNum": cntPortNum,
       "rcvPortFrames": rcvPortFrames,
       "rcvPortBytes": rcvPortBytes,
       "rcvPortFramesDE": rcvPortFramesDE,
       "rcvPortFramesFECN": rcvPortFramesFECN,
       "rcvPortFramesBECN": rcvPortFramesBECN,
       "rcvFramesDiscCRCError": rcvFramesDiscCRCError,
       "rcvFramesDiscAlignmentError": rcvFramesDiscAlignmentError,
       "rcvFramesDiscIllegalLen": rcvFramesDiscIllegalLen,
       "rcvFramesDiscIllegalHeader": rcvFramesDiscIllegalHeader,
       "rcvFramesAbort": rcvFramesAbort,
       "rcvFramesUnknownDLCI": rcvFramesUnknownDLCI,
       "rcvLastUnknownDLCI": rcvLastUnknownDLCI,
       "rcvPortFramesTaggedFECN": rcvPortFramesTaggedFECN,
       "rcvPortFramesTaggedBECN": rcvPortFramesTaggedBECN,
       "rcvPortFramesTaggedDE": rcvPortFramesTaggedDE,
       "rcvPortFramesDiscXceedDEThresh": rcvPortFramesDiscXceedDEThresh,
       "rcvPortKbpsAIR": rcvPortKbpsAIR,
       "rcvBufNotAvailable": rcvBufNotAvailable,
       "xmtPortFrames": xmtPortFrames,
       "xmtPortBytes": xmtPortBytes,
       "xmtPortFramesFECN": xmtPortFramesFECN,
       "xmtPortFramesBECN": xmtPortFramesBECN,
       "xmtPortFramesDiscXceedQDepth": xmtPortFramesDiscXceedQDepth,
       "xmtPortBytesDiscXceedQDepth": xmtPortBytesDiscXceedQDepth,
       "xmtPortFramesDuringLMIAlarm": xmtPortFramesDuringLMIAlarm,
       "xmtPortBytesDuringLMIAlarm": xmtPortBytesDuringLMIAlarm,
       "xmtFramesAbort": xmtFramesAbort,
       "xmtFramesUnderrun": xmtFramesUnderrun,
       "xmtPortKbpsAIR": xmtPortKbpsAIR,
       "xmtBufNotAvailable": xmtBufNotAvailable,
       "portClrButton": portClrButton,
       "rcvFramesDiscNoChan": rcvFramesDiscNoChan,
       "rcvFramesDiscOverrun": rcvFramesDiscOverrun,
       "frPortCntSigLMIGrp": frPortCntSigLMIGrp,
       "frPortCntSigLMIGrpTable": frPortCntSigLMIGrpTable,
       "frPortCntSigLMIGrpEntry": frPortCntSigLMIGrpEntry,
       "lmiSigPortNum": lmiSigPortNum,
       "rcvStatusInquiry": rcvStatusInquiry,
       "rcvInvalidRequest": rcvInvalidRequest,
       "rcvUNISeqMismatch": rcvUNISeqMismatch,
       "xmtStatus": xmtStatus,
       "xmtAsynchUpdate": xmtAsynchUpdate,
       "uniSignalingTimeout": uniSignalingTimeout,
       "xmtStatusInquiry": xmtStatusInquiry,
       "rcvStatus": rcvStatus,
       "rcvAsynchUpdate": rcvAsynchUpdate,
       "rcvNNISeqMismatch": rcvNNISeqMismatch,
       "nniSignalingTimeout": nniSignalingTimeout,
       "frPortCntSigCLLMGrp": frPortCntSigCLLMGrp,
       "frPortCntSigCLLMGrpTable": frPortCntSigCLLMGrpTable,
       "frPortCntSigCLLMGrpEntry": frPortCntSigCLLMGrpEntry,
       "cllmSigPortNum": cllmSigPortNum,
       "rcvFramesCLLM": rcvFramesCLLM,
       "rcvBytesCLLM": rcvBytesCLLM,
       "xmtFramesCLLM": xmtFramesCLLM,
       "xmtBytesCLLM": xmtBytesCLLM,
       "cllmFailures": cllmFailures,
       "frPortStateGrp": frPortStateGrp,
       "frPortStateGrpTable": frPortStateGrpTable,
       "frPortStateGrpEntry": frPortStateGrpEntry,
       "statePortNum": statePortNum,
       "portState": portState,
       "portSignallingState": portSignallingState,
       "portOversubscribed": portOversubscribed,
       "portIngrPercentUtil": portIngrPercentUtil,
       "portEgrPercentUtil": portEgrPercentUtil,
       "frChanCnfGrp": frChanCnfGrp,
       "frChanCnfGrpTable": frChanCnfGrpTable,
       "frChanCnfGrpEntry": frChanCnfGrpEntry,
       "chanNum": chanNum,
       "chanRowStatus": chanRowStatus,
       "chanPortNum": chanPortNum,
       "dLCI": dLCI,
       "egressQSelect": egressQSelect,
       "ingressQDepth": ingressQDepth,
       "ingressQECNThresh": ingressQECNThresh,
       "ingressQDEThresh": ingressQDEThresh,
       "egressQDepth": egressQDepth,
       "egressQDEThresh": egressQDEThresh,
       "egressQECNThresh": egressQECNThresh,
       "deTaggingEnable": deTaggingEnable,
       "cir": cir,
       "bc": bc,
       "be": be,
       "ibs": ibs,
       "foreSightEnable": foreSightEnable,
       "qir": qir,
       "mir": mir,
       "pir": pir,
       "chanLocRmtLpbkState": chanLocRmtLpbkState,
       "chanTestType": chanTestType,
       "chanTestState": chanTestState,
       "chanRTDResult": chanRTDResult,
       "chanType": chanType,
       "chanFECNconfig": chanFECNconfig,
       "chanDEtoCLPmap": chanDEtoCLPmap,
       "chanCLPtoDEmap": chanCLPtoDEmap,
       "chanIngrPercentUtil": chanIngrPercentUtil,
       "chanEgrPercentUtil": chanEgrPercentUtil,
       "chanEgrSrvRate": chanEgrSrvRate,
       "chanOvrSubOvrRide": chanOvrSubOvrRide,
       "chanFrConnType": chanFrConnType,
       "frCDRNumber": frCDRNumber,
       "frLocalVpi": frLocalVpi,
       "frLocalVci": frLocalVci,
       "frLocalNSAP": frLocalNSAP,
       "frRemoteVpi": frRemoteVpi,
       "frRemoteVci": frRemoteVci,
       "frRemoteNSAP": frRemoteNSAP,
       "frMastership": frMastership,
       "frVpcFlag": frVpcFlag,
       "frConnServiceType": frConnServiceType,
       "frRoutingPriority": frRoutingPriority,
       "frMaxCost": frMaxCost,
       "frRestrictTrunkType": frRestrictTrunkType,
       "frConnPCR": frConnPCR,
       "frConnRemotePCR": frConnRemotePCR,
       "frConnMCR": frConnMCR,
       "frConnRemoteMCR": frConnRemoteMCR,
       "frConnPercentUtil": frConnPercentUtil,
       "frConnRemotePercentUtil": frConnRemotePercentUtil,
       "frConnForeSightEnable": frConnForeSightEnable,
       "frConnFGCRAEnable": frConnFGCRAEnable,
       "chanServType": chanServType,
       "chanServiceRateOverride": chanServiceRateOverride,
       "chanServiceRate": chanServiceRate,
       "zeroCirConEir": zeroCirConEir,
       "chanReroute": chanReroute,
       "frConnSCR": frConnSCR,
       "frConnRemoteSCR": frConnRemoteSCR,
       "frConnTemplateId": frConnTemplateId,
       "frConnAdminStatus": frConnAdminStatus,
       "frChanCnfChangeCount": frChanCnfChangeCount,
       "frChanCnfIgnoreIncomingDE": frChanCnfIgnoreIncomingDE,
       "frChanOamCCEnable": frChanOamCCEnable,
       "frChanStatsEnable": frChanStatsEnable,
       "frChanLocalLpbkEnable": frChanLocalLpbkEnable,
       "frChanUpcEnable": frChanUpcEnable,
       "frChanSlaveType": frChanSlaveType,
       "frConnRemoteMBS": frConnRemoteMBS,
       "chanNumNextAvailable": chanNumNextAvailable,
       "frstdABRCnfGrpTable": frstdABRCnfGrpTable,
       "frstdABRCnfGrpEntry": frstdABRCnfGrpEntry,
       "frstdABRcnfChanNum": frstdABRcnfChanNum,
       "frstdABRTBE": frstdABRTBE,
       "frstdABRFRTT": frstdABRFRTT,
       "frstdABRRDF": frstdABRRDF,
       "frstdABRRIF": frstdABRRIF,
       "frstdABRNrm": frstdABRNrm,
       "frstdABRTrm": frstdABRTrm,
       "frstdABRCDF": frstdABRCDF,
       "frstdABRADTF": frstdABRADTF,
       "frstdABRICR": frstdABRICR,
       "frstdABRMCR": frstdABRMCR,
       "frstdABRPCR": frstdABRPCR,
       "frChanStateGrp": frChanStateGrp,
       "frChanStateGrpTable": frChanStateGrpTable,
       "frChanStateGrpEntry": frChanStateGrpEntry,
       "stateChanNum": stateChanNum,
       "chanState": chanState,
       "xmtAbitState": xmtAbitState,
       "rcvAbitState": rcvAbitState,
       "xmtATMState": xmtATMState,
       "rcvATMState": rcvATMState,
       "chanStatusBitMap": chanStatusBitMap,
       "frChanCntGrp": frChanCntGrp,
       "frChanCntGrpTable": frChanCntGrpTable,
       "frChanCntGrpEntry": frChanCntGrpEntry,
       "cntChanNum": cntChanNum,
       "rcvFrames": rcvFrames,
       "rcvBytes": rcvBytes,
       "rcvFramesDE": rcvFramesDE,
       "rcvBytesDE": rcvBytesDE,
       "rcvFramesDiscard": rcvFramesDiscard,
       "rcvBytesDiscard": rcvBytesDiscard,
       "rcvFramesDiscShelfAlarm": rcvFramesDiscShelfAlarm,
       "rcvFramesDiscXceedQDepth": rcvFramesDiscXceedQDepth,
       "rcvBytesDiscXceedQDepth": rcvBytesDiscXceedQDepth,
       "rcvFramesDiscXceedDEThresh": rcvFramesDiscXceedDEThresh,
       "rcvFramesFECN": rcvFramesFECN,
       "rcvFramesBECN": rcvFramesBECN,
       "rcvFramesTaggedFECN": rcvFramesTaggedFECN,
       "rcvFramesTaggedBECN": rcvFramesTaggedBECN,
       "rcvFramesTaggedDE": rcvFramesTaggedDE,
       "rcvBytesTaggedDE": rcvBytesTaggedDE,
       "rcvKbpsAIR": rcvKbpsAIR,
       "xmtFrames": xmtFrames,
       "xmtBytes": xmtBytes,
       "xmtFramesFECN": xmtFramesFECN,
       "xmtFramesBECN": xmtFramesBECN,
       "xmtFramesDE": xmtFramesDE,
       "xmtBytesDE": xmtBytesDE,
       "xmtFramesDiscard": xmtFramesDiscard,
       "xmtBytesDiscard": xmtBytesDiscard,
       "xmtFramesDiscXceedQDepth": xmtFramesDiscXceedQDepth,
       "xmtBytesDiscXceedQDepth": xmtBytesDiscXceedQDepth,
       "xmtFramesDiscXceedDEThresh": xmtFramesDiscXceedDEThresh,
       "xmtFramesDiscPhyLayerFail": xmtFramesDiscPhyLayerFail,
       "xmtFramesDiscCRCError": xmtFramesDiscCRCError,
       "xmtFramesDiscReassmFail": xmtFramesDiscReassmFail,
       "xmtFramesDiscSrcAbort": xmtFramesDiscSrcAbort,
       "xmtFramesDuringLMIAlarm": xmtFramesDuringLMIAlarm,
       "xmtBytesDuringLMIAlarm": xmtBytesDuringLMIAlarm,
       "xmtFramesTaggedFECN": xmtFramesTaggedFECN,
       "xmtFramesTaggedBECN": xmtFramesTaggedBECN,
       "xmtKbpsAIR": xmtKbpsAIR,
       "chanClrButton": chanClrButton,
       "xmtFramesTaggedDE": xmtFramesTaggedDE,
       "xmtBytesTaggedDE": xmtBytesTaggedDE,
       "rcvFramesDiscUPC": rcvFramesDiscUPC,
       "chanSecUpTime": chanSecUpTime,
       "xmtFramesInvalidCPIs": xmtFramesInvalidCPIs,
       "xmtFramesLengthViolations": xmtFramesLengthViolations,
       "xmtFramesOversizedSDUs": xmtFramesOversizedSDUs,
       "xmtFramesUnknownProtocols": xmtFramesUnknownProtocols,
       "rcvFramesUnknownProtocols": rcvFramesUnknownProtocols,
       "frEndPtMapGrp": frEndPtMapGrp,
       "frEndPtMapGrpTable": frEndPtMapGrpTable,
       "frEndPtMapGrpEntry": frEndPtMapGrpEntry,
       "endPortNum": endPortNum,
       "endDLCI": endDLCI,
       "endChanNum": endChanNum,
       "endLineNum": endLineNum,
       "ausmPortCnfPortGrp": ausmPortCnfPortGrp,
       "ausmPortCnfPortGrpTable": ausmPortCnfPortGrpTable,
       "ausmPortCnfPortGrpEntry": ausmPortCnfPortGrpEntry,
       "ausmPortNum": ausmPortNum,
       "portEnable": portEnable,
       "ausmPortType": ausmPortType,
       "ausmPortIfType": ausmPortIfType,
       "ausmPortSpeed": ausmPortSpeed,
       "ausmLineNum": ausmLineNum,
       "ausmPortCnfServiceQueGrp": ausmPortCnfServiceQueGrp,
       "ausmPortCnfServiceQueGrpTable": ausmPortCnfServiceQueGrpTable,
       "ausmPortCnfServiceQueGrpEntry": ausmPortCnfServiceQueGrpEntry,
       "egrQIndex": egrQIndex,
       "servicePortNum": servicePortNum,
       "egrQBinState": egrQBinState,
       "egrQServiceSequence": egrQServiceSequence,
       "egrQDepthMax": egrQDepthMax,
       "egrQCLPThreshHigh": egrQCLPThreshHigh,
       "egrQCLPThreshLow": egrQCLPThreshLow,
       "egrQEfciThresh": egrQEfciThresh,
       "egrQAlgorithm": egrQAlgorithm,
       "egrMaxBwInc": egrMaxBwInc,
       "egrMinBwInc": egrMinBwInc,
       "egrQCLPState": egrQCLPState,
       "egrQfullDiscardCells": egrQfullDiscardCells,
       "egrQClpSetDiscardCells": egrQClpSetDiscardCells,
       "ausmPortCnfSig": ausmPortCnfSig,
       "ausmPortCnfSigILMIGrp": ausmPortCnfSigILMIGrp,
       "ausmPortCnfSigILMIGrpTable": ausmPortCnfSigILMIGrpTable,
       "ausmPortCnfSigILMIGrpEntry": ausmPortCnfSigILMIGrpEntry,
       "sigPortNum": sigPortNum,
       "ausmSignallingProtocolType": ausmSignallingProtocolType,
       "signallingVpi": signallingVpi,
       "signallingVci": signallingVci,
       "addrPrefix": addrPrefix,
       "customerId": customerId,
       "protocolRevNo": protocolRevNo,
       "iLMITrapEnable": iLMITrapEnable,
       "minTrapInterval": minTrapInterval,
       "keepAlivePollingEnable": keepAlivePollingEnable,
       "errorThresholdN491": errorThresholdN491,
       "eventThresholdN492": eventThresholdN492,
       "pollingIntervalT491": pollingIntervalT491,
       "minEnquiryIntervalT493": minEnquiryIntervalT493,
       "addrRegEnable": addrRegEnable,
       "ausmPortCnfPortImaGrp": ausmPortCnfPortImaGrp,
       "ausmPortCnfPortImaGrpTable": ausmPortCnfPortImaGrpTable,
       "ausmPortCnfPortImaGrpEntry": ausmPortCnfPortImaGrpEntry,
       "imaPortNum": imaPortNum,
       "imaPortEnable": imaPortEnable,
       "imaPortSpeed": imaPortSpeed,
       "numLinksInImaGrp": numLinksInImaGrp,
       "listOfLinksInImaGrp": listOfLinksInImaGrp,
       "lcpCellsPeriodicity": lcpCellsPeriodicity,
       "lcpDelayTolerance": lcpDelayTolerance,
       "readPtrWrPtrDiff": readPtrWrPtrDiff,
       "numRedundantLinks": numRedundantLinks,
       "maxTolerableDiffDelay": maxTolerableDiffDelay,
       "imaPortType": imaPortType,
       "axisImaGroupTxAvailCellRate": axisImaGroupTxAvailCellRate,
       "axisImaGroupSymmetry": axisImaGroupSymmetry,
       "axisImaGroupMinNumRxLinks": axisImaGroupMinNumRxLinks,
       "axisImaGroupNeTxClkMode": axisImaGroupNeTxClkMode,
       "axisImaGroupAlphaValue": axisImaGroupAlphaValue,
       "axisImaGroupBetaValue": axisImaGroupBetaValue,
       "axisImaGroupGammaValue": axisImaGroupGammaValue,
       "axisImaGroupNumRxCfgLnks": axisImaGroupNumRxCfgLnks,
       "axisImaGroupTestLinkIfIndex": axisImaGroupTestLinkIfIndex,
       "axisImaGroupTestPattern": axisImaGroupTestPattern,
       "axisImaGroupTestProcStatus": axisImaGroupTestProcStatus,
       "axisImaGroupIntegrationUpTime": axisImaGroupIntegrationUpTime,
       "axisImaGroupIntegrationDownTime": axisImaGroupIntegrationDownTime,
       "axisImaGroupMinNumTxLinks": axisImaGroupMinNumTxLinks,
       "axisImaGroupRxImaId": axisImaGroupRxImaId,
       "nextPortNumAvailable": nextPortNumAvailable,
       "ausmPortCnfResPartGrp": ausmPortCnfResPartGrp,
       "ausmPortCnfResPartGrpTable": ausmPortCnfResPartGrpTable,
       "ausmPortCnfResPartGrpEntry": ausmPortCnfResPartGrpEntry,
       "ausmResPartPortNum": ausmResPartPortNum,
       "ausmPortSvcInUse": ausmPortSvcInUse,
       "ausmPortSvcShareLcnVpid": ausmPortSvcShareLcnVpid,
       "ausmPortSvcLcnLow": ausmPortSvcLcnLow,
       "ausmPortSvcLcnHigh": ausmPortSvcLcnHigh,
       "ausmPortSvcVpidLow": ausmPortSvcVpidLow,
       "ausmPortSvcVpidHigh": ausmPortSvcVpidHigh,
       "ausmPortSvcVciLow": ausmPortSvcVciLow,
       "ausmPortSvcVciHigh": ausmPortSvcVciHigh,
       "ausmPortSvcVpiLow": ausmPortSvcVpiLow,
       "ausmPortSvcVpiHigh": ausmPortSvcVpiHigh,
       "ausmPortIngrSvcBandW": ausmPortIngrSvcBandW,
       "ausmPortEgrSvcBandW": ausmPortEgrSvcBandW,
       "ausmPortDelSvcsGrp": ausmPortDelSvcsGrp,
       "ausmPortDelSvcsGrpTable": ausmPortDelSvcsGrpTable,
       "ausmPortDelSvcsGrpEntry": ausmPortDelSvcsGrpEntry,
       "ausmDelSvcsPortNum": ausmDelSvcsPortNum,
       "ausmPortDeleteSvcs": ausmPortDeleteSvcs,
       "ausmPortImaGrpRestart": ausmPortImaGrpRestart,
       "ausmPortImaGrpRestartTable": ausmPortImaGrpRestartTable,
       "ausmPortImaGrpRestartEntry": ausmPortImaGrpRestartEntry,
       "axisImaGroupimaPortNum": axisImaGroupimaPortNum,
       "axisImaGroupRestartImaGrp": axisImaGroupRestartImaGrp,
       "ausmPortStateGrp": ausmPortStateGrp,
       "ausmPortStateGrpTable": ausmPortStateGrpTable,
       "ausmPortStateGrpEntry": ausmPortStateGrpEntry,
       "ausmStatePortNum": ausmStatePortNum,
       "ausmPortState": ausmPortState,
       "ausmPortOversubscribed": ausmPortOversubscribed,
       "ausmPortIngrPercentUtil": ausmPortIngrPercentUtil,
       "ausmPortEgrPercentUtil": ausmPortEgrPercentUtil,
       "ausmPortCntPortGrp": ausmPortCntPortGrp,
       "ausmPortCntPortGrpTable": ausmPortCntPortGrpTable,
       "ausmPortCntPortGrpEntry": ausmPortCntPortGrpEntry,
       "ausmCntPortNum": ausmCntPortNum,
       "ingrRcvCells": ingrRcvCells,
       "ingrGfcErrCells": ingrGfcErrCells,
       "ingrVpiVciErrCells": ingrVpiVciErrCells,
       "ingrLastUnknVpiVci": ingrLastUnknVpiVci,
       "egrXmtCells": egrXmtCells,
       "egrPortAlarmDiscardCells": egrPortAlarmDiscardCells,
       "egrXmtClpSetCells": egrXmtClpSetCells,
       "egrXmtEfciSetCells": egrXmtEfciSetCells,
       "portXmtAisCells": portXmtAisCells,
       "portXmtSgmtLpbkCells": portXmtSgmtLpbkCells,
       "portRcvAisCells": portRcvAisCells,
       "portRcvFerfCells": portRcvFerfCells,
       "portRcvSgmtLpbkCells": portRcvSgmtLpbkCells,
       "portRcvCrcErrOAMCells": portRcvCrcErrOAMCells,
       "ausmPortClrButton": ausmPortClrButton,
       "ingrRcvClpSetCells": ingrRcvClpSetCells,
       "ingrXmtCells": ingrXmtCells,
       "egrRcvCells": egrRcvCells,
       "ingrRcvCellRate": ingrRcvCellRate,
       "ingrRcvUtilization": ingrRcvUtilization,
       "egrXmtCellRate": egrXmtCellRate,
       "egrXmtUtilization": egrXmtUtilization,
       "egrRcvCellRate": egrRcvCellRate,
       "egrRcvUtilization": egrRcvUtilization,
       "totalIngrQfulldiscardCells": totalIngrQfulldiscardCells,
       "txFifoFullCnt": txFifoFullCnt,
       "totalIngrClpSetDiscardCells": totalIngrClpSetDiscardCells,
       "ausmPortCntSig": ausmPortCntSig,
       "ausmPortCntSigILMIGrp": ausmPortCntSigILMIGrp,
       "ausmPortCntSigILMIGrpTable": ausmPortCntSigILMIGrpTable,
       "ausmPortCntSigILMIGrpEntry": ausmPortCntSigILMIGrpEntry,
       "sigCntPortNum": sigCntPortNum,
       "snmpPduReceived": snmpPduReceived,
       "getRequestReceived": getRequestReceived,
       "getNextRequestReceived": getNextRequestReceived,
       "setRequestReceived": setRequestReceived,
       "trapReceived": trapReceived,
       "getResponseReceived": getResponseReceived,
       "getResponseTransmitted": getResponseTransmitted,
       "getRequestTransmitted": getRequestTransmitted,
       "trapTransmitted": trapTransmitted,
       "invalidPDUReceived": invalidPDUReceived,
       "asn1ParseError": asn1ParseError,
       "noSuchNameError": noSuchNameError,
       "tooBigError": tooBigError,
       "portSigClrButton": portSigClrButton,
       "ausmPortCntPortImaGrp": ausmPortCntPortImaGrp,
       "ausmPortCntPortImaGrpTable": ausmPortCntPortImaGrpTable,
       "ausmPortCntPortImaGrpEntry": ausmPortCntPortImaGrpEntry,
       "imaCntPortNum": imaCntPortNum,
       "rcvAcpCells": rcvAcpCells,
       "rcvAcpErrCells": rcvAcpErrCells,
       "xmtAcpCells": xmtAcpCells,
       "xmtAcpCellsMissed": xmtAcpCellsMissed,
       "imaGrpRcvHecErrCount": imaGrpRcvHecErrCount,
       "imaGrpRcvHecErrSecCount": imaGrpRcvHecErrSecCount,
       "imaGrpRcvHecErrSESecCount": imaGrpRcvHecErrSESecCount,
       "imaCntClrButton": imaCntClrButton,
       "axisImaGroupRunningSecs": axisImaGroupRunningSecs,
       "axisImaGroupUnavailSecs": axisImaGroupUnavailSecs,
       "axisImaGroupNeNumFailures": axisImaGroupNeNumFailures,
       "axisImaGroupFeNumFailures": axisImaGroupFeNumFailures,
       "ausmPortStateImaGrp": ausmPortStateImaGrp,
       "ausmPortStateImaGrpTable": ausmPortStateImaGrpTable,
       "ausmPortStateImaGrpEntry": ausmPortStateImaGrpEntry,
       "imaStatePortNum": imaStatePortNum,
       "imaPortState": imaPortState,
       "numLinksPresentInImaGroup": numLinksPresentInImaGroup,
       "listLinksPresentInImaGroup": listLinksPresentInImaGroup,
       "remoteImaId": remoteImaId,
       "locImaId": locImaId,
       "imaArbitrationWinner": imaArbitrationWinner,
       "imaObsDiffDelay": imaObsDiffDelay,
       "imaPortOversubscribed": imaPortOversubscribed,
       "imaPortIngrPercentUtil": imaPortIngrPercentUtil,
       "imaPortEgrPercentUtil": imaPortEgrPercentUtil,
       "axisImaGroupRxAvailCellRate": axisImaGroupRxAvailCellRate,
       "axisImaGroupFeState": axisImaGroupFeState,
       "axisImaGroupFailureStatus": axisImaGroupFailureStatus,
       "axisImaGroupFeTxClkMode": axisImaGroupFeTxClkMode,
       "axisImaGroupTxTimingRefLink": axisImaGroupTxTimingRefLink,
       "axisImaGroupRxTimingRefLink": axisImaGroupRxTimingRefLink,
       "axisImaGroupLastChange": axisImaGroupLastChange,
       "axisImaGroupRxFrameLength": axisImaGroupRxFrameLength,
       "axisImaGroupLeastDelayLink": axisImaGroupLeastDelayLink,
       "axisImaGroupNumRxActLnks": axisImaGroupNumRxActLnks,
       "axisImaGroupNeState": axisImaGroupNeState,
       "axisImaGroupNumber": axisImaGroupNumber,
       "ausmPortInterfaceGrp": ausmPortInterfaceGrp,
       "ausmInterfaceConfTable": ausmInterfaceConfTable,
       "ausmInterfaceConfEntry": ausmInterfaceConfEntry,
       "ausmInterfacePortNum": ausmInterfacePortNum,
       "ausmInterfaceMyNeighborIpAddress": ausmInterfaceMyNeighborIpAddress,
       "ausmChanCnfGrp": ausmChanCnfGrp,
       "ausmChanCnfGrpTable": ausmChanCnfGrpTable,
       "ausmChanCnfGrpEntry": ausmChanCnfGrpEntry,
       "ausmChanNum": ausmChanNum,
       "ausmChanRowStatus": ausmChanRowStatus,
       "chanConnType": chanConnType,
       "chanServiceType": chanServiceType,
       "chanConnDesc": chanConnDesc,
       "chanSvcFlag": chanSvcFlag,
       "chanSvcConnId": chanSvcConnId,
       "ausmChanPortNum": ausmChanPortNum,
       "chanVpi": chanVpi,
       "chanVci": chanVci,
       "chanEgrQSelect": chanEgrQSelect,
       "ingrQDepth": ingrQDepth,
       "ingrQCLPThreshHigh": ingrQCLPThreshHigh,
       "ingrQCLPThreshLow": ingrQCLPThreshLow,
       "ingrQCLPState": ingrQCLPState,
       "ingrQEfciThresh": ingrQEfciThresh,
       "ingrUpcEnable": ingrUpcEnable,
       "ingrUpcPCR01": ingrUpcPCR01,
       "ingrUpcCIR": ingrUpcCIR,
       "ingrUpcCCDV": ingrUpcCCDV,
       "ingrUpcCBS": ingrUpcCBS,
       "ingrUpcIBS": ingrUpcIBS,
       "ingrUpcMFS": ingrUpcMFS,
       "ingrUpcSCRPolicing": ingrUpcSCRPolicing,
       "ingrUpcPCR0": ingrUpcPCR0,
       "ingrUpcCDVT0": ingrUpcCDVT0,
       "ingrUpcCLPTagEnable": ingrUpcCLPTagEnable,
       "ingrUpcFGCRAEnable": ingrUpcFGCRAEnable,
       "foresightEnable": foresightEnable,
       "foresightMIR": foresightMIR,
       "foresightPIR": foresightPIR,
       "foresightQIR": foresightQIR,
       "ausmChanLocRmtLpbkState": ausmChanLocRmtLpbkState,
       "ausmChanTestType": ausmChanTestType,
       "ausmChanTestState": ausmChanTestState,
       "ausmChanRTDResult": ausmChanRTDResult,
       "ausmChanTestTypeCPESide": ausmChanTestTypeCPESide,
       "ausmChanTestStateCPESide": ausmChanTestStateCPESide,
       "ausmChanIngrPercentUtil": ausmChanIngrPercentUtil,
       "ausmChanEgrPercentUtil": ausmChanEgrPercentUtil,
       "ausmChanEgrSrvRate": ausmChanEgrSrvRate,
       "ausmChanOvrSubOvrRide": ausmChanOvrSubOvrRide,
       "ausmChanLocalVpId": ausmChanLocalVpId,
       "ausmChanRMEnable": ausmChanRMEnable,
       "ausmIngrDiscardOption": ausmIngrDiscardOption,
       "ausmIngrFrDiscardThreshold": ausmIngrFrDiscardThreshold,
       "ausmCDRNumber": ausmCDRNumber,
       "ausmLocalVpi": ausmLocalVpi,
       "ausmLocalVci": ausmLocalVci,
       "ausmLocalNSAP": ausmLocalNSAP,
       "ausmRemoteVpi": ausmRemoteVpi,
       "ausmRemoteVci": ausmRemoteVci,
       "ausmRemoteNSAP": ausmRemoteNSAP,
       "ausmMastership": ausmMastership,
       "ausmVpcFlag": ausmVpcFlag,
       "ausmConnServiceType": ausmConnServiceType,
       "ausmRoutingPriority": ausmRoutingPriority,
       "ausmMaxCost": ausmMaxCost,
       "ausmRestrictTrunkType": ausmRestrictTrunkType,
       "ausmConnPCR": ausmConnPCR,
       "ausmConnMCR": ausmConnMCR,
       "ausmConnPercentUtil": ausmConnPercentUtil,
       "ausmConnRemotePCR": ausmConnRemotePCR,
       "ausmConnRemoteMCR": ausmConnRemoteMCR,
       "ausmConnRemotePercentUtil": ausmConnRemotePercentUtil,
       "ausmConnForeSightEnable": ausmConnForeSightEnable,
       "ausmConnFGCRAEnable": ausmConnFGCRAEnable,
       "ausmChanReroute": ausmChanReroute,
       "ausmConnSCR": ausmConnSCR,
       "ausmConnRemoteSCR": ausmConnRemoteSCR,
       "ausmConnMBS": ausmConnMBS,
       "ausmConnRemoteMBS": ausmConnRemoteMBS,
       "ausmConnTemplateId": ausmConnTemplateId,
       "ausmConnAdminStatus": ausmConnAdminStatus,
       "ausmChanNumNextAvailable": ausmChanNumNextAvailable,
       "ausmChanVpIdNextAvailable": ausmChanVpIdNextAvailable,
       "ausmStdABRCnfGrpTable": ausmStdABRCnfGrpTable,
       "ausmStdABRCnfGrpEntry": ausmStdABRCnfGrpEntry,
       "ausmStdABRCnfChanNum": ausmStdABRCnfChanNum,
       "ausmStdABRType": ausmStdABRType,
       "ausmStdABRTBE": ausmStdABRTBE,
       "ausmStdABRFRTT": ausmStdABRFRTT,
       "ausmStdABRRDF": ausmStdABRRDF,
       "ausmStdABRRIF": ausmStdABRRIF,
       "ausmStdABRNrm": ausmStdABRNrm,
       "ausmStdABRTrm": ausmStdABRTrm,
       "ausmStdABRCDF": ausmStdABRCDF,
       "ausmStdABRADTF": ausmStdABRADTF,
       "ausmStdABRICR": ausmStdABRICR,
       "ausmStdABRMCR": ausmStdABRMCR,
       "ausmStdABRPCR": ausmStdABRPCR,
       "ausmChanStateGrp": ausmChanStateGrp,
       "ausmChanStateGrpTable": ausmChanStateGrpTable,
       "ausmChanStateGrpEntry": ausmChanStateGrpEntry,
       "ausmStateChanNum": ausmStateChanNum,
       "ausmChanState": ausmChanState,
       "chanEgrXmtState": chanEgrXmtState,
       "chanIngrRcvState": chanIngrRcvState,
       "chanIngrXmtState": chanIngrXmtState,
       "chanEgrRcvState": chanEgrRcvState,
       "ausmChanStatusBitMap": ausmChanStatusBitMap,
       "ausmChanCntGrp": ausmChanCntGrp,
       "ausmChanCntGrpTable": ausmChanCntGrpTable,
       "ausmChanCntGrpEntry": ausmChanCntGrpEntry,
       "ausmCntChanNum": ausmCntChanNum,
       "chanSecInService": chanSecInService,
       "chanCongestMinutes": chanCongestMinutes,
       "chanIngrPeakQDepth": chanIngrPeakQDepth,
       "chanIngrRcvCells": chanIngrRcvCells,
       "chanIngrClpSetRcvCells": chanIngrClpSetRcvCells,
       "chanIngrEfciSetRcvCells": chanIngrEfciSetRcvCells,
       "chanIngrQfullDiscardCells": chanIngrQfullDiscardCells,
       "chanIngrClpSetDiscardCells": chanIngrClpSetDiscardCells,
       "chanIngrUpcClpSetCells": chanIngrUpcClpSetCells,
       "chanIngrXmtCells": chanIngrXmtCells,
       "chanShelfAlarmDiscardCells": chanShelfAlarmDiscardCells,
       "ausmChanClrButton": ausmChanClrButton,
       "chanEpdDiscCells": chanEpdDiscCells,
       "chanPpdDiscCells": chanPpdDiscCells,
       "chanIngrRcvCellRate": chanIngrRcvCellRate,
       "chanIngrRcvUtilization": chanIngrRcvUtilization,
       "chanIngrXmtCellRate": chanIngrXmtCellRate,
       "chanIngrXmtUtilization": chanIngrXmtUtilization,
       "chanEgrRcvCellRate": chanEgrRcvCellRate,
       "chanEgrRcvUtilization": chanEgrRcvUtilization,
       "chanIngrXmtAAL5Frames": chanIngrXmtAAL5Frames,
       "chanIngrEfciSetXmtCells": chanIngrEfciSetXmtCells,
       "chanEgrPortQfullDiscardCells": chanEgrPortQfullDiscardCells,
       "chanEgrPortQClpThresDiscardCells": chanEgrPortQClpThresDiscardCells,
       "chanTxFifoFullCnt": chanTxFifoFullCnt,
       "chanIngrCurrQDepth": chanIngrCurrQDepth,
       "ausmEndPointMapGrp": ausmEndPointMapGrp,
       "ausmEndPointMapGrpTable": ausmEndPointMapGrpTable,
       "ausmEndPointMapGrpEntry": ausmEndPointMapGrpEntry,
       "ausmEndPortNum": ausmEndPortNum,
       "endVpi": endVpi,
       "endVci": endVci,
       "ausmEndChanNum": ausmEndChanNum,
       "endChanType": endChanType,
       "atmLineCnfTable": atmLineCnfTable,
       "atmLineCnfEntry": atmLineCnfEntry,
       "atmLineCnfNum": atmLineCnfNum,
       "atmLineInterfaceFormat": atmLineInterfaceFormat,
       "atmLineCntTable": atmLineCntTable,
       "atmLineCntEntry": atmLineCntEntry,
       "atmLineNum": atmLineNum,
       "atmLineTotalRcvCells": atmLineTotalRcvCells,
       "atmLineTotalXmtCells": atmLineTotalXmtCells,
       "atmLineRcvHecErrorCells": atmLineRcvHecErrorCells,
       "atmLineCntClrButton": atmLineCntClrButton,
       "bbIfCnfPortGrp": bbIfCnfPortGrp,
       "bbIfCnfPortGrpTable": bbIfCnfPortGrpTable,
       "bbIfCnfPortGrpEntry": bbIfCnfPortGrpEntry,
       "bbIfNum": bbIfNum,
       "bbIfRowStatus": bbIfRowStatus,
       "bbIfAdmin": bbIfAdmin,
       "bbIfLineNum": bbIfLineNum,
       "bbIfIngrPctBandwidth": bbIfIngrPctBandwidth,
       "bbIfEgrPctBandwidth": bbIfEgrPctBandwidth,
       "bbIfMinVpi": bbIfMinVpi,
       "bbIfMaxVpi": bbIfMaxVpi,
       "bbIfSpeed": bbIfSpeed,
       "bbIfMaxCellRatePct": bbIfMaxCellRatePct,
       "nextBbIfNumAvailable": nextBbIfNumAvailable,
       "bbIfCnfSigILMIGrp": bbIfCnfSigILMIGrp,
       "bbIfCnfSigILMIGrpTable": bbIfCnfSigILMIGrpTable,
       "bbIfCnfSigILMIGrpEntry": bbIfCnfSigILMIGrpEntry,
       "bbIfSigPortNum": bbIfSigPortNum,
       "bbIfIlmiEnable": bbIfIlmiEnable,
       "bbIfSignallingProtocolType": bbIfSignallingProtocolType,
       "bbIfSignallingVpi": bbIfSignallingVpi,
       "bbIfSignallingVci": bbIfSignallingVci,
       "bbIfAddrPrefix": bbIfAddrPrefix,
       "bbIfCustomerId": bbIfCustomerId,
       "bbIfProtocolRevNo": bbIfProtocolRevNo,
       "bbIfIlmiTrapEnable": bbIfIlmiTrapEnable,
       "bbIfMinTrapInterval": bbIfMinTrapInterval,
       "bbIfKeepAlivePollingEnable": bbIfKeepAlivePollingEnable,
       "bbIfErrorThresholdN491": bbIfErrorThresholdN491,
       "bbIfEventThresholdN492": bbIfEventThresholdN492,
       "bbIfPollingIntervalT491": bbIfPollingIntervalT491,
       "bbIfMinEnquiryIntervalT493": bbIfMinEnquiryIntervalT493,
       "bbIfAddrRegEnable": bbIfAddrRegEnable,
       "bbIfCnfRscPartGrpTable": bbIfCnfRscPartGrpTable,
       "bbIfCnfRscPartGrpEntry": bbIfCnfRscPartGrpEntry,
       "bbRscPartIfNum": bbRscPartIfNum,
       "bbRscPartCtrlrNum": bbRscPartCtrlrNum,
       "bbIfRscPrtRowStatus": bbIfRscPrtRowStatus,
       "bbIfRscPrtInUse": bbIfRscPrtInUse,
       "bbIfRscPrtIngrPctBandwidth": bbIfRscPrtIngrPctBandwidth,
       "bbIfRscPrtEgrPctBandwidth": bbIfRscPrtEgrPctBandwidth,
       "bbIfRscPrtVpiLow": bbIfRscPrtVpiLow,
       "bbIfRscPrtVpiHigh": bbIfRscPrtVpiHigh,
       "bbIfRscPrtVciLow": bbIfRscPrtVciLow,
       "bbIfRscPrtVciHigh": bbIfRscPrtVciHigh,
       "bbIfRscPrtVpidLow": bbIfRscPrtVpidLow,
       "bbIfRscPrtVpidHigh": bbIfRscPrtVpidHigh,
       "bbIfRscPrtMaxChans": bbIfRscPrtMaxChans,
       "bbIfRscPartCtrlrID": bbIfRscPartCtrlrID,
       "bbIfStateGrpTable": bbIfStateGrpTable,
       "bbIfStateGrpEntry": bbIfStateGrpEntry,
       "bbStateIfNum": bbStateIfNum,
       "bbIfState": bbIfState,
       "bbIfOversubscribed": bbIfOversubscribed,
       "bbIfIngrPercentUtil": bbIfIngrPercentUtil,
       "bbIfEgrPercentUtil": bbIfEgrPercentUtil,
       "bbIfCntGrp": bbIfCntGrp,
       "bbIfCntGrpTable": bbIfCntGrpTable,
       "bbIfCntGrpEntry": bbIfCntGrpEntry,
       "bbCntIfNum": bbCntIfNum,
       "bbIfTotalCells": bbIfTotalCells,
       "bbIfRcvValidOAMCells": bbIfRcvValidOAMCells,
       "bbIfRcvRmCells": bbIfRcvRmCells,
       "bbIfRcvClp0Cells": bbIfRcvClp0Cells,
       "bbIfRcvClp1Cells": bbIfRcvClp1Cells,
       "bbIfRcvClp0DiscCells": bbIfRcvClp0DiscCells,
       "bbIfRcvClp1DiscCells": bbIfRcvClp1DiscCells,
       "bbIfXmtOAMCells": bbIfXmtOAMCells,
       "bbIfXmtRmCells": bbIfXmtRmCells,
       "bbIfXmtClp0Cells": bbIfXmtClp0Cells,
       "bbIfXmtClp1Cells": bbIfXmtClp1Cells,
       "bbIfCntClrButton": bbIfCntClrButton,
       "bbIfCntSigILMIGrp": bbIfCntSigILMIGrp,
       "bbIfCntSigILMIGrpTable": bbIfCntSigILMIGrpTable,
       "bbIfCntSigILMIGrpEntry": bbIfCntSigILMIGrpEntry,
       "sigCntBbIfNum": sigCntBbIfNum,
       "bbIfSnmpPduReceived": bbIfSnmpPduReceived,
       "bbIfGetRequestReceived": bbIfGetRequestReceived,
       "bbIfGetNextRequestReceived": bbIfGetNextRequestReceived,
       "bbIfSetRequestReceived": bbIfSetRequestReceived,
       "bbIfTrapReceived": bbIfTrapReceived,
       "bbIfGetResponseReceived": bbIfGetResponseReceived,
       "bbIfGetResponseTransmitted": bbIfGetResponseTransmitted,
       "bbIfGetRequestTransmitted": bbIfGetRequestTransmitted,
       "bbIfTrapTransmitted": bbIfTrapTransmitted,
       "bbIfInvalidPDUReceived": bbIfInvalidPDUReceived,
       "bbIfAsn1ParseError": bbIfAsn1ParseError,
       "bbIfNoSuchNameError": bbIfNoSuchNameError,
       "bbIfTooBigError": bbIfTooBigError,
       "bbIfSigCntClrButton": bbIfSigCntClrButton,
       "bbChanCnfGrpTable": bbChanCnfGrpTable,
       "bbChanCnfGrpEntry": bbChanCnfGrpEntry,
       "bbChanCnfNum": bbChanCnfNum,
       "bbChanRowStatus": bbChanRowStatus,
       "bbChanConnType": bbChanConnType,
       "bbChanServiceType": bbChanServiceType,
       "bbChanConnDesc": bbChanConnDesc,
       "bbChanSvcFlag": bbChanSvcFlag,
       "bbChanSvcConnId": bbChanSvcConnId,
       "bbChanIfNum": bbChanIfNum,
       "bbChanVpi": bbChanVpi,
       "bbChanVci": bbChanVci,
       "bbChanUpcEnable": bbChanUpcEnable,
       "bbChanUpcPCR": bbChanUpcPCR,
       "bbChanUpcCDVT": bbChanUpcCDVT,
       "bbChanUpcSCR": bbChanUpcSCR,
       "bbChanUpcMBS": bbChanUpcMBS,
       "bbChanGcra1Action": bbChanGcra1Action,
       "bbChanGcra2Action": bbChanGcra2Action,
       "bbChanUpcSCRPolicing": bbChanUpcSCRPolicing,
       "bbChanEfciThreshold": bbChanEfciThreshold,
       "bbChanDiscardOption": bbChanDiscardOption,
       "bbChanFrmDiscardThreshold": bbChanFrmDiscardThreshold,
       "bbChanClpHiThreshold": bbChanClpHiThreshold,
       "bbChanClpLoThreshold": bbChanClpLoThreshold,
       "bbChanCongstUpdateCode": bbChanCongstUpdateCode,
       "bbChanMaxCellMemThreshold": bbChanMaxCellMemThreshold,
       "bbChanIngrPercentUtil": bbChanIngrPercentUtil,
       "bbChanEgrPercentUtil": bbChanEgrPercentUtil,
       "bbChanEgrSrvRate": bbChanEgrSrvRate,
       "bbChanOvrSubOvrRide": bbChanOvrSubOvrRide,
       "bbChanLocalVpi": bbChanLocalVpi,
       "bbChanLocalVci": bbChanLocalVci,
       "bbChanLocalNsapAddr": bbChanLocalNsapAddr,
       "bbChanRemoteVpi": bbChanRemoteVpi,
       "bbChanRemoteVci": bbChanRemoteVci,
       "bbChanRemoteNsapAddr": bbChanRemoteNsapAddr,
       "bbChanMaster": bbChanMaster,
       "bbChanRtePriority": bbChanRtePriority,
       "bbChanMaxCost": bbChanMaxCost,
       "bbChanRestrictTrkType": bbChanRestrictTrkType,
       "bbChanTestType": bbChanTestType,
       "bbChanTestState": bbChanTestState,
       "bbChanTestResult": bbChanTestResult,
       "bbChanTestTypeCPESide": bbChanTestTypeCPESide,
       "bbChanTestStateCPESide": bbChanTestStateCPESide,
       "bbConnVpcFlag": bbConnVpcFlag,
       "bbConnServiceType": bbConnServiceType,
       "bbConnPCR": bbConnPCR,
       "bbConnSCR": bbConnSCR,
       "bbConnPercentUtil": bbConnPercentUtil,
       "bbRemoteConnPCR": bbRemoteConnPCR,
       "bbRemoteConnSCR": bbRemoteConnSCR,
       "bbRemoteConnPercentUtil": bbRemoteConnPercentUtil,
       "bbChanUpcMCR": bbChanUpcMCR,
       "bbChanNumNextAvailable": bbChanNumNextAvailable,
       "bbChanVpIdNextAvailable": bbChanVpIdNextAvailable,
       "bbChanStateGrpTable": bbChanStateGrpTable,
       "bbChanStateGrpEntry": bbChanStateGrpEntry,
       "bbChanStateNum": bbChanStateNum,
       "bbChanState": bbChanState,
       "bbChanEgrXmtState": bbChanEgrXmtState,
       "bbChanIngrRcvState": bbChanIngrRcvState,
       "bbChanCntGrpTable": bbChanCntGrpTable,
       "bbChanCntGrpEntry": bbChanCntGrpEntry,
       "bbChanCntNum": bbChanCntNum,
       "bbChanRcvClp0Cells": bbChanRcvClp0Cells,
       "bbChanRcvClp1Cells": bbChanRcvClp1Cells,
       "bbChanNonConformCellsAtGcra1Policer": bbChanNonConformCellsAtGcra1Policer,
       "bbChanNonConformCellsAtGcra2Policer": bbChanNonConformCellsAtGcra2Policer,
       "bbChanRcvEOFCells": bbChanRcvEOFCells,
       "bbChanDscdClp0Cells": bbChanDscdClp0Cells,
       "bbChanDscdClp1Cells": bbChanDscdClp1Cells,
       "bbChanRcvCellsSent": bbChanRcvCellsSent,
       "bbChanXmtClp0Cells": bbChanXmtClp0Cells,
       "bbChanXmtClp1Cells": bbChanXmtClp1Cells,
       "bbChanDscdClpZeroCellsToPort": bbChanDscdClpZeroCellsToPort,
       "bbChanDscdClpOneCellsToPort": bbChanDscdClpOneCellsToPort,
       "bbChanCntClrButton": bbChanCntClrButton,
       "virtualInterfaceCnf": virtualInterfaceCnf,
       "vrtlIntrConfigTable": vrtlIntrConfigTable,
       "vrtlIntrConfigEntry": vrtlIntrConfigEntry,
       "configVrtlIntrNum": configVrtlIntrNum,
       "vrtlIntrPortNum": vrtlIntrPortNum,
       "vrtlIntrState": vrtlIntrState,
       "vrtlIntrMaxQueMem": vrtlIntrMaxQueMem,
       "vrtlIntrMinCellRate": vrtlIntrMinCellRate,
       "vrtlIntrMaxCellRate": vrtlIntrMaxCellRate,
       "vrtlIntrCurrConfigPaths": vrtlIntrCurrConfigPaths,
       "virtualInterfaceCnt": virtualInterfaceCnt,
       "vrtlIntrCounterTable": vrtlIntrCounterTable,
       "vrtlIntrCounterEntry": vrtlIntrCounterEntry,
       "countVrtlIntrNum": countVrtlIntrNum,
       "vrtlIntrTotalCellCnt": vrtlIntrTotalCellCnt,
       "vrtlIntrTotalQbinCellCnt": vrtlIntrTotalQbinCellCnt,
       "vrtlIntrRxdValidOAMCellCnt": vrtlIntrRxdValidOAMCellCnt,
       "vrtlIntrRxdRmCellCnt": vrtlIntrRxdRmCellCnt,
       "vrtlIntrRxdClpUntaggedCellCnt": vrtlIntrRxdClpUntaggedCellCnt,
       "vrtlIntrRxdClpTaggedCellCnt": vrtlIntrRxdClpTaggedCellCnt,
       "vrtlIntrRxdClpUntaggedDiscardedCellCnt": vrtlIntrRxdClpUntaggedDiscardedCellCnt,
       "vrtlIntrRxdClpTaggedDiscardedCellCnt": vrtlIntrRxdClpTaggedDiscardedCellCnt,
       "vrtlIntrXmtdOAMCellCnt": vrtlIntrXmtdOAMCellCnt,
       "vrtlIntrXmtdRmCellCnt": vrtlIntrXmtdRmCellCnt,
       "vrtlIntrXmtdClpUntaggedCellCnt": vrtlIntrXmtdClpUntaggedCellCnt,
       "vrtlIntrXmtdClpTaggedCellCnt": vrtlIntrXmtdClpTaggedCellCnt,
       "virtualInterfaceQbinCnf": virtualInterfaceQbinCnf,
       "vrtlIntrQbinConfigTable": vrtlIntrQbinConfigTable,
       "vrtlIntrQbinConfigEntry": vrtlIntrQbinConfigEntry,
       "queConfigVrtlIntrNum": queConfigVrtlIntrNum,
       "queConfigVrtlIntrQbinNum": queConfigVrtlIntrQbinNum,
       "vrtlIntrQbinState": vrtlIntrQbinState,
       "vrtlIntrQbinPri": vrtlIntrQbinPri,
       "vrtlIntrQbinRate": vrtlIntrQbinRate,
       "vrtlIntrQbinDiscardSelection": vrtlIntrQbinDiscardSelection,
       "vrtlIntrQbinMaxThreshold": vrtlIntrQbinMaxThreshold,
       "vrtlIntrQbinClpHiThreshold": vrtlIntrQbinClpHiThreshold,
       "vrtlIntrQbinClpLoThreshold": vrtlIntrQbinClpLoThreshold,
       "vrtlIntrQbinFrameDiscardThreshold": vrtlIntrQbinFrameDiscardThreshold,
       "vrtlIntrQbinEfciThreshold": vrtlIntrQbinEfciThreshold,
       "virtualInterfaceQbinCnt": virtualInterfaceQbinCnt,
       "vrtlIntrQbinCounterTable": vrtlIntrQbinCounterTable,
       "vrtlIntrQbinCounterEntry": vrtlIntrQbinCounterEntry,
       "queConuterVrtlIntrNum": queConuterVrtlIntrNum,
       "queCounterVrtlIntrQbinNum": queCounterVrtlIntrQbinNum,
       "vrtlIntrQbinCurrentCellCnt": vrtlIntrQbinCurrentCellCnt,
       "vrtlIntrQbinRxdCellCnt": vrtlIntrQbinRxdCellCnt,
       "vrtlIntrQbinTxdCellCnt": vrtlIntrQbinTxdCellCnt,
       "vrtlIntrQbinDiscardedCellCnt": vrtlIntrQbinDiscardedCellCnt,
       "rpmPortTable": rpmPortTable,
       "rpmPortEntry": rpmPortEntry,
       "rpmPortSlotNum": rpmPortSlotNum,
       "rpmPortInterface": rpmPortInterface,
       "rpmPortSubInterface": rpmPortSubInterface,
       "rpmPortRowStatus": rpmPortRowStatus,
       "rpmPortIpAddress": rpmPortIpAddress,
       "rpmPortSubNetMask": rpmPortSubNetMask,
       "rpmPortState": rpmPortState,
       "rpmIfCnfResPart": rpmIfCnfResPart,
       "rpmIfCnfRscPartTable": rpmIfCnfRscPartTable,
       "rpmIfCnfRscPartEntry": rpmIfCnfRscPartEntry,
       "rpmIfRscSlotNum": rpmIfRscSlotNum,
       "rpmIfRscPartIfNum": rpmIfRscPartIfNum,
       "rpmIfRscPartCtrlrNum": rpmIfRscPartCtrlrNum,
       "rpmIfRscPrtRowStatus": rpmIfRscPrtRowStatus,
       "rpmIfRscPrtIngrPctBandwidth": rpmIfRscPrtIngrPctBandwidth,
       "rpmIfRscPrtEgrPctBandwidth": rpmIfRscPrtEgrPctBandwidth,
       "rpmIfRscPrtVpiLow": rpmIfRscPrtVpiLow,
       "rpmIfRscPrtVpiHigh": rpmIfRscPrtVpiHigh,
       "rpmIfRscPrtVciLow": rpmIfRscPrtVciLow,
       "rpmIfRscPrtVciHigh": rpmIfRscPrtVciHigh,
       "rpmIfRscPrtMaxChans": rpmIfRscPrtMaxChans,
       "rpmChanGrpTable": rpmChanGrpTable,
       "rpmChanGrpEntry": rpmChanGrpEntry,
       "rpmChanSlotNum": rpmChanSlotNum,
       "rpmChanInterface": rpmChanInterface,
       "rpmChanNum": rpmChanNum,
       "rpmChanRowStatus": rpmChanRowStatus,
       "rpmChanVcd": rpmChanVcd,
       "rpmChanVpi": rpmChanVpi,
       "rpmChanVci": rpmChanVci,
       "rpmChanSubInterface": rpmChanSubInterface,
       "rpmChanLocalVpi": rpmChanLocalVpi,
       "rpmChanLocalVci": rpmChanLocalVci,
       "rpmChanLocalNsap": rpmChanLocalNsap,
       "rpmChanRemoteVpi": rpmChanRemoteVpi,
       "rpmChanRemoteVci": rpmChanRemoteVci,
       "rpmChanRemoteNsap": rpmChanRemoteNsap,
       "rpmChanType": rpmChanType,
       "rpmChanConnType": rpmChanConnType,
       "rpmChanServiceType": rpmChanServiceType,
       "rpmChanMastership": rpmChanMastership,
       "rpmChanRtePriority": rpmChanRtePriority,
       "rpmChanMaxCost": rpmChanMaxCost,
       "rpmChanRestrictTrkType": rpmChanRestrictTrkType,
       "rpmChanPCR": rpmChanPCR,
       "rpmChanRemotePCR": rpmChanRemotePCR,
       "rpmChanMCR": rpmChanMCR,
       "rpmChanRemoteMCR": rpmChanRemoteMCR,
       "rpmChanPercentUtil": rpmChanPercentUtil,
       "rpmChanRemotePercentUtil": rpmChanRemotePercentUtil,
       "rpmChanEncapType": rpmChanEncapType,
       "rpmChanMidLow": rpmChanMidLow,
       "rpmChanMidHigh": rpmChanMidHigh,
       "rpmChanBurstSize": rpmChanBurstSize,
       "rpmChanInArpFreq": rpmChanInArpFreq,
       "rpmChanOAMloopback": rpmChanOAMloopback,
       "rpmChanState": rpmChanState,
       "rpmChanVirtualTemplate": rpmChanVirtualTemplate,
       "rpmChanAbrRDF": rpmChanAbrRDF,
       "rpmChanAbrRIF": rpmChanAbrRIF,
       "pxmAtmMIBObjects": pxmAtmMIBObjects,
       "pxmAtmVcCrossConnectIndexNext": pxmAtmVcCrossConnectIndexNext,
       "pxmAtmVcCrossConnectTable": pxmAtmVcCrossConnectTable,
       "pxmAtmVcCrossConnectEntry": pxmAtmVcCrossConnectEntry,
       "pxmAtmVcCrossConnectIndex": pxmAtmVcCrossConnectIndex,
       "pxmAtmVcCrossConnectLowIfIndex": pxmAtmVcCrossConnectLowIfIndex,
       "pxmAtmVcCrossConnectLowVpi": pxmAtmVcCrossConnectLowVpi,
       "pxmAtmVcCrossConnectLowVci": pxmAtmVcCrossConnectLowVci,
       "pxmAtmVcCrossConnectHighIfIndex": pxmAtmVcCrossConnectHighIfIndex,
       "pxmAtmVcCrossConnectHighVpi": pxmAtmVcCrossConnectHighVpi,
       "pxmAtmVcCrossConnectHighVci": pxmAtmVcCrossConnectHighVci,
       "pxmAtmVcCrossConnectAdminStatus": pxmAtmVcCrossConnectAdminStatus,
       "pxmAtmVcCrossConnectL2HOperStatus": pxmAtmVcCrossConnectL2HOperStatus,
       "pxmAtmVcCrossConnectH2LOperStatus": pxmAtmVcCrossConnectH2LOperStatus,
       "pxmAtmVcCrossConnectL2HLastChange": pxmAtmVcCrossConnectL2HLastChange,
       "pxmAtmVcCrossConnectH2LLastChange": pxmAtmVcCrossConnectH2LLastChange,
       "pxmAtmVcCrossConnectRowStatus": pxmAtmVcCrossConnectRowStatus,
       "pxmAtmVcCrossConnectHighAddressType": pxmAtmVcCrossConnectHighAddressType,
       "pxmAtmVcCrossConnectLowAddressType": pxmAtmVcCrossConnectLowAddressType,
       "cesmPort": cesmPort,
       "cesmPortCnfGrp": cesmPortCnfGrp,
       "cesmPortCnfGrpTable": cesmPortCnfGrpTable,
       "cesmPortCnfGrpEntry": cesmPortCnfGrpEntry,
       "cesPortNum": cesPortNum,
       "cesPortRowStatus": cesPortRowStatus,
       "cesPortLineNum": cesPortLineNum,
       "cesPortType": cesPortType,
       "cesPortDs0ConfigBitMap": cesPortDs0ConfigBitMap,
       "cesPortNumOfDs0Slot": cesPortNumOfDs0Slot,
       "cesPortNumOfSCIPerDS0": cesPortNumOfSCIPerDS0,
       "cesPortSpeed": cesPortSpeed,
       "cesPortState": cesPortState,
       "cesPortBERTEnable": cesPortBERTEnable,
       "cesPortNextAvailable": cesPortNextAvailable,
       "cesPortsUsedLine1": cesPortsUsedLine1,
       "cesPortsUsedLine2": cesPortsUsedLine2,
       "cesPortsUsedLine3": cesPortsUsedLine3,
       "cesPortsUsedLine4": cesPortsUsedLine4,
       "cesPortsUsedLine5": cesPortsUsedLine5,
       "cesPortsUsedLine6": cesPortsUsedLine6,
       "cesPortsUsedLine7": cesPortsUsedLine7,
       "cesPortsUsedLine8": cesPortsUsedLine8,
       "cesmPortCnfResPartGrp": cesmPortCnfResPartGrp,
       "cesmPortCnfResPartGrpTable": cesmPortCnfResPartGrpTable,
       "cesmPortCnfResPartGrpEntry": cesmPortCnfResPartGrpEntry,
       "cesmResPartPortNum": cesmResPartPortNum,
       "cesmResPartCtrlrNum": cesmResPartCtrlrNum,
       "cesmResPartRowStatus": cesmResPartRowStatus,
       "cesmResPartNumOfLcnAvail": cesmResPartNumOfLcnAvail,
       "cesmResPartLcnLow": cesmResPartLcnLow,
       "cesmResPartLcnHigh": cesmResPartLcnHigh,
       "cesmResPartIngrPctBW": cesmResPartIngrPctBW,
       "cesmResPartEgrPctBW": cesmResPartEgrPctBW,
       "cesmResPartCtrlrID": cesmResPartCtrlrID,
       "cesmChanCnfGrp": cesmChanCnfGrp,
       "cesmChanCnfGrpTable": cesmChanCnfGrpTable,
       "cesmChanCnfGrpEntry": cesmChanCnfGrpEntry,
       "cesCnfChanNum": cesCnfChanNum,
       "cesChanRowStatus": cesChanRowStatus,
       "cesMapPortNum": cesMapPortNum,
       "cesMapVpi": cesMapVpi,
       "cesMapVci": cesMapVci,
       "cesCBRService": cesCBRService,
       "cesCBRClockMode": cesCBRClockMode,
       "cesCas": cesCas,
       "cesPartialFill": cesPartialFill,
       "cesBufMaxSize": cesBufMaxSize,
       "cesCDVRxT": cesCDVRxT,
       "cesCellLossIntegrationPeriod": cesCellLossIntegrationPeriod,
       "cesChanLocRmtLpbkState": cesChanLocRmtLpbkState,
       "cesChanTestType": cesChanTestType,
       "cesChanTestState": cesChanTestState,
       "cesChanRTDResult": cesChanRTDResult,
       "cesChanPortNum": cesChanPortNum,
       "cesChanConnType": cesChanConnType,
       "cesChanStrauSciNum": cesChanStrauSciNum,
       "cesChanIdleDetEnable": cesChanIdleDetEnable,
       "cesChanIdleSignalCode": cesChanIdleSignalCode,
       "cesChanIdleCodeIntgnPeriod": cesChanIdleCodeIntgnPeriod,
       "cesChanOnhookCode": cesChanOnhookCode,
       "cesChanConditionedData": cesChanConditionedData,
       "cesmChanExtTrgIdleSupp": cesmChanExtTrgIdleSupp,
       "cesmChanConditionedSigCode": cesmChanConditionedSigCode,
       "cesLocalVpi": cesLocalVpi,
       "cesLocalVci": cesLocalVci,
       "cesLocalNSAP": cesLocalNSAP,
       "cesRemoteVpi": cesRemoteVpi,
       "cesRemoteVci": cesRemoteVci,
       "cesRemoteNSAP": cesRemoteNSAP,
       "cesMastership": cesMastership,
       "cesVpcFlag": cesVpcFlag,
       "cesConnServiceType": cesConnServiceType,
       "cesRoutingPriority": cesRoutingPriority,
       "cesMaxCost": cesMaxCost,
       "cesRestrictTrunkType": cesRestrictTrunkType,
       "cesConnPCR": cesConnPCR,
       "cesConnMCR": cesConnMCR,
       "cesConnPercentUtil": cesConnPercentUtil,
       "cesmConnRemotePCR": cesmConnRemotePCR,
       "cesmConnRemoteMCR": cesmConnRemoteMCR,
       "cesmConnRemotePercentUtil": cesmConnRemotePercentUtil,
       "cesmConnForeSightEnable": cesmConnForeSightEnable,
       "cesmConnFGCRAEnable": cesmConnFGCRAEnable,
       "cesmChanReroute": cesmChanReroute,
       "cesmConnAdminStatus": cesmConnAdminStatus,
       "cesmChanNumNextAvailable": cesmChanNumNextAvailable,
       "cesmChanCntGrp": cesmChanCntGrp,
       "cesmChanCntGrpTable": cesmChanCntGrpTable,
       "cesmChanCntGrpEntry": cesmChanCntGrpEntry,
       "cesCntChanNum": cesCntChanNum,
       "cesChanState": cesChanState,
       "cesXmtATMState": cesXmtATMState,
       "cesRcvATMState": cesRcvATMState,
       "cesCellLossStatus": cesCellLossStatus,
       "cesReassCells": cesReassCells,
       "cesGenCells": cesGenCells,
       "cesHdrErrors": cesHdrErrors,
       "cesPointerReframes": cesPointerReframes,
       "cesLostCells": cesLostCells,
       "cesBufUnderflows": cesBufUnderflows,
       "cesBufOverflows": cesBufOverflows,
       "cesIngrDiscardedBytes": cesIngrDiscardedBytes,
       "cesUflowInsCells": cesUflowInsCells,
       "cesOflowDropBytes": cesOflowDropBytes,
       "cesCellSeqMismatchCnt": cesCellSeqMismatchCnt,
       "counterClrButton": counterClrButton,
       "cesChanSecUptime": cesChanSecUptime,
       "cesChanSignalingStatus": cesChanSignalingStatus,
       "cesChanStatusBitMap": cesChanStatusBitMap,
       "cesmEndPtMapGrp": cesmEndPtMapGrp,
       "cesmEndPtMapGrpTable": cesmEndPtMapGrpTable,
       "cesmEndPtMapGrpEntry": cesmEndPtMapGrpEntry,
       "cesEndPortNum": cesEndPortNum,
       "cesEndChanNum": cesEndChanNum,
       "cesEndLineNum": cesEndLineNum,
       "vismPortCnfGrp": vismPortCnfGrp,
       "vismPortCnfGrpTable": vismPortCnfGrpTable,
       "vismPortCnfGrpEntry": vismPortCnfGrpEntry,
       "vismPortNum": vismPortNum,
       "vismPortRowStatus": vismPortRowStatus,
       "vismPortLineNum": vismPortLineNum,
       "vismPortType": vismPortType,
       "vismPortDs0ConfigBitMap": vismPortDs0ConfigBitMap,
       "vismPortSpeed": vismPortSpeed,
       "vismPortState": vismPortState,
       "vismPortResPartCnfGrp": vismPortResPartCnfGrp,
       "vismPortResPartCnfGrpTable": vismPortResPartCnfGrpTable,
       "vismPortResPartCnfGrpEntry": vismPortResPartCnfGrpEntry,
       "vismResPartPortNum": vismResPartPortNum,
       "vismResPartCtrlrNum": vismResPartCtrlrNum,
       "vismResPartRowStatus": vismResPartRowStatus,
       "vismResPartNumOfLcnAvail": vismResPartNumOfLcnAvail,
       "vismResPartLcnLow": vismResPartLcnLow,
       "vismResPartLcnHigh": vismResPartLcnHigh,
       "vismResPartIngrPctBW": vismResPartIngrPctBW,
       "vismResPartEgrPctBW": vismResPartEgrPctBW,
       "vismResPartCtrlrID": vismResPartCtrlrID,
       "vismChanCnfGrpTable": vismChanCnfGrpTable,
       "vismChanCnfGrpEntry": vismChanCnfGrpEntry,
       "vismCnfChanNum": vismCnfChanNum,
       "vismChanRowStatus": vismChanRowStatus,
       "vismChanPortNum": vismChanPortNum,
       "vismChanLocRmtLpbkState": vismChanLocRmtLpbkState,
       "vismChanTestType": vismChanTestType,
       "vismChanTestState": vismChanTestState,
       "vismChanRTDResult": vismChanRTDResult,
       "vismChanPvcType": vismChanPvcType,
       "vismChanConnType": vismChanConnType,
       "vismLocalVpi": vismLocalVpi,
       "vismLocalVci": vismLocalVci,
       "vismLocalNSAP": vismLocalNSAP,
       "vismRemoteVpi": vismRemoteVpi,
       "vismRemoteVci": vismRemoteVci,
       "vismRemoteNSAP": vismRemoteNSAP,
       "vismMastership": vismMastership,
       "vismVpcFlag": vismVpcFlag,
       "vismConnServiceType": vismConnServiceType,
       "vismRoutingPriority": vismRoutingPriority,
       "vismMaxCost": vismMaxCost,
       "vismRestrictTrunkType": vismRestrictTrunkType,
       "vismConnPCR": vismConnPCR,
       "vismConnPercentUtil": vismConnPercentUtil,
       "vismConnRemotePCR": vismConnRemotePCR,
       "vismConnRemotePercentUtil": vismConnRemotePercentUtil,
       "vismChanProtection": vismChanProtection,
       "vismChanPreference": vismChanPreference,
       "vismChanActivityState": vismChanActivityState,
       "vismChanLockingState": vismChanLockingState,
       "vismChanScrIngress": vismChanScrIngress,
       "vismChanMbsIngress": vismChanMbsIngress,
       "vismChanClrIngress": vismChanClrIngress,
       "vismChanCdvt": vismChanCdvt,
       "vismConnPCREgress": vismConnPCREgress,
       "vismChanScrEgress": vismChanScrEgress,
       "vismChanMbsEgress": vismChanMbsEgress,
       "vismChanClrEgress": vismChanClrEgress,
       "vismChanApplication": vismChanApplication,
       "vismChanFallbackLcn": vismChanFallbackLcn,
       "vismChanReroute": vismChanReroute,
       "vismFarEndAddressType": vismFarEndAddressType,
       "vismFarEndE164Address": vismFarEndE164Address,
       "vismFarEndGWIDAddress": vismFarEndGWIDAddress,
       "vismFarEndNSAPAddress": vismFarEndNSAPAddress,
       "vismVCCI": vismVCCI,
       "vismConnAdminStatus": vismConnAdminStatus,
       "vismChanNumNextAvailable": vismChanNumNextAvailable,
       "vismChanCacTable": vismChanCacTable,
       "vismChanCacEntry": vismChanCacEntry,
       "vismChanNum": vismChanNum,
       "vismChanCacMaster": vismChanCacMaster,
       "vismChanCacPassedCons": vismChanCacPassedCons,
       "vismChanCacRejectedCons": vismChanCacRejectedCons,
       "vismChanCacRejectionPolicy": vismChanCacRejectionPolicy,
       "vismChanCarrierLossPolicy": vismChanCarrierLossPolicy,
       "vismChanVADTolerance": vismChanVADTolerance,
       "vismChanVADDutyCycle": vismChanVADDutyCycle,
       "networkCacConfigState": networkCacConfigState,
       "vismChanStateGrp": vismChanStateGrp,
       "vismChanStateGrpTable": vismChanStateGrpTable,
       "vismChanStateGrpEntry": vismChanStateGrpEntry,
       "vismStateChanNum": vismStateChanNum,
       "vismChanState": vismChanState,
       "vismChanXmtATMState": vismChanXmtATMState,
       "vismChanRcvATMState": vismChanRcvATMState,
       "vismChanStatusBitMap": vismChanStatusBitMap,
       "vismChanCntGrp": vismChanCntGrp,
       "vismChanCntGrpTable": vismChanCntGrpTable,
       "vismChanCntGrpEntry": vismChanCntGrpEntry,
       "vismCntChanNum": vismCntChanNum,
       "vismCntClrButton": vismCntClrButton,
       "vismChanAal2HecErrors": vismChanAal2HecErrors,
       "vismChanAal2CrcErrors": vismChanAal2CrcErrors,
       "vismChanAal2OamLpbLostCells": vismChanAal2OamLpbLostCells,
       "vismChanAal2InvOsfCells": vismChanAal2InvOsfCells,
       "vismChanAal2InvParCells": vismChanAal2InvParCells,
       "vismChanAal2CpsSentPkts": vismChanAal2CpsSentPkts,
       "vismChanAal2CpsRcvdPkts": vismChanAal2CpsRcvdPkts,
       "vismChanAal2CpsInvCidPkts": vismChanAal2CpsInvCidPkts,
       "vismChanAal2CpsInvUuiPkts": vismChanAal2CpsInvUuiPkts,
       "vismChanAal2CpsInvLenPkts": vismChanAal2CpsInvLenPkts,
       "vismChanAal5InvCpiPdus": vismChanAal5InvCpiPdus,
       "vismChanAal5OversizedSdusRcvdPdus": vismChanAal5OversizedSdusRcvdPdus,
       "vismChanAal5InvLenPdus": vismChanAal5InvLenPdus,
       "vismChanAal5Crc32ErrorPdus": vismChanAal5Crc32ErrorPdus,
       "vismChanAal5ReassemTimerExpiryPdus": vismChanAal5ReassemTimerExpiryPdus,
       "vismAal2CidGrp": vismAal2CidGrp,
       "vismAal2CidCnfTable": vismAal2CidCnfTable,
       "vismAal2CidEntry": vismAal2CidEntry,
       "vismAal2CidNum": vismAal2CidNum,
       "vismAal2CidLcn": vismAal2CidLcn,
       "vismAal2EndptNum": vismAal2EndptNum,
       "vismAal2CidRowStatus": vismAal2CidRowStatus,
       "vismAal2CidType3Redundancy": vismAal2CidType3Redundancy,
       "vismAal2CidVad": vismAal2CidVad,
       "vismAal2CidProfileType": vismAal2CidProfileType,
       "vismAal2CidProfileNum": vismAal2CidProfileNum,
       "vismAal2CidCodecType": vismAal2CidCodecType,
       "vismAal2CidDtmfTransport": vismAal2CidDtmfTransport,
       "vismAal2CidCasTransport": vismAal2CidCasTransport,
       "vismAal2CidEcanEnable": vismAal2CidEcanEnable,
       "vismAal2InitVadTimer": vismAal2InitVadTimer,
       "vismAal2CnfPktPeriod": vismAal2CnfPktPeriod,
       "vismAal2CidICSEnable": vismAal2CidICSEnable,
       "vismAal2CidState": vismAal2CidState,
       "vismAal2CidFailReason": vismAal2CidFailReason,
       "vismSigGrp": vismSigGrp,
       "vismHdlcChanTable": vismHdlcChanTable,
       "vismHdlcChanEntry": vismHdlcChanEntry,
       "vismHdlcChanNum": vismHdlcChanNum,
       "vismHdlcRowStatus": vismHdlcRowStatus,
       "vismHdlcMaxFrameSize": vismHdlcMaxFrameSize,
       "vismHdlcLcnNum": vismHdlcLcnNum,
       "vismHdlcXmtFrames": vismHdlcXmtFrames,
       "vismHdlcRcvFrames": vismHdlcRcvFrames,
       "vismHdlcRcvCrcErrors": vismHdlcRcvCrcErrors,
       "vismHdlcRcvBufOverflows": vismHdlcRcvBufOverflows,
       "vismHdlcTxUnderflows": vismHdlcTxUnderflows,
       "vismHdlcTxAbortFrames": vismHdlcTxAbortFrames,
       "vismHdlcRxAbortFrames": vismHdlcRxAbortFrames,
       "vismCodecTemplateCnfGrp": vismCodecTemplateCnfGrp,
       "vismCodecTemplateCnfGrpTable": vismCodecTemplateCnfGrpTable,
       "vismCodecTemplateCnfGrpEntry": vismCodecTemplateCnfGrpEntry,
       "vismCodecTemplateNum": vismCodecTemplateNum,
       "vismCodecSupported": vismCodecSupported,
       "vismCodecTemplateMaxChanCount": vismCodecTemplateMaxChanCount,
       "vismCasGrp": vismCasGrp,
       "vismCasVariantTable": vismCasVariantTable,
       "vismCasVariantEntry": vismCasVariantEntry,
       "vismCasVariantName": vismCasVariantName,
       "vismCasFileName": vismCasFileName,
       "vismCasTRinging": vismCasTRinging,
       "vismCasDigitMethod": vismCasDigitMethod,
       "vismCasInterdigitTpart": vismCasInterdigitTpart,
       "vismCasInterdigitTcrit": vismCasInterdigitTcrit,
       "vismCasInterdigitTMF": vismCasInterdigitTMF,
       "vismCasVariantState": vismCasVariantState,
       "vismCasRowStatus": vismCasRowStatus,
       "vismCasCountryCode": vismCasCountryCode,
       "vismCasVariantSource": vismCasVariantSource,
       "vismCasXgcpVariantTable": vismCasXgcpVariantTable,
       "vismCasXgcpVariantEntry": vismCasXgcpVariantEntry,
       "vismCasXgcpVariantName": vismCasXgcpVariantName,
       "vismCasXgcpFileName": vismCasXgcpFileName,
       "vismCasXgcpMaxReXmitTime": vismCasXgcpMaxReXmitTime,
       "vismCasXgcpInitialReXmitTime": vismCasXgcpInitialReXmitTime,
       "vismCasXgcpMaxRetries": vismCasXgcpMaxRetries,
       "bearerConnGrp": bearerConnGrp,
       "bearerConnTable": bearerConnTable,
       "bearerConnEntry": bearerConnEntry,
       "bearerEndptNum": bearerEndptNum,
       "bearerCid": bearerCid,
       "bearerLcn": bearerLcn,
       "bearerSentPkts": bearerSentPkts,
       "bearerRcvdPkts": bearerRcvdPkts,
       "bearerSentOctets": bearerSentOctets,
       "bearerRcvdOctets": bearerRcvdOctets,
       "bearerLostPkts": bearerLostPkts,
       "bearerJitter": bearerJitter,
       "bearerLatency": bearerLatency,
       "bearerAal2ExtAISCnts": bearerAal2ExtAISCnts,
       "bearerAal2ExtRAICnts": bearerAal2ExtRAICnts,
       "bearerAal2ConnAISCnts": bearerAal2ConnAISCnts,
       "bearerAal2ConnRDICnts": bearerAal2ConnRDICnts,
       "bearerCntClrButton": bearerCntClrButton,
       "vismSvcGrp": vismSvcGrp,
       "vismSvcTxSetups": vismSvcTxSetups,
       "vismSvcRxSetups": vismSvcRxSetups,
       "vismSvcTxCallProcs": vismSvcTxCallProcs,
       "vismSvcRxCallProcs": vismSvcRxCallProcs,
       "vismSvcTxConns": vismSvcTxConns,
       "vismSvcTxConnAcks": vismSvcTxConnAcks,
       "vismSvcRxConns": vismSvcRxConns,
       "vismSvcRxConnAcks": vismSvcRxConnAcks,
       "vismSvcTxReleases": vismSvcTxReleases,
       "vismSvcTxReleaseCompls": vismSvcTxReleaseCompls,
       "vismSvcRxReleases": vismSvcRxReleases,
       "vismSvcRxReleaseCompls": vismSvcRxReleaseCompls,
       "vismSvcTxRestarts": vismSvcTxRestarts,
       "vismSvcTxRestartAcks": vismSvcTxRestartAcks,
       "vismSvcRxRestarts": vismSvcRxRestarts,
       "vismSvcRxRestartAcks": vismSvcRxRestartAcks,
       "vismSvcTxResyncStrts": vismSvcTxResyncStrts,
       "vismSvcTxResyncStrtAcks": vismSvcTxResyncStrtAcks,
       "vismSvcRxResyncStrts": vismSvcRxResyncStrts,
       "vismSvcRxResyncStrtAcks": vismSvcRxResyncStrtAcks,
       "vismSvcTxResyncEnds": vismSvcTxResyncEnds,
       "vismSvcTxResyncEndAcks": vismSvcTxResyncEndAcks,
       "vismSvcRxResyncEnds": vismSvcRxResyncEnds,
       "vismSvcRxResyncEndAcks": vismSvcRxResyncEndAcks,
       "vismSvcTxBulkResyncs": vismSvcTxBulkResyncs,
       "vismSvcRxBulkResyncs": vismSvcRxBulkResyncs,
       "vismSvcCallProcExpiries": vismSvcCallProcExpiries,
       "vismSvcReleasExpiries": vismSvcReleasExpiries,
       "vismSvcConnExpiries": vismSvcConnExpiries,
       "vismSvcConnAckExpiries": vismSvcConnAckExpiries,
       "vismSvcRestartExpiries": vismSvcRestartExpiries,
       "vismSvcResyncExpiries": vismSvcResyncExpiries,
       "vismCodecCnfGrp": vismCodecCnfGrp,
       "vismCodecCnfTable": vismCodecCnfTable,
       "vismCodecCnfEntry": vismCodecCnfEntry,
       "vismCodecCnfIndex": vismCodecCnfIndex,
       "vismCodecName": vismCodecName,
       "vismCodecPktPeriod": vismCodecPktPeriod,
       "vismCodecPreference": vismCodecPreference,
       "vismCodecString": vismCodecString,
       "vismCodecIanaType": vismCodecIanaType,
       "vismSvcCnfGroups": vismSvcCnfGroups,
       "vismSvcAtmQosGrp": vismSvcAtmQosGrp,
       "vismSvcAtmQosCdv": vismSvcAtmQosCdv,
       "vismSvcAtmQosCtd": vismSvcAtmQosCtd,
       "vismSvcAtmQosClr": vismSvcAtmQosClr,
       "vismSvcTrfScalingGrp": vismSvcTrfScalingGrp,
       "vismSvcTrfScalingFactor": vismSvcTrfScalingFactor,
       "vismSvcAal2CidGrp": vismSvcAal2CidGrp,
       "vismSvcAal2CidNumber": vismSvcAal2CidNumber,
       "vismCardCacFailuresGrp": vismCardCacFailuresGrp,
       "vismPortCacPvcAddFailures": vismPortCacPvcAddFailures,
       "vismPortCacSvcAddFailures": vismPortCacSvcAddFailures,
       "vismVcCacPvcFailures": vismVcCacPvcFailures,
       "vismVcCacPvcUpspeedFailures": vismVcCacPvcUpspeedFailures,
       "vismPortCacSvcUpspeedFailures": vismPortCacSvcUpspeedFailures,
       "bert": bert,
       "bertControl": bertControl,
       "bertResourceStatus": bertResourceStatus,
       "bertOwner": bertOwner,
       "bertUserId": bertUserId,
       "bertStatus": bertStatus,
       "bertSlotNumber": bertSlotNumber,
       "bertTestMedium": bertTestMedium,
       "bertPort": bertPort,
       "bertLine": bertLine,
       "bertMode": bertMode,
       "bertDeviceToLoop": bertDeviceToLoop,
       "bertDS0DPIterationCount": bertDS0DPIterationCount,
       "bertPattern": bertPattern,
       "bertLoopback": bertLoopback,
       "bertLoopbackOperation": bertLoopbackOperation,
       "bertDS0Speed": bertDS0Speed,
       "bertTimeSlots": bertTimeSlots,
       "bertStartTime": bertStartTime,
       "bertStartDate": bertStartDate,
       "bertBitCount": bertBitCount,
       "bertBitErrorCount": bertBitErrorCount,
       "bertErrorInjectCount": bertErrorInjectCount,
       "bertCleanupAction": bertCleanupAction,
       "bertAbortReason": bertAbortReason,
       "bertDDSSeekResultsTableFirstIndex": bertDDSSeekResultsTableFirstIndex,
       "bertDDSSeekResultsTableLastIndex": bertDDSSeekResultsTableLastIndex,
       "bertDDSSeekResultsTable": bertDDSSeekResultsTable,
       "bertDDSSeekResultsTableEntry": bertDDSSeekResultsTableEntry,
       "bertDDSSeekResultsTableIndex": bertDDSSeekResultsTableIndex,
       "bertDDSCode": bertDDSCode,
       "bertSupportedTestsTable": bertSupportedTestsTable,
       "bertSupportedTestsTableEntry": bertSupportedTestsTableEntry,
       "bertSupportedTestsTableIndex": bertSupportedTestsTableIndex,
       "bertSupportFlag": bertSupportFlag,
       "bertTestMediumMask": bertTestMediumMask,
       "bertModeMask": bertModeMask,
       "bertDeviceToLoopMask": bertDeviceToLoopMask,
       "bertPatternMask": bertPatternMask,
       "bertLoopbackMask": bertLoopbackMask,
       "bertCardT1E1Type": bertCardT1E1Type,
       "onlineDiagnostics": onlineDiagnostics,
       "diagType": diagType,
       "diagResult": diagResult,
       "diagTestId": diagTestId,
       "parSelfNode": parSelfNode,
       "parSnNodeId": parSnNodeId,
       "parSnNodeIP": parSnNodeIP,
       "parSnNodeName": parSnNodeName,
       "parSnRevision": parSnRevision,
       "parSnNodeAlarmStatus": parSnNodeAlarmStatus,
       "parSnNumberOfTrunks": parSnNumberOfTrunks,
       "parInterfaces": parInterfaces,
       "parIfTable": parIfTable,
       "parIfEntry": parIfEntry,
       "parIfLogicalInterface": parIfLogicalInterface,
       "parIfType": parIfType,
       "parIfOperStatus": parIfOperStatus,
       "parIfTxBw": parIfTxBw,
       "parIfRxBw": parIfRxBw,
       "parIfMaxConn": parIfMaxConn,
       "parIfHiAddrMin": parIfHiAddrMin,
       "parIfHiAddrMax": parIfHiAddrMax,
       "parIfLoAddrMin": parIfLoAddrMin,
       "parIfLoAddrMax": parIfLoAddrMax,
       "parTrkTable": parTrkTable,
       "parTrkEntry": parTrkEntry,
       "parTrkId": parTrkId,
       "parTrkStatReserve": parTrkStatReserve,
       "parTrkCnfgCcRestrict": parTrkCnfgCcRestrict,
       "parTrkCnfgLineType": parTrkCnfgLineType,
       "parTrkCnfgPassSync": parTrkCnfgPassSync,
       "parTrkCnfgDerouteDelay": parTrkCnfgDerouteDelay,
       "parTrkCnfgTrafficClassFst": parTrkCnfgTrafficClassFst,
       "parTrkCnfgTrafficClassFr": parTrkCnfgTrafficClassFr,
       "parTrkCnfgTrafficClassNts": parTrkCnfgTrafficClassNts,
       "parTrkCnfgTrafficClassTs": parTrkCnfgTrafficClassTs,
       "parTrkCnfgTrafficClassVoice": parTrkCnfgTrafficClassVoice,
       "parTrkCnfgTrafficClassCbr": parTrkCnfgTrafficClassCbr,
       "parTrkCnfgTrafficClassVbr": parTrkCnfgTrafficClassVbr,
       "parTrkCnfgTrafficClassAbr": parTrkCnfgTrafficClassAbr,
       "parTrkCnfgAdminStatus": parTrkCnfgAdminStatus,
       "parTrkCnfgRoutingCost": parTrkCnfgRoutingCost,
       "parTrkCnfgVccConids": parTrkCnfgVccConids,
       "parTrkCnfgVpcConids": parTrkCnfgVpcConids,
       "parTrkLocalSlotNumber": parTrkLocalSlotNumber,
       "parTrkLocalPortNumber": parTrkLocalPortNumber,
       "parTrkLocalVTrunkId": parTrkLocalVTrunkId,
       "parTrkRemoteNodeId": parTrkRemoteNodeId,
       "parTrkRemoteTrunkId": parTrkRemoteTrunkId,
       "parTrkRemoteSlotNumber": parTrkRemoteSlotNumber,
       "parTrkRemotePortNumber": parTrkRemotePortNumber,
       "parTrkRemoteVTrunkId": parTrkRemoteVTrunkId,
       "parTrkRemoteNodeIP": parTrkRemoteNodeIP,
       "parTrkRemoteNodeType": parTrkRemoteNodeType,
       "parTrkRemoteNodeName": parTrkRemoteNodeName,
       "parTrkAlarmStatus": parTrkAlarmStatus,
       "parTrkAlarmType": parTrkAlarmType,
       "parTrkBwCapacity": parTrkBwCapacity,
       "parTrkLineLoad": parTrkLineLoad,
       "parTrkLoadTable": parTrkLoadTable,
       "parTrkLoadEntry": parTrkLoadEntry,
       "parTrkLoadXmtUsedCbr": parTrkLoadXmtUsedCbr,
       "parTrkLoadRcvUsedCbr": parTrkLoadRcvUsedCbr,
       "parTrkLoadXmtUsedVbr": parTrkLoadXmtUsedVbr,
       "parTrkLoadRcvUsedVbr": parTrkLoadRcvUsedVbr,
       "parTrkLoadXmtUsedAbr": parTrkLoadXmtUsedAbr,
       "parTrkLoadRcvUsedAbr": parTrkLoadRcvUsedAbr,
       "parTrkLoadXmtUsedNts": parTrkLoadXmtUsedNts,
       "parTrkLoadRcvUsedNts": parTrkLoadRcvUsedNts,
       "parTrkLoadXmtUsedTs": parTrkLoadXmtUsedTs,
       "parTrkLoadRcvUsedTs": parTrkLoadRcvUsedTs,
       "parTrkLoadXmtUsedVoice": parTrkLoadXmtUsedVoice,
       "parTrkLoadRcvUsedVoice": parTrkLoadRcvUsedVoice,
       "parTrkLoadXmtUsedBdataA": parTrkLoadXmtUsedBdataA,
       "parTrkLoadRcvUsedBdataA": parTrkLoadRcvUsedBdataA,
       "parTrkLoadXmtUsedBdataB": parTrkLoadXmtUsedBdataB,
       "parTrkLoadRcvUsedBdataB": parTrkLoadRcvUsedBdataB,
       "parTrkLoadVccConidsUsed": parTrkLoadVccConidsUsed,
       "parTrkLoadVpcConidsUsed": parTrkLoadVpcConidsUsed,
       "parConnection": parConnection,
       "parConnectionTable": parConnectionTable,
       "parConnectionEntry": parConnectionEntry,
       "parConnLocalSlot": parConnLocalSlot,
       "parConnLocalPort": parConnLocalPort,
       "parConnLocalVpi": parConnLocalVpi,
       "parConnLocalVci": parConnLocalVci,
       "parConnMasterShip": parConnMasterShip,
       "parConnLocalVcIndx": parConnLocalVcIndx,
       "parConnLocalEndpt": parConnLocalEndpt,
       "parConnRemoteNodeName": parConnRemoteNodeName,
       "parConnRemoteSlot": parConnRemoteSlot,
       "parConnRemotePort": parConnRemotePort,
       "parConnRemoteVpi": parConnRemoteVpi,
       "parConnRemoteVci": parConnRemoteVci,
       "parConnRemoteVcIndx": parConnRemoteVcIndx,
       "parConnOperStatus": parConnOperStatus,
       "parConnAdminStatus": parConnAdminStatus,
       "parConnRoute": parConnRoute,
       "parConnRemoteEndpt": parConnRemoteEndpt,
       "parPrefRoute": parPrefRoute,
       "parConnFailRsn": parConnFailRsn,
       "parRrtFailRsn": parRrtFailRsn,
       "parConnRstrTyp": parConnRstrTyp,
       "parConnRstrZcs": parConnRstrZcs,
       "parConnCos": parConnCos,
       "parNetworkClock": parNetworkClock,
       "parClockTable": parClockTable,
       "parClockEntry": parClockEntry,
       "parClockIndex": parClockIndex,
       "parClockType": parClockType,
       "parClockSource": parClockSource,
       "parClockCurSource": parClockCurSource,
       "parClockSourceId": parClockSourceId,
       "parClockPath": parClockPath,
       "parConfigParms": parConfigParms,
       "parVsiConfigParms": parVsiConfigParms,
       "parCmParms": parCmParms,
       "parCmParmsMaxRoutingBundle": parCmParmsMaxRoutingBundle,
       "parCmParmsRerouteTimer": parCmParmsRerouteTimer,
       "parCmParmsResetTimer": parCmParmsResetTimer,
       "parCmParmsDnUpPerPass": parCmParmsDnUpPerPass,
       "parCmParmsDnUpTimer": parCmParmsDnUpTimer,
       "parCmParmsRrtErrsPerCycle": parCmParmsRrtErrsPerCycle,
       "parCmParmsRrtCycleInterval": parCmParmsRrtCycleInterval,
       "parCmParmsMaxRrtCycles": parCmParmsMaxRrtCycles,
       "parCmParmsRrtPauseTime": parCmParmsRrtPauseTime,
       "parCmParmsMaxUpdates": parCmParmsMaxUpdates,
       "parCmParmsRerouteGroups": parCmParmsRerouteGroups,
       "parCmParmsMinRrGroupSize": parCmParmsMinRrGroupSize,
       "parCmParmsRrGroupInc": parCmParmsRrGroupInc,
       "parCmParmsCostBased": parCmParmsCostBased,
       "parCmParmsUseCache": parCmParmsUseCache,
       "parCmParmsUseDelay": parCmParmsUseDelay,
       "parCmParmMaxViaCons": parCmParmMaxViaCons,
       "parMnUpdt": parMnUpdt,
       "parMnUpdtInterval": parMnUpdtInterval,
       "parMnUpdtNodesPerInt": parMnUpdtNodesPerInt,
       "parMnUpdtBatchSend": parMnUpdtBatchSend,
       "parSwFunc": parSwFunc,
       "parSwFuncAbrVsvd": parSwFuncAbrVsvd,
       "parSwFuncNodeType": parSwFuncNodeType,
       "parOnOff": parOnOff,
       "parOnOffBackgroundUpdt": parOnOffBackgroundUpdt,
       "parOnOffDynamicBwAlloc": parOnOffDynamicBwAlloc,
       "parOnOffCmUpdts": parOnOffCmUpdts,
       "parOnOffRouting": parOnOffRouting,
       "parOnOffCommFailTest": parOnOffCommFailTest,
       "parOnOffDrtDelay": parOnOffDrtDelay,
       "parOnOffRenumRec": parOnOffRenumRec,
       "parOnOffCommBreak": parOnOffCommBreak,
       "parSysParms": parSysParms,
       "parSysParmsTsPacketAge": parSysParmsTsPacketAge,
       "parSysParmsConnFail": parSysParmsConnFail,
       "parSysParmsVcPollRate": parSysParmsVcPollRate,
       "parSysParmsMaxVDelay": parSysParmsMaxVDelay,
       "parSysParmsMaxCDelay": parSysParmsMaxCDelay,
       "parSysParmsMaxDDelay": parSysParmsMaxDDelay,
       "parSysParmsMaxADelay": parSysParmsMaxADelay,
       "parSysParmsMaxHsdDelay": parSysParmsMaxHsdDelay,
       "parSysParmsDeEnable": parSysParmsDeEnable,
       "parSysParmsFrStandard": parSysParmsFrStandard,
       "parSysParmsDrtDelay": parSysParmsDrtDelay,
       "parSysParmsInvLogAlarmThres": parSysParmsInvLogAlarmThres,
       "parSysParmsMaxCdpVDelay": parSysParmsMaxCdpVDelay,
       "parSysParmsMaxCdpCDelay": parSysParmsMaxCdpCDelay,
       "parSysParmsMaxCdpDDelay": parSysParmsMaxCdpDDelay,
       "parSysParmsMaxCdpADelay": parSysParmsMaxCdpADelay,
       "parSysParmsMaxCdpHsdDelay": parSysParmsMaxCdpHsdDelay,
       "parSysParmsMaxIpcdpVDelay": parSysParmsMaxIpcdpVDelay,
       "parSysParmsMaxIpcdpCDelay": parSysParmsMaxIpcdpCDelay,
       "parSysParmsMaxIpcdpDDelay": parSysParmsMaxIpcdpDDelay,
       "parSysParmsMaxIpcdpADelay": parSysParmsMaxIpcdpADelay,
       "parSysParmsMaxIpcdpHsdDelay": parSysParmsMaxIpcdpHsdDelay,
       "parSysParmsMaxIphsdDelay": parSysParmsMaxIphsdDelay,
       "parSysParmsFpdDeJitter": parSysParmsFpdDeJitter,
       "parNetworkingParms": parNetworkingParms,
       "parNetParmCondInitialStgr": parNetParmCondInitialStgr,
       "parNetParmCondPerNodeInterval": parNetParmCondPerNodeInterval,
       "parNetParmCbDelay": parNetParmCbDelay,
       "parNetParmCbOffset": parNetParmCbOffset,
       "parNetParmMsgTimeout": parNetParmMsgTimeout,
       "parNetParmMsgMaxTimeout": parNetParmMsgMaxTimeout,
       "parNetParmMsgMaxTimeoutSat": parNetParmMsgMaxTimeoutSat,
       "parNetParmBlindMaxTimeout": parNetParmBlindMaxTimeout,
       "parNetParmCbMaxTimeout": parNetParmCbMaxTimeout,
       "parNetParmCfTestInterval": parNetParmCfTestInterval,
       "parNetParmCfTestMultiplier": parNetParmCfTestMultiplier,
       "parNetParmNetwWindowSz": parNetParmNetwWindowSz,
       "parNetParmNetwLetWait": parNetParmNetwLetWait,
       "parNetParmCfDelay": parNetParmCfDelay,
       "parNetParmHighTxRate": parNetParmHighTxRate,
       "parNetParmLowTxRate": parNetParmLowTxRate,
       "parNetParmMaxNodeBlks": parNetParmMaxNodeBlks,
       "parNetParmTopoMsgSegSz": parNetParmTopoMsgSegSz}
)
